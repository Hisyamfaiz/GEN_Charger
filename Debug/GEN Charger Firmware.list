
GEN Charger Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ac  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800bb38  0800bb38  0001bb38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5e4  0800c5e4  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5e4  0800c5e4  0001c5e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5ec  0800c5ec  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5ec  0800c5ec  0001c5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5f0  0800c5f0  0001c5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c5f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  200001f0  0800c7e4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a8  0800c7e4  000211a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec59  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000392d  00000000  00000000  0003ee72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  000427a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  00043b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021acf  00000000  00000000  00044d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000134c8  00000000  00000000  00066827  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c21f9  00000000  00000000  00079cef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013bee8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  0013bf64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bb1c 	.word	0x0800bb1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	0800bb1c 	.word	0x0800bb1c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <Constant_Current>:
float 	SetPoint_CC;
float	CC_Value = 0.33*Battery_Capacity;

//test git2
void Constant_Current()
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
//	if(dc<=0)
//		dc=0;
//
//	duty = dc/100;

	if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1 && Eror_Code==0){
 8001496:	2180      	movs	r1, #128	; 0x80
 8001498:	4845      	ldr	r0, [pc, #276]	; (80015b0 <Constant_Current+0x120>)
 800149a:	f005 f91d 	bl	80066d8 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d130      	bne.n	8001506 <Constant_Current+0x76>
 80014a4:	4b43      	ldr	r3, [pc, #268]	; (80015b4 <Constant_Current+0x124>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12c      	bne.n	8001506 <Constant_Current+0x76>
			  duty=duty+0.1;
 80014ac:	4b42      	ldr	r3, [pc, #264]	; (80015b8 <Constant_Current+0x128>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7fe fff5 	bl	80004a0 <__aeabi_f2d>
 80014b6:	a33c      	add	r3, pc, #240	; (adr r3, 80015a8 <Constant_Current+0x118>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7fe fe92 	bl	80001e4 <__adddf3>
 80014c0:	4603      	mov	r3, r0
 80014c2:	460c      	mov	r4, r1
 80014c4:	4618      	mov	r0, r3
 80014c6:	4621      	mov	r1, r4
 80014c8:	f7ff fb1a 	bl	8000b00 <__aeabi_d2f>
 80014cc:	4602      	mov	r2, r0
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <Constant_Current+0x128>)
 80014d0:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4835      	ldr	r0, [pc, #212]	; (80015b0 <Constant_Current+0x120>)
 80014da:	f005 f914 	bl	8006706 <HAL_GPIO_WritePin>
			  HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 80014de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e2:	4836      	ldr	r0, [pc, #216]	; (80015bc <Constant_Current+0x12c>)
 80014e4:	f005 f927 	bl	8006736 <HAL_GPIO_TogglePin>
			  uint32_t p = 1500000;
 80014e8:	4b35      	ldr	r3, [pc, #212]	; (80015c0 <Constant_Current+0x130>)
 80014ea:	607b      	str	r3, [r7, #4]
			  	while(p>0)
 80014ec:	e002      	b.n	80014f4 <Constant_Current+0x64>
			  		p--;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
			  	while(p>0)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f9      	bne.n	80014ee <Constant_Current+0x5e>
			  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	482b      	ldr	r0, [pc, #172]	; (80015b0 <Constant_Current+0x120>)
 8001502:	f005 f900 	bl	8006706 <HAL_GPIO_WritePin>
		}

	if(	flag_trip_overvoltage == 1		||
 8001506:	4b2f      	ldr	r3, [pc, #188]	; (80015c4 <Constant_Current+0x134>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d02b      	beq.n	8001566 <Constant_Current+0xd6>
		flag_trip_overtemperature == 1	||
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <Constant_Current+0x138>)
 8001510:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8001512:	2b01      	cmp	r3, #1
 8001514:	d027      	beq.n	8001566 <Constant_Current+0xd6>
		flag_trip_undertemperature == 1	||
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <Constant_Current+0x13c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 800151a:	2b01      	cmp	r3, #1
 800151c:	d023      	beq.n	8001566 <Constant_Current+0xd6>
		flag_trip_overcurrentcharge == 1||
 800151e:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <Constant_Current+0x140>)
 8001520:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8001522:	2b01      	cmp	r3, #1
 8001524:	d01f      	beq.n	8001566 <Constant_Current+0xd6>
		flag_trip_SOCOverCharge == 1	||
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <Constant_Current+0x144>)
 8001528:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 800152a:	2b01      	cmp	r3, #1
 800152c:	d01b      	beq.n	8001566 <Constant_Current+0xd6>
		flag_trip_shortcircuit == 1		||
 800152e:	4b2a      	ldr	r3, [pc, #168]	; (80015d8 <Constant_Current+0x148>)
 8001530:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8001532:	2b01      	cmp	r3, #1
 8001534:	d017      	beq.n	8001566 <Constant_Current+0xd6>
		flag_trip_systemfailure == 1	||
 8001536:	4b29      	ldr	r3, [pc, #164]	; (80015dc <Constant_Current+0x14c>)
 8001538:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 800153a:	2b01      	cmp	r3, #1
 800153c:	d013      	beq.n	8001566 <Constant_Current+0xd6>
		Flag_ChargerShortCircuit == 1	||
 800153e:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <Constant_Current+0x150>)
 8001540:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8001542:	2b01      	cmp	r3, #1
 8001544:	d00f      	beq.n	8001566 <Constant_Current+0xd6>
		Flag_ChargerOverCurrent == 1	||
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <Constant_Current+0x154>)
 8001548:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00b      	beq.n	8001566 <Constant_Current+0xd6>
		Flag_ChargerOverTemperature == 1||
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <Constant_Current+0x158>)
 8001550:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8001552:	2b01      	cmp	r3, #1
 8001554:	d007      	beq.n	8001566 <Constant_Current+0xd6>
		Flag_ChargerOverVoltage == 1	||
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <Constant_Current+0x15c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 800155a:	2b01      	cmp	r3, #1
 800155c:	d003      	beq.n	8001566 <Constant_Current+0xd6>
		Flag_ChargerLostCommunication==1)
 800155e:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <Constant_Current+0x160>)
 8001560:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8001562:	2b01      	cmp	r3, #1
 8001564:	d106      	bne.n	8001574 <Constant_Current+0xe4>
		{
			duty=0;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <Constant_Current+0x128>)
 8001568:	f04f 0200 	mov.w	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 800156e:	4b21      	ldr	r3, [pc, #132]	; (80015f4 <Constant_Current+0x164>)
 8001570:	2202      	movs	r2, #2
 8001572:	701a      	strb	r2, [r3, #0]
		}

	TIM1->CCR1=duty*TIM1->ARR;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <Constant_Current+0x168>)
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fbc7 	bl	8000d0c <__aeabi_ui2f>
 800157e:	4602      	mov	r2, r0
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <Constant_Current+0x128>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f7ff fc18 	bl	8000dbc <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	4c1a      	ldr	r4, [pc, #104]	; (80015f8 <Constant_Current+0x168>)
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fdd9 	bl	8001148 <__aeabi_f2uiz>
 8001596:	4603      	mov	r3, r0
 8001598:	6363      	str	r3, [r4, #52]	; 0x34

}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	9999999a 	.word	0x9999999a
 80015ac:	3fb99999 	.word	0x3fb99999
 80015b0:	40020800 	.word	0x40020800
 80015b4:	20000638 	.word	0x20000638
 80015b8:	20000d0c 	.word	0x20000d0c
 80015bc:	40020400 	.word	0x40020400
 80015c0:	0016e360 	.word	0x0016e360
 80015c4:	20000d40 	.word	0x20000d40
 80015c8:	2000077c 	.word	0x2000077c
 80015cc:	200008b8 	.word	0x200008b8
 80015d0:	20000a48 	.word	0x20000a48
 80015d4:	20000643 	.word	0x20000643
 80015d8:	20000658 	.word	0x20000658
 80015dc:	20000674 	.word	0x20000674
 80015e0:	200007b8 	.word	0x200007b8
 80015e4:	2000079c 	.word	0x2000079c
 80015e8:	20000691 	.word	0x20000691
 80015ec:	200007bc 	.word	0x200007bc
 80015f0:	200009b8 	.word	0x200009b8
 80015f4:	200006b0 	.word	0x200006b0
 80015f8:	40010000 	.word	0x40010000
 80015fc:	00000000 	.word	0x00000000

08001600 <Constant_Voltage>:
float oNH=-0.05, oNB=-0.025, oNM=-0.01, oNS=-0.0075, oZ=0, oPS=0.0075, oPM=0.01, oPB=0.025, oPH=0.05;
float SetPoint_CV = 25;
extern float Voltage_Charger;

void Constant_Voltage(void)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
//	if(dc>=80)	dc=80;
//	if(dc<=0)	dc=0;
//
//	duty = dc/100;

	if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1 && Eror_Code==0){
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	4843      	ldr	r0, [pc, #268]	; (8001718 <Constant_Voltage+0x118>)
 800160a:	f005 f865 	bl	80066d8 <HAL_GPIO_ReadPin>
 800160e:	4603      	mov	r3, r0
 8001610:	2b01      	cmp	r3, #1
 8001612:	d130      	bne.n	8001676 <Constant_Voltage+0x76>
 8001614:	4b41      	ldr	r3, [pc, #260]	; (800171c <Constant_Voltage+0x11c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12c      	bne.n	8001676 <Constant_Voltage+0x76>
		  duty=duty+0.1;
 800161c:	4b40      	ldr	r3, [pc, #256]	; (8001720 <Constant_Voltage+0x120>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff3d 	bl	80004a0 <__aeabi_f2d>
 8001626:	a33a      	add	r3, pc, #232	; (adr r3, 8001710 <Constant_Voltage+0x110>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe fdda 	bl	80001e4 <__adddf3>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	f7ff fa62 	bl	8000b00 <__aeabi_d2f>
 800163c:	4602      	mov	r2, r0
 800163e:	4b38      	ldr	r3, [pc, #224]	; (8001720 <Constant_Voltage+0x120>)
 8001640:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001648:	4833      	ldr	r0, [pc, #204]	; (8001718 <Constant_Voltage+0x118>)
 800164a:	f005 f85c 	bl	8006706 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 800164e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001652:	4834      	ldr	r0, [pc, #208]	; (8001724 <Constant_Voltage+0x124>)
 8001654:	f005 f86f 	bl	8006736 <HAL_GPIO_TogglePin>
		  uint32_t p = 1500000;
 8001658:	4b33      	ldr	r3, [pc, #204]	; (8001728 <Constant_Voltage+0x128>)
 800165a:	607b      	str	r3, [r7, #4]
		  	while(p>0)
 800165c:	e002      	b.n	8001664 <Constant_Voltage+0x64>
		  		p--;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3b01      	subs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
		  	while(p>0)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f9      	bne.n	800165e <Constant_Voltage+0x5e>
		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
 800166a:	2200      	movs	r2, #0
 800166c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <Constant_Voltage+0x118>)
 8001672:	f005 f848 	bl	8006706 <HAL_GPIO_WritePin>
	}
	if(	flag_trip_overvoltage == 1		||
 8001676:	4b2d      	ldr	r3, [pc, #180]	; (800172c <Constant_Voltage+0x12c>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d027      	beq.n	80016ce <Constant_Voltage+0xce>
		flag_trip_overtemperature == 1	||
 800167e:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <Constant_Voltage+0x130>)
 8001680:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8001682:	2b01      	cmp	r3, #1
 8001684:	d023      	beq.n	80016ce <Constant_Voltage+0xce>
		flag_trip_undertemperature == 1	||
 8001686:	4b2b      	ldr	r3, [pc, #172]	; (8001734 <Constant_Voltage+0x134>)
 8001688:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 800168a:	2b01      	cmp	r3, #1
 800168c:	d01f      	beq.n	80016ce <Constant_Voltage+0xce>
		flag_trip_overcurrentcharge == 1||
 800168e:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <Constant_Voltage+0x138>)
 8001690:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8001692:	2b01      	cmp	r3, #1
 8001694:	d01b      	beq.n	80016ce <Constant_Voltage+0xce>
		flag_trip_SOCOverCharge == 1	||
 8001696:	4b29      	ldr	r3, [pc, #164]	; (800173c <Constant_Voltage+0x13c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 800169a:	2b01      	cmp	r3, #1
 800169c:	d017      	beq.n	80016ce <Constant_Voltage+0xce>
		flag_trip_shortcircuit == 1		||
 800169e:	4b28      	ldr	r3, [pc, #160]	; (8001740 <Constant_Voltage+0x140>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d013      	beq.n	80016ce <Constant_Voltage+0xce>
		flag_trip_systemfailure == 1	||
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <Constant_Voltage+0x144>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d00f      	beq.n	80016ce <Constant_Voltage+0xce>
		Flag_ChargerShortCircuit == 1	||
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <Constant_Voltage+0x148>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d00b      	beq.n	80016ce <Constant_Voltage+0xce>
		Flag_ChargerOverCurrent == 1	||
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <Constant_Voltage+0x14c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d007      	beq.n	80016ce <Constant_Voltage+0xce>
		Flag_ChargerOverTemperature == 1||
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <Constant_Voltage+0x150>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d003      	beq.n	80016ce <Constant_Voltage+0xce>
		Flag_ChargerOverVoltage == 1	)
 80016c6:	4b23      	ldr	r3, [pc, #140]	; (8001754 <Constant_Voltage+0x154>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d106      	bne.n	80016dc <Constant_Voltage+0xdc>
		{
			duty=0;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <Constant_Voltage+0x120>)
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <Constant_Voltage+0x158>)
 80016d8:	2202      	movs	r2, #2
 80016da:	701a      	strb	r2, [r3, #0]
		}
	TIM1->CCR1=duty*TIM1->ARR;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <Constant_Voltage+0x15c>)
 80016de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fb13 	bl	8000d0c <__aeabi_ui2f>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <Constant_Voltage+0x120>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f7ff fb64 	bl	8000dbc <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4c19      	ldr	r4, [pc, #100]	; (800175c <Constant_Voltage+0x15c>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fd25 	bl	8001148 <__aeabi_f2uiz>
 80016fe:	4603      	mov	r3, r0
 8001700:	6363      	str	r3, [r4, #52]	; 0x34
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	bd90      	pop	{r4, r7, pc}
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	9999999a 	.word	0x9999999a
 8001714:	3fb99999 	.word	0x3fb99999
 8001718:	40020800 	.word	0x40020800
 800171c:	20000638 	.word	0x20000638
 8001720:	20000d0c 	.word	0x20000d0c
 8001724:	40020400 	.word	0x40020400
 8001728:	0016e360 	.word	0x0016e360
 800172c:	20000d40 	.word	0x20000d40
 8001730:	2000077c 	.word	0x2000077c
 8001734:	200008b8 	.word	0x200008b8
 8001738:	20000a48 	.word	0x20000a48
 800173c:	20000643 	.word	0x20000643
 8001740:	20000658 	.word	0x20000658
 8001744:	20000674 	.word	0x20000674
 8001748:	200007b8 	.word	0x200007b8
 800174c:	2000079c 	.word	0x2000079c
 8001750:	20000691 	.word	0x20000691
 8001754:	200007bc 	.word	0x200007bc
 8001758:	200006b0 	.word	0x200006b0
 800175c:	40010000 	.word	0x40010000

08001760 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 3, 100)!=HAL_OK){
 800176a:	88f9      	ldrh	r1, [r7, #6]
 800176c:	2364      	movs	r3, #100	; 0x64
 800176e:	2203      	movs	r2, #3
 8001770:	4808      	ldr	r0, [pc, #32]	; (8001794 <EEPROM_isDeviceReady+0x34>)
 8001772:	f005 fb29 	bl	8006dc8 <HAL_I2C_IsDeviceReady>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d007      	beq.n	800178c <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800177c:	2140      	movs	r1, #64	; 0x40
 800177e:	4806      	ldr	r0, [pc, #24]	; (8001798 <EEPROM_isDeviceReady+0x38>)
 8001780:	f004 ffd9 	bl	8006736 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8001784:	2064      	movs	r0, #100	; 0x64
 8001786:	f002 ff27 	bl	80045d8 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800178a:	e7f7      	b.n	800177c <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000e58 	.word	0x20000e58
 8001798:	40020800 	.word	0x40020800

0800179c <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af04      	add	r7, sp, #16
 80017a2:	4603      	mov	r3, r0
 80017a4:	460a      	mov	r2, r1
 80017a6:	80fb      	strh	r3, [r7, #6]
 80017a8:	4613      	mov	r3, r2
 80017aa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADDRESS,addr,64,&data,1,10);
 80017ac:	88fa      	ldrh	r2, [r7, #6]
 80017ae:	230a      	movs	r3, #10
 80017b0:	9302      	str	r3, [sp, #8]
 80017b2:	2301      	movs	r3, #1
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	1d7b      	adds	r3, r7, #5
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2340      	movs	r3, #64	; 0x40
 80017bc:	21a0      	movs	r1, #160	; 0xa0
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <EEPROM_WriteData+0x38>)
 80017c0:	f005 fa08 	bl	8006bd4 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f002 ff07 	bl	80045d8 <HAL_Delay>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000e58 	.word	0x20000e58

080017d8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80017de:	463b      	mov	r3, r7
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80017ea:	4b51      	ldr	r3, [pc, #324]	; (8001930 <MX_ADC1_Init+0x158>)
 80017ec:	4a51      	ldr	r2, [pc, #324]	; (8001934 <MX_ADC1_Init+0x15c>)
 80017ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80017f0:	4b4f      	ldr	r3, [pc, #316]	; (8001930 <MX_ADC1_Init+0x158>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017f6:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <MX_ADC1_Init+0x158>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80017fc:	4b4c      	ldr	r3, [pc, #304]	; (8001930 <MX_ADC1_Init+0x158>)
 80017fe:	2201      	movs	r2, #1
 8001800:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001802:	4b4b      	ldr	r3, [pc, #300]	; (8001930 <MX_ADC1_Init+0x158>)
 8001804:	2201      	movs	r2, #1
 8001806:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001808:	4b49      	ldr	r3, [pc, #292]	; (8001930 <MX_ADC1_Init+0x158>)
 800180a:	2200      	movs	r2, #0
 800180c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <MX_ADC1_Init+0x158>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <MX_ADC1_Init+0x158>)
 8001816:	4a48      	ldr	r2, [pc, #288]	; (8001938 <MX_ADC1_Init+0x160>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b45      	ldr	r3, [pc, #276]	; (8001930 <MX_ADC1_Init+0x158>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001820:	4b43      	ldr	r3, [pc, #268]	; (8001930 <MX_ADC1_Init+0x158>)
 8001822:	2208      	movs	r2, #8
 8001824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001826:	4b42      	ldr	r3, [pc, #264]	; (8001930 <MX_ADC1_Init+0x158>)
 8001828:	2201      	movs	r2, #1
 800182a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182c:	4b40      	ldr	r3, [pc, #256]	; (8001930 <MX_ADC1_Init+0x158>)
 800182e:	2201      	movs	r2, #1
 8001830:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001832:	483f      	ldr	r0, [pc, #252]	; (8001930 <MX_ADC1_Init+0x158>)
 8001834:	f002 fef2 	bl	800461c <HAL_ADC_Init>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800183e:	f001 f909 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001842:	2301      	movs	r3, #1
 8001844:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800184a:	2306      	movs	r3, #6
 800184c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184e:	463b      	mov	r3, r7
 8001850:	4619      	mov	r1, r3
 8001852:	4837      	ldr	r0, [pc, #220]	; (8001930 <MX_ADC1_Init+0x158>)
 8001854:	f003 f80a 	bl	800486c <HAL_ADC_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800185e:	f001 f8f9 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001862:	2302      	movs	r3, #2
 8001864:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001866:	2302      	movs	r3, #2
 8001868:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800186a:	463b      	mov	r3, r7
 800186c:	4619      	mov	r1, r3
 800186e:	4830      	ldr	r0, [pc, #192]	; (8001930 <MX_ADC1_Init+0x158>)
 8001870:	f002 fffc 	bl	800486c <HAL_ADC_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800187a:	f001 f8eb 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800187e:	2303      	movs	r3, #3
 8001880:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001882:	2303      	movs	r3, #3
 8001884:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001886:	463b      	mov	r3, r7
 8001888:	4619      	mov	r1, r3
 800188a:	4829      	ldr	r0, [pc, #164]	; (8001930 <MX_ADC1_Init+0x158>)
 800188c:	f002 ffee 	bl	800486c <HAL_ADC_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001896:	f001 f8dd 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800189a:	230e      	movs	r3, #14
 800189c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800189e:	2304      	movs	r3, #4
 80018a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018a2:	463b      	mov	r3, r7
 80018a4:	4619      	mov	r1, r3
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <MX_ADC1_Init+0x158>)
 80018a8:	f002 ffe0 	bl	800486c <HAL_ADC_ConfigChannel>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80018b2:	f001 f8cf 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80018b6:	230f      	movs	r3, #15
 80018b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80018ba:	2305      	movs	r3, #5
 80018bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018be:	463b      	mov	r3, r7
 80018c0:	4619      	mov	r1, r3
 80018c2:	481b      	ldr	r0, [pc, #108]	; (8001930 <MX_ADC1_Init+0x158>)
 80018c4:	f002 ffd2 	bl	800486c <HAL_ADC_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80018ce:	f001 f8c1 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80018d2:	230b      	movs	r3, #11
 80018d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80018d6:	2306      	movs	r3, #6
 80018d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018da:	463b      	mov	r3, r7
 80018dc:	4619      	mov	r1, r3
 80018de:	4814      	ldr	r0, [pc, #80]	; (8001930 <MX_ADC1_Init+0x158>)
 80018e0:	f002 ffc4 	bl	800486c <HAL_ADC_ConfigChannel>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80018ea:	f001 f8b3 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80018ee:	230c      	movs	r3, #12
 80018f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80018f2:	2307      	movs	r3, #7
 80018f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f6:	463b      	mov	r3, r7
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_ADC1_Init+0x158>)
 80018fc:	f002 ffb6 	bl	800486c <HAL_ADC_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001906:	f001 f8a5 	bl	8002a54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800190a:	2308      	movs	r3, #8
 800190c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800190e:	2308      	movs	r3, #8
 8001910:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001912:	463b      	mov	r3, r7
 8001914:	4619      	mov	r1, r3
 8001916:	4806      	ldr	r0, [pc, #24]	; (8001930 <MX_ADC1_Init+0x158>)
 8001918:	f002 ffa8 	bl	800486c <HAL_ADC_ConfigChannel>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001922:	f001 f897 	bl	8002a54 <Error_Handler>
  }

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000d74 	.word	0x20000d74
 8001934:	40012000 	.word	0x40012000
 8001938:	0f000001 	.word	0x0f000001

0800193c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a4a      	ldr	r2, [pc, #296]	; (8001a84 <HAL_ADC_MspInit+0x148>)
 800195a:	4293      	cmp	r3, r2
 800195c:	f040 808d 	bne.w	8001a7a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	4a47      	ldr	r2, [pc, #284]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a40      	ldr	r2, [pc, #256]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	4a39      	ldr	r2, [pc, #228]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6313      	str	r3, [r2, #48]	; 0x30
 80019a8:	4b37      	ldr	r3, [pc, #220]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 80019aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	4b33      	ldr	r3, [pc, #204]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	6313      	str	r3, [r2, #48]	; 0x30
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <HAL_ADC_MspInit+0x14c>)
 80019c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80019d0:	2336      	movs	r3, #54	; 0x36
 80019d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019d4:	2303      	movs	r3, #3
 80019d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	482a      	ldr	r0, [pc, #168]	; (8001a8c <HAL_ADC_MspInit+0x150>)
 80019e4:	f004 fcda 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019e8:	230e      	movs	r3, #14
 80019ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019ec:	2303      	movs	r3, #3
 80019ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	4619      	mov	r1, r3
 80019fa:	4825      	ldr	r0, [pc, #148]	; (8001a90 <HAL_ADC_MspInit+0x154>)
 80019fc:	f004 fcce 	bl	800639c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a00:	2301      	movs	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a04:	2303      	movs	r3, #3
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4820      	ldr	r0, [pc, #128]	; (8001a94 <HAL_ADC_MspInit+0x158>)
 8001a14:	f004 fcc2 	bl	800639c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a18:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a1a:	4a20      	ldr	r2, [pc, #128]	; (8001a9c <HAL_ADC_MspInit+0x160>)
 8001a1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a24:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a30:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a36:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a3e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a46:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a4e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a56:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a5e:	480e      	ldr	r0, [pc, #56]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a60:	f004 f90e 	bl	8005c80 <HAL_DMA_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8001a6a:	f000 fff3 	bl	8002a54 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a72:	639a      	str	r2, [r3, #56]	; 0x38
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_ADC_MspInit+0x15c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001a7a:	bf00      	nop
 8001a7c:	3730      	adds	r7, #48	; 0x30
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40012000 	.word	0x40012000
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020800 	.word	0x40020800
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020400 	.word	0x40020400
 8001a98:	20000dbc 	.word	0x20000dbc
 8001a9c:	40026410 	.word	0x40026410

08001aa0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001aa4:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001aa6:	4a18      	ldr	r2, [pc, #96]	; (8001b08 <MX_CAN1_Init+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8001aaa:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001aac:	2204      	movs	r2, #4
 8001aae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001ab6:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001abe:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8001ac2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ac6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001aca:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001acc:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ade:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001ae4:	4b07      	ldr	r3, [pc, #28]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001aea:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001af0:	4804      	ldr	r0, [pc, #16]	; (8001b04 <MX_CAN1_Init+0x64>)
 8001af2:	f003 f961 	bl	8004db8 <HAL_CAN_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001afc:	f000 ffaa 	bl	8002a54 <Error_Handler>
  }

}
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000e30 	.word	0x20000e30
 8001b08:	40006400 	.word	0x40006400

08001b0c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <HAL_CAN_MspInit+0xa4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d13c      	bne.n	8001ba8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_CAN_MspInit+0xa8>)
 8001b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b36:	4a1f      	ldr	r2, [pc, #124]	; (8001bb4 <HAL_CAN_MspInit+0xa8>)
 8001b38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <HAL_CAN_MspInit+0xa8>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	613b      	str	r3, [r7, #16]
 8001b48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_CAN_MspInit+0xa8>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <HAL_CAN_MspInit+0xa8>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_CAN_MspInit+0xa8>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b78:	2309      	movs	r3, #9
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <HAL_CAN_MspInit+0xac>)
 8001b84:	f004 fc0a 	bl	800639c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	2015      	movs	r0, #21
 8001b8e:	f004 f840 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001b92:	2015      	movs	r0, #21
 8001b94:	f004 f859 	bl	8005c4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2016      	movs	r0, #22
 8001b9e:	f004 f838 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001ba2:	2016      	movs	r0, #22
 8001ba4:	f004 f851 	bl	8005c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40006400 	.word	0x40006400
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40020000 	.word	0x40020000

08001bbc <CAN_Setting>:
  }
} 

/* USER CODE BEGIN 1 */
void CAN_Setting(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	61fb      	str	r3, [r7, #28]
	//sFilterConfig.FilterIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001be2:	2301      	movs	r3, #1
 8001be4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8001be6:	230e      	movs	r3, #14
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 8001bea:	463b      	mov	r3, r7
 8001bec:	4619      	mov	r1, r3
 8001bee:	4810      	ldr	r0, [pc, #64]	; (8001c30 <CAN_Setting+0x74>)
 8001bf0:	f003 f9de 	bl	8004fb0 <HAL_CAN_ConfigFilter>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <CAN_Setting+0x42>
 8001bfa:	f000 ff2b 	bl	8002a54 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 8001bfe:	480c      	ldr	r0, [pc, #48]	; (8001c30 <CAN_Setting+0x74>)
 8001c00:	f003 fab6 	bl	8005170 <HAL_CAN_Start>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <CAN_Setting+0x52>
 8001c0a:	f000 ff23 	bl	8002a54 <Error_Handler>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <CAN_Setting+0x78>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <CAN_Setting+0x78>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <CAN_Setting+0x78>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c20:	2102      	movs	r1, #2
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <CAN_Setting+0x74>)
 8001c24:	f003 fcd3 	bl	80055ce <HAL_CAN_ActivateNotification>
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000e30 	.word	0x20000e30
 8001c34:	20000ff4 	.word	0x20000ff4

08001c38 <CAN_Rx_Process>:
  Tx_Header.DLC = 8;
  if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
}

void CAN_Rx_Process(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 8001c3e:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <CAN_Rx_Process+0x148>)
 8001c40:	4a50      	ldr	r2, [pc, #320]	; (8001d84 <CAN_Rx_Process+0x14c>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	4850      	ldr	r0, [pc, #320]	; (8001d88 <CAN_Rx_Process+0x150>)
 8001c46:	f003 fbb1 	bl	80053ac <HAL_CAN_GetRxMessage>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d107      	bne.n	8001c60 <CAN_Rx_Process+0x28>
	HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 8001c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c54:	484d      	ldr	r0, [pc, #308]	; (8001d8c <CAN_Rx_Process+0x154>)
 8001c56:	f004 fd6e 	bl	8006736 <HAL_GPIO_TogglePin>
	Communication_Flag = 1;
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <CAN_Rx_Process+0x158>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
}
		if(Handshaking==0){
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <CAN_Rx_Process+0x15c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f040 80dc 	bne.w	8001e22 <CAN_Rx_Process+0x1ea>
			if(identified == 0){
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <CAN_Rx_Process+0x160>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d129      	bne.n	8001cc6 <CAN_Rx_Process+0x8e>
				Tx_Header.StdId = 0x1B2;
 8001c72:	4b4a      	ldr	r3, [pc, #296]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001c74:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8001c78:	601a      	str	r2, [r3, #0]
				Tx_data[0] = 0;
 8001c7a:	4b49      	ldr	r3, [pc, #292]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
				Tx_data[1] = 0;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	705a      	strb	r2, [r3, #1]
				Tx_data[2] = 0;
 8001c86:	4b46      	ldr	r3, [pc, #280]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	709a      	strb	r2, [r3, #2]
				Tx_data[3] = 0;
 8001c8c:	4b44      	ldr	r3, [pc, #272]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	70da      	strb	r2, [r3, #3]
				Tx_data[4] = 0;
 8001c92:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	711a      	strb	r2, [r3, #4]
				Tx_data[5] = 0;
 8001c98:	4b41      	ldr	r3, [pc, #260]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	715a      	strb	r2, [r3, #5]
				Tx_data[6] = 0;
 8001c9e:	4b40      	ldr	r3, [pc, #256]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	719a      	strb	r2, [r3, #6]
				Tx_data[7] = 0x01;
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	71da      	strb	r2, [r3, #7]
				Tx_Header.DLC = 8;
 8001caa:	4b3c      	ldr	r3, [pc, #240]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001cac:	2208      	movs	r2, #8
 8001cae:	611a      	str	r2, [r3, #16]
				if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	; (8001da4 <CAN_Rx_Process+0x16c>)
 8001cb2:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <CAN_Rx_Process+0x150>)
 8001cb8:	f003 fa9e 	bl	80051f8 <HAL_CAN_AddTxMessage>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <CAN_Rx_Process+0x8e>
 8001cc2:	f000 fec7 	bl	8002a54 <Error_Handler>
			}
		// CAN ID receive (Handshaking)
			if(Rx_Header.ExtId>>20==0x0E0){
 8001cc6:	4b2f      	ldr	r3, [pc, #188]	; (8001d84 <CAN_Rx_Process+0x14c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0d1b      	lsrs	r3, r3, #20
 8001ccc:	2be0      	cmp	r3, #224	; 0xe0
 8001cce:	f040 80a8 	bne.w	8001e22 <CAN_Rx_Process+0x1ea>
				if(Rx_data[6]==0x55 && identified==0){
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <CAN_Rx_Process+0x148>)
 8001cd4:	799b      	ldrb	r3, [r3, #6]
 8001cd6:	2b55      	cmp	r3, #85	; 0x55
 8001cd8:	d12f      	bne.n	8001d3a <CAN_Rx_Process+0x102>
 8001cda:	4b2f      	ldr	r3, [pc, #188]	; (8001d98 <CAN_Rx_Process+0x160>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d12b      	bne.n	8001d3a <CAN_Rx_Process+0x102>
					Tx_Header.StdId = 0x0E2;
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001ce4:	22e2      	movs	r2, #226	; 0xe2
 8001ce6:	601a      	str	r2, [r3, #0]
					Tx_data[0] = 1;
 8001ce8:	4b2d      	ldr	r3, [pc, #180]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = 2;
 8001cee:	4b2c      	ldr	r3, [pc, #176]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = 3;
 8001cf4:	4b2a      	ldr	r3, [pc, #168]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 4;
 8001cfa:	4b29      	ldr	r3, [pc, #164]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 5;
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d02:	2205      	movs	r2, #5
 8001d04:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 6;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d08:	2206      	movs	r2, #6
 8001d0a:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0x55;
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d0e:	2255      	movs	r2, #85	; 0x55
 8001d10:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 8;
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d14:	2208      	movs	r2, #8
 8001d16:	71da      	strb	r2, [r3, #7]

					Tx_Header.DLC = 8;
 8001d18:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001d1a:	2208      	movs	r2, #8
 8001d1c:	611a      	str	r2, [r3, #16]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <CAN_Rx_Process+0x16c>)
 8001d20:	4a1f      	ldr	r2, [pc, #124]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d22:	491e      	ldr	r1, [pc, #120]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001d24:	4818      	ldr	r0, [pc, #96]	; (8001d88 <CAN_Rx_Process+0x150>)
 8001d26:	f003 fa67 	bl	80051f8 <HAL_CAN_AddTxMessage>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <CAN_Rx_Process+0xfc>
 8001d30:	f000 fe90 	bl	8002a54 <Error_Handler>
					identified = 1;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <CAN_Rx_Process+0x160>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
				}

				if(Rx_data[6]==0xAA && identified==1){
 8001d3a:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <CAN_Rx_Process+0x148>)
 8001d3c:	799b      	ldrb	r3, [r3, #6]
 8001d3e:	2baa      	cmp	r3, #170	; 0xaa
 8001d40:	d16f      	bne.n	8001e22 <CAN_Rx_Process+0x1ea>
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <CAN_Rx_Process+0x160>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d16b      	bne.n	8001e22 <CAN_Rx_Process+0x1ea>
					Tx_data[6] = 0xAA;
 8001d4a:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d4c:	22aa      	movs	r2, #170	; 0xaa
 8001d4e:	719a      	strb	r2, [r3, #6]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <CAN_Rx_Process+0x16c>)
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <CAN_Rx_Process+0x168>)
 8001d54:	4911      	ldr	r1, [pc, #68]	; (8001d9c <CAN_Rx_Process+0x164>)
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <CAN_Rx_Process+0x150>)
 8001d58:	f003 fa4e 	bl	80051f8 <HAL_CAN_AddTxMessage>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <CAN_Rx_Process+0x12e>
 8001d62:	f000 fe77 	bl	8002a54 <Error_Handler>
					UNIQUE_Code = Rx_Header.ExtId & 0x000FFFFF;
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <CAN_Rx_Process+0x14c>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d6e:	4a0e      	ldr	r2, [pc, #56]	; (8001da8 <CAN_Rx_Process+0x170>)
 8001d70:	6013      	str	r3, [r2, #0]
					Handshaking=1;
 8001d72:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <CAN_Rx_Process+0x15c>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]

					uint32_t Delay_Charger = 20000000;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <CAN_Rx_Process+0x174>)
 8001d7a:	607b      	str	r3, [r7, #4]
					while(Delay_Charger>0)
 8001d7c:	e01b      	b.n	8001db6 <CAN_Rx_Process+0x17e>
 8001d7e:	bf00      	nop
 8001d80:	20000e24 	.word	0x20000e24
 8001d84:	20000fd8 	.word	0x20000fd8
 8001d88:	20000e30 	.word	0x20000e30
 8001d8c:	40020400 	.word	0x40020400
 8001d90:	2000079d 	.word	0x2000079d
 8001d94:	20000a64 	.word	0x20000a64
 8001d98:	2000020c 	.word	0x2000020c
 8001d9c:	20000ff4 	.word	0x20000ff4
 8001da0:	20000e1c 	.word	0x20000e1c
 8001da4:	20000e2c 	.word	0x20000e2c
 8001da8:	20000a4c 	.word	0x20000a4c
 8001dac:	01312d00 	.word	0x01312d00
					Delay_Charger--;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	607b      	str	r3, [r7, #4]
					while(Delay_Charger>0)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <CAN_Rx_Process+0x178>
					Charger_Mode=1;
 8001dbc:	4b9c      	ldr	r3, [pc, #624]	; (8002030 <CAN_Rx_Process+0x3f8>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]

					Tx_Header.StdId = 0x0C1;
 8001dc2:	4b9c      	ldr	r3, [pc, #624]	; (8002034 <CAN_Rx_Process+0x3fc>)
 8001dc4:	22c1      	movs	r2, #193	; 0xc1
 8001dc6:	601a      	str	r2, [r3, #0]
					Tx_data[0] = UNIQUE_Code >> 12;
 8001dc8:	4b9b      	ldr	r3, [pc, #620]	; (8002038 <CAN_Rx_Process+0x400>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0b1b      	lsrs	r3, r3, #12
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b9a      	ldr	r3, [pc, #616]	; (800203c <CAN_Rx_Process+0x404>)
 8001dd2:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = UNIQUE_Code >> 4;
 8001dd4:	4b98      	ldr	r3, [pc, #608]	; (8002038 <CAN_Rx_Process+0x400>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	091b      	lsrs	r3, r3, #4
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b97      	ldr	r3, [pc, #604]	; (800203c <CAN_Rx_Process+0x404>)
 8001dde:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = UNIQUE_Code << 4;
 8001de0:	4b95      	ldr	r3, [pc, #596]	; (8002038 <CAN_Rx_Process+0x400>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b94      	ldr	r3, [pc, #592]	; (800203c <CAN_Rx_Process+0x404>)
 8001dec:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 0;
 8001dee:	4b93      	ldr	r3, [pc, #588]	; (800203c <CAN_Rx_Process+0x404>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 0;
 8001df4:	4b91      	ldr	r3, [pc, #580]	; (800203c <CAN_Rx_Process+0x404>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 0;
 8001dfa:	4b90      	ldr	r3, [pc, #576]	; (800203c <CAN_Rx_Process+0x404>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0;
 8001e00:	4b8e      	ldr	r3, [pc, #568]	; (800203c <CAN_Rx_Process+0x404>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 0;
 8001e06:	4b8d      	ldr	r3, [pc, #564]	; (800203c <CAN_Rx_Process+0x404>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	71da      	strb	r2, [r3, #7]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <CAN_Rx_Process+0x408>)
 8001e0e:	4a8b      	ldr	r2, [pc, #556]	; (800203c <CAN_Rx_Process+0x404>)
 8001e10:	4988      	ldr	r1, [pc, #544]	; (8002034 <CAN_Rx_Process+0x3fc>)
 8001e12:	488c      	ldr	r0, [pc, #560]	; (8002044 <CAN_Rx_Process+0x40c>)
 8001e14:	f003 f9f0 	bl	80051f8 <HAL_CAN_AddTxMessage>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <CAN_Rx_Process+0x1ea>
 8001e1e:	f000 fe19 	bl	8002a54 <Error_Handler>
				}
			}
		}

		if(Handshaking==1){
 8001e22:	4b89      	ldr	r3, [pc, #548]	; (8002048 <CAN_Rx_Process+0x410>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	f040 8180 	bne.w	800212c <CAN_Rx_Process+0x4f4>
		// CAN ID receive #1 (0x7b1)
		if(Rx_Header.ExtId == (0x0B0<<20|UNIQUE_Code)){
 8001e2c:	4b87      	ldr	r3, [pc, #540]	; (800204c <CAN_Rx_Process+0x414>)
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4b81      	ldr	r3, [pc, #516]	; (8002038 <CAN_Rx_Process+0x400>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d11f      	bne.n	8001e7c <CAN_Rx_Process+0x244>
			Batt_voltage.m_bytes[0] = Rx_data[0];
 8001e3c:	4b84      	ldr	r3, [pc, #528]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b84      	ldr	r3, [pc, #528]	; (8002054 <CAN_Rx_Process+0x41c>)
 8001e42:	701a      	strb	r2, [r3, #0]
			Batt_voltage.m_bytes[1] = Rx_data[1];
 8001e44:	4b82      	ldr	r3, [pc, #520]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e46:	785a      	ldrb	r2, [r3, #1]
 8001e48:	4b82      	ldr	r3, [pc, #520]	; (8002054 <CAN_Rx_Process+0x41c>)
 8001e4a:	705a      	strb	r2, [r3, #1]
			Batt_current.m_bytes[0] = Rx_data[2];
 8001e4c:	4b80      	ldr	r3, [pc, #512]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e4e:	789a      	ldrb	r2, [r3, #2]
 8001e50:	4b81      	ldr	r3, [pc, #516]	; (8002058 <CAN_Rx_Process+0x420>)
 8001e52:	701a      	strb	r2, [r3, #0]
			Batt_current.m_bytes[1] = Rx_data[3];
 8001e54:	4b7e      	ldr	r3, [pc, #504]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e56:	78da      	ldrb	r2, [r3, #3]
 8001e58:	4b7f      	ldr	r3, [pc, #508]	; (8002058 <CAN_Rx_Process+0x420>)
 8001e5a:	705a      	strb	r2, [r3, #1]
			Batt_SOC.m_bytes[0] = Rx_data[4];
 8001e5c:	4b7c      	ldr	r3, [pc, #496]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e5e:	791a      	ldrb	r2, [r3, #4]
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <CAN_Rx_Process+0x424>)
 8001e62:	701a      	strb	r2, [r3, #0]
			Batt_SOC.m_bytes[1] = Rx_data[5];
 8001e64:	4b7a      	ldr	r3, [pc, #488]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e66:	795a      	ldrb	r2, [r3, #5]
 8001e68:	4b7c      	ldr	r3, [pc, #496]	; (800205c <CAN_Rx_Process+0x424>)
 8001e6a:	705a      	strb	r2, [r3, #1]
			Batt_temp.m_bytes[0] = Rx_data[6];
 8001e6c:	4b78      	ldr	r3, [pc, #480]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e6e:	799a      	ldrb	r2, [r3, #6]
 8001e70:	4b7b      	ldr	r3, [pc, #492]	; (8002060 <CAN_Rx_Process+0x428>)
 8001e72:	701a      	strb	r2, [r3, #0]
			Batt_temp.m_bytes[1] = Rx_data[7];
 8001e74:	4b76      	ldr	r3, [pc, #472]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e76:	79da      	ldrb	r2, [r3, #7]
 8001e78:	4b79      	ldr	r3, [pc, #484]	; (8002060 <CAN_Rx_Process+0x428>)
 8001e7a:	705a      	strb	r2, [r3, #1]
		}

		// CAN ID receive #2 (0x7b2)
		if(Rx_Header.ExtId == (0x0B1<<20|UNIQUE_Code)){
 8001e7c:	4b73      	ldr	r3, [pc, #460]	; (800204c <CAN_Rx_Process+0x414>)
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <CAN_Rx_Process+0x400>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f043 6331 	orr.w	r3, r3, #185597952	; 0xb100000
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d161      	bne.n	8001f50 <CAN_Rx_Process+0x318>
			Batt_capacity.m_bytes[0] = Rx_data[0];
 8001e8c:	4b70      	ldr	r3, [pc, #448]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e8e:	781a      	ldrb	r2, [r3, #0]
 8001e90:	4b74      	ldr	r3, [pc, #464]	; (8002064 <CAN_Rx_Process+0x42c>)
 8001e92:	701a      	strb	r2, [r3, #0]
			Batt_capacity.m_bytes[1] = Rx_data[1];
 8001e94:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e96:	785a      	ldrb	r2, [r3, #1]
 8001e98:	4b72      	ldr	r3, [pc, #456]	; (8002064 <CAN_Rx_Process+0x42c>)
 8001e9a:	705a      	strb	r2, [r3, #1]
			Batt_SOH.m_bytes[0] = Rx_data[2];
 8001e9c:	4b6c      	ldr	r3, [pc, #432]	; (8002050 <CAN_Rx_Process+0x418>)
 8001e9e:	789a      	ldrb	r2, [r3, #2]
 8001ea0:	4b71      	ldr	r3, [pc, #452]	; (8002068 <CAN_Rx_Process+0x430>)
 8001ea2:	701a      	strb	r2, [r3, #0]
			Batt_SOH.m_bytes[1] = Rx_data[3];
 8001ea4:	4b6a      	ldr	r3, [pc, #424]	; (8002050 <CAN_Rx_Process+0x418>)
 8001ea6:	78da      	ldrb	r2, [r3, #3]
 8001ea8:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <CAN_Rx_Process+0x430>)
 8001eaa:	705a      	strb	r2, [r3, #1]
			Batt_cycle.m_bytes[0] = Rx_data[4];
 8001eac:	4b68      	ldr	r3, [pc, #416]	; (8002050 <CAN_Rx_Process+0x418>)
 8001eae:	791a      	ldrb	r2, [r3, #4]
 8001eb0:	4b6e      	ldr	r3, [pc, #440]	; (800206c <CAN_Rx_Process+0x434>)
 8001eb2:	701a      	strb	r2, [r3, #0]
			Batt_cycle.m_bytes[1] = Rx_data[5];
 8001eb4:	4b66      	ldr	r3, [pc, #408]	; (8002050 <CAN_Rx_Process+0x418>)
 8001eb6:	795a      	ldrb	r2, [r3, #5]
 8001eb8:	4b6c      	ldr	r3, [pc, #432]	; (800206c <CAN_Rx_Process+0x434>)
 8001eba:	705a      	strb	r2, [r3, #1]

			flag_trip_shortcircuit = Rx_data[6]&0x01;
 8001ebc:	4b64      	ldr	r3, [pc, #400]	; (8002050 <CAN_Rx_Process+0x418>)
 8001ebe:	799b      	ldrb	r3, [r3, #6]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <CAN_Rx_Process+0x438>)
 8001ec8:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentdischarge = (Rx_data[6]>>1)&0x01;
 8001eca:	4b61      	ldr	r3, [pc, #388]	; (8002050 <CAN_Rx_Process+0x418>)
 8001ecc:	799b      	ldrb	r3, [r3, #6]
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	4b66      	ldr	r3, [pc, #408]	; (8002074 <CAN_Rx_Process+0x43c>)
 8001eda:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentcharge = (Rx_data[6]>>2)&0x01;
 8001edc:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <CAN_Rx_Process+0x418>)
 8001ede:	799b      	ldrb	r3, [r3, #6]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <CAN_Rx_Process+0x440>)
 8001eec:	701a      	strb	r2, [r3, #0]
			flag_trip_overtemperature = (Rx_data[6]>>3)&0x01;
 8001eee:	4b58      	ldr	r3, [pc, #352]	; (8002050 <CAN_Rx_Process+0x418>)
 8001ef0:	799b      	ldrb	r3, [r3, #6]
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b5f      	ldr	r3, [pc, #380]	; (800207c <CAN_Rx_Process+0x444>)
 8001efe:	701a      	strb	r2, [r3, #0]
			flag_trip_undertemperature = (Rx_data[6]>>4)&0x01;
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f02:	799b      	ldrb	r3, [r3, #6]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	4b5c      	ldr	r3, [pc, #368]	; (8002080 <CAN_Rx_Process+0x448>)
 8001f10:	701a      	strb	r2, [r3, #0]
	//			flag_trip_overtemperature = (Rx_data[6]>>5)&0x01;
	//			flag_trip_undertemperature = (Rx_data[6]>>6)&0x01;
			flag_trip_unbalance = (Rx_data[6]>>7)&0x01;
 8001f12:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f14:	799b      	ldrb	r3, [r3, #6]
 8001f16:	09db      	lsrs	r3, r3, #7
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <CAN_Rx_Process+0x44c>)
 8001f1c:	701a      	strb	r2, [r3, #0]

			flag_trip_undervoltage = Rx_data[7]&0x01;
 8001f1e:	4b4c      	ldr	r3, [pc, #304]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f20:	79db      	ldrb	r3, [r3, #7]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <CAN_Rx_Process+0x450>)
 8001f2a:	701a      	strb	r2, [r3, #0]
			flag_trip_overvoltage = (Rx_data[7]<<1)&0x01;
 8001f2c:	4b57      	ldr	r3, [pc, #348]	; (800208c <CAN_Rx_Process+0x454>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
			flag_trip_SOCOverDischarge = (Rx_data[7]<<2)&0x01;
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <CAN_Rx_Process+0x458>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
			flag_trip_systemfailure = (Rx_data[7]<<3)&0x01;
 8001f38:	4b56      	ldr	r3, [pc, #344]	; (8002094 <CAN_Rx_Process+0x45c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	701a      	strb	r2, [r3, #0]
			charge_state = (Rx_data[7]<<4)&0x01;
 8001f3e:	4b56      	ldr	r3, [pc, #344]	; (8002098 <CAN_Rx_Process+0x460>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
			discharge_state = (Rx_data[7]<<5)&0x01;
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <CAN_Rx_Process+0x464>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
			sleep_state = (Rx_data[7]<<6)&0x01;
 8001f4a:	4b55      	ldr	r3, [pc, #340]	; (80020a0 <CAN_Rx_Process+0x468>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	701a      	strb	r2, [r3, #0]
		}


		// *********************** Start Cell  Voltage Data Send ******************************
		if(Rx_Header.ExtId == (0x0B4<<20|UNIQUE_Code)){
 8001f50:	4b3e      	ldr	r3, [pc, #248]	; (800204c <CAN_Rx_Process+0x414>)
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	4b38      	ldr	r3, [pc, #224]	; (8002038 <CAN_Rx_Process+0x400>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f043 6334 	orr.w	r3, r3, #188743680	; 0xb400000
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d11f      	bne.n	8001fa0 <CAN_Rx_Process+0x368>
			vcell_15databyte[0].m_bytes[1] = Rx_data[0];
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f62:	781a      	ldrb	r2, [r3, #0]
 8001f64:	4b4f      	ldr	r3, [pc, #316]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f66:	705a      	strb	r2, [r3, #1]
			vcell_15databyte[0].m_bytes[0] = Rx_data[1];
 8001f68:	4b39      	ldr	r3, [pc, #228]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f6a:	785a      	ldrb	r2, [r3, #1]
 8001f6c:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f6e:	701a      	strb	r2, [r3, #0]
			vcell_15databyte[1].m_bytes[1] = Rx_data[2];
 8001f70:	4b37      	ldr	r3, [pc, #220]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f72:	789a      	ldrb	r2, [r3, #2]
 8001f74:	4b4b      	ldr	r3, [pc, #300]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f76:	715a      	strb	r2, [r3, #5]
			vcell_15databyte[1].m_bytes[0] = Rx_data[3];
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f7a:	78da      	ldrb	r2, [r3, #3]
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f7e:	711a      	strb	r2, [r3, #4]
			vcell_15databyte[2].m_bytes[1] = Rx_data[4];
 8001f80:	4b33      	ldr	r3, [pc, #204]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f82:	791a      	ldrb	r2, [r3, #4]
 8001f84:	4b47      	ldr	r3, [pc, #284]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f86:	725a      	strb	r2, [r3, #9]
			vcell_15databyte[2].m_bytes[0] = Rx_data[5];
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f8a:	795a      	ldrb	r2, [r3, #5]
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f8e:	721a      	strb	r2, [r3, #8]
			vcell_15databyte[3].m_bytes[1] = Rx_data[6];
 8001f90:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f92:	799a      	ldrb	r2, [r3, #6]
 8001f94:	4b43      	ldr	r3, [pc, #268]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f96:	735a      	strb	r2, [r3, #13]
			vcell_15databyte[3].m_bytes[0] = Rx_data[7];
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <CAN_Rx_Process+0x418>)
 8001f9a:	79da      	ldrb	r2, [r3, #7]
 8001f9c:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001f9e:	731a      	strb	r2, [r3, #12]
		}

		if(Rx_Header.ExtId == (0x0B5<<20|UNIQUE_Code)){
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	; (800204c <CAN_Rx_Process+0x414>)
 8001fa2:	685a      	ldr	r2, [r3, #4]
 8001fa4:	4b24      	ldr	r3, [pc, #144]	; (8002038 <CAN_Rx_Process+0x400>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f043 6335 	orr.w	r3, r3, #189792256	; 0xb500000
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d11f      	bne.n	8001ff0 <CAN_Rx_Process+0x3b8>
			vcell_15databyte[4].m_bytes[1] = Rx_data[0];
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fb6:	745a      	strb	r2, [r3, #17]
			vcell_15databyte[4].m_bytes[0] = Rx_data[1];
 8001fb8:	4b25      	ldr	r3, [pc, #148]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fba:	785a      	ldrb	r2, [r3, #1]
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fbe:	741a      	strb	r2, [r3, #16]
			vcell_15databyte[5].m_bytes[1] = Rx_data[2];
 8001fc0:	4b23      	ldr	r3, [pc, #140]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fc2:	789a      	ldrb	r2, [r3, #2]
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fc6:	755a      	strb	r2, [r3, #21]
			vcell_15databyte[5].m_bytes[0] = Rx_data[3];
 8001fc8:	4b21      	ldr	r3, [pc, #132]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fca:	78da      	ldrb	r2, [r3, #3]
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fce:	751a      	strb	r2, [r3, #20]
			vcell_15databyte[6].m_bytes[1] = Rx_data[4];
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fd2:	791a      	ldrb	r2, [r3, #4]
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fd6:	765a      	strb	r2, [r3, #25]
			vcell_15databyte[6].m_bytes[0] = Rx_data[5];
 8001fd8:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fda:	795a      	ldrb	r2, [r3, #5]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fde:	761a      	strb	r2, [r3, #24]
			vcell_15databyte[7].m_bytes[1] = Rx_data[6];
 8001fe0:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fe2:	799a      	ldrb	r2, [r3, #6]
 8001fe4:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fe6:	775a      	strb	r2, [r3, #29]
			vcell_15databyte[7].m_bytes[0] = Rx_data[7];
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <CAN_Rx_Process+0x418>)
 8001fea:	79da      	ldrb	r2, [r3, #7]
 8001fec:	4b2d      	ldr	r3, [pc, #180]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8001fee:	771a      	strb	r2, [r3, #28]
		}

		if(Rx_Header.ExtId == (0x0B6<<20|UNIQUE_Code)){
 8001ff0:	4b16      	ldr	r3, [pc, #88]	; (800204c <CAN_Rx_Process+0x414>)
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <CAN_Rx_Process+0x400>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f043 6336 	orr.w	r3, r3, #190840832	; 0xb600000
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d165      	bne.n	80020cc <CAN_Rx_Process+0x494>
			vcell_15databyte[8].m_bytes[1] = Rx_data[0];
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <CAN_Rx_Process+0x418>)
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8002006:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			vcell_15databyte[8].m_bytes[0] = Rx_data[1];
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <CAN_Rx_Process+0x418>)
 800200c:	785a      	ldrb	r2, [r3, #1]
 800200e:	4b25      	ldr	r3, [pc, #148]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8002010:	f883 2020 	strb.w	r2, [r3, #32]
			vcell_15databyte[9].m_bytes[1] = Rx_data[2];
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <CAN_Rx_Process+0x418>)
 8002016:	789a      	ldrb	r2, [r3, #2]
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <CAN_Rx_Process+0x46c>)
 800201a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			vcell_15databyte[9].m_bytes[0] = Rx_data[3];
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <CAN_Rx_Process+0x418>)
 8002020:	78da      	ldrb	r2, [r3, #3]
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <CAN_Rx_Process+0x46c>)
 8002024:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			vcell_15databyte[10].m_bytes[1] = Rx_data[4];
 8002028:	4b09      	ldr	r3, [pc, #36]	; (8002050 <CAN_Rx_Process+0x418>)
 800202a:	791a      	ldrb	r2, [r3, #4]
 800202c:	e03c      	b.n	80020a8 <CAN_Rx_Process+0x470>
 800202e:	bf00      	nop
 8002030:	200006b0 	.word	0x200006b0
 8002034:	20000ff4 	.word	0x20000ff4
 8002038:	20000a4c 	.word	0x20000a4c
 800203c:	20000e1c 	.word	0x20000e1c
 8002040:	20000e2c 	.word	0x20000e2c
 8002044:	20000e30 	.word	0x20000e30
 8002048:	20000a64 	.word	0x20000a64
 800204c:	20000fd8 	.word	0x20000fd8
 8002050:	20000e24 	.word	0x20000e24
 8002054:	20000d70 	.word	0x20000d70
 8002058:	200009bc 	.word	0x200009bc
 800205c:	200009f4 	.word	0x200009f4
 8002060:	20000a3c 	.word	0x20000a3c
 8002064:	20000d1c 	.word	0x20000d1c
 8002068:	2000064c 	.word	0x2000064c
 800206c:	20000998 	.word	0x20000998
 8002070:	20000658 	.word	0x20000658
 8002074:	200009ac 	.word	0x200009ac
 8002078:	20000a48 	.word	0x20000a48
 800207c:	2000077c 	.word	0x2000077c
 8002080:	200008b8 	.word	0x200008b8
 8002084:	20000642 	.word	0x20000642
 8002088:	200008b9 	.word	0x200008b9
 800208c:	20000d40 	.word	0x20000d40
 8002090:	20000a5c 	.word	0x20000a5c
 8002094:	20000674 	.word	0x20000674
 8002098:	20000b48 	.word	0x20000b48
 800209c:	200007a4 	.word	0x200007a4
 80020a0:	20000d48 	.word	0x20000d48
 80020a4:	200009f8 	.word	0x200009f8
 80020a8:	4b45      	ldr	r3, [pc, #276]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			vcell_15databyte[10].m_bytes[0] = Rx_data[5];
 80020ae:	4b45      	ldr	r3, [pc, #276]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020b0:	795a      	ldrb	r2, [r3, #5]
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			vcell_15databyte[11].m_bytes[1] = Rx_data[6];
 80020b8:	4b42      	ldr	r3, [pc, #264]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020ba:	799a      	ldrb	r2, [r3, #6]
 80020bc:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			vcell_15databyte[11].m_bytes[0] = Rx_data[7];
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020c4:	79da      	ldrb	r2, [r3, #7]
 80020c6:	4b3e      	ldr	r3, [pc, #248]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}

		if(Rx_Header.ExtId == (0x0B7<<20|UNIQUE_Code)){
 80020cc:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <CAN_Rx_Process+0x590>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <CAN_Rx_Process+0x594>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f043 6337 	orr.w	r3, r3, #191889408	; 0xb700000
 80020d8:	429a      	cmp	r2, r3
 80020da:	d127      	bne.n	800212c <CAN_Rx_Process+0x4f4>
			vcell_15databyte[12].m_bytes[1] = Rx_data[0];
 80020dc:	4b39      	ldr	r3, [pc, #228]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			vcell_15databyte[12].m_bytes[0] = Rx_data[1];
 80020e6:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020e8:	785a      	ldrb	r2, [r3, #1]
 80020ea:	4b35      	ldr	r3, [pc, #212]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			vcell_15databyte[13].m_bytes[1] = Rx_data[2];
 80020f0:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020f2:	789a      	ldrb	r2, [r3, #2]
 80020f4:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <CAN_Rx_Process+0x588>)
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			vcell_15databyte[13].m_bytes[0] = Rx_data[3];
 80020fa:	4b32      	ldr	r3, [pc, #200]	; (80021c4 <CAN_Rx_Process+0x58c>)
 80020fc:	78da      	ldrb	r2, [r3, #3]
 80020fe:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <CAN_Rx_Process+0x588>)
 8002100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			vcell_15databyte[14].m_bytes[1] = Rx_data[4];
 8002104:	4b2f      	ldr	r3, [pc, #188]	; (80021c4 <CAN_Rx_Process+0x58c>)
 8002106:	791a      	ldrb	r2, [r3, #4]
 8002108:	4b2d      	ldr	r3, [pc, #180]	; (80021c0 <CAN_Rx_Process+0x588>)
 800210a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			vcell_15databyte[14].m_bytes[0] = Rx_data[5];
 800210e:	4b2d      	ldr	r3, [pc, #180]	; (80021c4 <CAN_Rx_Process+0x58c>)
 8002110:	795a      	ldrb	r2, [r3, #5]
 8002112:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <CAN_Rx_Process+0x588>)
 8002114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			vcell_15databyte[15].m_bytes[1] = Rx_data[6];
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <CAN_Rx_Process+0x58c>)
 800211a:	799a      	ldrb	r2, [r3, #6]
 800211c:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <CAN_Rx_Process+0x588>)
 800211e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			vcell_15databyte[15].m_bytes[0] = Rx_data[7];
 8002122:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <CAN_Rx_Process+0x58c>)
 8002124:	79da      	ldrb	r2, [r3, #7]
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <CAN_Rx_Process+0x588>)
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
		}
		// ******************************End Cell  Voltage Data Send**************************************
		BP_Voltage = Batt_voltage.m_uint16t/100;
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <CAN_Rx_Process+0x598>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <CAN_Rx_Process+0x59c>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	b29b      	uxth	r3, r3
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fdea 	bl	8000d14 <__aeabi_i2f>
 8002140:	4602      	mov	r2, r0
 8002142:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <CAN_Rx_Process+0x5a0>)
 8002144:	601a      	str	r2, [r3, #0]
		BP_Current = (Batt_current.m_uint16t/100)-50;
 8002146:	4b25      	ldr	r3, [pc, #148]	; (80021dc <CAN_Rx_Process+0x5a4>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <CAN_Rx_Process+0x59c>)
 800214c:	fba2 2303 	umull	r2, r3, r2, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b29b      	uxth	r3, r3
 8002154:	3b32      	subs	r3, #50	; 0x32
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fddc 	bl	8000d14 <__aeabi_i2f>
 800215c:	4602      	mov	r2, r0
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <CAN_Rx_Process+0x5a8>)
 8002160:	601a      	str	r2, [r3, #0]
		BP_Temp = (Batt_temp.m_uint16t/10)-40;
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <CAN_Rx_Process+0x5ac>)
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	4a20      	ldr	r2, [pc, #128]	; (80021e8 <CAN_Rx_Process+0x5b0>)
 8002168:	fba2 2303 	umull	r2, r3, r2, r3
 800216c:	08db      	lsrs	r3, r3, #3
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b28      	subs	r3, #40	; 0x28
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fdce 	bl	8000d14 <__aeabi_i2f>
 8002178:	4602      	mov	r2, r0
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <CAN_Rx_Process+0x5b4>)
 800217c:	601a      	str	r2, [r3, #0]
		BP_SOC = Batt_SOC.m_uint16t;
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <CAN_Rx_Process+0x5b8>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe fdc2 	bl	8000d0c <__aeabi_ui2f>
 8002188:	4602      	mov	r2, r0
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <CAN_Rx_Process+0x5bc>)
 800218c:	601a      	str	r2, [r3, #0]
		BP_Capacity = Batt_capacity.m_uint16t/100;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <CAN_Rx_Process+0x5c0>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	4a10      	ldr	r2, [pc, #64]	; (80021d4 <CAN_Rx_Process+0x59c>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f7fe fdb9 	bl	8000d14 <__aeabi_i2f>
 80021a2:	4602      	mov	r2, r0
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <CAN_Rx_Process+0x5c4>)
 80021a6:	601a      	str	r2, [r3, #0]
		BP_SOH = Batt_SOH.m_uint16t;
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <CAN_Rx_Process+0x5c8>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7fe fdad 	bl	8000d0c <__aeabi_ui2f>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <CAN_Rx_Process+0x5cc>)
 80021b6:	601a      	str	r2, [r3, #0]
//		BP_Cycle = Batt_cycle.m_uint16;

}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200009f8 	.word	0x200009f8
 80021c4:	20000e24 	.word	0x20000e24
 80021c8:	20000fd8 	.word	0x20000fd8
 80021cc:	20000a4c 	.word	0x20000a4c
 80021d0:	20000d70 	.word	0x20000d70
 80021d4:	51eb851f 	.word	0x51eb851f
 80021d8:	2000068c 	.word	0x2000068c
 80021dc:	200009bc 	.word	0x200009bc
 80021e0:	200009e8 	.word	0x200009e8
 80021e4:	20000a3c 	.word	0x20000a3c
 80021e8:	cccccccd 	.word	0xcccccccd
 80021ec:	200008b0 	.word	0x200008b0
 80021f0:	200009f4 	.word	0x200009f4
 80021f4:	20000794 	.word	0x20000794
 80021f8:	20000d1c 	.word	0x20000d1c
 80021fc:	20000b44 	.word	0x20000b44
 8002200:	2000064c 	.word	0x2000064c
 8002204:	20000b34 	.word	0x20000b34

08002208 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_DMA_Init+0x3c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a0b      	ldr	r2, [pc, #44]	; (8002244 <MX_DMA_Init+0x3c>)
 8002218:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_DMA_Init+0x3c>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	607b      	str	r3, [r7, #4]
 8002228:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800222a:	2200      	movs	r2, #0
 800222c:	2100      	movs	r1, #0
 800222e:	2038      	movs	r0, #56	; 0x38
 8002230:	f003 fcef 	bl	8005c12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002234:	2038      	movs	r0, #56	; 0x38
 8002236:	f003 fd08 	bl	8005c4a <HAL_NVIC_EnableIRQ>

}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
 800225c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b31      	ldr	r3, [pc, #196]	; (8002328 <MX_GPIO_Init+0xe0>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <MX_GPIO_Init+0xe0>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6313      	str	r3, [r2, #48]	; 0x30
 800226e:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <MX_GPIO_Init+0xe0>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <MX_GPIO_Init+0xe0>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a29      	ldr	r2, [pc, #164]	; (8002328 <MX_GPIO_Init+0xe0>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <MX_GPIO_Init+0xe0>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	603b      	str	r3, [r7, #0]
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <MX_GPIO_Init+0xe0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <MX_GPIO_Init+0xe0>)
 80022a0:	f043 0302 	orr.w	r3, r3, #2
 80022a4:	6313      	str	r3, [r2, #48]	; 0x30
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <MX_GPIO_Init+0xe0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 80022b2:	2200      	movs	r2, #0
 80022b4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80022b8:	481c      	ldr	r0, [pc, #112]	; (800232c <MX_GPIO_Init+0xe4>)
 80022ba:	f004 fa24 	bl	8006706 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led3_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80022c4:	481a      	ldr	r0, [pc, #104]	; (8002330 <MX_GPIO_Init+0xe8>)
 80022c6:	f004 fa1e 	bl	8006706 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 80022ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	4619      	mov	r1, r3
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <MX_GPIO_Init+0xe4>)
 80022e4:	f004 f85a 	bl	800639c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Led3_Pin|Buzzer_Pin;
 80022e8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ee:	2301      	movs	r3, #1
 80022f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	4619      	mov	r1, r3
 8002300:	480b      	ldr	r0, [pc, #44]	; (8002330 <MX_GPIO_Init+0xe8>)
 8002302:	f004 f84b 	bl	800639c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8002306:	2380      	movs	r3, #128	; 0x80
 8002308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800230e:	2302      	movs	r3, #2
 8002310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	; (8002330 <MX_GPIO_Init+0xe8>)
 800231a:	f004 f83f 	bl	800639c <HAL_GPIO_Init>

}
 800231e:	bf00      	nop
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40023800 	.word	0x40023800
 800232c:	40020400 	.word	0x40020400
 8002330:	40020800 	.word	0x40020800

08002334 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <MX_I2C1_Init+0x50>)
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <MX_I2C1_Init+0x54>)
 800233c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800233e:	4b11      	ldr	r3, [pc, #68]	; (8002384 <MX_I2C1_Init+0x50>)
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <MX_I2C1_Init+0x58>)
 8002342:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002344:	4b0f      	ldr	r3, [pc, #60]	; (8002384 <MX_I2C1_Init+0x50>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800234a:	4b0e      	ldr	r3, [pc, #56]	; (8002384 <MX_I2C1_Init+0x50>)
 800234c:	2200      	movs	r2, #0
 800234e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <MX_I2C1_Init+0x50>)
 8002352:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002356:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002358:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <MX_I2C1_Init+0x50>)
 800235a:	2200      	movs	r2, #0
 800235c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800235e:	4b09      	ldr	r3, [pc, #36]	; (8002384 <MX_I2C1_Init+0x50>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002364:	4b07      	ldr	r3, [pc, #28]	; (8002384 <MX_I2C1_Init+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <MX_I2C1_Init+0x50>)
 800236c:	2200      	movs	r2, #0
 800236e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002370:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_I2C1_Init+0x50>)
 8002372:	f004 f9f9 	bl	8006768 <HAL_I2C_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800237c:	f000 fb6a 	bl	8002a54 <Error_Handler>
  }

}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}
 8002384:	20000e58 	.word	0x20000e58
 8002388:	40005400 	.word	0x40005400
 800238c:	000186a0 	.word	0x000186a0

08002390 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <MX_I2C2_Init+0x50>)
 8002396:	4a13      	ldr	r2, [pc, #76]	; (80023e4 <MX_I2C2_Init+0x54>)
 8002398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <MX_I2C2_Init+0x50>)
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <MX_I2C2_Init+0x58>)
 800239e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023cc:	4804      	ldr	r0, [pc, #16]	; (80023e0 <MX_I2C2_Init+0x50>)
 80023ce:	f004 f9cb 	bl	8006768 <HAL_I2C_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80023d8:	f000 fb3c 	bl	8002a54 <Error_Handler>
  }

}
 80023dc:	bf00      	nop
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000eac 	.word	0x20000eac
 80023e4:	40005800 	.word	0x40005800
 80023e8:	00061a80 	.word	0x00061a80

080023ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08c      	sub	sp, #48	; 0x30
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a33      	ldr	r2, [pc, #204]	; (80024d8 <HAL_I2C_MspInit+0xec>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12d      	bne.n	800246a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a31      	ldr	r2, [pc, #196]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 8002418:	f043 0302 	orr.w	r3, r3, #2
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800242a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002430:	2312      	movs	r3, #18
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002434:	2301      	movs	r3, #1
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800243c:	2304      	movs	r3, #4
 800243e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4826      	ldr	r0, [pc, #152]	; (80024e0 <HAL_I2C_MspInit+0xf4>)
 8002448:	f003 ffa8 	bl	800639c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	4b22      	ldr	r3, [pc, #136]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 8002452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 8002456:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800245a:	6413      	str	r3, [r2, #64]	; 0x40
 800245c:	4b1f      	ldr	r3, [pc, #124]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002464:	617b      	str	r3, [r7, #20]
 8002466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002468:	e031      	b.n	80024ce <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_I2C_MspInit+0xf8>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d12c      	bne.n	80024ce <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	4b18      	ldr	r3, [pc, #96]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 800247a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247c:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	6313      	str	r3, [r2, #48]	; 0x30
 8002484:	4b15      	ldr	r3, [pc, #84]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	613b      	str	r3, [r7, #16]
 800248e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002490:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002496:	2312      	movs	r3, #18
 8002498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800249a:	2301      	movs	r3, #1
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249e:	2303      	movs	r3, #3
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024a2:	2304      	movs	r3, #4
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a6:	f107 031c 	add.w	r3, r7, #28
 80024aa:	4619      	mov	r1, r3
 80024ac:	480c      	ldr	r0, [pc, #48]	; (80024e0 <HAL_I2C_MspInit+0xf4>)
 80024ae:	f003 ff75 	bl	800639c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a08      	ldr	r2, [pc, #32]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 80024bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_I2C_MspInit+0xf0>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
}
 80024ce:	bf00      	nop
 80024d0:	3730      	adds	r7, #48	; 0x30
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40005400 	.word	0x40005400
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020400 	.word	0x40020400
 80024e4:	40005800 	.word	0x40005800

080024e8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_IWDG_Init+0x2c>)
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <MX_IWDG_Init+0x30>)
 80024f0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <MX_IWDG_Init+0x2c>)
 80024f4:	2204      	movs	r2, #4
 80024f6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_IWDG_Init+0x2c>)
 80024fa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80024fe:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002500:	4804      	ldr	r0, [pc, #16]	; (8002514 <MX_IWDG_Init+0x2c>)
 8002502:	f005 f82b 	bl	800755c <HAL_IWDG_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800250c:	f000 faa2 	bl	8002a54 <Error_Handler>
  }

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000f00 	.word	0x20000f00
 8002518:	40003000 	.word	0x40003000

0800251c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002520:	f001 ffec 	bl	80044fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002524:	f000 f844 	bl	80025b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002528:	f7ff fe8e 	bl	8002248 <MX_GPIO_Init>
  MX_DMA_Init();
 800252c:	f7ff fe6c 	bl	8002208 <MX_DMA_Init>
  MX_I2C2_Init();
 8002530:	f7ff ff2e 	bl	8002390 <MX_I2C2_Init>
  MX_TIM1_Init();
 8002534:	f001 fc9a 	bl	8003e6c <MX_TIM1_Init>
  MX_CAN1_Init();
 8002538:	f7ff fab2 	bl	8001aa0 <MX_CAN1_Init>
  MX_I2C1_Init();
 800253c:	f7ff fefa 	bl	8002334 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8002540:	f001 fefa 	bl	8004338 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002544:	f7ff f948 	bl	80017d8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002548:	f001 fd30 	bl	8003fac <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800254c:	f001 feca 	bl	80042e4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002550:	f001 fd7a 	bl	8004048 <MX_TIM3_Init>
  MX_IWDG_Init();
 8002554:	f7ff ffc8 	bl	80024e8 <MX_IWDG_Init>
  MX_TIM4_Init();
 8002558:	f001 fdc4 	bl	80040e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  Charger_Mode = 0;
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <main+0x88>)
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
  Eror_Code = 0;
 8002562:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <main+0x8c>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
  CHARGER_ON_Init();
 8002568:	f000 f8ae 	bl	80026c8 <CHARGER_ON_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_isDeviceReady(0XA0);
 800256c:	20a0      	movs	r0, #160	; 0xa0
 800256e:	f7ff f8f7 	bl	8001760 <EEPROM_isDeviceReady>
  EEPROM_WriteData(10, 15);
 8002572:	210f      	movs	r1, #15
 8002574:	200a      	movs	r0, #10
 8002576:	f7ff f911 	bl	800179c <EEPROM_WriteData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Charger_Mode==1) 		Display_ChargeMode();
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <main+0x88>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <main+0x6c>
 8002582:	f000 f96d 	bl	8002860 <Display_ChargeMode>
 8002586:	e008      	b.n	800259a <main+0x7e>
	  else if (Charger_Mode==2)	Display_ProtectionMode();
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <main+0x88>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d102      	bne.n	8002596 <main+0x7a>
 8002590:	f000 f93a 	bl	8002808 <Display_ProtectionMode>
 8002594:	e001      	b.n	800259a <main+0x7e>
	  else						Display_StanbyMode();
 8002596:	f000 f921 	bl	80027dc <Display_StanbyMode>

	  HAL_IWDG_Refresh(&hiwdg);
 800259a:	4804      	ldr	r0, [pc, #16]	; (80025ac <main+0x90>)
 800259c:	f005 f817 	bl	80075ce <HAL_IWDG_Refresh>
	  if(Charger_Mode==1) 		Display_ChargeMode();
 80025a0:	e7eb      	b.n	800257a <main+0x5e>
 80025a2:	bf00      	nop
 80025a4:	200006b0 	.word	0x200006b0
 80025a8:	20000638 	.word	0x20000638
 80025ac:	20000f00 	.word	0x20000f00

080025b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b092      	sub	sp, #72	; 0x48
 80025b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	2230      	movs	r2, #48	; 0x30
 80025bc:	2100      	movs	r1, #0
 80025be:	4618      	mov	r0, r3
 80025c0:	f007 f834 	bl	800962c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	605a      	str	r2, [r3, #4]
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	60da      	str	r2, [r3, #12]
 80025d0:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80025d2:	230a      	movs	r3, #10
 80025d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025d6:	2301      	movs	r3, #1
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025da:	2310      	movs	r3, #16
 80025dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80025de:	2301      	movs	r3, #1
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025e2:	2302      	movs	r3, #2
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80025ea:	230d      	movs	r3, #13
 80025ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80025ee:	23c3      	movs	r3, #195	; 0xc3
 80025f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025f2:	2302      	movs	r3, #2
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025f6:	2304      	movs	r3, #4
 80025f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025fa:	f107 0318 	add.w	r3, r7, #24
 80025fe:	4618      	mov	r0, r3
 8002600:	f004 fff4 	bl	80075ec <HAL_RCC_OscConfig>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800260a:	f000 fa23 	bl	8002a54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800260e:	230f      	movs	r3, #15
 8002610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002612:	2302      	movs	r3, #2
 8002614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002616:	2300      	movs	r3, #0
 8002618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800261a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800261e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002624:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002626:	1d3b      	adds	r3, r7, #4
 8002628:	2103      	movs	r1, #3
 800262a:	4618      	mov	r0, r3
 800262c:	f005 fa48 	bl	8007ac0 <HAL_RCC_ClockConfig>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002636:	f000 fa0d 	bl	8002a54 <Error_Handler>
  }
}
 800263a:	bf00      	nop
 800263c:	3748      	adds	r7, #72	; 0x48
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d11f      	bne.n	8002696 <HAL_ADC_ConvCpltCallback+0x52>
	{
		ADC_VoutN = ADC_value[0];
 8002656:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <HAL_ADC_ConvCpltCallback+0x64>)
 800265c:	801a      	strh	r2, [r3, #0]
		ADC_VoutP = ADC_value[1];
 800265e:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002660:	885a      	ldrh	r2, [r3, #2]
 8002662:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_ADC_ConvCpltCallback+0x68>)
 8002664:	801a      	strh	r2, [r3, #0]
		ADC_Iin = ADC_value[2];
 8002666:	4b0f      	ldr	r3, [pc, #60]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002668:	889a      	ldrh	r2, [r3, #4]
 800266a:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800266c:	801a      	strh	r2, [r3, #0]
		ADC_temp1 = ADC_value[3];
 800266e:	4b0d      	ldr	r3, [pc, #52]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002670:	88da      	ldrh	r2, [r3, #6]
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_ADC_ConvCpltCallback+0x70>)
 8002674:	801a      	strh	r2, [r3, #0]
		ADC_temp2 = ADC_value[4];
 8002676:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002678:	891a      	ldrh	r2, [r3, #8]
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <HAL_ADC_ConvCpltCallback+0x74>)
 800267c:	801a      	strh	r2, [r3, #0]
		ADC_VinN = ADC_value[5];
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002680:	895a      	ldrh	r2, [r3, #10]
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <HAL_ADC_ConvCpltCallback+0x78>)
 8002684:	801a      	strh	r2, [r3, #0]
		ADC_VinP = ADC_value[6];
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002688:	899a      	ldrh	r2, [r3, #12]
 800268a:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_ADC_ConvCpltCallback+0x7c>)
 800268c:	801a      	strh	r2, [r3, #0]
		ADC_Iout = ADC_value[7];
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_ADC_ConvCpltCallback+0x60>)
 8002690:	89da      	ldrh	r2, [r3, #14]
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <HAL_ADC_ConvCpltCallback+0x80>)
 8002694:	801a      	strh	r2, [r3, #0]
	}
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	40012000 	.word	0x40012000
 80026a4:	200007c4 	.word	0x200007c4
 80026a8:	20000640 	.word	0x20000640
 80026ac:	200007b0 	.word	0x200007b0
 80026b0:	2000065a 	.word	0x2000065a
 80026b4:	200007ba 	.word	0x200007ba
 80026b8:	20000644 	.word	0x20000644
 80026bc:	200009c0 	.word	0x200009c0
 80026c0:	200006a4 	.word	0x200006a4
 80026c4:	20000688 	.word	0x20000688

080026c8 <CHARGER_ON_Init>:

void CHARGER_ON_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
	SSD1306_Init();
 80026cc:	f000 f9c8 	bl	8002a60 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80026d0:	2000      	movs	r0, #0
 80026d2:	f000 fab3 	bl	8002c3c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80026d6:	f000 fa83 	bl	8002be0 <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 80026da:	2201      	movs	r2, #1
 80026dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026e0:	4833      	ldr	r0, [pc, #204]	; (80027b0 <CHARGER_ON_Init+0xe8>)
 80026e2:	f004 f810 	bl	8006706 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80026e6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026ea:	f001 ff75 	bl	80045d8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80026ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f2:	482f      	ldr	r0, [pc, #188]	; (80027b0 <CHARGER_ON_Init+0xe8>)
 80026f4:	f004 f81f 	bl	8006736 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 80026f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026fc:	f001 ff6c 	bl	80045d8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8002700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002704:	482a      	ldr	r0, [pc, #168]	; (80027b0 <CHARGER_ON_Init+0xe8>)
 8002706:	f004 f816 	bl	8006736 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800270a:	2064      	movs	r0, #100	; 0x64
 800270c:	f001 ff64 	bl	80045d8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8002710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002714:	4826      	ldr	r0, [pc, #152]	; (80027b0 <CHARGER_ON_Init+0xe8>)
 8002716:	f004 f80e 	bl	8006736 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800271a:	2064      	movs	r0, #100	; 0x64
 800271c:	f001 ff5c 	bl	80045d8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8002720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002724:	4822      	ldr	r0, [pc, #136]	; (80027b0 <CHARGER_ON_Init+0xe8>)
 8002726:	f004 f806 	bl	8006736 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800272a:	2064      	movs	r0, #100	; 0x64
 800272c:	f001 ff54 	bl	80045d8 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8002730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002734:	481e      	ldr	r0, [pc, #120]	; (80027b0 <CHARGER_ON_Init+0xe8>)
 8002736:	f003 fffe 	bl	8006736 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800273a:	2064      	movs	r0, #100	; 0x64
 800273c:	f001 ff4c 	bl	80045d8 <HAL_Delay>

	CAN_Setting();
 8002740:	f7ff fa3c 	bl	8001bbc <CAN_Setting>

	SSD1306_GotoXY (15,10);
 8002744:	210a      	movs	r1, #10
 8002746:	200f      	movs	r0, #15
 8002748:	f000 faee 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I Charger", &Font_7x10, 1);
 800274c:	2201      	movs	r2, #1
 800274e:	4919      	ldr	r1, [pc, #100]	; (80027b4 <CHARGER_ON_Init+0xec>)
 8002750:	4819      	ldr	r0, [pc, #100]	; (80027b8 <CHARGER_ON_Init+0xf0>)
 8002752:	f000 fb7f 	bl	8002e54 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 8002756:	211e      	movs	r1, #30
 8002758:	2032      	movs	r0, #50	; 0x32
 800275a:	f000 fae5 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts ("V1.0", &Font_7x10, 1);
 800275e:	2201      	movs	r2, #1
 8002760:	4914      	ldr	r1, [pc, #80]	; (80027b4 <CHARGER_ON_Init+0xec>)
 8002762:	4816      	ldr	r0, [pc, #88]	; (80027bc <CHARGER_ON_Init+0xf4>)
 8002764:	f000 fb76 	bl	8002e54 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8002768:	f000 fa3a 	bl	8002be0 <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 800276c:	2000      	movs	r0, #0
 800276e:	f000 fa65 	bl	8002c3c <SSD1306_Fill>

	HAL_TIM_Base_Start(&htim1);
 8002772:	4813      	ldr	r0, [pc, #76]	; (80027c0 <CHARGER_ON_Init+0xf8>)
 8002774:	f005 fbbb 	bl	8007eee <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002778:	2100      	movs	r1, #0
 800277a:	4811      	ldr	r0, [pc, #68]	; (80027c0 <CHARGER_ON_Init+0xf8>)
 800277c:	f005 fc32 	bl	8007fe4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8002780:	4810      	ldr	r0, [pc, #64]	; (80027c4 <CHARGER_ON_Init+0xfc>)
 8002782:	f005 fbd7 	bl	8007f34 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8002786:	4810      	ldr	r0, [pc, #64]	; (80027c8 <CHARGER_ON_Init+0x100>)
 8002788:	f005 fbd4 	bl	8007f34 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800278c:	480f      	ldr	r0, [pc, #60]	; (80027cc <CHARGER_ON_Init+0x104>)
 800278e:	f005 fbd1 	bl	8007f34 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_value, 8);
 8002792:	2208      	movs	r2, #8
 8002794:	490e      	ldr	r1, [pc, #56]	; (80027d0 <CHARGER_ON_Init+0x108>)
 8002796:	480f      	ldr	r0, [pc, #60]	; (80027d4 <CHARGER_ON_Init+0x10c>)
 8002798:	f001 ff84 	bl	80046a4 <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 800279c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027a0:	f001 ff1a 	bl	80045d8 <HAL_Delay>
	Charger_Mode=1;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <CHARGER_ON_Init+0x110>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40020800 	.word	0x40020800
 80027b4:	20000000 	.word	0x20000000
 80027b8:	0800bb38 	.word	0x0800bb38
 80027bc:	0800bb48 	.word	0x0800bb48
 80027c0:	200010a0 	.word	0x200010a0
 80027c4:	200010e0 	.word	0x200010e0
 80027c8:	20001060 	.word	0x20001060
 80027cc:	20001020 	.word	0x20001020
 80027d0:	200007c4 	.word	0x200007c4
 80027d4:	20000d74 	.word	0x20000d74
 80027d8:	200006b0 	.word	0x200006b0

080027dc <Display_StanbyMode>:

void Display_StanbyMode(void){
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80027e0:	2000      	movs	r0, #0
 80027e2:	f000 fa2b 	bl	8002c3c <SSD1306_Fill>
	SSD1306_GotoXY (20,30);
 80027e6:	211e      	movs	r1, #30
 80027e8:	2014      	movs	r0, #20
 80027ea:	f000 fa9d 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts ("STANBY-Mode", &Font_7x10, 1);
 80027ee:	2201      	movs	r2, #1
 80027f0:	4903      	ldr	r1, [pc, #12]	; (8002800 <Display_StanbyMode+0x24>)
 80027f2:	4804      	ldr	r0, [pc, #16]	; (8002804 <Display_StanbyMode+0x28>)
 80027f4:	f000 fb2e 	bl	8002e54 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80027f8:	f000 f9f2 	bl	8002be0 <SSD1306_UpdateScreen>
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	20000000 	.word	0x20000000
 8002804:	0800bb50 	.word	0x0800bb50

08002808 <Display_ProtectionMode>:

void Display_ProtectionMode(void){
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800280c:	2000      	movs	r0, #0
 800280e:	f000 fa15 	bl	8002c3c <SSD1306_Fill>
	SSD1306_GotoXY (20,10);
 8002812:	210a      	movs	r1, #10
 8002814:	2014      	movs	r0, #20
 8002816:	f000 fa87 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts ("FAULT Protect", &Font_7x10, 1);
 800281a:	2201      	movs	r2, #1
 800281c:	490b      	ldr	r1, [pc, #44]	; (800284c <Display_ProtectionMode+0x44>)
 800281e:	480c      	ldr	r0, [pc, #48]	; (8002850 <Display_ProtectionMode+0x48>)
 8002820:	f000 fb18 	bl	8002e54 <SSD1306_Puts>

	sprintf(buffer_i2c, "Eror =%2d", Eror_Code);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <Display_ProtectionMode+0x4c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	490b      	ldr	r1, [pc, #44]	; (8002858 <Display_ProtectionMode+0x50>)
 800282c:	480b      	ldr	r0, [pc, #44]	; (800285c <Display_ProtectionMode+0x54>)
 800282e:	f007 fb55 	bl	8009edc <siprintf>
	SSD1306_GotoXY (20,30);
 8002832:	211e      	movs	r1, #30
 8002834:	2014      	movs	r0, #20
 8002836:	f000 fa77 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800283a:	2201      	movs	r2, #1
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <Display_ProtectionMode+0x44>)
 800283e:	4807      	ldr	r0, [pc, #28]	; (800285c <Display_ProtectionMode+0x54>)
 8002840:	f000 fb08 	bl	8002e54 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8002844:	f000 f9cc 	bl	8002be0 <SSD1306_UpdateScreen>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000000 	.word	0x20000000
 8002850:	0800bb5c 	.word	0x0800bb5c
 8002854:	20000638 	.word	0x20000638
 8002858:	0800bb6c 	.word	0x0800bb6c
 800285c:	20000f0c 	.word	0x20000f0c

08002860 <Display_ChargeMode>:

void Display_ChargeMode(void){
 8002860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002862:	b083      	sub	sp, #12
 8002864:	af02      	add	r7, sp, #8
	SSD1306_Fill (0);
 8002866:	2000      	movs	r0, #0
 8002868:	f000 f9e8 	bl	8002c3c <SSD1306_Fill>

	sprintf(buffer_i2c, "Charger - RUN");
 800286c:	4a63      	ldr	r2, [pc, #396]	; (80029fc <Display_ChargeMode+0x19c>)
 800286e:	4b64      	ldr	r3, [pc, #400]	; (8002a00 <Display_ChargeMode+0x1a0>)
 8002870:	4614      	mov	r4, r2
 8002872:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002874:	6020      	str	r0, [r4, #0]
 8002876:	6061      	str	r1, [r4, #4]
 8002878:	60a2      	str	r2, [r4, #8]
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY (12,0);
 800287e:	2100      	movs	r1, #0
 8002880:	200c      	movs	r0, #12
 8002882:	f000 fa51 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8002886:	2201      	movs	r2, #1
 8002888:	495e      	ldr	r1, [pc, #376]	; (8002a04 <Display_ChargeMode+0x1a4>)
 800288a:	485c      	ldr	r0, [pc, #368]	; (80029fc <Display_ChargeMode+0x19c>)
 800288c:	f000 fae2 	bl	8002e54 <SSD1306_Puts>

	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", duty, Batt_SOC.m_uint16t);
 8002890:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <Display_ChargeMode+0x1a8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe03 	bl	80004a0 <__aeabi_f2d>
 800289a:	460a      	mov	r2, r1
 800289c:	4601      	mov	r1, r0
 800289e:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <Display_ChargeMode+0x1ac>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4613      	mov	r3, r2
 80028a6:	460a      	mov	r2, r1
 80028a8:	4959      	ldr	r1, [pc, #356]	; (8002a10 <Display_ChargeMode+0x1b0>)
 80028aa:	4854      	ldr	r0, [pc, #336]	; (80029fc <Display_ChargeMode+0x19c>)
 80028ac:	f007 fb16 	bl	8009edc <siprintf>
//	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", dc, EEPROM_ReadData(10));
	SSD1306_GotoXY (5,13);
 80028b0:	210d      	movs	r1, #13
 80028b2:	2005      	movs	r0, #5
 80028b4:	f000 fa38 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80028b8:	2201      	movs	r2, #1
 80028ba:	4952      	ldr	r1, [pc, #328]	; (8002a04 <Display_ChargeMode+0x1a4>)
 80028bc:	484f      	ldr	r0, [pc, #316]	; (80029fc <Display_ChargeMode+0x19c>)
 80028be:	f000 fac9 	bl	8002e54 <SSD1306_Puts>

	//sprintf(usart_Tx_buffer,"Test USART %d\r\n",(unsigned int)i);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 80028c2:	484e      	ldr	r0, [pc, #312]	; (80029fc <Display_ChargeMode+0x19c>)
 80028c4:	f7fd fc80 	bl	80001c8 <strlen>
 80028c8:	4603      	mov	r3, r0
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	494b      	ldr	r1, [pc, #300]	; (80029fc <Display_ChargeMode+0x19c>)
 80028d0:	4850      	ldr	r0, [pc, #320]	; (8002a14 <Display_ChargeMode+0x1b4>)
 80028d2:	f006 fa6f 	bl	8008db4 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 80028d6:	4849      	ldr	r0, [pc, #292]	; (80029fc <Display_ChargeMode+0x19c>)
 80028d8:	f7fd fc76 	bl	80001c8 <strlen>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29b      	uxth	r3, r3
 80028e0:	461a      	mov	r2, r3
 80028e2:	4946      	ldr	r1, [pc, #280]	; (80029fc <Display_ChargeMode+0x19c>)
 80028e4:	484c      	ldr	r0, [pc, #304]	; (8002a18 <Display_ChargeMode+0x1b8>)
 80028e6:	f006 fa65 	bl	8008db4 <HAL_UART_Transmit_IT>

	HAL_Delay(10);
 80028ea:	200a      	movs	r0, #10
 80028ec:	f001 fe74 	bl	80045d8 <HAL_Delay>

	sprintf(buffer_i2c, "T = %4.1f | %4.1f", Temp_T1, Temp_T2);
 80028f0:	4b4a      	ldr	r3, [pc, #296]	; (8002a1c <Display_ChargeMode+0x1bc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fdd3 	bl	80004a0 <__aeabi_f2d>
 80028fa:	4605      	mov	r5, r0
 80028fc:	460e      	mov	r6, r1
 80028fe:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <Display_ChargeMode+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fdcc 	bl	80004a0 <__aeabi_f2d>
 8002908:	4603      	mov	r3, r0
 800290a:	460c      	mov	r4, r1
 800290c:	e9cd 3400 	strd	r3, r4, [sp]
 8002910:	462a      	mov	r2, r5
 8002912:	4633      	mov	r3, r6
 8002914:	4943      	ldr	r1, [pc, #268]	; (8002a24 <Display_ChargeMode+0x1c4>)
 8002916:	4839      	ldr	r0, [pc, #228]	; (80029fc <Display_ChargeMode+0x19c>)
 8002918:	f007 fae0 	bl	8009edc <siprintf>
	SSD1306_GotoXY (5,23);
 800291c:	2117      	movs	r1, #23
 800291e:	2005      	movs	r0, #5
 8002920:	f000 fa02 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8002924:	2201      	movs	r2, #1
 8002926:	4937      	ldr	r1, [pc, #220]	; (8002a04 <Display_ChargeMode+0x1a4>)
 8002928:	4834      	ldr	r0, [pc, #208]	; (80029fc <Display_ChargeMode+0x19c>)
 800292a:	f000 fa93 	bl	8002e54 <SSD1306_Puts>

	sprintf(buffer_i2c, "V = %4.0f | %4.2f", ADC_VoltageResult, Voltage_Charger);
 800292e:	4b3e      	ldr	r3, [pc, #248]	; (8002a28 <Display_ChargeMode+0x1c8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7fd fdb4 	bl	80004a0 <__aeabi_f2d>
 8002938:	4605      	mov	r5, r0
 800293a:	460e      	mov	r6, r1
 800293c:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <Display_ChargeMode+0x1cc>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fdad 	bl	80004a0 <__aeabi_f2d>
 8002946:	4603      	mov	r3, r0
 8002948:	460c      	mov	r4, r1
 800294a:	e9cd 3400 	strd	r3, r4, [sp]
 800294e:	462a      	mov	r2, r5
 8002950:	4633      	mov	r3, r6
 8002952:	4937      	ldr	r1, [pc, #220]	; (8002a30 <Display_ChargeMode+0x1d0>)
 8002954:	4829      	ldr	r0, [pc, #164]	; (80029fc <Display_ChargeMode+0x19c>)
 8002956:	f007 fac1 	bl	8009edc <siprintf>
//	sprintf(buffer_i2c, "V = %4.0f | %4.0f", ADC_Average_VoutN, ADC_Average_VoutP);
	SSD1306_GotoXY (5,33);
 800295a:	2121      	movs	r1, #33	; 0x21
 800295c:	2005      	movs	r0, #5
 800295e:	f000 f9e3 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8002962:	2201      	movs	r2, #1
 8002964:	4927      	ldr	r1, [pc, #156]	; (8002a04 <Display_ChargeMode+0x1a4>)
 8002966:	4825      	ldr	r0, [pc, #148]	; (80029fc <Display_ChargeMode+0x19c>)
 8002968:	f000 fa74 	bl	8002e54 <SSD1306_Puts>

	sprintf(buffer_i2c, "A = %4.0f | %4.2f", ADC_Average_Iout, Current_Charger);
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <Display_ChargeMode+0x1d4>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fd95 	bl	80004a0 <__aeabi_f2d>
 8002976:	4605      	mov	r5, r0
 8002978:	460e      	mov	r6, r1
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <Display_ChargeMode+0x1d8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fd8e 	bl	80004a0 <__aeabi_f2d>
 8002984:	4603      	mov	r3, r0
 8002986:	460c      	mov	r4, r1
 8002988:	e9cd 3400 	strd	r3, r4, [sp]
 800298c:	462a      	mov	r2, r5
 800298e:	4633      	mov	r3, r6
 8002990:	492a      	ldr	r1, [pc, #168]	; (8002a3c <Display_ChargeMode+0x1dc>)
 8002992:	481a      	ldr	r0, [pc, #104]	; (80029fc <Display_ChargeMode+0x19c>)
 8002994:	f007 faa2 	bl	8009edc <siprintf>
	//(float)Batt_current.m_uint16t/100);
	SSD1306_GotoXY (5,43);
 8002998:	212b      	movs	r1, #43	; 0x2b
 800299a:	2005      	movs	r0, #5
 800299c:	f000 f9c4 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80029a0:	2201      	movs	r2, #1
 80029a2:	4918      	ldr	r1, [pc, #96]	; (8002a04 <Display_ChargeMode+0x1a4>)
 80029a4:	4815      	ldr	r0, [pc, #84]	; (80029fc <Display_ChargeMode+0x19c>)
 80029a6:	f000 fa55 	bl	8002e54 <SSD1306_Puts>

	sprintf(buffer_i2c, "E =%2d--%2d ", Eror_Code, LastEror_code);
 80029aa:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <Display_ChargeMode+0x1e0>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <Display_ChargeMode+0x1e4>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4924      	ldr	r1, [pc, #144]	; (8002a48 <Display_ChargeMode+0x1e8>)
 80029b6:	4811      	ldr	r0, [pc, #68]	; (80029fc <Display_ChargeMode+0x19c>)
 80029b8:	f007 fa90 	bl	8009edc <siprintf>
	SSD1306_GotoXY (5,53);
 80029bc:	2135      	movs	r1, #53	; 0x35
 80029be:	2005      	movs	r0, #5
 80029c0:	f000 f9b2 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80029c4:	2201      	movs	r2, #1
 80029c6:	490f      	ldr	r1, [pc, #60]	; (8002a04 <Display_ChargeMode+0x1a4>)
 80029c8:	480c      	ldr	r0, [pc, #48]	; (80029fc <Display_ChargeMode+0x19c>)
 80029ca:	f000 fa43 	bl	8002e54 <SSD1306_Puts>

	sprintf(buffer_i2c, "| %lx", UNIQUE_Code);
 80029ce:	4b1f      	ldr	r3, [pc, #124]	; (8002a4c <Display_ChargeMode+0x1ec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	491e      	ldr	r1, [pc, #120]	; (8002a50 <Display_ChargeMode+0x1f0>)
 80029d6:	4809      	ldr	r0, [pc, #36]	; (80029fc <Display_ChargeMode+0x19c>)
 80029d8:	f007 fa80 	bl	8009edc <siprintf>
	SSD1306_GotoXY (68,53);
 80029dc:	2135      	movs	r1, #53	; 0x35
 80029de:	2044      	movs	r0, #68	; 0x44
 80029e0:	f000 f9a2 	bl	8002d28 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80029e4:	2201      	movs	r2, #1
 80029e6:	4907      	ldr	r1, [pc, #28]	; (8002a04 <Display_ChargeMode+0x1a4>)
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <Display_ChargeMode+0x19c>)
 80029ea:	f000 fa33 	bl	8002e54 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 80029ee:	f000 f8f7 	bl	8002be0 <SSD1306_UpdateScreen>
}
 80029f2:	bf00      	nop
 80029f4:	3704      	adds	r7, #4
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000f0c 	.word	0x20000f0c
 8002a00:	0800bb78 	.word	0x0800bb78
 8002a04:	20000000 	.word	0x20000000
 8002a08:	20000d0c 	.word	0x20000d0c
 8002a0c:	200009f4 	.word	0x200009f4
 8002a10:	0800bb88 	.word	0x0800bb88
 8002a14:	20001120 	.word	0x20001120
 8002a18:	20001160 	.word	0x20001160
 8002a1c:	200009ec 	.word	0x200009ec
 8002a20:	20000648 	.word	0x20000648
 8002a24:	0800bba0 	.word	0x0800bba0
 8002a28:	200009f0 	.word	0x200009f0
 8002a2c:	20000b40 	.word	0x20000b40
 8002a30:	0800bbb4 	.word	0x0800bbb4
 8002a34:	20000d24 	.word	0x20000d24
 8002a38:	20000d08 	.word	0x20000d08
 8002a3c:	0800bbc8 	.word	0x0800bbc8
 8002a40:	20000638 	.word	0x20000638
 8002a44:	20000690 	.word	0x20000690
 8002a48:	0800bbdc 	.word	0x0800bbdc
 8002a4c:	20000a4c 	.word	0x20000a4c
 8002a50:	0800bbec 	.word	0x0800bbec

08002a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr

08002a60 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002a66:	f000 fa1b 	bl	8002ea0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002a6a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002a6e:	2201      	movs	r2, #1
 8002a70:	2178      	movs	r1, #120	; 0x78
 8002a72:	4858      	ldr	r0, [pc, #352]	; (8002bd4 <SSD1306_Init+0x174>)
 8002a74:	f004 f9a8 	bl	8006dc8 <HAL_I2C_IsDeviceReady>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	e0a3      	b.n	8002bca <SSD1306_Init+0x16a>
	}
	
	/* A little delay */
	uint32_t p = 250000;
 8002a82:	4b55      	ldr	r3, [pc, #340]	; (8002bd8 <SSD1306_Init+0x178>)
 8002a84:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a86:	e002      	b.n	8002a8e <SSD1306_Init+0x2e>
		p--;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f9      	bne.n	8002a88 <SSD1306_Init+0x28>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002a94:	22ae      	movs	r2, #174	; 0xae
 8002a96:	2100      	movs	r1, #0
 8002a98:	2078      	movs	r0, #120	; 0x78
 8002a9a:	f000 fa6f 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	2078      	movs	r0, #120	; 0x78
 8002aa4:	f000 fa6a 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	2100      	movs	r1, #0
 8002aac:	2078      	movs	r0, #120	; 0x78
 8002aae:	f000 fa65 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ab2:	22b0      	movs	r2, #176	; 0xb0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2078      	movs	r0, #120	; 0x78
 8002ab8:	f000 fa60 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002abc:	22c8      	movs	r2, #200	; 0xc8
 8002abe:	2100      	movs	r1, #0
 8002ac0:	2078      	movs	r0, #120	; 0x78
 8002ac2:	f000 fa5b 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2078      	movs	r0, #120	; 0x78
 8002acc:	f000 fa56 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	2078      	movs	r0, #120	; 0x78
 8002ad6:	f000 fa51 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	2100      	movs	r1, #0
 8002ade:	2078      	movs	r0, #120	; 0x78
 8002ae0:	f000 fa4c 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002ae4:	2281      	movs	r2, #129	; 0x81
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2078      	movs	r0, #120	; 0x78
 8002aea:	f000 fa47 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002aee:	22ff      	movs	r2, #255	; 0xff
 8002af0:	2100      	movs	r1, #0
 8002af2:	2078      	movs	r0, #120	; 0x78
 8002af4:	f000 fa42 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002af8:	22a1      	movs	r2, #161	; 0xa1
 8002afa:	2100      	movs	r1, #0
 8002afc:	2078      	movs	r0, #120	; 0x78
 8002afe:	f000 fa3d 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002b02:	22a6      	movs	r2, #166	; 0xa6
 8002b04:	2100      	movs	r1, #0
 8002b06:	2078      	movs	r0, #120	; 0x78
 8002b08:	f000 fa38 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002b0c:	22a8      	movs	r2, #168	; 0xa8
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2078      	movs	r0, #120	; 0x78
 8002b12:	f000 fa33 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002b16:	223f      	movs	r2, #63	; 0x3f
 8002b18:	2100      	movs	r1, #0
 8002b1a:	2078      	movs	r0, #120	; 0x78
 8002b1c:	f000 fa2e 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002b20:	22a4      	movs	r2, #164	; 0xa4
 8002b22:	2100      	movs	r1, #0
 8002b24:	2078      	movs	r0, #120	; 0x78
 8002b26:	f000 fa29 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002b2a:	22d3      	movs	r2, #211	; 0xd3
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2078      	movs	r0, #120	; 0x78
 8002b30:	f000 fa24 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002b34:	2200      	movs	r2, #0
 8002b36:	2100      	movs	r1, #0
 8002b38:	2078      	movs	r0, #120	; 0x78
 8002b3a:	f000 fa1f 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002b3e:	22d5      	movs	r2, #213	; 0xd5
 8002b40:	2100      	movs	r1, #0
 8002b42:	2078      	movs	r0, #120	; 0x78
 8002b44:	f000 fa1a 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002b48:	22f0      	movs	r2, #240	; 0xf0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2078      	movs	r0, #120	; 0x78
 8002b4e:	f000 fa15 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002b52:	22d9      	movs	r2, #217	; 0xd9
 8002b54:	2100      	movs	r1, #0
 8002b56:	2078      	movs	r0, #120	; 0x78
 8002b58:	f000 fa10 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002b5c:	2222      	movs	r2, #34	; 0x22
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2078      	movs	r0, #120	; 0x78
 8002b62:	f000 fa0b 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002b66:	22da      	movs	r2, #218	; 0xda
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2078      	movs	r0, #120	; 0x78
 8002b6c:	f000 fa06 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002b70:	2212      	movs	r2, #18
 8002b72:	2100      	movs	r1, #0
 8002b74:	2078      	movs	r0, #120	; 0x78
 8002b76:	f000 fa01 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002b7a:	22db      	movs	r2, #219	; 0xdb
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2078      	movs	r0, #120	; 0x78
 8002b80:	f000 f9fc 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002b84:	2220      	movs	r2, #32
 8002b86:	2100      	movs	r1, #0
 8002b88:	2078      	movs	r0, #120	; 0x78
 8002b8a:	f000 f9f7 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002b8e:	228d      	movs	r2, #141	; 0x8d
 8002b90:	2100      	movs	r1, #0
 8002b92:	2078      	movs	r0, #120	; 0x78
 8002b94:	f000 f9f2 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002b98:	2214      	movs	r2, #20
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	2078      	movs	r0, #120	; 0x78
 8002b9e:	f000 f9ed 	bl	8002f7c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002ba2:	22af      	movs	r2, #175	; 0xaf
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2078      	movs	r0, #120	; 0x78
 8002ba8:	f000 f9e8 	bl	8002f7c <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002bac:	2000      	movs	r0, #0
 8002bae:	f000 f845 	bl	8002c3c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002bb2:	f000 f815 	bl	8002be0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002bb6:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <SSD1306_Init+0x17c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <SSD1306_Init+0x17c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002bc2:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <SSD1306_Init+0x17c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002bc8:	2301      	movs	r3, #1
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000eac 	.word	0x20000eac
 8002bd8:	0003d090 	.word	0x0003d090
 8002bdc:	20000610 	.word	0x20000610

08002be0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002be6:	2300      	movs	r3, #0
 8002be8:	71fb      	strb	r3, [r7, #7]
 8002bea:	e01d      	b.n	8002c28 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	3b50      	subs	r3, #80	; 0x50
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	2078      	movs	r0, #120	; 0x78
 8002bf8:	f000 f9c0 	bl	8002f7c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2078      	movs	r0, #120	; 0x78
 8002c02:	f000 f9bb 	bl	8002f7c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002c06:	2210      	movs	r2, #16
 8002c08:	2100      	movs	r1, #0
 8002c0a:	2078      	movs	r0, #120	; 0x78
 8002c0c:	f000 f9b6 	bl	8002f7c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	01db      	lsls	r3, r3, #7
 8002c14:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <SSD1306_UpdateScreen+0x58>)
 8002c16:	441a      	add	r2, r3
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	2140      	movs	r1, #64	; 0x40
 8002c1c:	2078      	movs	r0, #120	; 0x78
 8002c1e:	f000 f953 	bl	8002ec8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002c22:	79fb      	ldrb	r3, [r7, #7]
 8002c24:	3301      	adds	r3, #1
 8002c26:	71fb      	strb	r3, [r7, #7]
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b07      	cmp	r3, #7
 8002c2c:	d9de      	bls.n	8002bec <SSD1306_UpdateScreen+0xc>
	}
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000210 	.word	0x20000210

08002c3c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <SSD1306_Fill+0x14>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e001      	b.n	8002c54 <SSD1306_Fill+0x18>
 8002c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4803      	ldr	r0, [pc, #12]	; (8002c68 <SSD1306_Fill+0x2c>)
 8002c5c:	f006 fce6 	bl	800962c <memset>
}
 8002c60:	bf00      	nop
 8002c62:	3708      	adds	r7, #8
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000210 	.word	0x20000210

08002c6c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	80fb      	strh	r3, [r7, #6]
 8002c76:	460b      	mov	r3, r1
 8002c78:	80bb      	strh	r3, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	70fb      	strb	r3, [r7, #3]
	if (
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	2b7f      	cmp	r3, #127	; 0x7f
 8002c82:	d848      	bhi.n	8002d16 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002c84:	88bb      	ldrh	r3, [r7, #4]
 8002c86:	2b3f      	cmp	r3, #63	; 0x3f
 8002c88:	d845      	bhi.n	8002d16 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002c8a:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <SSD1306_DrawPixel+0xb4>)
 8002c8c:	791b      	ldrb	r3, [r3, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d11a      	bne.n	8002cdc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ca6:	88fa      	ldrh	r2, [r7, #6]
 8002ca8:	88bb      	ldrh	r3, [r7, #4]
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	b298      	uxth	r0, r3
 8002cae:	4603      	mov	r3, r0
 8002cb0:	01db      	lsls	r3, r3, #7
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <SSD1306_DrawPixel+0xb8>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	b25a      	sxtb	r2, r3
 8002cba:	88bb      	ldrh	r3, [r7, #4]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	b25b      	sxtb	r3, r3
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	b259      	sxtb	r1, r3
 8002ccc:	88fa      	ldrh	r2, [r7, #6]
 8002cce:	4603      	mov	r3, r0
 8002cd0:	01db      	lsls	r3, r3, #7
 8002cd2:	4413      	add	r3, r2
 8002cd4:	b2c9      	uxtb	r1, r1
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <SSD1306_DrawPixel+0xb8>)
 8002cd8:	54d1      	strb	r1, [r2, r3]
 8002cda:	e01d      	b.n	8002d18 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002cdc:	88fa      	ldrh	r2, [r7, #6]
 8002cde:	88bb      	ldrh	r3, [r7, #4]
 8002ce0:	08db      	lsrs	r3, r3, #3
 8002ce2:	b298      	uxth	r0, r3
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	01db      	lsls	r3, r3, #7
 8002ce8:	4413      	add	r3, r2
 8002cea:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <SSD1306_DrawPixel+0xb8>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	b25a      	sxtb	r2, r3
 8002cf0:	88bb      	ldrh	r3, [r7, #4]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	b25b      	sxtb	r3, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	b25b      	sxtb	r3, r3
 8002d02:	4013      	ands	r3, r2
 8002d04:	b259      	sxtb	r1, r3
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	01db      	lsls	r3, r3, #7
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b2c9      	uxtb	r1, r1
 8002d10:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <SSD1306_DrawPixel+0xb8>)
 8002d12:	54d1      	strb	r1, [r2, r3]
 8002d14:	e000      	b.n	8002d18 <SSD1306_DrawPixel+0xac>
		return;
 8002d16:	bf00      	nop
	}
}
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr
 8002d20:	20000610 	.word	0x20000610
 8002d24:	20000210 	.word	0x20000210

08002d28 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	460a      	mov	r2, r1
 8002d32:	80fb      	strh	r3, [r7, #6]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002d38:	4a05      	ldr	r2, [pc, #20]	; (8002d50 <SSD1306_GotoXY+0x28>)
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002d3e:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <SSD1306_GotoXY+0x28>)
 8002d40:	88bb      	ldrh	r3, [r7, #4]
 8002d42:	8053      	strh	r3, [r2, #2]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	20000610 	.word	0x20000610

08002d54 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
 8002d60:	4613      	mov	r3, r2
 8002d62:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002d64:	4b3a      	ldr	r3, [pc, #232]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
	if (
 8002d70:	2b7f      	cmp	r3, #127	; 0x7f
 8002d72:	dc07      	bgt.n	8002d84 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002d74:	4b36      	ldr	r3, [pc, #216]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002d76:	885b      	ldrh	r3, [r3, #2]
 8002d78:	461a      	mov	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	785b      	ldrb	r3, [r3, #1]
 8002d7e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002d80:	2b3f      	cmp	r3, #63	; 0x3f
 8002d82:	dd01      	ble.n	8002d88 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e05e      	b.n	8002e46 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e04b      	b.n	8002e26 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	3b20      	subs	r3, #32
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	7849      	ldrb	r1, [r1, #1]
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	440b      	add	r3, r1
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	e030      	b.n	8002e14 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d010      	beq.n	8002de4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002dc2:	4b23      	ldr	r3, [pc, #140]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002dc4:	881a      	ldrh	r2, [r3, #0]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	b298      	uxth	r0, r3
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002dd0:	885a      	ldrh	r2, [r3, #2]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	79ba      	ldrb	r2, [r7, #6]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7ff ff45 	bl	8002c6c <SSD1306_DrawPixel>
 8002de2:	e014      	b.n	8002e0e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002de4:	4b1a      	ldr	r3, [pc, #104]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002de6:	881a      	ldrh	r2, [r3, #0]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	b298      	uxth	r0, r3
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002df2:	885a      	ldrh	r2, [r3, #2]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4413      	add	r3, r2
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	79bb      	ldrb	r3, [r7, #6]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f7ff ff2f 	bl	8002c6c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	3301      	adds	r3, #1
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d3c8      	bcc.n	8002db2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	3301      	adds	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	785b      	ldrb	r3, [r3, #1]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d3ad      	bcc.n	8002d8e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002e34:	881a      	ldrh	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <SSD1306_Putc+0xfc>)
 8002e42:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002e44:	79fb      	ldrb	r3, [r7, #7]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000610 	.word	0x20000610

08002e54 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002e62:	e012      	b.n	8002e8a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	79fa      	ldrb	r2, [r7, #7]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7ff ff71 	bl	8002d54 <SSD1306_Putc>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d002      	beq.n	8002e84 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	e008      	b.n	8002e96 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1e8      	bne.n	8002e64 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	781b      	ldrb	r3, [r3, #0]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <ssd1306_I2C_Init+0x24>)
 8002ea8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002eaa:	e002      	b.n	8002eb2 <ssd1306_I2C_Init+0x12>
		p--;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f9      	bne.n	8002eac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bc80      	pop	{r7}
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	00055730 	.word	0x00055730

08002ec8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	603a      	str	r2, [r7, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	71fb      	strb	r3, [r7, #7]
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	71bb      	strb	r3, [r7, #6]
 8002eda:	4613      	mov	r3, r2
 8002edc:	80bb      	strh	r3, [r7, #4]
 8002ede:	466b      	mov	r3, sp
 8002ee0:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8002ee2:	88bb      	ldrh	r3, [r7, #4]
 8002ee4:	1c58      	adds	r0, r3, #1
 8002ee6:	1e43      	subs	r3, r0, #1
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	4603      	mov	r3, r0
 8002eec:	4619      	mov	r1, r3
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	f04f 0400 	mov.w	r4, #0
 8002efa:	00d4      	lsls	r4, r2, #3
 8002efc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f00:	00cb      	lsls	r3, r1, #3
 8002f02:	4603      	mov	r3, r0
 8002f04:	4619      	mov	r1, r3
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	f04f 0400 	mov.w	r4, #0
 8002f12:	00d4      	lsls	r4, r2, #3
 8002f14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f18:	00cb      	lsls	r3, r1, #3
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	3307      	adds	r3, #7
 8002f1e:	08db      	lsrs	r3, r3, #3
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	ebad 0d03 	sub.w	sp, sp, r3
 8002f26:	ab02      	add	r3, sp, #8
 8002f28:	3300      	adds	r3, #0
 8002f2a:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	79ba      	ldrb	r2, [r7, #6]
 8002f30:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8002f32:	2301      	movs	r3, #1
 8002f34:	75fb      	strb	r3, [r7, #23]
 8002f36:	e00a      	b.n	8002f4e <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	441a      	add	r2, r3
 8002f40:	7dfb      	ldrb	r3, [r7, #23]
 8002f42:	7811      	ldrb	r1, [r2, #0]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8002f48:	7dfb      	ldrb	r3, [r7, #23]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	75fb      	strb	r3, [r7, #23]
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	88ba      	ldrh	r2, [r7, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d2ef      	bcs.n	8002f38 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	b299      	uxth	r1, r3
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	88b8      	ldrh	r0, [r7, #4]
 8002f60:	230a      	movs	r3, #10
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4603      	mov	r3, r0
 8002f66:	4804      	ldr	r0, [pc, #16]	; (8002f78 <ssd1306_I2C_WriteMulti+0xb0>)
 8002f68:	f003 fd36 	bl	80069d8 <HAL_I2C_Master_Transmit>
 8002f6c:	46ad      	mov	sp, r5
}
 8002f6e:	bf00      	nop
 8002f70:	3718      	adds	r7, #24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bdb0      	pop	{r4, r5, r7, pc}
 8002f76:	bf00      	nop
 8002f78:	20000eac 	.word	0x20000eac

08002f7c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	4603      	mov	r3, r0
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	460b      	mov	r3, r1
 8002f88:	71bb      	strb	r3, [r7, #6]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002f8e:	79bb      	ldrb	r3, [r7, #6]
 8002f90:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002f92:	797b      	ldrb	r3, [r7, #5]
 8002f94:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	b299      	uxth	r1, r3
 8002f9a:	f107 020c 	add.w	r2, r7, #12
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	4803      	ldr	r0, [pc, #12]	; (8002fb4 <ssd1306_I2C_Write+0x38>)
 8002fa6:	f003 fd17 	bl	80069d8 <HAL_I2C_Master_Transmit>
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20000eac 	.word	0x20000eac

08002fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	607b      	str	r3, [r7, #4]
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <HAL_MspInit+0x48>)
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc6:	4a0e      	ldr	r2, [pc, #56]	; (8003000 <HAL_MspInit+0x48>)
 8002fc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fcc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fce:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_MspInit+0x48>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd6:	607b      	str	r3, [r7, #4]
 8002fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4b08      	ldr	r3, [pc, #32]	; (8003000 <HAL_MspInit+0x48>)
 8002fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_MspInit+0x48>)
 8002fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fea:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_MspInit+0x48>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	603b      	str	r3, [r7, #0]
 8002ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bc80      	pop	{r7}
 8002ffe:	4770      	bx	lr
 8003000:	40023800 	.word	0x40023800

08003004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003014:	e7fe      	b.n	8003014 <HardFault_Handler+0x4>

08003016 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003016:	b480      	push	{r7}
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301a:	e7fe      	b.n	800301a <MemManage_Handler+0x4>

0800301c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <BusFault_Handler+0x4>

08003022 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <UsageFault_Handler+0x4>

08003028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003050:	f001 faa6 	bl	80045a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	bd80      	pop	{r7, pc}

08003058 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800305c:	4802      	ldr	r0, [pc, #8]	; (8003068 <CAN1_RX1_IRQHandler+0x10>)
 800305e:	f002 fadb 	bl	8005618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000e30 	.word	0x20000e30

0800306c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003070:	4802      	ldr	r0, [pc, #8]	; (800307c <CAN1_SCE_IRQHandler+0x10>)
 8003072:	f002 fad1 	bl	8005618 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000e30 	.word	0x20000e30

08003080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	CAN_Rx_Process();	//can receive handle
 8003084:	f7fe fdd8 	bl	8001c38 <CAN_Rx_Process>

	// *********************** Sensing Process (ADC average) ******************************

	ADC_SUM_Iin = ADC_SUM_Iin - ADC_Array_Iin[i];		//delete old data
 8003088:	4ba1      	ldr	r3, [pc, #644]	; (8003310 <TIM2_IRQHandler+0x290>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4aa1      	ldr	r2, [pc, #644]	; (8003314 <TIM2_IRQHandler+0x294>)
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	4611      	mov	r1, r2
 8003092:	4aa1      	ldr	r2, [pc, #644]	; (8003318 <TIM2_IRQHandler+0x298>)
 8003094:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	4a9d      	ldr	r2, [pc, #628]	; (8003310 <TIM2_IRQHandler+0x290>)
 800309c:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN - ADC_Array_VinN[i];
 800309e:	4b9f      	ldr	r3, [pc, #636]	; (800331c <TIM2_IRQHandler+0x29c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a9c      	ldr	r2, [pc, #624]	; (8003314 <TIM2_IRQHandler+0x294>)
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	4611      	mov	r1, r2
 80030a8:	4a9d      	ldr	r2, [pc, #628]	; (8003320 <TIM2_IRQHandler+0x2a0>)
 80030aa:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	4a9a      	ldr	r2, [pc, #616]	; (800331c <TIM2_IRQHandler+0x29c>)
 80030b2:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP - ADC_Array_VinP[i];
 80030b4:	4b9b      	ldr	r3, [pc, #620]	; (8003324 <TIM2_IRQHandler+0x2a4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a96      	ldr	r2, [pc, #600]	; (8003314 <TIM2_IRQHandler+0x294>)
 80030ba:	7812      	ldrb	r2, [r2, #0]
 80030bc:	4611      	mov	r1, r2
 80030be:	4a9a      	ldr	r2, [pc, #616]	; (8003328 <TIM2_IRQHandler+0x2a8>)
 80030c0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	4a97      	ldr	r2, [pc, #604]	; (8003324 <TIM2_IRQHandler+0x2a4>)
 80030c8:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout - ADC_Array_Iout[i];
 80030ca:	4b98      	ldr	r3, [pc, #608]	; (800332c <TIM2_IRQHandler+0x2ac>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a91      	ldr	r2, [pc, #580]	; (8003314 <TIM2_IRQHandler+0x294>)
 80030d0:	7812      	ldrb	r2, [r2, #0]
 80030d2:	4611      	mov	r1, r2
 80030d4:	4a96      	ldr	r2, [pc, #600]	; (8003330 <TIM2_IRQHandler+0x2b0>)
 80030d6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	4a93      	ldr	r2, [pc, #588]	; (800332c <TIM2_IRQHandler+0x2ac>)
 80030de:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN - ADC_Array_VoutN[i];
 80030e0:	4b94      	ldr	r3, [pc, #592]	; (8003334 <TIM2_IRQHandler+0x2b4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a8b      	ldr	r2, [pc, #556]	; (8003314 <TIM2_IRQHandler+0x294>)
 80030e6:	7812      	ldrb	r2, [r2, #0]
 80030e8:	4611      	mov	r1, r2
 80030ea:	4a93      	ldr	r2, [pc, #588]	; (8003338 <TIM2_IRQHandler+0x2b8>)
 80030ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	4a90      	ldr	r2, [pc, #576]	; (8003334 <TIM2_IRQHandler+0x2b4>)
 80030f4:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP - ADC_Array_VoutP[i];
 80030f6:	4b91      	ldr	r3, [pc, #580]	; (800333c <TIM2_IRQHandler+0x2bc>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a86      	ldr	r2, [pc, #536]	; (8003314 <TIM2_IRQHandler+0x294>)
 80030fc:	7812      	ldrb	r2, [r2, #0]
 80030fe:	4611      	mov	r1, r2
 8003100:	4a8f      	ldr	r2, [pc, #572]	; (8003340 <TIM2_IRQHandler+0x2c0>)
 8003102:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	4a8c      	ldr	r2, [pc, #560]	; (800333c <TIM2_IRQHandler+0x2bc>)
 800310a:	6013      	str	r3, [r2, #0]

	ADC_Array_Iin[i] = ADC_Iin;				//save data from ADC read
 800310c:	4b81      	ldr	r3, [pc, #516]	; (8003314 <TIM2_IRQHandler+0x294>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	461a      	mov	r2, r3
 8003112:	4b8c      	ldr	r3, [pc, #560]	; (8003344 <TIM2_IRQHandler+0x2c4>)
 8003114:	8819      	ldrh	r1, [r3, #0]
 8003116:	4b80      	ldr	r3, [pc, #512]	; (8003318 <TIM2_IRQHandler+0x298>)
 8003118:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinN[i] = ADC_VinN;
 800311c:	4b7d      	ldr	r3, [pc, #500]	; (8003314 <TIM2_IRQHandler+0x294>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	461a      	mov	r2, r3
 8003122:	4b89      	ldr	r3, [pc, #548]	; (8003348 <TIM2_IRQHandler+0x2c8>)
 8003124:	8819      	ldrh	r1, [r3, #0]
 8003126:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <TIM2_IRQHandler+0x2a0>)
 8003128:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinP[i] = ADC_VinP;
 800312c:	4b79      	ldr	r3, [pc, #484]	; (8003314 <TIM2_IRQHandler+0x294>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	4b86      	ldr	r3, [pc, #536]	; (800334c <TIM2_IRQHandler+0x2cc>)
 8003134:	8819      	ldrh	r1, [r3, #0]
 8003136:	4b7c      	ldr	r3, [pc, #496]	; (8003328 <TIM2_IRQHandler+0x2a8>)
 8003138:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Iout[i] = ADC_Iout;
 800313c:	4b75      	ldr	r3, [pc, #468]	; (8003314 <TIM2_IRQHandler+0x294>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	461a      	mov	r2, r3
 8003142:	4b83      	ldr	r3, [pc, #524]	; (8003350 <TIM2_IRQHandler+0x2d0>)
 8003144:	8819      	ldrh	r1, [r3, #0]
 8003146:	4b7a      	ldr	r3, [pc, #488]	; (8003330 <TIM2_IRQHandler+0x2b0>)
 8003148:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutN[i] = ADC_VoutN;
 800314c:	4b71      	ldr	r3, [pc, #452]	; (8003314 <TIM2_IRQHandler+0x294>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b80      	ldr	r3, [pc, #512]	; (8003354 <TIM2_IRQHandler+0x2d4>)
 8003154:	8819      	ldrh	r1, [r3, #0]
 8003156:	4b78      	ldr	r3, [pc, #480]	; (8003338 <TIM2_IRQHandler+0x2b8>)
 8003158:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutP[i] = ADC_VoutP;
 800315c:	4b6d      	ldr	r3, [pc, #436]	; (8003314 <TIM2_IRQHandler+0x294>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	4b7d      	ldr	r3, [pc, #500]	; (8003358 <TIM2_IRQHandler+0x2d8>)
 8003164:	8819      	ldrh	r1, [r3, #0]
 8003166:	4b76      	ldr	r3, [pc, #472]	; (8003340 <TIM2_IRQHandler+0x2c0>)
 8003168:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	ADC_SUM_Iin = ADC_SUM_Iin + ADC_Array_Iin[i];		//summing data and add new data
 800316c:	4b69      	ldr	r3, [pc, #420]	; (8003314 <TIM2_IRQHandler+0x294>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b69      	ldr	r3, [pc, #420]	; (8003318 <TIM2_IRQHandler+0x298>)
 8003174:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003178:	461a      	mov	r2, r3
 800317a:	4b65      	ldr	r3, [pc, #404]	; (8003310 <TIM2_IRQHandler+0x290>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4413      	add	r3, r2
 8003180:	4a63      	ldr	r2, [pc, #396]	; (8003310 <TIM2_IRQHandler+0x290>)
 8003182:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN + ADC_Array_VinN[i];
 8003184:	4b63      	ldr	r3, [pc, #396]	; (8003314 <TIM2_IRQHandler+0x294>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b65      	ldr	r3, [pc, #404]	; (8003320 <TIM2_IRQHandler+0x2a0>)
 800318c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003190:	461a      	mov	r2, r3
 8003192:	4b62      	ldr	r3, [pc, #392]	; (800331c <TIM2_IRQHandler+0x29c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4413      	add	r3, r2
 8003198:	4a60      	ldr	r2, [pc, #384]	; (800331c <TIM2_IRQHandler+0x29c>)
 800319a:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP + ADC_Array_VinP[i];
 800319c:	4b5d      	ldr	r3, [pc, #372]	; (8003314 <TIM2_IRQHandler+0x294>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b61      	ldr	r3, [pc, #388]	; (8003328 <TIM2_IRQHandler+0x2a8>)
 80031a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031a8:	461a      	mov	r2, r3
 80031aa:	4b5e      	ldr	r3, [pc, #376]	; (8003324 <TIM2_IRQHandler+0x2a4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4413      	add	r3, r2
 80031b0:	4a5c      	ldr	r2, [pc, #368]	; (8003324 <TIM2_IRQHandler+0x2a4>)
 80031b2:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout + ADC_Array_Iout[i];
 80031b4:	4b57      	ldr	r3, [pc, #348]	; (8003314 <TIM2_IRQHandler+0x294>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <TIM2_IRQHandler+0x2b0>)
 80031bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b5a      	ldr	r3, [pc, #360]	; (800332c <TIM2_IRQHandler+0x2ac>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a58      	ldr	r2, [pc, #352]	; (800332c <TIM2_IRQHandler+0x2ac>)
 80031ca:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN + ADC_Array_VoutN[i];
 80031cc:	4b51      	ldr	r3, [pc, #324]	; (8003314 <TIM2_IRQHandler+0x294>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	461a      	mov	r2, r3
 80031d2:	4b59      	ldr	r3, [pc, #356]	; (8003338 <TIM2_IRQHandler+0x2b8>)
 80031d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031d8:	461a      	mov	r2, r3
 80031da:	4b56      	ldr	r3, [pc, #344]	; (8003334 <TIM2_IRQHandler+0x2b4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4413      	add	r3, r2
 80031e0:	4a54      	ldr	r2, [pc, #336]	; (8003334 <TIM2_IRQHandler+0x2b4>)
 80031e2:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP + ADC_Array_VoutP[i];
 80031e4:	4b4b      	ldr	r3, [pc, #300]	; (8003314 <TIM2_IRQHandler+0x294>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b55      	ldr	r3, [pc, #340]	; (8003340 <TIM2_IRQHandler+0x2c0>)
 80031ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4b52      	ldr	r3, [pc, #328]	; (800333c <TIM2_IRQHandler+0x2bc>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4413      	add	r3, r2
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <TIM2_IRQHandler+0x2bc>)
 80031fa:	6013      	str	r3, [r2, #0]

	ADC_Average_Iin = (float) ADC_SUM_Iin / maxdata;	//calculate average data
 80031fc:	4b44      	ldr	r3, [pc, #272]	; (8003310 <TIM2_IRQHandler+0x290>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd fd87 	bl	8000d14 <__aeabi_i2f>
 8003206:	4603      	mov	r3, r0
 8003208:	4954      	ldr	r1, [pc, #336]	; (800335c <TIM2_IRQHandler+0x2dc>)
 800320a:	4618      	mov	r0, r3
 800320c:	f7fd fe8a 	bl	8000f24 <__aeabi_fdiv>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b52      	ldr	r3, [pc, #328]	; (8003360 <TIM2_IRQHandler+0x2e0>)
 8003216:	601a      	str	r2, [r3, #0]
	ADC_Average_VinN = (float) ADC_SUM_VinN / maxdata;
 8003218:	4b40      	ldr	r3, [pc, #256]	; (800331c <TIM2_IRQHandler+0x29c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f7fd fd79 	bl	8000d14 <__aeabi_i2f>
 8003222:	4603      	mov	r3, r0
 8003224:	494d      	ldr	r1, [pc, #308]	; (800335c <TIM2_IRQHandler+0x2dc>)
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd fe7c 	bl	8000f24 <__aeabi_fdiv>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <TIM2_IRQHandler+0x2e4>)
 8003232:	601a      	str	r2, [r3, #0]
	ADC_Average_VinP = (float) ADC_SUM_VinP / maxdata;
 8003234:	4b3b      	ldr	r3, [pc, #236]	; (8003324 <TIM2_IRQHandler+0x2a4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7fd fd6b 	bl	8000d14 <__aeabi_i2f>
 800323e:	4603      	mov	r3, r0
 8003240:	4946      	ldr	r1, [pc, #280]	; (800335c <TIM2_IRQHandler+0x2dc>)
 8003242:	4618      	mov	r0, r3
 8003244:	f7fd fe6e 	bl	8000f24 <__aeabi_fdiv>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4b46      	ldr	r3, [pc, #280]	; (8003368 <TIM2_IRQHandler+0x2e8>)
 800324e:	601a      	str	r2, [r3, #0]
	ADC_Average_Iout = (float) ADC_SUM_Iout / maxdata;
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <TIM2_IRQHandler+0x2ac>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd fd5d 	bl	8000d14 <__aeabi_i2f>
 800325a:	4603      	mov	r3, r0
 800325c:	493f      	ldr	r1, [pc, #252]	; (800335c <TIM2_IRQHandler+0x2dc>)
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fe60 	bl	8000f24 <__aeabi_fdiv>
 8003264:	4603      	mov	r3, r0
 8003266:	461a      	mov	r2, r3
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <TIM2_IRQHandler+0x2ec>)
 800326a:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutN = (float) ADC_SUM_VoutN / maxdata;
 800326c:	4b31      	ldr	r3, [pc, #196]	; (8003334 <TIM2_IRQHandler+0x2b4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7fd fd4f 	bl	8000d14 <__aeabi_i2f>
 8003276:	4603      	mov	r3, r0
 8003278:	4938      	ldr	r1, [pc, #224]	; (800335c <TIM2_IRQHandler+0x2dc>)
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fe52 	bl	8000f24 <__aeabi_fdiv>
 8003280:	4603      	mov	r3, r0
 8003282:	461a      	mov	r2, r3
 8003284:	4b3a      	ldr	r3, [pc, #232]	; (8003370 <TIM2_IRQHandler+0x2f0>)
 8003286:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutP = (float) ADC_SUM_VoutP / maxdata;
 8003288:	4b2c      	ldr	r3, [pc, #176]	; (800333c <TIM2_IRQHandler+0x2bc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fd fd41 	bl	8000d14 <__aeabi_i2f>
 8003292:	4603      	mov	r3, r0
 8003294:	4931      	ldr	r1, [pc, #196]	; (800335c <TIM2_IRQHandler+0x2dc>)
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd fe44 	bl	8000f24 <__aeabi_fdiv>
 800329c:	4603      	mov	r3, r0
 800329e:	461a      	mov	r2, r3
 80032a0:	4b34      	ldr	r3, [pc, #208]	; (8003374 <TIM2_IRQHandler+0x2f4>)
 80032a2:	601a      	str	r2, [r3, #0]

	i++;
 80032a4:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <TIM2_IRQHandler+0x294>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b19      	ldr	r3, [pc, #100]	; (8003314 <TIM2_IRQHandler+0x294>)
 80032ae:	701a      	strb	r2, [r3, #0]
	i = i % maxdata;
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <TIM2_IRQHandler+0x294>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4a30      	ldr	r2, [pc, #192]	; (8003378 <TIM2_IRQHandler+0x2f8>)
 80032b6:	fba2 1203 	umull	r1, r2, r2, r3
 80032ba:	0952      	lsrs	r2, r2, #5
 80032bc:	2164      	movs	r1, #100	; 0x64
 80032be:	fb01 f202 	mul.w	r2, r1, r2
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <TIM2_IRQHandler+0x294>)
 80032c8:	701a      	strb	r2, [r3, #0]

	//Current value calculation and calibration
	Current_Charger = 0.0125*ADC_Average_Iout - 24.845 - OFFSET_CurrentSense;
 80032ca:	4b28      	ldr	r3, [pc, #160]	; (800336c <TIM2_IRQHandler+0x2ec>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fd f8e6 	bl	80004a0 <__aeabi_f2d>
 80032d4:	a30a      	add	r3, pc, #40	; (adr r3, 8003300 <TIM2_IRQHandler+0x280>)
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f7fd f939 	bl	8000550 <__aeabi_dmul>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	4618      	mov	r0, r3
 80032e4:	4621      	mov	r1, r4
 80032e6:	a308      	add	r3, pc, #32	; (adr r3, 8003308 <TIM2_IRQHandler+0x288>)
 80032e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ec:	f7fc ff78 	bl	80001e0 <__aeabi_dsub>
 80032f0:	4603      	mov	r3, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4625      	mov	r5, r4
 80032f6:	461c      	mov	r4, r3
 80032f8:	4b20      	ldr	r3, [pc, #128]	; (800337c <TIM2_IRQHandler+0x2fc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	e040      	b.n	8003380 <TIM2_IRQHandler+0x300>
 80032fe:	bf00      	nop
 8003300:	9999999a 	.word	0x9999999a
 8003304:	3f899999 	.word	0x3f899999
 8003308:	eb851eb8 	.word	0xeb851eb8
 800330c:	4038d851 	.word	0x4038d851
 8003310:	20000694 	.word	0x20000694
 8003314:	20001010 	.word	0x20001010
 8003318:	200006b4 	.word	0x200006b4
 800331c:	20000990 	.word	0x20000990
 8003320:	20000a6c 	.word	0x20000a6c
 8003324:	20000c2c 	.word	0x20000c2c
 8003328:	20000b58 	.word	0x20000b58
 800332c:	200009e4 	.word	0x200009e4
 8003330:	200008c8 	.word	0x200008c8
 8003334:	2000062c 	.word	0x2000062c
 8003338:	200007e0 	.word	0x200007e0
 800333c:	2000069c 	.word	0x2000069c
 8003340:	20000c40 	.word	0x20000c40
 8003344:	2000065a 	.word	0x2000065a
 8003348:	200009c0 	.word	0x200009c0
 800334c:	200006a4 	.word	0x200006a4
 8003350:	20000688 	.word	0x20000688
 8003354:	20000640 	.word	0x20000640
 8003358:	200007b0 	.word	0x200007b0
 800335c:	42c80000 	.word	0x42c80000
 8003360:	200008c0 	.word	0x200008c0
 8003364:	2000078c 	.word	0x2000078c
 8003368:	200009d4 	.word	0x200009d4
 800336c:	20000d24 	.word	0x20000d24
 8003370:	20000630 	.word	0x20000630
 8003374:	200007ac 	.word	0x200007ac
 8003378:	51eb851f 	.word	0x51eb851f
 800337c:	20000788 	.word	0x20000788
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f88d 	bl	80004a0 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4620      	mov	r0, r4
 800338c:	4629      	mov	r1, r5
 800338e:	f7fc ff27 	bl	80001e0 <__aeabi_dsub>
 8003392:	4603      	mov	r3, r0
 8003394:	460c      	mov	r4, r1
 8003396:	4618      	mov	r0, r3
 8003398:	4621      	mov	r1, r4
 800339a:	f7fd fbb1 	bl	8000b00 <__aeabi_d2f>
 800339e:	4602      	mov	r2, r0
 80033a0:	4bb5      	ldr	r3, [pc, #724]	; (8003678 <TIM2_IRQHandler+0x5f8>)
 80033a2:	601a      	str	r2, [r3, #0]
	OFFSET_Calibration = 0.0125*ADC_Average_Iout - 24.845;
 80033a4:	4bb5      	ldr	r3, [pc, #724]	; (800367c <TIM2_IRQHandler+0x5fc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd f879 	bl	80004a0 <__aeabi_f2d>
 80033ae:	a3a4      	add	r3, pc, #656	; (adr r3, 8003640 <TIM2_IRQHandler+0x5c0>)
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f7fd f8cc 	bl	8000550 <__aeabi_dmul>
 80033b8:	4603      	mov	r3, r0
 80033ba:	460c      	mov	r4, r1
 80033bc:	4618      	mov	r0, r3
 80033be:	4621      	mov	r1, r4
 80033c0:	a3a1      	add	r3, pc, #644	; (adr r3, 8003648 <TIM2_IRQHandler+0x5c8>)
 80033c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c6:	f7fc ff0b 	bl	80001e0 <__aeabi_dsub>
 80033ca:	4603      	mov	r3, r0
 80033cc:	460c      	mov	r4, r1
 80033ce:	4618      	mov	r0, r3
 80033d0:	4621      	mov	r1, r4
 80033d2:	f7fd fb95 	bl	8000b00 <__aeabi_d2f>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4ba9      	ldr	r3, [pc, #676]	; (8003680 <TIM2_IRQHandler+0x600>)
 80033da:	601a      	str	r2, [r3, #0]
	if (Current_Charger<=0)
 80033dc:	4ba6      	ldr	r3, [pc, #664]	; (8003678 <TIM2_IRQHandler+0x5f8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fd fe91 	bl	800110c <__aeabi_fcmple>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <TIM2_IRQHandler+0x378>
		Current_Charger = 0;
 80033f0:	4ba1      	ldr	r3, [pc, #644]	; (8003678 <TIM2_IRQHandler+0x5f8>)
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

	//Voltage value calculation and calibration
	ADC_VoltageResult = fabs (ADC_Average_VoutN - ADC_Average_VoutP);
 80033f8:	4ba2      	ldr	r3, [pc, #648]	; (8003684 <TIM2_IRQHandler+0x604>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4ba2      	ldr	r3, [pc, #648]	; (8003688 <TIM2_IRQHandler+0x608>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	4610      	mov	r0, r2
 8003404:	f7fd fbd0 	bl	8000ba8 <__aeabi_fsub>
 8003408:	4603      	mov	r3, r0
 800340a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800340e:	4a9f      	ldr	r2, [pc, #636]	; (800368c <TIM2_IRQHandler+0x60c>)
 8003410:	6013      	str	r3, [r2, #0]
	Voltage_Charger = ADC_VoltageResult*0.0275-0.018;
 8003412:	4b9e      	ldr	r3, [pc, #632]	; (800368c <TIM2_IRQHandler+0x60c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f842 	bl	80004a0 <__aeabi_f2d>
 800341c:	a38c      	add	r3, pc, #560	; (adr r3, 8003650 <TIM2_IRQHandler+0x5d0>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fd f895 	bl	8000550 <__aeabi_dmul>
 8003426:	4603      	mov	r3, r0
 8003428:	460c      	mov	r4, r1
 800342a:	4618      	mov	r0, r3
 800342c:	4621      	mov	r1, r4
 800342e:	a38a      	add	r3, pc, #552	; (adr r3, 8003658 <TIM2_IRQHandler+0x5d8>)
 8003430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003434:	f7fc fed4 	bl	80001e0 <__aeabi_dsub>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	4618      	mov	r0, r3
 800343e:	4621      	mov	r1, r4
 8003440:	f7fd fb5e 	bl	8000b00 <__aeabi_d2f>
 8003444:	4602      	mov	r2, r0
 8003446:	4b92      	ldr	r3, [pc, #584]	; (8003690 <TIM2_IRQHandler+0x610>)
 8003448:	601a      	str	r2, [r3, #0]
	if(Voltage_Charger <= 0)
 800344a:	4b91      	ldr	r3, [pc, #580]	; (8003690 <TIM2_IRQHandler+0x610>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	4618      	mov	r0, r3
 8003454:	f7fd fe5a 	bl	800110c <__aeabi_fcmple>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <TIM2_IRQHandler+0x3e6>
		Voltage_Charger = 0;
 800345e:	4b8c      	ldr	r3, [pc, #560]	; (8003690 <TIM2_IRQHandler+0x610>)
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	601a      	str	r2, [r3, #0]

	Temp_delay_calc++;
 8003466:	4b8b      	ldr	r3, [pc, #556]	; (8003694 <TIM2_IRQHandler+0x614>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	3301      	adds	r3, #1
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4b89      	ldr	r3, [pc, #548]	; (8003694 <TIM2_IRQHandler+0x614>)
 8003470:	701a      	strb	r2, [r3, #0]

	if(Temp_delay_calc >= 100)
 8003472:	4b88      	ldr	r3, [pc, #544]	; (8003694 <TIM2_IRQHandler+0x614>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b63      	cmp	r3, #99	; 0x63
 8003478:	d96e      	bls.n	8003558 <TIM2_IRQHandler+0x4d8>
	{
		Temp_delay_calc = 0;
 800347a:	4b86      	ldr	r3, [pc, #536]	; (8003694 <TIM2_IRQHandler+0x614>)
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]
		Res_T1 = ADC_temp1*10000/(3900-ADC_temp1); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8003480:	4b85      	ldr	r3, [pc, #532]	; (8003698 <TIM2_IRQHandler+0x618>)
 8003482:	881b      	ldrh	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	f242 7310 	movw	r3, #10000	; 0x2710
 800348a:	fb03 f202 	mul.w	r2, r3, r2
 800348e:	4b82      	ldr	r3, [pc, #520]	; (8003698 <TIM2_IRQHandler+0x618>)
 8003490:	881b      	ldrh	r3, [r3, #0]
 8003492:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003496:	330c      	adds	r3, #12
 8003498:	fb92 f3f3 	sdiv	r3, r2, r3
 800349c:	4618      	mov	r0, r3
 800349e:	f7fd fc39 	bl	8000d14 <__aeabi_i2f>
 80034a2:	4602      	mov	r2, r0
 80034a4:	4b7d      	ldr	r3, [pc, #500]	; (800369c <TIM2_IRQHandler+0x61c>)
 80034a6:	601a      	str	r2, [r3, #0]
		Temp_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80034a8:	4b7c      	ldr	r3, [pc, #496]	; (800369c <TIM2_IRQHandler+0x61c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fc fff7 	bl	80004a0 <__aeabi_f2d>
 80034b2:	4603      	mov	r3, r0
 80034b4:	460c      	mov	r4, r1
 80034b6:	4618      	mov	r0, r3
 80034b8:	4621      	mov	r1, r4
 80034ba:	f008 f8fb 	bl	800b6b4 <log>
 80034be:	a368      	add	r3, pc, #416	; (adr r3, 8003660 <TIM2_IRQHandler+0x5e0>)
 80034c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c4:	f7fd f844 	bl	8000550 <__aeabi_dmul>
 80034c8:	4603      	mov	r3, r0
 80034ca:	460c      	mov	r4, r1
 80034cc:	4618      	mov	r0, r3
 80034ce:	4621      	mov	r1, r4
 80034d0:	a365      	add	r3, pc, #404	; (adr r3, 8003668 <TIM2_IRQHandler+0x5e8>)
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	f7fc fe85 	bl	80001e4 <__adddf3>
 80034da:	4603      	mov	r3, r0
 80034dc:	460c      	mov	r4, r1
 80034de:	4618      	mov	r0, r3
 80034e0:	4621      	mov	r1, r4
 80034e2:	f7fd fb0d 	bl	8000b00 <__aeabi_d2f>
 80034e6:	4602      	mov	r2, r0
 80034e8:	4b6d      	ldr	r3, [pc, #436]	; (80036a0 <TIM2_IRQHandler+0x620>)
 80034ea:	601a      	str	r2, [r3, #0]
		Res_T2 = ADC_temp2*10000/(3900-ADC_temp2);
 80034ec:	4b6d      	ldr	r3, [pc, #436]	; (80036a4 <TIM2_IRQHandler+0x624>)
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80034f6:	fb03 f202 	mul.w	r2, r3, r2
 80034fa:	4b6a      	ldr	r3, [pc, #424]	; (80036a4 <TIM2_IRQHandler+0x624>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8003502:	330c      	adds	r3, #12
 8003504:	fb92 f3f3 	sdiv	r3, r2, r3
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fc03 	bl	8000d14 <__aeabi_i2f>
 800350e:	4602      	mov	r2, r0
 8003510:	4b65      	ldr	r3, [pc, #404]	; (80036a8 <TIM2_IRQHandler+0x628>)
 8003512:	601a      	str	r2, [r3, #0]
		Temp_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8003514:	4b64      	ldr	r3, [pc, #400]	; (80036a8 <TIM2_IRQHandler+0x628>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f7fc ffc1 	bl	80004a0 <__aeabi_f2d>
 800351e:	4603      	mov	r3, r0
 8003520:	460c      	mov	r4, r1
 8003522:	4618      	mov	r0, r3
 8003524:	4621      	mov	r1, r4
 8003526:	f008 f8c5 	bl	800b6b4 <log>
 800352a:	a34d      	add	r3, pc, #308	; (adr r3, 8003660 <TIM2_IRQHandler+0x5e0>)
 800352c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003530:	f7fd f80e 	bl	8000550 <__aeabi_dmul>
 8003534:	4603      	mov	r3, r0
 8003536:	460c      	mov	r4, r1
 8003538:	4618      	mov	r0, r3
 800353a:	4621      	mov	r1, r4
 800353c:	a34a      	add	r3, pc, #296	; (adr r3, 8003668 <TIM2_IRQHandler+0x5e8>)
 800353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003542:	f7fc fe4f 	bl	80001e4 <__adddf3>
 8003546:	4603      	mov	r3, r0
 8003548:	460c      	mov	r4, r1
 800354a:	4618      	mov	r0, r3
 800354c:	4621      	mov	r1, r4
 800354e:	f7fd fad7 	bl	8000b00 <__aeabi_d2f>
 8003552:	4602      	mov	r2, r0
 8003554:	4b55      	ldr	r3, [pc, #340]	; (80036ac <TIM2_IRQHandler+0x62c>)
 8003556:	601a      	str	r2, [r3, #0]
	// *********************** end of Sensing Process (ADC average) ******************************


	// ***********************Charge or standby State ******************************

	if (Charger_Mode == 1){	//charge mode
 8003558:	4b55      	ldr	r3, [pc, #340]	; (80036b0 <TIM2_IRQHandler+0x630>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b01      	cmp	r3, #1
 800355e:	f040 8104 	bne.w	800376a <TIM2_IRQHandler+0x6ea>

		if(	flag_trip_overvoltage == 1		||
 8003562:	4b54      	ldr	r3, [pc, #336]	; (80036b4 <TIM2_IRQHandler+0x634>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d027      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			flag_trip_overtemperature == 1	||
 800356a:	4b53      	ldr	r3, [pc, #332]	; (80036b8 <TIM2_IRQHandler+0x638>)
 800356c:	781b      	ldrb	r3, [r3, #0]
		if(	flag_trip_overvoltage == 1		||
 800356e:	2b01      	cmp	r3, #1
 8003570:	d023      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			flag_trip_undertemperature == 1	||
 8003572:	4b52      	ldr	r3, [pc, #328]	; (80036bc <TIM2_IRQHandler+0x63c>)
 8003574:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature == 1	||
 8003576:	2b01      	cmp	r3, #1
 8003578:	d01f      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			flag_trip_overcurrentcharge == 1||
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <TIM2_IRQHandler+0x640>)
 800357c:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature == 1	||
 800357e:	2b01      	cmp	r3, #1
 8003580:	d01b      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			flag_trip_SOCOverCharge == 1	||
 8003582:	4b50      	ldr	r3, [pc, #320]	; (80036c4 <TIM2_IRQHandler+0x644>)
 8003584:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge == 1||
 8003586:	2b01      	cmp	r3, #1
 8003588:	d017      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			flag_trip_shortcircuit == 1		||
 800358a:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <TIM2_IRQHandler+0x648>)
 800358c:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge == 1	||
 800358e:	2b01      	cmp	r3, #1
 8003590:	d013      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			flag_trip_systemfailure == 1	||
 8003592:	4b4e      	ldr	r3, [pc, #312]	; (80036cc <TIM2_IRQHandler+0x64c>)
 8003594:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit == 1		||
 8003596:	2b01      	cmp	r3, #1
 8003598:	d00f      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			Flag_ChargerShortCircuit == 1	||
 800359a:	4b4d      	ldr	r3, [pc, #308]	; (80036d0 <TIM2_IRQHandler+0x650>)
 800359c:	781b      	ldrb	r3, [r3, #0]
			flag_trip_systemfailure == 1	||
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d00b      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverCurrent == 1	||
 80035a2:	4b4c      	ldr	r3, [pc, #304]	; (80036d4 <TIM2_IRQHandler+0x654>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerShortCircuit == 1	||
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d007      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverTemperature == 1||
 80035aa:	4b4b      	ldr	r3, [pc, #300]	; (80036d8 <TIM2_IRQHandler+0x658>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverCurrent == 1	||
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d003      	beq.n	80035ba <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverVoltage == 1	)
 80035b2:	4b4a      	ldr	r3, [pc, #296]	; (80036dc <TIM2_IRQHandler+0x65c>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverTemperature == 1||
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d11b      	bne.n	80035f2 <TIM2_IRQHandler+0x572>
			{
				duty=0;
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <TIM2_IRQHandler+0x660>)
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]
				htim1.Instance->CCR1=duty*TIM1->ARR;
 80035c2:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <TIM2_IRQHandler+0x664>)
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fba0 	bl	8000d0c <__aeabi_ui2f>
 80035cc:	4602      	mov	r2, r0
 80035ce:	4b44      	ldr	r3, [pc, #272]	; (80036e0 <TIM2_IRQHandler+0x660>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f7fd fbf1 	bl	8000dbc <__aeabi_fmul>
 80035da:	4603      	mov	r3, r0
 80035dc:	461a      	mov	r2, r3
 80035de:	4b42      	ldr	r3, [pc, #264]	; (80036e8 <TIM2_IRQHandler+0x668>)
 80035e0:	681c      	ldr	r4, [r3, #0]
 80035e2:	4610      	mov	r0, r2
 80035e4:	f7fd fdb0 	bl	8001148 <__aeabi_f2uiz>
 80035e8:	4603      	mov	r3, r0
 80035ea:	6363      	str	r3, [r4, #52]	; 0x34
				Charger_Mode = 2;
 80035ec:	4b30      	ldr	r3, [pc, #192]	; (80036b0 <TIM2_IRQHandler+0x630>)
 80035ee:	2202      	movs	r2, #2
 80035f0:	701a      	strb	r2, [r3, #0]
			}

		Fault_Check();
 80035f2:	f000 faa5 	bl	8003b40 <Fault_Check>
		htim1.Instance->CCR1=duty*TIM1->ARR;
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <TIM2_IRQHandler+0x664>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fd fb86 	bl	8000d0c <__aeabi_ui2f>
 8003600:	4602      	mov	r2, r0
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <TIM2_IRQHandler+0x660>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fd fbd7 	bl	8000dbc <__aeabi_fmul>
 800360e:	4603      	mov	r3, r0
 8003610:	461a      	mov	r2, r3
 8003612:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <TIM2_IRQHandler+0x668>)
 8003614:	681c      	ldr	r4, [r3, #0]
 8003616:	4610      	mov	r0, r2
 8003618:	f7fd fd96 	bl	8001148 <__aeabi_f2uiz>
 800361c:	4603      	mov	r3, r0
 800361e:	6363      	str	r3, [r4, #52]	; 0x34
		if(duty>=0.9)
 8003620:	4b2f      	ldr	r3, [pc, #188]	; (80036e0 <TIM2_IRQHandler+0x660>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7fc ff3b 	bl	80004a0 <__aeabi_f2d>
 800362a:	a311      	add	r3, pc, #68	; (adr r3, 8003670 <TIM2_IRQHandler+0x5f0>)
 800362c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003630:	f7fd fa14 	bl	8000a5c <__aeabi_dcmpge>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	e058      	b.n	80036ec <TIM2_IRQHandler+0x66c>
 800363a:	bf00      	nop
 800363c:	f3af 8000 	nop.w
 8003640:	9999999a 	.word	0x9999999a
 8003644:	3f899999 	.word	0x3f899999
 8003648:	eb851eb8 	.word	0xeb851eb8
 800364c:	4038d851 	.word	0x4038d851
 8003650:	c28f5c29 	.word	0xc28f5c29
 8003654:	3f9c28f5 	.word	0x3f9c28f5
 8003658:	8d4fdf3b 	.word	0x8d4fdf3b
 800365c:	3f926e97 	.word	0x3f926e97
 8003660:	cccccccd 	.word	0xcccccccd
 8003664:	c0380ccc 	.word	0xc0380ccc
 8003668:	b851eb85 	.word	0xb851eb85
 800366c:	406ecd1e 	.word	0x406ecd1e
 8003670:	cccccccd 	.word	0xcccccccd
 8003674:	3feccccc 	.word	0x3feccccc
 8003678:	20000d08 	.word	0x20000d08
 800367c:	20000d24 	.word	0x20000d24
 8003680:	20000680 	.word	0x20000680
 8003684:	20000630 	.word	0x20000630
 8003688:	200007ac 	.word	0x200007ac
 800368c:	200009f0 	.word	0x200009f0
 8003690:	20000b40 	.word	0x20000b40
 8003694:	20001018 	.word	0x20001018
 8003698:	200007ba 	.word	0x200007ba
 800369c:	200007c0 	.word	0x200007c0
 80036a0:	200009ec 	.word	0x200009ec
 80036a4:	20000644 	.word	0x20000644
 80036a8:	20000a68 	.word	0x20000a68
 80036ac:	20000648 	.word	0x20000648
 80036b0:	200006b0 	.word	0x200006b0
 80036b4:	20000d40 	.word	0x20000d40
 80036b8:	2000077c 	.word	0x2000077c
 80036bc:	200008b8 	.word	0x200008b8
 80036c0:	20000a48 	.word	0x20000a48
 80036c4:	20000643 	.word	0x20000643
 80036c8:	20000658 	.word	0x20000658
 80036cc:	20000674 	.word	0x20000674
 80036d0:	200007b8 	.word	0x200007b8
 80036d4:	2000079c 	.word	0x2000079c
 80036d8:	20000691 	.word	0x20000691
 80036dc:	200007bc 	.word	0x200007bc
 80036e0:	20000d0c 	.word	0x20000d0c
 80036e4:	40010000 	.word	0x40010000
 80036e8:	200010a0 	.word	0x200010a0
 80036ec:	d003      	beq.n	80036f6 <TIM2_IRQHandler+0x676>
			duty=0;
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <TIM2_IRQHandler+0x848>)
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]

		if(Batt_SOC.m_uint16t>70){
 80036f6:	4b75      	ldr	r3, [pc, #468]	; (80038cc <TIM2_IRQHandler+0x84c>)
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	2b46      	cmp	r3, #70	; 0x46
 80036fc:	d901      	bls.n	8003702 <TIM2_IRQHandler+0x682>
			Constant_Voltage();
 80036fe:	f7fd ff7f 	bl	8001600 <Constant_Voltage>
		}

		if(Batt_SOC.m_uint16t<=70){
 8003702:	4b72      	ldr	r3, [pc, #456]	; (80038cc <TIM2_IRQHandler+0x84c>)
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	2b46      	cmp	r3, #70	; 0x46
 8003708:	d801      	bhi.n	800370e <TIM2_IRQHandler+0x68e>
			Constant_Current();
 800370a:	f7fd fec1 	bl	8001490 <Constant_Current>
		}

		//Clearing Charger Decrease rating flag
		if (flag_Derating == 1 && Temp_T1<=(SetProtection_Temp1-15) && Temp_T2<=(SetProtection_Temp2-25)){
 800370e:	4b70      	ldr	r3, [pc, #448]	; (80038d0 <TIM2_IRQHandler+0x850>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d122      	bne.n	800375c <TIM2_IRQHandler+0x6dc>
 8003716:	4b6f      	ldr	r3, [pc, #444]	; (80038d4 <TIM2_IRQHandler+0x854>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	3b0f      	subs	r3, #15
 800371c:	4618      	mov	r0, r3
 800371e:	f7fd faf9 	bl	8000d14 <__aeabi_i2f>
 8003722:	4602      	mov	r2, r0
 8003724:	4b6c      	ldr	r3, [pc, #432]	; (80038d8 <TIM2_IRQHandler+0x858>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f7fd fcf8 	bl	8001120 <__aeabi_fcmpge>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d012      	beq.n	800375c <TIM2_IRQHandler+0x6dc>
 8003736:	4b69      	ldr	r3, [pc, #420]	; (80038dc <TIM2_IRQHandler+0x85c>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3b19      	subs	r3, #25
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd fae9 	bl	8000d14 <__aeabi_i2f>
 8003742:	4602      	mov	r2, r0
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <TIM2_IRQHandler+0x860>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	4610      	mov	r0, r2
 800374c:	f7fd fce8 	bl	8001120 <__aeabi_fcmpge>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <TIM2_IRQHandler+0x6dc>
			flag_Derating = 0;
 8003756:	4b5e      	ldr	r3, [pc, #376]	; (80038d0 <TIM2_IRQHandler+0x850>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
		}

		L=0; Tbuzz=999;
 800375c:	4b61      	ldr	r3, [pc, #388]	; (80038e4 <TIM2_IRQHandler+0x864>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	4b61      	ldr	r3, [pc, #388]	; (80038e8 <TIM2_IRQHandler+0x868>)
 8003764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003768:	801a      	strh	r2, [r3, #0]
	}

	if(Charger_Mode == 0){	//standby mode
 800376a:	4b60      	ldr	r3, [pc, #384]	; (80038ec <TIM2_IRQHandler+0x86c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d121      	bne.n	80037b6 <TIM2_IRQHandler+0x736>
		duty=0;
 8003772:	4b55      	ldr	r3, [pc, #340]	; (80038c8 <TIM2_IRQHandler+0x848>)
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR1=duty*TIM1->ARR;
 800377a:	4b5d      	ldr	r3, [pc, #372]	; (80038f0 <TIM2_IRQHandler+0x870>)
 800377c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fac4 	bl	8000d0c <__aeabi_ui2f>
 8003784:	4602      	mov	r2, r0
 8003786:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <TIM2_IRQHandler+0x848>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4619      	mov	r1, r3
 800378c:	4610      	mov	r0, r2
 800378e:	f7fd fb15 	bl	8000dbc <__aeabi_fmul>
 8003792:	4603      	mov	r3, r0
 8003794:	461a      	mov	r2, r3
 8003796:	4b57      	ldr	r3, [pc, #348]	; (80038f4 <TIM2_IRQHandler+0x874>)
 8003798:	681c      	ldr	r4, [r3, #0]
 800379a:	4610      	mov	r0, r2
 800379c:	f7fd fcd4 	bl	8001148 <__aeabi_f2uiz>
 80037a0:	4603      	mov	r3, r0
 80037a2:	6363      	str	r3, [r4, #52]	; 0x34
		Clear_ProtectionFlag();
 80037a4:	f000 f98e 	bl	8003ac4 <Clear_ProtectionFlag>
		Eror_Code = 0;
 80037a8:	4b53      	ldr	r3, [pc, #332]	; (80038f8 <TIM2_IRQHandler+0x878>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
		OFFSET_CurrentSense = OFFSET_Calibration;
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <TIM2_IRQHandler+0x87c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a53      	ldr	r2, [pc, #332]	; (8003900 <TIM2_IRQHandler+0x880>)
 80037b4:	6013      	str	r3, [r2, #0]
	}

	if(Charger_Mode == 2){	//Protection mode
 80037b6:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <TIM2_IRQHandler+0x86c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d17c      	bne.n	80038b8 <TIM2_IRQHandler+0x838>
		Tbuzz=Tbuzz+1;
 80037be:	4b4a      	ldr	r3, [pc, #296]	; (80038e8 <TIM2_IRQHandler+0x868>)
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	3301      	adds	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	4b48      	ldr	r3, [pc, #288]	; (80038e8 <TIM2_IRQHandler+0x868>)
 80037c8:	801a      	strh	r2, [r3, #0]
		if (Tbuzz==1000 && L<=5){
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <TIM2_IRQHandler+0x868>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d2:	d116      	bne.n	8003802 <TIM2_IRQHandler+0x782>
 80037d4:	4b43      	ldr	r3, [pc, #268]	; (80038e4 <TIM2_IRQHandler+0x864>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b05      	cmp	r3, #5
 80037da:	d812      	bhi.n	8003802 <TIM2_IRQHandler+0x782>
			HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80037dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037e0:	4848      	ldr	r0, [pc, #288]	; (8003904 <TIM2_IRQHandler+0x884>)
 80037e2:	f002 ffa8 	bl	8006736 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 80037e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80037ea:	4847      	ldr	r0, [pc, #284]	; (8003908 <TIM2_IRQHandler+0x888>)
 80037ec:	f002 ffa3 	bl	8006736 <HAL_GPIO_TogglePin>
			Tbuzz=0; L+=1;
 80037f0:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <TIM2_IRQHandler+0x868>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	801a      	strh	r2, [r3, #0]
 80037f6:	4b3b      	ldr	r3, [pc, #236]	; (80038e4 <TIM2_IRQHandler+0x864>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	3301      	adds	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <TIM2_IRQHandler+0x864>)
 8003800:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1){
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	483f      	ldr	r0, [pc, #252]	; (8003904 <TIM2_IRQHandler+0x884>)
 8003806:	f002 ff67 	bl	80066d8 <HAL_GPIO_ReadPin>
 800380a:	4603      	mov	r3, r0
 800380c:	2b01      	cmp	r3, #1
 800380e:	d112      	bne.n	8003836 <TIM2_IRQHandler+0x7b6>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 8003810:	2140      	movs	r1, #64	; 0x40
 8003812:	483c      	ldr	r0, [pc, #240]	; (8003904 <TIM2_IRQHandler+0x884>)
 8003814:	f002 ff8f 	bl	8006736 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8003818:	2200      	movs	r2, #0
 800381a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800381e:	4839      	ldr	r0, [pc, #228]	; (8003904 <TIM2_IRQHandler+0x884>)
 8003820:	f002 ff71 	bl	8006706 <HAL_GPIO_WritePin>
			Clear_ProtectionFlag();
 8003824:	f000 f94e 	bl	8003ac4 <Clear_ProtectionFlag>
			dc=0; Charger_Mode =1;
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <TIM2_IRQHandler+0x88c>)
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	4b2e      	ldr	r3, [pc, #184]	; (80038ec <TIM2_IRQHandler+0x86c>)
 8003832:	2201      	movs	r2, #1
 8003834:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Charger Over Temperature
		if (Flag_ChargerOverTemperature == 1 && Temp_T1<=(SetProtection_Temp1-10) && Temp_T2<=(SetProtection_Temp2-10) && L>5){
 8003836:	4b36      	ldr	r3, [pc, #216]	; (8003910 <TIM2_IRQHandler+0x890>)
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d12d      	bne.n	800389a <TIM2_IRQHandler+0x81a>
 800383e:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <TIM2_IRQHandler+0x854>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	3b0a      	subs	r3, #10
 8003844:	4618      	mov	r0, r3
 8003846:	f7fd fa65 	bl	8000d14 <__aeabi_i2f>
 800384a:	4602      	mov	r2, r0
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <TIM2_IRQHandler+0x858>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7fd fc64 	bl	8001120 <__aeabi_fcmpge>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d01d      	beq.n	800389a <TIM2_IRQHandler+0x81a>
 800385e:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <TIM2_IRQHandler+0x85c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3b0a      	subs	r3, #10
 8003864:	4618      	mov	r0, r3
 8003866:	f7fd fa55 	bl	8000d14 <__aeabi_i2f>
 800386a:	4602      	mov	r2, r0
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <TIM2_IRQHandler+0x860>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4619      	mov	r1, r3
 8003872:	4610      	mov	r0, r2
 8003874:	f7fd fc54 	bl	8001120 <__aeabi_fcmpge>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00d      	beq.n	800389a <TIM2_IRQHandler+0x81a>
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <TIM2_IRQHandler+0x864>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b05      	cmp	r3, #5
 8003884:	d909      	bls.n	800389a <TIM2_IRQHandler+0x81a>
			Flag_ChargerOverTemperature = 0;
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <TIM2_IRQHandler+0x890>)
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
			dc=0; Charger_Mode =1;
 800388c:	4b1f      	ldr	r3, [pc, #124]	; (800390c <TIM2_IRQHandler+0x88c>)
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	4b15      	ldr	r3, [pc, #84]	; (80038ec <TIM2_IRQHandler+0x86c>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Battery Over Temperature
		if (flag_trip_overtemperature == 0 && LastFlag_OverTemperature == 1){
 800389a:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <TIM2_IRQHandler+0x894>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <TIM2_IRQHandler+0x838>
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <TIM2_IRQHandler+0x898>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d106      	bne.n	80038b8 <TIM2_IRQHandler+0x838>
			dc=0; Charger_Mode =1;
 80038aa:	4b18      	ldr	r3, [pc, #96]	; (800390c <TIM2_IRQHandler+0x88c>)
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <TIM2_IRQHandler+0x86c>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
		}
	}

	Eror_CodeCheck();
 80038b8:	f000 f86c 	bl	8003994 <Eror_CodeCheck>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038bc:	4817      	ldr	r0, [pc, #92]	; (800391c <TIM2_IRQHandler+0x89c>)
 80038be:	f004 fbcf 	bl	8008060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bdb0      	pop	{r4, r5, r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000d0c 	.word	0x20000d0c
 80038cc:	200009f4 	.word	0x200009f4
 80038d0:	20000c30 	.word	0x20000c30
 80038d4:	2000000d 	.word	0x2000000d
 80038d8:	200009ec 	.word	0x200009ec
 80038dc:	2000000e 	.word	0x2000000e
 80038e0:	20000648 	.word	0x20000648
 80038e4:	20000616 	.word	0x20000616
 80038e8:	20000008 	.word	0x20000008
 80038ec:	200006b0 	.word	0x200006b0
 80038f0:	40010000 	.word	0x40010000
 80038f4:	200010a0 	.word	0x200010a0
 80038f8:	20000638 	.word	0x20000638
 80038fc:	20000680 	.word	0x20000680
 8003900:	20000788 	.word	0x20000788
 8003904:	40020800 	.word	0x40020800
 8003908:	40020400 	.word	0x40020400
 800390c:	20000664 	.word	0x20000664
 8003910:	20000691 	.word	0x20000691
 8003914:	2000077c 	.word	0x2000077c
 8003918:	200009c8 	.word	0x200009c8
 800391c:	200010e0 	.word	0x200010e0

08003920 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
//	CAN_Tx_Process();
	SS+=1;
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <TIM3_IRQHandler+0x1c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	3301      	adds	r3, #1
 800392a:	b2da      	uxtb	r2, r3
 800392c:	4b03      	ldr	r3, [pc, #12]	; (800393c <TIM3_IRQHandler+0x1c>)
 800392e:	701a      	strb	r2, [r3, #0]



  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003930:	4803      	ldr	r0, [pc, #12]	; (8003940 <TIM3_IRQHandler+0x20>)
 8003932:	f004 fb95 	bl	8008060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000617 	.word	0x20000617
 8003940:	20001060 	.word	0x20001060

08003944 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//	CAN_Rx_Process();	//can receive handle

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <TIM4_IRQHandler+0x10>)
 800394a:	f004 fb89 	bl	8008060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20001020 	.word	0x20001020

08003958 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800395c:	4802      	ldr	r0, [pc, #8]	; (8003968 <USART1_IRQHandler+0x10>)
 800395e:	f005 fa6d 	bl	8008e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20001160 	.word	0x20001160

0800396c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003970:	4802      	ldr	r0, [pc, #8]	; (800397c <USART3_IRQHandler+0x10>)
 8003972:	f005 fa63 	bl	8008e3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003976:	bf00      	nop
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20001120 	.word	0x20001120

08003980 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <DMA2_Stream0_IRQHandler+0x10>)
 8003986:	f002 faa3 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000dbc 	.word	0x20000dbc

08003994 <Eror_CodeCheck>:

/* USER CODE BEGIN 1 */

void Eror_CodeCheck(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	if (flag_trip_shortcircuit==1)
 8003998:	4b3a      	ldr	r3, [pc, #232]	; (8003a84 <Eror_CodeCheck+0xf0>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d103      	bne.n	80039a8 <Eror_CodeCheck+0x14>
		Eror_Code=1;	//Battery Pack short circuit
 80039a0:	4b39      	ldr	r3, [pc, #228]	; (8003a88 <Eror_CodeCheck+0xf4>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
		Eror_Code=18;	//Charger Over Current
	else if(Flag_ChargerLostCommunication==1)
		Eror_Code=19;
//	else
//		Eror_Code=0;
}
 80039a6:	e069      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_overcurrentcharge==1)
 80039a8:	4b38      	ldr	r3, [pc, #224]	; (8003a8c <Eror_CodeCheck+0xf8>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d103      	bne.n	80039b8 <Eror_CodeCheck+0x24>
		Eror_Code=3;	//Battery Pack over current charge
 80039b0:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <Eror_CodeCheck+0xf4>)
 80039b2:	2203      	movs	r2, #3
 80039b4:	701a      	strb	r2, [r3, #0]
}
 80039b6:	e061      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_overtemperature==1){
 80039b8:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <Eror_CodeCheck+0xfc>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d106      	bne.n	80039ce <Eror_CodeCheck+0x3a>
		Eror_Code=4;	//Battery Pack over temperature
 80039c0:	4b31      	ldr	r3, [pc, #196]	; (8003a88 <Eror_CodeCheck+0xf4>)
 80039c2:	2204      	movs	r2, #4
 80039c4:	701a      	strb	r2, [r3, #0]
		LastFlag_OverTemperature = 1;
 80039c6:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <Eror_CodeCheck+0x100>)
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
}
 80039cc:	e056      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_undertemperature==1)
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <Eror_CodeCheck+0x104>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d103      	bne.n	80039de <Eror_CodeCheck+0x4a>
		Eror_Code=5;	//Battery Pack under temperature
 80039d6:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <Eror_CodeCheck+0xf4>)
 80039d8:	2205      	movs	r2, #5
 80039da:	701a      	strb	r2, [r3, #0]
}
 80039dc:	e04e      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_unbalance==1)
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <Eror_CodeCheck+0x108>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d103      	bne.n	80039ee <Eror_CodeCheck+0x5a>
		Eror_Code=8;	//Battery Pack unbalance
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <Eror_CodeCheck+0xf4>)
 80039e8:	2208      	movs	r2, #8
 80039ea:	701a      	strb	r2, [r3, #0]
}
 80039ec:	e046      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_undervoltage==1)
 80039ee:	4b2c      	ldr	r3, [pc, #176]	; (8003aa0 <Eror_CodeCheck+0x10c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d103      	bne.n	80039fe <Eror_CodeCheck+0x6a>
		Eror_Code=9;	//Battery Pack under voltage
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <Eror_CodeCheck+0xf4>)
 80039f8:	2209      	movs	r2, #9
 80039fa:	701a      	strb	r2, [r3, #0]
}
 80039fc:	e03e      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_overvoltage==1)
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <Eror_CodeCheck+0x110>)
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d103      	bne.n	8003a0e <Eror_CodeCheck+0x7a>
		Eror_Code=10;	//Battery Pack over voltage
 8003a06:	4b20      	ldr	r3, [pc, #128]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a08:	220a      	movs	r2, #10
 8003a0a:	701a      	strb	r2, [r3, #0]
}
 8003a0c:	e036      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (flag_trip_systemfailure==1)
 8003a0e:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <Eror_CodeCheck+0x114>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d103      	bne.n	8003a1e <Eror_CodeCheck+0x8a>
			Eror_Code=12;	//Battery Pack system failure
 8003a16:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a18:	220c      	movs	r2, #12
 8003a1a:	701a      	strb	r2, [r3, #0]
}
 8003a1c:	e02e      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerUnderVoltage==1)
 8003a1e:	4b23      	ldr	r3, [pc, #140]	; (8003aac <Eror_CodeCheck+0x118>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d103      	bne.n	8003a2e <Eror_CodeCheck+0x9a>
		Eror_Code=13;	//Charger Under Voltage
 8003a26:	4b18      	ldr	r3, [pc, #96]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a28:	220d      	movs	r2, #13
 8003a2a:	701a      	strb	r2, [r3, #0]
}
 8003a2c:	e026      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerUnderTemperature==1)
 8003a2e:	4b20      	ldr	r3, [pc, #128]	; (8003ab0 <Eror_CodeCheck+0x11c>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d103      	bne.n	8003a3e <Eror_CodeCheck+0xaa>
		Eror_Code=15;	//Charger Under Temperature
 8003a36:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a38:	220f      	movs	r2, #15
 8003a3a:	701a      	strb	r2, [r3, #0]
}
 8003a3c:	e01e      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerShortCircuit==1)
 8003a3e:	4b1d      	ldr	r3, [pc, #116]	; (8003ab4 <Eror_CodeCheck+0x120>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d103      	bne.n	8003a4e <Eror_CodeCheck+0xba>
		Eror_Code=16;	//Charger Short Circuit
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a48:	2210      	movs	r2, #16
 8003a4a:	701a      	strb	r2, [r3, #0]
}
 8003a4c:	e016      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerOverCurrent==1)
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	; (8003ab8 <Eror_CodeCheck+0x124>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d103      	bne.n	8003a5e <Eror_CodeCheck+0xca>
		Eror_Code=17;	//Charger Over Current
 8003a56:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a58:	2211      	movs	r2, #17
 8003a5a:	701a      	strb	r2, [r3, #0]
}
 8003a5c:	e00e      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerOverVoltage==1)
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <Eror_CodeCheck+0x128>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d103      	bne.n	8003a6e <Eror_CodeCheck+0xda>
		Eror_Code=18;	//Charger Over Current
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a68:	2212      	movs	r2, #18
 8003a6a:	701a      	strb	r2, [r3, #0]
}
 8003a6c:	e006      	b.n	8003a7c <Eror_CodeCheck+0xe8>
	else if(Flag_ChargerLostCommunication==1)
 8003a6e:	4b14      	ldr	r3, [pc, #80]	; (8003ac0 <Eror_CodeCheck+0x12c>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d102      	bne.n	8003a7c <Eror_CodeCheck+0xe8>
		Eror_Code=19;
 8003a76:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <Eror_CodeCheck+0xf4>)
 8003a78:	2213      	movs	r2, #19
 8003a7a:	701a      	strb	r2, [r3, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	20000658 	.word	0x20000658
 8003a88:	20000638 	.word	0x20000638
 8003a8c:	20000a48 	.word	0x20000a48
 8003a90:	2000077c 	.word	0x2000077c
 8003a94:	200009c8 	.word	0x200009c8
 8003a98:	200008b8 	.word	0x200008b8
 8003a9c:	20000642 	.word	0x20000642
 8003aa0:	200008b9 	.word	0x200008b9
 8003aa4:	20000d40 	.word	0x20000d40
 8003aa8:	20000674 	.word	0x20000674
 8003aac:	20000784 	.word	0x20000784
 8003ab0:	20000d5c 	.word	0x20000d5c
 8003ab4:	200007b8 	.word	0x200007b8
 8003ab8:	2000079c 	.word	0x2000079c
 8003abc:	200007bc 	.word	0x200007bc
 8003ac0:	200009b8 	.word	0x200009b8

08003ac4 <Clear_ProtectionFlag>:

void Clear_ProtectionFlag(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	flag_trip_overvoltage = 0;
 8003ac8:	4b12      	ldr	r3, [pc, #72]	; (8003b14 <Clear_ProtectionFlag+0x50>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]
	flag_trip_overtemperature = 0;
 8003ace:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <Clear_ProtectionFlag+0x54>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature = 0;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <Clear_ProtectionFlag+0x58>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge = 0;
 8003ada:	4b11      	ldr	r3, [pc, #68]	; (8003b20 <Clear_ProtectionFlag+0x5c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge = 0;
 8003ae0:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <Clear_ProtectionFlag+0x60>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit = 0;
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <Clear_ProtectionFlag+0x64>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure = 0;
 8003aec:	4b0f      	ldr	r3, [pc, #60]	; (8003b2c <Clear_ProtectionFlag+0x68>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverCurrent = 0;
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <Clear_ProtectionFlag+0x6c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverTemperature = 0;
 8003af8:	4b0e      	ldr	r3, [pc, #56]	; (8003b34 <Clear_ProtectionFlag+0x70>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverVoltage = 0;
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <Clear_ProtectionFlag+0x74>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
	Flag_ChargerLostCommunication = 0;
 8003b04:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <Clear_ProtectionFlag+0x78>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20000d40 	.word	0x20000d40
 8003b18:	2000077c 	.word	0x2000077c
 8003b1c:	200008b8 	.word	0x200008b8
 8003b20:	20000a48 	.word	0x20000a48
 8003b24:	20000643 	.word	0x20000643
 8003b28:	20000658 	.word	0x20000658
 8003b2c:	20000674 	.word	0x20000674
 8003b30:	2000079c 	.word	0x2000079c
 8003b34:	20000691 	.word	0x20000691
 8003b38:	200007bc 	.word	0x200007bc
 8003b3c:	200009b8 	.word	0x200009b8

08003b40 <Fault_Check>:

void Fault_Check(void)
{
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	if(Current_Charger >= SetProtection_ShortCircuit){
 8003b44:	4b88      	ldr	r3, [pc, #544]	; (8003d68 <Fault_Check+0x228>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd f8e3 	bl	8000d14 <__aeabi_i2f>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	4b86      	ldr	r3, [pc, #536]	; (8003d6c <Fault_Check+0x22c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4619      	mov	r1, r3
 8003b56:	4610      	mov	r0, r2
 8003b58:	f7fd fad8 	bl	800110c <__aeabi_fcmple>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d009      	beq.n	8003b76 <Fault_Check+0x36>
		Flag_ChargerShortCircuit=1;
 8003b62:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <Fault_Check+0x230>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003b6e:	4881      	ldr	r0, [pc, #516]	; (8003d74 <Fault_Check+0x234>)
 8003b70:	f002 fdc9 	bl	8006706 <HAL_GPIO_WritePin>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
		Eror_Code = 0;
		TripTime_OverCurrent = 0;
		Count_TripTime -= 0.001;
	}
}
 8003b74:	e0ef      	b.n	8003d56 <Fault_Check+0x216>
	else if((SetProtection_OverCurrent - Current_Charger)<=0 && Flag_ChargerOverCurrent==0 ){
 8003b76:	4b80      	ldr	r3, [pc, #512]	; (8003d78 <Fault_Check+0x238>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f8ca 	bl	8000d14 <__aeabi_i2f>
 8003b80:	4602      	mov	r2, r0
 8003b82:	4b7a      	ldr	r3, [pc, #488]	; (8003d6c <Fault_Check+0x22c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7fd f80d 	bl	8000ba8 <__aeabi_fsub>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	4618      	mov	r0, r3
 8003b96:	f7fd fab9 	bl	800110c <__aeabi_fcmple>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d058      	beq.n	8003c52 <Fault_Check+0x112>
 8003ba0:	4b76      	ldr	r3, [pc, #472]	; (8003d7c <Fault_Check+0x23c>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d154      	bne.n	8003c52 <Fault_Check+0x112>
		Eror_Code=17;
 8003ba8:	4b75      	ldr	r3, [pc, #468]	; (8003d80 <Fault_Check+0x240>)
 8003baa:	2211      	movs	r2, #17
 8003bac:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 2/(((Current_Charger/SetProtection_OverCurrent)*(Current_Charger/SetProtection_OverCurrent))-1);
 8003bae:	4b6f      	ldr	r3, [pc, #444]	; (8003d6c <Fault_Check+0x22c>)
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	4b71      	ldr	r3, [pc, #452]	; (8003d78 <Fault_Check+0x238>)
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd f8ac 	bl	8000d14 <__aeabi_i2f>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f7fd f9af 	bl	8000f24 <__aeabi_fdiv>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	461d      	mov	r5, r3
 8003bca:	4b68      	ldr	r3, [pc, #416]	; (8003d6c <Fault_Check+0x22c>)
 8003bcc:	681c      	ldr	r4, [r3, #0]
 8003bce:	4b6a      	ldr	r3, [pc, #424]	; (8003d78 <Fault_Check+0x238>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd f89e 	bl	8000d14 <__aeabi_i2f>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f7fd f9a1 	bl	8000f24 <__aeabi_fdiv>
 8003be2:	4603      	mov	r3, r0
 8003be4:	4619      	mov	r1, r3
 8003be6:	4628      	mov	r0, r5
 8003be8:	f7fd f8e8 	bl	8000dbc <__aeabi_fmul>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc ffd8 	bl	8000ba8 <__aeabi_fsub>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003c00:	f7fd f990 	bl	8000f24 <__aeabi_fdiv>
 8003c04:	4603      	mov	r3, r0
 8003c06:	461a      	mov	r2, r3
 8003c08:	4b5e      	ldr	r3, [pc, #376]	; (8003d84 <Fault_Check+0x244>)
 8003c0a:	601a      	str	r2, [r3, #0]
		Count_TripTime += 0.001;
 8003c0c:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <Fault_Check+0x248>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fc fc45 	bl	80004a0 <__aeabi_f2d>
 8003c16:	a352      	add	r3, pc, #328	; (adr r3, 8003d60 <Fault_Check+0x220>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f7fc fae2 	bl	80001e4 <__adddf3>
 8003c20:	4603      	mov	r3, r0
 8003c22:	460c      	mov	r4, r1
 8003c24:	4618      	mov	r0, r3
 8003c26:	4621      	mov	r1, r4
 8003c28:	f7fc ff6a 	bl	8000b00 <__aeabi_d2f>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b56      	ldr	r3, [pc, #344]	; (8003d88 <Fault_Check+0x248>)
 8003c30:	601a      	str	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8003c32:	4b55      	ldr	r3, [pc, #340]	; (8003d88 <Fault_Check+0x248>)
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <Fault_Check+0x244>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	f7fd fa6f 	bl	8001120 <__aeabi_fcmpge>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8086 	beq.w	8003d56 <Fault_Check+0x216>
			Flag_ChargerOverCurrent=1;
 8003c4a:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <Fault_Check+0x23c>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	701a      	strb	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8003c50:	e081      	b.n	8003d56 <Fault_Check+0x216>
	else if ( Temp_T1 >= (SetProtection_Temp1-15)  || Temp_T2 >= (SetProtection_Temp2-15)){
 8003c52:	4b4e      	ldr	r3, [pc, #312]	; (8003d8c <Fault_Check+0x24c>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	3b0f      	subs	r3, #15
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fd f85b 	bl	8000d14 <__aeabi_i2f>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <Fault_Check+0x250>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f7fd fa50 	bl	800110c <__aeabi_fcmple>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10f      	bne.n	8003c92 <Fault_Check+0x152>
 8003c72:	4b48      	ldr	r3, [pc, #288]	; (8003d94 <Fault_Check+0x254>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	3b0f      	subs	r3, #15
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fd f84b 	bl	8000d14 <__aeabi_i2f>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b45      	ldr	r3, [pc, #276]	; (8003d98 <Fault_Check+0x258>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fd fa40 	bl	800110c <__aeabi_fcmple>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d02b      	beq.n	8003cea <Fault_Check+0x1aa>
		flag_Derating = 1;
 8003c92:	4b42      	ldr	r3, [pc, #264]	; (8003d9c <Fault_Check+0x25c>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
		Eror_Code = 14;
 8003c98:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <Fault_Check+0x240>)
 8003c9a:	220e      	movs	r2, #14
 8003c9c:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 8003c9e:	4b3b      	ldr	r3, [pc, #236]	; (8003d8c <Fault_Check+0x24c>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fd f836 	bl	8000d14 <__aeabi_i2f>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b39      	ldr	r3, [pc, #228]	; (8003d90 <Fault_Check+0x250>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	f7fd fa2b 	bl	800110c <__aeabi_fcmple>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10f      	bne.n	8003cdc <Fault_Check+0x19c>
 8003cbc:	4b35      	ldr	r3, [pc, #212]	; (8003d94 <Fault_Check+0x254>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7fd f827 	bl	8000d14 <__aeabi_i2f>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b33      	ldr	r3, [pc, #204]	; (8003d98 <Fault_Check+0x258>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4610      	mov	r0, r2
 8003cd0:	f7fd fa1c 	bl	800110c <__aeabi_fcmple>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d100      	bne.n	8003cdc <Fault_Check+0x19c>
 8003cda:	e03c      	b.n	8003d56 <Fault_Check+0x216>
			Flag_ChargerOverTemperature = 1;
 8003cdc:	4b30      	ldr	r3, [pc, #192]	; (8003da0 <Fault_Check+0x260>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 2;
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <Fault_Check+0x264>)
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 8003ce8:	e035      	b.n	8003d56 <Fault_Check+0x216>
	else if(Voltage_Charger >= SetProtection_OverVoltage){
 8003cea:	4b2f      	ldr	r3, [pc, #188]	; (8003da8 <Fault_Check+0x268>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd f810 	bl	8000d14 <__aeabi_i2f>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <Fault_Check+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fd fa05 	bl	800110c <__aeabi_fcmple>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <Fault_Check+0x1d0>
		Flag_ChargerOverVoltage=1;
 8003d08:	4b29      	ldr	r3, [pc, #164]	; (8003db0 <Fault_Check+0x270>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
}
 8003d0e:	e022      	b.n	8003d56 <Fault_Check+0x216>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
 8003d10:	4b1b      	ldr	r3, [pc, #108]	; (8003d80 <Fault_Check+0x240>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <Fault_Check+0x1e0>
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <Fault_Check+0x240>)
 8003d1a:	781a      	ldrb	r2, [r3, #0]
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <Fault_Check+0x274>)
 8003d1e:	701a      	strb	r2, [r3, #0]
		Eror_Code = 0;
 8003d20:	4b17      	ldr	r3, [pc, #92]	; (8003d80 <Fault_Check+0x240>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 0;
 8003d26:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <Fault_Check+0x244>)
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
		Count_TripTime -= 0.001;
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <Fault_Check+0x248>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fc fbb4 	bl	80004a0 <__aeabi_f2d>
 8003d38:	a309      	add	r3, pc, #36	; (adr r3, 8003d60 <Fault_Check+0x220>)
 8003d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3e:	f7fc fa4f 	bl	80001e0 <__aeabi_dsub>
 8003d42:	4603      	mov	r3, r0
 8003d44:	460c      	mov	r4, r1
 8003d46:	4618      	mov	r0, r3
 8003d48:	4621      	mov	r1, r4
 8003d4a:	f7fc fed9 	bl	8000b00 <__aeabi_d2f>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <Fault_Check+0x248>)
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	e7ff      	b.n	8003d56 <Fault_Check+0x216>
 8003d56:	bf00      	nop
 8003d58:	bdb0      	pop	{r4, r5, r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	f3af 8000 	nop.w
 8003d60:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d64:	3f50624d 	.word	0x3f50624d
 8003d68:	2000000a 	.word	0x2000000a
 8003d6c:	20000d08 	.word	0x20000d08
 8003d70:	200007b8 	.word	0x200007b8
 8003d74:	40020800 	.word	0x40020800
 8003d78:	2000000b 	.word	0x2000000b
 8003d7c:	2000079c 	.word	0x2000079c
 8003d80:	20000638 	.word	0x20000638
 8003d84:	20001014 	.word	0x20001014
 8003d88:	2000101c 	.word	0x2000101c
 8003d8c:	2000000d 	.word	0x2000000d
 8003d90:	200009ec 	.word	0x200009ec
 8003d94:	2000000e 	.word	0x2000000e
 8003d98:	20000648 	.word	0x20000648
 8003d9c:	20000c30 	.word	0x20000c30
 8003da0:	20000691 	.word	0x20000691
 8003da4:	200006b0 	.word	0x200006b0
 8003da8:	2000000c 	.word	0x2000000c
 8003dac:	20000b40 	.word	0x20000b40
 8003db0:	200007bc 	.word	0x200007bc
 8003db4:	20000690 	.word	0x20000690

08003db8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003dc0:	4b11      	ldr	r3, [pc, #68]	; (8003e08 <_sbrk+0x50>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d102      	bne.n	8003dce <_sbrk+0x16>
		heap_end = &end;
 8003dc8:	4b0f      	ldr	r3, [pc, #60]	; (8003e08 <_sbrk+0x50>)
 8003dca:	4a10      	ldr	r2, [pc, #64]	; (8003e0c <_sbrk+0x54>)
 8003dcc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003dce:	4b0e      	ldr	r3, [pc, #56]	; (8003e08 <_sbrk+0x50>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <_sbrk+0x50>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4413      	add	r3, r2
 8003ddc:	466a      	mov	r2, sp
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d907      	bls.n	8003df2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003de2:	f005 fbf9 	bl	80095d8 <__errno>
 8003de6:	4602      	mov	r2, r0
 8003de8:	230c      	movs	r3, #12
 8003dea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003dec:	f04f 33ff 	mov.w	r3, #4294967295
 8003df0:	e006      	b.n	8003e00 <_sbrk+0x48>
	}

	heap_end += incr;
 8003df2:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <_sbrk+0x50>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	4a03      	ldr	r2, [pc, #12]	; (8003e08 <_sbrk+0x50>)
 8003dfc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000618 	.word	0x20000618
 8003e0c:	200011a8 	.word	0x200011a8

08003e10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e14:	4b12      	ldr	r3, [pc, #72]	; (8003e60 <SystemInit+0x50>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a11      	ldr	r2, [pc, #68]	; (8003e60 <SystemInit+0x50>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <SystemInit+0x50>)
 8003e22:	2200      	movs	r2, #0
 8003e24:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003e26:	4b0e      	ldr	r3, [pc, #56]	; (8003e60 <SystemInit+0x50>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <SystemInit+0x50>)
 8003e2c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <SystemInit+0x50>)
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <SystemInit+0x54>)
 8003e3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <SystemInit+0x50>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a07      	ldr	r2, [pc, #28]	; (8003e60 <SystemInit+0x50>)
 8003e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <SystemInit+0x50>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e4e:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <SystemInit+0x58>)
 8003e50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e54:	609a      	str	r2, [r3, #8]
#endif
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	24003010 	.word	0x24003010
 8003e68:	e000ed00 	.word	0xe000ed00

08003e6c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b096      	sub	sp, #88	; 0x58
 8003e70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	605a      	str	r2, [r3, #4]
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	60da      	str	r2, [r3, #12]
 8003e98:	611a      	str	r2, [r3, #16]
 8003e9a:	615a      	str	r2, [r3, #20]
 8003e9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e9e:	1d3b      	adds	r3, r7, #4
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f005 fbc1 	bl	800962c <memset>

  htim1.Instance = TIM1;
 8003eaa:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003eac:	4a3e      	ldr	r2, [pc, #248]	; (8003fa8 <MX_TIM1_Init+0x13c>)
 8003eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003eb0:	4b3c      	ldr	r3, [pc, #240]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 8003ebc:	4b39      	ldr	r3, [pc, #228]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003ebe:	f241 726f 	movw	r2, #5999	; 0x176f
 8003ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ec4:	4b37      	ldr	r3, [pc, #220]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003eca:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ed0:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ed6:	4833      	ldr	r0, [pc, #204]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003ed8:	f003 ffde 	bl	8007e98 <HAL_TIM_Base_Init>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003ee2:	f7fe fdb7 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	482c      	ldr	r0, [pc, #176]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003ef4:	f004 fa82 	bl	80083fc <HAL_TIM_ConfigClockSource>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003efe:	f7fe fda9 	bl	8002a54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f02:	4828      	ldr	r0, [pc, #160]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003f04:	f004 f839 	bl	8007f7a <HAL_TIM_PWM_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003f0e:	f7fe fda1 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f12:	2300      	movs	r3, #0
 8003f14:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f1a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4820      	ldr	r0, [pc, #128]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003f22:	f004 fe53 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003f2c:	f7fe fd92 	bl	8002a54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f30:	2360      	movs	r3, #96	; 0x60
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f44:	2300      	movs	r3, #0
 8003f46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f50:	2200      	movs	r2, #0
 8003f52:	4619      	mov	r1, r3
 8003f54:	4813      	ldr	r0, [pc, #76]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003f56:	f004 f98b 	bl	8008270 <HAL_TIM_PWM_ConfigChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003f60:	f7fe fd78 	bl	8002a54 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f70:	2300      	movs	r3, #0
 8003f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f82:	1d3b      	adds	r3, r7, #4
 8003f84:	4619      	mov	r1, r3
 8003f86:	4807      	ldr	r0, [pc, #28]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003f88:	f004 fe64 	bl	8008c54 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8003f92:	f7fe fd5f 	bl	8002a54 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8003f96:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <MX_TIM1_Init+0x138>)
 8003f98:	f000 f96a 	bl	8004270 <HAL_TIM_MspPostInit>

}
 8003f9c:	bf00      	nop
 8003f9e:	3758      	adds	r7, #88	; 0x58
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200010a0 	.word	0x200010a0
 8003fa8:	40010000 	.word	0x40010000

08003fac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	609a      	str	r2, [r3, #8]
 8003fbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fc0:	463b      	mov	r3, r7
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <MX_TIM2_Init+0x98>)
 8003fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 599;
 8003fd0:	4b1c      	ldr	r3, [pc, #112]	; (8004044 <MX_TIM2_Init+0x98>)
 8003fd2:	f240 2257 	movw	r2, #599	; 0x257
 8003fd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <MX_TIM2_Init+0x98>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8003fde:	4b19      	ldr	r3, [pc, #100]	; (8004044 <MX_TIM2_Init+0x98>)
 8003fe0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003fe4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <MX_TIM2_Init+0x98>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fec:	4b15      	ldr	r3, [pc, #84]	; (8004044 <MX_TIM2_Init+0x98>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ff2:	4814      	ldr	r0, [pc, #80]	; (8004044 <MX_TIM2_Init+0x98>)
 8003ff4:	f003 ff50 	bl	8007e98 <HAL_TIM_Base_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003ffe:	f7fe fd29 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004006:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004008:	f107 0308 	add.w	r3, r7, #8
 800400c:	4619      	mov	r1, r3
 800400e:	480d      	ldr	r0, [pc, #52]	; (8004044 <MX_TIM2_Init+0x98>)
 8004010:	f004 f9f4 	bl	80083fc <HAL_TIM_ConfigClockSource>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800401a:	f7fe fd1b 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800401e:	2300      	movs	r3, #0
 8004020:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004022:	2300      	movs	r3, #0
 8004024:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004026:	463b      	mov	r3, r7
 8004028:	4619      	mov	r1, r3
 800402a:	4806      	ldr	r0, [pc, #24]	; (8004044 <MX_TIM2_Init+0x98>)
 800402c:	f004 fdce 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004036:	f7fe fd0d 	bl	8002a54 <Error_Handler>
  }

}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200010e0 	.word	0x200010e0

08004048 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b086      	sub	sp, #24
 800404c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800404e:	f107 0308 	add.w	r3, r7, #8
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	605a      	str	r2, [r3, #4]
 8004058:	609a      	str	r2, [r3, #8]
 800405a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800405c:	463b      	mov	r3, r7
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <MX_TIM3_Init+0x94>)
 8004066:	4a1e      	ldr	r2, [pc, #120]	; (80040e0 <MX_TIM3_Init+0x98>)
 8004068:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <MX_TIM3_Init+0x94>)
 800406c:	f240 2257 	movw	r2, #599	; 0x257
 8004070:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004072:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <MX_TIM3_Init+0x94>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8004078:	4b18      	ldr	r3, [pc, #96]	; (80040dc <MX_TIM3_Init+0x94>)
 800407a:	f242 720f 	movw	r2, #9999	; 0x270f
 800407e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004080:	4b16      	ldr	r3, [pc, #88]	; (80040dc <MX_TIM3_Init+0x94>)
 8004082:	2200      	movs	r2, #0
 8004084:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <MX_TIM3_Init+0x94>)
 8004088:	2200      	movs	r2, #0
 800408a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800408c:	4813      	ldr	r0, [pc, #76]	; (80040dc <MX_TIM3_Init+0x94>)
 800408e:	f003 ff03 	bl	8007e98 <HAL_TIM_Base_Init>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004098:	f7fe fcdc 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800409c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4619      	mov	r1, r3
 80040a8:	480c      	ldr	r0, [pc, #48]	; (80040dc <MX_TIM3_Init+0x94>)
 80040aa:	f004 f9a7 	bl	80083fc <HAL_TIM_ConfigClockSource>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80040b4:	f7fe fcce 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040b8:	2300      	movs	r3, #0
 80040ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040bc:	2300      	movs	r3, #0
 80040be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040c0:	463b      	mov	r3, r7
 80040c2:	4619      	mov	r1, r3
 80040c4:	4805      	ldr	r0, [pc, #20]	; (80040dc <MX_TIM3_Init+0x94>)
 80040c6:	f004 fd81 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80040d0:	f7fe fcc0 	bl	8002a54 <Error_Handler>
  }

}
 80040d4:	bf00      	nop
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	20001060 	.word	0x20001060
 80040e0:	40000400 	.word	0x40000400

080040e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040ea:	f107 0308 	add.w	r3, r7, #8
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	605a      	str	r2, [r3, #4]
 80040f4:	609a      	str	r2, [r3, #8]
 80040f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040f8:	463b      	mov	r3, r7
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <MX_TIM4_Init+0x94>)
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <MX_TIM4_Init+0x98>)
 8004104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004106:	4b1c      	ldr	r3, [pc, #112]	; (8004178 <MX_TIM4_Init+0x94>)
 8004108:	2200      	movs	r2, #0
 800410a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800410c:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <MX_TIM4_Init+0x94>)
 800410e:	2200      	movs	r2, #0
 8004110:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5900;
 8004112:	4b19      	ldr	r3, [pc, #100]	; (8004178 <MX_TIM4_Init+0x94>)
 8004114:	f241 720c 	movw	r2, #5900	; 0x170c
 8004118:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800411a:	4b17      	ldr	r3, [pc, #92]	; (8004178 <MX_TIM4_Init+0x94>)
 800411c:	2200      	movs	r2, #0
 800411e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004120:	4b15      	ldr	r3, [pc, #84]	; (8004178 <MX_TIM4_Init+0x94>)
 8004122:	2200      	movs	r2, #0
 8004124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004126:	4814      	ldr	r0, [pc, #80]	; (8004178 <MX_TIM4_Init+0x94>)
 8004128:	f003 feb6 	bl	8007e98 <HAL_TIM_Base_Init>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8004132:	f7fe fc8f 	bl	8002a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	4619      	mov	r1, r3
 8004142:	480d      	ldr	r0, [pc, #52]	; (8004178 <MX_TIM4_Init+0x94>)
 8004144:	f004 f95a 	bl	80083fc <HAL_TIM_ConfigClockSource>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800414e:	f7fe fc81 	bl	8002a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004152:	2300      	movs	r3, #0
 8004154:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004156:	2300      	movs	r3, #0
 8004158:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800415a:	463b      	mov	r3, r7
 800415c:	4619      	mov	r1, r3
 800415e:	4806      	ldr	r0, [pc, #24]	; (8004178 <MX_TIM4_Init+0x94>)
 8004160:	f004 fd34 	bl	8008bcc <HAL_TIMEx_MasterConfigSynchronization>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800416a:	f7fe fc73 	bl	8002a54 <Error_Handler>
  }

}
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	20001020 	.word	0x20001020
 800417c:	40000800 	.word	0x40000800

08004180 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a34      	ldr	r2, [pc, #208]	; (8004260 <HAL_TIM_Base_MspInit+0xe0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10e      	bne.n	80041b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	617b      	str	r3, [r7, #20]
 8004196:	4b33      	ldr	r3, [pc, #204]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 8004198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419a:	4a32      	ldr	r2, [pc, #200]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6453      	str	r3, [r2, #68]	; 0x44
 80041a2:	4b30      	ldr	r3, [pc, #192]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 80041a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80041ae:	e052      	b.n	8004256 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d116      	bne.n	80041e8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	4a28      	ldr	r2, [pc, #160]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	6413      	str	r3, [r2, #64]	; 0x40
 80041ca:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041d6:	2200      	movs	r2, #0
 80041d8:	2100      	movs	r1, #0
 80041da:	201c      	movs	r0, #28
 80041dc:	f001 fd19 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041e0:	201c      	movs	r0, #28
 80041e2:	f001 fd32 	bl	8005c4a <HAL_NVIC_EnableIRQ>
}
 80041e6:	e036      	b.n	8004256 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1e      	ldr	r2, [pc, #120]	; (8004268 <HAL_TIM_Base_MspInit+0xe8>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d116      	bne.n	8004220 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	4b1b      	ldr	r3, [pc, #108]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	4a1a      	ldr	r2, [pc, #104]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 80041fc:	f043 0302 	orr.w	r3, r3, #2
 8004200:	6413      	str	r3, [r2, #64]	; 0x40
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800420e:	2200      	movs	r2, #0
 8004210:	2100      	movs	r1, #0
 8004212:	201d      	movs	r0, #29
 8004214:	f001 fcfd 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004218:	201d      	movs	r0, #29
 800421a:	f001 fd16 	bl	8005c4a <HAL_NVIC_EnableIRQ>
}
 800421e:	e01a      	b.n	8004256 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a11      	ldr	r2, [pc, #68]	; (800426c <HAL_TIM_Base_MspInit+0xec>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d115      	bne.n	8004256 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	4b0d      	ldr	r3, [pc, #52]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	4a0c      	ldr	r2, [pc, #48]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 8004234:	f043 0304 	orr.w	r3, r3, #4
 8004238:	6413      	str	r3, [r2, #64]	; 0x40
 800423a:	4b0a      	ldr	r3, [pc, #40]	; (8004264 <HAL_TIM_Base_MspInit+0xe4>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004246:	2200      	movs	r2, #0
 8004248:	2100      	movs	r1, #0
 800424a:	201e      	movs	r0, #30
 800424c:	f001 fce1 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004250:	201e      	movs	r0, #30
 8004252:	f001 fcfa 	bl	8005c4a <HAL_NVIC_EnableIRQ>
}
 8004256:	bf00      	nop
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40010000 	.word	0x40010000
 8004264:	40023800 	.word	0x40023800
 8004268:	40000400 	.word	0x40000400
 800426c:	40000800 	.word	0x40000800

08004270 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a12      	ldr	r2, [pc, #72]	; (80042d8 <HAL_TIM_MspPostInit+0x68>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d11e      	bne.n	80042d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <HAL_TIM_MspPostInit+0x6c>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <HAL_TIM_MspPostInit+0x6c>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6313      	str	r3, [r2, #48]	; 0x30
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_TIM_MspPostInit+0x6c>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042c4:	f107 030c 	add.w	r3, r7, #12
 80042c8:	4619      	mov	r1, r3
 80042ca:	4805      	ldr	r0, [pc, #20]	; (80042e0 <HAL_TIM_MspPostInit+0x70>)
 80042cc:	f002 f866 	bl	800639c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80042d0:	bf00      	nop
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40020000 	.word	0x40020000

080042e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80042e8:	4b11      	ldr	r3, [pc, #68]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042ea:	4a12      	ldr	r2, [pc, #72]	; (8004334 <MX_USART1_UART_Init+0x50>)
 80042ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042ee:	4b10      	ldr	r3, [pc, #64]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042f6:	4b0e      	ldr	r3, [pc, #56]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042fc:	4b0c      	ldr	r3, [pc, #48]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004302:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 8004304:	2200      	movs	r2, #0
 8004306:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 800430a:	220c      	movs	r2, #12
 800430c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800430e:	4b08      	ldr	r3, [pc, #32]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 8004310:	2200      	movs	r2, #0
 8004312:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800431a:	4805      	ldr	r0, [pc, #20]	; (8004330 <MX_USART1_UART_Init+0x4c>)
 800431c:	f004 fcfd 	bl	8008d1a <HAL_UART_Init>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004326:	f7fe fb95 	bl	8002a54 <Error_Handler>
  }

}
 800432a:	bf00      	nop
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20001160 	.word	0x20001160
 8004334:	40011000 	.word	0x40011000

08004338 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 800433c:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 800433e:	4a12      	ldr	r2, [pc, #72]	; (8004388 <MX_USART3_UART_Init+0x50>)
 8004340:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 8004344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004348:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 8004358:	2200      	movs	r2, #0
 800435a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 800435e:	220c      	movs	r2, #12
 8004360:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800436e:	4805      	ldr	r0, [pc, #20]	; (8004384 <MX_USART3_UART_Init+0x4c>)
 8004370:	f004 fcd3 	bl	8008d1a <HAL_UART_Init>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800437a:	f7fe fb6b 	bl	8002a54 <Error_Handler>
  }

}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20001120 	.word	0x20001120
 8004388:	40004800 	.word	0x40004800

0800438c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 031c 	add.w	r3, r7, #28
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a3a      	ldr	r2, [pc, #232]	; (8004494 <HAL_UART_MspInit+0x108>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d134      	bne.n	8004418 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	4b39      	ldr	r3, [pc, #228]	; (8004498 <HAL_UART_MspInit+0x10c>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	4a38      	ldr	r2, [pc, #224]	; (8004498 <HAL_UART_MspInit+0x10c>)
 80043b8:	f043 0310 	orr.w	r3, r3, #16
 80043bc:	6453      	str	r3, [r2, #68]	; 0x44
 80043be:	4b36      	ldr	r3, [pc, #216]	; (8004498 <HAL_UART_MspInit+0x10c>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f003 0310 	and.w	r3, r3, #16
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_UART_MspInit+0x10c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a31      	ldr	r2, [pc, #196]	; (8004498 <HAL_UART_MspInit+0x10c>)
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b2f      	ldr	r3, [pc, #188]	; (8004498 <HAL_UART_MspInit+0x10c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80043e6:	23c0      	movs	r3, #192	; 0xc0
 80043e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ea:	2302      	movs	r3, #2
 80043ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ee:	2300      	movs	r3, #0
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f2:	2303      	movs	r3, #3
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043f6:	2307      	movs	r3, #7
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fa:	f107 031c 	add.w	r3, r7, #28
 80043fe:	4619      	mov	r1, r3
 8004400:	4826      	ldr	r0, [pc, #152]	; (800449c <HAL_UART_MspInit+0x110>)
 8004402:	f001 ffcb 	bl	800639c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8004406:	2200      	movs	r2, #0
 8004408:	2101      	movs	r1, #1
 800440a:	2025      	movs	r0, #37	; 0x25
 800440c:	f001 fc01 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004410:	2025      	movs	r0, #37	; 0x25
 8004412:	f001 fc1a 	bl	8005c4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004416:	e039      	b.n	800448c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <HAL_UART_MspInit+0x114>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d134      	bne.n	800448c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	613b      	str	r3, [r7, #16]
 8004426:	4b1c      	ldr	r3, [pc, #112]	; (8004498 <HAL_UART_MspInit+0x10c>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a1b      	ldr	r2, [pc, #108]	; (8004498 <HAL_UART_MspInit+0x10c>)
 800442c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_UART_MspInit+0x10c>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60fb      	str	r3, [r7, #12]
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <HAL_UART_MspInit+0x10c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <HAL_UART_MspInit+0x10c>)
 8004448:	f043 0304 	orr.w	r3, r3, #4
 800444c:	6313      	str	r3, [r2, #48]	; 0x30
 800444e:	4b12      	ldr	r3, [pc, #72]	; (8004498 <HAL_UART_MspInit+0x10c>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800445a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800445e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004460:	2302      	movs	r3, #2
 8004462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004468:	2303      	movs	r3, #3
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800446c:	2307      	movs	r3, #7
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	4619      	mov	r1, r3
 8004476:	480b      	ldr	r0, [pc, #44]	; (80044a4 <HAL_UART_MspInit+0x118>)
 8004478:	f001 ff90 	bl	800639c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800447c:	2200      	movs	r2, #0
 800447e:	2101      	movs	r1, #1
 8004480:	2027      	movs	r0, #39	; 0x27
 8004482:	f001 fbc6 	bl	8005c12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004486:	2027      	movs	r0, #39	; 0x27
 8004488:	f001 fbdf 	bl	8005c4a <HAL_NVIC_EnableIRQ>
}
 800448c:	bf00      	nop
 800448e:	3730      	adds	r7, #48	; 0x30
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40011000 	.word	0x40011000
 8004498:	40023800 	.word	0x40023800
 800449c:	40020400 	.word	0x40020400
 80044a0:	40004800 	.word	0x40004800
 80044a4:	40020800 	.word	0x40020800

080044a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80044ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044ae:	e003      	b.n	80044b8 <LoopCopyDataInit>

080044b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044b6:	3104      	adds	r1, #4

080044b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044b8:	480b      	ldr	r0, [pc, #44]	; (80044e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044c0:	d3f6      	bcc.n	80044b0 <CopyDataInit>
  ldr  r2, =_sbss
 80044c2:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044c4:	e002      	b.n	80044cc <LoopFillZerobss>

080044c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 80044c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044c8:	f842 3b04 	str.w	r3, [r2], #4

080044cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044d0:	d3f9      	bcc.n	80044c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044d2:	f7ff fc9d 	bl	8003e10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044d6:	f005 f885 	bl	80095e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044da:	f7fe f81f 	bl	800251c <main>
  bx  lr    
 80044de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80044e4:	0800c5f4 	.word	0x0800c5f4
  ldr  r0, =_sdata
 80044e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044ec:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 80044f0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80044f4:	200011a8 	.word	0x200011a8

080044f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f8:	e7fe      	b.n	80044f8 <ADC_IRQHandler>
	...

080044fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_Init+0x40>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <HAL_Init+0x40>)
 8004506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800450a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_Init+0x40>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_Init+0x40>)
 8004512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_Init+0x40>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <HAL_Init+0x40>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004524:	2003      	movs	r0, #3
 8004526:	f001 fb69 	bl	8005bfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800452a:	2000      	movs	r0, #0
 800452c:	f000 f808 	bl	8004540 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004530:	f7fe fd42 	bl	8002fb8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023c00 	.word	0x40023c00

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_InitTick+0x54>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_InitTick+0x58>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004556:	fbb3 f3f1 	udiv	r3, r3, r1
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fb81 	bl	8005c66 <HAL_SYSTICK_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00e      	b.n	800458c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d80a      	bhi.n	800458a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004574:	2200      	movs	r2, #0
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f001 fb49 	bl	8005c12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004580:	4a06      	ldr	r2, [pc, #24]	; (800459c <HAL_InitTick+0x5c>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000010 	.word	0x20000010
 8004598:	20000018 	.word	0x20000018
 800459c:	20000014 	.word	0x20000014

080045a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_IncTick+0x1c>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b05      	ldr	r3, [pc, #20]	; (80045c0 <HAL_IncTick+0x20>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	4a03      	ldr	r2, [pc, #12]	; (80045c0 <HAL_IncTick+0x20>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bc80      	pop	{r7}
 80045ba:	4770      	bx	lr
 80045bc:	20000018 	.word	0x20000018
 80045c0:	200011a0 	.word	0x200011a0

080045c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return uwTick;
 80045c8:	4b02      	ldr	r3, [pc, #8]	; (80045d4 <HAL_GetTick+0x10>)
 80045ca:	681b      	ldr	r3, [r3, #0]
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	200011a0 	.word	0x200011a0

080045d8 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e0:	f7ff fff0 	bl	80045c4 <HAL_GetTick>
 80045e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f0:	d005      	beq.n	80045fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_Delay+0x40>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045fe:	bf00      	nop
 8004600:	f7ff ffe0 	bl	80045c4 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	429a      	cmp	r2, r3
 800460e:	d8f7      	bhi.n	8004600 <HAL_Delay+0x28>
  {
  }
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000018 	.word	0x20000018

0800461c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e033      	b.n	800469a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7fd f97e 	bl	800193c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	f003 0310 	and.w	r3, r3, #16
 8004656:	2b00      	cmp	r3, #0
 8004658:	d118      	bne.n	800468c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004662:	f023 0302 	bic.w	r3, r3, #2
 8004666:	f043 0202 	orr.w	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 fa1c 	bl	8004aac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40
 800468a:	e001      	b.n	8004690 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d101      	bne.n	80046c2 <HAL_ADC_Start_DMA+0x1e>
 80046be:	2302      	movs	r3, #2
 80046c0:	e0af      	b.n	8004822 <HAL_ADC_Start_DMA+0x17e>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d018      	beq.n	800470a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	689a      	ldr	r2, [r3, #8]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046e8:	4b50      	ldr	r3, [pc, #320]	; (800482c <HAL_ADC_Start_DMA+0x188>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a50      	ldr	r2, [pc, #320]	; (8004830 <HAL_ADC_Start_DMA+0x18c>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	0c9a      	lsrs	r2, r3, #18
 80046f4:	4613      	mov	r3, r2
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4413      	add	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 80046fc:	e002      	b.n	8004704 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3b01      	subs	r3, #1
 8004702:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f9      	bne.n	80046fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 8083 	bne.w	8004820 <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004722:	f023 0301 	bic.w	r3, r3, #1
 8004726:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004744:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004750:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004758:	d106      	bne.n	8004768 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	f023 0206 	bic.w	r2, r3, #6
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	645a      	str	r2, [r3, #68]	; 0x44
 8004766:	e002      	b.n	800476e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	4a2e      	ldr	r2, [pc, #184]	; (8004834 <HAL_ADC_Start_DMA+0x190>)
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	4a2d      	ldr	r2, [pc, #180]	; (8004838 <HAL_ADC_Start_DMA+0x194>)
 8004784:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	4a2c      	ldr	r2, [pc, #176]	; (800483c <HAL_ADC_Start_DMA+0x198>)
 800478c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004796:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	334c      	adds	r3, #76	; 0x4c
 80047c2:	4619      	mov	r1, r3
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f001 fb08 	bl	8005ddc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <HAL_ADC_Start_DMA+0x19c>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 031f 	and.w	r3, r3, #31
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d11c      	bne.n	8004820 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	e013      	b.n	8004820 <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a11      	ldr	r2, [pc, #68]	; (8004844 <HAL_ADC_Start_DMA+0x1a0>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10e      	bne.n	8004820 <HAL_ADC_Start_DMA+0x17c>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800481e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20000010 	.word	0x20000010
 8004830:	431bde83 	.word	0x431bde83
 8004834:	08004cb5 	.word	0x08004cb5
 8004838:	08004d6f 	.word	0x08004d6f
 800483c:	08004d8b 	.word	0x08004d8b
 8004840:	40012300 	.word	0x40012300
 8004844:	40012000 	.word	0x40012000

08004848 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x1c>
 8004884:	2302      	movs	r3, #2
 8004886:	e103      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x224>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b09      	cmp	r3, #9
 8004896:	d925      	bls.n	80048e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68d9      	ldr	r1, [r3, #12]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	4613      	mov	r3, r2
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	4413      	add	r3, r2
 80048ac:	3b1e      	subs	r3, #30
 80048ae:	2207      	movs	r2, #7
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	43da      	mvns	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	400a      	ands	r2, r1
 80048bc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	4618      	mov	r0, r3
 80048d0:	4603      	mov	r3, r0
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	4403      	add	r3, r0
 80048d6:	3b1e      	subs	r3, #30
 80048d8:	409a      	lsls	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	60da      	str	r2, [r3, #12]
 80048e2:	e022      	b.n	800492a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	2207      	movs	r2, #7
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43da      	mvns	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	400a      	ands	r2, r1
 8004906:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6919      	ldr	r1, [r3, #16]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	4618      	mov	r0, r3
 800491a:	4603      	mov	r3, r0
 800491c:	005b      	lsls	r3, r3, #1
 800491e:	4403      	add	r3, r0
 8004920:	409a      	lsls	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b06      	cmp	r3, #6
 8004930:	d824      	bhi.n	800497c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	3b05      	subs	r3, #5
 8004944:	221f      	movs	r2, #31
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43da      	mvns	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	400a      	ands	r2, r1
 8004952:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	4618      	mov	r0, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	3b05      	subs	r3, #5
 800496e:	fa00 f203 	lsl.w	r2, r0, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	635a      	str	r2, [r3, #52]	; 0x34
 800497a:	e04c      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2b0c      	cmp	r3, #12
 8004982:	d824      	bhi.n	80049ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685a      	ldr	r2, [r3, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	3b23      	subs	r3, #35	; 0x23
 8004996:	221f      	movs	r2, #31
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	43da      	mvns	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	400a      	ands	r2, r1
 80049a4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4618      	mov	r0, r3
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685a      	ldr	r2, [r3, #4]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	3b23      	subs	r3, #35	; 0x23
 80049c0:	fa00 f203 	lsl.w	r2, r0, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
 80049cc:	e023      	b.n	8004a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	3b41      	subs	r3, #65	; 0x41
 80049e0:	221f      	movs	r2, #31
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43da      	mvns	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	400a      	ands	r2, r1
 80049ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	3b41      	subs	r3, #65	; 0x41
 8004a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	430a      	orrs	r2, r1
 8004a14:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a20      	ldr	r2, [pc, #128]	; (8004a9c <HAL_ADC_ConfigChannel+0x230>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d109      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x1c8>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b12      	cmp	r3, #18
 8004a26:	d105      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004a28:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_ADC_ConfigChannel+0x234>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <HAL_ADC_ConfigChannel+0x234>)
 8004a2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a32:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a18      	ldr	r2, [pc, #96]	; (8004a9c <HAL_ADC_ConfigChannel+0x230>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d123      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x21a>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d003      	beq.n	8004a4e <HAL_ADC_ConfigChannel+0x1e2>
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2b11      	cmp	r3, #17
 8004a4c:	d11b      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_ADC_ConfigChannel+0x234>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_ADC_ConfigChannel+0x234>)
 8004a54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a58:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b10      	cmp	r3, #16
 8004a60:	d111      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_ADC_ConfigChannel+0x238>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a10      	ldr	r2, [pc, #64]	; (8004aa8 <HAL_ADC_ConfigChannel+0x23c>)
 8004a68:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6c:	0c9a      	lsrs	r2, r3, #18
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004a78:	e002      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f9      	bne.n	8004a7a <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40012000 	.word	0x40012000
 8004aa0:	40012300 	.word	0x40012300
 8004aa4:	20000010 	.word	0x20000010
 8004aa8:	431bde83 	.word	0x431bde83

08004aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ab4:	4b7d      	ldr	r3, [pc, #500]	; (8004cac <ADC_Init+0x200>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a7c      	ldr	r2, [pc, #496]	; (8004cac <ADC_Init+0x200>)
 8004aba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004abe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004ac0:	4b7a      	ldr	r3, [pc, #488]	; (8004cac <ADC_Init+0x200>)
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4978      	ldr	r1, [pc, #480]	; (8004cac <ADC_Init+0x200>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	021a      	lsls	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3a:	4a5d      	ldr	r2, [pc, #372]	; (8004cb0 <ADC_Init+0x204>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d022      	beq.n	8004b86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	e00f      	b.n	8004ba6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0202 	bic.w	r2, r2, #2
 8004bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6899      	ldr	r1, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	005a      	lsls	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d027      	beq.n	8004c22 <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004bf0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8004bfc:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	fa92 f2a2 	rbit	r2, r2
 8004c04:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	fab2 f282 	clz	r2, r2
 8004c0c:	b2d2      	uxtb	r2, r2
 8004c0e:	fa03 f102 	lsl.w	r1, r3, r2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	e007      	b.n	8004c32 <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c30:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	051a      	lsls	r2, r3, #20
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	430a      	orrs	r2, r1
 8004c56:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004c66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6899      	ldr	r1, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c72:	025a      	lsls	r2, r3, #9
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6899      	ldr	r1, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	029a      	lsls	r2, r3, #10
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	430a      	orrs	r2, r1
 8004c9e:	609a      	str	r2, [r3, #8]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40012300 	.word	0x40012300
 8004cb0:	0f000001 	.word	0x0f000001

08004cb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d13c      	bne.n	8004d48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d12b      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d127      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d006      	beq.n	8004d0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d119      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0220 	bic.w	r2, r2, #32
 8004d1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f7fd fc7f 	bl	8002644 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d46:	e00e      	b.n	8004d66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4c:	f003 0310 	and.w	r3, r3, #16
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7ff fd80 	bl	800485a <HAL_ADC_ErrorCallback>
}
 8004d5a:	e004      	b.n	8004d66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	4798      	blx	r3
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d7c:	68f8      	ldr	r0, [r7, #12]
 8004d7e:	f7ff fd63 	bl	8004848 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d82:	bf00      	nop
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2240      	movs	r2, #64	; 0x40
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0204 	orr.w	r2, r3, #4
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff fd55 	bl	800485a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004db0:	bf00      	nop
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e0ed      	b.n	8004fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fe98 	bl	8001b0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0202 	bic.w	r2, r2, #2
 8004dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dec:	f7ff fbea 	bl	80045c4 <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004df2:	e012      	b.n	8004e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004df4:	f7ff fbe6 	bl	80045c4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b0a      	cmp	r3, #10
 8004e00:	d90b      	bls.n	8004e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2205      	movs	r2, #5
 8004e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e0c5      	b.n	8004fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e5      	bne.n	8004df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0201 	orr.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e38:	f7ff fbc4 	bl	80045c4 <HAL_GetTick>
 8004e3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e3e:	e012      	b.n	8004e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e40:	f7ff fbc0 	bl	80045c4 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b0a      	cmp	r3, #10
 8004e4c:	d90b      	bls.n	8004e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2205      	movs	r2, #5
 8004e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e09f      	b.n	8004fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0e5      	beq.n	8004e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7e1b      	ldrb	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7e5b      	ldrb	r3, [r3, #25]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d108      	bne.n	8004eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e007      	b.n	8004ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	7e9b      	ldrb	r3, [r3, #26]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d108      	bne.n	8004ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0220 	orr.w	r2, r2, #32
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e007      	b.n	8004ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0220 	bic.w	r2, r2, #32
 8004ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	7edb      	ldrb	r3, [r3, #27]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d108      	bne.n	8004f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0210 	bic.w	r2, r2, #16
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	e007      	b.n	8004f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0210 	orr.w	r2, r2, #16
 8004f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	7f1b      	ldrb	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d108      	bne.n	8004f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e007      	b.n	8004f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0208 	bic.w	r2, r2, #8
 8004f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	7f5b      	ldrb	r3, [r3, #29]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d108      	bne.n	8004f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f042 0204 	orr.w	r2, r2, #4
 8004f5c:	601a      	str	r2, [r3, #0]
 8004f5e:	e007      	b.n	8004f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	ea42 0103 	orr.w	r1, r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	430a      	orrs	r2, r1
 8004f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
	...

08004fb0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fc6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004fc8:	7cfb      	ldrb	r3, [r7, #19]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d003      	beq.n	8004fd6 <HAL_CAN_ConfigFilter+0x26>
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	f040 80be 	bne.w	8005152 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004fd6:	4b65      	ldr	r3, [pc, #404]	; (800516c <HAL_CAN_ConfigFilter+0x1bc>)
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fe0:	f043 0201 	orr.w	r2, r3, #1
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ff0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	431a      	orrs	r2, r3
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2201      	movs	r2, #1
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	43db      	mvns	r3, r3
 8005028:	401a      	ands	r2, r3
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	69db      	ldr	r3, [r3, #28]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d123      	bne.n	8005080 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	43db      	mvns	r3, r3
 8005042:	401a      	ands	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800505a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	3248      	adds	r2, #72	; 0x48
 8005060:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005074:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005076:	6979      	ldr	r1, [r7, #20]
 8005078:	3348      	adds	r3, #72	; 0x48
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	440b      	add	r3, r1
 800507e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d122      	bne.n	80050ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	431a      	orrs	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80050a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	3248      	adds	r2, #72	; 0x48
 80050ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80050c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80050c4:	6979      	ldr	r1, [r7, #20]
 80050c6:	3348      	adds	r3, #72	; 0x48
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	440b      	add	r3, r1
 80050cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	43db      	mvns	r3, r3
 80050e0:	401a      	ands	r2, r3
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80050e8:	e007      	b.n	80050fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d109      	bne.n	8005116 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	43db      	mvns	r3, r3
 800510c:	401a      	ands	r2, r3
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005114:	e007      	b.n	8005126 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	431a      	orrs	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	6a1b      	ldr	r3, [r3, #32]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d107      	bne.n	800513e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	431a      	orrs	r2, r3
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005144:	f023 0201 	bic.w	r2, r3, #1
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	e006      	b.n	8005160 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
  }
}
 8005160:	4618      	mov	r0, r3
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40006400 	.word	0x40006400

08005170 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b01      	cmp	r3, #1
 8005182:	d12e      	bne.n	80051e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 0201 	bic.w	r2, r2, #1
 800519a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800519c:	f7ff fa12 	bl	80045c4 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051a2:	e012      	b.n	80051ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80051a4:	f7ff fa0e 	bl	80045c4 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b0a      	cmp	r3, #10
 80051b0:	d90b      	bls.n	80051ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2205      	movs	r2, #5
 80051c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e012      	b.n	80051f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1e5      	bne.n	80051a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e006      	b.n	80051f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
  }
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800520c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d003      	beq.n	8005224 <HAL_CAN_AddTxMessage+0x2c>
 800521c:	7ffb      	ldrb	r3, [r7, #31]
 800521e:	2b02      	cmp	r3, #2
 8005220:	f040 80b8 	bne.w	8005394 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 80a0 	beq.w	8005384 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	0e1b      	lsrs	r3, r3, #24
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d907      	bls.n	8005264 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e09e      	b.n	80053a2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005264:	2201      	movs	r2, #1
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	409a      	lsls	r2, r3
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10d      	bne.n	8005292 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	6809      	ldr	r1, [r1, #0]
 8005284:	431a      	orrs	r2, r3
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	3318      	adds	r3, #24
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	440b      	add	r3, r1
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	e00f      	b.n	80052b2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800529c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80052a6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3318      	adds	r3, #24
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	440b      	add	r3, r1
 80052b0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6819      	ldr	r1, [r3, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	3318      	adds	r3, #24
 80052be:	011b      	lsls	r3, r3, #4
 80052c0:	440b      	add	r3, r1
 80052c2:	3304      	adds	r3, #4
 80052c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	7d1b      	ldrb	r3, [r3, #20]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d111      	bne.n	80052f2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	3318      	adds	r3, #24
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	4413      	add	r3, r2
 80052da:	3304      	adds	r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6811      	ldr	r1, [r2, #0]
 80052e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3318      	adds	r3, #24
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	440b      	add	r3, r1
 80052ee:	3304      	adds	r3, #4
 80052f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3307      	adds	r3, #7
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	061a      	lsls	r2, r3, #24
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3306      	adds	r3, #6
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3305      	adds	r3, #5
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	4313      	orrs	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	3204      	adds	r2, #4
 8005312:	7812      	ldrb	r2, [r2, #0]
 8005314:	4610      	mov	r0, r2
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	6811      	ldr	r1, [r2, #0]
 800531a:	ea43 0200 	orr.w	r2, r3, r0
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	440b      	add	r3, r1
 8005324:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005328:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3303      	adds	r3, #3
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	061a      	lsls	r2, r3, #24
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	3302      	adds	r3, #2
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	041b      	lsls	r3, r3, #16
 800533a:	431a      	orrs	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3301      	adds	r3, #1
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	4313      	orrs	r3, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	7812      	ldrb	r2, [r2, #0]
 800534a:	4610      	mov	r0, r2
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	6811      	ldr	r1, [r2, #0]
 8005350:	ea43 0200 	orr.w	r2, r3, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	440b      	add	r3, r1
 800535a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800535e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3318      	adds	r3, #24
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	4413      	add	r3, r2
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68fa      	ldr	r2, [r7, #12]
 8005370:	6811      	ldr	r1, [r2, #0]
 8005372:	f043 0201 	orr.w	r2, r3, #1
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	3318      	adds	r3, #24
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	440b      	add	r3, r1
 800537e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e00e      	b.n	80053a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e006      	b.n	80053a2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	; 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bc80      	pop	{r7}
 80053aa:	4770      	bx	lr

080053ac <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d003      	beq.n	80053d0 <HAL_CAN_GetRxMessage+0x24>
 80053c8:	7dfb      	ldrb	r3, [r7, #23]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	f040 80f3 	bne.w	80055b6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10e      	bne.n	80053f4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d116      	bne.n	8005412 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e0e7      	b.n	80055c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0303 	and.w	r3, r3, #3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e0d8      	b.n	80055c4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	331b      	adds	r3, #27
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4413      	add	r3, r2
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0204 	and.w	r2, r3, #4
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10c      	bne.n	800544a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	331b      	adds	r3, #27
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	4413      	add	r3, r2
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	0d5b      	lsrs	r3, r3, #21
 8005440:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e00b      	b.n	8005462 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	331b      	adds	r3, #27
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	4413      	add	r3, r2
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	08db      	lsrs	r3, r3, #3
 800545a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	331b      	adds	r3, #27
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4413      	add	r3, r2
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 0202 	and.w	r2, r3, #2
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	331b      	adds	r3, #27
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	331b      	adds	r3, #27
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	0a1b      	lsrs	r3, r3, #8
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	331b      	adds	r3, #27
 80054b0:	011b      	lsls	r3, r3, #4
 80054b2:	4413      	add	r3, r2
 80054b4:	3304      	adds	r3, #4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0c1b      	lsrs	r3, r3, #16
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	b2da      	uxtb	r2, r3
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	4413      	add	r3, r2
 80054e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	0a1a      	lsrs	r2, r3, #8
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	3301      	adds	r3, #1
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	0c1a      	lsrs	r2, r3, #16
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	3302      	adds	r3, #2
 8005506:	b2d2      	uxtb	r2, r2
 8005508:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	4413      	add	r3, r2
 8005514:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	0e1a      	lsrs	r2, r3, #24
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	3303      	adds	r3, #3
 8005520:	b2d2      	uxtb	r2, r2
 8005522:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	4413      	add	r3, r2
 800552e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	3304      	adds	r3, #4
 8005538:	b2d2      	uxtb	r2, r2
 800553a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	4413      	add	r3, r2
 8005546:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	0a1a      	lsrs	r2, r3, #8
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	3305      	adds	r3, #5
 8005552:	b2d2      	uxtb	r2, r2
 8005554:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	4413      	add	r3, r2
 8005560:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	0c1a      	lsrs	r2, r3, #16
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	3306      	adds	r3, #6
 800556c:	b2d2      	uxtb	r2, r2
 800556e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	011b      	lsls	r3, r3, #4
 8005578:	4413      	add	r3, r2
 800557a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	0e1a      	lsrs	r2, r3, #24
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	3307      	adds	r3, #7
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0220 	orr.w	r2, r2, #32
 800559e:	60da      	str	r2, [r3, #12]
 80055a0:	e007      	b.n	80055b2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0220 	orr.w	r2, r2, #32
 80055b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e006      	b.n	80055c4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
  }
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b085      	sub	sp, #20
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	2b01      	cmp	r3, #1
 80055e4:	d002      	beq.n	80055ec <HAL_CAN_ActivateNotification+0x1e>
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	d109      	bne.n	8005600 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6959      	ldr	r1, [r3, #20]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80055fc:	2300      	movs	r3, #0
 80055fe:	e006      	b.n	800560e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
  }
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005620:	2300      	movs	r3, #0
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d07c      	beq.n	8005758 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d023      	beq.n	80056b0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d003      	beq.n	8005682 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f97d 	bl	800597a <HAL_CAN_TxMailbox0CompleteCallback>
 8005680:	e016      	b.n	80056b0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800568c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005692:	627b      	str	r3, [r7, #36]	; 0x24
 8005694:	e00c      	b.n	80056b0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
 80056a8:	e002      	b.n	80056b0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f980 	bl	80059b0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d024      	beq.n	8005704 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f95c 	bl	800598c <HAL_CAN_TxMailbox1CompleteCallback>
 80056d4:	e016      	b.n	8005704 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d004      	beq.n	80056ea <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056e6:	627b      	str	r3, [r7, #36]	; 0x24
 80056e8:	e00c      	b.n	8005704 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d004      	beq.n	80056fe <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
 80056fc:	e002      	b.n	8005704 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 f95f 	bl	80059c2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d024      	beq.n	8005758 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005716:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f93b 	bl	800599e <HAL_CAN_TxMailbox2CompleteCallback>
 8005728:	e016      	b.n	8005758 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573a:	627b      	str	r3, [r7, #36]	; 0x24
 800573c:	e00c      	b.n	8005758 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800574e:	627b      	str	r3, [r7, #36]	; 0x24
 8005750:	e002      	b.n	8005758 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f93e 	bl	80059d4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	f003 0308 	and.w	r3, r3, #8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00c      	beq.n	800577c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800576c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005772:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2210      	movs	r2, #16
 800577a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d006      	beq.n	800579e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2208      	movs	r2, #8
 8005796:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f92d 	bl	80059f8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d009      	beq.n	80057bc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f915 	bl	80059e6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00c      	beq.n	80057e0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d007      	beq.n	80057e0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2210      	movs	r2, #16
 80057de:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00b      	beq.n	8005802 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f003 0308 	and.w	r3, r3, #8
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d006      	beq.n	8005802 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2208      	movs	r2, #8
 80057fa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f90d 	bl	8005a1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	f003 0310 	and.w	r3, r3, #16
 8005808:	2b00      	cmp	r3, #0
 800580a:	d009      	beq.n	8005820 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f8f5 	bl	8005a0a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00b      	beq.n	8005842 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d006      	beq.n	8005842 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2210      	movs	r2, #16
 800583a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 f8f6 	bl	8005a2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b00      	cmp	r3, #0
 8005854:	d006      	beq.n	8005864 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2208      	movs	r2, #8
 800585c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8ee 	bl	8005a40 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d075      	beq.n	800595a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d06c      	beq.n	8005952 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f043 0302 	orr.w	r3, r3, #2
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d008      	beq.n	80058cc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	f043 0304 	orr.w	r3, r3, #4
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d03d      	beq.n	8005952 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d038      	beq.n	8005952 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d017      	beq.n	800591a <HAL_CAN_IRQHandler+0x302>
 80058ea:	2b30      	cmp	r3, #48	; 0x30
 80058ec:	d804      	bhi.n	80058f8 <HAL_CAN_IRQHandler+0x2e0>
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d009      	beq.n	8005906 <HAL_CAN_IRQHandler+0x2ee>
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d00c      	beq.n	8005910 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058f6:	e024      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80058f8:	2b50      	cmp	r3, #80	; 0x50
 80058fa:	d018      	beq.n	800592e <HAL_CAN_IRQHandler+0x316>
 80058fc:	2b60      	cmp	r3, #96	; 0x60
 80058fe:	d01b      	beq.n	8005938 <HAL_CAN_IRQHandler+0x320>
 8005900:	2b40      	cmp	r3, #64	; 0x40
 8005902:	d00f      	beq.n	8005924 <HAL_CAN_IRQHandler+0x30c>
            break;
 8005904:	e01d      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8005906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005908:	f043 0308 	orr.w	r3, r3, #8
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800590e:	e018      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005912:	f043 0310 	orr.w	r3, r3, #16
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005918:	e013      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	f043 0320 	orr.w	r3, r3, #32
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005922:	e00e      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8005924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800592c:	e009      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005936:	e004      	b.n	8005942 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005940:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	699a      	ldr	r2, [r3, #24]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005950:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2204      	movs	r2, #4
 8005958:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f870 	bl	8005a52 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005972:	bf00      	nop
 8005974:	3728      	adds	r7, #40	; 0x28
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr

0800598c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	4770      	bx	lr

080059c2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bc80      	pop	{r7}
 80059d2:	4770      	bx	lr

080059d4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bc80      	pop	{r7}
 80059e4:	4770      	bx	lr

080059e6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80059ee:	bf00      	nop
 80059f0:	370c      	adds	r7, #12
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr

08005a0a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bc80      	pop	{r7}
 8005a1a:	4770      	bx	lr

08005a1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	4770      	bx	lr

08005a2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b083      	sub	sp, #12
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bc80      	pop	{r7}
 8005a3e:	4770      	bx	lr

08005a40 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a48:	bf00      	nop
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bc80      	pop	{r7}
 8005a50:	4770      	bx	lr

08005a52 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a74:	4b0c      	ldr	r3, [pc, #48]	; (8005aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a80:	4013      	ands	r3, r2
 8005a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	60d3      	str	r3, [r2, #12]
}
 8005a9c:	bf00      	nop
 8005a9e:	3714      	adds	r7, #20
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bc80      	pop	{r7}
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	e000ed00 	.word	0xe000ed00

08005aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ab0:	4b04      	ldr	r3, [pc, #16]	; (8005ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	0a1b      	lsrs	r3, r3, #8
 8005ab6:	f003 0307 	and.w	r3, r3, #7
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bc80      	pop	{r7}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000ed00 	.word	0xe000ed00

08005ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	db0b      	blt.n	8005af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ada:	79fb      	ldrb	r3, [r7, #7]
 8005adc:	f003 021f 	and.w	r2, r3, #31
 8005ae0:	4906      	ldr	r1, [pc, #24]	; (8005afc <__NVIC_EnableIRQ+0x34>)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	2001      	movs	r0, #1
 8005aea:	fa00 f202 	lsl.w	r2, r0, r2
 8005aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bc80      	pop	{r7}
 8005afa:	4770      	bx	lr
 8005afc:	e000e100 	.word	0xe000e100

08005b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	4603      	mov	r3, r0
 8005b08:	6039      	str	r1, [r7, #0]
 8005b0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	db0a      	blt.n	8005b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	b2da      	uxtb	r2, r3
 8005b18:	490c      	ldr	r1, [pc, #48]	; (8005b4c <__NVIC_SetPriority+0x4c>)
 8005b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b1e:	0112      	lsls	r2, r2, #4
 8005b20:	b2d2      	uxtb	r2, r2
 8005b22:	440b      	add	r3, r1
 8005b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b28:	e00a      	b.n	8005b40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4908      	ldr	r1, [pc, #32]	; (8005b50 <__NVIC_SetPriority+0x50>)
 8005b30:	79fb      	ldrb	r3, [r7, #7]
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3b04      	subs	r3, #4
 8005b38:	0112      	lsls	r2, r2, #4
 8005b3a:	b2d2      	uxtb	r2, r2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	761a      	strb	r2, [r3, #24]
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bc80      	pop	{r7}
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	e000e100 	.word	0xe000e100
 8005b50:	e000ed00 	.word	0xe000ed00

08005b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	f1c3 0307 	rsb	r3, r3, #7
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	bf28      	it	cs
 8005b72:	2304      	movcs	r3, #4
 8005b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d902      	bls.n	8005b84 <NVIC_EncodePriority+0x30>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3b03      	subs	r3, #3
 8005b82:	e000      	b.n	8005b86 <NVIC_EncodePriority+0x32>
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b88:	f04f 32ff 	mov.w	r2, #4294967295
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43da      	mvns	r2, r3
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	401a      	ands	r2, r3
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba6:	43d9      	mvns	r1, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bac:	4313      	orrs	r3, r2
         );
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3724      	adds	r7, #36	; 0x24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bc8:	d301      	bcc.n	8005bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e00f      	b.n	8005bee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <SysTick_Config+0x40>)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bd6:	210f      	movs	r1, #15
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	f7ff ff90 	bl	8005b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <SysTick_Config+0x40>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005be6:	4b04      	ldr	r3, [pc, #16]	; (8005bf8 <SysTick_Config+0x40>)
 8005be8:	2207      	movs	r2, #7
 8005bea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3708      	adds	r7, #8
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	e000e010 	.word	0xe000e010

08005bfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff ff2d 	bl	8005a64 <__NVIC_SetPriorityGrouping>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
 8005c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c24:	f7ff ff42 	bl	8005aac <__NVIC_GetPriorityGrouping>
 8005c28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	f7ff ff90 	bl	8005b54 <NVIC_EncodePriority>
 8005c34:	4602      	mov	r2, r0
 8005c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff ff5f 	bl	8005b00 <__NVIC_SetPriority>
}
 8005c42:	bf00      	nop
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	4603      	mov	r3, r0
 8005c52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff ff35 	bl	8005ac8 <__NVIC_EnableIRQ>
}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff ffa2 	bl	8005bb8 <SysTick_Config>
 8005c74:	4603      	mov	r3, r0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c8c:	f7fe fc9a 	bl	80045c4 <HAL_GetTick>
 8005c90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e099      	b.n	8005dd0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cbc:	e00f      	b.n	8005cde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005cbe:	f7fe fc81 	bl	80045c4 <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	2b05      	cmp	r3, #5
 8005cca:	d908      	bls.n	8005cde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2203      	movs	r2, #3
 8005cd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e078      	b.n	8005dd0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e8      	bne.n	8005cbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_DMA_Init+0x158>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b04      	cmp	r3, #4
 8005d36:	d107      	bne.n	8005d48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4313      	orrs	r3, r2
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	f023 0307 	bic.w	r3, r3, #7
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	2b04      	cmp	r3, #4
 8005d70:	d117      	bne.n	8005da2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00e      	beq.n	8005da2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f000 fa8f 	bl	80062a8 <DMA_CheckFifoParam>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d008      	beq.n	8005da2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2240      	movs	r2, #64	; 0x40
 8005d94:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e016      	b.n	8005dd0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fa48 	bl	8006240 <DMA_CalcBaseAndBitshift>
 8005db0:	4603      	mov	r3, r0
 8005db2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db8:	223f      	movs	r2, #63	; 0x3f
 8005dba:	409a      	lsls	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3718      	adds	r7, #24
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	f010803f 	.word	0xf010803f

08005ddc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_DMA_Start_IT+0x26>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e040      	b.n	8005e84 <HAL_DMA_Start_IT+0xa8>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d12f      	bne.n	8005e76 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2202      	movs	r2, #2
 8005e1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	68f8      	ldr	r0, [r7, #12]
 8005e2c:	f000 f9da 	bl	80061e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e34:	223f      	movs	r2, #63	; 0x3f
 8005e36:	409a      	lsls	r2, r3
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f042 0216 	orr.w	r2, r2, #22
 8005e4a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f042 0208 	orr.w	r2, r2, #8
 8005e62:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e005      	b.n	8005e82 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e7e:	2302      	movs	r3, #2
 8005e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3718      	adds	r7, #24
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d004      	beq.n	8005eaa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2280      	movs	r2, #128	; 0x80
 8005ea4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e00c      	b.n	8005ec4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2205      	movs	r2, #5
 8005eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bc80      	pop	{r7}
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005edc:	4b92      	ldr	r3, [pc, #584]	; (8006128 <HAL_DMA_IRQHandler+0x258>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a92      	ldr	r2, [pc, #584]	; (800612c <HAL_DMA_IRQHandler+0x25c>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0a9b      	lsrs	r3, r3, #10
 8005ee8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005efa:	2208      	movs	r2, #8
 8005efc:	409a      	lsls	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4013      	ands	r3, r2
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d01a      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 0304 	and.w	r3, r3, #4
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d013      	beq.n	8005f3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f022 0204 	bic.w	r2, r2, #4
 8005f22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f28:	2208      	movs	r2, #8
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f34:	f043 0201 	orr.w	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f40:	2201      	movs	r2, #1
 8005f42:	409a      	lsls	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4013      	ands	r3, r2
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d012      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00b      	beq.n	8005f72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5e:	2201      	movs	r2, #1
 8005f60:	409a      	lsls	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	f043 0202 	orr.w	r2, r3, #2
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	2204      	movs	r2, #4
 8005f78:	409a      	lsls	r2, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d012      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	2204      	movs	r2, #4
 8005f96:	409a      	lsls	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f043 0204 	orr.w	r2, r3, #4
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	2210      	movs	r2, #16
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d043      	beq.n	8006040 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d03c      	beq.n	8006040 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	2210      	movs	r2, #16
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d018      	beq.n	8006012 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d108      	bne.n	8006000 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d024      	beq.n	8006040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
 8005ffe:	e01f      	b.n	8006040 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006004:	2b00      	cmp	r3, #0
 8006006:	d01b      	beq.n	8006040 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	4798      	blx	r3
 8006010:	e016      	b.n	8006040 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601c:	2b00      	cmp	r3, #0
 800601e:	d107      	bne.n	8006030 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0208 	bic.w	r2, r2, #8
 800602e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	2220      	movs	r2, #32
 8006046:	409a      	lsls	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	4013      	ands	r3, r2
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 808e 	beq.w	800616e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0310 	and.w	r3, r3, #16
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8086 	beq.w	800616e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006066:	2220      	movs	r2, #32
 8006068:	409a      	lsls	r2, r3
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b05      	cmp	r3, #5
 8006078:	d136      	bne.n	80060e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0216 	bic.w	r2, r2, #22
 8006088:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006098:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d103      	bne.n	80060aa <HAL_DMA_IRQHandler+0x1da>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d007      	beq.n	80060ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0208 	bic.w	r2, r2, #8
 80060b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	223f      	movs	r2, #63	; 0x3f
 80060c0:	409a      	lsls	r2, r3
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d07d      	beq.n	80061da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	4798      	blx	r3
        }
        return;
 80060e6:	e078      	b.n	80061da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01c      	beq.n	8006130 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d108      	bne.n	8006116 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006108:	2b00      	cmp	r3, #0
 800610a:	d030      	beq.n	800616e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
 8006114:	e02b      	b.n	800616e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	d027      	beq.n	800616e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	4798      	blx	r3
 8006126:	e022      	b.n	800616e <HAL_DMA_IRQHandler+0x29e>
 8006128:	20000010 	.word	0x20000010
 800612c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10f      	bne.n	800615e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0210 	bic.w	r2, r2, #16
 800614c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006172:	2b00      	cmp	r3, #0
 8006174:	d032      	beq.n	80061dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617a:	f003 0301 	and.w	r3, r3, #1
 800617e:	2b00      	cmp	r3, #0
 8006180:	d022      	beq.n	80061c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2205      	movs	r2, #5
 8006186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0201 	bic.w	r2, r2, #1
 8006198:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3301      	adds	r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d307      	bcc.n	80061b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1f2      	bne.n	800619a <HAL_DMA_IRQHandler+0x2ca>
 80061b4:	e000      	b.n	80061b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80061b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d005      	beq.n	80061dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	e000      	b.n	80061dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80061da:	bf00      	nop
    }
  }
}
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop

080061e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006200:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b40      	cmp	r3, #64	; 0x40
 8006210:	d108      	bne.n	8006224 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68ba      	ldr	r2, [r7, #8]
 8006220:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006222:	e007      	b.n	8006234 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	60da      	str	r2, [r3, #12]
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr
	...

08006240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	b2db      	uxtb	r3, r3
 800624e:	3b10      	subs	r3, #16
 8006250:	4a13      	ldr	r2, [pc, #76]	; (80062a0 <DMA_CalcBaseAndBitshift+0x60>)
 8006252:	fba2 2303 	umull	r2, r3, r2, r3
 8006256:	091b      	lsrs	r3, r3, #4
 8006258:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800625a:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <DMA_CalcBaseAndBitshift+0x64>)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b03      	cmp	r3, #3
 800626c:	d909      	bls.n	8006282 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006276:	f023 0303 	bic.w	r3, r3, #3
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	659a      	str	r2, [r3, #88]	; 0x58
 8006280:	e007      	b.n	8006292 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800628a:	f023 0303 	bic.w	r3, r3, #3
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	bc80      	pop	{r7}
 800629e:	4770      	bx	lr
 80062a0:	aaaaaaab 	.word	0xaaaaaaab
 80062a4:	0800c378 	.word	0x0800c378

080062a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b0:	2300      	movs	r3, #0
 80062b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d11f      	bne.n	8006302 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b03      	cmp	r3, #3
 80062c6:	d855      	bhi.n	8006374 <DMA_CheckFifoParam+0xcc>
 80062c8:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <DMA_CheckFifoParam+0x28>)
 80062ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ce:	bf00      	nop
 80062d0:	080062e1 	.word	0x080062e1
 80062d4:	080062f3 	.word	0x080062f3
 80062d8:	080062e1 	.word	0x080062e1
 80062dc:	08006375 	.word	0x08006375
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d045      	beq.n	8006378 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f0:	e042      	b.n	8006378 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062fa:	d13f      	bne.n	800637c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006300:	e03c      	b.n	800637c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800630a:	d121      	bne.n	8006350 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b03      	cmp	r3, #3
 8006310:	d836      	bhi.n	8006380 <DMA_CheckFifoParam+0xd8>
 8006312:	a201      	add	r2, pc, #4	; (adr r2, 8006318 <DMA_CheckFifoParam+0x70>)
 8006314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006318:	08006329 	.word	0x08006329
 800631c:	0800632f 	.word	0x0800632f
 8006320:	08006329 	.word	0x08006329
 8006324:	08006341 	.word	0x08006341
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	73fb      	strb	r3, [r7, #15]
      break;
 800632c:	e02f      	b.n	800638e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d024      	beq.n	8006384 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800633e:	e021      	b.n	8006384 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006348:	d11e      	bne.n	8006388 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800634e:	e01b      	b.n	8006388 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d902      	bls.n	800635c <DMA_CheckFifoParam+0xb4>
 8006356:	2b03      	cmp	r3, #3
 8006358:	d003      	beq.n	8006362 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800635a:	e018      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
      break;
 8006360:	e015      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006366:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00e      	beq.n	800638c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	73fb      	strb	r3, [r7, #15]
      break;
 8006372:	e00b      	b.n	800638c <DMA_CheckFifoParam+0xe4>
      break;
 8006374:	bf00      	nop
 8006376:	e00a      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;
 8006378:	bf00      	nop
 800637a:	e008      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;
 800637c:	bf00      	nop
 800637e:	e006      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;
 8006380:	bf00      	nop
 8006382:	e004      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;
 8006384:	bf00      	nop
 8006386:	e002      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;   
 8006388:	bf00      	nop
 800638a:	e000      	b.n	800638e <DMA_CheckFifoParam+0xe6>
      break;
 800638c:	bf00      	nop
    }
  } 
  
  return status; 
 800638e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006390:	4618      	mov	r0, r3
 8006392:	3714      	adds	r7, #20
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop

0800639c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063aa:	e16f      	b.n	800668c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	2101      	movs	r1, #1
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	fa01 f303 	lsl.w	r3, r1, r3
 80063b8:	4013      	ands	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 8161 	beq.w	8006686 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d00b      	beq.n	80063e4 <HAL_GPIO_Init+0x48>
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d007      	beq.n	80063e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80063d8:	2b11      	cmp	r3, #17
 80063da:	d003      	beq.n	80063e4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b12      	cmp	r3, #18
 80063e2:	d130      	bne.n	8006446 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	005b      	lsls	r3, r3, #1
 80063ee:	2203      	movs	r2, #3
 80063f0:	fa02 f303 	lsl.w	r3, r2, r3
 80063f4:	43db      	mvns	r3, r3
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4013      	ands	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	68da      	ldr	r2, [r3, #12]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	fa02 f303 	lsl.w	r3, r2, r3
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	4313      	orrs	r3, r2
 800640c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800641a:	2201      	movs	r2, #1
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43db      	mvns	r3, r3
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	091b      	lsrs	r3, r3, #4
 8006430:	f003 0201 	and.w	r2, r3, #1
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	fa02 f303 	lsl.w	r3, r2, r3
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4313      	orrs	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	2203      	movs	r2, #3
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	43db      	mvns	r3, r3
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4013      	ands	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689a      	ldr	r2, [r3, #8]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	005b      	lsls	r3, r3, #1
 8006466:	fa02 f303 	lsl.w	r3, r2, r3
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b02      	cmp	r3, #2
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_Init+0xea>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	2b12      	cmp	r3, #18
 8006484:	d123      	bne.n	80064ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	08da      	lsrs	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3208      	adds	r2, #8
 800648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	220f      	movs	r2, #15
 800649e:	fa02 f303 	lsl.w	r3, r2, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	4013      	ands	r3, r2
 80064a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	08da      	lsrs	r2, r3, #3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3208      	adds	r2, #8
 80064c8:	6939      	ldr	r1, [r7, #16]
 80064ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	2203      	movs	r2, #3
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4013      	ands	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f003 0203 	and.w	r2, r3, #3
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	fa02 f303 	lsl.w	r3, r2, r3
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80bb 	beq.w	8006686 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006510:	2300      	movs	r3, #0
 8006512:	60bb      	str	r3, [r7, #8]
 8006514:	4b64      	ldr	r3, [pc, #400]	; (80066a8 <HAL_GPIO_Init+0x30c>)
 8006516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006518:	4a63      	ldr	r2, [pc, #396]	; (80066a8 <HAL_GPIO_Init+0x30c>)
 800651a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800651e:	6453      	str	r3, [r2, #68]	; 0x44
 8006520:	4b61      	ldr	r3, [pc, #388]	; (80066a8 <HAL_GPIO_Init+0x30c>)
 8006522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006528:	60bb      	str	r3, [r7, #8]
 800652a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800652c:	4a5f      	ldr	r2, [pc, #380]	; (80066ac <HAL_GPIO_Init+0x310>)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	089b      	lsrs	r3, r3, #2
 8006532:	3302      	adds	r3, #2
 8006534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006538:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	220f      	movs	r2, #15
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4013      	ands	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a57      	ldr	r2, [pc, #348]	; (80066b0 <HAL_GPIO_Init+0x314>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d031      	beq.n	80065bc <HAL_GPIO_Init+0x220>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a56      	ldr	r2, [pc, #344]	; (80066b4 <HAL_GPIO_Init+0x318>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d02b      	beq.n	80065b8 <HAL_GPIO_Init+0x21c>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a55      	ldr	r2, [pc, #340]	; (80066b8 <HAL_GPIO_Init+0x31c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d025      	beq.n	80065b4 <HAL_GPIO_Init+0x218>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a54      	ldr	r2, [pc, #336]	; (80066bc <HAL_GPIO_Init+0x320>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d01f      	beq.n	80065b0 <HAL_GPIO_Init+0x214>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a53      	ldr	r2, [pc, #332]	; (80066c0 <HAL_GPIO_Init+0x324>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d019      	beq.n	80065ac <HAL_GPIO_Init+0x210>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a52      	ldr	r2, [pc, #328]	; (80066c4 <HAL_GPIO_Init+0x328>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d013      	beq.n	80065a8 <HAL_GPIO_Init+0x20c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a51      	ldr	r2, [pc, #324]	; (80066c8 <HAL_GPIO_Init+0x32c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00d      	beq.n	80065a4 <HAL_GPIO_Init+0x208>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a50      	ldr	r2, [pc, #320]	; (80066cc <HAL_GPIO_Init+0x330>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d007      	beq.n	80065a0 <HAL_GPIO_Init+0x204>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a4f      	ldr	r2, [pc, #316]	; (80066d0 <HAL_GPIO_Init+0x334>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d101      	bne.n	800659c <HAL_GPIO_Init+0x200>
 8006598:	2308      	movs	r3, #8
 800659a:	e010      	b.n	80065be <HAL_GPIO_Init+0x222>
 800659c:	2309      	movs	r3, #9
 800659e:	e00e      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065a0:	2307      	movs	r3, #7
 80065a2:	e00c      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065a4:	2306      	movs	r3, #6
 80065a6:	e00a      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065a8:	2305      	movs	r3, #5
 80065aa:	e008      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065ac:	2304      	movs	r3, #4
 80065ae:	e006      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065b0:	2303      	movs	r3, #3
 80065b2:	e004      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e002      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_GPIO_Init+0x222>
 80065bc:	2300      	movs	r3, #0
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	f002 0203 	and.w	r2, r2, #3
 80065c4:	0092      	lsls	r2, r2, #2
 80065c6:	4093      	lsls	r3, r2
 80065c8:	461a      	mov	r2, r3
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065d0:	4936      	ldr	r1, [pc, #216]	; (80066ac <HAL_GPIO_Init+0x310>)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	089b      	lsrs	r3, r3, #2
 80065d6:	3302      	adds	r3, #2
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80065de:	4b3d      	ldr	r3, [pc, #244]	; (80066d4 <HAL_GPIO_Init+0x338>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	43db      	mvns	r3, r3
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	4013      	ands	r3, r2
 80065ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4313      	orrs	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006602:	4a34      	ldr	r2, [pc, #208]	; (80066d4 <HAL_GPIO_Init+0x338>)
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006608:	4b32      	ldr	r3, [pc, #200]	; (80066d4 <HAL_GPIO_Init+0x338>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	43db      	mvns	r3, r3
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4013      	ands	r3, r2
 8006616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d003      	beq.n	800662c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800662c:	4a29      	ldr	r2, [pc, #164]	; (80066d4 <HAL_GPIO_Init+0x338>)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006632:	4b28      	ldr	r3, [pc, #160]	; (80066d4 <HAL_GPIO_Init+0x338>)
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	43db      	mvns	r3, r3
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4013      	ands	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006656:	4a1f      	ldr	r2, [pc, #124]	; (80066d4 <HAL_GPIO_Init+0x338>)
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800665c:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <HAL_GPIO_Init+0x338>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	43db      	mvns	r3, r3
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	4013      	ands	r3, r2
 800666a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8006678:	693a      	ldr	r2, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006680:	4a14      	ldr	r2, [pc, #80]	; (80066d4 <HAL_GPIO_Init+0x338>)
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	3301      	adds	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	f47f ae88 	bne.w	80063ac <HAL_GPIO_Init+0x10>
  }
}
 800669c:	bf00      	nop
 800669e:	371c      	adds	r7, #28
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40013800 	.word	0x40013800
 80066b0:	40020000 	.word	0x40020000
 80066b4:	40020400 	.word	0x40020400
 80066b8:	40020800 	.word	0x40020800
 80066bc:	40020c00 	.word	0x40020c00
 80066c0:	40021000 	.word	0x40021000
 80066c4:	40021400 	.word	0x40021400
 80066c8:	40021800 	.word	0x40021800
 80066cc:	40021c00 	.word	0x40021c00
 80066d0:	40022000 	.word	0x40022000
 80066d4:	40013c00 	.word	0x40013c00

080066d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	691a      	ldr	r2, [r3, #16]
 80066e8:	887b      	ldrh	r3, [r7, #2]
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066f0:	2301      	movs	r3, #1
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	e001      	b.n	80066fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	807b      	strh	r3, [r7, #2]
 8006712:	4613      	mov	r3, r2
 8006714:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006716:	787b      	ldrb	r3, [r7, #1]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800671c:	887a      	ldrh	r2, [r7, #2]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006722:	e003      	b.n	800672c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006724:	887b      	ldrh	r3, [r7, #2]
 8006726:	041a      	lsls	r2, r3, #16
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	619a      	str	r2, [r3, #24]
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	460b      	mov	r3, r1
 8006740:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	887b      	ldrh	r3, [r7, #2]
 8006748:	4013      	ands	r3, r2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d004      	beq.n	8006758 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800674e:	887b      	ldrh	r3, [r7, #2]
 8006750:	041a      	lsls	r2, r3, #16
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006756:	e002      	b.n	800675e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006758:	887a      	ldrh	r2, [r7, #2]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	619a      	str	r2, [r3, #24]
}
 800675e:	bf00      	nop
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	bc80      	pop	{r7}
 8006766:	4770      	bx	lr

08006768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d101      	bne.n	800677a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e11f      	b.n	80069ba <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d106      	bne.n	8006794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7fb fe2c 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2224      	movs	r2, #36	; 0x24
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f022 0201 	bic.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80067cc:	f001 fb20 	bl	8007e10 <HAL_RCC_GetPCLK1Freq>
 80067d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	4a7b      	ldr	r2, [pc, #492]	; (80069c4 <HAL_I2C_Init+0x25c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d807      	bhi.n	80067ec <HAL_I2C_Init+0x84>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a7a      	ldr	r2, [pc, #488]	; (80069c8 <HAL_I2C_Init+0x260>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	bf94      	ite	ls
 80067e4:	2301      	movls	r3, #1
 80067e6:	2300      	movhi	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	e006      	b.n	80067fa <HAL_I2C_Init+0x92>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	4a77      	ldr	r2, [pc, #476]	; (80069cc <HAL_I2C_Init+0x264>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	bf94      	ite	ls
 80067f4:	2301      	movls	r3, #1
 80067f6:	2300      	movhi	r3, #0
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e0db      	b.n	80069ba <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4a72      	ldr	r2, [pc, #456]	; (80069d0 <HAL_I2C_Init+0x268>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	0c9b      	lsrs	r3, r3, #18
 800680c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a64      	ldr	r2, [pc, #400]	; (80069c4 <HAL_I2C_Init+0x25c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d802      	bhi.n	800683c <HAL_I2C_Init+0xd4>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	3301      	adds	r3, #1
 800683a:	e009      	b.n	8006850 <HAL_I2C_Init+0xe8>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006842:	fb02 f303 	mul.w	r3, r2, r3
 8006846:	4a63      	ldr	r2, [pc, #396]	; (80069d4 <HAL_I2C_Init+0x26c>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	099b      	lsrs	r3, r3, #6
 800684e:	3301      	adds	r3, #1
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	430b      	orrs	r3, r1
 8006856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006862:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	4956      	ldr	r1, [pc, #344]	; (80069c4 <HAL_I2C_Init+0x25c>)
 800686c:	428b      	cmp	r3, r1
 800686e:	d80d      	bhi.n	800688c <HAL_I2C_Init+0x124>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	1e59      	subs	r1, r3, #1
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	fbb1 f3f3 	udiv	r3, r1, r3
 800687e:	3301      	adds	r3, #1
 8006880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006884:	2b04      	cmp	r3, #4
 8006886:	bf38      	it	cc
 8006888:	2304      	movcc	r3, #4
 800688a:	e04f      	b.n	800692c <HAL_I2C_Init+0x1c4>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d111      	bne.n	80068b8 <HAL_I2C_Init+0x150>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	1e58      	subs	r0, r3, #1
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	440b      	add	r3, r1
 80068a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80068a6:	3301      	adds	r3, #1
 80068a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	bf0c      	ite	eq
 80068b0:	2301      	moveq	r3, #1
 80068b2:	2300      	movne	r3, #0
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	e012      	b.n	80068de <HAL_I2C_Init+0x176>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	1e58      	subs	r0, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6859      	ldr	r1, [r3, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	0099      	lsls	r1, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80068ce:	3301      	adds	r3, #1
 80068d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <HAL_I2C_Init+0x17e>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e022      	b.n	800692c <HAL_I2C_Init+0x1c4>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10e      	bne.n	800690c <HAL_I2C_Init+0x1a4>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	1e58      	subs	r0, r3, #1
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6859      	ldr	r1, [r3, #4]
 80068f6:	460b      	mov	r3, r1
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	440b      	add	r3, r1
 80068fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006900:	3301      	adds	r3, #1
 8006902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006906:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800690a:	e00f      	b.n	800692c <HAL_I2C_Init+0x1c4>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	1e58      	subs	r0, r3, #1
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6859      	ldr	r1, [r3, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	440b      	add	r3, r1
 800691a:	0099      	lsls	r1, r3, #2
 800691c:	440b      	add	r3, r1
 800691e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006922:	3301      	adds	r3, #1
 8006924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006928:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	6809      	ldr	r1, [r1, #0]
 8006930:	4313      	orrs	r3, r2
 8006932:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	69da      	ldr	r2, [r3, #28]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	431a      	orrs	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800695a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6911      	ldr	r1, [r2, #16]
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	68d2      	ldr	r2, [r2, #12]
 8006966:	4311      	orrs	r1, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	430b      	orrs	r3, r1
 800696e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0201 	orr.w	r2, r2, #1
 800699a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	000186a0 	.word	0x000186a0
 80069c8:	001e847f 	.word	0x001e847f
 80069cc:	003d08ff 	.word	0x003d08ff
 80069d0:	431bde83 	.word	0x431bde83
 80069d4:	10624dd3 	.word	0x10624dd3

080069d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	461a      	mov	r2, r3
 80069e4:	460b      	mov	r3, r1
 80069e6:	817b      	strh	r3, [r7, #10]
 80069e8:	4613      	mov	r3, r2
 80069ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80069ec:	f7fd fdea 	bl	80045c4 <HAL_GetTick>
 80069f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	f040 80e0 	bne.w	8006bc0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	2319      	movs	r3, #25
 8006a06:	2201      	movs	r2, #1
 8006a08:	4970      	ldr	r1, [pc, #448]	; (8006bcc <HAL_I2C_Master_Transmit+0x1f4>)
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fc20 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006a16:	2302      	movs	r3, #2
 8006a18:	e0d3      	b.n	8006bc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d101      	bne.n	8006a28 <HAL_I2C_Master_Transmit+0x50>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e0cc      	b.n	8006bc2 <HAL_I2C_Master_Transmit+0x1ea>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d007      	beq.n	8006a4e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f042 0201 	orr.w	r2, r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2221      	movs	r2, #33	; 0x21
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2210      	movs	r2, #16
 8006a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	893a      	ldrh	r2, [r7, #8]
 8006a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	4a50      	ldr	r2, [pc, #320]	; (8006bd0 <HAL_I2C_Master_Transmit+0x1f8>)
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a90:	8979      	ldrh	r1, [r7, #10]
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a3a      	ldr	r2, [r7, #32]
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 fac4 	bl	8007024 <I2C_MasterRequestWrite>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e08d      	b.n	8006bc2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	695b      	ldr	r3, [r3, #20]
 8006ab0:	613b      	str	r3, [r7, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006abc:	e066      	b.n	8006b8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	6a39      	ldr	r1, [r7, #32]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fc9a 	bl	80073fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d00d      	beq.n	8006aea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d107      	bne.n	8006ae6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e06b      	b.n	8006bc2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aee:	781a      	ldrb	r2, [r3, #0]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	d11b      	bne.n	8006b60 <HAL_I2C_Master_Transmit+0x188>
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d017      	beq.n	8006b60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b34:	781a      	ldrb	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	6a39      	ldr	r1, [r7, #32]
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f000 fc8a 	bl	800747e <I2C_WaitOnBTFFlagUntilTimeout>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00d      	beq.n	8006b8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d107      	bne.n	8006b88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e01a      	b.n	8006bc2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d194      	bne.n	8006abe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e000      	b.n	8006bc2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006bc0:	2302      	movs	r3, #2
  }
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	00100002 	.word	0x00100002
 8006bd0:	ffff0000 	.word	0xffff0000

08006bd4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b088      	sub	sp, #32
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	4608      	mov	r0, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	461a      	mov	r2, r3
 8006be2:	4603      	mov	r3, r0
 8006be4:	817b      	strh	r3, [r7, #10]
 8006be6:	460b      	mov	r3, r1
 8006be8:	813b      	strh	r3, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006bee:	f7fd fce9 	bl	80045c4 <HAL_GetTick>
 8006bf2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	f040 80d9 	bne.w	8006db4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2319      	movs	r3, #25
 8006c08:	2201      	movs	r2, #1
 8006c0a:	496d      	ldr	r1, [pc, #436]	; (8006dc0 <HAL_I2C_Mem_Write+0x1ec>)
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fb1f 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e0cc      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d101      	bne.n	8006c2a <HAL_I2C_Mem_Write+0x56>
 8006c26:	2302      	movs	r3, #2
 8006c28:	e0c5      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d007      	beq.n	8006c50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2221      	movs	r2, #33	; 0x21
 8006c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2240      	movs	r2, #64	; 0x40
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a3a      	ldr	r2, [r7, #32]
 8006c7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	4a4d      	ldr	r2, [pc, #308]	; (8006dc4 <HAL_I2C_Mem_Write+0x1f0>)
 8006c90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006c92:	88f8      	ldrh	r0, [r7, #6]
 8006c94:	893a      	ldrh	r2, [r7, #8]
 8006c96:	8979      	ldrh	r1, [r7, #10]
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f000 fa40 	bl	8007128 <I2C_RequestMemoryWrite>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d052      	beq.n	8006d54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e081      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fba0 	bl	80073fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d107      	bne.n	8006cda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e06b      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce2:	781a      	ldrb	r2, [r3, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	3b01      	subs	r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	d11b      	bne.n	8006d54 <HAL_I2C_Mem_Write+0x180>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d017      	beq.n	8006d54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d34:	1c5a      	adds	r2, r3, #1
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1aa      	bne.n	8006cb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fb8c 	bl	800747e <I2C_WaitOnBTFFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00d      	beq.n	8006d88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	2b04      	cmp	r3, #4
 8006d72:	d107      	bne.n	8006d84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e016      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	00100002 	.word	0x00100002
 8006dc4:	ffff0000 	.word	0xffff0000

08006dc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b08a      	sub	sp, #40	; 0x28
 8006dcc:	af02      	add	r7, sp, #8
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	607a      	str	r2, [r7, #4]
 8006dd2:	603b      	str	r3, [r7, #0]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006dd8:	f7fd fbf4 	bl	80045c4 <HAL_GetTick>
 8006ddc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8006dde:	2301      	movs	r3, #1
 8006de0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b20      	cmp	r3, #32
 8006dec:	f040 8110 	bne.w	8007010 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	9300      	str	r3, [sp, #0]
 8006df4:	2319      	movs	r3, #25
 8006df6:	2201      	movs	r2, #1
 8006df8:	4988      	ldr	r1, [pc, #544]	; (800701c <HAL_I2C_IsDeviceReady+0x254>)
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fa28 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006e06:	2302      	movs	r3, #2
 8006e08:	e103      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_I2C_IsDeviceReady+0x50>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e0fc      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0301 	and.w	r3, r3, #1
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d007      	beq.n	8006e3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0201 	orr.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2224      	movs	r2, #36	; 0x24
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	4a70      	ldr	r2, [pc, #448]	; (8007020 <HAL_I2C_IsDeviceReady+0x258>)
 8006e60:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	f000 f9e6 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00c      	beq.n	8006ea4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d003      	beq.n	8006ea0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e9e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e0b6      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ea4:	897b      	ldrh	r3, [r7, #10]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006eb2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006eb4:	f7fd fb86 	bl	80045c4 <HAL_GetTick>
 8006eb8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	f003 0302 	and.w	r3, r3, #2
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2301      	moveq	r3, #1
 8006eca:	2300      	movne	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006ee8:	e025      	b.n	8006f36 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006eea:	f7fd fb6b 	bl	80045c4 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	683a      	ldr	r2, [r7, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d302      	bcc.n	8006f00 <HAL_I2C_IsDeviceReady+0x138>
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d103      	bne.n	8006f08 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	22a0      	movs	r2, #160	; 0xa0
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f003 0302 	and.w	r3, r3, #2
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	bf0c      	ite	eq
 8006f16:	2301      	moveq	r3, #1
 8006f18:	2300      	movne	r3, #0
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2c:	bf0c      	ite	eq
 8006f2e:	2301      	moveq	r3, #1
 8006f30:	2300      	movne	r3, #0
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8006f40:	d005      	beq.n	8006f4e <HAL_I2C_IsDeviceReady+0x186>
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d102      	bne.n	8006f4e <HAL_I2C_IsDeviceReady+0x186>
 8006f48:	7dbb      	ldrb	r3, [r7, #22]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0cd      	beq.n	8006eea <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d129      	bne.n	8006fb8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f72:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f74:	2300      	movs	r3, #0
 8006f76:	613b      	str	r3, [r7, #16]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	695b      	ldr	r3, [r3, #20]
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	613b      	str	r3, [r7, #16]
 8006f88:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2319      	movs	r3, #25
 8006f90:	2201      	movs	r2, #1
 8006f92:	4922      	ldr	r1, [pc, #136]	; (800701c <HAL_I2C_IsDeviceReady+0x254>)
 8006f94:	68f8      	ldr	r0, [r7, #12]
 8006f96:	f000 f95b 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e036      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e02c      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fc6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006fd0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2319      	movs	r3, #25
 8006fd8:	2201      	movs	r2, #1
 8006fda:	4910      	ldr	r1, [pc, #64]	; (800701c <HAL_I2C_IsDeviceReady+0x254>)
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f937 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e012      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	f4ff af33 	bcc.w	8006e62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e000      	b.n	8007012 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8007010:	2302      	movs	r3, #2
  }
}
 8007012:	4618      	mov	r0, r3
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	00100002 	.word	0x00100002
 8007020:	ffff0000 	.word	0xffff0000

08007024 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b088      	sub	sp, #32
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	460b      	mov	r3, r1
 8007032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007038:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	2b08      	cmp	r3, #8
 800703e:	d006      	beq.n	800704e <I2C_MasterRequestWrite+0x2a>
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d003      	beq.n	800704e <I2C_MasterRequestWrite+0x2a>
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800704c:	d108      	bne.n	8007060 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800705c:	601a      	str	r2, [r3, #0]
 800705e:	e00b      	b.n	8007078 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007064:	2b12      	cmp	r3, #18
 8007066:	d107      	bne.n	8007078 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f8e3 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e035      	b.n	8007116 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070b2:	d108      	bne.n	80070c6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070b4:	897b      	ldrh	r3, [r7, #10]
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	461a      	mov	r2, r3
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070c2:	611a      	str	r2, [r3, #16]
 80070c4:	e01b      	b.n	80070fe <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070c6:	897b      	ldrh	r3, [r7, #10]
 80070c8:	11db      	asrs	r3, r3, #7
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 0306 	and.w	r3, r3, #6
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	f063 030f 	orn	r3, r3, #15
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	490f      	ldr	r1, [pc, #60]	; (8007120 <I2C_MasterRequestWrite+0xfc>)
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 f90a 	bl	80072fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80070f0:	2301      	movs	r3, #1
 80070f2:	e010      	b.n	8007116 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80070f4:	897b      	ldrh	r3, [r7, #10]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	4908      	ldr	r1, [pc, #32]	; (8007124 <I2C_MasterRequestWrite+0x100>)
 8007104:	68f8      	ldr	r0, [r7, #12]
 8007106:	f000 f8fa 	bl	80072fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	e000      	b.n	8007116 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8007114:	2300      	movs	r3, #0
}
 8007116:	4618      	mov	r0, r3
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	00010008 	.word	0x00010008
 8007124:	00010002 	.word	0x00010002

08007128 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b088      	sub	sp, #32
 800712c:	af02      	add	r7, sp, #8
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	4608      	mov	r0, r1
 8007132:	4611      	mov	r1, r2
 8007134:	461a      	mov	r2, r3
 8007136:	4603      	mov	r3, r0
 8007138:	817b      	strh	r3, [r7, #10]
 800713a:	460b      	mov	r3, r1
 800713c:	813b      	strh	r3, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007150:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	2200      	movs	r2, #0
 800715a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f876 	bl	8007250 <I2C_WaitOnFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800717e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e05f      	b.n	8007244 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007184:	897b      	ldrh	r3, [r7, #10]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007192:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007196:	6a3a      	ldr	r2, [r7, #32]
 8007198:	492c      	ldr	r1, [pc, #176]	; (800724c <I2C_RequestMemoryWrite+0x124>)
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	f000 f8af 	bl	80072fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e04c      	b.n	8007244 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	617b      	str	r3, [r7, #20]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	617b      	str	r3, [r7, #20]
 80071be:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c2:	6a39      	ldr	r1, [r7, #32]
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f000 f919 	bl	80073fc <I2C_WaitOnTXEFlagUntilTimeout>
 80071ca:	4603      	mov	r3, r0
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00d      	beq.n	80071ec <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d4:	2b04      	cmp	r3, #4
 80071d6:	d107      	bne.n	80071e8 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e02b      	b.n	8007244 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d105      	bne.n	80071fe <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071f2:	893b      	ldrh	r3, [r7, #8]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	611a      	str	r2, [r3, #16]
 80071fc:	e021      	b.n	8007242 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071fe:	893b      	ldrh	r3, [r7, #8]
 8007200:	0a1b      	lsrs	r3, r3, #8
 8007202:	b29b      	uxth	r3, r3
 8007204:	b2da      	uxtb	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800720c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720e:	6a39      	ldr	r1, [r7, #32]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f8f3 	bl	80073fc <I2C_WaitOnTXEFlagUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00d      	beq.n	8007238 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007220:	2b04      	cmp	r3, #4
 8007222:	d107      	bne.n	8007234 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007232:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e005      	b.n	8007244 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007238:	893b      	ldrh	r3, [r7, #8]
 800723a:	b2da      	uxtb	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	00010002 	.word	0x00010002

08007250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	603b      	str	r3, [r7, #0]
 800725c:	4613      	mov	r3, r2
 800725e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007260:	e025      	b.n	80072ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007268:	d021      	beq.n	80072ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7fd f9ab 	bl	80045c4 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d116      	bne.n	80072ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2220      	movs	r2, #32
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	f043 0220 	orr.w	r2, r3, #32
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e023      	b.n	80072f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	0c1b      	lsrs	r3, r3, #16
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d10d      	bne.n	80072d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	43da      	mvns	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	e00c      	b.n	80072ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	43da      	mvns	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4013      	ands	r3, r2
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bf0c      	ite	eq
 80072e6:	2301      	moveq	r3, #1
 80072e8:	2300      	movne	r3, #0
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	461a      	mov	r2, r3
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d0b6      	beq.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	60f8      	str	r0, [r7, #12]
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800730c:	e051      	b.n	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800731c:	d123      	bne.n	8007366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007336:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f043 0204 	orr.w	r2, r3, #4
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e046      	b.n	80073f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736c:	d021      	beq.n	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800736e:	f7fd f929 	bl	80045c4 <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	429a      	cmp	r2, r3
 800737c:	d302      	bcc.n	8007384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d116      	bne.n	80073b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2200      	movs	r2, #0
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2220      	movs	r2, #32
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	f043 0220 	orr.w	r2, r3, #32
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e020      	b.n	80073f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d10c      	bne.n	80073d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	43da      	mvns	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	4013      	ands	r3, r2
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bf14      	ite	ne
 80073ce:	2301      	movne	r3, #1
 80073d0:	2300      	moveq	r3, #0
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	e00b      	b.n	80073ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	43da      	mvns	r2, r3
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	4013      	ands	r3, r2
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bf14      	ite	ne
 80073e8:	2301      	movne	r3, #1
 80073ea:	2300      	moveq	r3, #0
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d18d      	bne.n	800730e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007408:	e02d      	b.n	8007466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f878 	bl	8007500 <I2C_IsAcknowledgeFailed>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007416:	2301      	movs	r3, #1
 8007418:	e02d      	b.n	8007476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d021      	beq.n	8007466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007422:	f7fd f8cf 	bl	80045c4 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	429a      	cmp	r2, r3
 8007430:	d302      	bcc.n	8007438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d116      	bne.n	8007466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2220      	movs	r2, #32
 8007442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	f043 0220 	orr.w	r2, r3, #32
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e007      	b.n	8007476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	695b      	ldr	r3, [r3, #20]
 800746c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d1ca      	bne.n	800740a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800748a:	e02d      	b.n	80074e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f837 	bl	8007500 <I2C_IsAcknowledgeFailed>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	e02d      	b.n	80074f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a2:	d021      	beq.n	80074e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a4:	f7fd f88e 	bl	80045c4 <HAL_GetTick>
 80074a8:	4602      	mov	r2, r0
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d302      	bcc.n	80074ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d116      	bne.n	80074e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	f043 0220 	orr.w	r2, r3, #32
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e007      	b.n	80074f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	f003 0304 	and.w	r3, r3, #4
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d1ca      	bne.n	800748c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007516:	d11b      	bne.n	8007550 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007520:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2220      	movs	r2, #32
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753c:	f043 0204 	orr.w	r2, r3, #4
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e000      	b.n	8007552 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d101      	bne.n	800756e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e02b      	b.n	80075c6 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007576:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f245 5255 	movw	r2, #21845	; 0x5555
 8007580:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6852      	ldr	r2, [r2, #4]
 800758a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6892      	ldr	r2, [r2, #8]
 8007594:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007596:	f7fd f815 	bl	80045c4 <HAL_GetTick>
 800759a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != 0x00u)
 800759c:	e008      	b.n	80075b0 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800759e:	f7fd f811 	bl	80045c4 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	2b30      	cmp	r3, #48	; 0x30
 80075aa:	d901      	bls.n	80075b0 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e00a      	b.n	80075c6 <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != 0x00u)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d1f1      	bne.n	800759e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80075c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80075de:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr

080075ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b090      	sub	sp, #64	; 0x40
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e253      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0301 	and.w	r3, r3, #1
 8007606:	2b00      	cmp	r3, #0
 8007608:	d050      	beq.n	80076ac <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800760a:	4ba3      	ldr	r3, [pc, #652]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 030c 	and.w	r3, r3, #12
 8007612:	2b04      	cmp	r3, #4
 8007614:	d00c      	beq.n	8007630 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007616:	4ba0      	ldr	r3, [pc, #640]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800761e:	2b08      	cmp	r3, #8
 8007620:	d112      	bne.n	8007648 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007622:	4b9d      	ldr	r3, [pc, #628]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800762a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800762e:	d10b      	bne.n	8007648 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007630:	4b99      	ldr	r3, [pc, #612]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d036      	beq.n	80076aa <HAL_RCC_OscConfig+0xbe>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d132      	bne.n	80076aa <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e22e      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	4b93      	ldr	r3, [pc, #588]	; (800789c <HAL_RCC_OscConfig+0x2b0>)
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d013      	beq.n	8007682 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800765a:	f7fc ffb3 	bl	80045c4 <HAL_GetTick>
 800765e:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007660:	e008      	b.n	8007674 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007662:	f7fc ffaf 	bl	80045c4 <HAL_GetTick>
 8007666:	4602      	mov	r2, r0
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b64      	cmp	r3, #100	; 0x64
 800766e:	d901      	bls.n	8007674 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e218      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007674:	4b88      	ldr	r3, [pc, #544]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f0      	beq.n	8007662 <HAL_RCC_OscConfig+0x76>
 8007680:	e014      	b.n	80076ac <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007682:	f7fc ff9f 	bl	80045c4 <HAL_GetTick>
 8007686:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800768a:	f7fc ff9b 	bl	80045c4 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b64      	cmp	r3, #100	; 0x64
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e204      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800769c:	4b7e      	ldr	r3, [pc, #504]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f0      	bne.n	800768a <HAL_RCC_OscConfig+0x9e>
 80076a8:	e000      	b.n	80076ac <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d077      	beq.n	80077a8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076b8:	4b77      	ldr	r3, [pc, #476]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	f003 030c 	and.w	r3, r3, #12
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076c4:	4b74      	ldr	r3, [pc, #464]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d126      	bne.n	800771e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076d0:	4b71      	ldr	r3, [pc, #452]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d120      	bne.n	800771e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076dc:	4b6e      	ldr	r3, [pc, #440]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0302 	and.w	r3, r3, #2
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d005      	beq.n	80076f4 <HAL_RCC_OscConfig+0x108>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e1d8      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f4:	4b68      	ldr	r3, [pc, #416]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	21f8      	movs	r1, #248	; 0xf8
 8007702:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007706:	fa91 f1a1 	rbit	r1, r1
 800770a:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 800770c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800770e:	fab1 f181 	clz	r1, r1
 8007712:	b2c9      	uxtb	r1, r1
 8007714:	408b      	lsls	r3, r1
 8007716:	4960      	ldr	r1, [pc, #384]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007718:	4313      	orrs	r3, r2
 800771a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800771c:	e044      	b.n	80077a8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d02a      	beq.n	800777c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007726:	4b5e      	ldr	r3, [pc, #376]	; (80078a0 <HAL_RCC_OscConfig+0x2b4>)
 8007728:	2201      	movs	r2, #1
 800772a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800772c:	f7fc ff4a 	bl	80045c4 <HAL_GetTick>
 8007730:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007732:	e008      	b.n	8007746 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007734:	f7fc ff46 	bl	80045c4 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	1ad3      	subs	r3, r2, r3
 800773e:	2b02      	cmp	r3, #2
 8007740:	d901      	bls.n	8007746 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007742:	2303      	movs	r3, #3
 8007744:	e1af      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007746:	4b54      	ldr	r3, [pc, #336]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	2b00      	cmp	r3, #0
 8007750:	d0f0      	beq.n	8007734 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007752:	4b51      	ldr	r3, [pc, #324]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	21f8      	movs	r1, #248	; 0xf8
 8007760:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007764:	fa91 f1a1 	rbit	r1, r1
 8007768:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800776a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800776c:	fab1 f181 	clz	r1, r1
 8007770:	b2c9      	uxtb	r1, r1
 8007772:	408b      	lsls	r3, r1
 8007774:	4948      	ldr	r1, [pc, #288]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007776:	4313      	orrs	r3, r2
 8007778:	600b      	str	r3, [r1, #0]
 800777a:	e015      	b.n	80077a8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800777c:	4b48      	ldr	r3, [pc, #288]	; (80078a0 <HAL_RCC_OscConfig+0x2b4>)
 800777e:	2200      	movs	r2, #0
 8007780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007782:	f7fc ff1f 	bl	80045c4 <HAL_GetTick>
 8007786:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007788:	e008      	b.n	800779c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800778a:	f7fc ff1b 	bl	80045c4 <HAL_GetTick>
 800778e:	4602      	mov	r2, r0
 8007790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007792:	1ad3      	subs	r3, r2, r3
 8007794:	2b02      	cmp	r3, #2
 8007796:	d901      	bls.n	800779c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8007798:	2303      	movs	r3, #3
 800779a:	e184      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800779c:	4b3e      	ldr	r3, [pc, #248]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0302 	and.w	r3, r3, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1f0      	bne.n	800778a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d030      	beq.n	8007816 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	695b      	ldr	r3, [r3, #20]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d016      	beq.n	80077ea <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077bc:	4b39      	ldr	r3, [pc, #228]	; (80078a4 <HAL_RCC_OscConfig+0x2b8>)
 80077be:	2201      	movs	r2, #1
 80077c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077c2:	f7fc feff 	bl	80045c4 <HAL_GetTick>
 80077c6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077c8:	e008      	b.n	80077dc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077ca:	f7fc fefb 	bl	80045c4 <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d901      	bls.n	80077dc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e164      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077dc:	4b2e      	ldr	r3, [pc, #184]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 80077de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d0f0      	beq.n	80077ca <HAL_RCC_OscConfig+0x1de>
 80077e8:	e015      	b.n	8007816 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ea:	4b2e      	ldr	r3, [pc, #184]	; (80078a4 <HAL_RCC_OscConfig+0x2b8>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077f0:	f7fc fee8 	bl	80045c4 <HAL_GetTick>
 80077f4:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077f6:	e008      	b.n	800780a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077f8:	f7fc fee4 	bl	80045c4 <HAL_GetTick>
 80077fc:	4602      	mov	r2, r0
 80077fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007800:	1ad3      	subs	r3, r2, r3
 8007802:	2b02      	cmp	r3, #2
 8007804:	d901      	bls.n	800780a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e14d      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800780a:	4b23      	ldr	r3, [pc, #140]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800780c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1f0      	bne.n	80077f8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0304 	and.w	r3, r3, #4
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 8088 	beq.w	8007934 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007824:	2300      	movs	r3, #0
 8007826:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800782a:	4b1b      	ldr	r3, [pc, #108]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d110      	bne.n	8007858 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]
 800783a:	4b17      	ldr	r3, [pc, #92]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	4a16      	ldr	r2, [pc, #88]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	; 0x40
 8007846:	4b14      	ldr	r3, [pc, #80]	; (8007898 <HAL_RCC_OscConfig+0x2ac>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784e:	60bb      	str	r3, [r7, #8]
 8007850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007852:	2301      	movs	r3, #1
 8007854:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007858:	4b13      	ldr	r3, [pc, #76]	; (80078a8 <HAL_RCC_OscConfig+0x2bc>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a12      	ldr	r2, [pc, #72]	; (80078a8 <HAL_RCC_OscConfig+0x2bc>)
 800785e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007862:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007864:	4b10      	ldr	r3, [pc, #64]	; (80078a8 <HAL_RCC_OscConfig+0x2bc>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d123      	bne.n	80078b8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007870:	4b0d      	ldr	r3, [pc, #52]	; (80078a8 <HAL_RCC_OscConfig+0x2bc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a0c      	ldr	r2, [pc, #48]	; (80078a8 <HAL_RCC_OscConfig+0x2bc>)
 8007876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800787a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800787c:	f7fc fea2 	bl	80045c4 <HAL_GetTick>
 8007880:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007882:	e013      	b.n	80078ac <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007884:	f7fc fe9e 	bl	80045c4 <HAL_GetTick>
 8007888:	4602      	mov	r2, r0
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	2b02      	cmp	r3, #2
 8007890:	d90c      	bls.n	80078ac <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8007892:	2303      	movs	r3, #3
 8007894:	e107      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
 8007896:	bf00      	nop
 8007898:	40023800 	.word	0x40023800
 800789c:	40023802 	.word	0x40023802
 80078a0:	42470000 	.word	0x42470000
 80078a4:	42470e80 	.word	0x42470e80
 80078a8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ac:	4b80      	ldr	r3, [pc, #512]	; (8007ab0 <HAL_RCC_OscConfig+0x4c4>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0e5      	beq.n	8007884 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	4b7d      	ldr	r3, [pc, #500]	; (8007ab4 <HAL_RCC_OscConfig+0x4c8>)
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d015      	beq.n	80078f6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078ca:	f7fc fe7b 	bl	80045c4 <HAL_GetTick>
 80078ce:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078d0:	e00a      	b.n	80078e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d2:	f7fc fe77 	bl	80045c4 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d901      	bls.n	80078e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e0de      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e8:	4b73      	ldr	r3, [pc, #460]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 80078ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ec:	f003 0302 	and.w	r3, r3, #2
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0ee      	beq.n	80078d2 <HAL_RCC_OscConfig+0x2e6>
 80078f4:	e014      	b.n	8007920 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078f6:	f7fc fe65 	bl	80045c4 <HAL_GetTick>
 80078fa:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078fc:	e00a      	b.n	8007914 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078fe:	f7fc fe61 	bl	80045c4 <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f241 3288 	movw	r2, #5000	; 0x1388
 800790c:	4293      	cmp	r3, r2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e0c8      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007914:	4b68      	ldr	r3, [pc, #416]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1ee      	bne.n	80078fe <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007920:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007924:	2b01      	cmp	r3, #1
 8007926:	d105      	bne.n	8007934 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007928:	4b63      	ldr	r3, [pc, #396]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 800792a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792c:	4a62      	ldr	r2, [pc, #392]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 800792e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 80b3 	beq.w	8007aa4 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800793e:	4b5e      	ldr	r3, [pc, #376]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b08      	cmp	r3, #8
 8007948:	d07d      	beq.n	8007a46 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b02      	cmp	r3, #2
 8007950:	d162      	bne.n	8007a18 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007952:	4b5a      	ldr	r3, [pc, #360]	; (8007abc <HAL_RCC_OscConfig+0x4d0>)
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007958:	f7fc fe34 	bl	80045c4 <HAL_GetTick>
 800795c:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007960:	f7fc fe30 	bl	80045c4 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b64      	cmp	r3, #100	; 0x64
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e099      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007972:	4b51      	ldr	r3, [pc, #324]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d1f0      	bne.n	8007960 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8007990:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007992:	6939      	ldr	r1, [r7, #16]
 8007994:	fa91 f1a1 	rbit	r1, r1
 8007998:	60f9      	str	r1, [r7, #12]
  return result;
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	fab1 f181 	clz	r1, r1
 80079a0:	b2c9      	uxtb	r1, r1
 80079a2:	408b      	lsls	r3, r1
 80079a4:	431a      	orrs	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079aa:	085b      	lsrs	r3, r3, #1
 80079ac:	3b01      	subs	r3, #1
 80079ae:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 80079b2:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079b4:	69b9      	ldr	r1, [r7, #24]
 80079b6:	fa91 f1a1 	rbit	r1, r1
 80079ba:	6179      	str	r1, [r7, #20]
  return result;
 80079bc:	6979      	ldr	r1, [r7, #20]
 80079be:	fab1 f181 	clz	r1, r1
 80079c2:	b2c9      	uxtb	r1, r1
 80079c4:	408b      	lsls	r3, r1
 80079c6:	431a      	orrs	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80079d0:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079d2:	6a39      	ldr	r1, [r7, #32]
 80079d4:	fa91 f1a1 	rbit	r1, r1
 80079d8:	61f9      	str	r1, [r7, #28]
  return result;
 80079da:	69f9      	ldr	r1, [r7, #28]
 80079dc:	fab1 f181 	clz	r1, r1
 80079e0:	b2c9      	uxtb	r1, r1
 80079e2:	408b      	lsls	r3, r1
 80079e4:	4934      	ldr	r1, [pc, #208]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079ea:	4b34      	ldr	r3, [pc, #208]	; (8007abc <HAL_RCC_OscConfig+0x4d0>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f0:	f7fc fde8 	bl	80045c4 <HAL_GetTick>
 80079f4:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079f8:	f7fc fde4 	bl	80045c4 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b64      	cmp	r3, #100	; 0x64
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e04d      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a0a:	4b2b      	ldr	r3, [pc, #172]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0x40c>
 8007a16:	e045      	b.n	8007aa4 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a18:	4b28      	ldr	r3, [pc, #160]	; (8007abc <HAL_RCC_OscConfig+0x4d0>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1e:	f7fc fdd1 	bl	80045c4 <HAL_GetTick>
 8007a22:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a24:	e008      	b.n	8007a38 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a26:	f7fc fdcd 	bl	80045c4 <HAL_GetTick>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	2b64      	cmp	r3, #100	; 0x64
 8007a32:	d901      	bls.n	8007a38 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e036      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a38:	4b1f      	ldr	r3, [pc, #124]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d1f0      	bne.n	8007a26 <HAL_RCC_OscConfig+0x43a>
 8007a44:	e02e      	b.n	8007aa4 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e029      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8007a52:	4b19      	ldr	r3, [pc, #100]	; (8007ab8 <HAL_RCC_OscConfig+0x4cc>)
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d11c      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a68:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d115      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	099b      	lsrs	r3, r3, #6
 8007a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d10d      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d106      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d001      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e000      	b.n	8007aa6 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3740      	adds	r7, #64	; 0x40
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	40007000 	.word	0x40007000
 8007ab4:	40023870 	.word	0x40023870
 8007ab8:	40023800 	.word	0x40023800
 8007abc:	42470060 	.word	0x42470060

08007ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e0d2      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ad4:	4b6b      	ldr	r3, [pc, #428]	; (8007c84 <HAL_RCC_ClockConfig+0x1c4>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 030f 	and.w	r3, r3, #15
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d90c      	bls.n	8007afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ae2:	4b68      	ldr	r3, [pc, #416]	; (8007c84 <HAL_RCC_ClockConfig+0x1c4>)
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	b2d2      	uxtb	r2, r2
 8007ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aea:	4b66      	ldr	r3, [pc, #408]	; (8007c84 <HAL_RCC_ClockConfig+0x1c4>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 030f 	and.w	r3, r3, #15
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d001      	beq.n	8007afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e0be      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d020      	beq.n	8007b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d005      	beq.n	8007b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b14:	4b5c      	ldr	r3, [pc, #368]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	4a5b      	ldr	r2, [pc, #364]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d005      	beq.n	8007b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8007b2c:	4b56      	ldr	r3, [pc, #344]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	4a55      	ldr	r2, [pc, #340]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b38:	4b53      	ldr	r3, [pc, #332]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4950      	ldr	r1, [pc, #320]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d040      	beq.n	8007bd8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d107      	bne.n	8007b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5e:	4b4a      	ldr	r3, [pc, #296]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d115      	bne.n	8007b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e085      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d107      	bne.n	8007b86 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b76:	4b44      	ldr	r3, [pc, #272]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d109      	bne.n	8007b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e079      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b86:	4b40      	ldr	r3, [pc, #256]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d101      	bne.n	8007b96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e071      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b96:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	f023 0203 	bic.w	r2, r3, #3
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	4939      	ldr	r1, [pc, #228]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ba8:	f7fc fd0c 	bl	80045c4 <HAL_GetTick>
 8007bac:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bae:	e00a      	b.n	8007bc6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb0:	f7fc fd08 	bl	80045c4 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d901      	bls.n	8007bc6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e059      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc6:	4b30      	ldr	r3, [pc, #192]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 020c 	and.w	r2, r3, #12
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d1eb      	bne.n	8007bb0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bd8:	4b2a      	ldr	r3, [pc, #168]	; (8007c84 <HAL_RCC_ClockConfig+0x1c4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	429a      	cmp	r2, r3
 8007be4:	d20c      	bcs.n	8007c00 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007be6:	4b27      	ldr	r3, [pc, #156]	; (8007c84 <HAL_RCC_ClockConfig+0x1c4>)
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bee:	4b25      	ldr	r3, [pc, #148]	; (8007c84 <HAL_RCC_ClockConfig+0x1c4>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	683a      	ldr	r2, [r7, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d001      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e03c      	b.n	8007c7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d008      	beq.n	8007c1e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c0c:	4b1e      	ldr	r3, [pc, #120]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	491b      	ldr	r1, [pc, #108]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0308 	and.w	r3, r3, #8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d009      	beq.n	8007c3e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c2a:	4b17      	ldr	r3, [pc, #92]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	00db      	lsls	r3, r3, #3
 8007c38:	4913      	ldr	r1, [pc, #76]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8007c3e:	f000 f82b 	bl	8007c98 <HAL_RCC_GetSysClockFreq>
 8007c42:	4601      	mov	r1, r0
 8007c44:	4b10      	ldr	r3, [pc, #64]	; (8007c88 <HAL_RCC_ClockConfig+0x1c8>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c4c:	22f0      	movs	r2, #240	; 0xf0
 8007c4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	fa92 f2a2 	rbit	r2, r2
 8007c56:	60fa      	str	r2, [r7, #12]
  return result;
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	fab2 f282 	clz	r2, r2
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	40d3      	lsrs	r3, r2
 8007c62:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <HAL_RCC_ClockConfig+0x1cc>)
 8007c64:	5cd3      	ldrb	r3, [r2, r3]
 8007c66:	fa21 f303 	lsr.w	r3, r1, r3
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <HAL_RCC_ClockConfig+0x1d0>)
 8007c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c6e:	4b09      	ldr	r3, [pc, #36]	; (8007c94 <HAL_RCC_ClockConfig+0x1d4>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fc fc64 	bl	8004540 <HAL_InitTick>

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	40023c00 	.word	0x40023c00
 8007c88:	40023800 	.word	0x40023800
 8007c8c:	0800c360 	.word	0x0800c360
 8007c90:	20000010 	.word	0x20000010
 8007c94:	20000014 	.word	0x20000014

08007c98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	607b      	str	r3, [r7, #4]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cae:	4b50      	ldr	r3, [pc, #320]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 030c 	and.w	r3, r3, #12
 8007cb6:	2b04      	cmp	r3, #4
 8007cb8:	d007      	beq.n	8007cca <HAL_RCC_GetSysClockFreq+0x32>
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d008      	beq.n	8007cd0 <HAL_RCC_GetSysClockFreq+0x38>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f040 808d 	bne.w	8007dde <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cc4:	4b4b      	ldr	r3, [pc, #300]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007cc6:	60bb      	str	r3, [r7, #8]
       break;
 8007cc8:	e08c      	b.n	8007de4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cca:	4b4b      	ldr	r3, [pc, #300]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007ccc:	60bb      	str	r3, [r7, #8]
      break;
 8007cce:	e089      	b.n	8007de4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cd0:	4b47      	ldr	r3, [pc, #284]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cda:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d023      	beq.n	8007d2e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce6:	4b42      	ldr	r3, [pc, #264]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	f04f 0400 	mov.w	r4, #0
 8007cf0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007cf4:	f04f 0200 	mov.w	r2, #0
 8007cf8:	ea03 0501 	and.w	r5, r3, r1
 8007cfc:	ea04 0602 	and.w	r6, r4, r2
 8007d00:	4a3d      	ldr	r2, [pc, #244]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d02:	fb02 f106 	mul.w	r1, r2, r6
 8007d06:	2200      	movs	r2, #0
 8007d08:	fb02 f205 	mul.w	r2, r2, r5
 8007d0c:	440a      	add	r2, r1
 8007d0e:	493a      	ldr	r1, [pc, #232]	; (8007df8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d10:	fba5 0101 	umull	r0, r1, r5, r1
 8007d14:	1853      	adds	r3, r2, r1
 8007d16:	4619      	mov	r1, r3
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f04f 0400 	mov.w	r4, #0
 8007d1e:	461a      	mov	r2, r3
 8007d20:	4623      	mov	r3, r4
 8007d22:	f7f9 fa31 	bl	8001188 <__aeabi_uldivmod>
 8007d26:	4603      	mov	r3, r0
 8007d28:	460c      	mov	r4, r1
 8007d2a:	60fb      	str	r3, [r7, #12]
 8007d2c:	e049      	b.n	8007dc2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d2e:	4b30      	ldr	r3, [pc, #192]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	099b      	lsrs	r3, r3, #6
 8007d34:	f04f 0400 	mov.w	r4, #0
 8007d38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d3c:	f04f 0200 	mov.w	r2, #0
 8007d40:	ea03 0501 	and.w	r5, r3, r1
 8007d44:	ea04 0602 	and.w	r6, r4, r2
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4632      	mov	r2, r6
 8007d4c:	f04f 0300 	mov.w	r3, #0
 8007d50:	f04f 0400 	mov.w	r4, #0
 8007d54:	0154      	lsls	r4, r2, #5
 8007d56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007d5a:	014b      	lsls	r3, r1, #5
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4622      	mov	r2, r4
 8007d60:	1b49      	subs	r1, r1, r5
 8007d62:	eb62 0206 	sbc.w	r2, r2, r6
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	0194      	lsls	r4, r2, #6
 8007d70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007d74:	018b      	lsls	r3, r1, #6
 8007d76:	1a5b      	subs	r3, r3, r1
 8007d78:	eb64 0402 	sbc.w	r4, r4, r2
 8007d7c:	f04f 0100 	mov.w	r1, #0
 8007d80:	f04f 0200 	mov.w	r2, #0
 8007d84:	00e2      	lsls	r2, r4, #3
 8007d86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007d8a:	00d9      	lsls	r1, r3, #3
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4614      	mov	r4, r2
 8007d90:	195b      	adds	r3, r3, r5
 8007d92:	eb44 0406 	adc.w	r4, r4, r6
 8007d96:	f04f 0100 	mov.w	r1, #0
 8007d9a:	f04f 0200 	mov.w	r2, #0
 8007d9e:	02a2      	lsls	r2, r4, #10
 8007da0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007da4:	0299      	lsls	r1, r3, #10
 8007da6:	460b      	mov	r3, r1
 8007da8:	4614      	mov	r4, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	4621      	mov	r1, r4
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f04f 0400 	mov.w	r4, #0
 8007db4:	461a      	mov	r2, r3
 8007db6:	4623      	mov	r3, r4
 8007db8:	f7f9 f9e6 	bl	8001188 <__aeabi_uldivmod>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	0c1b      	lsrs	r3, r3, #16
 8007dc8:	f003 0303 	and.w	r3, r3, #3
 8007dcc:	3301      	adds	r3, #1
 8007dce:	005b      	lsls	r3, r3, #1
 8007dd0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dda:	60bb      	str	r3, [r7, #8]
      break;
 8007ddc:	e002      	b.n	8007de4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007de0:	60bb      	str	r3, [r7, #8]
      break;
 8007de2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007de4:	68bb      	ldr	r3, [r7, #8]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3714      	adds	r7, #20
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40023800 	.word	0x40023800
 8007df4:	00f42400 	.word	0x00f42400
 8007df8:	017d7840 	.word	0x017d7840

08007dfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <HAL_RCC_GetHCLKFreq+0x10>)
 8007e02:	681b      	ldr	r3, [r3, #0]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bc80      	pop	{r7}
 8007e0a:	4770      	bx	lr
 8007e0c:	20000010 	.word	0x20000010

08007e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b082      	sub	sp, #8
 8007e14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8007e16:	f7ff fff1 	bl	8007dfc <HAL_RCC_GetHCLKFreq>
 8007e1a:	4601      	mov	r1, r0
 8007e1c:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007e24:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8007e28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	fa92 f2a2 	rbit	r2, r2
 8007e30:	603a      	str	r2, [r7, #0]
  return result;
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	fab2 f282 	clz	r2, r2
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	40d3      	lsrs	r3, r2
 8007e3c:	4a04      	ldr	r2, [pc, #16]	; (8007e50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007e3e:	5cd3      	ldrb	r3, [r2, r3]
 8007e40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	0800c370 	.word	0x0800c370

08007e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8007e5a:	f7ff ffcf 	bl	8007dfc <HAL_RCC_GetHCLKFreq>
 8007e5e:	4601      	mov	r1, r0
 8007e60:	4b0b      	ldr	r3, [pc, #44]	; (8007e90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007e68:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8007e6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	fa92 f2a2 	rbit	r2, r2
 8007e74:	603a      	str	r2, [r7, #0]
  return result;
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	fab2 f282 	clz	r2, r2
 8007e7c:	b2d2      	uxtb	r2, r2
 8007e7e:	40d3      	lsrs	r3, r2
 8007e80:	4a04      	ldr	r2, [pc, #16]	; (8007e94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8007e82:	5cd3      	ldrb	r3, [r2, r3]
 8007e84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3708      	adds	r7, #8
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	40023800 	.word	0x40023800
 8007e94:	0800c370 	.word	0x0800c370

08007e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e01d      	b.n	8007ee6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7fc f95e 	bl	8004180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	f000 fb74 	bl	80085c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f003 0307 	and.w	r3, r3, #7
 8007f08:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2b06      	cmp	r3, #6
 8007f0e:	d007      	beq.n	8007f20 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f042 0201 	orr.w	r2, r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bc80      	pop	{r7}
 8007f32:	4770      	bx	lr

08007f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0201 	orr.w	r2, r2, #1
 8007f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b06      	cmp	r3, #6
 8007f5c:	d007      	beq.n	8007f6e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f042 0201 	orr.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bc80      	pop	{r7}
 8007f78:	4770      	bx	lr

08007f7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b082      	sub	sp, #8
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e01d      	b.n	8007fc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d106      	bne.n	8007fa6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 f815 	bl	8007fd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2202      	movs	r2, #2
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3304      	adds	r3, #4
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	4610      	mov	r0, r2
 8007fba:	f000 fb03 	bl	80085c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bc80      	pop	{r7}
 8007fe0:	4770      	bx	lr
	...

08007fe4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fdc4 	bl	8008b84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a15      	ldr	r2, [pc, #84]	; (8008058 <HAL_TIM_PWM_Start+0x74>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d004      	beq.n	8008010 <HAL_TIM_PWM_Start+0x2c>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a14      	ldr	r2, [pc, #80]	; (800805c <HAL_TIM_PWM_Start+0x78>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d101      	bne.n	8008014 <HAL_TIM_PWM_Start+0x30>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_TIM_PWM_Start+0x32>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d007      	beq.n	800802a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008028:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	f003 0307 	and.w	r3, r3, #7
 8008034:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b06      	cmp	r3, #6
 800803a:	d007      	beq.n	800804c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0201 	orr.w	r2, r2, #1
 800804a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	40010000 	.word	0x40010000
 800805c:	40010400 	.word	0x40010400

08008060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b02      	cmp	r3, #2
 8008074:	d122      	bne.n	80080bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f003 0302 	and.w	r3, r3, #2
 8008080:	2b02      	cmp	r3, #2
 8008082:	d11b      	bne.n	80080bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f06f 0202 	mvn.w	r2, #2
 800808c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	f003 0303 	and.w	r3, r3, #3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa73 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 80080a8:	e005      	b.n	80080b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 fa66 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa75 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d122      	bne.n	8008110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d11b      	bne.n	8008110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f06f 0204 	mvn.w	r2, #4
 80080e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fa49 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 80080fc:	e005      	b.n	800810a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fa3c 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fa4b 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	2b08      	cmp	r3, #8
 800811c:	d122      	bne.n	8008164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b08      	cmp	r3, #8
 800812a:	d11b      	bne.n	8008164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0208 	mvn.w	r2, #8
 8008134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2204      	movs	r2, #4
 800813a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	69db      	ldr	r3, [r3, #28]
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fa1f 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 8008150:	e005      	b.n	800815e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa12 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fa21 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b10      	cmp	r3, #16
 8008170:	d122      	bne.n	80081b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b10      	cmp	r3, #16
 800817e:	d11b      	bne.n	80081b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f06f 0210 	mvn.w	r2, #16
 8008188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2208      	movs	r2, #8
 800818e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800819a:	2b00      	cmp	r3, #0
 800819c:	d003      	beq.n	80081a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f9f5 	bl	800858e <HAL_TIM_IC_CaptureCallback>
 80081a4:	e005      	b.n	80081b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f9e8 	bl	800857c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 f9f7 	bl	80085a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d10e      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d107      	bne.n	80081e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f06f 0201 	mvn.w	r2, #1
 80081dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f9c3 	bl	800856a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	691b      	ldr	r3, [r3, #16]
 80081ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ee:	2b80      	cmp	r3, #128	; 0x80
 80081f0:	d10e      	bne.n	8008210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fc:	2b80      	cmp	r3, #128	; 0x80
 80081fe:	d107      	bne.n	8008210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fd7c 	bl	8008d08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d10e      	bne.n	800823c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008228:	2b40      	cmp	r3, #64	; 0x40
 800822a:	d107      	bne.n	800823c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f9bb 	bl	80085b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b20      	cmp	r3, #32
 8008248:	d10e      	bne.n	8008268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	f003 0320 	and.w	r3, r3, #32
 8008254:	2b20      	cmp	r3, #32
 8008256:	d107      	bne.n	8008268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f06f 0220 	mvn.w	r2, #32
 8008260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fd47 	bl	8008cf6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008282:	2b01      	cmp	r3, #1
 8008284:	d101      	bne.n	800828a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008286:	2302      	movs	r3, #2
 8008288:	e0b4      	b.n	80083f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2202      	movs	r2, #2
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2b0c      	cmp	r3, #12
 800829e:	f200 809f 	bhi.w	80083e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082dd 	.word	0x080082dd
 80082ac:	080083e1 	.word	0x080083e1
 80082b0:	080083e1 	.word	0x080083e1
 80082b4:	080083e1 	.word	0x080083e1
 80082b8:	0800831d 	.word	0x0800831d
 80082bc:	080083e1 	.word	0x080083e1
 80082c0:	080083e1 	.word	0x080083e1
 80082c4:	080083e1 	.word	0x080083e1
 80082c8:	0800835f 	.word	0x0800835f
 80082cc:	080083e1 	.word	0x080083e1
 80082d0:	080083e1 	.word	0x080083e1
 80082d4:	080083e1 	.word	0x080083e1
 80082d8:	0800839f 	.word	0x0800839f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f000 fa0c 	bl	8008700 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699a      	ldr	r2, [r3, #24]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f042 0208 	orr.w	r2, r2, #8
 80082f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	699a      	ldr	r2, [r3, #24]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0204 	bic.w	r2, r2, #4
 8008306:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	6999      	ldr	r1, [r3, #24]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	691a      	ldr	r2, [r3, #16]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	430a      	orrs	r2, r1
 8008318:	619a      	str	r2, [r3, #24]
      break;
 800831a:	e062      	b.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68b9      	ldr	r1, [r7, #8]
 8008322:	4618      	mov	r0, r3
 8008324:	f000 fa5c 	bl	80087e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008336:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	699a      	ldr	r2, [r3, #24]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6999      	ldr	r1, [r3, #24]
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	021a      	lsls	r2, r3, #8
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	430a      	orrs	r2, r1
 800835a:	619a      	str	r2, [r3, #24]
      break;
 800835c:	e041      	b.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68b9      	ldr	r1, [r7, #8]
 8008364:	4618      	mov	r0, r3
 8008366:	f000 faaf 	bl	80088c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0208 	orr.w	r2, r2, #8
 8008378:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f022 0204 	bic.w	r2, r2, #4
 8008388:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	69d9      	ldr	r1, [r3, #28]
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	691a      	ldr	r2, [r3, #16]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	430a      	orrs	r2, r1
 800839a:	61da      	str	r2, [r3, #28]
      break;
 800839c:	e021      	b.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	68b9      	ldr	r1, [r7, #8]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f000 fb03 	bl	80089b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	69da      	ldr	r2, [r3, #28]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	69da      	ldr	r2, [r3, #28]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	69d9      	ldr	r1, [r3, #28]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	021a      	lsls	r2, r3, #8
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	430a      	orrs	r2, r1
 80083dc:	61da      	str	r2, [r3, #28]
      break;
 80083de:	e000      	b.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80083e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2200      	movs	r2, #0
 80083ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f2:	2300      	movs	r3, #0
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_TIM_ConfigClockSource+0x18>
 8008410:	2302      	movs	r3, #2
 8008412:	e0a6      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x166>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800843a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b40      	cmp	r3, #64	; 0x40
 800844a:	d067      	beq.n	800851c <HAL_TIM_ConfigClockSource+0x120>
 800844c:	2b40      	cmp	r3, #64	; 0x40
 800844e:	d80b      	bhi.n	8008468 <HAL_TIM_ConfigClockSource+0x6c>
 8008450:	2b10      	cmp	r3, #16
 8008452:	d073      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x140>
 8008454:	2b10      	cmp	r3, #16
 8008456:	d802      	bhi.n	800845e <HAL_TIM_ConfigClockSource+0x62>
 8008458:	2b00      	cmp	r3, #0
 800845a:	d06f      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800845c:	e078      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800845e:	2b20      	cmp	r3, #32
 8008460:	d06c      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x140>
 8008462:	2b30      	cmp	r3, #48	; 0x30
 8008464:	d06a      	beq.n	800853c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008466:	e073      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008468:	2b70      	cmp	r3, #112	; 0x70
 800846a:	d00d      	beq.n	8008488 <HAL_TIM_ConfigClockSource+0x8c>
 800846c:	2b70      	cmp	r3, #112	; 0x70
 800846e:	d804      	bhi.n	800847a <HAL_TIM_ConfigClockSource+0x7e>
 8008470:	2b50      	cmp	r3, #80	; 0x50
 8008472:	d033      	beq.n	80084dc <HAL_TIM_ConfigClockSource+0xe0>
 8008474:	2b60      	cmp	r3, #96	; 0x60
 8008476:	d041      	beq.n	80084fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008478:	e06a      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800847a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800847e:	d066      	beq.n	800854e <HAL_TIM_ConfigClockSource+0x152>
 8008480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008484:	d017      	beq.n	80084b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008486:	e063      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6818      	ldr	r0, [r3, #0]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	6899      	ldr	r1, [r3, #8]
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	68db      	ldr	r3, [r3, #12]
 8008498:	f000 fb55 	bl	8008b46 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80084aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	609a      	str	r2, [r3, #8]
      break;
 80084b4:	e04c      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	6899      	ldr	r1, [r3, #8]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685a      	ldr	r2, [r3, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f000 fb3e 	bl	8008b46 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084d8:	609a      	str	r2, [r3, #8]
      break;
 80084da:	e039      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6818      	ldr	r0, [r3, #0]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	6859      	ldr	r1, [r3, #4]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	461a      	mov	r2, r3
 80084ea:	f000 fab5 	bl	8008a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2150      	movs	r1, #80	; 0x50
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 fb0c 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 80084fa:	e029      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6818      	ldr	r0, [r3, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	6859      	ldr	r1, [r3, #4]
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	461a      	mov	r2, r3
 800850a:	f000 fad3 	bl	8008ab4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2160      	movs	r1, #96	; 0x60
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fafc 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800851a:	e019      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6818      	ldr	r0, [r3, #0]
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	6859      	ldr	r1, [r3, #4]
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	461a      	mov	r2, r3
 800852a:	f000 fa95 	bl	8008a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2140      	movs	r1, #64	; 0x40
 8008534:	4618      	mov	r0, r3
 8008536:	f000 faec 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800853a:	e009      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f000 fae3 	bl	8008b12 <TIM_ITRx_SetConfig>
      break;
 800854c:	e000      	b.n	8008550 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800854e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800856a:	b480      	push	{r7}
 800856c:	b083      	sub	sp, #12
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr

0800857c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	bc80      	pop	{r7}
 800858c:	4770      	bx	lr

0800858e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800858e:	b480      	push	{r7}
 8008590:	b083      	sub	sp, #12
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008596:	bf00      	nop
 8008598:	370c      	adds	r7, #12
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr

080085a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b083      	sub	sp, #12
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085a8:	bf00      	nop
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr

080085b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b083      	sub	sp, #12
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr

080085c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a3f      	ldr	r2, [pc, #252]	; (80086d4 <TIM_Base_SetConfig+0x110>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d013      	beq.n	8008604 <TIM_Base_SetConfig+0x40>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085e2:	d00f      	beq.n	8008604 <TIM_Base_SetConfig+0x40>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4a3c      	ldr	r2, [pc, #240]	; (80086d8 <TIM_Base_SetConfig+0x114>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d00b      	beq.n	8008604 <TIM_Base_SetConfig+0x40>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a3b      	ldr	r2, [pc, #236]	; (80086dc <TIM_Base_SetConfig+0x118>)
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d007      	beq.n	8008604 <TIM_Base_SetConfig+0x40>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4a3a      	ldr	r2, [pc, #232]	; (80086e0 <TIM_Base_SetConfig+0x11c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d003      	beq.n	8008604 <TIM_Base_SetConfig+0x40>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	4a39      	ldr	r2, [pc, #228]	; (80086e4 <TIM_Base_SetConfig+0x120>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d108      	bne.n	8008616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800860a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	4313      	orrs	r3, r2
 8008614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a2e      	ldr	r2, [pc, #184]	; (80086d4 <TIM_Base_SetConfig+0x110>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d02b      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008624:	d027      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	4a2b      	ldr	r2, [pc, #172]	; (80086d8 <TIM_Base_SetConfig+0x114>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d023      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	4a2a      	ldr	r2, [pc, #168]	; (80086dc <TIM_Base_SetConfig+0x118>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d01f      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	4a29      	ldr	r2, [pc, #164]	; (80086e0 <TIM_Base_SetConfig+0x11c>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d01b      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	4a28      	ldr	r2, [pc, #160]	; (80086e4 <TIM_Base_SetConfig+0x120>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d017      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a27      	ldr	r2, [pc, #156]	; (80086e8 <TIM_Base_SetConfig+0x124>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d013      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a26      	ldr	r2, [pc, #152]	; (80086ec <TIM_Base_SetConfig+0x128>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00f      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	4a25      	ldr	r2, [pc, #148]	; (80086f0 <TIM_Base_SetConfig+0x12c>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00b      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a24      	ldr	r2, [pc, #144]	; (80086f4 <TIM_Base_SetConfig+0x130>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d007      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a23      	ldr	r2, [pc, #140]	; (80086f8 <TIM_Base_SetConfig+0x134>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d003      	beq.n	8008676 <TIM_Base_SetConfig+0xb2>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a22      	ldr	r2, [pc, #136]	; (80086fc <TIM_Base_SetConfig+0x138>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d108      	bne.n	8008688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800867c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	68db      	ldr	r3, [r3, #12]
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	4313      	orrs	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4a09      	ldr	r2, [pc, #36]	; (80086d4 <TIM_Base_SetConfig+0x110>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <TIM_Base_SetConfig+0xf8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	4a0b      	ldr	r2, [pc, #44]	; (80086e4 <TIM_Base_SetConfig+0x120>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d103      	bne.n	80086c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	691a      	ldr	r2, [r3, #16]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	615a      	str	r2, [r3, #20]
}
 80086ca:	bf00      	nop
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bc80      	pop	{r7}
 80086d2:	4770      	bx	lr
 80086d4:	40010000 	.word	0x40010000
 80086d8:	40000400 	.word	0x40000400
 80086dc:	40000800 	.word	0x40000800
 80086e0:	40000c00 	.word	0x40000c00
 80086e4:	40010400 	.word	0x40010400
 80086e8:	40014000 	.word	0x40014000
 80086ec:	40014400 	.word	0x40014400
 80086f0:	40014800 	.word	0x40014800
 80086f4:	40001800 	.word	0x40001800
 80086f8:	40001c00 	.word	0x40001c00
 80086fc:	40002000 	.word	0x40002000

08008700 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	f023 0201 	bic.w	r2, r3, #1
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800872e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f023 0303 	bic.w	r3, r3, #3
 8008736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	4313      	orrs	r3, r2
 8008740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	f023 0302 	bic.w	r3, r3, #2
 8008748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4313      	orrs	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a20      	ldr	r2, [pc, #128]	; (80087d8 <TIM_OC1_SetConfig+0xd8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d003      	beq.n	8008764 <TIM_OC1_SetConfig+0x64>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <TIM_OC1_SetConfig+0xdc>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d10c      	bne.n	800877e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 0308 	bic.w	r3, r3, #8
 800876a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	4313      	orrs	r3, r2
 8008774:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	f023 0304 	bic.w	r3, r3, #4
 800877c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <TIM_OC1_SetConfig+0xd8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d003      	beq.n	800878e <TIM_OC1_SetConfig+0x8e>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	4a14      	ldr	r2, [pc, #80]	; (80087dc <TIM_OC1_SetConfig+0xdc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d111      	bne.n	80087b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685a      	ldr	r2, [r3, #4]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	621a      	str	r2, [r3, #32]
}
 80087cc:	bf00      	nop
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40010000 	.word	0x40010000
 80087dc:	40010400 	.word	0x40010400

080087e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a1b      	ldr	r3, [r3, #32]
 80087ee:	f023 0210 	bic.w	r2, r3, #16
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	699b      	ldr	r3, [r3, #24]
 8008806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800880e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	021b      	lsls	r3, r3, #8
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4313      	orrs	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f023 0320 	bic.w	r3, r3, #32
 800882a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	011b      	lsls	r3, r3, #4
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	4313      	orrs	r3, r2
 8008836:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a21      	ldr	r2, [pc, #132]	; (80088c0 <TIM_OC2_SetConfig+0xe0>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d003      	beq.n	8008848 <TIM_OC2_SetConfig+0x68>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a20      	ldr	r2, [pc, #128]	; (80088c4 <TIM_OC2_SetConfig+0xe4>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d10d      	bne.n	8008864 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800884e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008862:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a16      	ldr	r2, [pc, #88]	; (80088c0 <TIM_OC2_SetConfig+0xe0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d003      	beq.n	8008874 <TIM_OC2_SetConfig+0x94>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a15      	ldr	r2, [pc, #84]	; (80088c4 <TIM_OC2_SetConfig+0xe4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d113      	bne.n	800889c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800887a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	695b      	ldr	r3, [r3, #20]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	4313      	orrs	r3, r2
 800888e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4313      	orrs	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	693a      	ldr	r2, [r7, #16]
 80088a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	685a      	ldr	r2, [r3, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	697a      	ldr	r2, [r7, #20]
 80088b4:	621a      	str	r2, [r3, #32]
}
 80088b6:	bf00      	nop
 80088b8:	371c      	adds	r7, #28
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bc80      	pop	{r7}
 80088be:	4770      	bx	lr
 80088c0:	40010000 	.word	0x40010000
 80088c4:	40010400 	.word	0x40010400

080088c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	69db      	ldr	r3, [r3, #28]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a21      	ldr	r2, [pc, #132]	; (80089a8 <TIM_OC3_SetConfig+0xe0>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_OC3_SetConfig+0x66>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a20      	ldr	r2, [pc, #128]	; (80089ac <TIM_OC3_SetConfig+0xe4>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d10d      	bne.n	800894a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a16      	ldr	r2, [pc, #88]	; (80089a8 <TIM_OC3_SetConfig+0xe0>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d003      	beq.n	800895a <TIM_OC3_SetConfig+0x92>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a15      	ldr	r2, [pc, #84]	; (80089ac <TIM_OC3_SetConfig+0xe4>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d113      	bne.n	8008982 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	011b      	lsls	r3, r3, #4
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	699b      	ldr	r3, [r3, #24]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	693a      	ldr	r2, [r7, #16]
 8008986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	685a      	ldr	r2, [r3, #4]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	621a      	str	r2, [r3, #32]
}
 800899c:	bf00      	nop
 800899e:	371c      	adds	r7, #28
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc80      	pop	{r7}
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40010400 	.word	0x40010400

080089b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
 80089b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69db      	ldr	r3, [r3, #28]
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	031b      	lsls	r3, r3, #12
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	4a11      	ldr	r2, [pc, #68]	; (8008a50 <TIM_OC4_SetConfig+0xa0>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d003      	beq.n	8008a18 <TIM_OC4_SetConfig+0x68>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	4a10      	ldr	r2, [pc, #64]	; (8008a54 <TIM_OC4_SetConfig+0xa4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d109      	bne.n	8008a2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	695b      	ldr	r3, [r3, #20]
 8008a24:	019b      	lsls	r3, r3, #6
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	693a      	ldr	r2, [r7, #16]
 8008a44:	621a      	str	r2, [r3, #32]
}
 8008a46:	bf00      	nop
 8008a48:	371c      	adds	r7, #28
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bc80      	pop	{r7}
 8008a4e:	4770      	bx	lr
 8008a50:	40010000 	.word	0x40010000
 8008a54:	40010400 	.word	0x40010400

08008a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b087      	sub	sp, #28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	f023 0201 	bic.w	r2, r3, #1
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	011b      	lsls	r3, r3, #4
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	f023 030a 	bic.w	r3, r3, #10
 8008a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	621a      	str	r2, [r3, #32]
}
 8008aaa:	bf00      	nop
 8008aac:	371c      	adds	r7, #28
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bc80      	pop	{r7}
 8008ab2:	4770      	bx	lr

08008ab4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	f023 0210 	bic.w	r2, r3, #16
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ade:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	031b      	lsls	r3, r3, #12
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008af0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	011b      	lsls	r3, r3, #4
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	697a      	ldr	r2, [r7, #20]
 8008b00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	693a      	ldr	r2, [r7, #16]
 8008b06:	621a      	str	r2, [r3, #32]
}
 8008b08:	bf00      	nop
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b085      	sub	sp, #20
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	f043 0307 	orr.w	r3, r3, #7
 8008b34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	609a      	str	r2, [r3, #8]
}
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bc80      	pop	{r7}
 8008b44:	4770      	bx	lr

08008b46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b46:	b480      	push	{r7}
 8008b48:	b087      	sub	sp, #28
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	607a      	str	r2, [r7, #4]
 8008b52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	021a      	lsls	r2, r3, #8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	697a      	ldr	r2, [r7, #20]
 8008b70:	4313      	orrs	r3, r2
 8008b72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	697a      	ldr	r2, [r7, #20]
 8008b78:	609a      	str	r2, [r3, #8]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bc80      	pop	{r7}
 8008b82:	4770      	bx	lr

08008b84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	2201      	movs	r2, #1
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1a      	ldr	r2, [r3, #32]
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	401a      	ands	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6a1a      	ldr	r2, [r3, #32]
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	f003 031f 	and.w	r3, r3, #31
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	621a      	str	r2, [r3, #32]
}
 8008bc2:	bf00      	nop
 8008bc4:	371c      	adds	r7, #28
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bc80      	pop	{r7}
 8008bca:	4770      	bx	lr

08008bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d101      	bne.n	8008be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008be0:	2302      	movs	r3, #2
 8008be2:	e032      	b.n	8008c4a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2202      	movs	r2, #2
 8008bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68fa      	ldr	r2, [r7, #12]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3714      	adds	r7, #20
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e03d      	b.n	8008cec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	69db      	ldr	r3, [r3, #28]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bc80      	pop	{r7}
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cfe:	bf00      	nop
 8008d00:	370c      	adds	r7, #12
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bc80      	pop	{r7}
 8008d06:	4770      	bx	lr

08008d08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr

08008d1a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e03f      	b.n	8008dac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7fb fb23 	bl	800438c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2224      	movs	r2, #36	; 0x24
 8008d4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d5c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 faa6 	bl	80092b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	691a      	ldr	r2, [r3, #16]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d72:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695a      	ldr	r2, [r3, #20]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d82:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68da      	ldr	r2, [r3, #12]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d92:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2220      	movs	r2, #32
 8008d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2220      	movs	r2, #32
 8008da6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	2b20      	cmp	r3, #32
 8008dcc:	d130      	bne.n	8008e30 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <HAL_UART_Transmit_IT+0x26>
 8008dd4:	88fb      	ldrh	r3, [r7, #6]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e029      	b.n	8008e32 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d101      	bne.n	8008dec <HAL_UART_Transmit_IT+0x38>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e022      	b.n	8008e32 <HAL_UART_Transmit_IT+0x7e>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2201      	movs	r2, #1
 8008df0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	68ba      	ldr	r2, [r7, #8]
 8008df8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	88fa      	ldrh	r2, [r7, #6]
 8008dfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	88fa      	ldrh	r2, [r7, #6]
 8008e04:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2221      	movs	r2, #33	; 0x21
 8008e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2200      	movs	r2, #0
 8008e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e2a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	e000      	b.n	8008e32 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8008e30:	2302      	movs	r3, #2
  }
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f003 030f 	and.w	r3, r3, #15
 8008e6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d10d      	bne.n	8008e8e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	f003 0320 	and.w	r3, r3, #32
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d008      	beq.n	8008e8e <HAL_UART_IRQHandler+0x52>
 8008e7c:	69bb      	ldr	r3, [r7, #24]
 8008e7e:	f003 0320 	and.w	r3, r3, #32
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f991 	bl	80091ae <UART_Receive_IT>
      return;
 8008e8c:	e0d1      	b.n	8009032 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	f000 80b0 	beq.w	8008ff6 <HAL_UART_IRQHandler+0x1ba>
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d105      	bne.n	8008eac <HAL_UART_IRQHandler+0x70>
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f000 80a5 	beq.w	8008ff6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <HAL_UART_IRQHandler+0x90>
 8008eb6:	69bb      	ldr	r3, [r7, #24]
 8008eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d005      	beq.n	8008ecc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec4:	f043 0201 	orr.w	r2, r3, #1
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	f003 0304 	and.w	r3, r3, #4
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <HAL_UART_IRQHandler+0xb0>
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	f003 0301 	and.w	r3, r3, #1
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ee4:	f043 0202 	orr.w	r2, r3, #2
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f003 0302 	and.w	r3, r3, #2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00a      	beq.n	8008f0c <HAL_UART_IRQHandler+0xd0>
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d005      	beq.n	8008f0c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f04:	f043 0204 	orr.w	r2, r3, #4
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f003 0308 	and.w	r3, r3, #8
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00f      	beq.n	8008f36 <HAL_UART_IRQHandler+0xfa>
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d104      	bne.n	8008f2a <HAL_UART_IRQHandler+0xee>
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d005      	beq.n	8008f36 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f2e:	f043 0208 	orr.w	r2, r3, #8
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d078      	beq.n	8009030 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	f003 0320 	and.w	r3, r3, #32
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <HAL_UART_IRQHandler+0x11c>
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	f003 0320 	and.w	r3, r3, #32
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f92b 	bl	80091ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	695b      	ldr	r3, [r3, #20]
 8008f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f62:	2b40      	cmp	r3, #64	; 0x40
 8008f64:	bf0c      	ite	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	2300      	movne	r3, #0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f72:	f003 0308 	and.w	r3, r3, #8
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <HAL_UART_IRQHandler+0x144>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d031      	beq.n	8008fe4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f876 	bl	8009072 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f90:	2b40      	cmp	r3, #64	; 0x40
 8008f92:	d123      	bne.n	8008fdc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	695a      	ldr	r2, [r3, #20]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fa2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d013      	beq.n	8008fd4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb0:	4a21      	ldr	r2, [pc, #132]	; (8009038 <HAL_UART_IRQHandler+0x1fc>)
 8008fb2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fc ff67 	bl	8005e8c <HAL_DMA_Abort_IT>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d016      	beq.n	8008ff2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008fce:	4610      	mov	r0, r2
 8008fd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd2:	e00e      	b.n	8008ff2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f843 	bl	8009060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fda:	e00a      	b.n	8008ff2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 f83f 	bl	8009060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe2:	e006      	b.n	8008ff2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f83b 	bl	8009060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008ff0:	e01e      	b.n	8009030 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff2:	bf00      	nop
    return;
 8008ff4:	e01c      	b.n	8009030 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <HAL_UART_IRQHandler+0x1d6>
 8009000:	69bb      	ldr	r3, [r7, #24]
 8009002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009006:	2b00      	cmp	r3, #0
 8009008:	d003      	beq.n	8009012 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f862 	bl	80090d4 <UART_Transmit_IT>
    return;
 8009010:	e00f      	b.n	8009032 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00a      	beq.n	8009032 <HAL_UART_IRQHandler+0x1f6>
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f8a9 	bl	800917e <UART_EndTransmit_IT>
    return;
 800902c:	bf00      	nop
 800902e:	e000      	b.n	8009032 <HAL_UART_IRQHandler+0x1f6>
    return;
 8009030:	bf00      	nop
  }
}
 8009032:	3720      	adds	r7, #32
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	080090ad 	.word	0x080090ad

0800903c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr

0800904e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800904e:	b480      	push	{r7}
 8009050:	b083      	sub	sp, #12
 8009052:	af00      	add	r7, sp, #0
 8009054:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009056:	bf00      	nop
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	bc80      	pop	{r7}
 800905e:	4770      	bx	lr

08009060 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	bc80      	pop	{r7}
 8009070:	4770      	bx	lr

08009072 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68da      	ldr	r2, [r3, #12]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009088:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	695a      	ldr	r2, [r3, #20]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f022 0201 	bic.w	r2, r2, #1
 8009098:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80090a2:	bf00      	nop
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr

080090ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f7ff ffca 	bl	8009060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090cc:	bf00      	nop
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	2b21      	cmp	r3, #33	; 0x21
 80090e6:	d144      	bne.n	8009172 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090f0:	d11a      	bne.n	8009128 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6a1b      	ldr	r3, [r3, #32]
 80090f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009106:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d105      	bne.n	800911c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	1c9a      	adds	r2, r3, #2
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	621a      	str	r2, [r3, #32]
 800911a:	e00e      	b.n	800913a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	1c5a      	adds	r2, r3, #1
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	621a      	str	r2, [r3, #32]
 8009126:	e008      	b.n	800913a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6a1b      	ldr	r3, [r3, #32]
 800912c:	1c59      	adds	r1, r3, #1
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6211      	str	r1, [r2, #32]
 8009132:	781a      	ldrb	r2, [r3, #0]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800913e:	b29b      	uxth	r3, r3
 8009140:	3b01      	subs	r3, #1
 8009142:	b29b      	uxth	r3, r3
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4619      	mov	r1, r3
 8009148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10f      	bne.n	800916e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68da      	ldr	r2, [r3, #12]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800915c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800916c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e000      	b.n	8009174 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009172:	2302      	movs	r3, #2
  }
}
 8009174:	4618      	mov	r0, r3
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	bc80      	pop	{r7}
 800917c:	4770      	bx	lr

0800917e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68da      	ldr	r2, [r3, #12]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009194:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7ff ff4c 	bl	800903c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b084      	sub	sp, #16
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80091bc:	b2db      	uxtb	r3, r3
 80091be:	2b22      	cmp	r3, #34	; 0x22
 80091c0:	d171      	bne.n	80092a6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ca:	d123      	bne.n	8009214 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10e      	bne.n	80091f8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f0:	1c9a      	adds	r2, r3, #2
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	629a      	str	r2, [r3, #40]	; 0x28
 80091f6:	e029      	b.n	800924c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	b29b      	uxth	r3, r3
 8009200:	b2db      	uxtb	r3, r3
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	629a      	str	r2, [r3, #40]	; 0x28
 8009212:	e01b      	b.n	800924c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691b      	ldr	r3, [r3, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6858      	ldr	r0, [r3, #4]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	1c59      	adds	r1, r3, #1
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	6291      	str	r1, [r2, #40]	; 0x28
 800922c:	b2c2      	uxtb	r2, r0
 800922e:	701a      	strb	r2, [r3, #0]
 8009230:	e00c      	b.n	800924c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923e:	1c58      	adds	r0, r3, #1
 8009240:	6879      	ldr	r1, [r7, #4]
 8009242:	6288      	str	r0, [r1, #40]	; 0x28
 8009244:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009250:	b29b      	uxth	r3, r3
 8009252:	3b01      	subs	r3, #1
 8009254:	b29b      	uxth	r3, r3
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	4619      	mov	r1, r3
 800925a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800925c:	2b00      	cmp	r3, #0
 800925e:	d120      	bne.n	80092a2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0220 	bic.w	r2, r2, #32
 800926e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68da      	ldr	r2, [r3, #12]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800927e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	695a      	ldr	r2, [r3, #20]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0201 	bic.w	r2, r2, #1
 800928e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff fed8 	bl	800904e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	e002      	b.n	80092a8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e000      	b.n	80092a8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80092a6:	2302      	movs	r3, #2
  }
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	68da      	ldr	r2, [r3, #12]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	431a      	orrs	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	69db      	ldr	r3, [r3, #28]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80092f0:	f023 030c 	bic.w	r3, r3, #12
 80092f4:	687a      	ldr	r2, [r7, #4]
 80092f6:	6812      	ldr	r2, [r2, #0]
 80092f8:	68f9      	ldr	r1, [r7, #12]
 80092fa:	430b      	orrs	r3, r1
 80092fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699a      	ldr	r2, [r3, #24]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800931c:	f040 80aa 	bne.w	8009474 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4aa9      	ldr	r2, [pc, #676]	; (80095cc <UART_SetConfig+0x31c>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d004      	beq.n	8009334 <UART_SetConfig+0x84>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4aa8      	ldr	r2, [pc, #672]	; (80095d0 <UART_SetConfig+0x320>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d14f      	bne.n	80093d4 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009334:	f7fe fd8e 	bl	8007e54 <HAL_RCC_GetPCLK2Freq>
 8009338:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	4613      	mov	r3, r2
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	009a      	lsls	r2, r3, #2
 8009344:	441a      	add	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	005b      	lsls	r3, r3, #1
 800934c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009350:	4aa0      	ldr	r2, [pc, #640]	; (80095d4 <UART_SetConfig+0x324>)
 8009352:	fba2 2303 	umull	r2, r3, r2, r3
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	0119      	lsls	r1, r3, #4
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009a      	lsls	r2, r3, #2
 8009364:	441a      	add	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009370:	4b98      	ldr	r3, [pc, #608]	; (80095d4 <UART_SetConfig+0x324>)
 8009372:	fba3 0302 	umull	r0, r3, r3, r2
 8009376:	095b      	lsrs	r3, r3, #5
 8009378:	2064      	movs	r0, #100	; 0x64
 800937a:	fb00 f303 	mul.w	r3, r0, r3
 800937e:	1ad3      	subs	r3, r2, r3
 8009380:	00db      	lsls	r3, r3, #3
 8009382:	3332      	adds	r3, #50	; 0x32
 8009384:	4a93      	ldr	r2, [pc, #588]	; (80095d4 <UART_SetConfig+0x324>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	005b      	lsls	r3, r3, #1
 800938e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009392:	4419      	add	r1, r3
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	4413      	add	r3, r2
 800939c:	009a      	lsls	r2, r3, #2
 800939e:	441a      	add	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80093aa:	4b8a      	ldr	r3, [pc, #552]	; (80095d4 <UART_SetConfig+0x324>)
 80093ac:	fba3 0302 	umull	r0, r3, r3, r2
 80093b0:	095b      	lsrs	r3, r3, #5
 80093b2:	2064      	movs	r0, #100	; 0x64
 80093b4:	fb00 f303 	mul.w	r3, r0, r3
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	00db      	lsls	r3, r3, #3
 80093bc:	3332      	adds	r3, #50	; 0x32
 80093be:	4a85      	ldr	r2, [pc, #532]	; (80095d4 <UART_SetConfig+0x324>)
 80093c0:	fba2 2303 	umull	r2, r3, r2, r3
 80093c4:	095b      	lsrs	r3, r3, #5
 80093c6:	f003 0207 	and.w	r2, r3, #7
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	440a      	add	r2, r1
 80093d0:	609a      	str	r2, [r3, #8]
 80093d2:	e0f7      	b.n	80095c4 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093d4:	f7fe fd1c 	bl	8007e10 <HAL_RCC_GetPCLK1Freq>
 80093d8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	009a      	lsls	r2, r3, #2
 80093e4:	441a      	add	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f0:	4a78      	ldr	r2, [pc, #480]	; (80095d4 <UART_SetConfig+0x324>)
 80093f2:	fba2 2303 	umull	r2, r3, r2, r3
 80093f6:	095b      	lsrs	r3, r3, #5
 80093f8:	0119      	lsls	r1, r3, #4
 80093fa:	68ba      	ldr	r2, [r7, #8]
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	009a      	lsls	r2, r3, #2
 8009404:	441a      	add	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	005b      	lsls	r3, r3, #1
 800940c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009410:	4b70      	ldr	r3, [pc, #448]	; (80095d4 <UART_SetConfig+0x324>)
 8009412:	fba3 0302 	umull	r0, r3, r3, r2
 8009416:	095b      	lsrs	r3, r3, #5
 8009418:	2064      	movs	r0, #100	; 0x64
 800941a:	fb00 f303 	mul.w	r3, r0, r3
 800941e:	1ad3      	subs	r3, r2, r3
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	3332      	adds	r3, #50	; 0x32
 8009424:	4a6b      	ldr	r2, [pc, #428]	; (80095d4 <UART_SetConfig+0x324>)
 8009426:	fba2 2303 	umull	r2, r3, r2, r3
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	005b      	lsls	r3, r3, #1
 800942e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009432:	4419      	add	r1, r3
 8009434:	68ba      	ldr	r2, [r7, #8]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009a      	lsls	r2, r3, #2
 800943e:	441a      	add	r2, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	005b      	lsls	r3, r3, #1
 8009446:	fbb2 f2f3 	udiv	r2, r2, r3
 800944a:	4b62      	ldr	r3, [pc, #392]	; (80095d4 <UART_SetConfig+0x324>)
 800944c:	fba3 0302 	umull	r0, r3, r3, r2
 8009450:	095b      	lsrs	r3, r3, #5
 8009452:	2064      	movs	r0, #100	; 0x64
 8009454:	fb00 f303 	mul.w	r3, r0, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	3332      	adds	r3, #50	; 0x32
 800945e:	4a5d      	ldr	r2, [pc, #372]	; (80095d4 <UART_SetConfig+0x324>)
 8009460:	fba2 2303 	umull	r2, r3, r2, r3
 8009464:	095b      	lsrs	r3, r3, #5
 8009466:	f003 0207 	and.w	r2, r3, #7
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	440a      	add	r2, r1
 8009470:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009472:	e0a7      	b.n	80095c4 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a54      	ldr	r2, [pc, #336]	; (80095cc <UART_SetConfig+0x31c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d004      	beq.n	8009488 <UART_SetConfig+0x1d8>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a53      	ldr	r2, [pc, #332]	; (80095d0 <UART_SetConfig+0x320>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d14e      	bne.n	8009526 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009488:	f7fe fce4 	bl	8007e54 <HAL_RCC_GetPCLK2Freq>
 800948c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009a      	lsls	r2, r3, #2
 8009498:	441a      	add	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094a4:	4a4b      	ldr	r2, [pc, #300]	; (80095d4 <UART_SetConfig+0x324>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	0119      	lsls	r1, r3, #4
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	4613      	mov	r3, r2
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	009a      	lsls	r2, r3, #2
 80094b8:	441a      	add	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	009b      	lsls	r3, r3, #2
 80094c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80094c4:	4b43      	ldr	r3, [pc, #268]	; (80095d4 <UART_SetConfig+0x324>)
 80094c6:	fba3 0302 	umull	r0, r3, r3, r2
 80094ca:	095b      	lsrs	r3, r3, #5
 80094cc:	2064      	movs	r0, #100	; 0x64
 80094ce:	fb00 f303 	mul.w	r3, r0, r3
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	011b      	lsls	r3, r3, #4
 80094d6:	3332      	adds	r3, #50	; 0x32
 80094d8:	4a3e      	ldr	r2, [pc, #248]	; (80095d4 <UART_SetConfig+0x324>)
 80094da:	fba2 2303 	umull	r2, r3, r2, r3
 80094de:	095b      	lsrs	r3, r3, #5
 80094e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094e4:	4419      	add	r1, r3
 80094e6:	68ba      	ldr	r2, [r7, #8]
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	009a      	lsls	r2, r3, #2
 80094f0:	441a      	add	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80094fc:	4b35      	ldr	r3, [pc, #212]	; (80095d4 <UART_SetConfig+0x324>)
 80094fe:	fba3 0302 	umull	r0, r3, r3, r2
 8009502:	095b      	lsrs	r3, r3, #5
 8009504:	2064      	movs	r0, #100	; 0x64
 8009506:	fb00 f303 	mul.w	r3, r0, r3
 800950a:	1ad3      	subs	r3, r2, r3
 800950c:	011b      	lsls	r3, r3, #4
 800950e:	3332      	adds	r3, #50	; 0x32
 8009510:	4a30      	ldr	r2, [pc, #192]	; (80095d4 <UART_SetConfig+0x324>)
 8009512:	fba2 2303 	umull	r2, r3, r2, r3
 8009516:	095b      	lsrs	r3, r3, #5
 8009518:	f003 020f 	and.w	r2, r3, #15
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	440a      	add	r2, r1
 8009522:	609a      	str	r2, [r3, #8]
 8009524:	e04e      	b.n	80095c4 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009526:	f7fe fc73 	bl	8007e10 <HAL_RCC_GetPCLK1Freq>
 800952a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800952c:	68ba      	ldr	r2, [r7, #8]
 800952e:	4613      	mov	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	009a      	lsls	r2, r3, #2
 8009536:	441a      	add	r2, r3
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009542:	4a24      	ldr	r2, [pc, #144]	; (80095d4 <UART_SetConfig+0x324>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	095b      	lsrs	r3, r3, #5
 800954a:	0119      	lsls	r1, r3, #4
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	4613      	mov	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	009a      	lsls	r2, r3, #2
 8009556:	441a      	add	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	fbb2 f2f3 	udiv	r2, r2, r3
 8009562:	4b1c      	ldr	r3, [pc, #112]	; (80095d4 <UART_SetConfig+0x324>)
 8009564:	fba3 0302 	umull	r0, r3, r3, r2
 8009568:	095b      	lsrs	r3, r3, #5
 800956a:	2064      	movs	r0, #100	; 0x64
 800956c:	fb00 f303 	mul.w	r3, r0, r3
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	3332      	adds	r3, #50	; 0x32
 8009576:	4a17      	ldr	r2, [pc, #92]	; (80095d4 <UART_SetConfig+0x324>)
 8009578:	fba2 2303 	umull	r2, r3, r2, r3
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009582:	4419      	add	r1, r3
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	4413      	add	r3, r2
 800958c:	009a      	lsls	r2, r3, #2
 800958e:	441a      	add	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	fbb2 f2f3 	udiv	r2, r2, r3
 800959a:	4b0e      	ldr	r3, [pc, #56]	; (80095d4 <UART_SetConfig+0x324>)
 800959c:	fba3 0302 	umull	r0, r3, r3, r2
 80095a0:	095b      	lsrs	r3, r3, #5
 80095a2:	2064      	movs	r0, #100	; 0x64
 80095a4:	fb00 f303 	mul.w	r3, r0, r3
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	3332      	adds	r3, #50	; 0x32
 80095ae:	4a09      	ldr	r2, [pc, #36]	; (80095d4 <UART_SetConfig+0x324>)
 80095b0:	fba2 2303 	umull	r2, r3, r2, r3
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f003 020f 	and.w	r2, r3, #15
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	440a      	add	r2, r1
 80095c0:	609a      	str	r2, [r3, #8]
}
 80095c2:	e7ff      	b.n	80095c4 <UART_SetConfig+0x314>
 80095c4:	bf00      	nop
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40011000 	.word	0x40011000
 80095d0:	40011400 	.word	0x40011400
 80095d4:	51eb851f 	.word	0x51eb851f

080095d8 <__errno>:
 80095d8:	4b01      	ldr	r3, [pc, #4]	; (80095e0 <__errno+0x8>)
 80095da:	6818      	ldr	r0, [r3, #0]
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	2000001c 	.word	0x2000001c

080095e4 <__libc_init_array>:
 80095e4:	b570      	push	{r4, r5, r6, lr}
 80095e6:	2500      	movs	r5, #0
 80095e8:	4e0c      	ldr	r6, [pc, #48]	; (800961c <__libc_init_array+0x38>)
 80095ea:	4c0d      	ldr	r4, [pc, #52]	; (8009620 <__libc_init_array+0x3c>)
 80095ec:	1ba4      	subs	r4, r4, r6
 80095ee:	10a4      	asrs	r4, r4, #2
 80095f0:	42a5      	cmp	r5, r4
 80095f2:	d109      	bne.n	8009608 <__libc_init_array+0x24>
 80095f4:	f002 fa92 	bl	800bb1c <_init>
 80095f8:	2500      	movs	r5, #0
 80095fa:	4e0a      	ldr	r6, [pc, #40]	; (8009624 <__libc_init_array+0x40>)
 80095fc:	4c0a      	ldr	r4, [pc, #40]	; (8009628 <__libc_init_array+0x44>)
 80095fe:	1ba4      	subs	r4, r4, r6
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	42a5      	cmp	r5, r4
 8009604:	d105      	bne.n	8009612 <__libc_init_array+0x2e>
 8009606:	bd70      	pop	{r4, r5, r6, pc}
 8009608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800960c:	4798      	blx	r3
 800960e:	3501      	adds	r5, #1
 8009610:	e7ee      	b.n	80095f0 <__libc_init_array+0xc>
 8009612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009616:	4798      	blx	r3
 8009618:	3501      	adds	r5, #1
 800961a:	e7f2      	b.n	8009602 <__libc_init_array+0x1e>
 800961c:	0800c5ec 	.word	0x0800c5ec
 8009620:	0800c5ec 	.word	0x0800c5ec
 8009624:	0800c5ec 	.word	0x0800c5ec
 8009628:	0800c5f0 	.word	0x0800c5f0

0800962c <memset>:
 800962c:	4603      	mov	r3, r0
 800962e:	4402      	add	r2, r0
 8009630:	4293      	cmp	r3, r2
 8009632:	d100      	bne.n	8009636 <memset+0xa>
 8009634:	4770      	bx	lr
 8009636:	f803 1b01 	strb.w	r1, [r3], #1
 800963a:	e7f9      	b.n	8009630 <memset+0x4>

0800963c <__cvt>:
 800963c:	2b00      	cmp	r3, #0
 800963e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009642:	461e      	mov	r6, r3
 8009644:	bfbb      	ittet	lt
 8009646:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800964a:	461e      	movlt	r6, r3
 800964c:	2300      	movge	r3, #0
 800964e:	232d      	movlt	r3, #45	; 0x2d
 8009650:	b088      	sub	sp, #32
 8009652:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009654:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8009658:	f027 0720 	bic.w	r7, r7, #32
 800965c:	2f46      	cmp	r7, #70	; 0x46
 800965e:	4614      	mov	r4, r2
 8009660:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009662:	700b      	strb	r3, [r1, #0]
 8009664:	d004      	beq.n	8009670 <__cvt+0x34>
 8009666:	2f45      	cmp	r7, #69	; 0x45
 8009668:	d100      	bne.n	800966c <__cvt+0x30>
 800966a:	3501      	adds	r5, #1
 800966c:	2302      	movs	r3, #2
 800966e:	e000      	b.n	8009672 <__cvt+0x36>
 8009670:	2303      	movs	r3, #3
 8009672:	aa07      	add	r2, sp, #28
 8009674:	9204      	str	r2, [sp, #16]
 8009676:	aa06      	add	r2, sp, #24
 8009678:	e9cd a202 	strd	sl, r2, [sp, #8]
 800967c:	e9cd 3500 	strd	r3, r5, [sp]
 8009680:	4622      	mov	r2, r4
 8009682:	4633      	mov	r3, r6
 8009684:	f000 fcd8 	bl	800a038 <_dtoa_r>
 8009688:	2f47      	cmp	r7, #71	; 0x47
 800968a:	4680      	mov	r8, r0
 800968c:	d102      	bne.n	8009694 <__cvt+0x58>
 800968e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009690:	07db      	lsls	r3, r3, #31
 8009692:	d526      	bpl.n	80096e2 <__cvt+0xa6>
 8009694:	2f46      	cmp	r7, #70	; 0x46
 8009696:	eb08 0905 	add.w	r9, r8, r5
 800969a:	d111      	bne.n	80096c0 <__cvt+0x84>
 800969c:	f898 3000 	ldrb.w	r3, [r8]
 80096a0:	2b30      	cmp	r3, #48	; 0x30
 80096a2:	d10a      	bne.n	80096ba <__cvt+0x7e>
 80096a4:	2200      	movs	r2, #0
 80096a6:	2300      	movs	r3, #0
 80096a8:	4620      	mov	r0, r4
 80096aa:	4631      	mov	r1, r6
 80096ac:	f7f7 f9b8 	bl	8000a20 <__aeabi_dcmpeq>
 80096b0:	b918      	cbnz	r0, 80096ba <__cvt+0x7e>
 80096b2:	f1c5 0501 	rsb	r5, r5, #1
 80096b6:	f8ca 5000 	str.w	r5, [sl]
 80096ba:	f8da 3000 	ldr.w	r3, [sl]
 80096be:	4499      	add	r9, r3
 80096c0:	2200      	movs	r2, #0
 80096c2:	2300      	movs	r3, #0
 80096c4:	4620      	mov	r0, r4
 80096c6:	4631      	mov	r1, r6
 80096c8:	f7f7 f9aa 	bl	8000a20 <__aeabi_dcmpeq>
 80096cc:	b938      	cbnz	r0, 80096de <__cvt+0xa2>
 80096ce:	2230      	movs	r2, #48	; 0x30
 80096d0:	9b07      	ldr	r3, [sp, #28]
 80096d2:	454b      	cmp	r3, r9
 80096d4:	d205      	bcs.n	80096e2 <__cvt+0xa6>
 80096d6:	1c59      	adds	r1, r3, #1
 80096d8:	9107      	str	r1, [sp, #28]
 80096da:	701a      	strb	r2, [r3, #0]
 80096dc:	e7f8      	b.n	80096d0 <__cvt+0x94>
 80096de:	f8cd 901c 	str.w	r9, [sp, #28]
 80096e2:	4640      	mov	r0, r8
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096e8:	eba3 0308 	sub.w	r3, r3, r8
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	b008      	add	sp, #32
 80096f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080096f4 <__exponent>:
 80096f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096f6:	2900      	cmp	r1, #0
 80096f8:	bfb4      	ite	lt
 80096fa:	232d      	movlt	r3, #45	; 0x2d
 80096fc:	232b      	movge	r3, #43	; 0x2b
 80096fe:	4604      	mov	r4, r0
 8009700:	bfb8      	it	lt
 8009702:	4249      	neglt	r1, r1
 8009704:	2909      	cmp	r1, #9
 8009706:	f804 2b02 	strb.w	r2, [r4], #2
 800970a:	7043      	strb	r3, [r0, #1]
 800970c:	dd21      	ble.n	8009752 <__exponent+0x5e>
 800970e:	f10d 0307 	add.w	r3, sp, #7
 8009712:	461f      	mov	r7, r3
 8009714:	260a      	movs	r6, #10
 8009716:	fb91 f5f6 	sdiv	r5, r1, r6
 800971a:	fb06 1115 	mls	r1, r6, r5, r1
 800971e:	2d09      	cmp	r5, #9
 8009720:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009724:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009728:	f103 32ff 	add.w	r2, r3, #4294967295
 800972c:	4629      	mov	r1, r5
 800972e:	dc09      	bgt.n	8009744 <__exponent+0x50>
 8009730:	3130      	adds	r1, #48	; 0x30
 8009732:	3b02      	subs	r3, #2
 8009734:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009738:	42bb      	cmp	r3, r7
 800973a:	4622      	mov	r2, r4
 800973c:	d304      	bcc.n	8009748 <__exponent+0x54>
 800973e:	1a10      	subs	r0, r2, r0
 8009740:	b003      	add	sp, #12
 8009742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009744:	4613      	mov	r3, r2
 8009746:	e7e6      	b.n	8009716 <__exponent+0x22>
 8009748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974c:	f804 2b01 	strb.w	r2, [r4], #1
 8009750:	e7f2      	b.n	8009738 <__exponent+0x44>
 8009752:	2330      	movs	r3, #48	; 0x30
 8009754:	4419      	add	r1, r3
 8009756:	7083      	strb	r3, [r0, #2]
 8009758:	1d02      	adds	r2, r0, #4
 800975a:	70c1      	strb	r1, [r0, #3]
 800975c:	e7ef      	b.n	800973e <__exponent+0x4a>
	...

08009760 <_printf_float>:
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	b091      	sub	sp, #68	; 0x44
 8009766:	460c      	mov	r4, r1
 8009768:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800976a:	4693      	mov	fp, r2
 800976c:	461e      	mov	r6, r3
 800976e:	4605      	mov	r5, r0
 8009770:	f001 fa16 	bl	800aba0 <_localeconv_r>
 8009774:	6803      	ldr	r3, [r0, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	9309      	str	r3, [sp, #36]	; 0x24
 800977a:	f7f6 fd25 	bl	80001c8 <strlen>
 800977e:	2300      	movs	r3, #0
 8009780:	930e      	str	r3, [sp, #56]	; 0x38
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	900a      	str	r0, [sp, #40]	; 0x28
 8009786:	3307      	adds	r3, #7
 8009788:	f023 0307 	bic.w	r3, r3, #7
 800978c:	f103 0208 	add.w	r2, r3, #8
 8009790:	f894 8018 	ldrb.w	r8, [r4, #24]
 8009794:	f8d4 a000 	ldr.w	sl, [r4]
 8009798:	603a      	str	r2, [r7, #0]
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80097a2:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 80097a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295
 80097b0:	4ba6      	ldr	r3, [pc, #664]	; (8009a4c <_printf_float+0x2ec>)
 80097b2:	4638      	mov	r0, r7
 80097b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097b6:	f7f7 f965 	bl	8000a84 <__aeabi_dcmpun>
 80097ba:	bb68      	cbnz	r0, 8009818 <_printf_float+0xb8>
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	4ba2      	ldr	r3, [pc, #648]	; (8009a4c <_printf_float+0x2ec>)
 80097c2:	4638      	mov	r0, r7
 80097c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80097c6:	f7f7 f93f 	bl	8000a48 <__aeabi_dcmple>
 80097ca:	bb28      	cbnz	r0, 8009818 <_printf_float+0xb8>
 80097cc:	2200      	movs	r2, #0
 80097ce:	2300      	movs	r3, #0
 80097d0:	4638      	mov	r0, r7
 80097d2:	4649      	mov	r1, r9
 80097d4:	f7f7 f92e 	bl	8000a34 <__aeabi_dcmplt>
 80097d8:	b110      	cbz	r0, 80097e0 <_printf_float+0x80>
 80097da:	232d      	movs	r3, #45	; 0x2d
 80097dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097e0:	4f9b      	ldr	r7, [pc, #620]	; (8009a50 <_printf_float+0x2f0>)
 80097e2:	4b9c      	ldr	r3, [pc, #624]	; (8009a54 <_printf_float+0x2f4>)
 80097e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097e8:	bf98      	it	ls
 80097ea:	461f      	movls	r7, r3
 80097ec:	2303      	movs	r3, #3
 80097ee:	f04f 0900 	mov.w	r9, #0
 80097f2:	6123      	str	r3, [r4, #16]
 80097f4:	f02a 0304 	bic.w	r3, sl, #4
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	9600      	str	r6, [sp, #0]
 80097fc:	465b      	mov	r3, fp
 80097fe:	aa0f      	add	r2, sp, #60	; 0x3c
 8009800:	4621      	mov	r1, r4
 8009802:	4628      	mov	r0, r5
 8009804:	f000 f9e2 	bl	8009bcc <_printf_common>
 8009808:	3001      	adds	r0, #1
 800980a:	f040 8090 	bne.w	800992e <_printf_float+0x1ce>
 800980e:	f04f 30ff 	mov.w	r0, #4294967295
 8009812:	b011      	add	sp, #68	; 0x44
 8009814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009818:	463a      	mov	r2, r7
 800981a:	464b      	mov	r3, r9
 800981c:	4638      	mov	r0, r7
 800981e:	4649      	mov	r1, r9
 8009820:	f7f7 f930 	bl	8000a84 <__aeabi_dcmpun>
 8009824:	b110      	cbz	r0, 800982c <_printf_float+0xcc>
 8009826:	4f8c      	ldr	r7, [pc, #560]	; (8009a58 <_printf_float+0x2f8>)
 8009828:	4b8c      	ldr	r3, [pc, #560]	; (8009a5c <_printf_float+0x2fc>)
 800982a:	e7db      	b.n	80097e4 <_printf_float+0x84>
 800982c:	6863      	ldr	r3, [r4, #4]
 800982e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8009832:	1c59      	adds	r1, r3, #1
 8009834:	a80d      	add	r0, sp, #52	; 0x34
 8009836:	a90e      	add	r1, sp, #56	; 0x38
 8009838:	d140      	bne.n	80098bc <_printf_float+0x15c>
 800983a:	2306      	movs	r3, #6
 800983c:	6063      	str	r3, [r4, #4]
 800983e:	f04f 0c00 	mov.w	ip, #0
 8009842:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8009846:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800984a:	6863      	ldr	r3, [r4, #4]
 800984c:	6022      	str	r2, [r4, #0]
 800984e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	463a      	mov	r2, r7
 8009856:	464b      	mov	r3, r9
 8009858:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800985c:	4628      	mov	r0, r5
 800985e:	f7ff feed 	bl	800963c <__cvt>
 8009862:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8009866:	2b47      	cmp	r3, #71	; 0x47
 8009868:	4607      	mov	r7, r0
 800986a:	d109      	bne.n	8009880 <_printf_float+0x120>
 800986c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800986e:	1cd8      	adds	r0, r3, #3
 8009870:	db02      	blt.n	8009878 <_printf_float+0x118>
 8009872:	6862      	ldr	r2, [r4, #4]
 8009874:	4293      	cmp	r3, r2
 8009876:	dd47      	ble.n	8009908 <_printf_float+0x1a8>
 8009878:	f1a8 0802 	sub.w	r8, r8, #2
 800987c:	fa5f f888 	uxtb.w	r8, r8
 8009880:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009884:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009886:	d824      	bhi.n	80098d2 <_printf_float+0x172>
 8009888:	3901      	subs	r1, #1
 800988a:	4642      	mov	r2, r8
 800988c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009890:	910d      	str	r1, [sp, #52]	; 0x34
 8009892:	f7ff ff2f 	bl	80096f4 <__exponent>
 8009896:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009898:	4681      	mov	r9, r0
 800989a:	1813      	adds	r3, r2, r0
 800989c:	2a01      	cmp	r2, #1
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	dc02      	bgt.n	80098a8 <_printf_float+0x148>
 80098a2:	6822      	ldr	r2, [r4, #0]
 80098a4:	07d1      	lsls	r1, r2, #31
 80098a6:	d501      	bpl.n	80098ac <_printf_float+0x14c>
 80098a8:	3301      	adds	r3, #1
 80098aa:	6123      	str	r3, [r4, #16]
 80098ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d0a2      	beq.n	80097fa <_printf_float+0x9a>
 80098b4:	232d      	movs	r3, #45	; 0x2d
 80098b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ba:	e79e      	b.n	80097fa <_printf_float+0x9a>
 80098bc:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80098c0:	f000 816e 	beq.w	8009ba0 <_printf_float+0x440>
 80098c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098c8:	d1b9      	bne.n	800983e <_printf_float+0xde>
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1b7      	bne.n	800983e <_printf_float+0xde>
 80098ce:	2301      	movs	r3, #1
 80098d0:	e7b4      	b.n	800983c <_printf_float+0xdc>
 80098d2:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80098d6:	d119      	bne.n	800990c <_printf_float+0x1ac>
 80098d8:	2900      	cmp	r1, #0
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	dd0c      	ble.n	80098f8 <_printf_float+0x198>
 80098de:	6121      	str	r1, [r4, #16]
 80098e0:	b913      	cbnz	r3, 80098e8 <_printf_float+0x188>
 80098e2:	6822      	ldr	r2, [r4, #0]
 80098e4:	07d2      	lsls	r2, r2, #31
 80098e6:	d502      	bpl.n	80098ee <_printf_float+0x18e>
 80098e8:	3301      	adds	r3, #1
 80098ea:	440b      	add	r3, r1
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f0:	f04f 0900 	mov.w	r9, #0
 80098f4:	65a3      	str	r3, [r4, #88]	; 0x58
 80098f6:	e7d9      	b.n	80098ac <_printf_float+0x14c>
 80098f8:	b913      	cbnz	r3, 8009900 <_printf_float+0x1a0>
 80098fa:	6822      	ldr	r2, [r4, #0]
 80098fc:	07d0      	lsls	r0, r2, #31
 80098fe:	d501      	bpl.n	8009904 <_printf_float+0x1a4>
 8009900:	3302      	adds	r3, #2
 8009902:	e7f3      	b.n	80098ec <_printf_float+0x18c>
 8009904:	2301      	movs	r3, #1
 8009906:	e7f1      	b.n	80098ec <_printf_float+0x18c>
 8009908:	f04f 0867 	mov.w	r8, #103	; 0x67
 800990c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009910:	4293      	cmp	r3, r2
 8009912:	db05      	blt.n	8009920 <_printf_float+0x1c0>
 8009914:	6822      	ldr	r2, [r4, #0]
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	07d1      	lsls	r1, r2, #31
 800991a:	d5e8      	bpl.n	80098ee <_printf_float+0x18e>
 800991c:	3301      	adds	r3, #1
 800991e:	e7e5      	b.n	80098ec <_printf_float+0x18c>
 8009920:	2b00      	cmp	r3, #0
 8009922:	bfcc      	ite	gt
 8009924:	2301      	movgt	r3, #1
 8009926:	f1c3 0302 	rsble	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	e7de      	b.n	80098ec <_printf_float+0x18c>
 800992e:	6823      	ldr	r3, [r4, #0]
 8009930:	055a      	lsls	r2, r3, #21
 8009932:	d407      	bmi.n	8009944 <_printf_float+0x1e4>
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	463a      	mov	r2, r7
 8009938:	4659      	mov	r1, fp
 800993a:	4628      	mov	r0, r5
 800993c:	47b0      	blx	r6
 800993e:	3001      	adds	r0, #1
 8009940:	d129      	bne.n	8009996 <_printf_float+0x236>
 8009942:	e764      	b.n	800980e <_printf_float+0xae>
 8009944:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8009948:	f240 80d7 	bls.w	8009afa <_printf_float+0x39a>
 800994c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009950:	2200      	movs	r2, #0
 8009952:	2300      	movs	r3, #0
 8009954:	f7f7 f864 	bl	8000a20 <__aeabi_dcmpeq>
 8009958:	b388      	cbz	r0, 80099be <_printf_float+0x25e>
 800995a:	2301      	movs	r3, #1
 800995c:	4a40      	ldr	r2, [pc, #256]	; (8009a60 <_printf_float+0x300>)
 800995e:	4659      	mov	r1, fp
 8009960:	4628      	mov	r0, r5
 8009962:	47b0      	blx	r6
 8009964:	3001      	adds	r0, #1
 8009966:	f43f af52 	beq.w	800980e <_printf_float+0xae>
 800996a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800996e:	429a      	cmp	r2, r3
 8009970:	db02      	blt.n	8009978 <_printf_float+0x218>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	07d8      	lsls	r0, r3, #31
 8009976:	d50e      	bpl.n	8009996 <_printf_float+0x236>
 8009978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800997c:	4659      	mov	r1, fp
 800997e:	4628      	mov	r0, r5
 8009980:	47b0      	blx	r6
 8009982:	3001      	adds	r0, #1
 8009984:	f43f af43 	beq.w	800980e <_printf_float+0xae>
 8009988:	2700      	movs	r7, #0
 800998a:	f104 081a 	add.w	r8, r4, #26
 800998e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009990:	3b01      	subs	r3, #1
 8009992:	42bb      	cmp	r3, r7
 8009994:	dc09      	bgt.n	80099aa <_printf_float+0x24a>
 8009996:	6823      	ldr	r3, [r4, #0]
 8009998:	079f      	lsls	r7, r3, #30
 800999a:	f100 80fd 	bmi.w	8009b98 <_printf_float+0x438>
 800999e:	68e0      	ldr	r0, [r4, #12]
 80099a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099a2:	4298      	cmp	r0, r3
 80099a4:	bfb8      	it	lt
 80099a6:	4618      	movlt	r0, r3
 80099a8:	e733      	b.n	8009812 <_printf_float+0xb2>
 80099aa:	2301      	movs	r3, #1
 80099ac:	4642      	mov	r2, r8
 80099ae:	4659      	mov	r1, fp
 80099b0:	4628      	mov	r0, r5
 80099b2:	47b0      	blx	r6
 80099b4:	3001      	adds	r0, #1
 80099b6:	f43f af2a 	beq.w	800980e <_printf_float+0xae>
 80099ba:	3701      	adds	r7, #1
 80099bc:	e7e7      	b.n	800998e <_printf_float+0x22e>
 80099be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc2b      	bgt.n	8009a1c <_printf_float+0x2bc>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4a26      	ldr	r2, [pc, #152]	; (8009a60 <_printf_float+0x300>)
 80099c8:	4659      	mov	r1, fp
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b0      	blx	r6
 80099ce:	3001      	adds	r0, #1
 80099d0:	f43f af1d 	beq.w	800980e <_printf_float+0xae>
 80099d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099d6:	b923      	cbnz	r3, 80099e2 <_printf_float+0x282>
 80099d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099da:	b913      	cbnz	r3, 80099e2 <_printf_float+0x282>
 80099dc:	6823      	ldr	r3, [r4, #0]
 80099de:	07d9      	lsls	r1, r3, #31
 80099e0:	d5d9      	bpl.n	8009996 <_printf_float+0x236>
 80099e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80099e6:	4659      	mov	r1, fp
 80099e8:	4628      	mov	r0, r5
 80099ea:	47b0      	blx	r6
 80099ec:	3001      	adds	r0, #1
 80099ee:	f43f af0e 	beq.w	800980e <_printf_float+0xae>
 80099f2:	f04f 0800 	mov.w	r8, #0
 80099f6:	f104 091a 	add.w	r9, r4, #26
 80099fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80099fc:	425b      	negs	r3, r3
 80099fe:	4543      	cmp	r3, r8
 8009a00:	dc01      	bgt.n	8009a06 <_printf_float+0x2a6>
 8009a02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a04:	e797      	b.n	8009936 <_printf_float+0x1d6>
 8009a06:	2301      	movs	r3, #1
 8009a08:	464a      	mov	r2, r9
 8009a0a:	4659      	mov	r1, fp
 8009a0c:	4628      	mov	r0, r5
 8009a0e:	47b0      	blx	r6
 8009a10:	3001      	adds	r0, #1
 8009a12:	f43f aefc 	beq.w	800980e <_printf_float+0xae>
 8009a16:	f108 0801 	add.w	r8, r8, #1
 8009a1a:	e7ee      	b.n	80099fa <_printf_float+0x29a>
 8009a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a20:	429a      	cmp	r2, r3
 8009a22:	bfa8      	it	ge
 8009a24:	461a      	movge	r2, r3
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	4690      	mov	r8, r2
 8009a2a:	dd07      	ble.n	8009a3c <_printf_float+0x2dc>
 8009a2c:	4613      	mov	r3, r2
 8009a2e:	4659      	mov	r1, fp
 8009a30:	463a      	mov	r2, r7
 8009a32:	4628      	mov	r0, r5
 8009a34:	47b0      	blx	r6
 8009a36:	3001      	adds	r0, #1
 8009a38:	f43f aee9 	beq.w	800980e <_printf_float+0xae>
 8009a3c:	f104 031a 	add.w	r3, r4, #26
 8009a40:	f04f 0a00 	mov.w	sl, #0
 8009a44:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8009a48:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a4a:	e015      	b.n	8009a78 <_printf_float+0x318>
 8009a4c:	7fefffff 	.word	0x7fefffff
 8009a50:	0800c384 	.word	0x0800c384
 8009a54:	0800c380 	.word	0x0800c380
 8009a58:	0800c38c 	.word	0x0800c38c
 8009a5c:	0800c388 	.word	0x0800c388
 8009a60:	0800c390 	.word	0x0800c390
 8009a64:	2301      	movs	r3, #1
 8009a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a68:	4659      	mov	r1, fp
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	47b0      	blx	r6
 8009a6e:	3001      	adds	r0, #1
 8009a70:	f43f aecd 	beq.w	800980e <_printf_float+0xae>
 8009a74:	f10a 0a01 	add.w	sl, sl, #1
 8009a78:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8009a7c:	eba9 0308 	sub.w	r3, r9, r8
 8009a80:	4553      	cmp	r3, sl
 8009a82:	dcef      	bgt.n	8009a64 <_printf_float+0x304>
 8009a84:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	444f      	add	r7, r9
 8009a8c:	db14      	blt.n	8009ab8 <_printf_float+0x358>
 8009a8e:	6823      	ldr	r3, [r4, #0]
 8009a90:	07da      	lsls	r2, r3, #31
 8009a92:	d411      	bmi.n	8009ab8 <_printf_float+0x358>
 8009a94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a96:	990d      	ldr	r1, [sp, #52]	; 0x34
 8009a98:	eba3 0209 	sub.w	r2, r3, r9
 8009a9c:	eba3 0901 	sub.w	r9, r3, r1
 8009aa0:	4591      	cmp	r9, r2
 8009aa2:	bfa8      	it	ge
 8009aa4:	4691      	movge	r9, r2
 8009aa6:	f1b9 0f00 	cmp.w	r9, #0
 8009aaa:	dc0d      	bgt.n	8009ac8 <_printf_float+0x368>
 8009aac:	2700      	movs	r7, #0
 8009aae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ab2:	f104 081a 	add.w	r8, r4, #26
 8009ab6:	e018      	b.n	8009aea <_printf_float+0x38a>
 8009ab8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009abc:	4659      	mov	r1, fp
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b0      	blx	r6
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d1e6      	bne.n	8009a94 <_printf_float+0x334>
 8009ac6:	e6a2      	b.n	800980e <_printf_float+0xae>
 8009ac8:	464b      	mov	r3, r9
 8009aca:	463a      	mov	r2, r7
 8009acc:	4659      	mov	r1, fp
 8009ace:	4628      	mov	r0, r5
 8009ad0:	47b0      	blx	r6
 8009ad2:	3001      	adds	r0, #1
 8009ad4:	d1ea      	bne.n	8009aac <_printf_float+0x34c>
 8009ad6:	e69a      	b.n	800980e <_printf_float+0xae>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4642      	mov	r2, r8
 8009adc:	4659      	mov	r1, fp
 8009ade:	4628      	mov	r0, r5
 8009ae0:	47b0      	blx	r6
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f43f ae93 	beq.w	800980e <_printf_float+0xae>
 8009ae8:	3701      	adds	r7, #1
 8009aea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	eba3 0309 	sub.w	r3, r3, r9
 8009af4:	42bb      	cmp	r3, r7
 8009af6:	dcef      	bgt.n	8009ad8 <_printf_float+0x378>
 8009af8:	e74d      	b.n	8009996 <_printf_float+0x236>
 8009afa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009afc:	2a01      	cmp	r2, #1
 8009afe:	dc01      	bgt.n	8009b04 <_printf_float+0x3a4>
 8009b00:	07db      	lsls	r3, r3, #31
 8009b02:	d538      	bpl.n	8009b76 <_printf_float+0x416>
 8009b04:	2301      	movs	r3, #1
 8009b06:	463a      	mov	r2, r7
 8009b08:	4659      	mov	r1, fp
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b0      	blx	r6
 8009b0e:	3001      	adds	r0, #1
 8009b10:	f43f ae7d 	beq.w	800980e <_printf_float+0xae>
 8009b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b18:	4659      	mov	r1, fp
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	47b0      	blx	r6
 8009b1e:	3001      	adds	r0, #1
 8009b20:	f107 0701 	add.w	r7, r7, #1
 8009b24:	f43f ae73 	beq.w	800980e <_printf_float+0xae>
 8009b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f103 38ff 	add.w	r8, r3, #4294967295
 8009b34:	2300      	movs	r3, #0
 8009b36:	f7f6 ff73 	bl	8000a20 <__aeabi_dcmpeq>
 8009b3a:	b9c0      	cbnz	r0, 8009b6e <_printf_float+0x40e>
 8009b3c:	4643      	mov	r3, r8
 8009b3e:	463a      	mov	r2, r7
 8009b40:	4659      	mov	r1, fp
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b0      	blx	r6
 8009b46:	3001      	adds	r0, #1
 8009b48:	d10d      	bne.n	8009b66 <_printf_float+0x406>
 8009b4a:	e660      	b.n	800980e <_printf_float+0xae>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4642      	mov	r2, r8
 8009b50:	4659      	mov	r1, fp
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b0      	blx	r6
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f ae59 	beq.w	800980e <_printf_float+0xae>
 8009b5c:	3701      	adds	r7, #1
 8009b5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b60:	3b01      	subs	r3, #1
 8009b62:	42bb      	cmp	r3, r7
 8009b64:	dcf2      	bgt.n	8009b4c <_printf_float+0x3ec>
 8009b66:	464b      	mov	r3, r9
 8009b68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009b6c:	e6e4      	b.n	8009938 <_printf_float+0x1d8>
 8009b6e:	2700      	movs	r7, #0
 8009b70:	f104 081a 	add.w	r8, r4, #26
 8009b74:	e7f3      	b.n	8009b5e <_printf_float+0x3fe>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e7e1      	b.n	8009b3e <_printf_float+0x3de>
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	4659      	mov	r1, fp
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b0      	blx	r6
 8009b84:	3001      	adds	r0, #1
 8009b86:	f43f ae42 	beq.w	800980e <_printf_float+0xae>
 8009b8a:	3701      	adds	r7, #1
 8009b8c:	68e3      	ldr	r3, [r4, #12]
 8009b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b90:	1a9b      	subs	r3, r3, r2
 8009b92:	42bb      	cmp	r3, r7
 8009b94:	dcf1      	bgt.n	8009b7a <_printf_float+0x41a>
 8009b96:	e702      	b.n	800999e <_printf_float+0x23e>
 8009b98:	2700      	movs	r7, #0
 8009b9a:	f104 0819 	add.w	r8, r4, #25
 8009b9e:	e7f5      	b.n	8009b8c <_printf_float+0x42c>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f43f ae94 	beq.w	80098ce <_printf_float+0x16e>
 8009ba6:	f04f 0c00 	mov.w	ip, #0
 8009baa:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8009bae:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8009bb2:	6022      	str	r2, [r4, #0]
 8009bb4:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8009bb8:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8009bbc:	9300      	str	r3, [sp, #0]
 8009bbe:	463a      	mov	r2, r7
 8009bc0:	464b      	mov	r3, r9
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f7ff fd3a 	bl	800963c <__cvt>
 8009bc8:	4607      	mov	r7, r0
 8009bca:	e64f      	b.n	800986c <_printf_float+0x10c>

08009bcc <_printf_common>:
 8009bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd0:	4691      	mov	r9, r2
 8009bd2:	461f      	mov	r7, r3
 8009bd4:	688a      	ldr	r2, [r1, #8]
 8009bd6:	690b      	ldr	r3, [r1, #16]
 8009bd8:	4606      	mov	r6, r0
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	bfb8      	it	lt
 8009bde:	4613      	movlt	r3, r2
 8009be0:	f8c9 3000 	str.w	r3, [r9]
 8009be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009be8:	460c      	mov	r4, r1
 8009bea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009bee:	b112      	cbz	r2, 8009bf6 <_printf_common+0x2a>
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	f8c9 3000 	str.w	r3, [r9]
 8009bf6:	6823      	ldr	r3, [r4, #0]
 8009bf8:	0699      	lsls	r1, r3, #26
 8009bfa:	bf42      	ittt	mi
 8009bfc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c00:	3302      	addmi	r3, #2
 8009c02:	f8c9 3000 	strmi.w	r3, [r9]
 8009c06:	6825      	ldr	r5, [r4, #0]
 8009c08:	f015 0506 	ands.w	r5, r5, #6
 8009c0c:	d107      	bne.n	8009c1e <_printf_common+0x52>
 8009c0e:	f104 0a19 	add.w	sl, r4, #25
 8009c12:	68e3      	ldr	r3, [r4, #12]
 8009c14:	f8d9 2000 	ldr.w	r2, [r9]
 8009c18:	1a9b      	subs	r3, r3, r2
 8009c1a:	42ab      	cmp	r3, r5
 8009c1c:	dc29      	bgt.n	8009c72 <_printf_common+0xa6>
 8009c1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009c22:	6822      	ldr	r2, [r4, #0]
 8009c24:	3300      	adds	r3, #0
 8009c26:	bf18      	it	ne
 8009c28:	2301      	movne	r3, #1
 8009c2a:	0692      	lsls	r2, r2, #26
 8009c2c:	d42e      	bmi.n	8009c8c <_printf_common+0xc0>
 8009c2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c32:	4639      	mov	r1, r7
 8009c34:	4630      	mov	r0, r6
 8009c36:	47c0      	blx	r8
 8009c38:	3001      	adds	r0, #1
 8009c3a:	d021      	beq.n	8009c80 <_printf_common+0xb4>
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	68e5      	ldr	r5, [r4, #12]
 8009c40:	f003 0306 	and.w	r3, r3, #6
 8009c44:	2b04      	cmp	r3, #4
 8009c46:	bf18      	it	ne
 8009c48:	2500      	movne	r5, #0
 8009c4a:	f8d9 2000 	ldr.w	r2, [r9]
 8009c4e:	f04f 0900 	mov.w	r9, #0
 8009c52:	bf08      	it	eq
 8009c54:	1aad      	subeq	r5, r5, r2
 8009c56:	68a3      	ldr	r3, [r4, #8]
 8009c58:	6922      	ldr	r2, [r4, #16]
 8009c5a:	bf08      	it	eq
 8009c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c60:	4293      	cmp	r3, r2
 8009c62:	bfc4      	itt	gt
 8009c64:	1a9b      	subgt	r3, r3, r2
 8009c66:	18ed      	addgt	r5, r5, r3
 8009c68:	341a      	adds	r4, #26
 8009c6a:	454d      	cmp	r5, r9
 8009c6c:	d11a      	bne.n	8009ca4 <_printf_common+0xd8>
 8009c6e:	2000      	movs	r0, #0
 8009c70:	e008      	b.n	8009c84 <_printf_common+0xb8>
 8009c72:	2301      	movs	r3, #1
 8009c74:	4652      	mov	r2, sl
 8009c76:	4639      	mov	r1, r7
 8009c78:	4630      	mov	r0, r6
 8009c7a:	47c0      	blx	r8
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	d103      	bne.n	8009c88 <_printf_common+0xbc>
 8009c80:	f04f 30ff 	mov.w	r0, #4294967295
 8009c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c88:	3501      	adds	r5, #1
 8009c8a:	e7c2      	b.n	8009c12 <_printf_common+0x46>
 8009c8c:	2030      	movs	r0, #48	; 0x30
 8009c8e:	18e1      	adds	r1, r4, r3
 8009c90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c9a:	4422      	add	r2, r4
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ca2:	e7c4      	b.n	8009c2e <_printf_common+0x62>
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4630      	mov	r0, r6
 8009cac:	47c0      	blx	r8
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d0e6      	beq.n	8009c80 <_printf_common+0xb4>
 8009cb2:	f109 0901 	add.w	r9, r9, #1
 8009cb6:	e7d8      	b.n	8009c6a <_printf_common+0x9e>

08009cb8 <_printf_i>:
 8009cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	7e09      	ldrb	r1, [r1, #24]
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	296e      	cmp	r1, #110	; 0x6e
 8009cc8:	4617      	mov	r7, r2
 8009cca:	4606      	mov	r6, r0
 8009ccc:	4698      	mov	r8, r3
 8009cce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cd0:	f000 80b3 	beq.w	8009e3a <_printf_i+0x182>
 8009cd4:	d822      	bhi.n	8009d1c <_printf_i+0x64>
 8009cd6:	2963      	cmp	r1, #99	; 0x63
 8009cd8:	d036      	beq.n	8009d48 <_printf_i+0x90>
 8009cda:	d80a      	bhi.n	8009cf2 <_printf_i+0x3a>
 8009cdc:	2900      	cmp	r1, #0
 8009cde:	f000 80b9 	beq.w	8009e54 <_printf_i+0x19c>
 8009ce2:	2958      	cmp	r1, #88	; 0x58
 8009ce4:	f000 8083 	beq.w	8009dee <_printf_i+0x136>
 8009ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009cf0:	e032      	b.n	8009d58 <_printf_i+0xa0>
 8009cf2:	2964      	cmp	r1, #100	; 0x64
 8009cf4:	d001      	beq.n	8009cfa <_printf_i+0x42>
 8009cf6:	2969      	cmp	r1, #105	; 0x69
 8009cf8:	d1f6      	bne.n	8009ce8 <_printf_i+0x30>
 8009cfa:	6820      	ldr	r0, [r4, #0]
 8009cfc:	6813      	ldr	r3, [r2, #0]
 8009cfe:	0605      	lsls	r5, r0, #24
 8009d00:	f103 0104 	add.w	r1, r3, #4
 8009d04:	d52a      	bpl.n	8009d5c <_printf_i+0xa4>
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	6011      	str	r1, [r2, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da03      	bge.n	8009d16 <_printf_i+0x5e>
 8009d0e:	222d      	movs	r2, #45	; 0x2d
 8009d10:	425b      	negs	r3, r3
 8009d12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d16:	486f      	ldr	r0, [pc, #444]	; (8009ed4 <_printf_i+0x21c>)
 8009d18:	220a      	movs	r2, #10
 8009d1a:	e039      	b.n	8009d90 <_printf_i+0xd8>
 8009d1c:	2973      	cmp	r1, #115	; 0x73
 8009d1e:	f000 809d 	beq.w	8009e5c <_printf_i+0x1a4>
 8009d22:	d808      	bhi.n	8009d36 <_printf_i+0x7e>
 8009d24:	296f      	cmp	r1, #111	; 0x6f
 8009d26:	d020      	beq.n	8009d6a <_printf_i+0xb2>
 8009d28:	2970      	cmp	r1, #112	; 0x70
 8009d2a:	d1dd      	bne.n	8009ce8 <_printf_i+0x30>
 8009d2c:	6823      	ldr	r3, [r4, #0]
 8009d2e:	f043 0320 	orr.w	r3, r3, #32
 8009d32:	6023      	str	r3, [r4, #0]
 8009d34:	e003      	b.n	8009d3e <_printf_i+0x86>
 8009d36:	2975      	cmp	r1, #117	; 0x75
 8009d38:	d017      	beq.n	8009d6a <_printf_i+0xb2>
 8009d3a:	2978      	cmp	r1, #120	; 0x78
 8009d3c:	d1d4      	bne.n	8009ce8 <_printf_i+0x30>
 8009d3e:	2378      	movs	r3, #120	; 0x78
 8009d40:	4865      	ldr	r0, [pc, #404]	; (8009ed8 <_printf_i+0x220>)
 8009d42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d46:	e055      	b.n	8009df4 <_printf_i+0x13c>
 8009d48:	6813      	ldr	r3, [r2, #0]
 8009d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d4e:	1d19      	adds	r1, r3, #4
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6011      	str	r1, [r2, #0]
 8009d54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e08c      	b.n	8009e76 <_printf_i+0x1be>
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009d62:	6011      	str	r1, [r2, #0]
 8009d64:	bf18      	it	ne
 8009d66:	b21b      	sxthne	r3, r3
 8009d68:	e7cf      	b.n	8009d0a <_printf_i+0x52>
 8009d6a:	6813      	ldr	r3, [r2, #0]
 8009d6c:	6825      	ldr	r5, [r4, #0]
 8009d6e:	1d18      	adds	r0, r3, #4
 8009d70:	6010      	str	r0, [r2, #0]
 8009d72:	0628      	lsls	r0, r5, #24
 8009d74:	d501      	bpl.n	8009d7a <_printf_i+0xc2>
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	e002      	b.n	8009d80 <_printf_i+0xc8>
 8009d7a:	0668      	lsls	r0, r5, #25
 8009d7c:	d5fb      	bpl.n	8009d76 <_printf_i+0xbe>
 8009d7e:	881b      	ldrh	r3, [r3, #0]
 8009d80:	296f      	cmp	r1, #111	; 0x6f
 8009d82:	bf14      	ite	ne
 8009d84:	220a      	movne	r2, #10
 8009d86:	2208      	moveq	r2, #8
 8009d88:	4852      	ldr	r0, [pc, #328]	; (8009ed4 <_printf_i+0x21c>)
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d90:	6865      	ldr	r5, [r4, #4]
 8009d92:	2d00      	cmp	r5, #0
 8009d94:	60a5      	str	r5, [r4, #8]
 8009d96:	f2c0 8095 	blt.w	8009ec4 <_printf_i+0x20c>
 8009d9a:	6821      	ldr	r1, [r4, #0]
 8009d9c:	f021 0104 	bic.w	r1, r1, #4
 8009da0:	6021      	str	r1, [r4, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d13d      	bne.n	8009e22 <_printf_i+0x16a>
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	f040 808e 	bne.w	8009ec8 <_printf_i+0x210>
 8009dac:	4665      	mov	r5, ip
 8009dae:	2a08      	cmp	r2, #8
 8009db0:	d10b      	bne.n	8009dca <_printf_i+0x112>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	07db      	lsls	r3, r3, #31
 8009db6:	d508      	bpl.n	8009dca <_printf_i+0x112>
 8009db8:	6923      	ldr	r3, [r4, #16]
 8009dba:	6862      	ldr	r2, [r4, #4]
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	bfde      	ittt	le
 8009dc0:	2330      	movle	r3, #48	; 0x30
 8009dc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009dc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009dca:	ebac 0305 	sub.w	r3, ip, r5
 8009dce:	6123      	str	r3, [r4, #16]
 8009dd0:	f8cd 8000 	str.w	r8, [sp]
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	aa03      	add	r2, sp, #12
 8009dd8:	4621      	mov	r1, r4
 8009dda:	4630      	mov	r0, r6
 8009ddc:	f7ff fef6 	bl	8009bcc <_printf_common>
 8009de0:	3001      	adds	r0, #1
 8009de2:	d14d      	bne.n	8009e80 <_printf_i+0x1c8>
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	b005      	add	sp, #20
 8009dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009dee:	4839      	ldr	r0, [pc, #228]	; (8009ed4 <_printf_i+0x21c>)
 8009df0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009df4:	6813      	ldr	r3, [r2, #0]
 8009df6:	6821      	ldr	r1, [r4, #0]
 8009df8:	1d1d      	adds	r5, r3, #4
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6015      	str	r5, [r2, #0]
 8009dfe:	060a      	lsls	r2, r1, #24
 8009e00:	d50b      	bpl.n	8009e1a <_printf_i+0x162>
 8009e02:	07ca      	lsls	r2, r1, #31
 8009e04:	bf44      	itt	mi
 8009e06:	f041 0120 	orrmi.w	r1, r1, #32
 8009e0a:	6021      	strmi	r1, [r4, #0]
 8009e0c:	b91b      	cbnz	r3, 8009e16 <_printf_i+0x15e>
 8009e0e:	6822      	ldr	r2, [r4, #0]
 8009e10:	f022 0220 	bic.w	r2, r2, #32
 8009e14:	6022      	str	r2, [r4, #0]
 8009e16:	2210      	movs	r2, #16
 8009e18:	e7b7      	b.n	8009d8a <_printf_i+0xd2>
 8009e1a:	064d      	lsls	r5, r1, #25
 8009e1c:	bf48      	it	mi
 8009e1e:	b29b      	uxthmi	r3, r3
 8009e20:	e7ef      	b.n	8009e02 <_printf_i+0x14a>
 8009e22:	4665      	mov	r5, ip
 8009e24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e28:	fb02 3311 	mls	r3, r2, r1, r3
 8009e2c:	5cc3      	ldrb	r3, [r0, r3]
 8009e2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009e32:	460b      	mov	r3, r1
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d1f5      	bne.n	8009e24 <_printf_i+0x16c>
 8009e38:	e7b9      	b.n	8009dae <_printf_i+0xf6>
 8009e3a:	6813      	ldr	r3, [r2, #0]
 8009e3c:	6825      	ldr	r5, [r4, #0]
 8009e3e:	1d18      	adds	r0, r3, #4
 8009e40:	6961      	ldr	r1, [r4, #20]
 8009e42:	6010      	str	r0, [r2, #0]
 8009e44:	0628      	lsls	r0, r5, #24
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	d501      	bpl.n	8009e4e <_printf_i+0x196>
 8009e4a:	6019      	str	r1, [r3, #0]
 8009e4c:	e002      	b.n	8009e54 <_printf_i+0x19c>
 8009e4e:	066a      	lsls	r2, r5, #25
 8009e50:	d5fb      	bpl.n	8009e4a <_printf_i+0x192>
 8009e52:	8019      	strh	r1, [r3, #0]
 8009e54:	2300      	movs	r3, #0
 8009e56:	4665      	mov	r5, ip
 8009e58:	6123      	str	r3, [r4, #16]
 8009e5a:	e7b9      	b.n	8009dd0 <_printf_i+0x118>
 8009e5c:	6813      	ldr	r3, [r2, #0]
 8009e5e:	1d19      	adds	r1, r3, #4
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	681d      	ldr	r5, [r3, #0]
 8009e64:	6862      	ldr	r2, [r4, #4]
 8009e66:	2100      	movs	r1, #0
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f000 feaf 	bl	800abcc <memchr>
 8009e6e:	b108      	cbz	r0, 8009e74 <_printf_i+0x1bc>
 8009e70:	1b40      	subs	r0, r0, r5
 8009e72:	6060      	str	r0, [r4, #4]
 8009e74:	6863      	ldr	r3, [r4, #4]
 8009e76:	6123      	str	r3, [r4, #16]
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e7e:	e7a7      	b.n	8009dd0 <_printf_i+0x118>
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	462a      	mov	r2, r5
 8009e84:	4639      	mov	r1, r7
 8009e86:	4630      	mov	r0, r6
 8009e88:	47c0      	blx	r8
 8009e8a:	3001      	adds	r0, #1
 8009e8c:	d0aa      	beq.n	8009de4 <_printf_i+0x12c>
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	079b      	lsls	r3, r3, #30
 8009e92:	d413      	bmi.n	8009ebc <_printf_i+0x204>
 8009e94:	68e0      	ldr	r0, [r4, #12]
 8009e96:	9b03      	ldr	r3, [sp, #12]
 8009e98:	4298      	cmp	r0, r3
 8009e9a:	bfb8      	it	lt
 8009e9c:	4618      	movlt	r0, r3
 8009e9e:	e7a3      	b.n	8009de8 <_printf_i+0x130>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	464a      	mov	r2, r9
 8009ea4:	4639      	mov	r1, r7
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	47c0      	blx	r8
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d09a      	beq.n	8009de4 <_printf_i+0x12c>
 8009eae:	3501      	adds	r5, #1
 8009eb0:	68e3      	ldr	r3, [r4, #12]
 8009eb2:	9a03      	ldr	r2, [sp, #12]
 8009eb4:	1a9b      	subs	r3, r3, r2
 8009eb6:	42ab      	cmp	r3, r5
 8009eb8:	dcf2      	bgt.n	8009ea0 <_printf_i+0x1e8>
 8009eba:	e7eb      	b.n	8009e94 <_printf_i+0x1dc>
 8009ebc:	2500      	movs	r5, #0
 8009ebe:	f104 0919 	add.w	r9, r4, #25
 8009ec2:	e7f5      	b.n	8009eb0 <_printf_i+0x1f8>
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1ac      	bne.n	8009e22 <_printf_i+0x16a>
 8009ec8:	7803      	ldrb	r3, [r0, #0]
 8009eca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ece:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ed2:	e76c      	b.n	8009dae <_printf_i+0xf6>
 8009ed4:	0800c392 	.word	0x0800c392
 8009ed8:	0800c3a3 	.word	0x0800c3a3

08009edc <siprintf>:
 8009edc:	b40e      	push	{r1, r2, r3}
 8009ede:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ee2:	b500      	push	{lr}
 8009ee4:	b09c      	sub	sp, #112	; 0x70
 8009ee6:	ab1d      	add	r3, sp, #116	; 0x74
 8009ee8:	9002      	str	r0, [sp, #8]
 8009eea:	9006      	str	r0, [sp, #24]
 8009eec:	9107      	str	r1, [sp, #28]
 8009eee:	9104      	str	r1, [sp, #16]
 8009ef0:	4808      	ldr	r0, [pc, #32]	; (8009f14 <siprintf+0x38>)
 8009ef2:	4909      	ldr	r1, [pc, #36]	; (8009f18 <siprintf+0x3c>)
 8009ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ef8:	9105      	str	r1, [sp, #20]
 8009efa:	6800      	ldr	r0, [r0, #0]
 8009efc:	a902      	add	r1, sp, #8
 8009efe:	9301      	str	r3, [sp, #4]
 8009f00:	f001 fa68 	bl	800b3d4 <_svfiprintf_r>
 8009f04:	2200      	movs	r2, #0
 8009f06:	9b02      	ldr	r3, [sp, #8]
 8009f08:	701a      	strb	r2, [r3, #0]
 8009f0a:	b01c      	add	sp, #112	; 0x70
 8009f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f10:	b003      	add	sp, #12
 8009f12:	4770      	bx	lr
 8009f14:	2000001c 	.word	0x2000001c
 8009f18:	ffff0208 	.word	0xffff0208

08009f1c <quorem>:
 8009f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	6903      	ldr	r3, [r0, #16]
 8009f22:	690c      	ldr	r4, [r1, #16]
 8009f24:	4680      	mov	r8, r0
 8009f26:	42a3      	cmp	r3, r4
 8009f28:	f2c0 8084 	blt.w	800a034 <quorem+0x118>
 8009f2c:	3c01      	subs	r4, #1
 8009f2e:	f101 0714 	add.w	r7, r1, #20
 8009f32:	f100 0614 	add.w	r6, r0, #20
 8009f36:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f3a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f3e:	3501      	adds	r5, #1
 8009f40:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009f48:	eb06 030c 	add.w	r3, r6, ip
 8009f4c:	eb07 090c 	add.w	r9, r7, ip
 8009f50:	9301      	str	r3, [sp, #4]
 8009f52:	b39d      	cbz	r5, 8009fbc <quorem+0xa0>
 8009f54:	f04f 0a00 	mov.w	sl, #0
 8009f58:	4638      	mov	r0, r7
 8009f5a:	46b6      	mov	lr, r6
 8009f5c:	46d3      	mov	fp, sl
 8009f5e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f62:	b293      	uxth	r3, r2
 8009f64:	fb05 a303 	mla	r3, r5, r3, sl
 8009f68:	0c12      	lsrs	r2, r2, #16
 8009f6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f6e:	fb05 a202 	mla	r2, r5, r2, sl
 8009f72:	b29b      	uxth	r3, r3
 8009f74:	ebab 0303 	sub.w	r3, fp, r3
 8009f78:	f8de b000 	ldr.w	fp, [lr]
 8009f7c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009f80:	fa1f fb8b 	uxth.w	fp, fp
 8009f84:	445b      	add	r3, fp
 8009f86:	fa1f fb82 	uxth.w	fp, r2
 8009f8a:	f8de 2000 	ldr.w	r2, [lr]
 8009f8e:	4581      	cmp	r9, r0
 8009f90:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009f94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f9e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009fa2:	f84e 3b04 	str.w	r3, [lr], #4
 8009fa6:	d2da      	bcs.n	8009f5e <quorem+0x42>
 8009fa8:	f856 300c 	ldr.w	r3, [r6, ip]
 8009fac:	b933      	cbnz	r3, 8009fbc <quorem+0xa0>
 8009fae:	9b01      	ldr	r3, [sp, #4]
 8009fb0:	3b04      	subs	r3, #4
 8009fb2:	429e      	cmp	r6, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	d331      	bcc.n	800a01c <quorem+0x100>
 8009fb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fbc:	4640      	mov	r0, r8
 8009fbe:	f001 f833 	bl	800b028 <__mcmp>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	db26      	blt.n	800a014 <quorem+0xf8>
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f04f 0c00 	mov.w	ip, #0
 8009fcc:	3501      	adds	r5, #1
 8009fce:	f857 1b04 	ldr.w	r1, [r7], #4
 8009fd2:	f8d0 e000 	ldr.w	lr, [r0]
 8009fd6:	b28b      	uxth	r3, r1
 8009fd8:	ebac 0303 	sub.w	r3, ip, r3
 8009fdc:	fa1f f28e 	uxth.w	r2, lr
 8009fe0:	4413      	add	r3, r2
 8009fe2:	0c0a      	lsrs	r2, r1, #16
 8009fe4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fe8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ff2:	45b9      	cmp	r9, r7
 8009ff4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ff8:	f840 3b04 	str.w	r3, [r0], #4
 8009ffc:	d2e7      	bcs.n	8009fce <quorem+0xb2>
 8009ffe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a002:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a006:	b92a      	cbnz	r2, 800a014 <quorem+0xf8>
 800a008:	3b04      	subs	r3, #4
 800a00a:	429e      	cmp	r6, r3
 800a00c:	461a      	mov	r2, r3
 800a00e:	d30b      	bcc.n	800a028 <quorem+0x10c>
 800a010:	f8c8 4010 	str.w	r4, [r8, #16]
 800a014:	4628      	mov	r0, r5
 800a016:	b003      	add	sp, #12
 800a018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a01c:	6812      	ldr	r2, [r2, #0]
 800a01e:	3b04      	subs	r3, #4
 800a020:	2a00      	cmp	r2, #0
 800a022:	d1c9      	bne.n	8009fb8 <quorem+0x9c>
 800a024:	3c01      	subs	r4, #1
 800a026:	e7c4      	b.n	8009fb2 <quorem+0x96>
 800a028:	6812      	ldr	r2, [r2, #0]
 800a02a:	3b04      	subs	r3, #4
 800a02c:	2a00      	cmp	r2, #0
 800a02e:	d1ef      	bne.n	800a010 <quorem+0xf4>
 800a030:	3c01      	subs	r4, #1
 800a032:	e7ea      	b.n	800a00a <quorem+0xee>
 800a034:	2000      	movs	r0, #0
 800a036:	e7ee      	b.n	800a016 <quorem+0xfa>

0800a038 <_dtoa_r>:
 800a038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03c:	4616      	mov	r6, r2
 800a03e:	461f      	mov	r7, r3
 800a040:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a042:	b095      	sub	sp, #84	; 0x54
 800a044:	4604      	mov	r4, r0
 800a046:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800a04a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a04e:	b93d      	cbnz	r5, 800a060 <_dtoa_r+0x28>
 800a050:	2010      	movs	r0, #16
 800a052:	f000 fdb3 	bl	800abbc <malloc>
 800a056:	6260      	str	r0, [r4, #36]	; 0x24
 800a058:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a05c:	6005      	str	r5, [r0, #0]
 800a05e:	60c5      	str	r5, [r0, #12]
 800a060:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a062:	6819      	ldr	r1, [r3, #0]
 800a064:	b151      	cbz	r1, 800a07c <_dtoa_r+0x44>
 800a066:	685a      	ldr	r2, [r3, #4]
 800a068:	2301      	movs	r3, #1
 800a06a:	4093      	lsls	r3, r2
 800a06c:	604a      	str	r2, [r1, #4]
 800a06e:	608b      	str	r3, [r1, #8]
 800a070:	4620      	mov	r0, r4
 800a072:	f000 fdf8 	bl	800ac66 <_Bfree>
 800a076:	2200      	movs	r2, #0
 800a078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07a:	601a      	str	r2, [r3, #0]
 800a07c:	1e3b      	subs	r3, r7, #0
 800a07e:	bfaf      	iteee	ge
 800a080:	2300      	movge	r3, #0
 800a082:	2201      	movlt	r2, #1
 800a084:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a088:	9303      	strlt	r3, [sp, #12]
 800a08a:	bfac      	ite	ge
 800a08c:	f8c8 3000 	strge.w	r3, [r8]
 800a090:	f8c8 2000 	strlt.w	r2, [r8]
 800a094:	4bae      	ldr	r3, [pc, #696]	; (800a350 <_dtoa_r+0x318>)
 800a096:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a09a:	ea33 0308 	bics.w	r3, r3, r8
 800a09e:	d11b      	bne.n	800a0d8 <_dtoa_r+0xa0>
 800a0a0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	9b02      	ldr	r3, [sp, #8]
 800a0aa:	b923      	cbnz	r3, 800a0b6 <_dtoa_r+0x7e>
 800a0ac:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	f000 8545 	beq.w	800ab40 <_dtoa_r+0xb08>
 800a0b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0b8:	b953      	cbnz	r3, 800a0d0 <_dtoa_r+0x98>
 800a0ba:	4ba6      	ldr	r3, [pc, #664]	; (800a354 <_dtoa_r+0x31c>)
 800a0bc:	e021      	b.n	800a102 <_dtoa_r+0xca>
 800a0be:	4ba6      	ldr	r3, [pc, #664]	; (800a358 <_dtoa_r+0x320>)
 800a0c0:	9306      	str	r3, [sp, #24]
 800a0c2:	3308      	adds	r3, #8
 800a0c4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a0c6:	6013      	str	r3, [r2, #0]
 800a0c8:	9806      	ldr	r0, [sp, #24]
 800a0ca:	b015      	add	sp, #84	; 0x54
 800a0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d0:	4ba0      	ldr	r3, [pc, #640]	; (800a354 <_dtoa_r+0x31c>)
 800a0d2:	9306      	str	r3, [sp, #24]
 800a0d4:	3303      	adds	r3, #3
 800a0d6:	e7f5      	b.n	800a0c4 <_dtoa_r+0x8c>
 800a0d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	2300      	movs	r3, #0
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	4639      	mov	r1, r7
 800a0e4:	f7f6 fc9c 	bl	8000a20 <__aeabi_dcmpeq>
 800a0e8:	4682      	mov	sl, r0
 800a0ea:	b160      	cbz	r0, 800a106 <_dtoa_r+0xce>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a0f0:	6013      	str	r3, [r2, #0]
 800a0f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 8520 	beq.w	800ab3a <_dtoa_r+0xb02>
 800a0fa:	4b98      	ldr	r3, [pc, #608]	; (800a35c <_dtoa_r+0x324>)
 800a0fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a0fe:	6013      	str	r3, [r2, #0]
 800a100:	3b01      	subs	r3, #1
 800a102:	9306      	str	r3, [sp, #24]
 800a104:	e7e0      	b.n	800a0c8 <_dtoa_r+0x90>
 800a106:	ab12      	add	r3, sp, #72	; 0x48
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	ab13      	add	r3, sp, #76	; 0x4c
 800a10c:	9300      	str	r3, [sp, #0]
 800a10e:	4632      	mov	r2, r6
 800a110:	463b      	mov	r3, r7
 800a112:	4620      	mov	r0, r4
 800a114:	f001 f800 	bl	800b118 <__d2b>
 800a118:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a11c:	4683      	mov	fp, r0
 800a11e:	2d00      	cmp	r5, #0
 800a120:	d07d      	beq.n	800a21e <_dtoa_r+0x1e6>
 800a122:	46b0      	mov	r8, r6
 800a124:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a128:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800a12c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800a130:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a134:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800a138:	2200      	movs	r2, #0
 800a13a:	4b89      	ldr	r3, [pc, #548]	; (800a360 <_dtoa_r+0x328>)
 800a13c:	4640      	mov	r0, r8
 800a13e:	4649      	mov	r1, r9
 800a140:	f7f6 f84e 	bl	80001e0 <__aeabi_dsub>
 800a144:	a37c      	add	r3, pc, #496	; (adr r3, 800a338 <_dtoa_r+0x300>)
 800a146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14a:	f7f6 fa01 	bl	8000550 <__aeabi_dmul>
 800a14e:	a37c      	add	r3, pc, #496	; (adr r3, 800a340 <_dtoa_r+0x308>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 f846 	bl	80001e4 <__adddf3>
 800a158:	4606      	mov	r6, r0
 800a15a:	4628      	mov	r0, r5
 800a15c:	460f      	mov	r7, r1
 800a15e:	f7f6 f98d 	bl	800047c <__aeabi_i2d>
 800a162:	a379      	add	r3, pc, #484	; (adr r3, 800a348 <_dtoa_r+0x310>)
 800a164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a168:	f7f6 f9f2 	bl	8000550 <__aeabi_dmul>
 800a16c:	4602      	mov	r2, r0
 800a16e:	460b      	mov	r3, r1
 800a170:	4630      	mov	r0, r6
 800a172:	4639      	mov	r1, r7
 800a174:	f7f6 f836 	bl	80001e4 <__adddf3>
 800a178:	4606      	mov	r6, r0
 800a17a:	460f      	mov	r7, r1
 800a17c:	f7f6 fc98 	bl	8000ab0 <__aeabi_d2iz>
 800a180:	2200      	movs	r2, #0
 800a182:	4682      	mov	sl, r0
 800a184:	2300      	movs	r3, #0
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 fc53 	bl	8000a34 <__aeabi_dcmplt>
 800a18e:	b148      	cbz	r0, 800a1a4 <_dtoa_r+0x16c>
 800a190:	4650      	mov	r0, sl
 800a192:	f7f6 f973 	bl	800047c <__aeabi_i2d>
 800a196:	4632      	mov	r2, r6
 800a198:	463b      	mov	r3, r7
 800a19a:	f7f6 fc41 	bl	8000a20 <__aeabi_dcmpeq>
 800a19e:	b908      	cbnz	r0, 800a1a4 <_dtoa_r+0x16c>
 800a1a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1a4:	f1ba 0f16 	cmp.w	sl, #22
 800a1a8:	d85a      	bhi.n	800a260 <_dtoa_r+0x228>
 800a1aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1ae:	496d      	ldr	r1, [pc, #436]	; (800a364 <_dtoa_r+0x32c>)
 800a1b0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1b8:	f7f6 fc5a 	bl	8000a70 <__aeabi_dcmpgt>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d051      	beq.n	800a264 <_dtoa_r+0x22c>
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1c6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1ca:	1b5d      	subs	r5, r3, r5
 800a1cc:	1e6b      	subs	r3, r5, #1
 800a1ce:	9307      	str	r3, [sp, #28]
 800a1d0:	bf43      	ittte	mi
 800a1d2:	2300      	movmi	r3, #0
 800a1d4:	f1c5 0901 	rsbmi	r9, r5, #1
 800a1d8:	9307      	strmi	r3, [sp, #28]
 800a1da:	f04f 0900 	movpl.w	r9, #0
 800a1de:	f1ba 0f00 	cmp.w	sl, #0
 800a1e2:	db41      	blt.n	800a268 <_dtoa_r+0x230>
 800a1e4:	9b07      	ldr	r3, [sp, #28]
 800a1e6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800a1ea:	4453      	add	r3, sl
 800a1ec:	9307      	str	r3, [sp, #28]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9308      	str	r3, [sp, #32]
 800a1f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a1f4:	2b09      	cmp	r3, #9
 800a1f6:	f200 808f 	bhi.w	800a318 <_dtoa_r+0x2e0>
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	bfc4      	itt	gt
 800a1fe:	3b04      	subgt	r3, #4
 800a200:	931e      	strgt	r3, [sp, #120]	; 0x78
 800a202:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a204:	bfc8      	it	gt
 800a206:	2500      	movgt	r5, #0
 800a208:	f1a3 0302 	sub.w	r3, r3, #2
 800a20c:	bfd8      	it	le
 800a20e:	2501      	movle	r5, #1
 800a210:	2b03      	cmp	r3, #3
 800a212:	f200 808d 	bhi.w	800a330 <_dtoa_r+0x2f8>
 800a216:	e8df f003 	tbb	[pc, r3]
 800a21a:	7d7b      	.short	0x7d7b
 800a21c:	6f2f      	.short	0x6f2f
 800a21e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a222:	441d      	add	r5, r3
 800a224:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a228:	2820      	cmp	r0, #32
 800a22a:	dd13      	ble.n	800a254 <_dtoa_r+0x21c>
 800a22c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a230:	9b02      	ldr	r3, [sp, #8]
 800a232:	fa08 f800 	lsl.w	r8, r8, r0
 800a236:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a23a:	fa23 f000 	lsr.w	r0, r3, r0
 800a23e:	ea48 0000 	orr.w	r0, r8, r0
 800a242:	f7f6 f90b 	bl	800045c <__aeabi_ui2d>
 800a246:	2301      	movs	r3, #1
 800a248:	4680      	mov	r8, r0
 800a24a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800a24e:	3d01      	subs	r5, #1
 800a250:	9310      	str	r3, [sp, #64]	; 0x40
 800a252:	e771      	b.n	800a138 <_dtoa_r+0x100>
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	f1c0 0020 	rsb	r0, r0, #32
 800a25a:	fa03 f000 	lsl.w	r0, r3, r0
 800a25e:	e7f0      	b.n	800a242 <_dtoa_r+0x20a>
 800a260:	2301      	movs	r3, #1
 800a262:	e7b0      	b.n	800a1c6 <_dtoa_r+0x18e>
 800a264:	900d      	str	r0, [sp, #52]	; 0x34
 800a266:	e7af      	b.n	800a1c8 <_dtoa_r+0x190>
 800a268:	f1ca 0300 	rsb	r3, sl, #0
 800a26c:	9308      	str	r3, [sp, #32]
 800a26e:	2300      	movs	r3, #0
 800a270:	eba9 090a 	sub.w	r9, r9, sl
 800a274:	930c      	str	r3, [sp, #48]	; 0x30
 800a276:	e7bc      	b.n	800a1f2 <_dtoa_r+0x1ba>
 800a278:	2301      	movs	r3, #1
 800a27a:	9309      	str	r3, [sp, #36]	; 0x24
 800a27c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a27e:	2b00      	cmp	r3, #0
 800a280:	dd74      	ble.n	800a36c <_dtoa_r+0x334>
 800a282:	4698      	mov	r8, r3
 800a284:	9304      	str	r3, [sp, #16]
 800a286:	2200      	movs	r2, #0
 800a288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a28a:	6072      	str	r2, [r6, #4]
 800a28c:	2204      	movs	r2, #4
 800a28e:	f102 0014 	add.w	r0, r2, #20
 800a292:	4298      	cmp	r0, r3
 800a294:	6871      	ldr	r1, [r6, #4]
 800a296:	d96e      	bls.n	800a376 <_dtoa_r+0x33e>
 800a298:	4620      	mov	r0, r4
 800a29a:	f000 fcb0 	bl	800abfe <_Balloc>
 800a29e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2a0:	6030      	str	r0, [r6, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f1b8 0f0e 	cmp.w	r8, #14
 800a2a8:	9306      	str	r3, [sp, #24]
 800a2aa:	f200 80ed 	bhi.w	800a488 <_dtoa_r+0x450>
 800a2ae:	2d00      	cmp	r5, #0
 800a2b0:	f000 80ea 	beq.w	800a488 <_dtoa_r+0x450>
 800a2b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2b8:	f1ba 0f00 	cmp.w	sl, #0
 800a2bc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a2c0:	dd77      	ble.n	800a3b2 <_dtoa_r+0x37a>
 800a2c2:	4a28      	ldr	r2, [pc, #160]	; (800a364 <_dtoa_r+0x32c>)
 800a2c4:	f00a 030f 	and.w	r3, sl, #15
 800a2c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a2cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2d0:	06f0      	lsls	r0, r6, #27
 800a2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a2da:	d568      	bpl.n	800a3ae <_dtoa_r+0x376>
 800a2dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a2e0:	4b21      	ldr	r3, [pc, #132]	; (800a368 <_dtoa_r+0x330>)
 800a2e2:	2503      	movs	r5, #3
 800a2e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2e8:	f7f6 fa5c 	bl	80007a4 <__aeabi_ddiv>
 800a2ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2f0:	f006 060f 	and.w	r6, r6, #15
 800a2f4:	4f1c      	ldr	r7, [pc, #112]	; (800a368 <_dtoa_r+0x330>)
 800a2f6:	e04f      	b.n	800a398 <_dtoa_r+0x360>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	9309      	str	r3, [sp, #36]	; 0x24
 800a2fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a2fe:	4453      	add	r3, sl
 800a300:	f103 0801 	add.w	r8, r3, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	4643      	mov	r3, r8
 800a308:	2b01      	cmp	r3, #1
 800a30a:	bfb8      	it	lt
 800a30c:	2301      	movlt	r3, #1
 800a30e:	e7ba      	b.n	800a286 <_dtoa_r+0x24e>
 800a310:	2300      	movs	r3, #0
 800a312:	e7b2      	b.n	800a27a <_dtoa_r+0x242>
 800a314:	2300      	movs	r3, #0
 800a316:	e7f0      	b.n	800a2fa <_dtoa_r+0x2c2>
 800a318:	2501      	movs	r5, #1
 800a31a:	2300      	movs	r3, #0
 800a31c:	9509      	str	r5, [sp, #36]	; 0x24
 800a31e:	931e      	str	r3, [sp, #120]	; 0x78
 800a320:	f04f 33ff 	mov.w	r3, #4294967295
 800a324:	2200      	movs	r2, #0
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	4698      	mov	r8, r3
 800a32a:	2312      	movs	r3, #18
 800a32c:	921f      	str	r2, [sp, #124]	; 0x7c
 800a32e:	e7aa      	b.n	800a286 <_dtoa_r+0x24e>
 800a330:	2301      	movs	r3, #1
 800a332:	9309      	str	r3, [sp, #36]	; 0x24
 800a334:	e7f4      	b.n	800a320 <_dtoa_r+0x2e8>
 800a336:	bf00      	nop
 800a338:	636f4361 	.word	0x636f4361
 800a33c:	3fd287a7 	.word	0x3fd287a7
 800a340:	8b60c8b3 	.word	0x8b60c8b3
 800a344:	3fc68a28 	.word	0x3fc68a28
 800a348:	509f79fb 	.word	0x509f79fb
 800a34c:	3fd34413 	.word	0x3fd34413
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	0800c3bd 	.word	0x0800c3bd
 800a358:	0800c3b4 	.word	0x0800c3b4
 800a35c:	0800c391 	.word	0x0800c391
 800a360:	3ff80000 	.word	0x3ff80000
 800a364:	0800c3f0 	.word	0x0800c3f0
 800a368:	0800c3c8 	.word	0x0800c3c8
 800a36c:	2301      	movs	r3, #1
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	4698      	mov	r8, r3
 800a372:	461a      	mov	r2, r3
 800a374:	e7da      	b.n	800a32c <_dtoa_r+0x2f4>
 800a376:	3101      	adds	r1, #1
 800a378:	6071      	str	r1, [r6, #4]
 800a37a:	0052      	lsls	r2, r2, #1
 800a37c:	e787      	b.n	800a28e <_dtoa_r+0x256>
 800a37e:	07f1      	lsls	r1, r6, #31
 800a380:	d508      	bpl.n	800a394 <_dtoa_r+0x35c>
 800a382:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a386:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a38a:	f7f6 f8e1 	bl	8000550 <__aeabi_dmul>
 800a38e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a392:	3501      	adds	r5, #1
 800a394:	1076      	asrs	r6, r6, #1
 800a396:	3708      	adds	r7, #8
 800a398:	2e00      	cmp	r6, #0
 800a39a:	d1f0      	bne.n	800a37e <_dtoa_r+0x346>
 800a39c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a3a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3a4:	f7f6 f9fe 	bl	80007a4 <__aeabi_ddiv>
 800a3a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3ac:	e01b      	b.n	800a3e6 <_dtoa_r+0x3ae>
 800a3ae:	2502      	movs	r5, #2
 800a3b0:	e7a0      	b.n	800a2f4 <_dtoa_r+0x2bc>
 800a3b2:	f000 80a4 	beq.w	800a4fe <_dtoa_r+0x4c6>
 800a3b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a3ba:	f1ca 0600 	rsb	r6, sl, #0
 800a3be:	4ba0      	ldr	r3, [pc, #640]	; (800a640 <_dtoa_r+0x608>)
 800a3c0:	f006 020f 	and.w	r2, r6, #15
 800a3c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3cc:	f7f6 f8c0 	bl	8000550 <__aeabi_dmul>
 800a3d0:	2502      	movs	r5, #2
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d8:	4f9a      	ldr	r7, [pc, #616]	; (800a644 <_dtoa_r+0x60c>)
 800a3da:	1136      	asrs	r6, r6, #4
 800a3dc:	2e00      	cmp	r6, #0
 800a3de:	f040 8083 	bne.w	800a4e8 <_dtoa_r+0x4b0>
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e0      	bne.n	800a3a8 <_dtoa_r+0x370>
 800a3e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 808a 	beq.w	800a502 <_dtoa_r+0x4ca>
 800a3ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3f2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800a3f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4b92      	ldr	r3, [pc, #584]	; (800a648 <_dtoa_r+0x610>)
 800a3fe:	f7f6 fb19 	bl	8000a34 <__aeabi_dcmplt>
 800a402:	2800      	cmp	r0, #0
 800a404:	d07d      	beq.n	800a502 <_dtoa_r+0x4ca>
 800a406:	f1b8 0f00 	cmp.w	r8, #0
 800a40a:	d07a      	beq.n	800a502 <_dtoa_r+0x4ca>
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	dd36      	ble.n	800a480 <_dtoa_r+0x448>
 800a412:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a416:	2200      	movs	r2, #0
 800a418:	4b8c      	ldr	r3, [pc, #560]	; (800a64c <_dtoa_r+0x614>)
 800a41a:	f7f6 f899 	bl	8000550 <__aeabi_dmul>
 800a41e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a422:	9e04      	ldr	r6, [sp, #16]
 800a424:	f10a 37ff 	add.w	r7, sl, #4294967295
 800a428:	3501      	adds	r5, #1
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7f6 f826 	bl	800047c <__aeabi_i2d>
 800a430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a434:	f7f6 f88c 	bl	8000550 <__aeabi_dmul>
 800a438:	2200      	movs	r2, #0
 800a43a:	4b85      	ldr	r3, [pc, #532]	; (800a650 <_dtoa_r+0x618>)
 800a43c:	f7f5 fed2 	bl	80001e4 <__adddf3>
 800a440:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800a444:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a448:	950b      	str	r5, [sp, #44]	; 0x2c
 800a44a:	2e00      	cmp	r6, #0
 800a44c:	d15c      	bne.n	800a508 <_dtoa_r+0x4d0>
 800a44e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a452:	2200      	movs	r2, #0
 800a454:	4b7f      	ldr	r3, [pc, #508]	; (800a654 <_dtoa_r+0x61c>)
 800a456:	f7f5 fec3 	bl	80001e0 <__aeabi_dsub>
 800a45a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a45c:	462b      	mov	r3, r5
 800a45e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a462:	f7f6 fb05 	bl	8000a70 <__aeabi_dcmpgt>
 800a466:	2800      	cmp	r0, #0
 800a468:	f040 8281 	bne.w	800a96e <_dtoa_r+0x936>
 800a46c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a472:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a476:	f7f6 fadd 	bl	8000a34 <__aeabi_dcmplt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	f040 8275 	bne.w	800a96a <_dtoa_r+0x932>
 800a480:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a484:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a488:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	f2c0 814b 	blt.w	800a726 <_dtoa_r+0x6ee>
 800a490:	f1ba 0f0e 	cmp.w	sl, #14
 800a494:	f300 8147 	bgt.w	800a726 <_dtoa_r+0x6ee>
 800a498:	4b69      	ldr	r3, [pc, #420]	; (800a640 <_dtoa_r+0x608>)
 800a49a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f280 80d7 	bge.w	800a65c <_dtoa_r+0x624>
 800a4ae:	f1b8 0f00 	cmp.w	r8, #0
 800a4b2:	f300 80d3 	bgt.w	800a65c <_dtoa_r+0x624>
 800a4b6:	f040 8257 	bne.w	800a968 <_dtoa_r+0x930>
 800a4ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	4b64      	ldr	r3, [pc, #400]	; (800a654 <_dtoa_r+0x61c>)
 800a4c2:	f7f6 f845 	bl	8000550 <__aeabi_dmul>
 800a4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ca:	f7f6 fac7 	bl	8000a5c <__aeabi_dcmpge>
 800a4ce:	4646      	mov	r6, r8
 800a4d0:	4647      	mov	r7, r8
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f040 822d 	bne.w	800a932 <_dtoa_r+0x8fa>
 800a4d8:	9b06      	ldr	r3, [sp, #24]
 800a4da:	9a06      	ldr	r2, [sp, #24]
 800a4dc:	1c5d      	adds	r5, r3, #1
 800a4de:	2331      	movs	r3, #49	; 0x31
 800a4e0:	f10a 0a01 	add.w	sl, sl, #1
 800a4e4:	7013      	strb	r3, [r2, #0]
 800a4e6:	e228      	b.n	800a93a <_dtoa_r+0x902>
 800a4e8:	07f2      	lsls	r2, r6, #31
 800a4ea:	d505      	bpl.n	800a4f8 <_dtoa_r+0x4c0>
 800a4ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4f0:	f7f6 f82e 	bl	8000550 <__aeabi_dmul>
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	3501      	adds	r5, #1
 800a4f8:	1076      	asrs	r6, r6, #1
 800a4fa:	3708      	adds	r7, #8
 800a4fc:	e76e      	b.n	800a3dc <_dtoa_r+0x3a4>
 800a4fe:	2502      	movs	r5, #2
 800a500:	e771      	b.n	800a3e6 <_dtoa_r+0x3ae>
 800a502:	4657      	mov	r7, sl
 800a504:	4646      	mov	r6, r8
 800a506:	e790      	b.n	800a42a <_dtoa_r+0x3f2>
 800a508:	4b4d      	ldr	r3, [pc, #308]	; (800a640 <_dtoa_r+0x608>)
 800a50a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a50e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d048      	beq.n	800a5aa <_dtoa_r+0x572>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	2000      	movs	r0, #0
 800a51e:	494e      	ldr	r1, [pc, #312]	; (800a658 <_dtoa_r+0x620>)
 800a520:	f7f6 f940 	bl	80007a4 <__aeabi_ddiv>
 800a524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a528:	f7f5 fe5a 	bl	80001e0 <__aeabi_dsub>
 800a52c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a530:	9d06      	ldr	r5, [sp, #24]
 800a532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a536:	f7f6 fabb 	bl	8000ab0 <__aeabi_d2iz>
 800a53a:	9011      	str	r0, [sp, #68]	; 0x44
 800a53c:	f7f5 ff9e 	bl	800047c <__aeabi_i2d>
 800a540:	4602      	mov	r2, r0
 800a542:	460b      	mov	r3, r1
 800a544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a548:	f7f5 fe4a 	bl	80001e0 <__aeabi_dsub>
 800a54c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a54e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a552:	3330      	adds	r3, #48	; 0x30
 800a554:	f805 3b01 	strb.w	r3, [r5], #1
 800a558:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a55c:	f7f6 fa6a 	bl	8000a34 <__aeabi_dcmplt>
 800a560:	2800      	cmp	r0, #0
 800a562:	d163      	bne.n	800a62c <_dtoa_r+0x5f4>
 800a564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a568:	2000      	movs	r0, #0
 800a56a:	4937      	ldr	r1, [pc, #220]	; (800a648 <_dtoa_r+0x610>)
 800a56c:	f7f5 fe38 	bl	80001e0 <__aeabi_dsub>
 800a570:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a574:	f7f6 fa5e 	bl	8000a34 <__aeabi_dcmplt>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f040 80b5 	bne.w	800a6e8 <_dtoa_r+0x6b0>
 800a57e:	9b06      	ldr	r3, [sp, #24]
 800a580:	1aeb      	subs	r3, r5, r3
 800a582:	429e      	cmp	r6, r3
 800a584:	f77f af7c 	ble.w	800a480 <_dtoa_r+0x448>
 800a588:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a58c:	2200      	movs	r2, #0
 800a58e:	4b2f      	ldr	r3, [pc, #188]	; (800a64c <_dtoa_r+0x614>)
 800a590:	f7f5 ffde 	bl	8000550 <__aeabi_dmul>
 800a594:	2200      	movs	r2, #0
 800a596:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a59a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a59e:	4b2b      	ldr	r3, [pc, #172]	; (800a64c <_dtoa_r+0x614>)
 800a5a0:	f7f5 ffd6 	bl	8000550 <__aeabi_dmul>
 800a5a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5a8:	e7c3      	b.n	800a532 <_dtoa_r+0x4fa>
 800a5aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a5ae:	f7f5 ffcf 	bl	8000550 <__aeabi_dmul>
 800a5b2:	9b06      	ldr	r3, [sp, #24]
 800a5b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a5b8:	199d      	adds	r5, r3, r6
 800a5ba:	461e      	mov	r6, r3
 800a5bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5c0:	f7f6 fa76 	bl	8000ab0 <__aeabi_d2iz>
 800a5c4:	9011      	str	r0, [sp, #68]	; 0x44
 800a5c6:	f7f5 ff59 	bl	800047c <__aeabi_i2d>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	460b      	mov	r3, r1
 800a5ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5d2:	f7f5 fe05 	bl	80001e0 <__aeabi_dsub>
 800a5d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5dc:	3330      	adds	r3, #48	; 0x30
 800a5de:	f806 3b01 	strb.w	r3, [r6], #1
 800a5e2:	42ae      	cmp	r6, r5
 800a5e4:	f04f 0200 	mov.w	r2, #0
 800a5e8:	d124      	bne.n	800a634 <_dtoa_r+0x5fc>
 800a5ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5ee:	4b1a      	ldr	r3, [pc, #104]	; (800a658 <_dtoa_r+0x620>)
 800a5f0:	f7f5 fdf8 	bl	80001e4 <__adddf3>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5fc:	f7f6 fa38 	bl	8000a70 <__aeabi_dcmpgt>
 800a600:	2800      	cmp	r0, #0
 800a602:	d171      	bne.n	800a6e8 <_dtoa_r+0x6b0>
 800a604:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a608:	2000      	movs	r0, #0
 800a60a:	4913      	ldr	r1, [pc, #76]	; (800a658 <_dtoa_r+0x620>)
 800a60c:	f7f5 fde8 	bl	80001e0 <__aeabi_dsub>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a618:	f7f6 fa0c 	bl	8000a34 <__aeabi_dcmplt>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f af2f 	beq.w	800a480 <_dtoa_r+0x448>
 800a622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a626:	1e6a      	subs	r2, r5, #1
 800a628:	2b30      	cmp	r3, #48	; 0x30
 800a62a:	d001      	beq.n	800a630 <_dtoa_r+0x5f8>
 800a62c:	46ba      	mov	sl, r7
 800a62e:	e04a      	b.n	800a6c6 <_dtoa_r+0x68e>
 800a630:	4615      	mov	r5, r2
 800a632:	e7f6      	b.n	800a622 <_dtoa_r+0x5ea>
 800a634:	4b05      	ldr	r3, [pc, #20]	; (800a64c <_dtoa_r+0x614>)
 800a636:	f7f5 ff8b 	bl	8000550 <__aeabi_dmul>
 800a63a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a63e:	e7bd      	b.n	800a5bc <_dtoa_r+0x584>
 800a640:	0800c3f0 	.word	0x0800c3f0
 800a644:	0800c3c8 	.word	0x0800c3c8
 800a648:	3ff00000 	.word	0x3ff00000
 800a64c:	40240000 	.word	0x40240000
 800a650:	401c0000 	.word	0x401c0000
 800a654:	40140000 	.word	0x40140000
 800a658:	3fe00000 	.word	0x3fe00000
 800a65c:	9d06      	ldr	r5, [sp, #24]
 800a65e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a666:	4630      	mov	r0, r6
 800a668:	4639      	mov	r1, r7
 800a66a:	f7f6 f89b 	bl	80007a4 <__aeabi_ddiv>
 800a66e:	f7f6 fa1f 	bl	8000ab0 <__aeabi_d2iz>
 800a672:	4681      	mov	r9, r0
 800a674:	f7f5 ff02 	bl	800047c <__aeabi_i2d>
 800a678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a67c:	f7f5 ff68 	bl	8000550 <__aeabi_dmul>
 800a680:	4602      	mov	r2, r0
 800a682:	460b      	mov	r3, r1
 800a684:	4630      	mov	r0, r6
 800a686:	4639      	mov	r1, r7
 800a688:	f7f5 fdaa 	bl	80001e0 <__aeabi_dsub>
 800a68c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800a690:	f805 6b01 	strb.w	r6, [r5], #1
 800a694:	9e06      	ldr	r6, [sp, #24]
 800a696:	4602      	mov	r2, r0
 800a698:	1bae      	subs	r6, r5, r6
 800a69a:	45b0      	cmp	r8, r6
 800a69c:	460b      	mov	r3, r1
 800a69e:	d135      	bne.n	800a70c <_dtoa_r+0x6d4>
 800a6a0:	f7f5 fda0 	bl	80001e4 <__adddf3>
 800a6a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	f7f6 f9e0 	bl	8000a70 <__aeabi_dcmpgt>
 800a6b0:	b9c8      	cbnz	r0, 800a6e6 <_dtoa_r+0x6ae>
 800a6b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	4639      	mov	r1, r7
 800a6ba:	f7f6 f9b1 	bl	8000a20 <__aeabi_dcmpeq>
 800a6be:	b110      	cbz	r0, 800a6c6 <_dtoa_r+0x68e>
 800a6c0:	f019 0f01 	tst.w	r9, #1
 800a6c4:	d10f      	bne.n	800a6e6 <_dtoa_r+0x6ae>
 800a6c6:	4659      	mov	r1, fp
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 facc 	bl	800ac66 <_Bfree>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6d2:	702b      	strb	r3, [r5, #0]
 800a6d4:	f10a 0301 	add.w	r3, sl, #1
 800a6d8:	6013      	str	r3, [r2, #0]
 800a6da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f43f acf3 	beq.w	800a0c8 <_dtoa_r+0x90>
 800a6e2:	601d      	str	r5, [r3, #0]
 800a6e4:	e4f0      	b.n	800a0c8 <_dtoa_r+0x90>
 800a6e6:	4657      	mov	r7, sl
 800a6e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6ec:	1e6b      	subs	r3, r5, #1
 800a6ee:	2a39      	cmp	r2, #57	; 0x39
 800a6f0:	d106      	bne.n	800a700 <_dtoa_r+0x6c8>
 800a6f2:	9a06      	ldr	r2, [sp, #24]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	d107      	bne.n	800a708 <_dtoa_r+0x6d0>
 800a6f8:	2330      	movs	r3, #48	; 0x30
 800a6fa:	7013      	strb	r3, [r2, #0]
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	3701      	adds	r7, #1
 800a700:	781a      	ldrb	r2, [r3, #0]
 800a702:	3201      	adds	r2, #1
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	e791      	b.n	800a62c <_dtoa_r+0x5f4>
 800a708:	461d      	mov	r5, r3
 800a70a:	e7ed      	b.n	800a6e8 <_dtoa_r+0x6b0>
 800a70c:	2200      	movs	r2, #0
 800a70e:	4b99      	ldr	r3, [pc, #612]	; (800a974 <_dtoa_r+0x93c>)
 800a710:	f7f5 ff1e 	bl	8000550 <__aeabi_dmul>
 800a714:	2200      	movs	r2, #0
 800a716:	2300      	movs	r3, #0
 800a718:	4606      	mov	r6, r0
 800a71a:	460f      	mov	r7, r1
 800a71c:	f7f6 f980 	bl	8000a20 <__aeabi_dcmpeq>
 800a720:	2800      	cmp	r0, #0
 800a722:	d09e      	beq.n	800a662 <_dtoa_r+0x62a>
 800a724:	e7cf      	b.n	800a6c6 <_dtoa_r+0x68e>
 800a726:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a728:	2a00      	cmp	r2, #0
 800a72a:	f000 8088 	beq.w	800a83e <_dtoa_r+0x806>
 800a72e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a730:	2a01      	cmp	r2, #1
 800a732:	dc6d      	bgt.n	800a810 <_dtoa_r+0x7d8>
 800a734:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a736:	2a00      	cmp	r2, #0
 800a738:	d066      	beq.n	800a808 <_dtoa_r+0x7d0>
 800a73a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a73e:	464d      	mov	r5, r9
 800a740:	9e08      	ldr	r6, [sp, #32]
 800a742:	9a07      	ldr	r2, [sp, #28]
 800a744:	2101      	movs	r1, #1
 800a746:	441a      	add	r2, r3
 800a748:	4620      	mov	r0, r4
 800a74a:	4499      	add	r9, r3
 800a74c:	9207      	str	r2, [sp, #28]
 800a74e:	f000 fb2a 	bl	800ada6 <__i2b>
 800a752:	4607      	mov	r7, r0
 800a754:	2d00      	cmp	r5, #0
 800a756:	dd0b      	ble.n	800a770 <_dtoa_r+0x738>
 800a758:	9b07      	ldr	r3, [sp, #28]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dd08      	ble.n	800a770 <_dtoa_r+0x738>
 800a75e:	42ab      	cmp	r3, r5
 800a760:	bfa8      	it	ge
 800a762:	462b      	movge	r3, r5
 800a764:	9a07      	ldr	r2, [sp, #28]
 800a766:	eba9 0903 	sub.w	r9, r9, r3
 800a76a:	1aed      	subs	r5, r5, r3
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	9b08      	ldr	r3, [sp, #32]
 800a772:	b1eb      	cbz	r3, 800a7b0 <_dtoa_r+0x778>
 800a774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a776:	2b00      	cmp	r3, #0
 800a778:	d065      	beq.n	800a846 <_dtoa_r+0x80e>
 800a77a:	b18e      	cbz	r6, 800a7a0 <_dtoa_r+0x768>
 800a77c:	4639      	mov	r1, r7
 800a77e:	4632      	mov	r2, r6
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fbaf 	bl	800aee4 <__pow5mult>
 800a786:	465a      	mov	r2, fp
 800a788:	4601      	mov	r1, r0
 800a78a:	4607      	mov	r7, r0
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fb13 	bl	800adb8 <__multiply>
 800a792:	4659      	mov	r1, fp
 800a794:	900a      	str	r0, [sp, #40]	; 0x28
 800a796:	4620      	mov	r0, r4
 800a798:	f000 fa65 	bl	800ac66 <_Bfree>
 800a79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a79e:	469b      	mov	fp, r3
 800a7a0:	9b08      	ldr	r3, [sp, #32]
 800a7a2:	1b9a      	subs	r2, r3, r6
 800a7a4:	d004      	beq.n	800a7b0 <_dtoa_r+0x778>
 800a7a6:	4659      	mov	r1, fp
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	f000 fb9b 	bl	800aee4 <__pow5mult>
 800a7ae:	4683      	mov	fp, r0
 800a7b0:	2101      	movs	r1, #1
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 faf7 	bl	800ada6 <__i2b>
 800a7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f000 81c6 	beq.w	800ab4e <_dtoa_r+0xb16>
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f000 fb8c 	bl	800aee4 <__pow5mult>
 800a7cc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a7ce:	4606      	mov	r6, r0
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	dc3e      	bgt.n	800a852 <_dtoa_r+0x81a>
 800a7d4:	9b02      	ldr	r3, [sp, #8]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d137      	bne.n	800a84a <_dtoa_r+0x812>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d134      	bne.n	800a84e <_dtoa_r+0x816>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7ea:	0d1b      	lsrs	r3, r3, #20
 800a7ec:	051b      	lsls	r3, r3, #20
 800a7ee:	b12b      	cbz	r3, 800a7fc <_dtoa_r+0x7c4>
 800a7f0:	9b07      	ldr	r3, [sp, #28]
 800a7f2:	f109 0901 	add.w	r9, r9, #1
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	9308      	str	r3, [sp, #32]
 800a7fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a800:	2b00      	cmp	r3, #0
 800a802:	d128      	bne.n	800a856 <_dtoa_r+0x81e>
 800a804:	2001      	movs	r0, #1
 800a806:	e02e      	b.n	800a866 <_dtoa_r+0x82e>
 800a808:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a80a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a80e:	e796      	b.n	800a73e <_dtoa_r+0x706>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	f108 36ff 	add.w	r6, r8, #4294967295
 800a816:	42b3      	cmp	r3, r6
 800a818:	bfb7      	itett	lt
 800a81a:	9b08      	ldrlt	r3, [sp, #32]
 800a81c:	1b9e      	subge	r6, r3, r6
 800a81e:	1af2      	sublt	r2, r6, r3
 800a820:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800a822:	bfbf      	itttt	lt
 800a824:	9608      	strlt	r6, [sp, #32]
 800a826:	189b      	addlt	r3, r3, r2
 800a828:	930c      	strlt	r3, [sp, #48]	; 0x30
 800a82a:	2600      	movlt	r6, #0
 800a82c:	f1b8 0f00 	cmp.w	r8, #0
 800a830:	bfb9      	ittee	lt
 800a832:	eba9 0508 	sublt.w	r5, r9, r8
 800a836:	2300      	movlt	r3, #0
 800a838:	464d      	movge	r5, r9
 800a83a:	4643      	movge	r3, r8
 800a83c:	e781      	b.n	800a742 <_dtoa_r+0x70a>
 800a83e:	9e08      	ldr	r6, [sp, #32]
 800a840:	464d      	mov	r5, r9
 800a842:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a844:	e786      	b.n	800a754 <_dtoa_r+0x71c>
 800a846:	9a08      	ldr	r2, [sp, #32]
 800a848:	e7ad      	b.n	800a7a6 <_dtoa_r+0x76e>
 800a84a:	2300      	movs	r3, #0
 800a84c:	e7d6      	b.n	800a7fc <_dtoa_r+0x7c4>
 800a84e:	9b02      	ldr	r3, [sp, #8]
 800a850:	e7d4      	b.n	800a7fc <_dtoa_r+0x7c4>
 800a852:	2300      	movs	r3, #0
 800a854:	9308      	str	r3, [sp, #32]
 800a856:	6933      	ldr	r3, [r6, #16]
 800a858:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a85c:	6918      	ldr	r0, [r3, #16]
 800a85e:	f000 fa54 	bl	800ad0a <__hi0bits>
 800a862:	f1c0 0020 	rsb	r0, r0, #32
 800a866:	9b07      	ldr	r3, [sp, #28]
 800a868:	4418      	add	r0, r3
 800a86a:	f010 001f 	ands.w	r0, r0, #31
 800a86e:	d047      	beq.n	800a900 <_dtoa_r+0x8c8>
 800a870:	f1c0 0320 	rsb	r3, r0, #32
 800a874:	2b04      	cmp	r3, #4
 800a876:	dd3b      	ble.n	800a8f0 <_dtoa_r+0x8b8>
 800a878:	9b07      	ldr	r3, [sp, #28]
 800a87a:	f1c0 001c 	rsb	r0, r0, #28
 800a87e:	4481      	add	r9, r0
 800a880:	4405      	add	r5, r0
 800a882:	4403      	add	r3, r0
 800a884:	9307      	str	r3, [sp, #28]
 800a886:	f1b9 0f00 	cmp.w	r9, #0
 800a88a:	dd05      	ble.n	800a898 <_dtoa_r+0x860>
 800a88c:	4659      	mov	r1, fp
 800a88e:	464a      	mov	r2, r9
 800a890:	4620      	mov	r0, r4
 800a892:	f000 fb75 	bl	800af80 <__lshift>
 800a896:	4683      	mov	fp, r0
 800a898:	9b07      	ldr	r3, [sp, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dd05      	ble.n	800a8aa <_dtoa_r+0x872>
 800a89e:	4631      	mov	r1, r6
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	4620      	mov	r0, r4
 800a8a4:	f000 fb6c 	bl	800af80 <__lshift>
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ac:	b353      	cbz	r3, 800a904 <_dtoa_r+0x8cc>
 800a8ae:	4631      	mov	r1, r6
 800a8b0:	4658      	mov	r0, fp
 800a8b2:	f000 fbb9 	bl	800b028 <__mcmp>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	da24      	bge.n	800a904 <_dtoa_r+0x8cc>
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	4659      	mov	r1, fp
 800a8be:	220a      	movs	r2, #10
 800a8c0:	4620      	mov	r0, r4
 800a8c2:	f000 f9e7 	bl	800ac94 <__multadd>
 800a8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8cc:	4683      	mov	fp, r0
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f000 8144 	beq.w	800ab5c <_dtoa_r+0xb24>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	220a      	movs	r2, #10
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f9da 	bl	800ac94 <__multadd>
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	4607      	mov	r7, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dc4d      	bgt.n	800a984 <_dtoa_r+0x94c>
 800a8e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	dd4a      	ble.n	800a984 <_dtoa_r+0x94c>
 800a8ee:	e011      	b.n	800a914 <_dtoa_r+0x8dc>
 800a8f0:	d0c9      	beq.n	800a886 <_dtoa_r+0x84e>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	331c      	adds	r3, #28
 800a8f6:	441a      	add	r2, r3
 800a8f8:	4499      	add	r9, r3
 800a8fa:	441d      	add	r5, r3
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	e7c1      	b.n	800a884 <_dtoa_r+0x84c>
 800a900:	4603      	mov	r3, r0
 800a902:	e7f6      	b.n	800a8f2 <_dtoa_r+0x8ba>
 800a904:	f1b8 0f00 	cmp.w	r8, #0
 800a908:	dc36      	bgt.n	800a978 <_dtoa_r+0x940>
 800a90a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	dd33      	ble.n	800a978 <_dtoa_r+0x940>
 800a910:	f8cd 8010 	str.w	r8, [sp, #16]
 800a914:	9b04      	ldr	r3, [sp, #16]
 800a916:	b963      	cbnz	r3, 800a932 <_dtoa_r+0x8fa>
 800a918:	4631      	mov	r1, r6
 800a91a:	2205      	movs	r2, #5
 800a91c:	4620      	mov	r0, r4
 800a91e:	f000 f9b9 	bl	800ac94 <__multadd>
 800a922:	4601      	mov	r1, r0
 800a924:	4606      	mov	r6, r0
 800a926:	4658      	mov	r0, fp
 800a928:	f000 fb7e 	bl	800b028 <__mcmp>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f73f add3 	bgt.w	800a4d8 <_dtoa_r+0x4a0>
 800a932:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a934:	9d06      	ldr	r5, [sp, #24]
 800a936:	ea6f 0a03 	mvn.w	sl, r3
 800a93a:	f04f 0900 	mov.w	r9, #0
 800a93e:	4631      	mov	r1, r6
 800a940:	4620      	mov	r0, r4
 800a942:	f000 f990 	bl	800ac66 <_Bfree>
 800a946:	2f00      	cmp	r7, #0
 800a948:	f43f aebd 	beq.w	800a6c6 <_dtoa_r+0x68e>
 800a94c:	f1b9 0f00 	cmp.w	r9, #0
 800a950:	d005      	beq.n	800a95e <_dtoa_r+0x926>
 800a952:	45b9      	cmp	r9, r7
 800a954:	d003      	beq.n	800a95e <_dtoa_r+0x926>
 800a956:	4649      	mov	r1, r9
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 f984 	bl	800ac66 <_Bfree>
 800a95e:	4639      	mov	r1, r7
 800a960:	4620      	mov	r0, r4
 800a962:	f000 f980 	bl	800ac66 <_Bfree>
 800a966:	e6ae      	b.n	800a6c6 <_dtoa_r+0x68e>
 800a968:	2600      	movs	r6, #0
 800a96a:	4637      	mov	r7, r6
 800a96c:	e7e1      	b.n	800a932 <_dtoa_r+0x8fa>
 800a96e:	46ba      	mov	sl, r7
 800a970:	4637      	mov	r7, r6
 800a972:	e5b1      	b.n	800a4d8 <_dtoa_r+0x4a0>
 800a974:	40240000 	.word	0x40240000
 800a978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a97a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	f000 80f3 	beq.w	800ab6a <_dtoa_r+0xb32>
 800a984:	2d00      	cmp	r5, #0
 800a986:	dd05      	ble.n	800a994 <_dtoa_r+0x95c>
 800a988:	4639      	mov	r1, r7
 800a98a:	462a      	mov	r2, r5
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 faf7 	bl	800af80 <__lshift>
 800a992:	4607      	mov	r7, r0
 800a994:	9b08      	ldr	r3, [sp, #32]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d04c      	beq.n	800aa34 <_dtoa_r+0x9fc>
 800a99a:	6879      	ldr	r1, [r7, #4]
 800a99c:	4620      	mov	r0, r4
 800a99e:	f000 f92e 	bl	800abfe <_Balloc>
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	f107 010c 	add.w	r1, r7, #12
 800a9aa:	3202      	adds	r2, #2
 800a9ac:	0092      	lsls	r2, r2, #2
 800a9ae:	300c      	adds	r0, #12
 800a9b0:	f000 f91a 	bl	800abe8 <memcpy>
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	4629      	mov	r1, r5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fae1 	bl	800af80 <__lshift>
 800a9be:	46b9      	mov	r9, r7
 800a9c0:	4607      	mov	r7, r0
 800a9c2:	9b06      	ldr	r3, [sp, #24]
 800a9c4:	9307      	str	r3, [sp, #28]
 800a9c6:	9b02      	ldr	r3, [sp, #8]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	9308      	str	r3, [sp, #32]
 800a9ce:	4631      	mov	r1, r6
 800a9d0:	4658      	mov	r0, fp
 800a9d2:	f7ff faa3 	bl	8009f1c <quorem>
 800a9d6:	4649      	mov	r1, r9
 800a9d8:	4605      	mov	r5, r0
 800a9da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a9de:	4658      	mov	r0, fp
 800a9e0:	f000 fb22 	bl	800b028 <__mcmp>
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	9002      	str	r0, [sp, #8]
 800a9e8:	4631      	mov	r1, r6
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 fb36 	bl	800b05c <__mdiff>
 800a9f0:	68c3      	ldr	r3, [r0, #12]
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	bb03      	cbnz	r3, 800aa38 <_dtoa_r+0xa00>
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	9009      	str	r0, [sp, #36]	; 0x24
 800a9fa:	4658      	mov	r0, fp
 800a9fc:	f000 fb14 	bl	800b028 <__mcmp>
 800aa00:	4603      	mov	r3, r0
 800aa02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa04:	4611      	mov	r1, r2
 800aa06:	4620      	mov	r0, r4
 800aa08:	9309      	str	r3, [sp, #36]	; 0x24
 800aa0a:	f000 f92c 	bl	800ac66 <_Bfree>
 800aa0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa10:	b9a3      	cbnz	r3, 800aa3c <_dtoa_r+0xa04>
 800aa12:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa14:	b992      	cbnz	r2, 800aa3c <_dtoa_r+0xa04>
 800aa16:	9a08      	ldr	r2, [sp, #32]
 800aa18:	b982      	cbnz	r2, 800aa3c <_dtoa_r+0xa04>
 800aa1a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa1e:	d029      	beq.n	800aa74 <_dtoa_r+0xa3c>
 800aa20:	9b02      	ldr	r3, [sp, #8]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	dd01      	ble.n	800aa2a <_dtoa_r+0x9f2>
 800aa26:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aa2a:	9b07      	ldr	r3, [sp, #28]
 800aa2c:	1c5d      	adds	r5, r3, #1
 800aa2e:	f883 8000 	strb.w	r8, [r3]
 800aa32:	e784      	b.n	800a93e <_dtoa_r+0x906>
 800aa34:	4638      	mov	r0, r7
 800aa36:	e7c2      	b.n	800a9be <_dtoa_r+0x986>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e7e3      	b.n	800aa04 <_dtoa_r+0x9cc>
 800aa3c:	9a02      	ldr	r2, [sp, #8]
 800aa3e:	2a00      	cmp	r2, #0
 800aa40:	db04      	blt.n	800aa4c <_dtoa_r+0xa14>
 800aa42:	d123      	bne.n	800aa8c <_dtoa_r+0xa54>
 800aa44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa46:	bb0a      	cbnz	r2, 800aa8c <_dtoa_r+0xa54>
 800aa48:	9a08      	ldr	r2, [sp, #32]
 800aa4a:	b9fa      	cbnz	r2, 800aa8c <_dtoa_r+0xa54>
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	ddec      	ble.n	800aa2a <_dtoa_r+0x9f2>
 800aa50:	4659      	mov	r1, fp
 800aa52:	2201      	movs	r2, #1
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fa93 	bl	800af80 <__lshift>
 800aa5a:	4631      	mov	r1, r6
 800aa5c:	4683      	mov	fp, r0
 800aa5e:	f000 fae3 	bl	800b028 <__mcmp>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	dc03      	bgt.n	800aa6e <_dtoa_r+0xa36>
 800aa66:	d1e0      	bne.n	800aa2a <_dtoa_r+0x9f2>
 800aa68:	f018 0f01 	tst.w	r8, #1
 800aa6c:	d0dd      	beq.n	800aa2a <_dtoa_r+0x9f2>
 800aa6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa72:	d1d8      	bne.n	800aa26 <_dtoa_r+0x9ee>
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	9a07      	ldr	r2, [sp, #28]
 800aa78:	1c5d      	adds	r5, r3, #1
 800aa7a:	2339      	movs	r3, #57	; 0x39
 800aa7c:	7013      	strb	r3, [r2, #0]
 800aa7e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa82:	1e6a      	subs	r2, r5, #1
 800aa84:	2b39      	cmp	r3, #57	; 0x39
 800aa86:	d04d      	beq.n	800ab24 <_dtoa_r+0xaec>
 800aa88:	3301      	adds	r3, #1
 800aa8a:	e052      	b.n	800ab32 <_dtoa_r+0xafa>
 800aa8c:	9a07      	ldr	r2, [sp, #28]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	f102 0501 	add.w	r5, r2, #1
 800aa94:	dd06      	ble.n	800aaa4 <_dtoa_r+0xa6c>
 800aa96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa9a:	d0eb      	beq.n	800aa74 <_dtoa_r+0xa3c>
 800aa9c:	f108 0801 	add.w	r8, r8, #1
 800aaa0:	9b07      	ldr	r3, [sp, #28]
 800aaa2:	e7c4      	b.n	800aa2e <_dtoa_r+0x9f6>
 800aaa4:	9b06      	ldr	r3, [sp, #24]
 800aaa6:	9a04      	ldr	r2, [sp, #16]
 800aaa8:	1aeb      	subs	r3, r5, r3
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aab0:	d021      	beq.n	800aaf6 <_dtoa_r+0xabe>
 800aab2:	4659      	mov	r1, fp
 800aab4:	2300      	movs	r3, #0
 800aab6:	220a      	movs	r2, #10
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 f8eb 	bl	800ac94 <__multadd>
 800aabe:	45b9      	cmp	r9, r7
 800aac0:	4683      	mov	fp, r0
 800aac2:	f04f 0300 	mov.w	r3, #0
 800aac6:	f04f 020a 	mov.w	r2, #10
 800aaca:	4649      	mov	r1, r9
 800aacc:	4620      	mov	r0, r4
 800aace:	d105      	bne.n	800aadc <_dtoa_r+0xaa4>
 800aad0:	f000 f8e0 	bl	800ac94 <__multadd>
 800aad4:	4681      	mov	r9, r0
 800aad6:	4607      	mov	r7, r0
 800aad8:	9507      	str	r5, [sp, #28]
 800aada:	e778      	b.n	800a9ce <_dtoa_r+0x996>
 800aadc:	f000 f8da 	bl	800ac94 <__multadd>
 800aae0:	4639      	mov	r1, r7
 800aae2:	4681      	mov	r9, r0
 800aae4:	2300      	movs	r3, #0
 800aae6:	220a      	movs	r2, #10
 800aae8:	4620      	mov	r0, r4
 800aaea:	f000 f8d3 	bl	800ac94 <__multadd>
 800aaee:	4607      	mov	r7, r0
 800aaf0:	e7f2      	b.n	800aad8 <_dtoa_r+0xaa0>
 800aaf2:	f04f 0900 	mov.w	r9, #0
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	2201      	movs	r2, #1
 800aafa:	4620      	mov	r0, r4
 800aafc:	f000 fa40 	bl	800af80 <__lshift>
 800ab00:	4631      	mov	r1, r6
 800ab02:	4683      	mov	fp, r0
 800ab04:	f000 fa90 	bl	800b028 <__mcmp>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	dcb8      	bgt.n	800aa7e <_dtoa_r+0xa46>
 800ab0c:	d102      	bne.n	800ab14 <_dtoa_r+0xadc>
 800ab0e:	f018 0f01 	tst.w	r8, #1
 800ab12:	d1b4      	bne.n	800aa7e <_dtoa_r+0xa46>
 800ab14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab18:	1e6a      	subs	r2, r5, #1
 800ab1a:	2b30      	cmp	r3, #48	; 0x30
 800ab1c:	f47f af0f 	bne.w	800a93e <_dtoa_r+0x906>
 800ab20:	4615      	mov	r5, r2
 800ab22:	e7f7      	b.n	800ab14 <_dtoa_r+0xadc>
 800ab24:	9b06      	ldr	r3, [sp, #24]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d105      	bne.n	800ab36 <_dtoa_r+0xafe>
 800ab2a:	2331      	movs	r3, #49	; 0x31
 800ab2c:	9a06      	ldr	r2, [sp, #24]
 800ab2e:	f10a 0a01 	add.w	sl, sl, #1
 800ab32:	7013      	strb	r3, [r2, #0]
 800ab34:	e703      	b.n	800a93e <_dtoa_r+0x906>
 800ab36:	4615      	mov	r5, r2
 800ab38:	e7a1      	b.n	800aa7e <_dtoa_r+0xa46>
 800ab3a:	4b17      	ldr	r3, [pc, #92]	; (800ab98 <_dtoa_r+0xb60>)
 800ab3c:	f7ff bae1 	b.w	800a102 <_dtoa_r+0xca>
 800ab40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f47f aabb 	bne.w	800a0be <_dtoa_r+0x86>
 800ab48:	4b14      	ldr	r3, [pc, #80]	; (800ab9c <_dtoa_r+0xb64>)
 800ab4a:	f7ff bada 	b.w	800a102 <_dtoa_r+0xca>
 800ab4e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	f77f ae3f 	ble.w	800a7d4 <_dtoa_r+0x79c>
 800ab56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab58:	9308      	str	r3, [sp, #32]
 800ab5a:	e653      	b.n	800a804 <_dtoa_r+0x7cc>
 800ab5c:	9b04      	ldr	r3, [sp, #16]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	dc03      	bgt.n	800ab6a <_dtoa_r+0xb32>
 800ab62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	f73f aed5 	bgt.w	800a914 <_dtoa_r+0x8dc>
 800ab6a:	9d06      	ldr	r5, [sp, #24]
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4658      	mov	r0, fp
 800ab70:	f7ff f9d4 	bl	8009f1c <quorem>
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ab7a:	f805 8b01 	strb.w	r8, [r5], #1
 800ab7e:	9a04      	ldr	r2, [sp, #16]
 800ab80:	1aeb      	subs	r3, r5, r3
 800ab82:	429a      	cmp	r2, r3
 800ab84:	ddb5      	ble.n	800aaf2 <_dtoa_r+0xaba>
 800ab86:	4659      	mov	r1, fp
 800ab88:	2300      	movs	r3, #0
 800ab8a:	220a      	movs	r2, #10
 800ab8c:	4620      	mov	r0, r4
 800ab8e:	f000 f881 	bl	800ac94 <__multadd>
 800ab92:	4683      	mov	fp, r0
 800ab94:	e7ea      	b.n	800ab6c <_dtoa_r+0xb34>
 800ab96:	bf00      	nop
 800ab98:	0800c390 	.word	0x0800c390
 800ab9c:	0800c3b4 	.word	0x0800c3b4

0800aba0 <_localeconv_r>:
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <_localeconv_r+0x14>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6a18      	ldr	r0, [r3, #32]
 800aba6:	4b04      	ldr	r3, [pc, #16]	; (800abb8 <_localeconv_r+0x18>)
 800aba8:	2800      	cmp	r0, #0
 800abaa:	bf08      	it	eq
 800abac:	4618      	moveq	r0, r3
 800abae:	30f0      	adds	r0, #240	; 0xf0
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	2000001c 	.word	0x2000001c
 800abb8:	20000080 	.word	0x20000080

0800abbc <malloc>:
 800abbc:	4b02      	ldr	r3, [pc, #8]	; (800abc8 <malloc+0xc>)
 800abbe:	4601      	mov	r1, r0
 800abc0:	6818      	ldr	r0, [r3, #0]
 800abc2:	f000 bb53 	b.w	800b26c <_malloc_r>
 800abc6:	bf00      	nop
 800abc8:	2000001c 	.word	0x2000001c

0800abcc <memchr>:
 800abcc:	b510      	push	{r4, lr}
 800abce:	b2c9      	uxtb	r1, r1
 800abd0:	4402      	add	r2, r0
 800abd2:	4290      	cmp	r0, r2
 800abd4:	4603      	mov	r3, r0
 800abd6:	d101      	bne.n	800abdc <memchr+0x10>
 800abd8:	2300      	movs	r3, #0
 800abda:	e003      	b.n	800abe4 <memchr+0x18>
 800abdc:	781c      	ldrb	r4, [r3, #0]
 800abde:	3001      	adds	r0, #1
 800abe0:	428c      	cmp	r4, r1
 800abe2:	d1f6      	bne.n	800abd2 <memchr+0x6>
 800abe4:	4618      	mov	r0, r3
 800abe6:	bd10      	pop	{r4, pc}

0800abe8 <memcpy>:
 800abe8:	b510      	push	{r4, lr}
 800abea:	1e43      	subs	r3, r0, #1
 800abec:	440a      	add	r2, r1
 800abee:	4291      	cmp	r1, r2
 800abf0:	d100      	bne.n	800abf4 <memcpy+0xc>
 800abf2:	bd10      	pop	{r4, pc}
 800abf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abfc:	e7f7      	b.n	800abee <memcpy+0x6>

0800abfe <_Balloc>:
 800abfe:	b570      	push	{r4, r5, r6, lr}
 800ac00:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ac02:	4604      	mov	r4, r0
 800ac04:	460e      	mov	r6, r1
 800ac06:	b93d      	cbnz	r5, 800ac18 <_Balloc+0x1a>
 800ac08:	2010      	movs	r0, #16
 800ac0a:	f7ff ffd7 	bl	800abbc <malloc>
 800ac0e:	6260      	str	r0, [r4, #36]	; 0x24
 800ac10:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ac14:	6005      	str	r5, [r0, #0]
 800ac16:	60c5      	str	r5, [r0, #12]
 800ac18:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ac1a:	68eb      	ldr	r3, [r5, #12]
 800ac1c:	b183      	cbz	r3, 800ac40 <_Balloc+0x42>
 800ac1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac26:	b9b8      	cbnz	r0, 800ac58 <_Balloc+0x5a>
 800ac28:	2101      	movs	r1, #1
 800ac2a:	fa01 f506 	lsl.w	r5, r1, r6
 800ac2e:	1d6a      	adds	r2, r5, #5
 800ac30:	0092      	lsls	r2, r2, #2
 800ac32:	4620      	mov	r0, r4
 800ac34:	f000 fabf 	bl	800b1b6 <_calloc_r>
 800ac38:	b160      	cbz	r0, 800ac54 <_Balloc+0x56>
 800ac3a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ac3e:	e00e      	b.n	800ac5e <_Balloc+0x60>
 800ac40:	2221      	movs	r2, #33	; 0x21
 800ac42:	2104      	movs	r1, #4
 800ac44:	4620      	mov	r0, r4
 800ac46:	f000 fab6 	bl	800b1b6 <_calloc_r>
 800ac4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac4c:	60e8      	str	r0, [r5, #12]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1e4      	bne.n	800ac1e <_Balloc+0x20>
 800ac54:	2000      	movs	r0, #0
 800ac56:	bd70      	pop	{r4, r5, r6, pc}
 800ac58:	6802      	ldr	r2, [r0, #0]
 800ac5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ac64:	e7f7      	b.n	800ac56 <_Balloc+0x58>

0800ac66 <_Bfree>:
 800ac66:	b570      	push	{r4, r5, r6, lr}
 800ac68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	460d      	mov	r5, r1
 800ac6e:	b93c      	cbnz	r4, 800ac80 <_Bfree+0x1a>
 800ac70:	2010      	movs	r0, #16
 800ac72:	f7ff ffa3 	bl	800abbc <malloc>
 800ac76:	6270      	str	r0, [r6, #36]	; 0x24
 800ac78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac7c:	6004      	str	r4, [r0, #0]
 800ac7e:	60c4      	str	r4, [r0, #12]
 800ac80:	b13d      	cbz	r5, 800ac92 <_Bfree+0x2c>
 800ac82:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ac84:	686a      	ldr	r2, [r5, #4]
 800ac86:	68db      	ldr	r3, [r3, #12]
 800ac88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ac8c:	6029      	str	r1, [r5, #0]
 800ac8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ac92:	bd70      	pop	{r4, r5, r6, pc}

0800ac94 <__multadd>:
 800ac94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac98:	461f      	mov	r7, r3
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	2300      	movs	r3, #0
 800aca0:	690d      	ldr	r5, [r1, #16]
 800aca2:	f101 0c14 	add.w	ip, r1, #20
 800aca6:	f8dc 0000 	ldr.w	r0, [ip]
 800acaa:	3301      	adds	r3, #1
 800acac:	b281      	uxth	r1, r0
 800acae:	fb02 7101 	mla	r1, r2, r1, r7
 800acb2:	0c00      	lsrs	r0, r0, #16
 800acb4:	0c0f      	lsrs	r7, r1, #16
 800acb6:	fb02 7000 	mla	r0, r2, r0, r7
 800acba:	b289      	uxth	r1, r1
 800acbc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800acc0:	429d      	cmp	r5, r3
 800acc2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800acc6:	f84c 1b04 	str.w	r1, [ip], #4
 800acca:	dcec      	bgt.n	800aca6 <__multadd+0x12>
 800accc:	b1d7      	cbz	r7, 800ad04 <__multadd+0x70>
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	42ab      	cmp	r3, r5
 800acd2:	dc12      	bgt.n	800acfa <__multadd+0x66>
 800acd4:	6861      	ldr	r1, [r4, #4]
 800acd6:	4630      	mov	r0, r6
 800acd8:	3101      	adds	r1, #1
 800acda:	f7ff ff90 	bl	800abfe <_Balloc>
 800acde:	4680      	mov	r8, r0
 800ace0:	6922      	ldr	r2, [r4, #16]
 800ace2:	f104 010c 	add.w	r1, r4, #12
 800ace6:	3202      	adds	r2, #2
 800ace8:	0092      	lsls	r2, r2, #2
 800acea:	300c      	adds	r0, #12
 800acec:	f7ff ff7c 	bl	800abe8 <memcpy>
 800acf0:	4621      	mov	r1, r4
 800acf2:	4630      	mov	r0, r6
 800acf4:	f7ff ffb7 	bl	800ac66 <_Bfree>
 800acf8:	4644      	mov	r4, r8
 800acfa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800acfe:	3501      	adds	r5, #1
 800ad00:	615f      	str	r7, [r3, #20]
 800ad02:	6125      	str	r5, [r4, #16]
 800ad04:	4620      	mov	r0, r4
 800ad06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ad0a <__hi0bits>:
 800ad0a:	0c02      	lsrs	r2, r0, #16
 800ad0c:	0412      	lsls	r2, r2, #16
 800ad0e:	4603      	mov	r3, r0
 800ad10:	b9b2      	cbnz	r2, 800ad40 <__hi0bits+0x36>
 800ad12:	0403      	lsls	r3, r0, #16
 800ad14:	2010      	movs	r0, #16
 800ad16:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ad1a:	bf04      	itt	eq
 800ad1c:	021b      	lsleq	r3, r3, #8
 800ad1e:	3008      	addeq	r0, #8
 800ad20:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ad24:	bf04      	itt	eq
 800ad26:	011b      	lsleq	r3, r3, #4
 800ad28:	3004      	addeq	r0, #4
 800ad2a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ad2e:	bf04      	itt	eq
 800ad30:	009b      	lsleq	r3, r3, #2
 800ad32:	3002      	addeq	r0, #2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	db06      	blt.n	800ad46 <__hi0bits+0x3c>
 800ad38:	005b      	lsls	r3, r3, #1
 800ad3a:	d503      	bpl.n	800ad44 <__hi0bits+0x3a>
 800ad3c:	3001      	adds	r0, #1
 800ad3e:	4770      	bx	lr
 800ad40:	2000      	movs	r0, #0
 800ad42:	e7e8      	b.n	800ad16 <__hi0bits+0xc>
 800ad44:	2020      	movs	r0, #32
 800ad46:	4770      	bx	lr

0800ad48 <__lo0bits>:
 800ad48:	6803      	ldr	r3, [r0, #0]
 800ad4a:	4601      	mov	r1, r0
 800ad4c:	f013 0207 	ands.w	r2, r3, #7
 800ad50:	d00b      	beq.n	800ad6a <__lo0bits+0x22>
 800ad52:	07da      	lsls	r2, r3, #31
 800ad54:	d423      	bmi.n	800ad9e <__lo0bits+0x56>
 800ad56:	0798      	lsls	r0, r3, #30
 800ad58:	bf49      	itett	mi
 800ad5a:	085b      	lsrmi	r3, r3, #1
 800ad5c:	089b      	lsrpl	r3, r3, #2
 800ad5e:	2001      	movmi	r0, #1
 800ad60:	600b      	strmi	r3, [r1, #0]
 800ad62:	bf5c      	itt	pl
 800ad64:	600b      	strpl	r3, [r1, #0]
 800ad66:	2002      	movpl	r0, #2
 800ad68:	4770      	bx	lr
 800ad6a:	b298      	uxth	r0, r3
 800ad6c:	b9a8      	cbnz	r0, 800ad9a <__lo0bits+0x52>
 800ad6e:	2010      	movs	r0, #16
 800ad70:	0c1b      	lsrs	r3, r3, #16
 800ad72:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ad76:	bf04      	itt	eq
 800ad78:	0a1b      	lsreq	r3, r3, #8
 800ad7a:	3008      	addeq	r0, #8
 800ad7c:	071a      	lsls	r2, r3, #28
 800ad7e:	bf04      	itt	eq
 800ad80:	091b      	lsreq	r3, r3, #4
 800ad82:	3004      	addeq	r0, #4
 800ad84:	079a      	lsls	r2, r3, #30
 800ad86:	bf04      	itt	eq
 800ad88:	089b      	lsreq	r3, r3, #2
 800ad8a:	3002      	addeq	r0, #2
 800ad8c:	07da      	lsls	r2, r3, #31
 800ad8e:	d402      	bmi.n	800ad96 <__lo0bits+0x4e>
 800ad90:	085b      	lsrs	r3, r3, #1
 800ad92:	d006      	beq.n	800ada2 <__lo0bits+0x5a>
 800ad94:	3001      	adds	r0, #1
 800ad96:	600b      	str	r3, [r1, #0]
 800ad98:	4770      	bx	lr
 800ad9a:	4610      	mov	r0, r2
 800ad9c:	e7e9      	b.n	800ad72 <__lo0bits+0x2a>
 800ad9e:	2000      	movs	r0, #0
 800ada0:	4770      	bx	lr
 800ada2:	2020      	movs	r0, #32
 800ada4:	4770      	bx	lr

0800ada6 <__i2b>:
 800ada6:	b510      	push	{r4, lr}
 800ada8:	460c      	mov	r4, r1
 800adaa:	2101      	movs	r1, #1
 800adac:	f7ff ff27 	bl	800abfe <_Balloc>
 800adb0:	2201      	movs	r2, #1
 800adb2:	6144      	str	r4, [r0, #20]
 800adb4:	6102      	str	r2, [r0, #16]
 800adb6:	bd10      	pop	{r4, pc}

0800adb8 <__multiply>:
 800adb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adbc:	4614      	mov	r4, r2
 800adbe:	690a      	ldr	r2, [r1, #16]
 800adc0:	6923      	ldr	r3, [r4, #16]
 800adc2:	4688      	mov	r8, r1
 800adc4:	429a      	cmp	r2, r3
 800adc6:	bfbe      	ittt	lt
 800adc8:	460b      	movlt	r3, r1
 800adca:	46a0      	movlt	r8, r4
 800adcc:	461c      	movlt	r4, r3
 800adce:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800add2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800add6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800adda:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adde:	eb07 0609 	add.w	r6, r7, r9
 800ade2:	42b3      	cmp	r3, r6
 800ade4:	bfb8      	it	lt
 800ade6:	3101      	addlt	r1, #1
 800ade8:	f7ff ff09 	bl	800abfe <_Balloc>
 800adec:	f100 0514 	add.w	r5, r0, #20
 800adf0:	462b      	mov	r3, r5
 800adf2:	2200      	movs	r2, #0
 800adf4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800adf8:	4573      	cmp	r3, lr
 800adfa:	d316      	bcc.n	800ae2a <__multiply+0x72>
 800adfc:	f104 0214 	add.w	r2, r4, #20
 800ae00:	f108 0114 	add.w	r1, r8, #20
 800ae04:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ae08:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	9b00      	ldr	r3, [sp, #0]
 800ae10:	9201      	str	r2, [sp, #4]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d80c      	bhi.n	800ae30 <__multiply+0x78>
 800ae16:	2e00      	cmp	r6, #0
 800ae18:	dd03      	ble.n	800ae22 <__multiply+0x6a>
 800ae1a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d05d      	beq.n	800aede <__multiply+0x126>
 800ae22:	6106      	str	r6, [r0, #16]
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2a:	f843 2b04 	str.w	r2, [r3], #4
 800ae2e:	e7e3      	b.n	800adf8 <__multiply+0x40>
 800ae30:	f8b2 b000 	ldrh.w	fp, [r2]
 800ae34:	f1bb 0f00 	cmp.w	fp, #0
 800ae38:	d023      	beq.n	800ae82 <__multiply+0xca>
 800ae3a:	4689      	mov	r9, r1
 800ae3c:	46ac      	mov	ip, r5
 800ae3e:	f04f 0800 	mov.w	r8, #0
 800ae42:	f859 4b04 	ldr.w	r4, [r9], #4
 800ae46:	f8dc a000 	ldr.w	sl, [ip]
 800ae4a:	b2a3      	uxth	r3, r4
 800ae4c:	fa1f fa8a 	uxth.w	sl, sl
 800ae50:	fb0b a303 	mla	r3, fp, r3, sl
 800ae54:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ae58:	f8dc 4000 	ldr.w	r4, [ip]
 800ae5c:	4443      	add	r3, r8
 800ae5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae62:	fb0b 840a 	mla	r4, fp, sl, r8
 800ae66:	46e2      	mov	sl, ip
 800ae68:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ae6c:	b29b      	uxth	r3, r3
 800ae6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ae72:	454f      	cmp	r7, r9
 800ae74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ae78:	f84a 3b04 	str.w	r3, [sl], #4
 800ae7c:	d82b      	bhi.n	800aed6 <__multiply+0x11e>
 800ae7e:	f8cc 8004 	str.w	r8, [ip, #4]
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	3204      	adds	r2, #4
 800ae86:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ae8a:	f1ba 0f00 	cmp.w	sl, #0
 800ae8e:	d020      	beq.n	800aed2 <__multiply+0x11a>
 800ae90:	4689      	mov	r9, r1
 800ae92:	46a8      	mov	r8, r5
 800ae94:	f04f 0b00 	mov.w	fp, #0
 800ae98:	682b      	ldr	r3, [r5, #0]
 800ae9a:	f8b9 c000 	ldrh.w	ip, [r9]
 800ae9e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	fb0a 440c 	mla	r4, sl, ip, r4
 800aea8:	46c4      	mov	ip, r8
 800aeaa:	445c      	add	r4, fp
 800aeac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800aeb0:	f84c 3b04 	str.w	r3, [ip], #4
 800aeb4:	f859 3b04 	ldr.w	r3, [r9], #4
 800aeb8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800aebc:	0c1b      	lsrs	r3, r3, #16
 800aebe:	fb0a b303 	mla	r3, sl, r3, fp
 800aec2:	454f      	cmp	r7, r9
 800aec4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800aec8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800aecc:	d805      	bhi.n	800aeda <__multiply+0x122>
 800aece:	f8c8 3004 	str.w	r3, [r8, #4]
 800aed2:	3504      	adds	r5, #4
 800aed4:	e79b      	b.n	800ae0e <__multiply+0x56>
 800aed6:	46d4      	mov	ip, sl
 800aed8:	e7b3      	b.n	800ae42 <__multiply+0x8a>
 800aeda:	46e0      	mov	r8, ip
 800aedc:	e7dd      	b.n	800ae9a <__multiply+0xe2>
 800aede:	3e01      	subs	r6, #1
 800aee0:	e799      	b.n	800ae16 <__multiply+0x5e>
	...

0800aee4 <__pow5mult>:
 800aee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4615      	mov	r5, r2
 800aeea:	f012 0203 	ands.w	r2, r2, #3
 800aeee:	4606      	mov	r6, r0
 800aef0:	460f      	mov	r7, r1
 800aef2:	d007      	beq.n	800af04 <__pow5mult+0x20>
 800aef4:	4c21      	ldr	r4, [pc, #132]	; (800af7c <__pow5mult+0x98>)
 800aef6:	3a01      	subs	r2, #1
 800aef8:	2300      	movs	r3, #0
 800aefa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aefe:	f7ff fec9 	bl	800ac94 <__multadd>
 800af02:	4607      	mov	r7, r0
 800af04:	10ad      	asrs	r5, r5, #2
 800af06:	d035      	beq.n	800af74 <__pow5mult+0x90>
 800af08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af0a:	b93c      	cbnz	r4, 800af1c <__pow5mult+0x38>
 800af0c:	2010      	movs	r0, #16
 800af0e:	f7ff fe55 	bl	800abbc <malloc>
 800af12:	6270      	str	r0, [r6, #36]	; 0x24
 800af14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af18:	6004      	str	r4, [r0, #0]
 800af1a:	60c4      	str	r4, [r0, #12]
 800af1c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af24:	b94c      	cbnz	r4, 800af3a <__pow5mult+0x56>
 800af26:	f240 2171 	movw	r1, #625	; 0x271
 800af2a:	4630      	mov	r0, r6
 800af2c:	f7ff ff3b 	bl	800ada6 <__i2b>
 800af30:	2300      	movs	r3, #0
 800af32:	4604      	mov	r4, r0
 800af34:	f8c8 0008 	str.w	r0, [r8, #8]
 800af38:	6003      	str	r3, [r0, #0]
 800af3a:	f04f 0800 	mov.w	r8, #0
 800af3e:	07eb      	lsls	r3, r5, #31
 800af40:	d50a      	bpl.n	800af58 <__pow5mult+0x74>
 800af42:	4639      	mov	r1, r7
 800af44:	4622      	mov	r2, r4
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff ff36 	bl	800adb8 <__multiply>
 800af4c:	4681      	mov	r9, r0
 800af4e:	4639      	mov	r1, r7
 800af50:	4630      	mov	r0, r6
 800af52:	f7ff fe88 	bl	800ac66 <_Bfree>
 800af56:	464f      	mov	r7, r9
 800af58:	106d      	asrs	r5, r5, #1
 800af5a:	d00b      	beq.n	800af74 <__pow5mult+0x90>
 800af5c:	6820      	ldr	r0, [r4, #0]
 800af5e:	b938      	cbnz	r0, 800af70 <__pow5mult+0x8c>
 800af60:	4622      	mov	r2, r4
 800af62:	4621      	mov	r1, r4
 800af64:	4630      	mov	r0, r6
 800af66:	f7ff ff27 	bl	800adb8 <__multiply>
 800af6a:	6020      	str	r0, [r4, #0]
 800af6c:	f8c0 8000 	str.w	r8, [r0]
 800af70:	4604      	mov	r4, r0
 800af72:	e7e4      	b.n	800af3e <__pow5mult+0x5a>
 800af74:	4638      	mov	r0, r7
 800af76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af7a:	bf00      	nop
 800af7c:	0800c4b8 	.word	0x0800c4b8

0800af80 <__lshift>:
 800af80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af84:	460c      	mov	r4, r1
 800af86:	4607      	mov	r7, r0
 800af88:	4616      	mov	r6, r2
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800af90:	eb0a 0903 	add.w	r9, sl, r3
 800af94:	6849      	ldr	r1, [r1, #4]
 800af96:	68a3      	ldr	r3, [r4, #8]
 800af98:	f109 0501 	add.w	r5, r9, #1
 800af9c:	42ab      	cmp	r3, r5
 800af9e:	db32      	blt.n	800b006 <__lshift+0x86>
 800afa0:	4638      	mov	r0, r7
 800afa2:	f7ff fe2c 	bl	800abfe <_Balloc>
 800afa6:	2300      	movs	r3, #0
 800afa8:	4680      	mov	r8, r0
 800afaa:	461a      	mov	r2, r3
 800afac:	f100 0114 	add.w	r1, r0, #20
 800afb0:	4553      	cmp	r3, sl
 800afb2:	db2b      	blt.n	800b00c <__lshift+0x8c>
 800afb4:	6920      	ldr	r0, [r4, #16]
 800afb6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800afba:	f104 0314 	add.w	r3, r4, #20
 800afbe:	f016 021f 	ands.w	r2, r6, #31
 800afc2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800afc6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800afca:	d025      	beq.n	800b018 <__lshift+0x98>
 800afcc:	2000      	movs	r0, #0
 800afce:	f1c2 0e20 	rsb	lr, r2, #32
 800afd2:	468a      	mov	sl, r1
 800afd4:	681e      	ldr	r6, [r3, #0]
 800afd6:	4096      	lsls	r6, r2
 800afd8:	4330      	orrs	r0, r6
 800afda:	f84a 0b04 	str.w	r0, [sl], #4
 800afde:	f853 0b04 	ldr.w	r0, [r3], #4
 800afe2:	459c      	cmp	ip, r3
 800afe4:	fa20 f00e 	lsr.w	r0, r0, lr
 800afe8:	d814      	bhi.n	800b014 <__lshift+0x94>
 800afea:	6048      	str	r0, [r1, #4]
 800afec:	b108      	cbz	r0, 800aff2 <__lshift+0x72>
 800afee:	f109 0502 	add.w	r5, r9, #2
 800aff2:	3d01      	subs	r5, #1
 800aff4:	4638      	mov	r0, r7
 800aff6:	f8c8 5010 	str.w	r5, [r8, #16]
 800affa:	4621      	mov	r1, r4
 800affc:	f7ff fe33 	bl	800ac66 <_Bfree>
 800b000:	4640      	mov	r0, r8
 800b002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b006:	3101      	adds	r1, #1
 800b008:	005b      	lsls	r3, r3, #1
 800b00a:	e7c7      	b.n	800af9c <__lshift+0x1c>
 800b00c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b010:	3301      	adds	r3, #1
 800b012:	e7cd      	b.n	800afb0 <__lshift+0x30>
 800b014:	4651      	mov	r1, sl
 800b016:	e7dc      	b.n	800afd2 <__lshift+0x52>
 800b018:	3904      	subs	r1, #4
 800b01a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b01e:	459c      	cmp	ip, r3
 800b020:	f841 2f04 	str.w	r2, [r1, #4]!
 800b024:	d8f9      	bhi.n	800b01a <__lshift+0x9a>
 800b026:	e7e4      	b.n	800aff2 <__lshift+0x72>

0800b028 <__mcmp>:
 800b028:	6903      	ldr	r3, [r0, #16]
 800b02a:	690a      	ldr	r2, [r1, #16]
 800b02c:	b530      	push	{r4, r5, lr}
 800b02e:	1a9b      	subs	r3, r3, r2
 800b030:	d10c      	bne.n	800b04c <__mcmp+0x24>
 800b032:	0092      	lsls	r2, r2, #2
 800b034:	3014      	adds	r0, #20
 800b036:	3114      	adds	r1, #20
 800b038:	1884      	adds	r4, r0, r2
 800b03a:	4411      	add	r1, r2
 800b03c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b040:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b044:	4295      	cmp	r5, r2
 800b046:	d003      	beq.n	800b050 <__mcmp+0x28>
 800b048:	d305      	bcc.n	800b056 <__mcmp+0x2e>
 800b04a:	2301      	movs	r3, #1
 800b04c:	4618      	mov	r0, r3
 800b04e:	bd30      	pop	{r4, r5, pc}
 800b050:	42a0      	cmp	r0, r4
 800b052:	d3f3      	bcc.n	800b03c <__mcmp+0x14>
 800b054:	e7fa      	b.n	800b04c <__mcmp+0x24>
 800b056:	f04f 33ff 	mov.w	r3, #4294967295
 800b05a:	e7f7      	b.n	800b04c <__mcmp+0x24>

0800b05c <__mdiff>:
 800b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b060:	460d      	mov	r5, r1
 800b062:	4607      	mov	r7, r0
 800b064:	4611      	mov	r1, r2
 800b066:	4628      	mov	r0, r5
 800b068:	4614      	mov	r4, r2
 800b06a:	f7ff ffdd 	bl	800b028 <__mcmp>
 800b06e:	1e06      	subs	r6, r0, #0
 800b070:	d108      	bne.n	800b084 <__mdiff+0x28>
 800b072:	4631      	mov	r1, r6
 800b074:	4638      	mov	r0, r7
 800b076:	f7ff fdc2 	bl	800abfe <_Balloc>
 800b07a:	2301      	movs	r3, #1
 800b07c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b084:	bfa4      	itt	ge
 800b086:	4623      	movge	r3, r4
 800b088:	462c      	movge	r4, r5
 800b08a:	4638      	mov	r0, r7
 800b08c:	6861      	ldr	r1, [r4, #4]
 800b08e:	bfa6      	itte	ge
 800b090:	461d      	movge	r5, r3
 800b092:	2600      	movge	r6, #0
 800b094:	2601      	movlt	r6, #1
 800b096:	f7ff fdb2 	bl	800abfe <_Balloc>
 800b09a:	f04f 0e00 	mov.w	lr, #0
 800b09e:	60c6      	str	r6, [r0, #12]
 800b0a0:	692b      	ldr	r3, [r5, #16]
 800b0a2:	6926      	ldr	r6, [r4, #16]
 800b0a4:	f104 0214 	add.w	r2, r4, #20
 800b0a8:	f105 0914 	add.w	r9, r5, #20
 800b0ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b0b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b0b4:	f100 0114 	add.w	r1, r0, #20
 800b0b8:	f852 ab04 	ldr.w	sl, [r2], #4
 800b0bc:	f859 5b04 	ldr.w	r5, [r9], #4
 800b0c0:	fa1f f38a 	uxth.w	r3, sl
 800b0c4:	4473      	add	r3, lr
 800b0c6:	b2ac      	uxth	r4, r5
 800b0c8:	1b1b      	subs	r3, r3, r4
 800b0ca:	0c2c      	lsrs	r4, r5, #16
 800b0cc:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800b0d0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800b0da:	45c8      	cmp	r8, r9
 800b0dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800b0e0:	4694      	mov	ip, r2
 800b0e2:	f841 4b04 	str.w	r4, [r1], #4
 800b0e6:	d8e7      	bhi.n	800b0b8 <__mdiff+0x5c>
 800b0e8:	45bc      	cmp	ip, r7
 800b0ea:	d304      	bcc.n	800b0f6 <__mdiff+0x9a>
 800b0ec:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800b0f0:	b183      	cbz	r3, 800b114 <__mdiff+0xb8>
 800b0f2:	6106      	str	r6, [r0, #16]
 800b0f4:	e7c4      	b.n	800b080 <__mdiff+0x24>
 800b0f6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800b0fa:	b2a2      	uxth	r2, r4
 800b0fc:	4472      	add	r2, lr
 800b0fe:	1413      	asrs	r3, r2, #16
 800b100:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b104:	b292      	uxth	r2, r2
 800b106:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b10a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b10e:	f841 2b04 	str.w	r2, [r1], #4
 800b112:	e7e9      	b.n	800b0e8 <__mdiff+0x8c>
 800b114:	3e01      	subs	r6, #1
 800b116:	e7e9      	b.n	800b0ec <__mdiff+0x90>

0800b118 <__d2b>:
 800b118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800b11c:	461c      	mov	r4, r3
 800b11e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800b122:	2101      	movs	r1, #1
 800b124:	4690      	mov	r8, r2
 800b126:	f7ff fd6a 	bl	800abfe <_Balloc>
 800b12a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800b12e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b132:	4607      	mov	r7, r0
 800b134:	bb34      	cbnz	r4, 800b184 <__d2b+0x6c>
 800b136:	9201      	str	r2, [sp, #4]
 800b138:	f1b8 0200 	subs.w	r2, r8, #0
 800b13c:	d027      	beq.n	800b18e <__d2b+0x76>
 800b13e:	a802      	add	r0, sp, #8
 800b140:	f840 2d08 	str.w	r2, [r0, #-8]!
 800b144:	f7ff fe00 	bl	800ad48 <__lo0bits>
 800b148:	9900      	ldr	r1, [sp, #0]
 800b14a:	b1f0      	cbz	r0, 800b18a <__d2b+0x72>
 800b14c:	9a01      	ldr	r2, [sp, #4]
 800b14e:	f1c0 0320 	rsb	r3, r0, #32
 800b152:	fa02 f303 	lsl.w	r3, r2, r3
 800b156:	430b      	orrs	r3, r1
 800b158:	40c2      	lsrs	r2, r0
 800b15a:	617b      	str	r3, [r7, #20]
 800b15c:	9201      	str	r2, [sp, #4]
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	bf14      	ite	ne
 800b164:	2102      	movne	r1, #2
 800b166:	2101      	moveq	r1, #1
 800b168:	61bb      	str	r3, [r7, #24]
 800b16a:	6139      	str	r1, [r7, #16]
 800b16c:	b1c4      	cbz	r4, 800b1a0 <__d2b+0x88>
 800b16e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b172:	4404      	add	r4, r0
 800b174:	6034      	str	r4, [r6, #0]
 800b176:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b17a:	6028      	str	r0, [r5, #0]
 800b17c:	4638      	mov	r0, r7
 800b17e:	b002      	add	sp, #8
 800b180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b184:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b188:	e7d5      	b.n	800b136 <__d2b+0x1e>
 800b18a:	6179      	str	r1, [r7, #20]
 800b18c:	e7e7      	b.n	800b15e <__d2b+0x46>
 800b18e:	a801      	add	r0, sp, #4
 800b190:	f7ff fdda 	bl	800ad48 <__lo0bits>
 800b194:	2101      	movs	r1, #1
 800b196:	9b01      	ldr	r3, [sp, #4]
 800b198:	6139      	str	r1, [r7, #16]
 800b19a:	617b      	str	r3, [r7, #20]
 800b19c:	3020      	adds	r0, #32
 800b19e:	e7e5      	b.n	800b16c <__d2b+0x54>
 800b1a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b1a4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b1a8:	6030      	str	r0, [r6, #0]
 800b1aa:	6918      	ldr	r0, [r3, #16]
 800b1ac:	f7ff fdad 	bl	800ad0a <__hi0bits>
 800b1b0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b1b4:	e7e1      	b.n	800b17a <__d2b+0x62>

0800b1b6 <_calloc_r>:
 800b1b6:	b538      	push	{r3, r4, r5, lr}
 800b1b8:	fb02 f401 	mul.w	r4, r2, r1
 800b1bc:	4621      	mov	r1, r4
 800b1be:	f000 f855 	bl	800b26c <_malloc_r>
 800b1c2:	4605      	mov	r5, r0
 800b1c4:	b118      	cbz	r0, 800b1ce <_calloc_r+0x18>
 800b1c6:	4622      	mov	r2, r4
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	f7fe fa2f 	bl	800962c <memset>
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800b1d4 <_free_r>:
 800b1d4:	b538      	push	{r3, r4, r5, lr}
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	2900      	cmp	r1, #0
 800b1da:	d043      	beq.n	800b264 <_free_r+0x90>
 800b1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1e0:	1f0c      	subs	r4, r1, #4
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfb8      	it	lt
 800b1e6:	18e4      	addlt	r4, r4, r3
 800b1e8:	f000 fa27 	bl	800b63a <__malloc_lock>
 800b1ec:	4a1e      	ldr	r2, [pc, #120]	; (800b268 <_free_r+0x94>)
 800b1ee:	6813      	ldr	r3, [r2, #0]
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	b933      	cbnz	r3, 800b202 <_free_r+0x2e>
 800b1f4:	6063      	str	r3, [r4, #4]
 800b1f6:	6014      	str	r4, [r2, #0]
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b1fe:	f000 ba1d 	b.w	800b63c <__malloc_unlock>
 800b202:	42a3      	cmp	r3, r4
 800b204:	d90b      	bls.n	800b21e <_free_r+0x4a>
 800b206:	6821      	ldr	r1, [r4, #0]
 800b208:	1862      	adds	r2, r4, r1
 800b20a:	4293      	cmp	r3, r2
 800b20c:	bf01      	itttt	eq
 800b20e:	681a      	ldreq	r2, [r3, #0]
 800b210:	685b      	ldreq	r3, [r3, #4]
 800b212:	1852      	addeq	r2, r2, r1
 800b214:	6022      	streq	r2, [r4, #0]
 800b216:	6063      	str	r3, [r4, #4]
 800b218:	6004      	str	r4, [r0, #0]
 800b21a:	e7ed      	b.n	800b1f8 <_free_r+0x24>
 800b21c:	4613      	mov	r3, r2
 800b21e:	685a      	ldr	r2, [r3, #4]
 800b220:	b10a      	cbz	r2, 800b226 <_free_r+0x52>
 800b222:	42a2      	cmp	r2, r4
 800b224:	d9fa      	bls.n	800b21c <_free_r+0x48>
 800b226:	6819      	ldr	r1, [r3, #0]
 800b228:	1858      	adds	r0, r3, r1
 800b22a:	42a0      	cmp	r0, r4
 800b22c:	d10b      	bne.n	800b246 <_free_r+0x72>
 800b22e:	6820      	ldr	r0, [r4, #0]
 800b230:	4401      	add	r1, r0
 800b232:	1858      	adds	r0, r3, r1
 800b234:	4282      	cmp	r2, r0
 800b236:	6019      	str	r1, [r3, #0]
 800b238:	d1de      	bne.n	800b1f8 <_free_r+0x24>
 800b23a:	6810      	ldr	r0, [r2, #0]
 800b23c:	6852      	ldr	r2, [r2, #4]
 800b23e:	4401      	add	r1, r0
 800b240:	6019      	str	r1, [r3, #0]
 800b242:	605a      	str	r2, [r3, #4]
 800b244:	e7d8      	b.n	800b1f8 <_free_r+0x24>
 800b246:	d902      	bls.n	800b24e <_free_r+0x7a>
 800b248:	230c      	movs	r3, #12
 800b24a:	602b      	str	r3, [r5, #0]
 800b24c:	e7d4      	b.n	800b1f8 <_free_r+0x24>
 800b24e:	6820      	ldr	r0, [r4, #0]
 800b250:	1821      	adds	r1, r4, r0
 800b252:	428a      	cmp	r2, r1
 800b254:	bf01      	itttt	eq
 800b256:	6811      	ldreq	r1, [r2, #0]
 800b258:	6852      	ldreq	r2, [r2, #4]
 800b25a:	1809      	addeq	r1, r1, r0
 800b25c:	6021      	streq	r1, [r4, #0]
 800b25e:	6062      	str	r2, [r4, #4]
 800b260:	605c      	str	r4, [r3, #4]
 800b262:	e7c9      	b.n	800b1f8 <_free_r+0x24>
 800b264:	bd38      	pop	{r3, r4, r5, pc}
 800b266:	bf00      	nop
 800b268:	2000061c 	.word	0x2000061c

0800b26c <_malloc_r>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	1ccd      	adds	r5, r1, #3
 800b270:	f025 0503 	bic.w	r5, r5, #3
 800b274:	3508      	adds	r5, #8
 800b276:	2d0c      	cmp	r5, #12
 800b278:	bf38      	it	cc
 800b27a:	250c      	movcc	r5, #12
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	4606      	mov	r6, r0
 800b280:	db01      	blt.n	800b286 <_malloc_r+0x1a>
 800b282:	42a9      	cmp	r1, r5
 800b284:	d903      	bls.n	800b28e <_malloc_r+0x22>
 800b286:	230c      	movs	r3, #12
 800b288:	6033      	str	r3, [r6, #0]
 800b28a:	2000      	movs	r0, #0
 800b28c:	bd70      	pop	{r4, r5, r6, pc}
 800b28e:	f000 f9d4 	bl	800b63a <__malloc_lock>
 800b292:	4a21      	ldr	r2, [pc, #132]	; (800b318 <_malloc_r+0xac>)
 800b294:	6814      	ldr	r4, [r2, #0]
 800b296:	4621      	mov	r1, r4
 800b298:	b991      	cbnz	r1, 800b2c0 <_malloc_r+0x54>
 800b29a:	4c20      	ldr	r4, [pc, #128]	; (800b31c <_malloc_r+0xb0>)
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	b91b      	cbnz	r3, 800b2a8 <_malloc_r+0x3c>
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 f98f 	bl	800b5c4 <_sbrk_r>
 800b2a6:	6020      	str	r0, [r4, #0]
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 f98a 	bl	800b5c4 <_sbrk_r>
 800b2b0:	1c43      	adds	r3, r0, #1
 800b2b2:	d124      	bne.n	800b2fe <_malloc_r+0x92>
 800b2b4:	230c      	movs	r3, #12
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	6033      	str	r3, [r6, #0]
 800b2ba:	f000 f9bf 	bl	800b63c <__malloc_unlock>
 800b2be:	e7e4      	b.n	800b28a <_malloc_r+0x1e>
 800b2c0:	680b      	ldr	r3, [r1, #0]
 800b2c2:	1b5b      	subs	r3, r3, r5
 800b2c4:	d418      	bmi.n	800b2f8 <_malloc_r+0x8c>
 800b2c6:	2b0b      	cmp	r3, #11
 800b2c8:	d90f      	bls.n	800b2ea <_malloc_r+0x7e>
 800b2ca:	600b      	str	r3, [r1, #0]
 800b2cc:	18cc      	adds	r4, r1, r3
 800b2ce:	50cd      	str	r5, [r1, r3]
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f000 f9b3 	bl	800b63c <__malloc_unlock>
 800b2d6:	f104 000b 	add.w	r0, r4, #11
 800b2da:	1d23      	adds	r3, r4, #4
 800b2dc:	f020 0007 	bic.w	r0, r0, #7
 800b2e0:	1ac3      	subs	r3, r0, r3
 800b2e2:	d0d3      	beq.n	800b28c <_malloc_r+0x20>
 800b2e4:	425a      	negs	r2, r3
 800b2e6:	50e2      	str	r2, [r4, r3]
 800b2e8:	e7d0      	b.n	800b28c <_malloc_r+0x20>
 800b2ea:	684b      	ldr	r3, [r1, #4]
 800b2ec:	428c      	cmp	r4, r1
 800b2ee:	bf16      	itet	ne
 800b2f0:	6063      	strne	r3, [r4, #4]
 800b2f2:	6013      	streq	r3, [r2, #0]
 800b2f4:	460c      	movne	r4, r1
 800b2f6:	e7eb      	b.n	800b2d0 <_malloc_r+0x64>
 800b2f8:	460c      	mov	r4, r1
 800b2fa:	6849      	ldr	r1, [r1, #4]
 800b2fc:	e7cc      	b.n	800b298 <_malloc_r+0x2c>
 800b2fe:	1cc4      	adds	r4, r0, #3
 800b300:	f024 0403 	bic.w	r4, r4, #3
 800b304:	42a0      	cmp	r0, r4
 800b306:	d005      	beq.n	800b314 <_malloc_r+0xa8>
 800b308:	1a21      	subs	r1, r4, r0
 800b30a:	4630      	mov	r0, r6
 800b30c:	f000 f95a 	bl	800b5c4 <_sbrk_r>
 800b310:	3001      	adds	r0, #1
 800b312:	d0cf      	beq.n	800b2b4 <_malloc_r+0x48>
 800b314:	6025      	str	r5, [r4, #0]
 800b316:	e7db      	b.n	800b2d0 <_malloc_r+0x64>
 800b318:	2000061c 	.word	0x2000061c
 800b31c:	20000620 	.word	0x20000620

0800b320 <__ssputs_r>:
 800b320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b324:	688e      	ldr	r6, [r1, #8]
 800b326:	4682      	mov	sl, r0
 800b328:	429e      	cmp	r6, r3
 800b32a:	460c      	mov	r4, r1
 800b32c:	4690      	mov	r8, r2
 800b32e:	4699      	mov	r9, r3
 800b330:	d837      	bhi.n	800b3a2 <__ssputs_r+0x82>
 800b332:	898a      	ldrh	r2, [r1, #12]
 800b334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b338:	d031      	beq.n	800b39e <__ssputs_r+0x7e>
 800b33a:	2302      	movs	r3, #2
 800b33c:	6825      	ldr	r5, [r4, #0]
 800b33e:	6909      	ldr	r1, [r1, #16]
 800b340:	1a6f      	subs	r7, r5, r1
 800b342:	6965      	ldr	r5, [r4, #20]
 800b344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b348:	fb95 f5f3 	sdiv	r5, r5, r3
 800b34c:	f109 0301 	add.w	r3, r9, #1
 800b350:	443b      	add	r3, r7
 800b352:	429d      	cmp	r5, r3
 800b354:	bf38      	it	cc
 800b356:	461d      	movcc	r5, r3
 800b358:	0553      	lsls	r3, r2, #21
 800b35a:	d530      	bpl.n	800b3be <__ssputs_r+0x9e>
 800b35c:	4629      	mov	r1, r5
 800b35e:	f7ff ff85 	bl	800b26c <_malloc_r>
 800b362:	4606      	mov	r6, r0
 800b364:	b950      	cbnz	r0, 800b37c <__ssputs_r+0x5c>
 800b366:	230c      	movs	r3, #12
 800b368:	f04f 30ff 	mov.w	r0, #4294967295
 800b36c:	f8ca 3000 	str.w	r3, [sl]
 800b370:	89a3      	ldrh	r3, [r4, #12]
 800b372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b376:	81a3      	strh	r3, [r4, #12]
 800b378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b37c:	463a      	mov	r2, r7
 800b37e:	6921      	ldr	r1, [r4, #16]
 800b380:	f7ff fc32 	bl	800abe8 <memcpy>
 800b384:	89a3      	ldrh	r3, [r4, #12]
 800b386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	6126      	str	r6, [r4, #16]
 800b392:	443e      	add	r6, r7
 800b394:	6026      	str	r6, [r4, #0]
 800b396:	464e      	mov	r6, r9
 800b398:	6165      	str	r5, [r4, #20]
 800b39a:	1bed      	subs	r5, r5, r7
 800b39c:	60a5      	str	r5, [r4, #8]
 800b39e:	454e      	cmp	r6, r9
 800b3a0:	d900      	bls.n	800b3a4 <__ssputs_r+0x84>
 800b3a2:	464e      	mov	r6, r9
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	4641      	mov	r1, r8
 800b3a8:	6820      	ldr	r0, [r4, #0]
 800b3aa:	f000 f92d 	bl	800b608 <memmove>
 800b3ae:	68a3      	ldr	r3, [r4, #8]
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	1b9b      	subs	r3, r3, r6
 800b3b4:	60a3      	str	r3, [r4, #8]
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	441e      	add	r6, r3
 800b3ba:	6026      	str	r6, [r4, #0]
 800b3bc:	e7dc      	b.n	800b378 <__ssputs_r+0x58>
 800b3be:	462a      	mov	r2, r5
 800b3c0:	f000 f93d 	bl	800b63e <_realloc_r>
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d1e2      	bne.n	800b390 <__ssputs_r+0x70>
 800b3ca:	6921      	ldr	r1, [r4, #16]
 800b3cc:	4650      	mov	r0, sl
 800b3ce:	f7ff ff01 	bl	800b1d4 <_free_r>
 800b3d2:	e7c8      	b.n	800b366 <__ssputs_r+0x46>

0800b3d4 <_svfiprintf_r>:
 800b3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3d8:	461d      	mov	r5, r3
 800b3da:	898b      	ldrh	r3, [r1, #12]
 800b3dc:	b09d      	sub	sp, #116	; 0x74
 800b3de:	061f      	lsls	r7, r3, #24
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4616      	mov	r6, r2
 800b3e6:	d50f      	bpl.n	800b408 <_svfiprintf_r+0x34>
 800b3e8:	690b      	ldr	r3, [r1, #16]
 800b3ea:	b96b      	cbnz	r3, 800b408 <_svfiprintf_r+0x34>
 800b3ec:	2140      	movs	r1, #64	; 0x40
 800b3ee:	f7ff ff3d 	bl	800b26c <_malloc_r>
 800b3f2:	6020      	str	r0, [r4, #0]
 800b3f4:	6120      	str	r0, [r4, #16]
 800b3f6:	b928      	cbnz	r0, 800b404 <_svfiprintf_r+0x30>
 800b3f8:	230c      	movs	r3, #12
 800b3fa:	f8c8 3000 	str.w	r3, [r8]
 800b3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b402:	e0c8      	b.n	800b596 <_svfiprintf_r+0x1c2>
 800b404:	2340      	movs	r3, #64	; 0x40
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	2300      	movs	r3, #0
 800b40a:	9309      	str	r3, [sp, #36]	; 0x24
 800b40c:	2320      	movs	r3, #32
 800b40e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b412:	2330      	movs	r3, #48	; 0x30
 800b414:	f04f 0b01 	mov.w	fp, #1
 800b418:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b41c:	9503      	str	r5, [sp, #12]
 800b41e:	4637      	mov	r7, r6
 800b420:	463d      	mov	r5, r7
 800b422:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b426:	b10b      	cbz	r3, 800b42c <_svfiprintf_r+0x58>
 800b428:	2b25      	cmp	r3, #37	; 0x25
 800b42a:	d13e      	bne.n	800b4aa <_svfiprintf_r+0xd6>
 800b42c:	ebb7 0a06 	subs.w	sl, r7, r6
 800b430:	d00b      	beq.n	800b44a <_svfiprintf_r+0x76>
 800b432:	4653      	mov	r3, sl
 800b434:	4632      	mov	r2, r6
 800b436:	4621      	mov	r1, r4
 800b438:	4640      	mov	r0, r8
 800b43a:	f7ff ff71 	bl	800b320 <__ssputs_r>
 800b43e:	3001      	adds	r0, #1
 800b440:	f000 80a4 	beq.w	800b58c <_svfiprintf_r+0x1b8>
 800b444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b446:	4453      	add	r3, sl
 800b448:	9309      	str	r3, [sp, #36]	; 0x24
 800b44a:	783b      	ldrb	r3, [r7, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 809d 	beq.w	800b58c <_svfiprintf_r+0x1b8>
 800b452:	2300      	movs	r3, #0
 800b454:	f04f 32ff 	mov.w	r2, #4294967295
 800b458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b45c:	9304      	str	r3, [sp, #16]
 800b45e:	9307      	str	r3, [sp, #28]
 800b460:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b464:	931a      	str	r3, [sp, #104]	; 0x68
 800b466:	462f      	mov	r7, r5
 800b468:	2205      	movs	r2, #5
 800b46a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b46e:	4850      	ldr	r0, [pc, #320]	; (800b5b0 <_svfiprintf_r+0x1dc>)
 800b470:	f7ff fbac 	bl	800abcc <memchr>
 800b474:	9b04      	ldr	r3, [sp, #16]
 800b476:	b9d0      	cbnz	r0, 800b4ae <_svfiprintf_r+0xda>
 800b478:	06d9      	lsls	r1, r3, #27
 800b47a:	bf44      	itt	mi
 800b47c:	2220      	movmi	r2, #32
 800b47e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b482:	071a      	lsls	r2, r3, #28
 800b484:	bf44      	itt	mi
 800b486:	222b      	movmi	r2, #43	; 0x2b
 800b488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b48c:	782a      	ldrb	r2, [r5, #0]
 800b48e:	2a2a      	cmp	r2, #42	; 0x2a
 800b490:	d015      	beq.n	800b4be <_svfiprintf_r+0xea>
 800b492:	462f      	mov	r7, r5
 800b494:	2000      	movs	r0, #0
 800b496:	250a      	movs	r5, #10
 800b498:	9a07      	ldr	r2, [sp, #28]
 800b49a:	4639      	mov	r1, r7
 800b49c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4a0:	3b30      	subs	r3, #48	; 0x30
 800b4a2:	2b09      	cmp	r3, #9
 800b4a4:	d94d      	bls.n	800b542 <_svfiprintf_r+0x16e>
 800b4a6:	b1b8      	cbz	r0, 800b4d8 <_svfiprintf_r+0x104>
 800b4a8:	e00f      	b.n	800b4ca <_svfiprintf_r+0xf6>
 800b4aa:	462f      	mov	r7, r5
 800b4ac:	e7b8      	b.n	800b420 <_svfiprintf_r+0x4c>
 800b4ae:	4a40      	ldr	r2, [pc, #256]	; (800b5b0 <_svfiprintf_r+0x1dc>)
 800b4b0:	463d      	mov	r5, r7
 800b4b2:	1a80      	subs	r0, r0, r2
 800b4b4:	fa0b f000 	lsl.w	r0, fp, r0
 800b4b8:	4318      	orrs	r0, r3
 800b4ba:	9004      	str	r0, [sp, #16]
 800b4bc:	e7d3      	b.n	800b466 <_svfiprintf_r+0x92>
 800b4be:	9a03      	ldr	r2, [sp, #12]
 800b4c0:	1d11      	adds	r1, r2, #4
 800b4c2:	6812      	ldr	r2, [r2, #0]
 800b4c4:	9103      	str	r1, [sp, #12]
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	db01      	blt.n	800b4ce <_svfiprintf_r+0xfa>
 800b4ca:	9207      	str	r2, [sp, #28]
 800b4cc:	e004      	b.n	800b4d8 <_svfiprintf_r+0x104>
 800b4ce:	4252      	negs	r2, r2
 800b4d0:	f043 0302 	orr.w	r3, r3, #2
 800b4d4:	9207      	str	r2, [sp, #28]
 800b4d6:	9304      	str	r3, [sp, #16]
 800b4d8:	783b      	ldrb	r3, [r7, #0]
 800b4da:	2b2e      	cmp	r3, #46	; 0x2e
 800b4dc:	d10c      	bne.n	800b4f8 <_svfiprintf_r+0x124>
 800b4de:	787b      	ldrb	r3, [r7, #1]
 800b4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b4e2:	d133      	bne.n	800b54c <_svfiprintf_r+0x178>
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	3702      	adds	r7, #2
 800b4e8:	1d1a      	adds	r2, r3, #4
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	9203      	str	r2, [sp, #12]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	bfb8      	it	lt
 800b4f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4f6:	9305      	str	r3, [sp, #20]
 800b4f8:	4d2e      	ldr	r5, [pc, #184]	; (800b5b4 <_svfiprintf_r+0x1e0>)
 800b4fa:	2203      	movs	r2, #3
 800b4fc:	7839      	ldrb	r1, [r7, #0]
 800b4fe:	4628      	mov	r0, r5
 800b500:	f7ff fb64 	bl	800abcc <memchr>
 800b504:	b138      	cbz	r0, 800b516 <_svfiprintf_r+0x142>
 800b506:	2340      	movs	r3, #64	; 0x40
 800b508:	1b40      	subs	r0, r0, r5
 800b50a:	fa03 f000 	lsl.w	r0, r3, r0
 800b50e:	9b04      	ldr	r3, [sp, #16]
 800b510:	3701      	adds	r7, #1
 800b512:	4303      	orrs	r3, r0
 800b514:	9304      	str	r3, [sp, #16]
 800b516:	7839      	ldrb	r1, [r7, #0]
 800b518:	2206      	movs	r2, #6
 800b51a:	4827      	ldr	r0, [pc, #156]	; (800b5b8 <_svfiprintf_r+0x1e4>)
 800b51c:	1c7e      	adds	r6, r7, #1
 800b51e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b522:	f7ff fb53 	bl	800abcc <memchr>
 800b526:	2800      	cmp	r0, #0
 800b528:	d038      	beq.n	800b59c <_svfiprintf_r+0x1c8>
 800b52a:	4b24      	ldr	r3, [pc, #144]	; (800b5bc <_svfiprintf_r+0x1e8>)
 800b52c:	bb13      	cbnz	r3, 800b574 <_svfiprintf_r+0x1a0>
 800b52e:	9b03      	ldr	r3, [sp, #12]
 800b530:	3307      	adds	r3, #7
 800b532:	f023 0307 	bic.w	r3, r3, #7
 800b536:	3308      	adds	r3, #8
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b53c:	444b      	add	r3, r9
 800b53e:	9309      	str	r3, [sp, #36]	; 0x24
 800b540:	e76d      	b.n	800b41e <_svfiprintf_r+0x4a>
 800b542:	fb05 3202 	mla	r2, r5, r2, r3
 800b546:	2001      	movs	r0, #1
 800b548:	460f      	mov	r7, r1
 800b54a:	e7a6      	b.n	800b49a <_svfiprintf_r+0xc6>
 800b54c:	2300      	movs	r3, #0
 800b54e:	250a      	movs	r5, #10
 800b550:	4619      	mov	r1, r3
 800b552:	3701      	adds	r7, #1
 800b554:	9305      	str	r3, [sp, #20]
 800b556:	4638      	mov	r0, r7
 800b558:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b55c:	3a30      	subs	r2, #48	; 0x30
 800b55e:	2a09      	cmp	r2, #9
 800b560:	d903      	bls.n	800b56a <_svfiprintf_r+0x196>
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0c8      	beq.n	800b4f8 <_svfiprintf_r+0x124>
 800b566:	9105      	str	r1, [sp, #20]
 800b568:	e7c6      	b.n	800b4f8 <_svfiprintf_r+0x124>
 800b56a:	fb05 2101 	mla	r1, r5, r1, r2
 800b56e:	2301      	movs	r3, #1
 800b570:	4607      	mov	r7, r0
 800b572:	e7f0      	b.n	800b556 <_svfiprintf_r+0x182>
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	4622      	mov	r2, r4
 800b57a:	4b11      	ldr	r3, [pc, #68]	; (800b5c0 <_svfiprintf_r+0x1ec>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4640      	mov	r0, r8
 800b580:	f7fe f8ee 	bl	8009760 <_printf_float>
 800b584:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b588:	4681      	mov	r9, r0
 800b58a:	d1d6      	bne.n	800b53a <_svfiprintf_r+0x166>
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	065b      	lsls	r3, r3, #25
 800b590:	f53f af35 	bmi.w	800b3fe <_svfiprintf_r+0x2a>
 800b594:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b596:	b01d      	add	sp, #116	; 0x74
 800b598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b59c:	ab03      	add	r3, sp, #12
 800b59e:	9300      	str	r3, [sp, #0]
 800b5a0:	4622      	mov	r2, r4
 800b5a2:	4b07      	ldr	r3, [pc, #28]	; (800b5c0 <_svfiprintf_r+0x1ec>)
 800b5a4:	a904      	add	r1, sp, #16
 800b5a6:	4640      	mov	r0, r8
 800b5a8:	f7fe fb86 	bl	8009cb8 <_printf_i>
 800b5ac:	e7ea      	b.n	800b584 <_svfiprintf_r+0x1b0>
 800b5ae:	bf00      	nop
 800b5b0:	0800c4c4 	.word	0x0800c4c4
 800b5b4:	0800c4ca 	.word	0x0800c4ca
 800b5b8:	0800c4ce 	.word	0x0800c4ce
 800b5bc:	08009761 	.word	0x08009761
 800b5c0:	0800b321 	.word	0x0800b321

0800b5c4 <_sbrk_r>:
 800b5c4:	b538      	push	{r3, r4, r5, lr}
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	4c05      	ldr	r4, [pc, #20]	; (800b5e0 <_sbrk_r+0x1c>)
 800b5ca:	4605      	mov	r5, r0
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	f7f8 fbf2 	bl	8003db8 <_sbrk>
 800b5d4:	1c43      	adds	r3, r0, #1
 800b5d6:	d102      	bne.n	800b5de <_sbrk_r+0x1a>
 800b5d8:	6823      	ldr	r3, [r4, #0]
 800b5da:	b103      	cbz	r3, 800b5de <_sbrk_r+0x1a>
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	bd38      	pop	{r3, r4, r5, pc}
 800b5e0:	200011a4 	.word	0x200011a4

0800b5e4 <__ascii_mbtowc>:
 800b5e4:	b082      	sub	sp, #8
 800b5e6:	b901      	cbnz	r1, 800b5ea <__ascii_mbtowc+0x6>
 800b5e8:	a901      	add	r1, sp, #4
 800b5ea:	b142      	cbz	r2, 800b5fe <__ascii_mbtowc+0x1a>
 800b5ec:	b14b      	cbz	r3, 800b602 <__ascii_mbtowc+0x1e>
 800b5ee:	7813      	ldrb	r3, [r2, #0]
 800b5f0:	600b      	str	r3, [r1, #0]
 800b5f2:	7812      	ldrb	r2, [r2, #0]
 800b5f4:	1c10      	adds	r0, r2, #0
 800b5f6:	bf18      	it	ne
 800b5f8:	2001      	movne	r0, #1
 800b5fa:	b002      	add	sp, #8
 800b5fc:	4770      	bx	lr
 800b5fe:	4610      	mov	r0, r2
 800b600:	e7fb      	b.n	800b5fa <__ascii_mbtowc+0x16>
 800b602:	f06f 0001 	mvn.w	r0, #1
 800b606:	e7f8      	b.n	800b5fa <__ascii_mbtowc+0x16>

0800b608 <memmove>:
 800b608:	4288      	cmp	r0, r1
 800b60a:	b510      	push	{r4, lr}
 800b60c:	eb01 0302 	add.w	r3, r1, r2
 800b610:	d807      	bhi.n	800b622 <memmove+0x1a>
 800b612:	1e42      	subs	r2, r0, #1
 800b614:	4299      	cmp	r1, r3
 800b616:	d00a      	beq.n	800b62e <memmove+0x26>
 800b618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b61c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b620:	e7f8      	b.n	800b614 <memmove+0xc>
 800b622:	4283      	cmp	r3, r0
 800b624:	d9f5      	bls.n	800b612 <memmove+0xa>
 800b626:	1881      	adds	r1, r0, r2
 800b628:	1ad2      	subs	r2, r2, r3
 800b62a:	42d3      	cmn	r3, r2
 800b62c:	d100      	bne.n	800b630 <memmove+0x28>
 800b62e:	bd10      	pop	{r4, pc}
 800b630:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b634:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b638:	e7f7      	b.n	800b62a <memmove+0x22>

0800b63a <__malloc_lock>:
 800b63a:	4770      	bx	lr

0800b63c <__malloc_unlock>:
 800b63c:	4770      	bx	lr

0800b63e <_realloc_r>:
 800b63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b640:	4607      	mov	r7, r0
 800b642:	4614      	mov	r4, r2
 800b644:	460e      	mov	r6, r1
 800b646:	b921      	cbnz	r1, 800b652 <_realloc_r+0x14>
 800b648:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b64c:	4611      	mov	r1, r2
 800b64e:	f7ff be0d 	b.w	800b26c <_malloc_r>
 800b652:	b922      	cbnz	r2, 800b65e <_realloc_r+0x20>
 800b654:	f7ff fdbe 	bl	800b1d4 <_free_r>
 800b658:	4625      	mov	r5, r4
 800b65a:	4628      	mov	r0, r5
 800b65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b65e:	f000 f821 	bl	800b6a4 <_malloc_usable_size_r>
 800b662:	42a0      	cmp	r0, r4
 800b664:	d20f      	bcs.n	800b686 <_realloc_r+0x48>
 800b666:	4621      	mov	r1, r4
 800b668:	4638      	mov	r0, r7
 800b66a:	f7ff fdff 	bl	800b26c <_malloc_r>
 800b66e:	4605      	mov	r5, r0
 800b670:	2800      	cmp	r0, #0
 800b672:	d0f2      	beq.n	800b65a <_realloc_r+0x1c>
 800b674:	4631      	mov	r1, r6
 800b676:	4622      	mov	r2, r4
 800b678:	f7ff fab6 	bl	800abe8 <memcpy>
 800b67c:	4631      	mov	r1, r6
 800b67e:	4638      	mov	r0, r7
 800b680:	f7ff fda8 	bl	800b1d4 <_free_r>
 800b684:	e7e9      	b.n	800b65a <_realloc_r+0x1c>
 800b686:	4635      	mov	r5, r6
 800b688:	e7e7      	b.n	800b65a <_realloc_r+0x1c>

0800b68a <__ascii_wctomb>:
 800b68a:	b149      	cbz	r1, 800b6a0 <__ascii_wctomb+0x16>
 800b68c:	2aff      	cmp	r2, #255	; 0xff
 800b68e:	bf8b      	itete	hi
 800b690:	238a      	movhi	r3, #138	; 0x8a
 800b692:	700a      	strbls	r2, [r1, #0]
 800b694:	6003      	strhi	r3, [r0, #0]
 800b696:	2001      	movls	r0, #1
 800b698:	bf88      	it	hi
 800b69a:	f04f 30ff 	movhi.w	r0, #4294967295
 800b69e:	4770      	bx	lr
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	4770      	bx	lr

0800b6a4 <_malloc_usable_size_r>:
 800b6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6a8:	1f18      	subs	r0, r3, #4
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	bfbc      	itt	lt
 800b6ae:	580b      	ldrlt	r3, [r1, r0]
 800b6b0:	18c0      	addlt	r0, r0, r3
 800b6b2:	4770      	bx	lr

0800b6b4 <log>:
 800b6b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800b6b8:	b08a      	sub	sp, #40	; 0x28
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	f000 f873 	bl	800b7a8 <__ieee754_log>
 800b6c2:	4b34      	ldr	r3, [pc, #208]	; (800b794 <log+0xe0>)
 800b6c4:	4680      	mov	r8, r0
 800b6c6:	f993 6000 	ldrsb.w	r6, [r3]
 800b6ca:	4689      	mov	r9, r1
 800b6cc:	1c73      	adds	r3, r6, #1
 800b6ce:	d05b      	beq.n	800b788 <log+0xd4>
 800b6d0:	4622      	mov	r2, r4
 800b6d2:	462b      	mov	r3, r5
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f5 f9d4 	bl	8000a84 <__aeabi_dcmpun>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d153      	bne.n	800b788 <log+0xd4>
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7f5 f9c2 	bl	8000a70 <__aeabi_dcmpgt>
 800b6ec:	2800      	cmp	r0, #0
 800b6ee:	d14b      	bne.n	800b788 <log+0xd4>
 800b6f0:	4b29      	ldr	r3, [pc, #164]	; (800b798 <log+0xe4>)
 800b6f2:	9008      	str	r0, [sp, #32]
 800b6f4:	9301      	str	r3, [sp, #4]
 800b6f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b6fa:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b6fe:	b9a6      	cbnz	r6, 800b72a <log+0x76>
 800b700:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b704:	4b25      	ldr	r3, [pc, #148]	; (800b79c <log+0xe8>)
 800b706:	4620      	mov	r0, r4
 800b708:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b70c:	4629      	mov	r1, r5
 800b70e:	2200      	movs	r2, #0
 800b710:	2300      	movs	r3, #0
 800b712:	f7f5 f985 	bl	8000a20 <__aeabi_dcmpeq>
 800b716:	bb40      	cbnz	r0, 800b76a <log+0xb6>
 800b718:	2301      	movs	r3, #1
 800b71a:	2e02      	cmp	r6, #2
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	d119      	bne.n	800b754 <log+0xa0>
 800b720:	f7fd ff5a 	bl	80095d8 <__errno>
 800b724:	2321      	movs	r3, #33	; 0x21
 800b726:	6003      	str	r3, [r0, #0]
 800b728:	e019      	b.n	800b75e <log+0xaa>
 800b72a:	2200      	movs	r2, #0
 800b72c:	4b1c      	ldr	r3, [pc, #112]	; (800b7a0 <log+0xec>)
 800b72e:	4620      	mov	r0, r4
 800b730:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b734:	4629      	mov	r1, r5
 800b736:	2200      	movs	r2, #0
 800b738:	2300      	movs	r3, #0
 800b73a:	f7f5 f971 	bl	8000a20 <__aeabi_dcmpeq>
 800b73e:	2800      	cmp	r0, #0
 800b740:	d0ea      	beq.n	800b718 <log+0x64>
 800b742:	2302      	movs	r3, #2
 800b744:	429e      	cmp	r6, r3
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	d111      	bne.n	800b76e <log+0xba>
 800b74a:	f7fd ff45 	bl	80095d8 <__errno>
 800b74e:	2322      	movs	r3, #34	; 0x22
 800b750:	6003      	str	r3, [r0, #0]
 800b752:	e011      	b.n	800b778 <log+0xc4>
 800b754:	4668      	mov	r0, sp
 800b756:	f000 f9d9 	bl	800bb0c <matherr>
 800b75a:	2800      	cmp	r0, #0
 800b75c:	d0e0      	beq.n	800b720 <log+0x6c>
 800b75e:	4811      	ldr	r0, [pc, #68]	; (800b7a4 <log+0xf0>)
 800b760:	f000 f9d6 	bl	800bb10 <nan>
 800b764:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b768:	e006      	b.n	800b778 <log+0xc4>
 800b76a:	2302      	movs	r3, #2
 800b76c:	9300      	str	r3, [sp, #0]
 800b76e:	4668      	mov	r0, sp
 800b770:	f000 f9cc 	bl	800bb0c <matherr>
 800b774:	2800      	cmp	r0, #0
 800b776:	d0e8      	beq.n	800b74a <log+0x96>
 800b778:	9b08      	ldr	r3, [sp, #32]
 800b77a:	b11b      	cbz	r3, 800b784 <log+0xd0>
 800b77c:	f7fd ff2c 	bl	80095d8 <__errno>
 800b780:	9b08      	ldr	r3, [sp, #32]
 800b782:	6003      	str	r3, [r0, #0]
 800b784:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b788:	4640      	mov	r0, r8
 800b78a:	4649      	mov	r1, r9
 800b78c:	b00a      	add	sp, #40	; 0x28
 800b78e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b792:	bf00      	nop
 800b794:	200001ec 	.word	0x200001ec
 800b798:	0800c5e0 	.word	0x0800c5e0
 800b79c:	c7efffff 	.word	0xc7efffff
 800b7a0:	fff00000 	.word	0xfff00000
 800b7a4:	0800c4c9 	.word	0x0800c4c9

0800b7a8 <__ieee754_log>:
 800b7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ac:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b7b0:	b087      	sub	sp, #28
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	da24      	bge.n	800b804 <__ieee754_log+0x5c>
 800b7ba:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b7be:	4304      	orrs	r4, r0
 800b7c0:	d108      	bne.n	800b7d4 <__ieee754_log+0x2c>
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2000      	movs	r0, #0
 800b7c8:	49cb      	ldr	r1, [pc, #812]	; (800baf8 <__ieee754_log+0x350>)
 800b7ca:	f7f4 ffeb 	bl	80007a4 <__aeabi_ddiv>
 800b7ce:	b007      	add	sp, #28
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	2900      	cmp	r1, #0
 800b7d6:	da04      	bge.n	800b7e2 <__ieee754_log+0x3a>
 800b7d8:	f7f4 fd02 	bl	80001e0 <__aeabi_dsub>
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2300      	movs	r3, #0
 800b7e0:	e7f3      	b.n	800b7ca <__ieee754_log+0x22>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	4bc5      	ldr	r3, [pc, #788]	; (800bafc <__ieee754_log+0x354>)
 800b7e6:	f7f4 feb3 	bl	8000550 <__aeabi_dmul>
 800b7ea:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	460d      	mov	r5, r1
 800b7f4:	49c2      	ldr	r1, [pc, #776]	; (800bb00 <__ieee754_log+0x358>)
 800b7f6:	428d      	cmp	r5, r1
 800b7f8:	dd06      	ble.n	800b808 <__ieee754_log+0x60>
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f7f4 fcf1 	bl	80001e4 <__adddf3>
 800b802:	e7e4      	b.n	800b7ce <__ieee754_log+0x26>
 800b804:	2600      	movs	r6, #0
 800b806:	e7f5      	b.n	800b7f4 <__ieee754_log+0x4c>
 800b808:	152c      	asrs	r4, r5, #20
 800b80a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b80e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800b812:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b816:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800b81a:	4426      	add	r6, r4
 800b81c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800b820:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800b824:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800b828:	ea41 0305 	orr.w	r3, r1, r5
 800b82c:	4610      	mov	r0, r2
 800b82e:	4619      	mov	r1, r3
 800b830:	2200      	movs	r2, #0
 800b832:	4bb4      	ldr	r3, [pc, #720]	; (800bb04 <__ieee754_log+0x35c>)
 800b834:	f7f4 fcd4 	bl	80001e0 <__aeabi_dsub>
 800b838:	1cab      	adds	r3, r5, #2
 800b83a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b83e:	2b02      	cmp	r3, #2
 800b840:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800b844:	4682      	mov	sl, r0
 800b846:	468b      	mov	fp, r1
 800b848:	f04f 0200 	mov.w	r2, #0
 800b84c:	dc53      	bgt.n	800b8f6 <__ieee754_log+0x14e>
 800b84e:	2300      	movs	r3, #0
 800b850:	f7f5 f8e6 	bl	8000a20 <__aeabi_dcmpeq>
 800b854:	b1d0      	cbz	r0, 800b88c <__ieee754_log+0xe4>
 800b856:	2c00      	cmp	r4, #0
 800b858:	f000 8120 	beq.w	800ba9c <__ieee754_log+0x2f4>
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7f4 fe0d 	bl	800047c <__aeabi_i2d>
 800b862:	a391      	add	r3, pc, #580	; (adr r3, 800baa8 <__ieee754_log+0x300>)
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	4606      	mov	r6, r0
 800b86a:	460f      	mov	r7, r1
 800b86c:	f7f4 fe70 	bl	8000550 <__aeabi_dmul>
 800b870:	a38f      	add	r3, pc, #572	; (adr r3, 800bab0 <__ieee754_log+0x308>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	4604      	mov	r4, r0
 800b878:	460d      	mov	r5, r1
 800b87a:	4630      	mov	r0, r6
 800b87c:	4639      	mov	r1, r7
 800b87e:	f7f4 fe67 	bl	8000550 <__aeabi_dmul>
 800b882:	4602      	mov	r2, r0
 800b884:	460b      	mov	r3, r1
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	e7b8      	b.n	800b7fe <__ieee754_log+0x56>
 800b88c:	a38a      	add	r3, pc, #552	; (adr r3, 800bab8 <__ieee754_log+0x310>)
 800b88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b892:	4650      	mov	r0, sl
 800b894:	4659      	mov	r1, fp
 800b896:	f7f4 fe5b 	bl	8000550 <__aeabi_dmul>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	2000      	movs	r0, #0
 800b8a0:	4999      	ldr	r1, [pc, #612]	; (800bb08 <__ieee754_log+0x360>)
 800b8a2:	f7f4 fc9d 	bl	80001e0 <__aeabi_dsub>
 800b8a6:	4652      	mov	r2, sl
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	460f      	mov	r7, r1
 800b8ac:	465b      	mov	r3, fp
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	f7f4 fe4d 	bl	8000550 <__aeabi_dmul>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	4639      	mov	r1, r7
 800b8be:	f7f4 fe47 	bl	8000550 <__aeabi_dmul>
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	b914      	cbnz	r4, 800b8ce <__ieee754_log+0x126>
 800b8c8:	4632      	mov	r2, r6
 800b8ca:	463b      	mov	r3, r7
 800b8cc:	e0a0      	b.n	800ba10 <__ieee754_log+0x268>
 800b8ce:	4620      	mov	r0, r4
 800b8d0:	f7f4 fdd4 	bl	800047c <__aeabi_i2d>
 800b8d4:	a374      	add	r3, pc, #464	; (adr r3, 800baa8 <__ieee754_log+0x300>)
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	4680      	mov	r8, r0
 800b8dc:	4689      	mov	r9, r1
 800b8de:	f7f4 fe37 	bl	8000550 <__aeabi_dmul>
 800b8e2:	a373      	add	r3, pc, #460	; (adr r3, 800bab0 <__ieee754_log+0x308>)
 800b8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	4640      	mov	r0, r8
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	f7f4 fe2e 	bl	8000550 <__aeabi_dmul>
 800b8f4:	e0a5      	b.n	800ba42 <__ieee754_log+0x29a>
 800b8f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b8fa:	f7f4 fc73 	bl	80001e4 <__adddf3>
 800b8fe:	4602      	mov	r2, r0
 800b900:	460b      	mov	r3, r1
 800b902:	4650      	mov	r0, sl
 800b904:	4659      	mov	r1, fp
 800b906:	f7f4 ff4d 	bl	80007a4 <__aeabi_ddiv>
 800b90a:	e9cd 0100 	strd	r0, r1, [sp]
 800b90e:	4620      	mov	r0, r4
 800b910:	f7f4 fdb4 	bl	800047c <__aeabi_i2d>
 800b914:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b91c:	4610      	mov	r0, r2
 800b91e:	4619      	mov	r1, r3
 800b920:	f7f4 fe16 	bl	8000550 <__aeabi_dmul>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b92c:	f7f4 fe10 	bl	8000550 <__aeabi_dmul>
 800b930:	a363      	add	r3, pc, #396	; (adr r3, 800bac0 <__ieee754_log+0x318>)
 800b932:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b936:	4680      	mov	r8, r0
 800b938:	4689      	mov	r9, r1
 800b93a:	f7f4 fe09 	bl	8000550 <__aeabi_dmul>
 800b93e:	a362      	add	r3, pc, #392	; (adr r3, 800bac8 <__ieee754_log+0x320>)
 800b940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b944:	f7f4 fc4e 	bl	80001e4 <__adddf3>
 800b948:	4642      	mov	r2, r8
 800b94a:	464b      	mov	r3, r9
 800b94c:	f7f4 fe00 	bl	8000550 <__aeabi_dmul>
 800b950:	a35f      	add	r3, pc, #380	; (adr r3, 800bad0 <__ieee754_log+0x328>)
 800b952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b956:	f7f4 fc45 	bl	80001e4 <__adddf3>
 800b95a:	4642      	mov	r2, r8
 800b95c:	464b      	mov	r3, r9
 800b95e:	f7f4 fdf7 	bl	8000550 <__aeabi_dmul>
 800b962:	a35d      	add	r3, pc, #372	; (adr r3, 800bad8 <__ieee754_log+0x330>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	f7f4 fc3c 	bl	80001e4 <__adddf3>
 800b96c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b970:	f7f4 fdee 	bl	8000550 <__aeabi_dmul>
 800b974:	a35a      	add	r3, pc, #360	; (adr r3, 800bae0 <__ieee754_log+0x338>)
 800b976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b97e:	4640      	mov	r0, r8
 800b980:	4649      	mov	r1, r9
 800b982:	f7f4 fde5 	bl	8000550 <__aeabi_dmul>
 800b986:	a358      	add	r3, pc, #352	; (adr r3, 800bae8 <__ieee754_log+0x340>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	f7f4 fc2a 	bl	80001e4 <__adddf3>
 800b990:	4642      	mov	r2, r8
 800b992:	464b      	mov	r3, r9
 800b994:	f7f4 fddc 	bl	8000550 <__aeabi_dmul>
 800b998:	a355      	add	r3, pc, #340	; (adr r3, 800baf0 <__ieee754_log+0x348>)
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f7f4 fc21 	bl	80001e4 <__adddf3>
 800b9a2:	4642      	mov	r2, r8
 800b9a4:	464b      	mov	r3, r9
 800b9a6:	f7f4 fdd3 	bl	8000550 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b9b2:	f7f4 fc17 	bl	80001e4 <__adddf3>
 800b9b6:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800b9ba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b9be:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800b9c2:	3551      	adds	r5, #81	; 0x51
 800b9c4:	4335      	orrs	r5, r6
 800b9c6:	2d00      	cmp	r5, #0
 800b9c8:	4680      	mov	r8, r0
 800b9ca:	4689      	mov	r9, r1
 800b9cc:	dd48      	ble.n	800ba60 <__ieee754_log+0x2b8>
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	4b4d      	ldr	r3, [pc, #308]	; (800bb08 <__ieee754_log+0x360>)
 800b9d2:	4650      	mov	r0, sl
 800b9d4:	4659      	mov	r1, fp
 800b9d6:	f7f4 fdbb 	bl	8000550 <__aeabi_dmul>
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	f7f4 fdb7 	bl	8000550 <__aeabi_dmul>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	460f      	mov	r7, r1
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	4649      	mov	r1, r9
 800b9ee:	f7f4 fbf9 	bl	80001e4 <__adddf3>
 800b9f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9f6:	f7f4 fdab 	bl	8000550 <__aeabi_dmul>
 800b9fa:	4680      	mov	r8, r0
 800b9fc:	4689      	mov	r9, r1
 800b9fe:	b964      	cbnz	r4, 800ba1a <__ieee754_log+0x272>
 800ba00:	4602      	mov	r2, r0
 800ba02:	460b      	mov	r3, r1
 800ba04:	4630      	mov	r0, r6
 800ba06:	4639      	mov	r1, r7
 800ba08:	f7f4 fbea 	bl	80001e0 <__aeabi_dsub>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	460b      	mov	r3, r1
 800ba10:	4650      	mov	r0, sl
 800ba12:	4659      	mov	r1, fp
 800ba14:	f7f4 fbe4 	bl	80001e0 <__aeabi_dsub>
 800ba18:	e6d9      	b.n	800b7ce <__ieee754_log+0x26>
 800ba1a:	a323      	add	r3, pc, #140	; (adr r3, 800baa8 <__ieee754_log+0x300>)
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba24:	f7f4 fd94 	bl	8000550 <__aeabi_dmul>
 800ba28:	a321      	add	r3, pc, #132	; (adr r3, 800bab0 <__ieee754_log+0x308>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	4604      	mov	r4, r0
 800ba30:	460d      	mov	r5, r1
 800ba32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba36:	f7f4 fd8b 	bl	8000550 <__aeabi_dmul>
 800ba3a:	4642      	mov	r2, r8
 800ba3c:	464b      	mov	r3, r9
 800ba3e:	f7f4 fbd1 	bl	80001e4 <__adddf3>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4630      	mov	r0, r6
 800ba48:	4639      	mov	r1, r7
 800ba4a:	f7f4 fbc9 	bl	80001e0 <__aeabi_dsub>
 800ba4e:	4652      	mov	r2, sl
 800ba50:	465b      	mov	r3, fp
 800ba52:	f7f4 fbc5 	bl	80001e0 <__aeabi_dsub>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	e7d9      	b.n	800ba14 <__ieee754_log+0x26c>
 800ba60:	4602      	mov	r2, r0
 800ba62:	460b      	mov	r3, r1
 800ba64:	4650      	mov	r0, sl
 800ba66:	4659      	mov	r1, fp
 800ba68:	f7f4 fbba 	bl	80001e0 <__aeabi_dsub>
 800ba6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba70:	f7f4 fd6e 	bl	8000550 <__aeabi_dmul>
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	2c00      	cmp	r4, #0
 800ba7a:	f43f af25 	beq.w	800b8c8 <__ieee754_log+0x120>
 800ba7e:	a30a      	add	r3, pc, #40	; (adr r3, 800baa8 <__ieee754_log+0x300>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba88:	f7f4 fd62 	bl	8000550 <__aeabi_dmul>
 800ba8c:	a308      	add	r3, pc, #32	; (adr r3, 800bab0 <__ieee754_log+0x308>)
 800ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba92:	4604      	mov	r4, r0
 800ba94:	460d      	mov	r5, r1
 800ba96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba9a:	e729      	b.n	800b8f0 <__ieee754_log+0x148>
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	2100      	movs	r1, #0
 800baa0:	e695      	b.n	800b7ce <__ieee754_log+0x26>
 800baa2:	bf00      	nop
 800baa4:	f3af 8000 	nop.w
 800baa8:	fee00000 	.word	0xfee00000
 800baac:	3fe62e42 	.word	0x3fe62e42
 800bab0:	35793c76 	.word	0x35793c76
 800bab4:	3dea39ef 	.word	0x3dea39ef
 800bab8:	55555555 	.word	0x55555555
 800babc:	3fd55555 	.word	0x3fd55555
 800bac0:	df3e5244 	.word	0xdf3e5244
 800bac4:	3fc2f112 	.word	0x3fc2f112
 800bac8:	96cb03de 	.word	0x96cb03de
 800bacc:	3fc74664 	.word	0x3fc74664
 800bad0:	94229359 	.word	0x94229359
 800bad4:	3fd24924 	.word	0x3fd24924
 800bad8:	55555593 	.word	0x55555593
 800badc:	3fe55555 	.word	0x3fe55555
 800bae0:	d078c69f 	.word	0xd078c69f
 800bae4:	3fc39a09 	.word	0x3fc39a09
 800bae8:	1d8e78af 	.word	0x1d8e78af
 800baec:	3fcc71c5 	.word	0x3fcc71c5
 800baf0:	9997fa04 	.word	0x9997fa04
 800baf4:	3fd99999 	.word	0x3fd99999
 800baf8:	c3500000 	.word	0xc3500000
 800bafc:	43500000 	.word	0x43500000
 800bb00:	7fefffff 	.word	0x7fefffff
 800bb04:	3ff00000 	.word	0x3ff00000
 800bb08:	3fe00000 	.word	0x3fe00000

0800bb0c <matherr>:
 800bb0c:	2000      	movs	r0, #0
 800bb0e:	4770      	bx	lr

0800bb10 <nan>:
 800bb10:	2000      	movs	r0, #0
 800bb12:	4901      	ldr	r1, [pc, #4]	; (800bb18 <nan+0x8>)
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	7ff80000 	.word	0x7ff80000

0800bb1c <_init>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr

0800bb28 <_fini>:
 800bb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb2a:	bf00      	nop
 800bb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb2e:	bc08      	pop	{r3}
 800bb30:	469e      	mov	lr, r3
 800bb32:	4770      	bx	lr
