
GEN Charger Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001046c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b54  080105f8  080105f8  000205f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801114c  0801114c  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  0801114c  0801114c  0002114c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011154  08011154  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011154  08011154  00021154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011158  08011158  00021158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0801115c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001664  20000234  08011390  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  08011390  00031898  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002198d  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a9e  00000000  00000000  00051bea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00055688  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001238  00000000  00000000  00056a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ed6  00000000  00000000  00057cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014df9  00000000  00000000  00079b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3e6b  00000000  00000000  0008e987  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001527f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed4  00000000  00000000  00152870  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080105dc 	.word	0x080105dc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	080105dc 	.word	0x080105dc

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <Constant_Current>:
float 	SetPoint_CC;
float	CC_Value;

//test git2
void Constant_Current()
{
 8001490:	b598      	push	{r3, r4, r7, lr}
 8001492:	af00      	add	r7, sp, #0
	CC_Value = 0.2*BPack_Capacity;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <Constant_Current+0x58>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f801 	bl	80004a0 <__aeabi_f2d>
 800149e:	a310      	add	r3, pc, #64	; (adr r3, 80014e0 <Constant_Current+0x50>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f854 	bl	8000550 <__aeabi_dmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	4618      	mov	r0, r3
 80014ae:	4621      	mov	r1, r4
 80014b0:	f7ff fb26 	bl	8000b00 <__aeabi_d2f>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <Constant_Current+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
//	CC_Value = 3; test
	if(flag_Derating==1)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <Constant_Current+0x60>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d11a      	bne.n	80014f8 <Constant_Current+0x68>
		SetPoint_CC = 0.5*CC_Value;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <Constant_Current+0x5c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fc76 	bl	8000dbc <__aeabi_fmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <Constant_Current+0x64>)
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e08e      	b.n	80015f8 <Constant_Current+0x168>
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	9999999a 	.word	0x9999999a
 80014e4:	3fc99999 	.word	0x3fc99999
 80014e8:	200012bc 	.word	0x200012bc
 80014ec:	20000f5c 	.word	0x20000f5c
 80014f0:	20001118 	.word	0x20001118
 80014f4:	20000cb8 	.word	0x20000cb8
	else {
		if(BPack_Temp <= 10)
 80014f8:	4b8d      	ldr	r3, [pc, #564]	; (8001730 <Constant_Current+0x2a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	498d      	ldr	r1, [pc, #564]	; (8001734 <Constant_Current+0x2a4>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe04 	bl	800110c <__aeabi_fcmple>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <Constant_Current+0x90>
			SetPoint_CC = 0.5*CC_Value;
 800150a:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <Constant_Current+0x2a8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc52 	bl	8000dbc <__aeabi_fmul>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b87      	ldr	r3, [pc, #540]	; (800173c <Constant_Current+0x2ac>)
 800151e:	601a      	str	r2, [r3, #0]

		if(BPack_Temp >10 && BPack_Temp < 20) // Temperature 10 ~ 20
 8001520:	4b83      	ldr	r3, [pc, #524]	; (8001730 <Constant_Current+0x2a0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4983      	ldr	r1, [pc, #524]	; (8001734 <Constant_Current+0x2a4>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe04 	bl	8001134 <__aeabi_fcmpgt>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d013      	beq.n	800155a <Constant_Current+0xca>
 8001532:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <Constant_Current+0x2a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4982      	ldr	r1, [pc, #520]	; (8001740 <Constant_Current+0x2b0>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fddd 	bl	80010f8 <__aeabi_fcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <Constant_Current+0xca>
			SetPoint_CC = 0.5*CC_Value;
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <Constant_Current+0x2a8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc35 	bl	8000dbc <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b79      	ldr	r3, [pc, #484]	; (800173c <Constant_Current+0x2ac>)
 8001558:	601a      	str	r2, [r3, #0]

		if(BPack_Temp >= 20 && BPack_Temp < 25) // Temperature 20 ~ 30
 800155a:	4b75      	ldr	r3, [pc, #468]	; (8001730 <Constant_Current+0x2a0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4978      	ldr	r1, [pc, #480]	; (8001740 <Constant_Current+0x2b0>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fddd 	bl	8001120 <__aeabi_fcmpge>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <Constant_Current+0x114>
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <Constant_Current+0x2a0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4974      	ldr	r1, [pc, #464]	; (8001744 <Constant_Current+0x2b4>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fdc0 	bl	80010f8 <__aeabi_fcmplt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d012      	beq.n	80015a4 <Constant_Current+0x114>
			SetPoint_CC = 0.7*CC_Value;
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <Constant_Current+0x2a8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff8c 	bl	80004a0 <__aeabi_f2d>
 8001588:	a367      	add	r3, pc, #412	; (adr r3, 8001728 <Constant_Current+0x298>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe ffdf 	bl	8000550 <__aeabi_dmul>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	4618      	mov	r0, r3
 8001598:	4621      	mov	r1, r4
 800159a:	f7ff fab1 	bl	8000b00 <__aeabi_d2f>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <Constant_Current+0x2ac>)
 80015a2:	601a      	str	r2, [r3, #0]

		if(BPack_Temp >= 25 && BPack_Temp <= 50)
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <Constant_Current+0x2a0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4966      	ldr	r1, [pc, #408]	; (8001744 <Constant_Current+0x2b4>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fdb8 	bl	8001120 <__aeabi_fcmpge>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <Constant_Current+0x140>
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <Constant_Current+0x2a0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4963      	ldr	r1, [pc, #396]	; (8001748 <Constant_Current+0x2b8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fda5 	bl	800110c <__aeabi_fcmple>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <Constant_Current+0x140>
			SetPoint_CC = CC_Value;
 80015c8:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <Constant_Current+0x2a8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5b      	ldr	r2, [pc, #364]	; (800173c <Constant_Current+0x2ac>)
 80015ce:	6013      	str	r3, [r2, #0]

		if(BPack_Temp > 52)
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <Constant_Current+0x2a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	495d      	ldr	r1, [pc, #372]	; (800174c <Constant_Current+0x2bc>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fdac 	bl	8001134 <__aeabi_fcmpgt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <Constant_Current+0x168>
			SetPoint_CC = 0.5*CC_Value;
 80015e2:	4b55      	ldr	r3, [pc, #340]	; (8001738 <Constant_Current+0x2a8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fbe6 	bl	8000dbc <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b51      	ldr	r3, [pc, #324]	; (800173c <Constant_Current+0x2ac>)
 80015f6:	601a      	str	r2, [r3, #0]
	}

	sp = SetPoint_CC;
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <Constant_Current+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a54      	ldr	r2, [pc, #336]	; (8001750 <Constant_Current+0x2c0>)
 80015fe:	6013      	str	r3, [r2, #0]
	pv = Current_Charger;
 8001600:	4b54      	ldr	r3, [pc, #336]	; (8001754 <Constant_Current+0x2c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <Constant_Current+0x2c8>)
 8001606:	6013      	str	r3, [r2, #0]
	e = sp-pv;
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <Constant_Current+0x2c0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b52      	ldr	r3, [pc, #328]	; (8001758 <Constant_Current+0x2c8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fac8 	bl	8000ba8 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b4f      	ldr	r3, [pc, #316]	; (800175c <Constant_Current+0x2cc>)
 800161e:	601a      	str	r2, [r3, #0]
	d = e-esblm;
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <Constant_Current+0x2cc>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <Constant_Current+0x2d0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff fabc 	bl	8000ba8 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <Constant_Current+0x2d4>)
 8001636:	601a      	str	r2, [r3, #0]
	esblm = e;
 8001638:	4b48      	ldr	r3, [pc, #288]	; (800175c <Constant_Current+0x2cc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <Constant_Current+0x2d0>)
 800163e:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-6)
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <Constant_Current+0x2cc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4948      	ldr	r1, [pc, #288]	; (8001768 <Constant_Current+0x2d8>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fd60 	bl	800110c <__aeabi_fcmple>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01b      	beq.n	800168a <Constant_Current+0x1fa>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <Constant_Current+0x2dc>)
 8001654:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	4b45      	ldr	r3, [pc, #276]	; (8001770 <Constant_Current+0x2e0>)
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <Constant_Current+0x2e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a43      	ldr	r2, [pc, #268]	; (8001774 <Constant_Current+0x2e4>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <Constant_Current+0x2e4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a42      	ldr	r2, [pc, #264]	; (8001778 <Constant_Current+0x2e8>)
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <Constant_Current+0x2e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a41      	ldr	r2, [pc, #260]	; (800177c <Constant_Current+0x2ec>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <Constant_Current+0x2ec>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a40      	ldr	r2, [pc, #256]	; (8001780 <Constant_Current+0x2f0>)
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <Constant_Current+0x2f0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <Constant_Current+0x2f4>)
 8001688:	6013      	str	r3, [r2, #0]

	if(e>=-6&&e<=-4)
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <Constant_Current+0x2cc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4936      	ldr	r1, [pc, #216]	; (8001768 <Constant_Current+0x2d8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd45 	bl	8001120 <__aeabi_fcmpge>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d079      	beq.n	8001790 <Constant_Current+0x300>
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <Constant_Current+0x2cc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4939      	ldr	r1, [pc, #228]	; (8001788 <Constant_Current+0x2f8>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd32 	bl	800110c <__aeabi_fcmple>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d070      	beq.n	8001790 <Constant_Current+0x300>
	{ eNB=(-(e+6)/2)+1;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <Constant_Current+0x2cc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4936      	ldr	r1, [pc, #216]	; (800178c <Constant_Current+0x2fc>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fa79 	bl	8000bac <__addsf3>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fc2d 	bl	8000f24 <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa6b 	bl	8000bac <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <Constant_Current+0x2dc>)
 80016dc:	601a      	str	r2, [r3, #0]
	   eNM=(e+6)/2;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <Constant_Current+0x2cc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	492a      	ldr	r1, [pc, #168]	; (800178c <Constant_Current+0x2fc>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa61 	bl	8000bac <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc17 	bl	8000f24 <__aeabi_fdiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <Constant_Current+0x2f4>)
 80016fc:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <Constant_Current+0x2e0>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <Constant_Current+0x2e0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <Constant_Current+0x2e4>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <Constant_Current+0x2e4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <Constant_Current+0x2e8>)
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <Constant_Current+0x2e8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <Constant_Current+0x2ec>)
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <Constant_Current+0x2ec>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <Constant_Current+0x2f0>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e1fa      	b.n	8001b1e <Constant_Current+0x68e>
 8001728:	66666666 	.word	0x66666666
 800172c:	3fe66666 	.word	0x3fe66666
 8001730:	20000d1c 	.word	0x20000d1c
 8001734:	41200000 	.word	0x41200000
 8001738:	20000f5c 	.word	0x20000f5c
 800173c:	20000cb8 	.word	0x20000cb8
 8001740:	41a00000 	.word	0x41a00000
 8001744:	41c80000 	.word	0x41c80000
 8001748:	42480000 	.word	0x42480000
 800174c:	42500000 	.word	0x42500000
 8001750:	20000f54 	.word	0x20000f54
 8001754:	200012c4 	.word	0x200012c4
 8001758:	2000111c 	.word	0x2000111c
 800175c:	200012d4 	.word	0x200012d4
 8001760:	200012d8 	.word	0x200012d8
 8001764:	20000d8c 	.word	0x20000d8c
 8001768:	c0c00000 	.word	0xc0c00000
 800176c:	200012dc 	.word	0x200012dc
 8001770:	20000cbc 	.word	0x20000cbc
 8001774:	20000d9c 	.word	0x20000d9c
 8001778:	20000d00 	.word	0x20000d00
 800177c:	20001330 	.word	0x20001330
 8001780:	200006d4 	.word	0x200006d4
 8001784:	20001318 	.word	0x20001318
 8001788:	c0800000 	.word	0xc0800000
 800178c:	40c00000 	.word	0x40c00000
	}

	else if(e>=-4&&e<=-2)
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <Constant_Current+0x57c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	499e      	ldr	r1, [pc, #632]	; (8001a10 <Constant_Current+0x580>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fcc2 	bl	8001120 <__aeabi_fcmpge>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d048      	beq.n	8001834 <Constant_Current+0x3a4>
 80017a2:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <Constant_Current+0x57c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fcae 	bl	800110c <__aeabi_fcmple>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03e      	beq.n	8001834 <Constant_Current+0x3a4>
	{ eNM=(-(e+4)/2)+1;
 80017b6:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <Constant_Current+0x57c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f9f4 	bl	8000bac <__addsf3>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fba8 	bl	8000f24 <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9e6 	bl	8000bac <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <Constant_Current+0x584>)
 80017e6:	601a      	str	r2, [r3, #0]
	   eNS=(e+4)/2;
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <Constant_Current+0x57c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f9db 	bl	8000bac <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb91 	bl	8000f24 <__aeabi_fdiv>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b84      	ldr	r3, [pc, #528]	; (8001a18 <Constant_Current+0x588>)
 8001808:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <Constant_Current+0x58c>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <Constant_Current+0x58c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a82      	ldr	r2, [pc, #520]	; (8001a20 <Constant_Current+0x590>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <Constant_Current+0x590>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <Constant_Current+0x594>)
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <Constant_Current+0x594>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <Constant_Current+0x598>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <Constant_Current+0x598>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <Constant_Current+0x59c>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e174      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=-2&&e<=0)
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <Constant_Current+0x57c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc6f 	bl	8001120 <__aeabi_fcmpge>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d048      	beq.n	80018da <Constant_Current+0x44a>
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <Constant_Current+0x57c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc5b 	bl	800110c <__aeabi_fcmple>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03e      	beq.n	80018da <Constant_Current+0x44a>
	{ eNS=(-(e+2)/2)+1;
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <Constant_Current+0x57c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f9a1 	bl	8000bac <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001870:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb55 	bl	8000f24 <__aeabi_fdiv>
 800187a:	4603      	mov	r3, r0
 800187c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f993 	bl	8000bac <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <Constant_Current+0x588>)
 800188c:	601a      	str	r2, [r3, #0]
	   eZ=(e/2)+1;
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <Constant_Current+0x57c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb44 	bl	8000f24 <__aeabi_fdiv>
 800189c:	4603      	mov	r3, r0
 800189e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f982 	bl	8000bac <__addsf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <Constant_Current+0x598>)
 80018ae:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <Constant_Current+0x58c>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <Constant_Current+0x58c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <Constant_Current+0x590>)
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <Constant_Current+0x590>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <Constant_Current+0x594>)
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <Constant_Current+0x594>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <Constant_Current+0x584>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <Constant_Current+0x584>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <Constant_Current+0x59c>)
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e121      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=0&&e<=2)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <Constant_Current+0x57c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc1c 	bl	8001120 <__aeabi_fcmpge>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03a      	beq.n	8001964 <Constant_Current+0x4d4>
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <Constant_Current+0x57c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fc08 	bl	800110c <__aeabi_fcmple>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d030      	beq.n	8001964 <Constant_Current+0x4d4>
	{ eZ=-(e/2)+1;
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <Constant_Current+0x57c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb0a 	bl	8000f24 <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001918:	f7ff f946 	bl	8000ba8 <__aeabi_fsub>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <Constant_Current+0x598>)
 8001922:	601a      	str	r2, [r3, #0]
	   ePS=e/2;
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <Constant_Current+0x57c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faf9 	bl	8000f24 <__aeabi_fdiv>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <Constant_Current+0x594>)
 8001938:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <Constant_Current+0x58c>)
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <Constant_Current+0x58c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <Constant_Current+0x590>)
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <Constant_Current+0x590>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <Constant_Current+0x588>)
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <Constant_Current+0x588>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <Constant_Current+0x584>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <Constant_Current+0x584>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a33      	ldr	r2, [pc, #204]	; (8001a2c <Constant_Current+0x59c>)
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e0dc      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=2&&e<=4)
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <Constant_Current+0x57c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbd7 	bl	8001120 <__aeabi_fcmpge>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d05b      	beq.n	8001a30 <Constant_Current+0x5a0>
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <Constant_Current+0x57c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fbc3 	bl	800110c <__aeabi_fcmple>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d051      	beq.n	8001a30 <Constant_Current+0x5a0>
	{ ePS=(-(e-2)/2)+1;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <Constant_Current+0x57c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f907 	bl	8000ba8 <__aeabi_fsub>
 800199a:	4603      	mov	r3, r0
 800199c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fabd 	bl	8000f24 <__aeabi_fdiv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f8fb 	bl	8000bac <__addsf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <Constant_Current+0x594>)
 80019bc:	601a      	str	r2, [r3, #0]
	   ePM=(e-2)/2;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <Constant_Current+0x57c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f8ee 	bl	8000ba8 <__aeabi_fsub>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff faa6 	bl	8000f24 <__aeabi_fdiv>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <Constant_Current+0x590>)
 80019de:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <Constant_Current+0x58c>)
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <Constant_Current+0x58c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <Constant_Current+0x598>)
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <Constant_Current+0x598>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <Constant_Current+0x588>)
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <Constant_Current+0x588>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <Constant_Current+0x584>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <Constant_Current+0x584>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <Constant_Current+0x59c>)
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e089      	b.n	8001b1e <Constant_Current+0x68e>
 8001a0a:	bf00      	nop
 8001a0c:	200012d4 	.word	0x200012d4
 8001a10:	c0800000 	.word	0xc0800000
 8001a14:	20001318 	.word	0x20001318
 8001a18:	200006d4 	.word	0x200006d4
 8001a1c:	20000cbc 	.word	0x20000cbc
 8001a20:	20000d9c 	.word	0x20000d9c
 8001a24:	20000d00 	.word	0x20000d00
 8001a28:	20001330 	.word	0x20001330
 8001a2c:	200012dc 	.word	0x200012dc
	}

	else if(e>=4&&e<=6)
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <Constant_Current+0x778>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fb71 	bl	8001120 <__aeabi_fcmpge>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d047      	beq.n	8001ad4 <Constant_Current+0x644>
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <Constant_Current+0x778>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4970      	ldr	r1, [pc, #448]	; (8001c0c <Constant_Current+0x77c>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb5e 	bl	800110c <__aeabi_fcmple>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03e      	beq.n	8001ad4 <Constant_Current+0x644>
	{ ePM=(-(e-4)/2)+1;
 8001a56:	4b6c      	ldr	r3, [pc, #432]	; (8001c08 <Constant_Current+0x778>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f8a2 	bl	8000ba8 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa58 	bl	8000f24 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f896 	bl	8000bac <__addsf3>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <Constant_Current+0x780>)
 8001a86:	601a      	str	r2, [r3, #0]
	   ePB=(e-4)/2;
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <Constant_Current+0x778>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f889 	bl	8000ba8 <__aeabi_fsub>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa41 	bl	8000f24 <__aeabi_fdiv>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <Constant_Current+0x784>)
 8001aa8:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <Constant_Current+0x788>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <Constant_Current+0x788>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a59      	ldr	r2, [pc, #356]	; (8001c1c <Constant_Current+0x78c>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <Constant_Current+0x78c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <Constant_Current+0x790>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <Constant_Current+0x790>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <Constant_Current+0x794>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <Constant_Current+0x794>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <Constant_Current+0x798>)
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e024      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=6)
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <Constant_Current+0x778>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	494c      	ldr	r1, [pc, #304]	; (8001c0c <Constant_Current+0x77c>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb20 	bl	8001120 <__aeabi_fcmpge>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01b      	beq.n	8001b1e <Constant_Current+0x68e>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <Constant_Current+0x784>)
 8001ae8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <Constant_Current+0x780>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <Constant_Current+0x780>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <Constant_Current+0x788>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <Constant_Current+0x788>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <Constant_Current+0x78c>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <Constant_Current+0x78c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <Constant_Current+0x790>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <Constant_Current+0x790>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <Constant_Current+0x794>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <Constant_Current+0x794>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a43      	ldr	r2, [pc, #268]	; (8001c28 <Constant_Current+0x798>)
 8001b1c:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-6)
 8001b1e:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <Constant_Current+0x79c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4943      	ldr	r1, [pc, #268]	; (8001c30 <Constant_Current+0x7a0>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff faf1 	bl	800110c <__aeabi_fcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <Constant_Current+0x6d8>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <Constant_Current+0x7a4>)
 8001b32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <Constant_Current+0x7a8>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <Constant_Current+0x7a8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3d      	ldr	r2, [pc, #244]	; (8001c3c <Constant_Current+0x7ac>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <Constant_Current+0x7ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a3c      	ldr	r2, [pc, #240]	; (8001c40 <Constant_Current+0x7b0>)
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <Constant_Current+0x7b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <Constant_Current+0x7b4>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <Constant_Current+0x7b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <Constant_Current+0x7b8>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <Constant_Current+0x7b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <Constant_Current+0x7bc>)
 8001b66:	6013      	str	r3, [r2, #0]

	if(d>=-6&&d<=-4)
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <Constant_Current+0x79c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4930      	ldr	r1, [pc, #192]	; (8001c30 <Constant_Current+0x7a0>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fad6 	bl	8001120 <__aeabi_fcmpge>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d06c      	beq.n	8001c54 <Constant_Current+0x7c4>
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <Constant_Current+0x79c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <Constant_Current+0x7c0>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fac3 	bl	800110c <__aeabi_fcmple>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d063      	beq.n	8001c54 <Constant_Current+0x7c4>
	{ dNB=(-(d+6)/2)+1;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <Constant_Current+0x79c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	491e      	ldr	r1, [pc, #120]	; (8001c0c <Constant_Current+0x77c>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f80a 	bl	8000bac <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f9be 	bl	8000f24 <__aeabi_fdiv>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fffc 	bl	8000bac <__addsf3>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <Constant_Current+0x7a4>)
 8001bba:	601a      	str	r2, [r3, #0]
	   dNM=(d+6)/2;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <Constant_Current+0x79c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4912      	ldr	r1, [pc, #72]	; (8001c0c <Constant_Current+0x77c>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fff2 	bl	8000bac <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9a8 	bl	8000f24 <__aeabi_fdiv>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <Constant_Current+0x7bc>)
 8001bda:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <Constant_Current+0x7a8>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <Constant_Current+0x7a8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <Constant_Current+0x7ac>)
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <Constant_Current+0x7ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <Constant_Current+0x7b0>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <Constant_Current+0x7b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <Constant_Current+0x7b4>)
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <Constant_Current+0x7b4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <Constant_Current+0x7b8>)
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e1ff      	b.n	8002006 <Constant_Current+0xb76>
 8001c06:	bf00      	nop
 8001c08:	200012d4 	.word	0x200012d4
 8001c0c:	40c00000 	.word	0x40c00000
 8001c10:	20000d9c 	.word	0x20000d9c
 8001c14:	20000cbc 	.word	0x20000cbc
 8001c18:	20000d00 	.word	0x20000d00
 8001c1c:	20001330 	.word	0x20001330
 8001c20:	200006d4 	.word	0x200006d4
 8001c24:	20001318 	.word	0x20001318
 8001c28:	200012dc 	.word	0x200012dc
 8001c2c:	20000d8c 	.word	0x20000d8c
 8001c30:	c0c00000 	.word	0xc0c00000
 8001c34:	20000714 	.word	0x20000714
 8001c38:	20000da4 	.word	0x20000da4
 8001c3c:	20000728 	.word	0x20000728
 8001c40:	200012f0 	.word	0x200012f0
 8001c44:	2000130c 	.word	0x2000130c
 8001c48:	20000940 	.word	0x20000940
 8001c4c:	20000cfc 	.word	0x20000cfc
 8001c50:	c0800000 	.word	0xc0800000
	}

	else if(d>=-4&&d<=-2)
 8001c54:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <Constant_Current+0xa40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	499e      	ldr	r1, [pc, #632]	; (8001ed4 <Constant_Current+0xa44>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fa60 	bl	8001120 <__aeabi_fcmpge>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d048      	beq.n	8001cf8 <Constant_Current+0x868>
 8001c66:	4b9a      	ldr	r3, [pc, #616]	; (8001ed0 <Constant_Current+0xa40>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa4c 	bl	800110c <__aeabi_fcmple>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03e      	beq.n	8001cf8 <Constant_Current+0x868>
	{ dNM=(-(d+4)/2)+1;
 8001c7a:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <Constant_Current+0xa40>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff92 	bl	8000bac <__addsf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f946 	bl	8000f24 <__aeabi_fdiv>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff84 	bl	8000bac <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <Constant_Current+0xa48>)
 8001caa:	601a      	str	r2, [r3, #0]
	   dNS=(d+4)/2;
 8001cac:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <Constant_Current+0xa40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe ff79 	bl	8000bac <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f92f 	bl	8000f24 <__aeabi_fdiv>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b84      	ldr	r3, [pc, #528]	; (8001edc <Constant_Current+0xa4c>)
 8001ccc:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8001cce:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <Constant_Current+0xa50>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <Constant_Current+0xa50>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a82      	ldr	r2, [pc, #520]	; (8001ee4 <Constant_Current+0xa54>)
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <Constant_Current+0xa54>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	; (8001ee8 <Constant_Current+0xa58>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <Constant_Current+0xa58>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a80      	ldr	r2, [pc, #512]	; (8001eec <Constant_Current+0xa5c>)
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <Constant_Current+0xa5c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <Constant_Current+0xa60>)
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e186      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=-2&&d<=0)
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <Constant_Current+0xa40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa0d 	bl	8001120 <__aeabi_fcmpge>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d048      	beq.n	8001d9e <Constant_Current+0x90e>
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <Constant_Current+0xa40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f9f9 	bl	800110c <__aeabi_fcmple>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03e      	beq.n	8001d9e <Constant_Current+0x90e>
	{ dNS=(-(d+2)/2)+1;
 8001d20:	4b6b      	ldr	r3, [pc, #428]	; (8001ed0 <Constant_Current+0xa40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff3f 	bl	8000bac <__addsf3>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f8f3 	bl	8000f24 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ff31 	bl	8000bac <__addsf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <Constant_Current+0xa4c>)
 8001d50:	601a      	str	r2, [r3, #0]
	   dZ=(d+2)/2;
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <Constant_Current+0xa40>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ff26 	bl	8000bac <__addsf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f8dc 	bl	8000f24 <__aeabi_fdiv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <Constant_Current+0xa5c>)
 8001d72:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8001d74:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <Constant_Current+0xa50>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <Constant_Current+0xa50>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <Constant_Current+0xa54>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <Constant_Current+0xa54>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <Constant_Current+0xa58>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <Constant_Current+0xa58>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <Constant_Current+0xa48>)
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <Constant_Current+0xa48>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <Constant_Current+0xa60>)
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e133      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=0&&d<=2)
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <Constant_Current+0xa40>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f9ba 	bl	8001120 <__aeabi_fcmpge>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <Constant_Current+0x998>
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <Constant_Current+0xa40>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9a6 	bl	800110c <__aeabi_fcmple>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <Constant_Current+0x998>
	{ dZ=-(d/2)+1;
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <Constant_Current+0xa40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8a8 	bl	8000f24 <__aeabi_fdiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ddc:	f7fe fee4 	bl	8000ba8 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <Constant_Current+0xa5c>)
 8001de6:	601a      	str	r2, [r3, #0]
	   dPS=d/2;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <Constant_Current+0xa40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f897 	bl	8000f24 <__aeabi_fdiv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <Constant_Current+0xa58>)
 8001dfc:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <Constant_Current+0xa50>)
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <Constant_Current+0xa50>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a36      	ldr	r2, [pc, #216]	; (8001ee4 <Constant_Current+0xa54>)
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <Constant_Current+0xa54>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <Constant_Current+0xa4c>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <Constant_Current+0xa4c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <Constant_Current+0xa48>)
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <Constant_Current+0xa48>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <Constant_Current+0xa60>)
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e0ee      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=2&&d<=4)
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <Constant_Current+0xa40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f975 	bl	8001120 <__aeabi_fcmpge>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05b      	beq.n	8001ef4 <Constant_Current+0xa64>
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <Constant_Current+0xa40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f961 	bl	800110c <__aeabi_fcmple>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d051      	beq.n	8001ef4 <Constant_Current+0xa64>
	{ dPS=(-(d-2)/2)+1;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <Constant_Current+0xa40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fea5 	bl	8000ba8 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f85b 	bl	8000f24 <__aeabi_fdiv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe99 	bl	8000bac <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <Constant_Current+0xa58>)
 8001e80:	601a      	str	r2, [r3, #0]
	   dPM=(d-2)/2;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <Constant_Current+0xa40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe8c 	bl	8000ba8 <__aeabi_fsub>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f844 	bl	8000f24 <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <Constant_Current+0xa54>)
 8001ea2:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <Constant_Current+0xa50>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <Constant_Current+0xa50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <Constant_Current+0xa5c>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <Constant_Current+0xa5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <Constant_Current+0xa4c>)
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <Constant_Current+0xa4c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <Constant_Current+0xa48>)
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <Constant_Current+0xa48>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <Constant_Current+0xa60>)
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e09b      	b.n	8002006 <Constant_Current+0xb76>
 8001ece:	bf00      	nop
 8001ed0:	20000d8c 	.word	0x20000d8c
 8001ed4:	c0800000 	.word	0xc0800000
 8001ed8:	20000cfc 	.word	0x20000cfc
 8001edc:	20000940 	.word	0x20000940
 8001ee0:	20000da4 	.word	0x20000da4
 8001ee4:	20000728 	.word	0x20000728
 8001ee8:	200012f0 	.word	0x200012f0
 8001eec:	2000130c 	.word	0x2000130c
 8001ef0:	20000714 	.word	0x20000714
	}

	else if(d>=4&&d<=6)
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <Constant_Current+0xb08>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f90f 	bl	8001120 <__aeabi_fcmpge>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d059      	beq.n	8001fbc <Constant_Current+0xb2c>
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <Constant_Current+0xb08>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4923      	ldr	r1, [pc, #140]	; (8001f9c <Constant_Current+0xb0c>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8fc 	bl	800110c <__aeabi_fcmple>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d050      	beq.n	8001fbc <Constant_Current+0xb2c>
	{ dPM=(-(d-4)/2)+1;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <Constant_Current+0xb08>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fe40 	bl	8000ba8 <__aeabi_fsub>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fff6 	bl	8000f24 <__aeabi_fdiv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fe34 	bl	8000bac <__addsf3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <Constant_Current+0xb10>)
 8001f4a:	601a      	str	r2, [r3, #0]
	   dPB=(d-4)/2;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <Constant_Current+0xb08>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fe27 	bl	8000ba8 <__aeabi_fsub>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffdf 	bl	8000f24 <__aeabi_fdiv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <Constant_Current+0xb14>)
 8001f6c:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <Constant_Current+0xb18>)
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <Constant_Current+0xb18>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <Constant_Current+0xb1c>)
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <Constant_Current+0xb1c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <Constant_Current+0xb20>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <Constant_Current+0xb20>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <Constant_Current+0xb24>)
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <Constant_Current+0xb24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <Constant_Current+0xb28>)
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e036      	b.n	8002006 <Constant_Current+0xb76>
 8001f98:	20000d8c 	.word	0x20000d8c
 8001f9c:	40c00000 	.word	0x40c00000
 8001fa0:	20000728 	.word	0x20000728
 8001fa4:	20000da4 	.word	0x20000da4
 8001fa8:	200012f0 	.word	0x200012f0
 8001fac:	2000130c 	.word	0x2000130c
 8001fb0:	20000940 	.word	0x20000940
 8001fb4:	20000cfc 	.word	0x20000cfc
 8001fb8:	20000714 	.word	0x20000714
	}

	else if(d>=6)
 8001fbc:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <Constant_Current+0xd64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	498d      	ldr	r1, [pc, #564]	; (80021f8 <Constant_Current+0xd68>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f8ac 	bl	8001120 <__aeabi_fcmpge>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01b      	beq.n	8002006 <Constant_Current+0xb76>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <Constant_Current+0xd6c>)
 8001fd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <Constant_Current+0xd70>)
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <Constant_Current+0xd70>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a88      	ldr	r2, [pc, #544]	; (8002204 <Constant_Current+0xd74>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b87      	ldr	r3, [pc, #540]	; (8002204 <Constant_Current+0xd74>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <Constant_Current+0xd78>)
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b86      	ldr	r3, [pc, #536]	; (8002208 <Constant_Current+0xd78>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a86      	ldr	r2, [pc, #536]	; (800220c <Constant_Current+0xd7c>)
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <Constant_Current+0xd7c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a85      	ldr	r2, [pc, #532]	; (8002210 <Constant_Current+0xd80>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b84      	ldr	r3, [pc, #528]	; (8002210 <Constant_Current+0xd80>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a84      	ldr	r2, [pc, #528]	; (8002214 <Constant_Current+0xd84>)
 8002004:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//r1=max(dPB,eNB);
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <Constant_Current+0xd6c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a83      	ldr	r2, [pc, #524]	; (8002218 <Constant_Current+0xd88>)
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <Constant_Current+0xd8c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <Constant_Current+0xd6c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff f86d 	bl	80010f8 <__aeabi_fcmplt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <Constant_Current+0xb9c>
 8002024:	4b7d      	ldr	r3, [pc, #500]	; (800221c <Constant_Current+0xd8c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a7b      	ldr	r2, [pc, #492]	; (8002218 <Constant_Current+0xd88>)
 800202a:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;		//r2=max(dPB,eNM);
 800202c:	4b73      	ldr	r3, [pc, #460]	; (80021fc <Constant_Current+0xd6c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7b      	ldr	r2, [pc, #492]	; (8002220 <Constant_Current+0xd90>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <Constant_Current+0xd94>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b70      	ldr	r3, [pc, #448]	; (80021fc <Constant_Current+0xd6c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f7ff f85a 	bl	80010f8 <__aeabi_fcmplt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <Constant_Current+0xbc2>
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <Constant_Current+0xd94>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a74      	ldr	r2, [pc, #464]	; (8002220 <Constant_Current+0xd90>)
 8002050:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;		//r3=max(dPB,eNS);
 8002052:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <Constant_Current+0xd6c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a74      	ldr	r2, [pc, #464]	; (8002228 <Constant_Current+0xd98>)
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <Constant_Current+0xd9c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <Constant_Current+0xd6c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7ff f847 	bl	80010f8 <__aeabi_fcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <Constant_Current+0xbe8>
 8002070:	4b6e      	ldr	r3, [pc, #440]	; (800222c <Constant_Current+0xd9c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <Constant_Current+0xd98>)
 8002076:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;		//r4=max(dPB,eZ);
 8002078:	4b60      	ldr	r3, [pc, #384]	; (80021fc <Constant_Current+0xd6c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a6c      	ldr	r2, [pc, #432]	; (8002230 <Constant_Current+0xda0>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <Constant_Current+0xda4>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <Constant_Current+0xd6c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7ff f834 	bl	80010f8 <__aeabi_fcmplt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <Constant_Current+0xc0e>
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <Constant_Current+0xda4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a65      	ldr	r2, [pc, #404]	; (8002230 <Constant_Current+0xda0>)
 800209c:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;		//r5=max(dPB,ePS);
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <Constant_Current+0xd6c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a65      	ldr	r2, [pc, #404]	; (8002238 <Constant_Current+0xda8>)
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <Constant_Current+0xdac>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <Constant_Current+0xd6c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7ff f821 	bl	80010f8 <__aeabi_fcmplt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <Constant_Current+0xc34>
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <Constant_Current+0xdac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5d      	ldr	r2, [pc, #372]	; (8002238 <Constant_Current+0xda8>)
 80020c2:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;		//r6=max(dPB,ePM);
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <Constant_Current+0xd6c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <Constant_Current+0xdb0>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <Constant_Current+0xdb4>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <Constant_Current+0xd6c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7ff f80e 	bl	80010f8 <__aeabi_fcmplt>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <Constant_Current+0xc5a>
 80020e2:	4b58      	ldr	r3, [pc, #352]	; (8002244 <Constant_Current+0xdb4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a56      	ldr	r2, [pc, #344]	; (8002240 <Constant_Current+0xdb0>)
 80020e8:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;		//r7=max(dPB,ePB);
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <Constant_Current+0xd6c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a56      	ldr	r2, [pc, #344]	; (8002248 <Constant_Current+0xdb8>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <Constant_Current+0xdbc>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <Constant_Current+0xd6c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe fffb 	bl	80010f8 <__aeabi_fcmplt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <Constant_Current+0xc80>
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <Constant_Current+0xdbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <Constant_Current+0xdb8>)
 800210e:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <Constant_Current+0xd70>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <Constant_Current+0xdc0>)
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b40      	ldr	r3, [pc, #256]	; (800221c <Constant_Current+0xd8c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <Constant_Current+0xd70>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f7fe ffe8 	bl	80010f8 <__aeabi_fcmplt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <Constant_Current+0xca6>
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <Constant_Current+0xd8c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a47      	ldr	r2, [pc, #284]	; (8002250 <Constant_Current+0xdc0>)
 8002134:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <Constant_Current+0xd70>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a46      	ldr	r2, [pc, #280]	; (8002254 <Constant_Current+0xdc4>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <Constant_Current+0xd94>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <Constant_Current+0xd70>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7fe ffd5 	bl	80010f8 <__aeabi_fcmplt>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <Constant_Current+0xccc>
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <Constant_Current+0xd94>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <Constant_Current+0xdc4>)
 800215a:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <Constant_Current+0xd70>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3d      	ldr	r2, [pc, #244]	; (8002258 <Constant_Current+0xdc8>)
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <Constant_Current+0xd9c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <Constant_Current+0xd70>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f7fe ffc2 	bl	80010f8 <__aeabi_fcmplt>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <Constant_Current+0xcf2>
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <Constant_Current+0xd9c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <Constant_Current+0xdc8>)
 8002180:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <Constant_Current+0xd70>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a35      	ldr	r2, [pc, #212]	; (800225c <Constant_Current+0xdcc>)
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <Constant_Current+0xda4>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <Constant_Current+0xd70>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f7fe ffaf 	bl	80010f8 <__aeabi_fcmplt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <Constant_Current+0xd18>
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <Constant_Current+0xda4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <Constant_Current+0xdcc>)
 80021a6:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <Constant_Current+0xd70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <Constant_Current+0xdd0>)
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <Constant_Current+0xdac>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <Constant_Current+0xd70>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe ff9c 	bl	80010f8 <__aeabi_fcmplt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <Constant_Current+0xd3e>
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <Constant_Current+0xdac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a25      	ldr	r2, [pc, #148]	; (8002260 <Constant_Current+0xdd0>)
 80021cc:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <Constant_Current+0xd70>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a24      	ldr	r2, [pc, #144]	; (8002264 <Constant_Current+0xdd4>)
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <Constant_Current+0xdb4>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <Constant_Current+0xd70>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe ff89 	bl	80010f8 <__aeabi_fcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03f      	beq.n	800226c <Constant_Current+0xddc>
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <Constant_Current+0xdb4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e03a      	b.n	8002268 <Constant_Current+0xdd8>
 80021f2:	bf00      	nop
 80021f4:	20000d8c 	.word	0x20000d8c
 80021f8:	40c00000 	.word	0x40c00000
 80021fc:	20000da4 	.word	0x20000da4
 8002200:	20000728 	.word	0x20000728
 8002204:	200012f0 	.word	0x200012f0
 8002208:	2000130c 	.word	0x2000130c
 800220c:	20000940 	.word	0x20000940
 8002210:	20000cfc 	.word	0x20000cfc
 8002214:	20000714 	.word	0x20000714
 8002218:	20001334 	.word	0x20001334
 800221c:	200012dc 	.word	0x200012dc
 8002220:	20000f68 	.word	0x20000f68
 8002224:	20001318 	.word	0x20001318
 8002228:	20000700 	.word	0x20000700
 800222c:	200006d4 	.word	0x200006d4
 8002230:	20000910 	.word	0x20000910
 8002234:	20001330 	.word	0x20001330
 8002238:	20001320 	.word	0x20001320
 800223c:	20000d00 	.word	0x20000d00
 8002240:	200008fc 	.word	0x200008fc
 8002244:	20000d9c 	.word	0x20000d9c
 8002248:	20000d78 	.word	0x20000d78
 800224c:	20000cbc 	.word	0x20000cbc
 8002250:	20000cd4 	.word	0x20000cd4
 8002254:	2000073c 	.word	0x2000073c
 8002258:	20000cb0 	.word	0x20000cb0
 800225c:	20000f58 	.word	0x20000f58
 8002260:	200012fc 	.word	0x200012fc
 8002264:	20001338 	.word	0x20001338
 8002268:	4a8d      	ldr	r2, [pc, #564]	; (80024a0 <Constant_Current+0x1010>)
 800226a:	6013      	str	r3, [r2, #0]
	r14=dPM; if(ePB<dPM) r14=ePB;	//r14=max(dPM,ePB);
 800226c:	4b8d      	ldr	r3, [pc, #564]	; (80024a4 <Constant_Current+0x1014>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a8d      	ldr	r2, [pc, #564]	; (80024a8 <Constant_Current+0x1018>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <Constant_Current+0x101c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b8a      	ldr	r3, [pc, #552]	; (80024a4 <Constant_Current+0x1014>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7fe ff3a 	bl	80010f8 <__aeabi_fcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <Constant_Current+0xe02>
 800228a:	4b88      	ldr	r3, [pc, #544]	; (80024ac <Constant_Current+0x101c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <Constant_Current+0x1018>)
 8002290:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 8002292:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <Constant_Current+0x1020>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <Constant_Current+0x1024>)
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <Constant_Current+0x1028>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <Constant_Current+0x1020>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7fe ff27 	bl	80010f8 <__aeabi_fcmplt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <Constant_Current+0xe28>
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <Constant_Current+0x1028>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <Constant_Current+0x1024>)
 80022b6:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 80022b8:	4b7d      	ldr	r3, [pc, #500]	; (80024b0 <Constant_Current+0x1020>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <Constant_Current+0x102c>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <Constant_Current+0x1030>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b7a      	ldr	r3, [pc, #488]	; (80024b0 <Constant_Current+0x1020>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f7fe ff14 	bl	80010f8 <__aeabi_fcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <Constant_Current+0xe4e>
 80022d6:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <Constant_Current+0x1030>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a78      	ldr	r2, [pc, #480]	; (80024bc <Constant_Current+0x102c>)
 80022dc:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <Constant_Current+0x1020>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a78      	ldr	r2, [pc, #480]	; (80024c4 <Constant_Current+0x1034>)
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <Constant_Current+0x1038>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <Constant_Current+0x1020>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4610      	mov	r0, r2
 80022f2:	f7fe ff01 	bl	80010f8 <__aeabi_fcmplt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <Constant_Current+0xe74>
 80022fc:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <Constant_Current+0x1038>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a70      	ldr	r2, [pc, #448]	; (80024c4 <Constant_Current+0x1034>)
 8002302:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <Constant_Current+0x1020>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a70      	ldr	r2, [pc, #448]	; (80024cc <Constant_Current+0x103c>)
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <Constant_Current+0x1040>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <Constant_Current+0x1020>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7fe feee 	bl	80010f8 <__aeabi_fcmplt>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <Constant_Current+0xe9a>
 8002322:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <Constant_Current+0x1040>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <Constant_Current+0x103c>)
 8002328:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 800232a:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <Constant_Current+0x1020>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <Constant_Current+0x1044>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b69      	ldr	r3, [pc, #420]	; (80024d8 <Constant_Current+0x1048>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <Constant_Current+0x1020>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7fe fedb 	bl	80010f8 <__aeabi_fcmplt>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <Constant_Current+0xec0>
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <Constant_Current+0x1048>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a61      	ldr	r2, [pc, #388]	; (80024d4 <Constant_Current+0x1044>)
 800234e:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 8002350:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <Constant_Current+0x1020>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a61      	ldr	r2, [pc, #388]	; (80024dc <Constant_Current+0x104c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <Constant_Current+0x1050>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <Constant_Current+0x1020>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7fe fec8 	bl	80010f8 <__aeabi_fcmplt>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <Constant_Current+0xee6>
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <Constant_Current+0x1050>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <Constant_Current+0x104c>)
 8002374:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <Constant_Current+0x1020>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <Constant_Current+0x1054>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <Constant_Current+0x101c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <Constant_Current+0x1020>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7fe feb5 	bl	80010f8 <__aeabi_fcmplt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <Constant_Current+0xf0c>
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <Constant_Current+0x101c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <Constant_Current+0x1054>)
 800239a:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 800239c:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <Constant_Current+0x1058>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <Constant_Current+0x105c>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <Constant_Current+0x1028>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <Constant_Current+0x1058>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f7fe fea2 	bl	80010f8 <__aeabi_fcmplt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <Constant_Current+0xf32>
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <Constant_Current+0x1028>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <Constant_Current+0x105c>)
 80023c0:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <Constant_Current+0x1058>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <Constant_Current+0x1060>)
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <Constant_Current+0x1030>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <Constant_Current+0x1058>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7fe fe8f 	bl	80010f8 <__aeabi_fcmplt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <Constant_Current+0xf58>
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <Constant_Current+0x1030>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a42      	ldr	r2, [pc, #264]	; (80024f0 <Constant_Current+0x1060>)
 80023e6:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <Constant_Current+0x1058>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <Constant_Current+0x1064>)
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <Constant_Current+0x1038>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <Constant_Current+0x1058>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe fe7c 	bl	80010f8 <__aeabi_fcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <Constant_Current+0xf7e>
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <Constant_Current+0x1038>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <Constant_Current+0x1064>)
 800240c:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <Constant_Current+0x1058>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <Constant_Current+0x1068>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <Constant_Current+0x1040>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <Constant_Current+0x1058>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fe fe69 	bl	80010f8 <__aeabi_fcmplt>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <Constant_Current+0xfa4>
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <Constant_Current+0x1040>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <Constant_Current+0x1068>)
 8002432:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <Constant_Current+0x1058>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a30      	ldr	r2, [pc, #192]	; (80024fc <Constant_Current+0x106c>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <Constant_Current+0x1048>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <Constant_Current+0x1058>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f7fe fe56 	bl	80010f8 <__aeabi_fcmplt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <Constant_Current+0xfca>
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <Constant_Current+0x1048>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <Constant_Current+0x106c>)
 8002458:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <Constant_Current+0x1058>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <Constant_Current+0x1070>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <Constant_Current+0x1050>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <Constant_Current+0x1058>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7fe fe43 	bl	80010f8 <__aeabi_fcmplt>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <Constant_Current+0xff0>
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <Constant_Current+0x1050>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <Constant_Current+0x1070>)
 800247e:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <Constant_Current+0x1058>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <Constant_Current+0x1074>)
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <Constant_Current+0x101c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <Constant_Current+0x1058>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f7fe fe30 	bl	80010f8 <__aeabi_fcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d038      	beq.n	8002510 <Constant_Current+0x1080>
 800249e:	e033      	b.n	8002508 <Constant_Current+0x1078>
 80024a0:	20001338 	.word	0x20001338
 80024a4:	20000728 	.word	0x20000728
 80024a8:	20000684 	.word	0x20000684
 80024ac:	20000cbc 	.word	0x20000cbc
 80024b0:	200012f0 	.word	0x200012f0
 80024b4:	20001300 	.word	0x20001300
 80024b8:	200012dc 	.word	0x200012dc
 80024bc:	20000d94 	.word	0x20000d94
 80024c0:	20001318 	.word	0x20001318
 80024c4:	200008f0 	.word	0x200008f0
 80024c8:	200006d4 	.word	0x200006d4
 80024cc:	20000d08 	.word	0x20000d08
 80024d0:	20001330 	.word	0x20001330
 80024d4:	200012f8 	.word	0x200012f8
 80024d8:	20000d00 	.word	0x20000d00
 80024dc:	20000ccc 	.word	0x20000ccc
 80024e0:	20000d9c 	.word	0x20000d9c
 80024e4:	20000904 	.word	0x20000904
 80024e8:	2000130c 	.word	0x2000130c
 80024ec:	20001128 	.word	0x20001128
 80024f0:	20001314 	.word	0x20001314
 80024f4:	2000132c 	.word	0x2000132c
 80024f8:	200006d0 	.word	0x200006d0
 80024fc:	200008e0 	.word	0x200008e0
 8002500:	20000ce8 	.word	0x20000ce8
 8002504:	2000069c 	.word	0x2000069c
 8002508:	4b8d      	ldr	r3, [pc, #564]	; (8002740 <Constant_Current+0x12b0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a8d      	ldr	r2, [pc, #564]	; (8002744 <Constant_Current+0x12b4>)
 800250e:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 8002510:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <Constant_Current+0x12b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a8d      	ldr	r2, [pc, #564]	; (800274c <Constant_Current+0x12bc>)
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <Constant_Current+0x12c0>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <Constant_Current+0x12b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f7fe fde8 	bl	80010f8 <__aeabi_fcmplt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <Constant_Current+0x10a6>
 800252e:	4b88      	ldr	r3, [pc, #544]	; (8002750 <Constant_Current+0x12c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a86      	ldr	r2, [pc, #536]	; (800274c <Constant_Current+0x12bc>)
 8002534:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 8002536:	4b84      	ldr	r3, [pc, #528]	; (8002748 <Constant_Current+0x12b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a86      	ldr	r2, [pc, #536]	; (8002754 <Constant_Current+0x12c4>)
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b86      	ldr	r3, [pc, #536]	; (8002758 <Constant_Current+0x12c8>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b81      	ldr	r3, [pc, #516]	; (8002748 <Constant_Current+0x12b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7fe fdd5 	bl	80010f8 <__aeabi_fcmplt>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <Constant_Current+0x10cc>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <Constant_Current+0x12c8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <Constant_Current+0x12c4>)
 800255a:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 800255c:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <Constant_Current+0x12b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7e      	ldr	r2, [pc, #504]	; (800275c <Constant_Current+0x12cc>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <Constant_Current+0x12d0>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b77      	ldr	r3, [pc, #476]	; (8002748 <Constant_Current+0x12b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f7fe fdc2 	bl	80010f8 <__aeabi_fcmplt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <Constant_Current+0x10f2>
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <Constant_Current+0x12d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	; (800275c <Constant_Current+0x12cc>)
 8002580:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 8002582:	4b71      	ldr	r3, [pc, #452]	; (8002748 <Constant_Current+0x12b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <Constant_Current+0x12d4>)
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b77      	ldr	r3, [pc, #476]	; (8002768 <Constant_Current+0x12d8>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <Constant_Current+0x12b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f7fe fdaf 	bl	80010f8 <__aeabi_fcmplt>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <Constant_Current+0x1118>
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <Constant_Current+0x12d8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6f      	ldr	r2, [pc, #444]	; (8002764 <Constant_Current+0x12d4>)
 80025a6:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 80025a8:	4b67      	ldr	r3, [pc, #412]	; (8002748 <Constant_Current+0x12b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6f      	ldr	r2, [pc, #444]	; (800276c <Constant_Current+0x12dc>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <Constant_Current+0x12e0>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b64      	ldr	r3, [pc, #400]	; (8002748 <Constant_Current+0x12b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7fe fd9c 	bl	80010f8 <__aeabi_fcmplt>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <Constant_Current+0x113e>
 80025c6:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <Constant_Current+0x12e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a68      	ldr	r2, [pc, #416]	; (800276c <Constant_Current+0x12dc>)
 80025cc:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 80025ce:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <Constant_Current+0x12b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a68      	ldr	r2, [pc, #416]	; (8002774 <Constant_Current+0x12e4>)
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <Constant_Current+0x12e8>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <Constant_Current+0x12b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7fe fd89 	bl	80010f8 <__aeabi_fcmplt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <Constant_Current+0x1164>
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <Constant_Current+0x12e8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a60      	ldr	r2, [pc, #384]	; (8002774 <Constant_Current+0x12e4>)
 80025f2:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 80025f4:	4b54      	ldr	r3, [pc, #336]	; (8002748 <Constant_Current+0x12b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a60      	ldr	r2, [pc, #384]	; (800277c <Constant_Current+0x12ec>)
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <Constant_Current+0x12b0>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b51      	ldr	r3, [pc, #324]	; (8002748 <Constant_Current+0x12b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7fe fd76 	bl	80010f8 <__aeabi_fcmplt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <Constant_Current+0x118a>
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <Constant_Current+0x12b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a59      	ldr	r2, [pc, #356]	; (800277c <Constant_Current+0x12ec>)
 8002618:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 800261a:	4b59      	ldr	r3, [pc, #356]	; (8002780 <Constant_Current+0x12f0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a59      	ldr	r2, [pc, #356]	; (8002784 <Constant_Current+0x12f4>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <Constant_Current+0x12c0>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <Constant_Current+0x12f0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7fe fd63 	bl	80010f8 <__aeabi_fcmplt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <Constant_Current+0x11b0>
 8002638:	4b45      	ldr	r3, [pc, #276]	; (8002750 <Constant_Current+0x12c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a51      	ldr	r2, [pc, #324]	; (8002784 <Constant_Current+0x12f4>)
 800263e:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <Constant_Current+0x12f0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <Constant_Current+0x12f8>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <Constant_Current+0x12c8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <Constant_Current+0x12f0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7fe fd50 	bl	80010f8 <__aeabi_fcmplt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <Constant_Current+0x11d6>
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <Constant_Current+0x12c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a49      	ldr	r2, [pc, #292]	; (8002788 <Constant_Current+0x12f8>)
 8002664:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <Constant_Current+0x12f0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a48      	ldr	r2, [pc, #288]	; (800278c <Constant_Current+0x12fc>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <Constant_Current+0x12d0>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b43      	ldr	r3, [pc, #268]	; (8002780 <Constant_Current+0x12f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f7fe fd3d 	bl	80010f8 <__aeabi_fcmplt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <Constant_Current+0x11fc>
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <Constant_Current+0x12d0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <Constant_Current+0x12fc>)
 800268a:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <Constant_Current+0x12f0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <Constant_Current+0x1300>)
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <Constant_Current+0x12d8>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <Constant_Current+0x12f0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7fe fd2a 	bl	80010f8 <__aeabi_fcmplt>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <Constant_Current+0x1222>
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <Constant_Current+0x12d8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a38      	ldr	r2, [pc, #224]	; (8002790 <Constant_Current+0x1300>)
 80026b0:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <Constant_Current+0x12f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <Constant_Current+0x1304>)
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <Constant_Current+0x12e0>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <Constant_Current+0x12f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe fd17 	bl	80010f8 <__aeabi_fcmplt>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <Constant_Current+0x1248>
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <Constant_Current+0x12e0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <Constant_Current+0x1304>)
 80026d6:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <Constant_Current+0x12f0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <Constant_Current+0x1308>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <Constant_Current+0x12e8>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <Constant_Current+0x12f0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7fe fd04 	bl	80010f8 <__aeabi_fcmplt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <Constant_Current+0x126e>
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <Constant_Current+0x12e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <Constant_Current+0x1308>)
 80026fc:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <Constant_Current+0x12f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <Constant_Current+0x130c>)
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <Constant_Current+0x12b0>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <Constant_Current+0x12f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f7fe fcf1 	bl	80010f8 <__aeabi_fcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <Constant_Current+0x1294>
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <Constant_Current+0x12b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <Constant_Current+0x130c>)
 8002722:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <Constant_Current+0x1310>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <Constant_Current+0x1314>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <Constant_Current+0x12c0>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <Constant_Current+0x1310>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f7fe fcde 	bl	80010f8 <__aeabi_fcmplt>
 800273c:	e034      	b.n	80027a8 <Constant_Current+0x1318>
 800273e:	bf00      	nop
 8002740:	20000cbc 	.word	0x20000cbc
 8002744:	2000069c 	.word	0x2000069c
 8002748:	20000940 	.word	0x20000940
 800274c:	200006c8 	.word	0x200006c8
 8002750:	200012dc 	.word	0x200012dc
 8002754:	20000f40 	.word	0x20000f40
 8002758:	20001318 	.word	0x20001318
 800275c:	200008f4 	.word	0x200008f4
 8002760:	200006d4 	.word	0x200006d4
 8002764:	20000944 	.word	0x20000944
 8002768:	20001330 	.word	0x20001330
 800276c:	20000cf4 	.word	0x20000cf4
 8002770:	20000d00 	.word	0x20000d00
 8002774:	20000f3c 	.word	0x20000f3c
 8002778:	20000d9c 	.word	0x20000d9c
 800277c:	20001120 	.word	0x20001120
 8002780:	20000cfc 	.word	0x20000cfc
 8002784:	20000708 	.word	0x20000708
 8002788:	20000b00 	.word	0x20000b00
 800278c:	20000cc4 	.word	0x20000cc4
 8002790:	200012ec 	.word	0x200012ec
 8002794:	20000d6c 	.word	0x20000d6c
 8002798:	200006e0 	.word	0x200006e0
 800279c:	200006f8 	.word	0x200006f8
 80027a0:	20000714 	.word	0x20000714
 80027a4:	200012f4 	.word	0x200012f4
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <Constant_Current+0x1326>
 80027ae:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <Constant_Current+0x155c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <Constant_Current+0x1560>)
 80027b4:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 80027b6:	4b8f      	ldr	r3, [pc, #572]	; (80029f4 <Constant_Current+0x1564>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a8f      	ldr	r2, [pc, #572]	; (80029f8 <Constant_Current+0x1568>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <Constant_Current+0x156c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <Constant_Current+0x1564>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fc95 	bl	80010f8 <__aeabi_fcmplt>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <Constant_Current+0x134c>
 80027d4:	4b89      	ldr	r3, [pc, #548]	; (80029fc <Constant_Current+0x156c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <Constant_Current+0x1568>)
 80027da:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 80027dc:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <Constant_Current+0x1564>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <Constant_Current+0x1570>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <Constant_Current+0x1574>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <Constant_Current+0x1564>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7fe fc82 	bl	80010f8 <__aeabi_fcmplt>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <Constant_Current+0x1372>
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <Constant_Current+0x1574>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <Constant_Current+0x1570>)
 8002800:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <Constant_Current+0x1564>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <Constant_Current+0x1578>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <Constant_Current+0x157c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <Constant_Current+0x1564>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7fe fc6f 	bl	80010f8 <__aeabi_fcmplt>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <Constant_Current+0x1398>
 8002820:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <Constant_Current+0x157c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <Constant_Current+0x1578>)
 8002826:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 8002828:	4b72      	ldr	r3, [pc, #456]	; (80029f4 <Constant_Current+0x1564>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a78      	ldr	r2, [pc, #480]	; (8002a10 <Constant_Current+0x1580>)
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <Constant_Current+0x1584>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <Constant_Current+0x1564>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f7fe fc5c 	bl	80010f8 <__aeabi_fcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <Constant_Current+0x13be>
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <Constant_Current+0x1584>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a71      	ldr	r2, [pc, #452]	; (8002a10 <Constant_Current+0x1580>)
 800284c:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 800284e:	4b69      	ldr	r3, [pc, #420]	; (80029f4 <Constant_Current+0x1564>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <Constant_Current+0x1588>)
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <Constant_Current+0x158c>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <Constant_Current+0x1564>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe fc49 	bl	80010f8 <__aeabi_fcmplt>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <Constant_Current+0x13e4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <Constant_Current+0x158c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <Constant_Current+0x1588>)
 8002872:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8002874:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <Constant_Current+0x1564>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <Constant_Current+0x1590>)
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <Constant_Current+0x1594>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <Constant_Current+0x1564>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe fc36 	bl	80010f8 <__aeabi_fcmplt>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <Constant_Current+0x140a>
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <Constant_Current+0x1594>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <Constant_Current+0x1590>)
 8002898:	6013      	str	r3, [r2, #0]

	///////////////////////////////DEFUZZIFIKASI///////////////////////////////////

	A=(r1*outZ)+(r2*outPS)+(r3*outPM)+(r4*outPB)+(r5*outPH)+(r6*outPH)+(r7*outPH);
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <Constant_Current+0x1598>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <Constant_Current+0x159c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7fe fa89 	bl	8000dbc <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461c      	mov	r4, r3
 80028ae:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <Constant_Current+0x15a0>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <Constant_Current+0x15a4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe fa7f 	bl	8000dbc <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe f972 	bl	8000bac <__addsf3>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461c      	mov	r4, r3
 80028cc:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <Constant_Current+0x15a8>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <Constant_Current+0x15ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7fe fa70 	bl	8000dbc <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7fe f963 	bl	8000bac <__addsf3>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <Constant_Current+0x15b0>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <Constant_Current+0x15b4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7fe fa61 	bl	8000dbc <__aeabi_fmul>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fe f954 	bl	8000bac <__addsf3>
 8002904:	4603      	mov	r3, r0
 8002906:	461c      	mov	r4, r3
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <Constant_Current+0x15b8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <Constant_Current+0x15bc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7fe fa52 	bl	8000dbc <__aeabi_fmul>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe f945 	bl	8000bac <__addsf3>
 8002922:	4603      	mov	r3, r0
 8002924:	461c      	mov	r4, r3
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <Constant_Current+0x15c0>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <Constant_Current+0x15bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fe fa43 	bl	8000dbc <__aeabi_fmul>
 8002936:	4603      	mov	r3, r0
 8002938:	4619      	mov	r1, r3
 800293a:	4620      	mov	r0, r4
 800293c:	f7fe f936 	bl	8000bac <__addsf3>
 8002940:	4603      	mov	r3, r0
 8002942:	461c      	mov	r4, r3
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <Constant_Current+0x15c4>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <Constant_Current+0x15bc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f7fe fa34 	bl	8000dbc <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	4619      	mov	r1, r3
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe f927 	bl	8000bac <__addsf3>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <Constant_Current+0x15c8>)
 8002964:	601a      	str	r2, [r3, #0]
	B=(r8*outNS)+(r9*outZ)+(r10*outPS)+(r11*outPM)+(r12*outPB)+(r13*outPH)+(r14*outPH);
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <Constant_Current+0x15cc>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <Constant_Current+0x15d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7fe fa23 	bl	8000dbc <__aeabi_fmul>
 8002976:	4603      	mov	r3, r0
 8002978:	461c      	mov	r4, r3
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <Constant_Current+0x15d4>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <Constant_Current+0x159c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe fa19 	bl	8000dbc <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	4620      	mov	r0, r4
 8002990:	f7fe f90c 	bl	8000bac <__addsf3>
 8002994:	4603      	mov	r3, r0
 8002996:	461c      	mov	r4, r3
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <Constant_Current+0x15d8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <Constant_Current+0x15a4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7fe fa0a 	bl	8000dbc <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7fe f8fd 	bl	8000bac <__addsf3>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461c      	mov	r4, r3
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <Constant_Current+0x15dc>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <Constant_Current+0x15ac>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe f9fb 	bl	8000dbc <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4619      	mov	r1, r3
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7fe f8ee 	bl	8000bac <__addsf3>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461c      	mov	r4, r3
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <Constant_Current+0x15e0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <Constant_Current+0x15b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7fe f9ec 	bl	8000dbc <__aeabi_fmul>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4619      	mov	r1, r3
 80029e8:	4620      	mov	r0, r4
 80029ea:	e043      	b.n	8002a74 <Constant_Current+0x15e4>
 80029ec:	200012dc 	.word	0x200012dc
 80029f0:	200012f4 	.word	0x200012f4
 80029f4:	20000714 	.word	0x20000714
 80029f8:	20000ae0 	.word	0x20000ae0
 80029fc:	20001318 	.word	0x20001318
 8002a00:	2000093c 	.word	0x2000093c
 8002a04:	200006d4 	.word	0x200006d4
 8002a08:	20000740 	.word	0x20000740
 8002a0c:	20001330 	.word	0x20001330
 8002a10:	200012e4 	.word	0x200012e4
 8002a14:	20000d00 	.word	0x20000d00
 8002a18:	20000d7c 	.word	0x20000d7c
 8002a1c:	20000d9c 	.word	0x20000d9c
 8002a20:	20000cf0 	.word	0x20000cf0
 8002a24:	20000cbc 	.word	0x20000cbc
 8002a28:	20001334 	.word	0x20001334
 8002a2c:	20000250 	.word	0x20000250
 8002a30:	20000f68 	.word	0x20000f68
 8002a34:	20000010 	.word	0x20000010
 8002a38:	20000700 	.word	0x20000700
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	20000910 	.word	0x20000910
 8002a44:	20000018 	.word	0x20000018
 8002a48:	20001320 	.word	0x20001320
 8002a4c:	2000001c 	.word	0x2000001c
 8002a50:	200008fc 	.word	0x200008fc
 8002a54:	20000d78 	.word	0x20000d78
 8002a58:	20000734 	.word	0x20000734
 8002a5c:	20000cd4 	.word	0x20000cd4
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	2000073c 	.word	0x2000073c
 8002a68:	20000cb0 	.word	0x20000cb0
 8002a6c:	20000f58 	.word	0x20000f58
 8002a70:	200012fc 	.word	0x200012fc
 8002a74:	f7fe f89a 	bl	8000bac <__addsf3>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <Constant_Current+0x1834>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b91      	ldr	r3, [pc, #580]	; (8002cc8 <Constant_Current+0x1838>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7fe f998 	bl	8000dbc <__aeabi_fmul>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe f88b 	bl	8000bac <__addsf3>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461c      	mov	r4, r3
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <Constant_Current+0x183c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8a      	ldr	r3, [pc, #552]	; (8002cc8 <Constant_Current+0x1838>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7fe f989 	bl	8000dbc <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f87c 	bl	8000bac <__addsf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <Constant_Current+0x1840>)
 8002aba:	601a      	str	r2, [r3, #0]
	C=(r15*outNM)+(r16*outNS)+(r17*outZ)+(r18*outPS)+(r19*outPM)+(r20*outPB)+(r21*outPH);
 8002abc:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <Constant_Current+0x1844>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <Constant_Current+0x1848>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7fe f978 	bl	8000dbc <__aeabi_fmul>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461c      	mov	r4, r3
 8002ad0:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <Constant_Current+0x184c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <Constant_Current+0x1850>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7fe f96e 	bl	8000dbc <__aeabi_fmul>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7fe f861 	bl	8000bac <__addsf3>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461c      	mov	r4, r3
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <Constant_Current+0x1854>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <Constant_Current+0x1858>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7fe f95f 	bl	8000dbc <__aeabi_fmul>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7fe f852 	bl	8000bac <__addsf3>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	4b77      	ldr	r3, [pc, #476]	; (8002cec <Constant_Current+0x185c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <Constant_Current+0x1860>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7fe f950 	bl	8000dbc <__aeabi_fmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7fe f843 	bl	8000bac <__addsf3>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461c      	mov	r4, r3
 8002b2a:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <Constant_Current+0x1864>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b72      	ldr	r3, [pc, #456]	; (8002cf8 <Constant_Current+0x1868>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7fe f941 	bl	8000dbc <__aeabi_fmul>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f834 	bl	8000bac <__addsf3>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461c      	mov	r4, r3
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <Constant_Current+0x186c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <Constant_Current+0x1870>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f7fe f932 	bl	8000dbc <__aeabi_fmul>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7fe f825 	bl	8000bac <__addsf3>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461c      	mov	r4, r3
 8002b66:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <Constant_Current+0x1874>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <Constant_Current+0x1838>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fe f923 	bl	8000dbc <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe f816 	bl	8000bac <__addsf3>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <Constant_Current+0x1878>)
 8002b86:	601a      	str	r2, [r3, #0]
	D=(r22*outNB)+(r23*outNM)+(r24*outNS)+(r25*outZ)+(r26*outPS)+(r27*outPM)+(r28*outPB);
 8002b88:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <Constant_Current+0x187c>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <Constant_Current+0x1880>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f7fe f912 	bl	8000dbc <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461c      	mov	r4, r3
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <Constant_Current+0x1884>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <Constant_Current+0x1848>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f7fe f908 	bl	8000dbc <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7fd fffb 	bl	8000bac <__addsf3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461c      	mov	r4, r3
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <Constant_Current+0x1888>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <Constant_Current+0x1850>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f7fe f8f9 	bl	8000dbc <__aeabi_fmul>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7fd ffec 	bl	8000bac <__addsf3>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <Constant_Current+0x188c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <Constant_Current+0x1858>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7fe f8ea 	bl	8000dbc <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7fd ffdd 	bl	8000bac <__addsf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461c      	mov	r4, r3
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <Constant_Current+0x1890>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <Constant_Current+0x1860>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7fe f8db 	bl	8000dbc <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7fd ffce 	bl	8000bac <__addsf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461c      	mov	r4, r3
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <Constant_Current+0x1894>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <Constant_Current+0x1868>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7fe f8cc 	bl	8000dbc <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4619      	mov	r1, r3
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7fd ffbf 	bl	8000bac <__addsf3>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461c      	mov	r4, r3
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <Constant_Current+0x1898>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <Constant_Current+0x1870>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe f8bd 	bl	8000dbc <__aeabi_fmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fd ffb0 	bl	8000bac <__addsf3>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <Constant_Current+0x189c>)
 8002c52:	601a      	str	r2, [r3, #0]
	E=(r29*outNH)+(r30*outNB)+(r31*outNM)+(r32*outNS)+(r33*outZ)+(r34*outPS)+(r35*outPM);
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <Constant_Current+0x18a0>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <Constant_Current+0x18a4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f7fe f8ac 	bl	8000dbc <__aeabi_fmul>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461c      	mov	r4, r3
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <Constant_Current+0x18a8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <Constant_Current+0x1880>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe f8a2 	bl	8000dbc <__aeabi_fmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f7fd ff95 	bl	8000bac <__addsf3>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461c      	mov	r4, r3
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <Constant_Current+0x18ac>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <Constant_Current+0x1848>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7fe f893 	bl	8000dbc <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7fd ff86 	bl	8000bac <__addsf3>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <Constant_Current+0x18b0>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <Constant_Current+0x1850>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7fe f884 	bl	8000dbc <__aeabi_fmul>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7fd ff77 	bl	8000bac <__addsf3>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	e040      	b.n	8002d44 <Constant_Current+0x18b4>
 8002cc2:	bf00      	nop
 8002cc4:	20001338 	.word	0x20001338
 8002cc8:	2000001c 	.word	0x2000001c
 8002ccc:	20000684 	.word	0x20000684
 8002cd0:	20000ad8 	.word	0x20000ad8
 8002cd4:	20001300 	.word	0x20001300
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	20000d94 	.word	0x20000d94
 8002ce0:	2000000c 	.word	0x2000000c
 8002ce4:	200008f0 	.word	0x200008f0
 8002ce8:	20000250 	.word	0x20000250
 8002cec:	20000d08 	.word	0x20000d08
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	200012f8 	.word	0x200012f8
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	20000ccc 	.word	0x20000ccc
 8002d00:	20000018 	.word	0x20000018
 8002d04:	20000904 	.word	0x20000904
 8002d08:	20000b08 	.word	0x20000b08
 8002d0c:	20001128 	.word	0x20001128
 8002d10:	20000004 	.word	0x20000004
 8002d14:	20001314 	.word	0x20001314
 8002d18:	2000132c 	.word	0x2000132c
 8002d1c:	200006d0 	.word	0x200006d0
 8002d20:	200008e0 	.word	0x200008e0
 8002d24:	20000ce8 	.word	0x20000ce8
 8002d28:	2000069c 	.word	0x2000069c
 8002d2c:	2000067c 	.word	0x2000067c
 8002d30:	200006c8 	.word	0x200006c8
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000f40 	.word	0x20000f40
 8002d3c:	200008f4 	.word	0x200008f4
 8002d40:	20000944 	.word	0x20000944
 8002d44:	461c      	mov	r4, r3
 8002d46:	4b91      	ldr	r3, [pc, #580]	; (8002f8c <Constant_Current+0x1afc>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <Constant_Current+0x1b00>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7fe f833 	bl	8000dbc <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd ff26 	bl	8000bac <__addsf3>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461c      	mov	r4, r3
 8002d64:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <Constant_Current+0x1b04>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <Constant_Current+0x1b08>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7fe f824 	bl	8000dbc <__aeabi_fmul>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd ff17 	bl	8000bac <__addsf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461c      	mov	r4, r3
 8002d82:	4b86      	ldr	r3, [pc, #536]	; (8002f9c <Constant_Current+0x1b0c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b86      	ldr	r3, [pc, #536]	; (8002fa0 <Constant_Current+0x1b10>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f7fe f815 	bl	8000dbc <__aeabi_fmul>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7fd ff08 	bl	8000bac <__addsf3>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <Constant_Current+0x1b14>)
 8002da2:	601a      	str	r2, [r3, #0]
	F=(r36*outNH)+(r37*outNH)+(r38*outNB)+(r39*outNM)+(r40*outNS)+(r41*outZ)+(r42*outPS);
 8002da4:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <Constant_Current+0x1b18>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b80      	ldr	r3, [pc, #512]	; (8002fac <Constant_Current+0x1b1c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe f804 	bl	8000dbc <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461c      	mov	r4, r3
 8002db8:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <Constant_Current+0x1b20>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <Constant_Current+0x1b1c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fd fffa 	bl	8000dbc <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7fd feed 	bl	8000bac <__addsf3>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	4b77      	ldr	r3, [pc, #476]	; (8002fb4 <Constant_Current+0x1b24>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b77      	ldr	r3, [pc, #476]	; (8002fb8 <Constant_Current+0x1b28>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7fd ffeb 	bl	8000dbc <__aeabi_fmul>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4619      	mov	r1, r3
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7fd fede 	bl	8000bac <__addsf3>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461c      	mov	r4, r3
 8002df4:	4b71      	ldr	r3, [pc, #452]	; (8002fbc <Constant_Current+0x1b2c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <Constant_Current+0x1b30>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fd ffdc 	bl	8000dbc <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fd fecf 	bl	8000bac <__addsf3>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <Constant_Current+0x1b34>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <Constant_Current+0x1b38>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fd ffcd 	bl	8000dbc <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7fd fec0 	bl	8000bac <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461c      	mov	r4, r3
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <Constant_Current+0x1b3c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <Constant_Current+0x1b00>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fd ffbe 	bl	8000dbc <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4619      	mov	r1, r3
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd feb1 	bl	8000bac <__addsf3>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <Constant_Current+0x1b40>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <Constant_Current+0x1b08>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fd ffaf 	bl	8000dbc <__aeabi_fmul>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4619      	mov	r1, r3
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7fd fea2 	bl	8000bac <__addsf3>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <Constant_Current+0x1b44>)
 8002e6e:	601a      	str	r2, [r3, #0]
	G=(r43*outNH)+(r44*outNH)+(r45*outNH)+(r46*outNB)+(r47*outNM)+(r48*outNS)+(r49*outZ);
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <Constant_Current+0x1b48>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <Constant_Current+0x1b1c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fd ff9e 	bl	8000dbc <__aeabi_fmul>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461c      	mov	r4, r3
 8002e84:	4b55      	ldr	r3, [pc, #340]	; (8002fdc <Constant_Current+0x1b4c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <Constant_Current+0x1b1c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd ff94 	bl	8000dbc <__aeabi_fmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7fd fe87 	bl	8000bac <__addsf3>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <Constant_Current+0x1b50>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <Constant_Current+0x1b1c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fd ff85 	bl	8000dbc <__aeabi_fmul>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7fd fe78 	bl	8000bac <__addsf3>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <Constant_Current+0x1b54>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <Constant_Current+0x1b28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7fd ff76 	bl	8000dbc <__aeabi_fmul>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7fd fe69 	bl	8000bac <__addsf3>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461c      	mov	r4, r3
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <Constant_Current+0x1b58>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <Constant_Current+0x1b30>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fd ff67 	bl	8000dbc <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7fd fe5a 	bl	8000bac <__addsf3>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461c      	mov	r4, r3
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <Constant_Current+0x1b5c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <Constant_Current+0x1b38>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7fd ff58 	bl	8000dbc <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7fd fe4b 	bl	8000bac <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461c      	mov	r4, r3
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <Constant_Current+0x1b60>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <Constant_Current+0x1b00>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7fd ff49 	bl	8000dbc <__aeabi_fmul>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7fd fe3c 	bl	8000bac <__addsf3>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <Constant_Current+0x1b64>)
 8002f3a:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <Constant_Current+0x1b68>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <Constant_Current+0x1b6c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fd fe30 	bl	8000bac <__addsf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <Constant_Current+0x1b70>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7fd fe28 	bl	8000bac <__addsf3>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <Constant_Current+0x1b74>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7fd fe20 	bl	8000bac <__addsf3>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <Constant_Current+0x1b78>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f7fd fe18 	bl	8000bac <__addsf3>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <Constant_Current+0x1b7c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	e042      	b.n	8003010 <Constant_Current+0x1b80>
 8002f8a:	bf00      	nop
 8002f8c:	20000cf4 	.word	0x20000cf4
 8002f90:	20000250 	.word	0x20000250
 8002f94:	20000f3c 	.word	0x20000f3c
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	20001120 	.word	0x20001120
 8002fa0:	20000014 	.word	0x20000014
 8002fa4:	20001108 	.word	0x20001108
 8002fa8:	20000708 	.word	0x20000708
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000b00 	.word	0x20000b00
 8002fb4:	20000cc4 	.word	0x20000cc4
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	200012ec 	.word	0x200012ec
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	20000d6c 	.word	0x20000d6c
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	200006e0 	.word	0x200006e0
 8002fd0:	200006f8 	.word	0x200006f8
 8002fd4:	2000131c 	.word	0x2000131c
 8002fd8:	200012f4 	.word	0x200012f4
 8002fdc:	20000ae0 	.word	0x20000ae0
 8002fe0:	2000093c 	.word	0x2000093c
 8002fe4:	20000740 	.word	0x20000740
 8002fe8:	200012e4 	.word	0x200012e4
 8002fec:	20000d7c 	.word	0x20000d7c
 8002ff0:	20000cf0 	.word	0x20000cf0
 8002ff4:	20000cdc 	.word	0x20000cdc
 8002ff8:	20001334 	.word	0x20001334
 8002ffc:	20000f68 	.word	0x20000f68
 8003000:	20000700 	.word	0x20000700
 8003004:	20000910 	.word	0x20000910
 8003008:	20001320 	.word	0x20001320
 800300c:	200008fc 	.word	0x200008fc
 8003010:	f7fd fdcc 	bl	8000bac <__addsf3>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b90      	ldr	r3, [pc, #576]	; (800325c <Constant_Current+0x1dcc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7fd fdc4 	bl	8000bac <__addsf3>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <Constant_Current+0x1dd0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7fd fdbc 	bl	8000bac <__addsf3>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	4b8a      	ldr	r3, [pc, #552]	; (8003264 <Constant_Current+0x1dd4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f7fd fdb4 	bl	8000bac <__addsf3>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <Constant_Current+0x1dd8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7fd fdac 	bl	8000bac <__addsf3>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	4b84      	ldr	r3, [pc, #528]	; (800326c <Constant_Current+0x1ddc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7fd fda4 	bl	8000bac <__addsf3>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b81      	ldr	r3, [pc, #516]	; (8003270 <Constant_Current+0x1de0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fd fd9c 	bl	8000bac <__addsf3>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <Constant_Current+0x1de4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7fd fd94 	bl	8000bac <__addsf3>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <Constant_Current+0x1de8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd fd8c 	bl	8000bac <__addsf3>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b78      	ldr	r3, [pc, #480]	; (800327c <Constant_Current+0x1dec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fd fd84 	bl	8000bac <__addsf3>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b75      	ldr	r3, [pc, #468]	; (8003280 <Constant_Current+0x1df0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7fd fd7c 	bl	8000bac <__addsf3>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b72      	ldr	r3, [pc, #456]	; (8003284 <Constant_Current+0x1df4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f7fd fd74 	bl	8000bac <__addsf3>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <Constant_Current+0x1df8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fd fd6c 	bl	8000bac <__addsf3>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b6c      	ldr	r3, [pc, #432]	; (800328c <Constant_Current+0x1dfc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7fd fd64 	bl	8000bac <__addsf3>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <Constant_Current+0x1e00>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7fd fd5c 	bl	8000bac <__addsf3>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b66      	ldr	r3, [pc, #408]	; (8003294 <Constant_Current+0x1e04>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fd fd54 	bl	8000bac <__addsf3>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <Constant_Current+0x1e08>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7fd fd4c 	bl	8000bac <__addsf3>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <Constant_Current+0x1e0c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7fd fd44 	bl	8000bac <__addsf3>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <Constant_Current+0x1e10>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7fd fd3c 	bl	8000bac <__addsf3>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <Constant_Current+0x1e14>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7fd fd34 	bl	8000bac <__addsf3>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <Constant_Current+0x1e18>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7fd fd2c 	bl	8000bac <__addsf3>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	4b54      	ldr	r3, [pc, #336]	; (80032ac <Constant_Current+0x1e1c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f7fd fd24 	bl	8000bac <__addsf3>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <Constant_Current+0x1e20>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7fd fd1c 	bl	8000bac <__addsf3>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <Constant_Current+0x1e24>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fd fd14 	bl	8000bac <__addsf3>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <Constant_Current+0x1e28>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fd fd0c 	bl	8000bac <__addsf3>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	4b48      	ldr	r3, [pc, #288]	; (80032bc <Constant_Current+0x1e2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7fd fd04 	bl	8000bac <__addsf3>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <Constant_Current+0x1e30>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f7fd fcfc 	bl	8000bac <__addsf3>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <Constant_Current+0x1e34>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fd fcf4 	bl	8000bac <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <Constant_Current+0x1e38>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7fd fcec 	bl	8000bac <__addsf3>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <Constant_Current+0x1e3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7fd fce4 	bl	8000bac <__addsf3>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <Constant_Current+0x1e40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7fd fcdc 	bl	8000bac <__addsf3>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <Constant_Current+0x1e44>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fd fcd4 	bl	8000bac <__addsf3>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <Constant_Current+0x1e48>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fd fccc 	bl	8000bac <__addsf3>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <Constant_Current+0x1e4c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7fd fcc4 	bl	8000bac <__addsf3>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <Constant_Current+0x1e50>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7fd fcbc 	bl	8000bac <__addsf3>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <Constant_Current+0x1e54>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fd fcb4 	bl	8000bac <__addsf3>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <Constant_Current+0x1e58>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f7fd fcac 	bl	8000bac <__addsf3>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	e048      	b.n	80032ec <Constant_Current+0x1e5c>
 800325a:	bf00      	nop
 800325c:	20000d78 	.word	0x20000d78
 8003260:	20000cd4 	.word	0x20000cd4
 8003264:	2000073c 	.word	0x2000073c
 8003268:	20000cb0 	.word	0x20000cb0
 800326c:	20000f58 	.word	0x20000f58
 8003270:	200012fc 	.word	0x200012fc
 8003274:	20001338 	.word	0x20001338
 8003278:	20000684 	.word	0x20000684
 800327c:	20001300 	.word	0x20001300
 8003280:	20000d94 	.word	0x20000d94
 8003284:	200008f0 	.word	0x200008f0
 8003288:	20000d08 	.word	0x20000d08
 800328c:	200012f8 	.word	0x200012f8
 8003290:	20000ccc 	.word	0x20000ccc
 8003294:	20000904 	.word	0x20000904
 8003298:	20001128 	.word	0x20001128
 800329c:	20001314 	.word	0x20001314
 80032a0:	2000132c 	.word	0x2000132c
 80032a4:	200006d0 	.word	0x200006d0
 80032a8:	200008e0 	.word	0x200008e0
 80032ac:	20000ce8 	.word	0x20000ce8
 80032b0:	2000069c 	.word	0x2000069c
 80032b4:	200006c8 	.word	0x200006c8
 80032b8:	20000f40 	.word	0x20000f40
 80032bc:	200008f4 	.word	0x200008f4
 80032c0:	20000944 	.word	0x20000944
 80032c4:	20000cf4 	.word	0x20000cf4
 80032c8:	20000f3c 	.word	0x20000f3c
 80032cc:	20001120 	.word	0x20001120
 80032d0:	20000708 	.word	0x20000708
 80032d4:	20000b00 	.word	0x20000b00
 80032d8:	20000cc4 	.word	0x20000cc4
 80032dc:	200012ec 	.word	0x200012ec
 80032e0:	20000d6c 	.word	0x20000d6c
 80032e4:	200006e0 	.word	0x200006e0
 80032e8:	200006f8 	.word	0x200006f8
 80032ec:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <Constant_Current+0x2048>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fd fc5a 	bl	8000bac <__addsf3>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b77      	ldr	r3, [pc, #476]	; (80034dc <Constant_Current+0x204c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7fd fc52 	bl	8000bac <__addsf3>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <Constant_Current+0x2050>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7fd fc4a 	bl	8000bac <__addsf3>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <Constant_Current+0x2054>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7fd fc42 	bl	8000bac <__addsf3>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <Constant_Current+0x2058>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7fd fc3a 	bl	8000bac <__addsf3>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <Constant_Current+0x205c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7fd fc32 	bl	8000bac <__addsf3>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <Constant_Current+0x2060>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7fd fc2a 	bl	8000bac <__addsf3>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <Constant_Current+0x2064>)
 800335e:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 8003360:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <Constant_Current+0x2068>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b65      	ldr	r3, [pc, #404]	; (80034fc <Constant_Current+0x206c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7fd fc1e 	bl	8000bac <__addsf3>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	4b62      	ldr	r3, [pc, #392]	; (8003500 <Constant_Current+0x2070>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7fd fc16 	bl	8000bac <__addsf3>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	4b5f      	ldr	r3, [pc, #380]	; (8003504 <Constant_Current+0x2074>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7fd fc0e 	bl	8000bac <__addsf3>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <Constant_Current+0x2078>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fd fc06 	bl	8000bac <__addsf3>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <Constant_Current+0x207c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7fd fbfe 	bl	8000bac <__addsf3>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b56      	ldr	r3, [pc, #344]	; (8003510 <Constant_Current+0x2080>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fd fbf6 	bl	8000bac <__addsf3>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <Constant_Current+0x2064>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fd fdaa 	bl	8000f24 <__aeabi_fdiv>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <Constant_Current+0x2084>)
 80033d6:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <Constant_Current+0x2088>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <Constant_Current+0x2084>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fd fbe2 	bl	8000bac <__addsf3>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <Constant_Current+0x2088>)
 80033ee:	601a      	str	r2, [r3, #0]

	if(dc>=88)
 80033f0:	4b49      	ldr	r3, [pc, #292]	; (8003518 <Constant_Current+0x2088>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4949      	ldr	r1, [pc, #292]	; (800351c <Constant_Current+0x208c>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fe92 	bl	8001120 <__aeabi_fcmpge>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <Constant_Current+0x1f78>
		dc=88;
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <Constant_Current+0x2088>)
 8003404:	4a45      	ldr	r2, [pc, #276]	; (800351c <Constant_Current+0x208c>)
 8003406:	601a      	str	r2, [r3, #0]
	if(dc<=0)
 8003408:	4b43      	ldr	r3, [pc, #268]	; (8003518 <Constant_Current+0x2088>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fe7b 	bl	800110c <__aeabi_fcmple>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <Constant_Current+0x1f94>
		dc=0;
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <Constant_Current+0x2088>)
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <Constant_Current+0x2088>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	493d      	ldr	r1, [pc, #244]	; (8003520 <Constant_Current+0x2090>)
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fd7a 	bl	8000f24 <__aeabi_fdiv>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <Constant_Current+0x2094>)
 8003436:	601a      	str	r2, [r3, #0]
//			  	while(p>0)
//			  		p--;
//			  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//		}

	if(	flag_trip_overvoltage == 1		||
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <Constant_Current+0x2098>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d02f      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_overtemperature == 1	||
 8003440:	4b3a      	ldr	r3, [pc, #232]	; (800352c <Constant_Current+0x209c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8003444:	2b01      	cmp	r3, #1
 8003446:	d02b      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_undertemperature == 1	||
 8003448:	4b39      	ldr	r3, [pc, #228]	; (8003530 <Constant_Current+0x20a0>)
 800344a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 800344c:	2b01      	cmp	r3, #1
 800344e:	d027      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_overcurrentcharge == 1||
 8003450:	4b38      	ldr	r3, [pc, #224]	; (8003534 <Constant_Current+0x20a4>)
 8003452:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8003454:	2b01      	cmp	r3, #1
 8003456:	d023      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_SOCOverCharge == 1	||
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <Constant_Current+0x20a8>)
 800345a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 800345c:	2b01      	cmp	r3, #1
 800345e:	d01f      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_shortcircuit == 1		||
 8003460:	4b36      	ldr	r3, [pc, #216]	; (800353c <Constant_Current+0x20ac>)
 8003462:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8003464:	2b01      	cmp	r3, #1
 8003466:	d01b      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_systemfailure == 1	||
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <Constant_Current+0x20b0>)
 800346a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 800346c:	2b01      	cmp	r3, #1
 800346e:	d017      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerShortCircuit == 1	||
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <Constant_Current+0x20b4>)
 8003472:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8003474:	2b01      	cmp	r3, #1
 8003476:	d013      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerOverCurrent == 1	||
 8003478:	4b33      	ldr	r3, [pc, #204]	; (8003548 <Constant_Current+0x20b8>)
 800347a:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00f      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerOverTemperature == 1||
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <Constant_Current+0x20bc>)
 8003482:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00b      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerOverVoltage == 1	||
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <Constant_Current+0x20c0>)
 800348a:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_MiniPC_LostCommunication==1||
 8003490:	4b30      	ldr	r3, [pc, #192]	; (8003554 <Constant_Current+0x20c4>)
 8003492:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8003494:	2b01      	cmp	r3, #1
 8003496:	d003      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_BMS_LostCommunication == 1)
 8003498:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <Constant_Current+0x20c8>)
 800349a:	781b      	ldrb	r3, [r3, #0]
		Flag_MiniPC_LostCommunication==1||
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <Constant_Current+0x201e>
		{
			duty=0;
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <Constant_Current+0x2094>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <Constant_Current+0x20cc>)
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
		}

	TIM1->CCR1=duty*TIM1->ARR;
 80034ae:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <Constant_Current+0x20d0>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fc2a 	bl	8000d0c <__aeabi_ui2f>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <Constant_Current+0x2094>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fd fc7b 	bl	8000dbc <__aeabi_fmul>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4c25      	ldr	r4, [pc, #148]	; (8003560 <Constant_Current+0x20d0>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe3c 	bl	8001148 <__aeabi_f2uiz>
 80034d0:	4603      	mov	r3, r0
 80034d2:	6363      	str	r3, [r4, #52]	; 0x34

}
 80034d4:	bf00      	nop
 80034d6:	bd98      	pop	{r3, r4, r7, pc}
 80034d8:	200012f4 	.word	0x200012f4
 80034dc:	20000ae0 	.word	0x20000ae0
 80034e0:	2000093c 	.word	0x2000093c
 80034e4:	20000740 	.word	0x20000740
 80034e8:	200012e4 	.word	0x200012e4
 80034ec:	20000d7c 	.word	0x20000d7c
 80034f0:	20000cf0 	.word	0x20000cf0
 80034f4:	20000d64 	.word	0x20000d64
 80034f8:	20000734 	.word	0x20000734
 80034fc:	20000ad8 	.word	0x20000ad8
 8003500:	20000b08 	.word	0x20000b08
 8003504:	2000067c 	.word	0x2000067c
 8003508:	20001108 	.word	0x20001108
 800350c:	2000131c 	.word	0x2000131c
 8003510:	20000cdc 	.word	0x20000cdc
 8003514:	20001104 	.word	0x20001104
 8003518:	200006dc 	.word	0x200006dc
 800351c:	42b00000 	.word	0x42b00000
 8003520:	42c80000 	.word	0x42c80000
 8003524:	200012cc 	.word	0x200012cc
 8003528:	20001308 	.word	0x20001308
 800352c:	200008d8 	.word	0x200008d8
 8003530:	20000af4 	.word	0x20000af4
 8003534:	20000d80 	.word	0x20000d80
 8003538:	200006ac 	.word	0x200006ac
 800353c:	200006cc 	.word	0x200006cc
 8003540:	200006fc 	.word	0x200006fc
 8003544:	20000914 	.word	0x20000914
 8003548:	200008f8 	.word	0x200008f8
 800354c:	20000721 	.word	0x20000721
 8003550:	20000920 	.word	0x20000920
 8003554:	200012c8 	.word	0x200012c8
 8003558:	200006f6 	.word	0x200006f6
 800355c:	20000744 	.word	0x20000744
 8003560:	40010000 	.word	0x40010000

08003564 <Constant_Voltage>:
float oNH=-0.1, oNB=-0.05, oNM=-0.025, oNS=-0.01, oZ=0, oPS=0.0075, oPM=0.01, oPB=0.025, oPH=0.05;
float SetPoint_CV = MAX_CHARGE_VOLTAGE-0.1;
extern float Voltage_Charger;

void Constant_Voltage(void)
{
 8003564:	b598      	push	{r3, r4, r7, lr}
 8003566:	af00      	add	r7, sp, #0
	sp=SetPoint_CV;
 8003568:	4b71      	ldr	r3, [pc, #452]	; (8003730 <Constant_Voltage+0x1cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a71      	ldr	r2, [pc, #452]	; (8003734 <Constant_Voltage+0x1d0>)
 800356e:	6013      	str	r3, [r2, #0]
	pv=Voltage_Charger;
 8003570:	4b71      	ldr	r3, [pc, #452]	; (8003738 <Constant_Voltage+0x1d4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a71      	ldr	r2, [pc, #452]	; (800373c <Constant_Voltage+0x1d8>)
 8003576:	6013      	str	r3, [r2, #0]
	e=sp-pv;
 8003578:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <Constant_Voltage+0x1d0>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <Constant_Voltage+0x1d8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f7fd fb10 	bl	8000ba8 <__aeabi_fsub>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <Constant_Voltage+0x1dc>)
 800358e:	601a      	str	r2, [r3, #0]
	d=e-esblm;
 8003590:	4b6b      	ldr	r3, [pc, #428]	; (8003740 <Constant_Voltage+0x1dc>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <Constant_Voltage+0x1e0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7fd fb04 	bl	8000ba8 <__aeabi_fsub>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <Constant_Voltage+0x1e4>)
 80035a6:	601a      	str	r2, [r3, #0]
	esblm=e;
 80035a8:	4b65      	ldr	r3, [pc, #404]	; (8003740 <Constant_Voltage+0x1dc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <Constant_Voltage+0x1e0>)
 80035ae:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

		if(e<=-9)
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <Constant_Voltage+0x1dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4965      	ldr	r1, [pc, #404]	; (800374c <Constant_Voltage+0x1e8>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fda8 	bl	800110c <__aeabi_fcmple>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01b      	beq.n	80035fa <Constant_Voltage+0x96>
		{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <Constant_Voltage+0x1ec>)
 80035c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	4b62      	ldr	r3, [pc, #392]	; (8003754 <Constant_Voltage+0x1f0>)
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	4b60      	ldr	r3, [pc, #384]	; (8003754 <Constant_Voltage+0x1f0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a60      	ldr	r2, [pc, #384]	; (8003758 <Constant_Voltage+0x1f4>)
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <Constant_Voltage+0x1f4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5f      	ldr	r2, [pc, #380]	; (800375c <Constant_Voltage+0x1f8>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b5e      	ldr	r3, [pc, #376]	; (800375c <Constant_Voltage+0x1f8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <Constant_Voltage+0x1fc>)
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <Constant_Voltage+0x1fc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5d      	ldr	r2, [pc, #372]	; (8003764 <Constant_Voltage+0x200>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <Constant_Voltage+0x200>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <Constant_Voltage+0x204>)
 80035f8:	6013      	str	r3, [r2, #0]

		if(e>=-9&&e<=-6)
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <Constant_Voltage+0x1dc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4953      	ldr	r1, [pc, #332]	; (800374c <Constant_Voltage+0x1e8>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fd8d 	bl	8001120 <__aeabi_fcmpge>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d043      	beq.n	8003694 <Constant_Voltage+0x130>
 800360c:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <Constant_Voltage+0x1dc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4956      	ldr	r1, [pc, #344]	; (800376c <Constant_Voltage+0x208>)
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fd7a 	bl	800110c <__aeabi_fcmple>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03a      	beq.n	8003694 <Constant_Voltage+0x130>
		{ eNB=(-(e+9)/3)+1;
 800361e:	4b48      	ldr	r3, [pc, #288]	; (8003740 <Constant_Voltage+0x1dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4953      	ldr	r1, [pc, #332]	; (8003770 <Constant_Voltage+0x20c>)
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fac1 	bl	8000bac <__addsf3>
 800362a:	4603      	mov	r3, r0
 800362c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003630:	4950      	ldr	r1, [pc, #320]	; (8003774 <Constant_Voltage+0x210>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fc76 	bl	8000f24 <__aeabi_fdiv>
 8003638:	4603      	mov	r3, r0
 800363a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fab4 	bl	8000bac <__addsf3>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <Constant_Voltage+0x1ec>)
 800364a:	601a      	str	r2, [r3, #0]
		   eNM=(e+9)/3;
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <Constant_Voltage+0x1dc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4947      	ldr	r1, [pc, #284]	; (8003770 <Constant_Voltage+0x20c>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd faaa 	bl	8000bac <__addsf3>
 8003658:	4603      	mov	r3, r0
 800365a:	4946      	ldr	r1, [pc, #280]	; (8003774 <Constant_Voltage+0x210>)
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd fc61 	bl	8000f24 <__aeabi_fdiv>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <Constant_Voltage+0x204>)
 8003668:	601a      	str	r2, [r3, #0]
		   eNS=eZ=ePS=ePM=ePB=0;
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <Constant_Voltage+0x1f0>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <Constant_Voltage+0x1f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a38      	ldr	r2, [pc, #224]	; (8003758 <Constant_Voltage+0x1f4>)
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <Constant_Voltage+0x1f4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a37      	ldr	r2, [pc, #220]	; (800375c <Constant_Voltage+0x1f8>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <Constant_Voltage+0x1f8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a36      	ldr	r2, [pc, #216]	; (8003760 <Constant_Voltage+0x1fc>)
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <Constant_Voltage+0x1fc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a35      	ldr	r2, [pc, #212]	; (8003764 <Constant_Voltage+0x200>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e1de      	b.n	8003a52 <Constant_Voltage+0x4ee>
		}

		else if(e>=-6&&e<=-3)
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <Constant_Voltage+0x1dc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4934      	ldr	r1, [pc, #208]	; (800376c <Constant_Voltage+0x208>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fd40 	bl	8001120 <__aeabi_fcmpge>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <Constant_Voltage+0x21c>
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <Constant_Voltage+0x1dc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4933      	ldr	r1, [pc, #204]	; (8003778 <Constant_Voltage+0x214>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fd2d 	bl	800110c <__aeabi_fcmple>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d063      	beq.n	8003780 <Constant_Voltage+0x21c>
		{ eNM=(-(e+6)/3)+1;
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <Constant_Voltage+0x1dc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	492f      	ldr	r1, [pc, #188]	; (800377c <Constant_Voltage+0x218>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fa74 	bl	8000bac <__addsf3>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80036ca:	492a      	ldr	r1, [pc, #168]	; (8003774 <Constant_Voltage+0x210>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fc29 	bl	8000f24 <__aeabi_fdiv>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fa67 	bl	8000bac <__addsf3>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <Constant_Voltage+0x204>)
 80036e4:	601a      	str	r2, [r3, #0]
		   eNS=(e+6)/3;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <Constant_Voltage+0x1dc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4924      	ldr	r1, [pc, #144]	; (800377c <Constant_Voltage+0x218>)
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fa5d 	bl	8000bac <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	491f      	ldr	r1, [pc, #124]	; (8003774 <Constant_Voltage+0x210>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fc14 	bl	8000f24 <__aeabi_fdiv>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <Constant_Voltage+0x200>)
 8003702:	601a      	str	r2, [r3, #0]
		   eNB=eZ=ePS=ePM=ePB=0;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <Constant_Voltage+0x1f0>)
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <Constant_Voltage+0x1f0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <Constant_Voltage+0x1f4>)
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <Constant_Voltage+0x1f4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a10      	ldr	r2, [pc, #64]	; (800375c <Constant_Voltage+0x1f8>)
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <Constant_Voltage+0x1f8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <Constant_Voltage+0x1fc>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <Constant_Voltage+0x1fc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <Constant_Voltage+0x1ec>)
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e191      	b.n	8003a52 <Constant_Voltage+0x4ee>
 800372e:	bf00      	nop
 8003730:	20000040 	.word	0x20000040
 8003734:	20000f54 	.word	0x20000f54
 8003738:	20000f44 	.word	0x20000f44
 800373c:	2000111c 	.word	0x2000111c
 8003740:	200012d4 	.word	0x200012d4
 8003744:	200012d8 	.word	0x200012d8
 8003748:	20000d8c 	.word	0x20000d8c
 800374c:	c1100000 	.word	0xc1100000
 8003750:	200012dc 	.word	0x200012dc
 8003754:	20000cbc 	.word	0x20000cbc
 8003758:	20000d9c 	.word	0x20000d9c
 800375c:	20000d00 	.word	0x20000d00
 8003760:	20001330 	.word	0x20001330
 8003764:	200006d4 	.word	0x200006d4
 8003768:	20001318 	.word	0x20001318
 800376c:	c0c00000 	.word	0xc0c00000
 8003770:	41100000 	.word	0x41100000
 8003774:	40400000 	.word	0x40400000
 8003778:	c0400000 	.word	0xc0400000
 800377c:	40c00000 	.word	0x40c00000
		}

		else if(e>=-3&&e<=0)
 8003780:	4b95      	ldr	r3, [pc, #596]	; (80039d8 <Constant_Voltage+0x474>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4995      	ldr	r1, [pc, #596]	; (80039dc <Constant_Voltage+0x478>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fcca 	bl	8001120 <__aeabi_fcmpge>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d045      	beq.n	800381e <Constant_Voltage+0x2ba>
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <Constant_Voltage+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fcb6 	bl	800110c <__aeabi_fcmple>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d03b      	beq.n	800381e <Constant_Voltage+0x2ba>
		{ eNS=(-(e+3)/3)+1;
 80037a6:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <Constant_Voltage+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	498d      	ldr	r1, [pc, #564]	; (80039e0 <Constant_Voltage+0x47c>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd f9fd 	bl	8000bac <__addsf3>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037b8:	4989      	ldr	r1, [pc, #548]	; (80039e0 <Constant_Voltage+0x47c>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fbb2 	bl	8000f24 <__aeabi_fdiv>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd f9f0 	bl	8000bac <__addsf3>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461a      	mov	r2, r3
 80037d0:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <Constant_Voltage+0x480>)
 80037d2:	601a      	str	r2, [r3, #0]
		   eZ=(e/3)+1;
 80037d4:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <Constant_Voltage+0x474>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4981      	ldr	r1, [pc, #516]	; (80039e0 <Constant_Voltage+0x47c>)
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fba2 	bl	8000f24 <__aeabi_fdiv>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd f9e0 	bl	8000bac <__addsf3>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <Constant_Voltage+0x484>)
 80037f2:	601a      	str	r2, [r3, #0]
		   eNB=eNM=ePS=ePM=ePB=0;
 80037f4:	4b7d      	ldr	r3, [pc, #500]	; (80039ec <Constant_Voltage+0x488>)
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b7b      	ldr	r3, [pc, #492]	; (80039ec <Constant_Voltage+0x488>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7b      	ldr	r2, [pc, #492]	; (80039f0 <Constant_Voltage+0x48c>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <Constant_Voltage+0x48c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <Constant_Voltage+0x490>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <Constant_Voltage+0x490>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <Constant_Voltage+0x494>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <Constant_Voltage+0x494>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a78      	ldr	r2, [pc, #480]	; (80039fc <Constant_Voltage+0x498>)
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e119      	b.n	8003a52 <Constant_Voltage+0x4ee>
		}

		else if(e>=0&&e<=3)
 800381e:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <Constant_Voltage+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fc7a 	bl	8001120 <__aeabi_fcmpge>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d037      	beq.n	80038a2 <Constant_Voltage+0x33e>
 8003832:	4b69      	ldr	r3, [pc, #420]	; (80039d8 <Constant_Voltage+0x474>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	496a      	ldr	r1, [pc, #424]	; (80039e0 <Constant_Voltage+0x47c>)
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fc67 	bl	800110c <__aeabi_fcmple>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02e      	beq.n	80038a2 <Constant_Voltage+0x33e>
		{ eZ=-(e/3)+1;
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <Constant_Voltage+0x474>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4965      	ldr	r1, [pc, #404]	; (80039e0 <Constant_Voltage+0x47c>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fb6a 	bl	8000f24 <__aeabi_fdiv>
 8003850:	4603      	mov	r3, r0
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003858:	f7fd f9a6 	bl	8000ba8 <__aeabi_fsub>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <Constant_Voltage+0x484>)
 8003862:	601a      	str	r2, [r3, #0]
		   ePS=e/3;
 8003864:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <Constant_Voltage+0x474>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	495d      	ldr	r1, [pc, #372]	; (80039e0 <Constant_Voltage+0x47c>)
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fb5a 	bl	8000f24 <__aeabi_fdiv>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <Constant_Voltage+0x490>)
 8003876:	601a      	str	r2, [r3, #0]
		   eNB=eNM=eNS=ePM=ePB=0;
 8003878:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <Constant_Voltage+0x488>)
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <Constant_Voltage+0x488>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <Constant_Voltage+0x48c>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <Constant_Voltage+0x48c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a55      	ldr	r2, [pc, #340]	; (80039e4 <Constant_Voltage+0x480>)
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <Constant_Voltage+0x480>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <Constant_Voltage+0x494>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <Constant_Voltage+0x494>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a57      	ldr	r2, [pc, #348]	; (80039fc <Constant_Voltage+0x498>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e0d7      	b.n	8003a52 <Constant_Voltage+0x4ee>
		}

		else if(e>=3&&e<=6)
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <Constant_Voltage+0x474>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	494e      	ldr	r1, [pc, #312]	; (80039e0 <Constant_Voltage+0x47c>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fc39 	bl	8001120 <__aeabi_fcmpge>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d043      	beq.n	800393c <Constant_Voltage+0x3d8>
 80038b4:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <Constant_Voltage+0x474>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4951      	ldr	r1, [pc, #324]	; (8003a00 <Constant_Voltage+0x49c>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fc26 	bl	800110c <__aeabi_fcmple>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03a      	beq.n	800393c <Constant_Voltage+0x3d8>
		{ ePS=(-(e-3)/3)+1;
 80038c6:	4b44      	ldr	r3, [pc, #272]	; (80039d8 <Constant_Voltage+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4945      	ldr	r1, [pc, #276]	; (80039e0 <Constant_Voltage+0x47c>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd f96b 	bl	8000ba8 <__aeabi_fsub>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	4941      	ldr	r1, [pc, #260]	; (80039e0 <Constant_Voltage+0x47c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fb22 	bl	8000f24 <__aeabi_fdiv>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd f960 	bl	8000bac <__addsf3>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <Constant_Voltage+0x490>)
 80038f2:	601a      	str	r2, [r3, #0]
		   ePM=(e-3)/3;
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <Constant_Voltage+0x474>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4939      	ldr	r1, [pc, #228]	; (80039e0 <Constant_Voltage+0x47c>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd f954 	bl	8000ba8 <__aeabi_fsub>
 8003900:	4603      	mov	r3, r0
 8003902:	4937      	ldr	r1, [pc, #220]	; (80039e0 <Constant_Voltage+0x47c>)
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fb0d 	bl	8000f24 <__aeabi_fdiv>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <Constant_Voltage+0x48c>)
 8003910:	601a      	str	r2, [r3, #0]
		   eNB=eNM=eNS=eZ=ePB=0;
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <Constant_Voltage+0x488>)
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <Constant_Voltage+0x488>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <Constant_Voltage+0x484>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <Constant_Voltage+0x484>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <Constant_Voltage+0x480>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <Constant_Voltage+0x480>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <Constant_Voltage+0x494>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <Constant_Voltage+0x494>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <Constant_Voltage+0x498>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e08a      	b.n	8003a52 <Constant_Voltage+0x4ee>
		}

		else if(e>=6&&e<=9)
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <Constant_Voltage+0x474>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	492f      	ldr	r1, [pc, #188]	; (8003a00 <Constant_Voltage+0x49c>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fbec 	bl	8001120 <__aeabi_fcmpge>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d05c      	beq.n	8003a08 <Constant_Voltage+0x4a4>
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <Constant_Voltage+0x474>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	492c      	ldr	r1, [pc, #176]	; (8003a04 <Constant_Voltage+0x4a0>)
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fbd9 	bl	800110c <__aeabi_fcmple>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d053      	beq.n	8003a08 <Constant_Voltage+0x4a4>
		{ ePM=(-(e-6)/3)+1;
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <Constant_Voltage+0x474>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4926      	ldr	r1, [pc, #152]	; (8003a00 <Constant_Voltage+0x49c>)
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd f91e 	bl	8000ba8 <__aeabi_fsub>
 800396c:	4603      	mov	r3, r0
 800396e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003972:	491b      	ldr	r1, [pc, #108]	; (80039e0 <Constant_Voltage+0x47c>)
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fad5 	bl	8000f24 <__aeabi_fdiv>
 800397a:	4603      	mov	r3, r0
 800397c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd f913 	bl	8000bac <__addsf3>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <Constant_Voltage+0x48c>)
 800398c:	601a      	str	r2, [r3, #0]
		   ePB=(e-6)/3;
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <Constant_Voltage+0x474>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	491b      	ldr	r1, [pc, #108]	; (8003a00 <Constant_Voltage+0x49c>)
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd f907 	bl	8000ba8 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	4910      	ldr	r1, [pc, #64]	; (80039e0 <Constant_Voltage+0x47c>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fac0 	bl	8000f24 <__aeabi_fdiv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <Constant_Voltage+0x488>)
 80039aa:	601a      	str	r2, [r3, #0]
		   eNB=eNM=eNS=eZ=ePS=0;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <Constant_Voltage+0x490>)
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <Constant_Voltage+0x490>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <Constant_Voltage+0x484>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <Constant_Voltage+0x484>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <Constant_Voltage+0x480>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <Constant_Voltage+0x480>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <Constant_Voltage+0x494>)
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <Constant_Voltage+0x494>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <Constant_Voltage+0x498>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e03d      	b.n	8003a52 <Constant_Voltage+0x4ee>
 80039d6:	bf00      	nop
 80039d8:	200012d4 	.word	0x200012d4
 80039dc:	c0400000 	.word	0xc0400000
 80039e0:	40400000 	.word	0x40400000
 80039e4:	200006d4 	.word	0x200006d4
 80039e8:	20001330 	.word	0x20001330
 80039ec:	20000cbc 	.word	0x20000cbc
 80039f0:	20000d9c 	.word	0x20000d9c
 80039f4:	20000d00 	.word	0x20000d00
 80039f8:	20001318 	.word	0x20001318
 80039fc:	200012dc 	.word	0x200012dc
 8003a00:	40c00000 	.word	0x40c00000
 8003a04:	41100000 	.word	0x41100000
		}

		else if(e>=9)
 8003a08:	4b71      	ldr	r3, [pc, #452]	; (8003bd0 <Constant_Voltage+0x66c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4971      	ldr	r1, [pc, #452]	; (8003bd4 <Constant_Voltage+0x670>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fb86 	bl	8001120 <__aeabi_fcmpge>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <Constant_Voltage+0x4ee>
		{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <Constant_Voltage+0x674>)
 8003a1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <Constant_Voltage+0x678>)
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <Constant_Voltage+0x678>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <Constant_Voltage+0x67c>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b6b      	ldr	r3, [pc, #428]	; (8003be0 <Constant_Voltage+0x67c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6b      	ldr	r2, [pc, #428]	; (8003be4 <Constant_Voltage+0x680>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <Constant_Voltage+0x680>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <Constant_Voltage+0x684>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b69      	ldr	r3, [pc, #420]	; (8003be8 <Constant_Voltage+0x684>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a69      	ldr	r2, [pc, #420]	; (8003bec <Constant_Voltage+0x688>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b68      	ldr	r3, [pc, #416]	; (8003bec <Constant_Voltage+0x688>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <Constant_Voltage+0x68c>)
 8003a50:	6013      	str	r3, [r2, #0]

		/////////////////////fuzzifikasi delta error //////////////
		if(d<=-9)
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <Constant_Voltage+0x690>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4968      	ldr	r1, [pc, #416]	; (8003bf8 <Constant_Voltage+0x694>)
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd fb57 	bl	800110c <__aeabi_fcmple>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <Constant_Voltage+0x538>
		{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8003a64:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <Constant_Voltage+0x698>)
 8003a66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <Constant_Voltage+0x69c>)
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <Constant_Voltage+0x69c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a61      	ldr	r2, [pc, #388]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a60      	ldr	r2, [pc, #384]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b5f      	ldr	r3, [pc, #380]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5e      	ldr	r2, [pc, #376]	; (8003c14 <Constant_Voltage+0x6b0>)
 8003a9a:	6013      	str	r3, [r2, #0]

		if(d>=-9&&d<=-6)
 8003a9c:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <Constant_Voltage+0x690>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4955      	ldr	r1, [pc, #340]	; (8003bf8 <Constant_Voltage+0x694>)
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fb3c 	bl	8001120 <__aeabi_fcmpge>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d043      	beq.n	8003b36 <Constant_Voltage+0x5d2>
 8003aae:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <Constant_Voltage+0x690>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4959      	ldr	r1, [pc, #356]	; (8003c18 <Constant_Voltage+0x6b4>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fb29 	bl	800110c <__aeabi_fcmple>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03a      	beq.n	8003b36 <Constant_Voltage+0x5d2>
		{ dNB=(-(d+9)/3)+1;
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <Constant_Voltage+0x690>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4943      	ldr	r1, [pc, #268]	; (8003bd4 <Constant_Voltage+0x670>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f870 	bl	8000bac <__addsf3>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ad2:	4952      	ldr	r1, [pc, #328]	; (8003c1c <Constant_Voltage+0x6b8>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fa25 	bl	8000f24 <__aeabi_fdiv>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f863 	bl	8000bac <__addsf3>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <Constant_Voltage+0x698>)
 8003aec:	601a      	str	r2, [r3, #0]
		   dNM=(d+9)/3;
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <Constant_Voltage+0x690>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4938      	ldr	r1, [pc, #224]	; (8003bd4 <Constant_Voltage+0x670>)
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f859 	bl	8000bac <__addsf3>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4947      	ldr	r1, [pc, #284]	; (8003c1c <Constant_Voltage+0x6b8>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fa10 	bl	8000f24 <__aeabi_fdiv>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <Constant_Voltage+0x6b0>)
 8003b0a:	601a      	str	r2, [r3, #0]
		   dNS=dZ=dPS=dPM=dPB=0;
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <Constant_Voltage+0x69c>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <Constant_Voltage+0x69c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a39      	ldr	r2, [pc, #228]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a37      	ldr	r2, [pc, #220]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e1df      	b.n	8003ef6 <Constant_Voltage+0x992>
		}

		else if(d>=-6&&d<=-3)
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4937      	ldr	r1, [pc, #220]	; (8003c18 <Constant_Voltage+0x6b4>)
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd faef 	bl	8001120 <__aeabi_fcmpge>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d06f      	beq.n	8003c28 <Constant_Voltage+0x6c4>
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4934      	ldr	r1, [pc, #208]	; (8003c20 <Constant_Voltage+0x6bc>)
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fadc 	bl	800110c <__aeabi_fcmple>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d066      	beq.n	8003c28 <Constant_Voltage+0x6c4>
		{ dNM=(-(d+6)/3)+1;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4931      	ldr	r1, [pc, #196]	; (8003c24 <Constant_Voltage+0x6c0>)
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd f823 	bl	8000bac <__addsf3>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b6c:	492b      	ldr	r1, [pc, #172]	; (8003c1c <Constant_Voltage+0x6b8>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd f9d8 	bl	8000f24 <__aeabi_fdiv>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f816 	bl	8000bac <__addsf3>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <Constant_Voltage+0x6b0>)
 8003b86:	601a      	str	r2, [r3, #0]
		   dNS=(d+6)/3;
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4925      	ldr	r1, [pc, #148]	; (8003c24 <Constant_Voltage+0x6c0>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f80c 	bl	8000bac <__addsf3>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4921      	ldr	r1, [pc, #132]	; (8003c1c <Constant_Voltage+0x6b8>)
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd f9c3 	bl	8000f24 <__aeabi_fdiv>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003ba4:	601a      	str	r2, [r3, #0]
		   dNB=dZ=dPS=dPM=dPB=0;
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <Constant_Voltage+0x69c>)
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <Constant_Voltage+0x69c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <Constant_Voltage+0x698>)
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e192      	b.n	8003ef6 <Constant_Voltage+0x992>
 8003bd0:	200012d4 	.word	0x200012d4
 8003bd4:	41100000 	.word	0x41100000
 8003bd8:	20000cbc 	.word	0x20000cbc
 8003bdc:	20000d9c 	.word	0x20000d9c
 8003be0:	20000d00 	.word	0x20000d00
 8003be4:	20001330 	.word	0x20001330
 8003be8:	200006d4 	.word	0x200006d4
 8003bec:	20001318 	.word	0x20001318
 8003bf0:	200012dc 	.word	0x200012dc
 8003bf4:	20000d8c 	.word	0x20000d8c
 8003bf8:	c1100000 	.word	0xc1100000
 8003bfc:	20000714 	.word	0x20000714
 8003c00:	20000da4 	.word	0x20000da4
 8003c04:	20000728 	.word	0x20000728
 8003c08:	200012f0 	.word	0x200012f0
 8003c0c:	2000130c 	.word	0x2000130c
 8003c10:	20000940 	.word	0x20000940
 8003c14:	20000cfc 	.word	0x20000cfc
 8003c18:	c0c00000 	.word	0xc0c00000
 8003c1c:	40400000 	.word	0x40400000
 8003c20:	c0400000 	.word	0xc0400000
 8003c24:	40c00000 	.word	0x40c00000
		}

		else if(d>=-3&&d<=0)
 8003c28:	4b94      	ldr	r3, [pc, #592]	; (8003e7c <Constant_Voltage+0x918>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4994      	ldr	r1, [pc, #592]	; (8003e80 <Constant_Voltage+0x91c>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fd fa76 	bl	8001120 <__aeabi_fcmpge>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d044      	beq.n	8003cc4 <Constant_Voltage+0x760>
 8003c3a:	4b90      	ldr	r3, [pc, #576]	; (8003e7c <Constant_Voltage+0x918>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f04f 0100 	mov.w	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fd fa62 	bl	800110c <__aeabi_fcmple>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d03a      	beq.n	8003cc4 <Constant_Voltage+0x760>
		{ dNS=(-(d+3)/3)+1;
 8003c4e:	4b8b      	ldr	r3, [pc, #556]	; (8003e7c <Constant_Voltage+0x918>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	498c      	ldr	r1, [pc, #560]	; (8003e84 <Constant_Voltage+0x920>)
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc ffa9 	bl	8000bac <__addsf3>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c60:	4988      	ldr	r1, [pc, #544]	; (8003e84 <Constant_Voltage+0x920>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd f95e 	bl	8000f24 <__aeabi_fdiv>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fc ff9c 	bl	8000bac <__addsf3>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4b83      	ldr	r3, [pc, #524]	; (8003e88 <Constant_Voltage+0x924>)
 8003c7a:	601a      	str	r2, [r3, #0]
		   dZ=(d+3)/3;
 8003c7c:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <Constant_Voltage+0x918>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4980      	ldr	r1, [pc, #512]	; (8003e84 <Constant_Voltage+0x920>)
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fc ff92 	bl	8000bac <__addsf3>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	497e      	ldr	r1, [pc, #504]	; (8003e84 <Constant_Voltage+0x920>)
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fd f949 	bl	8000f24 <__aeabi_fdiv>
 8003c92:	4603      	mov	r3, r0
 8003c94:	461a      	mov	r2, r3
 8003c96:	4b7d      	ldr	r3, [pc, #500]	; (8003e8c <Constant_Voltage+0x928>)
 8003c98:	601a      	str	r2, [r3, #0]
		   dNB=dNM=dPS=dPM=dPB=0;
 8003c9a:	4b7d      	ldr	r3, [pc, #500]	; (8003e90 <Constant_Voltage+0x92c>)
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	4b7b      	ldr	r3, [pc, #492]	; (8003e90 <Constant_Voltage+0x92c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7b      	ldr	r2, [pc, #492]	; (8003e94 <Constant_Voltage+0x930>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b7a      	ldr	r3, [pc, #488]	; (8003e94 <Constant_Voltage+0x930>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a7a      	ldr	r2, [pc, #488]	; (8003e98 <Constant_Voltage+0x934>)
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b79      	ldr	r3, [pc, #484]	; (8003e98 <Constant_Voltage+0x934>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a79      	ldr	r2, [pc, #484]	; (8003e9c <Constant_Voltage+0x938>)
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b78      	ldr	r3, [pc, #480]	; (8003e9c <Constant_Voltage+0x938>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a78      	ldr	r2, [pc, #480]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	e118      	b.n	8003ef6 <Constant_Voltage+0x992>
		}

		else if(d>=0&&d<=3)
 8003cc4:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <Constant_Voltage+0x918>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fd fa27 	bl	8001120 <__aeabi_fcmpge>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d037      	beq.n	8003d48 <Constant_Voltage+0x7e4>
 8003cd8:	4b68      	ldr	r3, [pc, #416]	; (8003e7c <Constant_Voltage+0x918>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4969      	ldr	r1, [pc, #420]	; (8003e84 <Constant_Voltage+0x920>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fd fa14 	bl	800110c <__aeabi_fcmple>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d02e      	beq.n	8003d48 <Constant_Voltage+0x7e4>
		{ dZ=-(d/3)+1;
 8003cea:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <Constant_Voltage+0x918>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4965      	ldr	r1, [pc, #404]	; (8003e84 <Constant_Voltage+0x920>)
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fd f917 	bl	8000f24 <__aeabi_fdiv>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003cfe:	f7fc ff53 	bl	8000ba8 <__aeabi_fsub>
 8003d02:	4603      	mov	r3, r0
 8003d04:	461a      	mov	r2, r3
 8003d06:	4b61      	ldr	r3, [pc, #388]	; (8003e8c <Constant_Voltage+0x928>)
 8003d08:	601a      	str	r2, [r3, #0]
		   dPS=d/3;
 8003d0a:	4b5c      	ldr	r3, [pc, #368]	; (8003e7c <Constant_Voltage+0x918>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	495d      	ldr	r1, [pc, #372]	; (8003e84 <Constant_Voltage+0x920>)
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd f907 	bl	8000f24 <__aeabi_fdiv>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b5f      	ldr	r3, [pc, #380]	; (8003e98 <Constant_Voltage+0x934>)
 8003d1c:	601a      	str	r2, [r3, #0]
		   dNB=dNM=dNS=dPM=dPB=0;
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <Constant_Voltage+0x92c>)
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <Constant_Voltage+0x92c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <Constant_Voltage+0x930>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b59      	ldr	r3, [pc, #356]	; (8003e94 <Constant_Voltage+0x930>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a55      	ldr	r2, [pc, #340]	; (8003e88 <Constant_Voltage+0x924>)
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b54      	ldr	r3, [pc, #336]	; (8003e88 <Constant_Voltage+0x924>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <Constant_Voltage+0x938>)
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b57      	ldr	r3, [pc, #348]	; (8003e9c <Constant_Voltage+0x938>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a57      	ldr	r2, [pc, #348]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e0d6      	b.n	8003ef6 <Constant_Voltage+0x992>
		}

		else if(d>=3&&d<=6)
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <Constant_Voltage+0x918>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	494d      	ldr	r1, [pc, #308]	; (8003e84 <Constant_Voltage+0x920>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fd f9e6 	bl	8001120 <__aeabi_fcmpge>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d043      	beq.n	8003de2 <Constant_Voltage+0x87e>
 8003d5a:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <Constant_Voltage+0x918>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4951      	ldr	r1, [pc, #324]	; (8003ea4 <Constant_Voltage+0x940>)
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd f9d3 	bl	800110c <__aeabi_fcmple>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03a      	beq.n	8003de2 <Constant_Voltage+0x87e>
		{ dPS=(-(d-3)/3)+1;
 8003d6c:	4b43      	ldr	r3, [pc, #268]	; (8003e7c <Constant_Voltage+0x918>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4944      	ldr	r1, [pc, #272]	; (8003e84 <Constant_Voltage+0x920>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fc ff18 	bl	8000ba8 <__aeabi_fsub>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d7e:	4941      	ldr	r1, [pc, #260]	; (8003e84 <Constant_Voltage+0x920>)
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fd f8cf 	bl	8000f24 <__aeabi_fdiv>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc ff0d 	bl	8000bac <__addsf3>
 8003d92:	4603      	mov	r3, r0
 8003d94:	461a      	mov	r2, r3
 8003d96:	4b40      	ldr	r3, [pc, #256]	; (8003e98 <Constant_Voltage+0x934>)
 8003d98:	601a      	str	r2, [r3, #0]
		   dPM=(d-3)/3;
 8003d9a:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <Constant_Voltage+0x918>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4939      	ldr	r1, [pc, #228]	; (8003e84 <Constant_Voltage+0x920>)
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7fc ff01 	bl	8000ba8 <__aeabi_fsub>
 8003da6:	4603      	mov	r3, r0
 8003da8:	4936      	ldr	r1, [pc, #216]	; (8003e84 <Constant_Voltage+0x920>)
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fd f8ba 	bl	8000f24 <__aeabi_fdiv>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b37      	ldr	r3, [pc, #220]	; (8003e94 <Constant_Voltage+0x930>)
 8003db6:	601a      	str	r2, [r3, #0]
		   dNB=dNM=dNS=dZ=dPB=0;
 8003db8:	4b35      	ldr	r3, [pc, #212]	; (8003e90 <Constant_Voltage+0x92c>)
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <Constant_Voltage+0x92c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	; (8003e8c <Constant_Voltage+0x928>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b30      	ldr	r3, [pc, #192]	; (8003e8c <Constant_Voltage+0x928>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2e      	ldr	r2, [pc, #184]	; (8003e88 <Constant_Voltage+0x924>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <Constant_Voltage+0x924>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <Constant_Voltage+0x938>)
 8003dd6:	6013      	str	r3, [r2, #0]
 8003dd8:	4b30      	ldr	r3, [pc, #192]	; (8003e9c <Constant_Voltage+0x938>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a30      	ldr	r2, [pc, #192]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e089      	b.n	8003ef6 <Constant_Voltage+0x992>
		}

		else if(d>=6&&d<=9)
 8003de2:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <Constant_Voltage+0x918>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	492f      	ldr	r1, [pc, #188]	; (8003ea4 <Constant_Voltage+0x940>)
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd f999 	bl	8001120 <__aeabi_fcmpge>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d05b      	beq.n	8003eac <Constant_Voltage+0x948>
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <Constant_Voltage+0x918>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	492b      	ldr	r1, [pc, #172]	; (8003ea8 <Constant_Voltage+0x944>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7fd f986 	bl	800110c <__aeabi_fcmple>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d052      	beq.n	8003eac <Constant_Voltage+0x948>
		{ dPM=(-(d-6)/3)+1;
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <Constant_Voltage+0x918>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4926      	ldr	r1, [pc, #152]	; (8003ea4 <Constant_Voltage+0x940>)
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc fecb 	bl	8000ba8 <__aeabi_fsub>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e18:	491a      	ldr	r1, [pc, #104]	; (8003e84 <Constant_Voltage+0x920>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd f882 	bl	8000f24 <__aeabi_fdiv>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fec0 	bl	8000bac <__addsf3>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	4b18      	ldr	r3, [pc, #96]	; (8003e94 <Constant_Voltage+0x930>)
 8003e32:	601a      	str	r2, [r3, #0]
		   dPB=(d-6)/3;
 8003e34:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <Constant_Voltage+0x918>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	491a      	ldr	r1, [pc, #104]	; (8003ea4 <Constant_Voltage+0x940>)
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc feb4 	bl	8000ba8 <__aeabi_fsub>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4910      	ldr	r1, [pc, #64]	; (8003e84 <Constant_Voltage+0x920>)
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fd f86d 	bl	8000f24 <__aeabi_fdiv>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <Constant_Voltage+0x92c>)
 8003e50:	601a      	str	r2, [r3, #0]
		   dNB=dNM=dNS=dZ=dPS=0;
 8003e52:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <Constant_Voltage+0x934>)
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <Constant_Voltage+0x934>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a0b      	ldr	r2, [pc, #44]	; (8003e8c <Constant_Voltage+0x928>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <Constant_Voltage+0x928>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a08      	ldr	r2, [pc, #32]	; (8003e88 <Constant_Voltage+0x924>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b07      	ldr	r3, [pc, #28]	; (8003e88 <Constant_Voltage+0x924>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a0b      	ldr	r2, [pc, #44]	; (8003e9c <Constant_Voltage+0x938>)
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <Constant_Voltage+0x938>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a0a      	ldr	r2, [pc, #40]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e03c      	b.n	8003ef6 <Constant_Voltage+0x992>
 8003e7c:	20000d8c 	.word	0x20000d8c
 8003e80:	c0400000 	.word	0xc0400000
 8003e84:	40400000 	.word	0x40400000
 8003e88:	20000940 	.word	0x20000940
 8003e8c:	2000130c 	.word	0x2000130c
 8003e90:	20000da4 	.word	0x20000da4
 8003e94:	20000728 	.word	0x20000728
 8003e98:	200012f0 	.word	0x200012f0
 8003e9c:	20000cfc 	.word	0x20000cfc
 8003ea0:	20000714 	.word	0x20000714
 8003ea4:	40c00000 	.word	0x40c00000
 8003ea8:	41100000 	.word	0x41100000
		}

		else if(d>=9)
 8003eac:	4b8e      	ldr	r3, [pc, #568]	; (80040e8 <Constant_Voltage+0xb84>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	498e      	ldr	r1, [pc, #568]	; (80040ec <Constant_Voltage+0xb88>)
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fd f934 	bl	8001120 <__aeabi_fcmpge>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01b      	beq.n	8003ef6 <Constant_Voltage+0x992>
		{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8003ebe:	4b8c      	ldr	r3, [pc, #560]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003ec0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	4b8b      	ldr	r3, [pc, #556]	; (80040f4 <Constant_Voltage+0xb90>)
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4b89      	ldr	r3, [pc, #548]	; (80040f4 <Constant_Voltage+0xb90>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a89      	ldr	r2, [pc, #548]	; (80040f8 <Constant_Voltage+0xb94>)
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b88      	ldr	r3, [pc, #544]	; (80040f8 <Constant_Voltage+0xb94>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a88      	ldr	r2, [pc, #544]	; (80040fc <Constant_Voltage+0xb98>)
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b87      	ldr	r3, [pc, #540]	; (80040fc <Constant_Voltage+0xb98>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a87      	ldr	r2, [pc, #540]	; (8004100 <Constant_Voltage+0xb9c>)
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	4b86      	ldr	r3, [pc, #536]	; (8004100 <Constant_Voltage+0xb9c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a86      	ldr	r2, [pc, #536]	; (8004104 <Constant_Voltage+0xba0>)
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	4b85      	ldr	r3, [pc, #532]	; (8004104 <Constant_Voltage+0xba0>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a85      	ldr	r2, [pc, #532]	; (8004108 <Constant_Voltage+0xba4>)
 8003ef4:	6013      	str	r3, [r2, #0]

		/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8003ef6:	4b7e      	ldr	r3, [pc, #504]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a84      	ldr	r2, [pc, #528]	; (800410c <Constant_Voltage+0xba8>)
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b84      	ldr	r3, [pc, #528]	; (8004110 <Constant_Voltage+0xbac>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b7b      	ldr	r3, [pc, #492]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4619      	mov	r1, r3
 8003f08:	4610      	mov	r0, r2
 8003f0a:	f7fd f8f5 	bl	80010f8 <__aeabi_fcmplt>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <Constant_Voltage+0x9b8>
 8003f14:	4b7e      	ldr	r3, [pc, #504]	; (8004110 <Constant_Voltage+0xbac>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a7c      	ldr	r2, [pc, #496]	; (800410c <Constant_Voltage+0xba8>)
 8003f1a:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8003f1c:	4b74      	ldr	r3, [pc, #464]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a7c      	ldr	r2, [pc, #496]	; (8004114 <Constant_Voltage+0xbb0>)
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b7c      	ldr	r3, [pc, #496]	; (8004118 <Constant_Voltage+0xbb4>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b71      	ldr	r3, [pc, #452]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fd f8e2 	bl	80010f8 <__aeabi_fcmplt>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <Constant_Voltage+0x9de>
 8003f3a:	4b77      	ldr	r3, [pc, #476]	; (8004118 <Constant_Voltage+0xbb4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a75      	ldr	r2, [pc, #468]	; (8004114 <Constant_Voltage+0xbb0>)
 8003f40:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8003f42:	4b6b      	ldr	r3, [pc, #428]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a75      	ldr	r2, [pc, #468]	; (800411c <Constant_Voltage+0xbb8>)
 8003f48:	6013      	str	r3, [r2, #0]
 8003f4a:	4b75      	ldr	r3, [pc, #468]	; (8004120 <Constant_Voltage+0xbbc>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	4610      	mov	r0, r2
 8003f56:	f7fd f8cf 	bl	80010f8 <__aeabi_fcmplt>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <Constant_Voltage+0xa04>
 8003f60:	4b6f      	ldr	r3, [pc, #444]	; (8004120 <Constant_Voltage+0xbbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a6d      	ldr	r2, [pc, #436]	; (800411c <Constant_Voltage+0xbb8>)
 8003f66:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8003f68:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a6d      	ldr	r2, [pc, #436]	; (8004124 <Constant_Voltage+0xbc0>)
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <Constant_Voltage+0xbc4>)
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	f7fd f8bc 	bl	80010f8 <__aeabi_fcmplt>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <Constant_Voltage+0xa2a>
 8003f86:	4b68      	ldr	r3, [pc, #416]	; (8004128 <Constant_Voltage+0xbc4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a66      	ldr	r2, [pc, #408]	; (8004124 <Constant_Voltage+0xbc0>)
 8003f8c:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 8003f8e:	4b58      	ldr	r3, [pc, #352]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a66      	ldr	r2, [pc, #408]	; (800412c <Constant_Voltage+0xbc8>)
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b66      	ldr	r3, [pc, #408]	; (8004130 <Constant_Voltage+0xbcc>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7fd f8a9 	bl	80010f8 <__aeabi_fcmplt>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <Constant_Voltage+0xa50>
 8003fac:	4b60      	ldr	r3, [pc, #384]	; (8004130 <Constant_Voltage+0xbcc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a5e      	ldr	r2, [pc, #376]	; (800412c <Constant_Voltage+0xbc8>)
 8003fb2:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8003fb4:	4b4e      	ldr	r3, [pc, #312]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a5e      	ldr	r2, [pc, #376]	; (8004134 <Constant_Voltage+0xbd0>)
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4b5e      	ldr	r3, [pc, #376]	; (8004138 <Constant_Voltage+0xbd4>)
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	4b4b      	ldr	r3, [pc, #300]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f7fd f896 	bl	80010f8 <__aeabi_fcmplt>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <Constant_Voltage+0xa76>
 8003fd2:	4b59      	ldr	r3, [pc, #356]	; (8004138 <Constant_Voltage+0xbd4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a57      	ldr	r2, [pc, #348]	; (8004134 <Constant_Voltage+0xbd0>)
 8003fd8:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 8003fda:	4b45      	ldr	r3, [pc, #276]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a57      	ldr	r2, [pc, #348]	; (800413c <Constant_Voltage+0xbd8>)
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	4b57      	ldr	r3, [pc, #348]	; (8004140 <Constant_Voltage+0xbdc>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	4b42      	ldr	r3, [pc, #264]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4619      	mov	r1, r3
 8003fec:	4610      	mov	r0, r2
 8003fee:	f7fd f883 	bl	80010f8 <__aeabi_fcmplt>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <Constant_Voltage+0xa9c>
 8003ff8:	4b51      	ldr	r3, [pc, #324]	; (8004140 <Constant_Voltage+0xbdc>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a4f      	ldr	r2, [pc, #316]	; (800413c <Constant_Voltage+0xbd8>)
 8003ffe:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8004000:	4b3c      	ldr	r3, [pc, #240]	; (80040f4 <Constant_Voltage+0xb90>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a4f      	ldr	r2, [pc, #316]	; (8004144 <Constant_Voltage+0xbe0>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	4b41      	ldr	r3, [pc, #260]	; (8004110 <Constant_Voltage+0xbac>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <Constant_Voltage+0xb90>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4619      	mov	r1, r3
 8004012:	4610      	mov	r0, r2
 8004014:	f7fd f870 	bl	80010f8 <__aeabi_fcmplt>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <Constant_Voltage+0xac2>
 800401e:	4b3c      	ldr	r3, [pc, #240]	; (8004110 <Constant_Voltage+0xbac>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a48      	ldr	r2, [pc, #288]	; (8004144 <Constant_Voltage+0xbe0>)
 8004024:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8004026:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <Constant_Voltage+0xb90>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a47      	ldr	r2, [pc, #284]	; (8004148 <Constant_Voltage+0xbe4>)
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b3a      	ldr	r3, [pc, #232]	; (8004118 <Constant_Voltage+0xbb4>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b30      	ldr	r3, [pc, #192]	; (80040f4 <Constant_Voltage+0xb90>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4619      	mov	r1, r3
 8004038:	4610      	mov	r0, r2
 800403a:	f7fd f85d 	bl	80010f8 <__aeabi_fcmplt>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d003      	beq.n	800404c <Constant_Voltage+0xae8>
 8004044:	4b34      	ldr	r3, [pc, #208]	; (8004118 <Constant_Voltage+0xbb4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3f      	ldr	r2, [pc, #252]	; (8004148 <Constant_Voltage+0xbe4>)
 800404a:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 800404c:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <Constant_Voltage+0xb90>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a3e      	ldr	r2, [pc, #248]	; (800414c <Constant_Voltage+0xbe8>)
 8004052:	6013      	str	r3, [r2, #0]
 8004054:	4b32      	ldr	r3, [pc, #200]	; (8004120 <Constant_Voltage+0xbbc>)
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <Constant_Voltage+0xb90>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f7fd f84a 	bl	80010f8 <__aeabi_fcmplt>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <Constant_Voltage+0xb0e>
 800406a:	4b2d      	ldr	r3, [pc, #180]	; (8004120 <Constant_Voltage+0xbbc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a37      	ldr	r2, [pc, #220]	; (800414c <Constant_Voltage+0xbe8>)
 8004070:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <Constant_Voltage+0xb90>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a36      	ldr	r2, [pc, #216]	; (8004150 <Constant_Voltage+0xbec>)
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b2b      	ldr	r3, [pc, #172]	; (8004128 <Constant_Voltage+0xbc4>)
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <Constant_Voltage+0xb90>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4619      	mov	r1, r3
 8004084:	4610      	mov	r0, r2
 8004086:	f7fd f837 	bl	80010f8 <__aeabi_fcmplt>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <Constant_Voltage+0xb34>
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <Constant_Voltage+0xbc4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a2e      	ldr	r2, [pc, #184]	; (8004150 <Constant_Voltage+0xbec>)
 8004096:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <Constant_Voltage+0xb90>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <Constant_Voltage+0xbf0>)
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <Constant_Voltage+0xbcc>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <Constant_Voltage+0xb90>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f7fd f824 	bl	80010f8 <__aeabi_fcmplt>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <Constant_Voltage+0xb5a>
 80040b6:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <Constant_Voltage+0xbcc>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a26      	ldr	r2, [pc, #152]	; (8004154 <Constant_Voltage+0xbf0>)
 80040bc:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <Constant_Voltage+0xb90>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a25      	ldr	r2, [pc, #148]	; (8004158 <Constant_Voltage+0xbf4>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b1c      	ldr	r3, [pc, #112]	; (8004138 <Constant_Voltage+0xbd4>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <Constant_Voltage+0xb90>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4619      	mov	r1, r3
 80040d0:	4610      	mov	r0, r2
 80040d2:	f7fd f811 	bl	80010f8 <__aeabi_fcmplt>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d03f      	beq.n	800415c <Constant_Voltage+0xbf8>
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <Constant_Voltage+0xbd4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <Constant_Voltage+0xbf4>)
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e03a      	b.n	800415c <Constant_Voltage+0xbf8>
 80040e6:	bf00      	nop
 80040e8:	20000d8c 	.word	0x20000d8c
 80040ec:	41100000 	.word	0x41100000
 80040f0:	20000da4 	.word	0x20000da4
 80040f4:	20000728 	.word	0x20000728
 80040f8:	200012f0 	.word	0x200012f0
 80040fc:	2000130c 	.word	0x2000130c
 8004100:	20000940 	.word	0x20000940
 8004104:	20000cfc 	.word	0x20000cfc
 8004108:	20000714 	.word	0x20000714
 800410c:	20001334 	.word	0x20001334
 8004110:	200012dc 	.word	0x200012dc
 8004114:	20000f68 	.word	0x20000f68
 8004118:	20001318 	.word	0x20001318
 800411c:	20000700 	.word	0x20000700
 8004120:	200006d4 	.word	0x200006d4
 8004124:	20000910 	.word	0x20000910
 8004128:	20001330 	.word	0x20001330
 800412c:	20001320 	.word	0x20001320
 8004130:	20000d00 	.word	0x20000d00
 8004134:	200008fc 	.word	0x200008fc
 8004138:	20000d9c 	.word	0x20000d9c
 800413c:	20000d78 	.word	0x20000d78
 8004140:	20000cbc 	.word	0x20000cbc
 8004144:	20000cd4 	.word	0x20000cd4
 8004148:	2000073c 	.word	0x2000073c
 800414c:	20000cb0 	.word	0x20000cb0
 8004150:	20000f58 	.word	0x20000f58
 8004154:	200012fc 	.word	0x200012fc
 8004158:	20001338 	.word	0x20001338
	r14=dPM; if(ePB<dPM) r14=ePB;		//r14=max(dPM,ePB);
 800415c:	4b8d      	ldr	r3, [pc, #564]	; (8004394 <Constant_Voltage+0xe30>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a8d      	ldr	r2, [pc, #564]	; (8004398 <Constant_Voltage+0xe34>)
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	4b8d      	ldr	r3, [pc, #564]	; (800439c <Constant_Voltage+0xe38>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4b8a      	ldr	r3, [pc, #552]	; (8004394 <Constant_Voltage+0xe30>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4619      	mov	r1, r3
 800416e:	4610      	mov	r0, r2
 8004170:	f7fc ffc2 	bl	80010f8 <__aeabi_fcmplt>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <Constant_Voltage+0xc1e>
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <Constant_Voltage+0xe38>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a86      	ldr	r2, [pc, #536]	; (8004398 <Constant_Voltage+0xe34>)
 8004180:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 8004182:	4b87      	ldr	r3, [pc, #540]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a87      	ldr	r2, [pc, #540]	; (80043a4 <Constant_Voltage+0xe40>)
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b87      	ldr	r3, [pc, #540]	; (80043a8 <Constant_Voltage+0xe44>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b84      	ldr	r3, [pc, #528]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4619      	mov	r1, r3
 8004194:	4610      	mov	r0, r2
 8004196:	f7fc ffaf 	bl	80010f8 <__aeabi_fcmplt>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <Constant_Voltage+0xc44>
 80041a0:	4b81      	ldr	r3, [pc, #516]	; (80043a8 <Constant_Voltage+0xe44>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a7f      	ldr	r2, [pc, #508]	; (80043a4 <Constant_Voltage+0xe40>)
 80041a6:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 80041a8:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <Constant_Voltage+0xe3c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <Constant_Voltage+0xe48>)
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b7f      	ldr	r3, [pc, #508]	; (80043b0 <Constant_Voltage+0xe4c>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <Constant_Voltage+0xe3c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f7fc ff9c 	bl	80010f8 <__aeabi_fcmplt>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <Constant_Voltage+0xc6a>
 80041c6:	4b7a      	ldr	r3, [pc, #488]	; (80043b0 <Constant_Voltage+0xe4c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a78      	ldr	r2, [pc, #480]	; (80043ac <Constant_Voltage+0xe48>)
 80041cc:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 80041ce:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <Constant_Voltage+0xe3c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a78      	ldr	r2, [pc, #480]	; (80043b4 <Constant_Voltage+0xe50>)
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b78      	ldr	r3, [pc, #480]	; (80043b8 <Constant_Voltage+0xe54>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <Constant_Voltage+0xe3c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4619      	mov	r1, r3
 80041e0:	4610      	mov	r0, r2
 80041e2:	f7fc ff89 	bl	80010f8 <__aeabi_fcmplt>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <Constant_Voltage+0xc90>
 80041ec:	4b72      	ldr	r3, [pc, #456]	; (80043b8 <Constant_Voltage+0xe54>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a70      	ldr	r2, [pc, #448]	; (80043b4 <Constant_Voltage+0xe50>)
 80041f2:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <Constant_Voltage+0xe3c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a70      	ldr	r2, [pc, #448]	; (80043bc <Constant_Voltage+0xe58>)
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	4b70      	ldr	r3, [pc, #448]	; (80043c0 <Constant_Voltage+0xe5c>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b67      	ldr	r3, [pc, #412]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	4610      	mov	r0, r2
 8004208:	f7fc ff76 	bl	80010f8 <__aeabi_fcmplt>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <Constant_Voltage+0xcb6>
 8004212:	4b6b      	ldr	r3, [pc, #428]	; (80043c0 <Constant_Voltage+0xe5c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a69      	ldr	r2, [pc, #420]	; (80043bc <Constant_Voltage+0xe58>)
 8004218:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 800421a:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <Constant_Voltage+0xe3c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a69      	ldr	r2, [pc, #420]	; (80043c4 <Constant_Voltage+0xe60>)
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <Constant_Voltage+0xe64>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fc ff63 	bl	80010f8 <__aeabi_fcmplt>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <Constant_Voltage+0xcdc>
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <Constant_Voltage+0xe64>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a61      	ldr	r2, [pc, #388]	; (80043c4 <Constant_Voltage+0xe60>)
 800423e:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 8004240:	4b57      	ldr	r3, [pc, #348]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a61      	ldr	r2, [pc, #388]	; (80043cc <Constant_Voltage+0xe68>)
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <Constant_Voltage+0xe6c>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	4b54      	ldr	r3, [pc, #336]	; (80043a0 <Constant_Voltage+0xe3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4619      	mov	r1, r3
 8004252:	4610      	mov	r0, r2
 8004254:	f7fc ff50 	bl	80010f8 <__aeabi_fcmplt>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <Constant_Voltage+0xd02>
 800425e:	4b5c      	ldr	r3, [pc, #368]	; (80043d0 <Constant_Voltage+0xe6c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a5a      	ldr	r2, [pc, #360]	; (80043cc <Constant_Voltage+0xe68>)
 8004264:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 8004266:	4b4e      	ldr	r3, [pc, #312]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <Constant_Voltage+0xe70>)
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	4b4b      	ldr	r3, [pc, #300]	; (800439c <Constant_Voltage+0xe38>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b4b      	ldr	r3, [pc, #300]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7fc ff3d 	bl	80010f8 <__aeabi_fcmplt>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <Constant_Voltage+0xd28>
 8004284:	4b45      	ldr	r3, [pc, #276]	; (800439c <Constant_Voltage+0xe38>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <Constant_Voltage+0xe70>)
 800428a:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 800428c:	4b52      	ldr	r3, [pc, #328]	; (80043d8 <Constant_Voltage+0xe74>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a52      	ldr	r2, [pc, #328]	; (80043dc <Constant_Voltage+0xe78>)
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	4b44      	ldr	r3, [pc, #272]	; (80043a8 <Constant_Voltage+0xe44>)
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <Constant_Voltage+0xe74>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7fc ff2a 	bl	80010f8 <__aeabi_fcmplt>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <Constant_Voltage+0xd4e>
 80042aa:	4b3f      	ldr	r3, [pc, #252]	; (80043a8 <Constant_Voltage+0xe44>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a4b      	ldr	r2, [pc, #300]	; (80043dc <Constant_Voltage+0xe78>)
 80042b0:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 80042b2:	4b49      	ldr	r3, [pc, #292]	; (80043d8 <Constant_Voltage+0xe74>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a4a      	ldr	r2, [pc, #296]	; (80043e0 <Constant_Voltage+0xe7c>)
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b3d      	ldr	r3, [pc, #244]	; (80043b0 <Constant_Voltage+0xe4c>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	4b46      	ldr	r3, [pc, #280]	; (80043d8 <Constant_Voltage+0xe74>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fc ff17 	bl	80010f8 <__aeabi_fcmplt>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <Constant_Voltage+0xd74>
 80042d0:	4b37      	ldr	r3, [pc, #220]	; (80043b0 <Constant_Voltage+0xe4c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a42      	ldr	r2, [pc, #264]	; (80043e0 <Constant_Voltage+0xe7c>)
 80042d6:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 80042d8:	4b3f      	ldr	r3, [pc, #252]	; (80043d8 <Constant_Voltage+0xe74>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a41      	ldr	r2, [pc, #260]	; (80043e4 <Constant_Voltage+0xe80>)
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4b35      	ldr	r3, [pc, #212]	; (80043b8 <Constant_Voltage+0xe54>)
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	4b3c      	ldr	r3, [pc, #240]	; (80043d8 <Constant_Voltage+0xe74>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4619      	mov	r1, r3
 80042ea:	4610      	mov	r0, r2
 80042ec:	f7fc ff04 	bl	80010f8 <__aeabi_fcmplt>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <Constant_Voltage+0xd9a>
 80042f6:	4b30      	ldr	r3, [pc, #192]	; (80043b8 <Constant_Voltage+0xe54>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3a      	ldr	r2, [pc, #232]	; (80043e4 <Constant_Voltage+0xe80>)
 80042fc:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 80042fe:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <Constant_Voltage+0xe74>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a39      	ldr	r2, [pc, #228]	; (80043e8 <Constant_Voltage+0xe84>)
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	4b2e      	ldr	r3, [pc, #184]	; (80043c0 <Constant_Voltage+0xe5c>)
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <Constant_Voltage+0xe74>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4619      	mov	r1, r3
 8004310:	4610      	mov	r0, r2
 8004312:	f7fc fef1 	bl	80010f8 <__aeabi_fcmplt>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <Constant_Voltage+0xdc0>
 800431c:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <Constant_Voltage+0xe5c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a31      	ldr	r2, [pc, #196]	; (80043e8 <Constant_Voltage+0xe84>)
 8004322:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 8004324:	4b2c      	ldr	r3, [pc, #176]	; (80043d8 <Constant_Voltage+0xe74>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a30      	ldr	r2, [pc, #192]	; (80043ec <Constant_Voltage+0xe88>)
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <Constant_Voltage+0xe64>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b29      	ldr	r3, [pc, #164]	; (80043d8 <Constant_Voltage+0xe74>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fc fede 	bl	80010f8 <__aeabi_fcmplt>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <Constant_Voltage+0xde6>
 8004342:	4b21      	ldr	r3, [pc, #132]	; (80043c8 <Constant_Voltage+0xe64>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a29      	ldr	r2, [pc, #164]	; (80043ec <Constant_Voltage+0xe88>)
 8004348:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <Constant_Voltage+0xe74>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <Constant_Voltage+0xe8c>)
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <Constant_Voltage+0xe6c>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	4b20      	ldr	r3, [pc, #128]	; (80043d8 <Constant_Voltage+0xe74>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f7fc fecb 	bl	80010f8 <__aeabi_fcmplt>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d003      	beq.n	8004370 <Constant_Voltage+0xe0c>
 8004368:	4b19      	ldr	r3, [pc, #100]	; (80043d0 <Constant_Voltage+0xe6c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a20      	ldr	r2, [pc, #128]	; (80043f0 <Constant_Voltage+0xe8c>)
 800436e:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 8004370:	4b19      	ldr	r3, [pc, #100]	; (80043d8 <Constant_Voltage+0xe74>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1f      	ldr	r2, [pc, #124]	; (80043f4 <Constant_Voltage+0xe90>)
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b08      	ldr	r3, [pc, #32]	; (800439c <Constant_Voltage+0xe38>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b16      	ldr	r3, [pc, #88]	; (80043d8 <Constant_Voltage+0xe74>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4619      	mov	r1, r3
 8004382:	4610      	mov	r0, r2
 8004384:	f7fc feb8 	bl	80010f8 <__aeabi_fcmplt>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d036      	beq.n	80043fc <Constant_Voltage+0xe98>
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <Constant_Voltage+0xe38>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	e031      	b.n	80043f8 <Constant_Voltage+0xe94>
 8004394:	20000728 	.word	0x20000728
 8004398:	20000684 	.word	0x20000684
 800439c:	20000cbc 	.word	0x20000cbc
 80043a0:	200012f0 	.word	0x200012f0
 80043a4:	20001300 	.word	0x20001300
 80043a8:	200012dc 	.word	0x200012dc
 80043ac:	20000d94 	.word	0x20000d94
 80043b0:	20001318 	.word	0x20001318
 80043b4:	200008f0 	.word	0x200008f0
 80043b8:	200006d4 	.word	0x200006d4
 80043bc:	20000d08 	.word	0x20000d08
 80043c0:	20001330 	.word	0x20001330
 80043c4:	200012f8 	.word	0x200012f8
 80043c8:	20000d00 	.word	0x20000d00
 80043cc:	20000ccc 	.word	0x20000ccc
 80043d0:	20000d9c 	.word	0x20000d9c
 80043d4:	20000904 	.word	0x20000904
 80043d8:	2000130c 	.word	0x2000130c
 80043dc:	20001128 	.word	0x20001128
 80043e0:	20001314 	.word	0x20001314
 80043e4:	2000132c 	.word	0x2000132c
 80043e8:	200006d0 	.word	0x200006d0
 80043ec:	200008e0 	.word	0x200008e0
 80043f0:	20000ce8 	.word	0x20000ce8
 80043f4:	2000069c 	.word	0x2000069c
 80043f8:	4a8d      	ldr	r2, [pc, #564]	; (8004630 <Constant_Voltage+0x10cc>)
 80043fa:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 80043fc:	4b8d      	ldr	r3, [pc, #564]	; (8004634 <Constant_Voltage+0x10d0>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a8d      	ldr	r2, [pc, #564]	; (8004638 <Constant_Voltage+0x10d4>)
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	4b8d      	ldr	r3, [pc, #564]	; (800463c <Constant_Voltage+0x10d8>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b8a      	ldr	r3, [pc, #552]	; (8004634 <Constant_Voltage+0x10d0>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4619      	mov	r1, r3
 800440e:	4610      	mov	r0, r2
 8004410:	f7fc fe72 	bl	80010f8 <__aeabi_fcmplt>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <Constant_Voltage+0xebe>
 800441a:	4b88      	ldr	r3, [pc, #544]	; (800463c <Constant_Voltage+0x10d8>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a86      	ldr	r2, [pc, #536]	; (8004638 <Constant_Voltage+0x10d4>)
 8004420:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 8004422:	4b84      	ldr	r3, [pc, #528]	; (8004634 <Constant_Voltage+0x10d0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a86      	ldr	r2, [pc, #536]	; (8004640 <Constant_Voltage+0x10dc>)
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b86      	ldr	r3, [pc, #536]	; (8004644 <Constant_Voltage+0x10e0>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b81      	ldr	r3, [pc, #516]	; (8004634 <Constant_Voltage+0x10d0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f7fc fe5f 	bl	80010f8 <__aeabi_fcmplt>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <Constant_Voltage+0xee4>
 8004440:	4b80      	ldr	r3, [pc, #512]	; (8004644 <Constant_Voltage+0x10e0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7e      	ldr	r2, [pc, #504]	; (8004640 <Constant_Voltage+0x10dc>)
 8004446:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 8004448:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <Constant_Voltage+0x10d0>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a7e      	ldr	r2, [pc, #504]	; (8004648 <Constant_Voltage+0x10e4>)
 800444e:	6013      	str	r3, [r2, #0]
 8004450:	4b7e      	ldr	r3, [pc, #504]	; (800464c <Constant_Voltage+0x10e8>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b77      	ldr	r3, [pc, #476]	; (8004634 <Constant_Voltage+0x10d0>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f7fc fe4c 	bl	80010f8 <__aeabi_fcmplt>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <Constant_Voltage+0xf0a>
 8004466:	4b79      	ldr	r3, [pc, #484]	; (800464c <Constant_Voltage+0x10e8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a77      	ldr	r2, [pc, #476]	; (8004648 <Constant_Voltage+0x10e4>)
 800446c:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 800446e:	4b71      	ldr	r3, [pc, #452]	; (8004634 <Constant_Voltage+0x10d0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a77      	ldr	r2, [pc, #476]	; (8004650 <Constant_Voltage+0x10ec>)
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b77      	ldr	r3, [pc, #476]	; (8004654 <Constant_Voltage+0x10f0>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4b6e      	ldr	r3, [pc, #440]	; (8004634 <Constant_Voltage+0x10d0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4619      	mov	r1, r3
 8004480:	4610      	mov	r0, r2
 8004482:	f7fc fe39 	bl	80010f8 <__aeabi_fcmplt>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <Constant_Voltage+0xf30>
 800448c:	4b71      	ldr	r3, [pc, #452]	; (8004654 <Constant_Voltage+0x10f0>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a6f      	ldr	r2, [pc, #444]	; (8004650 <Constant_Voltage+0x10ec>)
 8004492:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 8004494:	4b67      	ldr	r3, [pc, #412]	; (8004634 <Constant_Voltage+0x10d0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a6f      	ldr	r2, [pc, #444]	; (8004658 <Constant_Voltage+0x10f4>)
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b6f      	ldr	r3, [pc, #444]	; (800465c <Constant_Voltage+0x10f8>)
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b64      	ldr	r3, [pc, #400]	; (8004634 <Constant_Voltage+0x10d0>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fc fe26 	bl	80010f8 <__aeabi_fcmplt>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <Constant_Voltage+0xf56>
 80044b2:	4b6a      	ldr	r3, [pc, #424]	; (800465c <Constant_Voltage+0x10f8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a68      	ldr	r2, [pc, #416]	; (8004658 <Constant_Voltage+0x10f4>)
 80044b8:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 80044ba:	4b5e      	ldr	r3, [pc, #376]	; (8004634 <Constant_Voltage+0x10d0>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a68      	ldr	r2, [pc, #416]	; (8004660 <Constant_Voltage+0x10fc>)
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b68      	ldr	r3, [pc, #416]	; (8004664 <Constant_Voltage+0x1100>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	4b5b      	ldr	r3, [pc, #364]	; (8004634 <Constant_Voltage+0x10d0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4619      	mov	r1, r3
 80044cc:	4610      	mov	r0, r2
 80044ce:	f7fc fe13 	bl	80010f8 <__aeabi_fcmplt>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <Constant_Voltage+0xf7c>
 80044d8:	4b62      	ldr	r3, [pc, #392]	; (8004664 <Constant_Voltage+0x1100>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a60      	ldr	r2, [pc, #384]	; (8004660 <Constant_Voltage+0x10fc>)
 80044de:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 80044e0:	4b54      	ldr	r3, [pc, #336]	; (8004634 <Constant_Voltage+0x10d0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a60      	ldr	r2, [pc, #384]	; (8004668 <Constant_Voltage+0x1104>)
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b60      	ldr	r3, [pc, #384]	; (800466c <Constant_Voltage+0x1108>)
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	4b51      	ldr	r3, [pc, #324]	; (8004634 <Constant_Voltage+0x10d0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4619      	mov	r1, r3
 80044f2:	4610      	mov	r0, r2
 80044f4:	f7fc fe00 	bl	80010f8 <__aeabi_fcmplt>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <Constant_Voltage+0xfa2>
 80044fe:	4b5b      	ldr	r3, [pc, #364]	; (800466c <Constant_Voltage+0x1108>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a59      	ldr	r2, [pc, #356]	; (8004668 <Constant_Voltage+0x1104>)
 8004504:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 8004506:	4b5a      	ldr	r3, [pc, #360]	; (8004670 <Constant_Voltage+0x110c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a5a      	ldr	r2, [pc, #360]	; (8004674 <Constant_Voltage+0x1110>)
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	4b4b      	ldr	r3, [pc, #300]	; (800463c <Constant_Voltage+0x10d8>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b57      	ldr	r3, [pc, #348]	; (8004670 <Constant_Voltage+0x110c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4619      	mov	r1, r3
 8004518:	4610      	mov	r0, r2
 800451a:	f7fc fded 	bl	80010f8 <__aeabi_fcmplt>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <Constant_Voltage+0xfc8>
 8004524:	4b45      	ldr	r3, [pc, #276]	; (800463c <Constant_Voltage+0x10d8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a52      	ldr	r2, [pc, #328]	; (8004674 <Constant_Voltage+0x1110>)
 800452a:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 800452c:	4b50      	ldr	r3, [pc, #320]	; (8004670 <Constant_Voltage+0x110c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a51      	ldr	r2, [pc, #324]	; (8004678 <Constant_Voltage+0x1114>)
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <Constant_Voltage+0x10e0>)
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	4b4d      	ldr	r3, [pc, #308]	; (8004670 <Constant_Voltage+0x110c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f7fc fdda 	bl	80010f8 <__aeabi_fcmplt>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <Constant_Voltage+0xfee>
 800454a:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <Constant_Voltage+0x10e0>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a4a      	ldr	r2, [pc, #296]	; (8004678 <Constant_Voltage+0x1114>)
 8004550:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <Constant_Voltage+0x110c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a49      	ldr	r2, [pc, #292]	; (800467c <Constant_Voltage+0x1118>)
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b3c      	ldr	r3, [pc, #240]	; (800464c <Constant_Voltage+0x10e8>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b44      	ldr	r3, [pc, #272]	; (8004670 <Constant_Voltage+0x110c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4619      	mov	r1, r3
 8004564:	4610      	mov	r0, r2
 8004566:	f7fc fdc7 	bl	80010f8 <__aeabi_fcmplt>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <Constant_Voltage+0x1014>
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <Constant_Voltage+0x10e8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a41      	ldr	r2, [pc, #260]	; (800467c <Constant_Voltage+0x1118>)
 8004576:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 8004578:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <Constant_Voltage+0x110c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a40      	ldr	r2, [pc, #256]	; (8004680 <Constant_Voltage+0x111c>)
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b34      	ldr	r3, [pc, #208]	; (8004654 <Constant_Voltage+0x10f0>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b3a      	ldr	r3, [pc, #232]	; (8004670 <Constant_Voltage+0x110c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4619      	mov	r1, r3
 800458a:	4610      	mov	r0, r2
 800458c:	f7fc fdb4 	bl	80010f8 <__aeabi_fcmplt>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <Constant_Voltage+0x103a>
 8004596:	4b2f      	ldr	r3, [pc, #188]	; (8004654 <Constant_Voltage+0x10f0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a39      	ldr	r2, [pc, #228]	; (8004680 <Constant_Voltage+0x111c>)
 800459c:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 800459e:	4b34      	ldr	r3, [pc, #208]	; (8004670 <Constant_Voltage+0x110c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a38      	ldr	r2, [pc, #224]	; (8004684 <Constant_Voltage+0x1120>)
 80045a4:	6013      	str	r3, [r2, #0]
 80045a6:	4b2d      	ldr	r3, [pc, #180]	; (800465c <Constant_Voltage+0x10f8>)
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	4b31      	ldr	r3, [pc, #196]	; (8004670 <Constant_Voltage+0x110c>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4619      	mov	r1, r3
 80045b0:	4610      	mov	r0, r2
 80045b2:	f7fc fda1 	bl	80010f8 <__aeabi_fcmplt>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d003      	beq.n	80045c4 <Constant_Voltage+0x1060>
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <Constant_Voltage+0x10f8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a30      	ldr	r2, [pc, #192]	; (8004684 <Constant_Voltage+0x1120>)
 80045c2:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 80045c4:	4b2a      	ldr	r3, [pc, #168]	; (8004670 <Constant_Voltage+0x110c>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a2f      	ldr	r2, [pc, #188]	; (8004688 <Constant_Voltage+0x1124>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b25      	ldr	r3, [pc, #148]	; (8004664 <Constant_Voltage+0x1100>)
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	4b27      	ldr	r3, [pc, #156]	; (8004670 <Constant_Voltage+0x110c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7fc fd8e 	bl	80010f8 <__aeabi_fcmplt>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <Constant_Voltage+0x1086>
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <Constant_Voltage+0x1100>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a28      	ldr	r2, [pc, #160]	; (8004688 <Constant_Voltage+0x1124>)
 80045e8:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 80045ea:	4b21      	ldr	r3, [pc, #132]	; (8004670 <Constant_Voltage+0x110c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a27      	ldr	r2, [pc, #156]	; (800468c <Constant_Voltage+0x1128>)
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	4b1e      	ldr	r3, [pc, #120]	; (800466c <Constant_Voltage+0x1108>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <Constant_Voltage+0x110c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4619      	mov	r1, r3
 80045fc:	4610      	mov	r0, r2
 80045fe:	f7fc fd7b 	bl	80010f8 <__aeabi_fcmplt>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <Constant_Voltage+0x10ac>
 8004608:	4b18      	ldr	r3, [pc, #96]	; (800466c <Constant_Voltage+0x1108>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1f      	ldr	r2, [pc, #124]	; (800468c <Constant_Voltage+0x1128>)
 800460e:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <Constant_Voltage+0x112c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a1f      	ldr	r2, [pc, #124]	; (8004694 <Constant_Voltage+0x1130>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <Constant_Voltage+0x10d8>)
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4b1c      	ldr	r3, [pc, #112]	; (8004690 <Constant_Voltage+0x112c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7fc fd68 	bl	80010f8 <__aeabi_fcmplt>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d038      	beq.n	80046a0 <Constant_Voltage+0x113c>
 800462e:	e033      	b.n	8004698 <Constant_Voltage+0x1134>
 8004630:	2000069c 	.word	0x2000069c
 8004634:	20000940 	.word	0x20000940
 8004638:	200006c8 	.word	0x200006c8
 800463c:	200012dc 	.word	0x200012dc
 8004640:	20000f40 	.word	0x20000f40
 8004644:	20001318 	.word	0x20001318
 8004648:	200008f4 	.word	0x200008f4
 800464c:	200006d4 	.word	0x200006d4
 8004650:	20000944 	.word	0x20000944
 8004654:	20001330 	.word	0x20001330
 8004658:	20000cf4 	.word	0x20000cf4
 800465c:	20000d00 	.word	0x20000d00
 8004660:	20000f3c 	.word	0x20000f3c
 8004664:	20000d9c 	.word	0x20000d9c
 8004668:	20001120 	.word	0x20001120
 800466c:	20000cbc 	.word	0x20000cbc
 8004670:	20000cfc 	.word	0x20000cfc
 8004674:	20000708 	.word	0x20000708
 8004678:	20000b00 	.word	0x20000b00
 800467c:	20000cc4 	.word	0x20000cc4
 8004680:	200012ec 	.word	0x200012ec
 8004684:	20000d6c 	.word	0x20000d6c
 8004688:	200006e0 	.word	0x200006e0
 800468c:	200006f8 	.word	0x200006f8
 8004690:	20000714 	.word	0x20000714
 8004694:	200012f4 	.word	0x200012f4
 8004698:	4b90      	ldr	r3, [pc, #576]	; (80048dc <Constant_Voltage+0x1378>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a90      	ldr	r2, [pc, #576]	; (80048e0 <Constant_Voltage+0x137c>)
 800469e:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 80046a0:	4b90      	ldr	r3, [pc, #576]	; (80048e4 <Constant_Voltage+0x1380>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a90      	ldr	r2, [pc, #576]	; (80048e8 <Constant_Voltage+0x1384>)
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	4b90      	ldr	r3, [pc, #576]	; (80048ec <Constant_Voltage+0x1388>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b8d      	ldr	r3, [pc, #564]	; (80048e4 <Constant_Voltage+0x1380>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4619      	mov	r1, r3
 80046b2:	4610      	mov	r0, r2
 80046b4:	f7fc fd20 	bl	80010f8 <__aeabi_fcmplt>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <Constant_Voltage+0x1162>
 80046be:	4b8b      	ldr	r3, [pc, #556]	; (80048ec <Constant_Voltage+0x1388>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a89      	ldr	r2, [pc, #548]	; (80048e8 <Constant_Voltage+0x1384>)
 80046c4:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 80046c6:	4b87      	ldr	r3, [pc, #540]	; (80048e4 <Constant_Voltage+0x1380>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a89      	ldr	r2, [pc, #548]	; (80048f0 <Constant_Voltage+0x138c>)
 80046cc:	6013      	str	r3, [r2, #0]
 80046ce:	4b89      	ldr	r3, [pc, #548]	; (80048f4 <Constant_Voltage+0x1390>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b84      	ldr	r3, [pc, #528]	; (80048e4 <Constant_Voltage+0x1380>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	4610      	mov	r0, r2
 80046da:	f7fc fd0d 	bl	80010f8 <__aeabi_fcmplt>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d003      	beq.n	80046ec <Constant_Voltage+0x1188>
 80046e4:	4b83      	ldr	r3, [pc, #524]	; (80048f4 <Constant_Voltage+0x1390>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a81      	ldr	r2, [pc, #516]	; (80048f0 <Constant_Voltage+0x138c>)
 80046ea:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 80046ec:	4b7d      	ldr	r3, [pc, #500]	; (80048e4 <Constant_Voltage+0x1380>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a81      	ldr	r2, [pc, #516]	; (80048f8 <Constant_Voltage+0x1394>)
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b81      	ldr	r3, [pc, #516]	; (80048fc <Constant_Voltage+0x1398>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b7a      	ldr	r3, [pc, #488]	; (80048e4 <Constant_Voltage+0x1380>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4619      	mov	r1, r3
 80046fe:	4610      	mov	r0, r2
 8004700:	f7fc fcfa 	bl	80010f8 <__aeabi_fcmplt>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <Constant_Voltage+0x11ae>
 800470a:	4b7c      	ldr	r3, [pc, #496]	; (80048fc <Constant_Voltage+0x1398>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a7a      	ldr	r2, [pc, #488]	; (80048f8 <Constant_Voltage+0x1394>)
 8004710:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 8004712:	4b74      	ldr	r3, [pc, #464]	; (80048e4 <Constant_Voltage+0x1380>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a7a      	ldr	r2, [pc, #488]	; (8004900 <Constant_Voltage+0x139c>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	4b7a      	ldr	r3, [pc, #488]	; (8004904 <Constant_Voltage+0x13a0>)
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b71      	ldr	r3, [pc, #452]	; (80048e4 <Constant_Voltage+0x1380>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fc fce7 	bl	80010f8 <__aeabi_fcmplt>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <Constant_Voltage+0x11d4>
 8004730:	4b74      	ldr	r3, [pc, #464]	; (8004904 <Constant_Voltage+0x13a0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a72      	ldr	r2, [pc, #456]	; (8004900 <Constant_Voltage+0x139c>)
 8004736:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 8004738:	4b6a      	ldr	r3, [pc, #424]	; (80048e4 <Constant_Voltage+0x1380>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a72      	ldr	r2, [pc, #456]	; (8004908 <Constant_Voltage+0x13a4>)
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	4b72      	ldr	r3, [pc, #456]	; (800490c <Constant_Voltage+0x13a8>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b67      	ldr	r3, [pc, #412]	; (80048e4 <Constant_Voltage+0x1380>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fc fcd4 	bl	80010f8 <__aeabi_fcmplt>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <Constant_Voltage+0x11fa>
 8004756:	4b6d      	ldr	r3, [pc, #436]	; (800490c <Constant_Voltage+0x13a8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a6b      	ldr	r2, [pc, #428]	; (8004908 <Constant_Voltage+0x13a4>)
 800475c:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 800475e:	4b61      	ldr	r3, [pc, #388]	; (80048e4 <Constant_Voltage+0x1380>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6b      	ldr	r2, [pc, #428]	; (8004910 <Constant_Voltage+0x13ac>)
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b6b      	ldr	r3, [pc, #428]	; (8004914 <Constant_Voltage+0x13b0>)
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b5e      	ldr	r3, [pc, #376]	; (80048e4 <Constant_Voltage+0x1380>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fc fcc1 	bl	80010f8 <__aeabi_fcmplt>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <Constant_Voltage+0x1220>
 800477c:	4b65      	ldr	r3, [pc, #404]	; (8004914 <Constant_Voltage+0x13b0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a63      	ldr	r2, [pc, #396]	; (8004910 <Constant_Voltage+0x13ac>)
 8004782:	6013      	str	r3, [r2, #0]

	///////////////////////////DEFUZZIFIKASI///////////////////////

	A=(r1*oZ)+(r2*oPS)+(r3*oPM)+(r4*oPB)+(r5*oPH)+(r6*oPH)+(r7*oPH);
 8004784:	4b64      	ldr	r3, [pc, #400]	; (8004918 <Constant_Voltage+0x13b4>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <Constant_Voltage+0x13b8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f7fc fb14 	bl	8000dbc <__aeabi_fmul>
 8004794:	4603      	mov	r3, r0
 8004796:	461c      	mov	r4, r3
 8004798:	4b61      	ldr	r3, [pc, #388]	; (8004920 <Constant_Voltage+0x13bc>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b61      	ldr	r3, [pc, #388]	; (8004924 <Constant_Voltage+0x13c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4619      	mov	r1, r3
 80047a2:	4610      	mov	r0, r2
 80047a4:	f7fc fb0a 	bl	8000dbc <__aeabi_fmul>
 80047a8:	4603      	mov	r3, r0
 80047aa:	4619      	mov	r1, r3
 80047ac:	4620      	mov	r0, r4
 80047ae:	f7fc f9fd 	bl	8000bac <__addsf3>
 80047b2:	4603      	mov	r3, r0
 80047b4:	461c      	mov	r4, r3
 80047b6:	4b5c      	ldr	r3, [pc, #368]	; (8004928 <Constant_Voltage+0x13c4>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b5c      	ldr	r3, [pc, #368]	; (800492c <Constant_Voltage+0x13c8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	4610      	mov	r0, r2
 80047c2:	f7fc fafb 	bl	8000dbc <__aeabi_fmul>
 80047c6:	4603      	mov	r3, r0
 80047c8:	4619      	mov	r1, r3
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7fc f9ee 	bl	8000bac <__addsf3>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461c      	mov	r4, r3
 80047d4:	4b56      	ldr	r3, [pc, #344]	; (8004930 <Constant_Voltage+0x13cc>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b56      	ldr	r3, [pc, #344]	; (8004934 <Constant_Voltage+0x13d0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7fc faec 	bl	8000dbc <__aeabi_fmul>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4619      	mov	r1, r3
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7fc f9df 	bl	8000bac <__addsf3>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461c      	mov	r4, r3
 80047f2:	4b51      	ldr	r3, [pc, #324]	; (8004938 <Constant_Voltage+0x13d4>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b51      	ldr	r3, [pc, #324]	; (800493c <Constant_Voltage+0x13d8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7fc fadd 	bl	8000dbc <__aeabi_fmul>
 8004802:	4603      	mov	r3, r0
 8004804:	4619      	mov	r1, r3
 8004806:	4620      	mov	r0, r4
 8004808:	f7fc f9d0 	bl	8000bac <__addsf3>
 800480c:	4603      	mov	r3, r0
 800480e:	461c      	mov	r4, r3
 8004810:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <Constant_Voltage+0x13dc>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b49      	ldr	r3, [pc, #292]	; (800493c <Constant_Voltage+0x13d8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7fc face 	bl	8000dbc <__aeabi_fmul>
 8004820:	4603      	mov	r3, r0
 8004822:	4619      	mov	r1, r3
 8004824:	4620      	mov	r0, r4
 8004826:	f7fc f9c1 	bl	8000bac <__addsf3>
 800482a:	4603      	mov	r3, r0
 800482c:	461c      	mov	r4, r3
 800482e:	4b45      	ldr	r3, [pc, #276]	; (8004944 <Constant_Voltage+0x13e0>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b42      	ldr	r3, [pc, #264]	; (800493c <Constant_Voltage+0x13d8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fc fabf 	bl	8000dbc <__aeabi_fmul>
 800483e:	4603      	mov	r3, r0
 8004840:	4619      	mov	r1, r3
 8004842:	4620      	mov	r0, r4
 8004844:	f7fc f9b2 	bl	8000bac <__addsf3>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	4b3e      	ldr	r3, [pc, #248]	; (8004948 <Constant_Voltage+0x13e4>)
 800484e:	601a      	str	r2, [r3, #0]
	B=(r8*oNS)+(r9*oZ)+(r10*oPS)+(r11*oPM)+(r12*oPB)+(r13*oPH)+(r14*oPH);
 8004850:	4b3e      	ldr	r3, [pc, #248]	; (800494c <Constant_Voltage+0x13e8>)
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <Constant_Voltage+0x13ec>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fc faae 	bl	8000dbc <__aeabi_fmul>
 8004860:	4603      	mov	r3, r0
 8004862:	461c      	mov	r4, r3
 8004864:	4b3b      	ldr	r3, [pc, #236]	; (8004954 <Constant_Voltage+0x13f0>)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	4b2c      	ldr	r3, [pc, #176]	; (800491c <Constant_Voltage+0x13b8>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f7fc faa4 	bl	8000dbc <__aeabi_fmul>
 8004874:	4603      	mov	r3, r0
 8004876:	4619      	mov	r1, r3
 8004878:	4620      	mov	r0, r4
 800487a:	f7fc f997 	bl	8000bac <__addsf3>
 800487e:	4603      	mov	r3, r0
 8004880:	461c      	mov	r4, r3
 8004882:	4b35      	ldr	r3, [pc, #212]	; (8004958 <Constant_Voltage+0x13f4>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4b27      	ldr	r3, [pc, #156]	; (8004924 <Constant_Voltage+0x13c0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fc fa95 	bl	8000dbc <__aeabi_fmul>
 8004892:	4603      	mov	r3, r0
 8004894:	4619      	mov	r1, r3
 8004896:	4620      	mov	r0, r4
 8004898:	f7fc f988 	bl	8000bac <__addsf3>
 800489c:	4603      	mov	r3, r0
 800489e:	461c      	mov	r4, r3
 80048a0:	4b2e      	ldr	r3, [pc, #184]	; (800495c <Constant_Voltage+0x13f8>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b21      	ldr	r3, [pc, #132]	; (800492c <Constant_Voltage+0x13c8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f7fc fa86 	bl	8000dbc <__aeabi_fmul>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4619      	mov	r1, r3
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fc f979 	bl	8000bac <__addsf3>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461c      	mov	r4, r3
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <Constant_Voltage+0x13fc>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <Constant_Voltage+0x13d0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fc fa77 	bl	8000dbc <__aeabi_fmul>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4619      	mov	r1, r3
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7fc f96a 	bl	8000bac <__addsf3>
 80048d8:	e044      	b.n	8004964 <Constant_Voltage+0x1400>
 80048da:	bf00      	nop
 80048dc:	200012dc 	.word	0x200012dc
 80048e0:	200012f4 	.word	0x200012f4
 80048e4:	20000714 	.word	0x20000714
 80048e8:	20000ae0 	.word	0x20000ae0
 80048ec:	20001318 	.word	0x20001318
 80048f0:	2000093c 	.word	0x2000093c
 80048f4:	200006d4 	.word	0x200006d4
 80048f8:	20000740 	.word	0x20000740
 80048fc:	20001330 	.word	0x20001330
 8004900:	200012e4 	.word	0x200012e4
 8004904:	20000d00 	.word	0x20000d00
 8004908:	20000d7c 	.word	0x20000d7c
 800490c:	20000d9c 	.word	0x20000d9c
 8004910:	20000cf0 	.word	0x20000cf0
 8004914:	20000cbc 	.word	0x20000cbc
 8004918:	20001334 	.word	0x20001334
 800491c:	20000254 	.word	0x20000254
 8004920:	20000f68 	.word	0x20000f68
 8004924:	20000030 	.word	0x20000030
 8004928:	20000700 	.word	0x20000700
 800492c:	20000034 	.word	0x20000034
 8004930:	20000910 	.word	0x20000910
 8004934:	20000038 	.word	0x20000038
 8004938:	20001320 	.word	0x20001320
 800493c:	2000003c 	.word	0x2000003c
 8004940:	200008fc 	.word	0x200008fc
 8004944:	20000d78 	.word	0x20000d78
 8004948:	20000734 	.word	0x20000734
 800494c:	20000cd4 	.word	0x20000cd4
 8004950:	2000002c 	.word	0x2000002c
 8004954:	2000073c 	.word	0x2000073c
 8004958:	20000cb0 	.word	0x20000cb0
 800495c:	20000f58 	.word	0x20000f58
 8004960:	200012fc 	.word	0x200012fc
 8004964:	4603      	mov	r3, r0
 8004966:	461c      	mov	r4, r3
 8004968:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <Constant_Voltage+0x164c>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b91      	ldr	r3, [pc, #580]	; (8004bb4 <Constant_Voltage+0x1650>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f7fc fa22 	bl	8000dbc <__aeabi_fmul>
 8004978:	4603      	mov	r3, r0
 800497a:	4619      	mov	r1, r3
 800497c:	4620      	mov	r0, r4
 800497e:	f7fc f915 	bl	8000bac <__addsf3>
 8004982:	4603      	mov	r3, r0
 8004984:	461c      	mov	r4, r3
 8004986:	4b8c      	ldr	r3, [pc, #560]	; (8004bb8 <Constant_Voltage+0x1654>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	4b8a      	ldr	r3, [pc, #552]	; (8004bb4 <Constant_Voltage+0x1650>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4619      	mov	r1, r3
 8004990:	4610      	mov	r0, r2
 8004992:	f7fc fa13 	bl	8000dbc <__aeabi_fmul>
 8004996:	4603      	mov	r3, r0
 8004998:	4619      	mov	r1, r3
 800499a:	4620      	mov	r0, r4
 800499c:	f7fc f906 	bl	8000bac <__addsf3>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	4b85      	ldr	r3, [pc, #532]	; (8004bbc <Constant_Voltage+0x1658>)
 80049a6:	601a      	str	r2, [r3, #0]
	C=(r15*oNM)+(r16*oNS)+(r17*oZ)+(r18*oPS)+(r19*oPM)+(r20*oPB)+(r21*oPH);
 80049a8:	4b85      	ldr	r3, [pc, #532]	; (8004bc0 <Constant_Voltage+0x165c>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	4b85      	ldr	r3, [pc, #532]	; (8004bc4 <Constant_Voltage+0x1660>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fc fa02 	bl	8000dbc <__aeabi_fmul>
 80049b8:	4603      	mov	r3, r0
 80049ba:	461c      	mov	r4, r3
 80049bc:	4b82      	ldr	r3, [pc, #520]	; (8004bc8 <Constant_Voltage+0x1664>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b82      	ldr	r3, [pc, #520]	; (8004bcc <Constant_Voltage+0x1668>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	4610      	mov	r0, r2
 80049c8:	f7fc f9f8 	bl	8000dbc <__aeabi_fmul>
 80049cc:	4603      	mov	r3, r0
 80049ce:	4619      	mov	r1, r3
 80049d0:	4620      	mov	r0, r4
 80049d2:	f7fc f8eb 	bl	8000bac <__addsf3>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461c      	mov	r4, r3
 80049da:	4b7d      	ldr	r3, [pc, #500]	; (8004bd0 <Constant_Voltage+0x166c>)
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	4b7d      	ldr	r3, [pc, #500]	; (8004bd4 <Constant_Voltage+0x1670>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4619      	mov	r1, r3
 80049e4:	4610      	mov	r0, r2
 80049e6:	f7fc f9e9 	bl	8000dbc <__aeabi_fmul>
 80049ea:	4603      	mov	r3, r0
 80049ec:	4619      	mov	r1, r3
 80049ee:	4620      	mov	r0, r4
 80049f0:	f7fc f8dc 	bl	8000bac <__addsf3>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461c      	mov	r4, r3
 80049f8:	4b77      	ldr	r3, [pc, #476]	; (8004bd8 <Constant_Voltage+0x1674>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <Constant_Voltage+0x1678>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7fc f9da 	bl	8000dbc <__aeabi_fmul>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f7fc f8cd 	bl	8000bac <__addsf3>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461c      	mov	r4, r3
 8004a16:	4b72      	ldr	r3, [pc, #456]	; (8004be0 <Constant_Voltage+0x167c>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <Constant_Voltage+0x1680>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fc f9cb 	bl	8000dbc <__aeabi_fmul>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7fc f8be 	bl	8000bac <__addsf3>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461c      	mov	r4, r3
 8004a34:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <Constant_Voltage+0x1684>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <Constant_Voltage+0x1688>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fc f9bc 	bl	8000dbc <__aeabi_fmul>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4619      	mov	r1, r3
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7fc f8af 	bl	8000bac <__addsf3>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461c      	mov	r4, r3
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <Constant_Voltage+0x168c>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b57      	ldr	r3, [pc, #348]	; (8004bb4 <Constant_Voltage+0x1650>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fc f9ad 	bl	8000dbc <__aeabi_fmul>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4619      	mov	r1, r3
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7fc f8a0 	bl	8000bac <__addsf3>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4b60      	ldr	r3, [pc, #384]	; (8004bf4 <Constant_Voltage+0x1690>)
 8004a72:	601a      	str	r2, [r3, #0]
	D=(r22*oNB)+(r23*oNM)+(r24*oNS)+(r25*oZ)+(r26*oPS)+(r27*oPM)+(r28*oPB);
 8004a74:	4b60      	ldr	r3, [pc, #384]	; (8004bf8 <Constant_Voltage+0x1694>)
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <Constant_Voltage+0x1698>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fc f99c 	bl	8000dbc <__aeabi_fmul>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461c      	mov	r4, r3
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <Constant_Voltage+0x169c>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b4d      	ldr	r3, [pc, #308]	; (8004bc4 <Constant_Voltage+0x1660>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4619      	mov	r1, r3
 8004a92:	4610      	mov	r0, r2
 8004a94:	f7fc f992 	bl	8000dbc <__aeabi_fmul>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f7fc f885 	bl	8000bac <__addsf3>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	461c      	mov	r4, r3
 8004aa6:	4b57      	ldr	r3, [pc, #348]	; (8004c04 <Constant_Voltage+0x16a0>)
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b48      	ldr	r3, [pc, #288]	; (8004bcc <Constant_Voltage+0x1668>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	f7fc f983 	bl	8000dbc <__aeabi_fmul>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7fc f876 	bl	8000bac <__addsf3>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <Constant_Voltage+0x16a4>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <Constant_Voltage+0x1670>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fc f974 	bl	8000dbc <__aeabi_fmul>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fc f867 	bl	8000bac <__addsf3>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	4b4a      	ldr	r3, [pc, #296]	; (8004c0c <Constant_Voltage+0x16a8>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <Constant_Voltage+0x1678>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fc f965 	bl	8000dbc <__aeabi_fmul>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4619      	mov	r1, r3
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7fc f858 	bl	8000bac <__addsf3>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461c      	mov	r4, r3
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <Constant_Voltage+0x16ac>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b37      	ldr	r3, [pc, #220]	; (8004be4 <Constant_Voltage+0x1680>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f7fc f956 	bl	8000dbc <__aeabi_fmul>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7fc f849 	bl	8000bac <__addsf3>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461c      	mov	r4, r3
 8004b1e:	4b3d      	ldr	r3, [pc, #244]	; (8004c14 <Constant_Voltage+0x16b0>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b32      	ldr	r3, [pc, #200]	; (8004bec <Constant_Voltage+0x1688>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fc f947 	bl	8000dbc <__aeabi_fmul>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4619      	mov	r1, r3
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7fc f83a 	bl	8000bac <__addsf3>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	4b36      	ldr	r3, [pc, #216]	; (8004c18 <Constant_Voltage+0x16b4>)
 8004b3e:	601a      	str	r2, [r3, #0]
	E=(r29*oNH)+(r30*oNB)+(r31*oNM)+(r32*oNS)+(r33*oZ)+(r34*oPS)+(r35*oPM);
 8004b40:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <Constant_Voltage+0x16b8>)
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <Constant_Voltage+0x16bc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4619      	mov	r1, r3
 8004b4a:	4610      	mov	r0, r2
 8004b4c:	f7fc f936 	bl	8000dbc <__aeabi_fmul>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461c      	mov	r4, r3
 8004b54:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <Constant_Voltage+0x16c0>)
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	4b28      	ldr	r3, [pc, #160]	; (8004bfc <Constant_Voltage+0x1698>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	4610      	mov	r0, r2
 8004b60:	f7fc f92c 	bl	8000dbc <__aeabi_fmul>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4619      	mov	r1, r3
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f7fc f81f 	bl	8000bac <__addsf3>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461c      	mov	r4, r3
 8004b72:	4b2d      	ldr	r3, [pc, #180]	; (8004c28 <Constant_Voltage+0x16c4>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <Constant_Voltage+0x1660>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	f7fc f91d 	bl	8000dbc <__aeabi_fmul>
 8004b82:	4603      	mov	r3, r0
 8004b84:	4619      	mov	r1, r3
 8004b86:	4620      	mov	r0, r4
 8004b88:	f7fc f810 	bl	8000bac <__addsf3>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461c      	mov	r4, r3
 8004b90:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <Constant_Voltage+0x16c8>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <Constant_Voltage+0x1668>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fc f90e 	bl	8000dbc <__aeabi_fmul>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7fc f801 	bl	8000bac <__addsf3>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461c      	mov	r4, r3
 8004bae:	e03f      	b.n	8004c30 <Constant_Voltage+0x16cc>
 8004bb0:	20001338 	.word	0x20001338
 8004bb4:	2000003c 	.word	0x2000003c
 8004bb8:	20000684 	.word	0x20000684
 8004bbc:	20000ad8 	.word	0x20000ad8
 8004bc0:	20001300 	.word	0x20001300
 8004bc4:	20000028 	.word	0x20000028
 8004bc8:	20000d94 	.word	0x20000d94
 8004bcc:	2000002c 	.word	0x2000002c
 8004bd0:	200008f0 	.word	0x200008f0
 8004bd4:	20000254 	.word	0x20000254
 8004bd8:	20000d08 	.word	0x20000d08
 8004bdc:	20000030 	.word	0x20000030
 8004be0:	200012f8 	.word	0x200012f8
 8004be4:	20000034 	.word	0x20000034
 8004be8:	20000ccc 	.word	0x20000ccc
 8004bec:	20000038 	.word	0x20000038
 8004bf0:	20000904 	.word	0x20000904
 8004bf4:	20000b08 	.word	0x20000b08
 8004bf8:	20001128 	.word	0x20001128
 8004bfc:	20000024 	.word	0x20000024
 8004c00:	20001314 	.word	0x20001314
 8004c04:	2000132c 	.word	0x2000132c
 8004c08:	200006d0 	.word	0x200006d0
 8004c0c:	200008e0 	.word	0x200008e0
 8004c10:	20000ce8 	.word	0x20000ce8
 8004c14:	2000069c 	.word	0x2000069c
 8004c18:	2000067c 	.word	0x2000067c
 8004c1c:	200006c8 	.word	0x200006c8
 8004c20:	20000020 	.word	0x20000020
 8004c24:	20000f40 	.word	0x20000f40
 8004c28:	200008f4 	.word	0x200008f4
 8004c2c:	20000944 	.word	0x20000944
 8004c30:	4b91      	ldr	r3, [pc, #580]	; (8004e78 <Constant_Voltage+0x1914>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b91      	ldr	r3, [pc, #580]	; (8004e7c <Constant_Voltage+0x1918>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	f7fc f8be 	bl	8000dbc <__aeabi_fmul>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4619      	mov	r1, r3
 8004c44:	4620      	mov	r0, r4
 8004c46:	f7fb ffb1 	bl	8000bac <__addsf3>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461c      	mov	r4, r3
 8004c4e:	4b8c      	ldr	r3, [pc, #560]	; (8004e80 <Constant_Voltage+0x191c>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b8c      	ldr	r3, [pc, #560]	; (8004e84 <Constant_Voltage+0x1920>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4619      	mov	r1, r3
 8004c58:	4610      	mov	r0, r2
 8004c5a:	f7fc f8af 	bl	8000dbc <__aeabi_fmul>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	4619      	mov	r1, r3
 8004c62:	4620      	mov	r0, r4
 8004c64:	f7fb ffa2 	bl	8000bac <__addsf3>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	461c      	mov	r4, r3
 8004c6c:	4b86      	ldr	r3, [pc, #536]	; (8004e88 <Constant_Voltage+0x1924>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b86      	ldr	r3, [pc, #536]	; (8004e8c <Constant_Voltage+0x1928>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fc f8a0 	bl	8000dbc <__aeabi_fmul>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7fb ff93 	bl	8000bac <__addsf3>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <Constant_Voltage+0x192c>)
 8004c8c:	601a      	str	r2, [r3, #0]
	F=(r36*oNH)+(r37*oNH)+(r38*oNB)+(r39*oNM)+(r40*oNS)+(r41*oZ)+(r42*oPS);
 8004c8e:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <Constant_Voltage+0x1930>)
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	4b81      	ldr	r3, [pc, #516]	; (8004e98 <Constant_Voltage+0x1934>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f7fc f88f 	bl	8000dbc <__aeabi_fmul>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	461c      	mov	r4, r3
 8004ca2:	4b7e      	ldr	r3, [pc, #504]	; (8004e9c <Constant_Voltage+0x1938>)
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	4b7c      	ldr	r3, [pc, #496]	; (8004e98 <Constant_Voltage+0x1934>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fc f885 	bl	8000dbc <__aeabi_fmul>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7fb ff78 	bl	8000bac <__addsf3>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	461c      	mov	r4, r3
 8004cc0:	4b77      	ldr	r3, [pc, #476]	; (8004ea0 <Constant_Voltage+0x193c>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <Constant_Voltage+0x1940>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fc f876 	bl	8000dbc <__aeabi_fmul>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f7fb ff69 	bl	8000bac <__addsf3>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461c      	mov	r4, r3
 8004cde:	4b72      	ldr	r3, [pc, #456]	; (8004ea8 <Constant_Voltage+0x1944>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b72      	ldr	r3, [pc, #456]	; (8004eac <Constant_Voltage+0x1948>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fc f867 	bl	8000dbc <__aeabi_fmul>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fb ff5a 	bl	8000bac <__addsf3>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	4b6c      	ldr	r3, [pc, #432]	; (8004eb0 <Constant_Voltage+0x194c>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <Constant_Voltage+0x1950>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fc f858 	bl	8000dbc <__aeabi_fmul>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7fb ff4b 	bl	8000bac <__addsf3>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461c      	mov	r4, r3
 8004d1a:	4b67      	ldr	r3, [pc, #412]	; (8004eb8 <Constant_Voltage+0x1954>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <Constant_Voltage+0x1918>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7fc f849 	bl	8000dbc <__aeabi_fmul>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7fb ff3c 	bl	8000bac <__addsf3>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461c      	mov	r4, r3
 8004d38:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <Constant_Voltage+0x1958>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b51      	ldr	r3, [pc, #324]	; (8004e84 <Constant_Voltage+0x1920>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fc f83a 	bl	8000dbc <__aeabi_fmul>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7fb ff2d 	bl	8000bac <__addsf3>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461a      	mov	r2, r3
 8004d56:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <Constant_Voltage+0x195c>)
 8004d58:	601a      	str	r2, [r3, #0]
	G=(r43*oNH)+(r44*oNH)+(r45*oNH)+(r46*oNB)+(r47*oNM)+(r48*oNS)+(r49*oZ);
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <Constant_Voltage+0x1960>)
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	4b4e      	ldr	r3, [pc, #312]	; (8004e98 <Constant_Voltage+0x1934>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4619      	mov	r1, r3
 8004d64:	4610      	mov	r0, r2
 8004d66:	f7fc f829 	bl	8000dbc <__aeabi_fmul>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	461c      	mov	r4, r3
 8004d6e:	4b56      	ldr	r3, [pc, #344]	; (8004ec8 <Constant_Voltage+0x1964>)
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4b49      	ldr	r3, [pc, #292]	; (8004e98 <Constant_Voltage+0x1934>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7fc f81f 	bl	8000dbc <__aeabi_fmul>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4619      	mov	r1, r3
 8004d82:	4620      	mov	r0, r4
 8004d84:	f7fb ff12 	bl	8000bac <__addsf3>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461c      	mov	r4, r3
 8004d8c:	4b4f      	ldr	r3, [pc, #316]	; (8004ecc <Constant_Voltage+0x1968>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <Constant_Voltage+0x1934>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7fc f810 	bl	8000dbc <__aeabi_fmul>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7fb ff03 	bl	8000bac <__addsf3>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461c      	mov	r4, r3
 8004daa:	4b49      	ldr	r3, [pc, #292]	; (8004ed0 <Constant_Voltage+0x196c>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <Constant_Voltage+0x1940>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fc f801 	bl	8000dbc <__aeabi_fmul>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7fb fef4 	bl	8000bac <__addsf3>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461c      	mov	r4, r3
 8004dc8:	4b42      	ldr	r3, [pc, #264]	; (8004ed4 <Constant_Voltage+0x1970>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b37      	ldr	r3, [pc, #220]	; (8004eac <Constant_Voltage+0x1948>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fb fff2 	bl	8000dbc <__aeabi_fmul>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7fb fee5 	bl	8000bac <__addsf3>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461c      	mov	r4, r3
 8004de6:	4b3c      	ldr	r3, [pc, #240]	; (8004ed8 <Constant_Voltage+0x1974>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b32      	ldr	r3, [pc, #200]	; (8004eb4 <Constant_Voltage+0x1950>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fb ffe3 	bl	8000dbc <__aeabi_fmul>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7fb fed6 	bl	8000bac <__addsf3>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461c      	mov	r4, r3
 8004e04:	4b35      	ldr	r3, [pc, #212]	; (8004edc <Constant_Voltage+0x1978>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b1c      	ldr	r3, [pc, #112]	; (8004e7c <Constant_Voltage+0x1918>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fb ffd4 	bl	8000dbc <__aeabi_fmul>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4619      	mov	r1, r3
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f7fb fec7 	bl	8000bac <__addsf3>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461a      	mov	r2, r3
 8004e22:	4b2f      	ldr	r3, [pc, #188]	; (8004ee0 <Constant_Voltage+0x197c>)
 8004e24:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <Constant_Voltage+0x1980>)
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <Constant_Voltage+0x1984>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	4610      	mov	r0, r2
 8004e32:	f7fb febb 	bl	8000bac <__addsf3>
 8004e36:	4603      	mov	r3, r0
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b2c      	ldr	r3, [pc, #176]	; (8004eec <Constant_Voltage+0x1988>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4619      	mov	r1, r3
 8004e40:	4610      	mov	r0, r2
 8004e42:	f7fb feb3 	bl	8000bac <__addsf3>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	4b29      	ldr	r3, [pc, #164]	; (8004ef0 <Constant_Voltage+0x198c>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f7fb feab 	bl	8000bac <__addsf3>
 8004e56:	4603      	mov	r3, r0
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4b26      	ldr	r3, [pc, #152]	; (8004ef4 <Constant_Voltage+0x1990>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4619      	mov	r1, r3
 8004e60:	4610      	mov	r0, r2
 8004e62:	f7fb fea3 	bl	8000bac <__addsf3>
 8004e66:	4603      	mov	r3, r0
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4b23      	ldr	r3, [pc, #140]	; (8004ef8 <Constant_Voltage+0x1994>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f7fb fe9b 	bl	8000bac <__addsf3>
 8004e76:	e041      	b.n	8004efc <Constant_Voltage+0x1998>
 8004e78:	20000cf4 	.word	0x20000cf4
 8004e7c:	20000254 	.word	0x20000254
 8004e80:	20000f3c 	.word	0x20000f3c
 8004e84:	20000030 	.word	0x20000030
 8004e88:	20001120 	.word	0x20001120
 8004e8c:	20000034 	.word	0x20000034
 8004e90:	20001108 	.word	0x20001108
 8004e94:	20000708 	.word	0x20000708
 8004e98:	20000020 	.word	0x20000020
 8004e9c:	20000b00 	.word	0x20000b00
 8004ea0:	20000cc4 	.word	0x20000cc4
 8004ea4:	20000024 	.word	0x20000024
 8004ea8:	200012ec 	.word	0x200012ec
 8004eac:	20000028 	.word	0x20000028
 8004eb0:	20000d6c 	.word	0x20000d6c
 8004eb4:	2000002c 	.word	0x2000002c
 8004eb8:	200006e0 	.word	0x200006e0
 8004ebc:	200006f8 	.word	0x200006f8
 8004ec0:	2000131c 	.word	0x2000131c
 8004ec4:	200012f4 	.word	0x200012f4
 8004ec8:	20000ae0 	.word	0x20000ae0
 8004ecc:	2000093c 	.word	0x2000093c
 8004ed0:	20000740 	.word	0x20000740
 8004ed4:	200012e4 	.word	0x200012e4
 8004ed8:	20000d7c 	.word	0x20000d7c
 8004edc:	20000cf0 	.word	0x20000cf0
 8004ee0:	20000cdc 	.word	0x20000cdc
 8004ee4:	20001334 	.word	0x20001334
 8004ee8:	20000f68 	.word	0x20000f68
 8004eec:	20000700 	.word	0x20000700
 8004ef0:	20000910 	.word	0x20000910
 8004ef4:	20001320 	.word	0x20001320
 8004ef8:	200008fc 	.word	0x200008fc
 8004efc:	4603      	mov	r3, r0
 8004efe:	461a      	mov	r2, r3
 8004f00:	4b91      	ldr	r3, [pc, #580]	; (8005148 <Constant_Voltage+0x1be4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f7fb fe50 	bl	8000bac <__addsf3>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b8e      	ldr	r3, [pc, #568]	; (800514c <Constant_Voltage+0x1be8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	4610      	mov	r0, r2
 8004f18:	f7fb fe48 	bl	8000bac <__addsf3>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4b8b      	ldr	r3, [pc, #556]	; (8005150 <Constant_Voltage+0x1bec>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f7fb fe40 	bl	8000bac <__addsf3>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4b88      	ldr	r3, [pc, #544]	; (8005154 <Constant_Voltage+0x1bf0>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7fb fe38 	bl	8000bac <__addsf3>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b85      	ldr	r3, [pc, #532]	; (8005158 <Constant_Voltage+0x1bf4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fb fe30 	bl	8000bac <__addsf3>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b82      	ldr	r3, [pc, #520]	; (800515c <Constant_Voltage+0x1bf8>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4619      	mov	r1, r3
 8004f56:	4610      	mov	r0, r2
 8004f58:	f7fb fe28 	bl	8000bac <__addsf3>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4b7f      	ldr	r3, [pc, #508]	; (8005160 <Constant_Voltage+0x1bfc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f7fb fe20 	bl	8000bac <__addsf3>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4b7c      	ldr	r3, [pc, #496]	; (8005164 <Constant_Voltage+0x1c00>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f7fb fe18 	bl	8000bac <__addsf3>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4b79      	ldr	r3, [pc, #484]	; (8005168 <Constant_Voltage+0x1c04>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f7fb fe10 	bl	8000bac <__addsf3>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	461a      	mov	r2, r3
 8004f90:	4b76      	ldr	r3, [pc, #472]	; (800516c <Constant_Voltage+0x1c08>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fb fe08 	bl	8000bac <__addsf3>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	4b73      	ldr	r3, [pc, #460]	; (8005170 <Constant_Voltage+0x1c0c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f7fb fe00 	bl	8000bac <__addsf3>
 8004fac:	4603      	mov	r3, r0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4b70      	ldr	r3, [pc, #448]	; (8005174 <Constant_Voltage+0x1c10>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	f7fb fdf8 	bl	8000bac <__addsf3>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	4b6d      	ldr	r3, [pc, #436]	; (8005178 <Constant_Voltage+0x1c14>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	f7fb fdf0 	bl	8000bac <__addsf3>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	4b6a      	ldr	r3, [pc, #424]	; (800517c <Constant_Voltage+0x1c18>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	f7fb fde8 	bl	8000bac <__addsf3>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b67      	ldr	r3, [pc, #412]	; (8005180 <Constant_Voltage+0x1c1c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fb fde0 	bl	8000bac <__addsf3>
 8004fec:	4603      	mov	r3, r0
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4b64      	ldr	r3, [pc, #400]	; (8005184 <Constant_Voltage+0x1c20>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4610      	mov	r0, r2
 8004ff8:	f7fb fdd8 	bl	8000bac <__addsf3>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	461a      	mov	r2, r3
 8005000:	4b61      	ldr	r3, [pc, #388]	; (8005188 <Constant_Voltage+0x1c24>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f7fb fdd0 	bl	8000bac <__addsf3>
 800500c:	4603      	mov	r3, r0
 800500e:	461a      	mov	r2, r3
 8005010:	4b5e      	ldr	r3, [pc, #376]	; (800518c <Constant_Voltage+0x1c28>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fb fdc8 	bl	8000bac <__addsf3>
 800501c:	4603      	mov	r3, r0
 800501e:	461a      	mov	r2, r3
 8005020:	4b5b      	ldr	r3, [pc, #364]	; (8005190 <Constant_Voltage+0x1c2c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7fb fdc0 	bl	8000bac <__addsf3>
 800502c:	4603      	mov	r3, r0
 800502e:	461a      	mov	r2, r3
 8005030:	4b58      	ldr	r3, [pc, #352]	; (8005194 <Constant_Voltage+0x1c30>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7fb fdb8 	bl	8000bac <__addsf3>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	4b55      	ldr	r3, [pc, #340]	; (8005198 <Constant_Voltage+0x1c34>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fb fdb0 	bl	8000bac <__addsf3>
 800504c:	4603      	mov	r3, r0
 800504e:	461a      	mov	r2, r3
 8005050:	4b52      	ldr	r3, [pc, #328]	; (800519c <Constant_Voltage+0x1c38>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f7fb fda8 	bl	8000bac <__addsf3>
 800505c:	4603      	mov	r3, r0
 800505e:	461a      	mov	r2, r3
 8005060:	4b4f      	ldr	r3, [pc, #316]	; (80051a0 <Constant_Voltage+0x1c3c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fb fda0 	bl	8000bac <__addsf3>
 800506c:	4603      	mov	r3, r0
 800506e:	461a      	mov	r2, r3
 8005070:	4b4c      	ldr	r3, [pc, #304]	; (80051a4 <Constant_Voltage+0x1c40>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fb fd98 	bl	8000bac <__addsf3>
 800507c:	4603      	mov	r3, r0
 800507e:	461a      	mov	r2, r3
 8005080:	4b49      	ldr	r3, [pc, #292]	; (80051a8 <Constant_Voltage+0x1c44>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4619      	mov	r1, r3
 8005086:	4610      	mov	r0, r2
 8005088:	f7fb fd90 	bl	8000bac <__addsf3>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	4b46      	ldr	r3, [pc, #280]	; (80051ac <Constant_Voltage+0x1c48>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f7fb fd88 	bl	8000bac <__addsf3>
 800509c:	4603      	mov	r3, r0
 800509e:	461a      	mov	r2, r3
 80050a0:	4b43      	ldr	r3, [pc, #268]	; (80051b0 <Constant_Voltage+0x1c4c>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f7fb fd80 	bl	8000bac <__addsf3>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b40      	ldr	r3, [pc, #256]	; (80051b4 <Constant_Voltage+0x1c50>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4619      	mov	r1, r3
 80050b6:	4610      	mov	r0, r2
 80050b8:	f7fb fd78 	bl	8000bac <__addsf3>
 80050bc:	4603      	mov	r3, r0
 80050be:	461a      	mov	r2, r3
 80050c0:	4b3d      	ldr	r3, [pc, #244]	; (80051b8 <Constant_Voltage+0x1c54>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4619      	mov	r1, r3
 80050c6:	4610      	mov	r0, r2
 80050c8:	f7fb fd70 	bl	8000bac <__addsf3>
 80050cc:	4603      	mov	r3, r0
 80050ce:	461a      	mov	r2, r3
 80050d0:	4b3a      	ldr	r3, [pc, #232]	; (80051bc <Constant_Voltage+0x1c58>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	f7fb fd68 	bl	8000bac <__addsf3>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	4b37      	ldr	r3, [pc, #220]	; (80051c0 <Constant_Voltage+0x1c5c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fb fd60 	bl	8000bac <__addsf3>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <Constant_Voltage+0x1c60>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f7fb fd58 	bl	8000bac <__addsf3>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	4b31      	ldr	r3, [pc, #196]	; (80051c8 <Constant_Voltage+0x1c64>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4619      	mov	r1, r3
 8005106:	4610      	mov	r0, r2
 8005108:	f7fb fd50 	bl	8000bac <__addsf3>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	4b2e      	ldr	r3, [pc, #184]	; (80051cc <Constant_Voltage+0x1c68>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f7fb fd48 	bl	8000bac <__addsf3>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <Constant_Voltage+0x1c6c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f7fb fd40 	bl	8000bac <__addsf3>
 800512c:	4603      	mov	r3, r0
 800512e:	461a      	mov	r2, r3
 8005130:	4b28      	ldr	r3, [pc, #160]	; (80051d4 <Constant_Voltage+0x1c70>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4619      	mov	r1, r3
 8005136:	4610      	mov	r0, r2
 8005138:	f7fb fd38 	bl	8000bac <__addsf3>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	4b25      	ldr	r3, [pc, #148]	; (80051d8 <Constant_Voltage+0x1c74>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	e04a      	b.n	80051dc <Constant_Voltage+0x1c78>
 8005146:	bf00      	nop
 8005148:	20000d78 	.word	0x20000d78
 800514c:	20000cd4 	.word	0x20000cd4
 8005150:	2000073c 	.word	0x2000073c
 8005154:	20000cb0 	.word	0x20000cb0
 8005158:	20000f58 	.word	0x20000f58
 800515c:	200012fc 	.word	0x200012fc
 8005160:	20001338 	.word	0x20001338
 8005164:	20000684 	.word	0x20000684
 8005168:	20001300 	.word	0x20001300
 800516c:	20000d94 	.word	0x20000d94
 8005170:	200008f0 	.word	0x200008f0
 8005174:	20000d08 	.word	0x20000d08
 8005178:	200012f8 	.word	0x200012f8
 800517c:	20000ccc 	.word	0x20000ccc
 8005180:	20000904 	.word	0x20000904
 8005184:	20001128 	.word	0x20001128
 8005188:	20001314 	.word	0x20001314
 800518c:	2000132c 	.word	0x2000132c
 8005190:	200006d0 	.word	0x200006d0
 8005194:	200008e0 	.word	0x200008e0
 8005198:	20000ce8 	.word	0x20000ce8
 800519c:	2000069c 	.word	0x2000069c
 80051a0:	200006c8 	.word	0x200006c8
 80051a4:	20000f40 	.word	0x20000f40
 80051a8:	200008f4 	.word	0x200008f4
 80051ac:	20000944 	.word	0x20000944
 80051b0:	20000cf4 	.word	0x20000cf4
 80051b4:	20000f3c 	.word	0x20000f3c
 80051b8:	20001120 	.word	0x20001120
 80051bc:	20000708 	.word	0x20000708
 80051c0:	20000b00 	.word	0x20000b00
 80051c4:	20000cc4 	.word	0x20000cc4
 80051c8:	200012ec 	.word	0x200012ec
 80051cc:	20000d6c 	.word	0x20000d6c
 80051d0:	200006e0 	.word	0x200006e0
 80051d4:	200006f8 	.word	0x200006f8
 80051d8:	200012f4 	.word	0x200012f4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f7fb fce4 	bl	8000bac <__addsf3>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	4b76      	ldr	r3, [pc, #472]	; (80053c4 <Constant_Voltage+0x1e60>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f7fb fcdc 	bl	8000bac <__addsf3>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	4b73      	ldr	r3, [pc, #460]	; (80053c8 <Constant_Voltage+0x1e64>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fb fcd4 	bl	8000bac <__addsf3>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	4b70      	ldr	r3, [pc, #448]	; (80053cc <Constant_Voltage+0x1e68>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fb fccc 	bl	8000bac <__addsf3>
 8005214:	4603      	mov	r3, r0
 8005216:	461a      	mov	r2, r3
 8005218:	4b6d      	ldr	r3, [pc, #436]	; (80053d0 <Constant_Voltage+0x1e6c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7fb fcc4 	bl	8000bac <__addsf3>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	4b6a      	ldr	r3, [pc, #424]	; (80053d4 <Constant_Voltage+0x1e70>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f7fb fcbc 	bl	8000bac <__addsf3>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	4b67      	ldr	r3, [pc, #412]	; (80053d8 <Constant_Voltage+0x1e74>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f7fb fcb4 	bl	8000bac <__addsf3>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b64      	ldr	r3, [pc, #400]	; (80053dc <Constant_Voltage+0x1e78>)
 800524a:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 800524c:	4b64      	ldr	r3, [pc, #400]	; (80053e0 <Constant_Voltage+0x1e7c>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b64      	ldr	r3, [pc, #400]	; (80053e4 <Constant_Voltage+0x1e80>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f7fb fca8 	bl	8000bac <__addsf3>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	4b61      	ldr	r3, [pc, #388]	; (80053e8 <Constant_Voltage+0x1e84>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4619      	mov	r1, r3
 8005266:	4610      	mov	r0, r2
 8005268:	f7fb fca0 	bl	8000bac <__addsf3>
 800526c:	4603      	mov	r3, r0
 800526e:	461a      	mov	r2, r3
 8005270:	4b5e      	ldr	r3, [pc, #376]	; (80053ec <Constant_Voltage+0x1e88>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fb fc98 	bl	8000bac <__addsf3>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	4b5b      	ldr	r3, [pc, #364]	; (80053f0 <Constant_Voltage+0x1e8c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f7fb fc90 	bl	8000bac <__addsf3>
 800528c:	4603      	mov	r3, r0
 800528e:	461a      	mov	r2, r3
 8005290:	4b58      	ldr	r3, [pc, #352]	; (80053f4 <Constant_Voltage+0x1e90>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	4610      	mov	r0, r2
 8005298:	f7fb fc88 	bl	8000bac <__addsf3>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	4b55      	ldr	r3, [pc, #340]	; (80053f8 <Constant_Voltage+0x1e94>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4619      	mov	r1, r3
 80052a6:	4610      	mov	r0, r2
 80052a8:	f7fb fc80 	bl	8000bac <__addsf3>
 80052ac:	4603      	mov	r3, r0
 80052ae:	461a      	mov	r2, r3
 80052b0:	4b4a      	ldr	r3, [pc, #296]	; (80053dc <Constant_Voltage+0x1e78>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7fb fe34 	bl	8000f24 <__aeabi_fdiv>
 80052bc:	4603      	mov	r3, r0
 80052be:	461a      	mov	r2, r3
 80052c0:	4b4e      	ldr	r3, [pc, #312]	; (80053fc <Constant_Voltage+0x1e98>)
 80052c2:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 80052c4:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b4c      	ldr	r3, [pc, #304]	; (80053fc <Constant_Voltage+0x1e98>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f7fb fc6c 	bl	8000bac <__addsf3>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	4b49      	ldr	r3, [pc, #292]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052da:	601a      	str	r2, [r3, #0]

	if(dc>=85)	dc=85;
 80052dc:	4b48      	ldr	r3, [pc, #288]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4948      	ldr	r1, [pc, #288]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fb ff1c 	bl	8001120 <__aeabi_fcmpge>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <Constant_Voltage+0x1d90>
 80052ee:	4b44      	ldr	r3, [pc, #272]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052f0:	4a44      	ldr	r2, [pc, #272]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052f2:	601a      	str	r2, [r3, #0]
	if(dc<=0)	dc=0;
 80052f4:	4b42      	ldr	r3, [pc, #264]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 0100 	mov.w	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fb ff05 	bl	800110c <__aeabi_fcmple>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <Constant_Voltage+0x1dac>
 8005308:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <Constant_Voltage+0x1e9c>)
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 8005310:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <Constant_Voltage+0x1e9c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	493c      	ldr	r1, [pc, #240]	; (8005408 <Constant_Voltage+0x1ea4>)
 8005316:	4618      	mov	r0, r3
 8005318:	f7fb fe04 	bl	8000f24 <__aeabi_fdiv>
 800531c:	4603      	mov	r3, r0
 800531e:	461a      	mov	r2, r3
 8005320:	4b3a      	ldr	r3, [pc, #232]	; (800540c <Constant_Voltage+0x1ea8>)
 8005322:	601a      	str	r2, [r3, #0]
//		  	while(p>0)
//		  		p--;
//		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//	}

	if(	flag_trip_overvoltage == 1		||
 8005324:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <Constant_Voltage+0x1eac>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d02f      	beq.n	800538c <Constant_Voltage+0x1e28>
		flag_trip_overtemperature == 1	||
 800532c:	4b39      	ldr	r3, [pc, #228]	; (8005414 <Constant_Voltage+0x1eb0>)
 800532e:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8005330:	2b01      	cmp	r3, #1
 8005332:	d02b      	beq.n	800538c <Constant_Voltage+0x1e28>
		flag_trip_undertemperature == 1	||
 8005334:	4b38      	ldr	r3, [pc, #224]	; (8005418 <Constant_Voltage+0x1eb4>)
 8005336:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 8005338:	2b01      	cmp	r3, #1
 800533a:	d027      	beq.n	800538c <Constant_Voltage+0x1e28>
		flag_trip_overcurrentcharge == 1||
 800533c:	4b37      	ldr	r3, [pc, #220]	; (800541c <Constant_Voltage+0x1eb8>)
 800533e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8005340:	2b01      	cmp	r3, #1
 8005342:	d023      	beq.n	800538c <Constant_Voltage+0x1e28>
		flag_trip_SOCOverCharge == 1	||
 8005344:	4b36      	ldr	r3, [pc, #216]	; (8005420 <Constant_Voltage+0x1ebc>)
 8005346:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 8005348:	2b01      	cmp	r3, #1
 800534a:	d01f      	beq.n	800538c <Constant_Voltage+0x1e28>
		flag_trip_shortcircuit == 1		||
 800534c:	4b35      	ldr	r3, [pc, #212]	; (8005424 <Constant_Voltage+0x1ec0>)
 800534e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8005350:	2b01      	cmp	r3, #1
 8005352:	d01b      	beq.n	800538c <Constant_Voltage+0x1e28>
		flag_trip_systemfailure == 1	||
 8005354:	4b34      	ldr	r3, [pc, #208]	; (8005428 <Constant_Voltage+0x1ec4>)
 8005356:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 8005358:	2b01      	cmp	r3, #1
 800535a:	d017      	beq.n	800538c <Constant_Voltage+0x1e28>
		Flag_ChargerShortCircuit == 1	||
 800535c:	4b33      	ldr	r3, [pc, #204]	; (800542c <Constant_Voltage+0x1ec8>)
 800535e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8005360:	2b01      	cmp	r3, #1
 8005362:	d013      	beq.n	800538c <Constant_Voltage+0x1e28>
		Flag_ChargerOverCurrent == 1	||
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <Constant_Voltage+0x1ecc>)
 8005366:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 8005368:	2b01      	cmp	r3, #1
 800536a:	d00f      	beq.n	800538c <Constant_Voltage+0x1e28>
		Flag_ChargerOverTemperature == 1||
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <Constant_Voltage+0x1ed0>)
 800536e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8005370:	2b01      	cmp	r3, #1
 8005372:	d00b      	beq.n	800538c <Constant_Voltage+0x1e28>
		Flag_ChargerOverVoltage == 1	||
 8005374:	4b30      	ldr	r3, [pc, #192]	; (8005438 <Constant_Voltage+0x1ed4>)
 8005376:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 8005378:	2b01      	cmp	r3, #1
 800537a:	d007      	beq.n	800538c <Constant_Voltage+0x1e28>
		Flag_MiniPC_LostCommunication==1||
 800537c:	4b2f      	ldr	r3, [pc, #188]	; (800543c <Constant_Voltage+0x1ed8>)
 800537e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8005380:	2b01      	cmp	r3, #1
 8005382:	d003      	beq.n	800538c <Constant_Voltage+0x1e28>
		Flag_BMS_LostCommunication == 1  )
 8005384:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <Constant_Voltage+0x1edc>)
 8005386:	781b      	ldrb	r3, [r3, #0]
		Flag_MiniPC_LostCommunication==1||
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <Constant_Voltage+0x1e36>
		{
			duty=0;
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <Constant_Voltage+0x1ea8>)
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 8005394:	4b2b      	ldr	r3, [pc, #172]	; (8005444 <Constant_Voltage+0x1ee0>)
 8005396:	2202      	movs	r2, #2
 8005398:	701a      	strb	r2, [r3, #0]
		}
	TIM1->CCR1=duty*TIM1->ARR;
 800539a:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <Constant_Voltage+0x1ee4>)
 800539c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fb fcb4 	bl	8000d0c <__aeabi_ui2f>
 80053a4:	4602      	mov	r2, r0
 80053a6:	4b19      	ldr	r3, [pc, #100]	; (800540c <Constant_Voltage+0x1ea8>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4619      	mov	r1, r3
 80053ac:	4610      	mov	r0, r2
 80053ae:	f7fb fd05 	bl	8000dbc <__aeabi_fmul>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4c24      	ldr	r4, [pc, #144]	; (8005448 <Constant_Voltage+0x1ee4>)
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fb fec6 	bl	8001148 <__aeabi_f2uiz>
 80053bc:	4603      	mov	r3, r0
 80053be:	6363      	str	r3, [r4, #52]	; 0x34
}
 80053c0:	bf00      	nop
 80053c2:	bd98      	pop	{r3, r4, r7, pc}
 80053c4:	20000ae0 	.word	0x20000ae0
 80053c8:	2000093c 	.word	0x2000093c
 80053cc:	20000740 	.word	0x20000740
 80053d0:	200012e4 	.word	0x200012e4
 80053d4:	20000d7c 	.word	0x20000d7c
 80053d8:	20000cf0 	.word	0x20000cf0
 80053dc:	20000d64 	.word	0x20000d64
 80053e0:	20000734 	.word	0x20000734
 80053e4:	20000ad8 	.word	0x20000ad8
 80053e8:	20000b08 	.word	0x20000b08
 80053ec:	2000067c 	.word	0x2000067c
 80053f0:	20001108 	.word	0x20001108
 80053f4:	2000131c 	.word	0x2000131c
 80053f8:	20000cdc 	.word	0x20000cdc
 80053fc:	20001104 	.word	0x20001104
 8005400:	200006dc 	.word	0x200006dc
 8005404:	42aa0000 	.word	0x42aa0000
 8005408:	42c80000 	.word	0x42c80000
 800540c:	200012cc 	.word	0x200012cc
 8005410:	20001308 	.word	0x20001308
 8005414:	200008d8 	.word	0x200008d8
 8005418:	20000af4 	.word	0x20000af4
 800541c:	20000d80 	.word	0x20000d80
 8005420:	200006ac 	.word	0x200006ac
 8005424:	200006cc 	.word	0x200006cc
 8005428:	200006fc 	.word	0x200006fc
 800542c:	20000914 	.word	0x20000914
 8005430:	200008f8 	.word	0x200008f8
 8005434:	20000721 	.word	0x20000721
 8005438:	20000920 	.word	0x20000920
 800543c:	200012c8 	.word	0x200012c8
 8005440:	200006f6 	.word	0x200006f6
 8005444:	20000744 	.word	0x20000744
 8005448:	40010000 	.word	0x40010000

0800544c <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	4603      	mov	r3, r0
 8005454:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 3, 100)!=HAL_OK){
 8005456:	88f9      	ldrh	r1, [r7, #6]
 8005458:	2364      	movs	r3, #100	; 0x64
 800545a:	2203      	movs	r2, #3
 800545c:	4808      	ldr	r0, [pc, #32]	; (8005480 <EEPROM_isDeviceReady+0x34>)
 800545e:	f005 fff7 	bl	800b450 <HAL_I2C_IsDeviceReady>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 8005468:	2140      	movs	r1, #64	; 0x40
 800546a:	4806      	ldr	r0, [pc, #24]	; (8005484 <EEPROM_isDeviceReady+0x38>)
 800546c:	f005 fca6 	bl	800adbc <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8005470:	2064      	movs	r0, #100	; 0x64
 8005472:	f003 fbd1 	bl	8008c18 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 8005476:	e7f7      	b.n	8005468 <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 8005478:	bf00      	nop
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20001428 	.word	0x20001428
 8005484:	40020800 	.word	0x40020800

08005488 <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af04      	add	r7, sp, #16
 800548e:	4603      	mov	r3, r0
 8005490:	460a      	mov	r2, r1
 8005492:	80fb      	strh	r3, [r7, #6]
 8005494:	4613      	mov	r3, r2
 8005496:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADDRESS,addr,64,&data,1,10);
 8005498:	88fa      	ldrh	r2, [r7, #6]
 800549a:	230a      	movs	r3, #10
 800549c:	9302      	str	r3, [sp, #8]
 800549e:	2301      	movs	r3, #1
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	1d7b      	adds	r3, r7, #5
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	21a0      	movs	r1, #160	; 0xa0
 80054aa:	4805      	ldr	r0, [pc, #20]	; (80054c0 <EEPROM_WriteData+0x38>)
 80054ac:	f005 fed6 	bl	800b25c <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80054b0:	2064      	movs	r0, #100	; 0x64
 80054b2:	f003 fbb1 	bl	8008c18 <HAL_Delay>
}
 80054b6:	bf00      	nop
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20001428 	.word	0x20001428

080054c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80054ca:	463b      	mov	r3, r7
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80054d6:	4b52      	ldr	r3, [pc, #328]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054d8:	4a52      	ldr	r2, [pc, #328]	; (8005624 <MX_ADC1_Init+0x160>)
 80054da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80054dc:	4b50      	ldr	r3, [pc, #320]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80054e2:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80054e8:	4b4d      	ldr	r3, [pc, #308]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054ea:	2201      	movs	r2, #1
 80054ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80054ee:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80054f4:	4b4a      	ldr	r3, [pc, #296]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80054fc:	4b48      	ldr	r3, [pc, #288]	; (8005620 <MX_ADC1_Init+0x15c>)
 80054fe:	2200      	movs	r2, #0
 8005500:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005502:	4b47      	ldr	r3, [pc, #284]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005504:	4a48      	ldr	r2, [pc, #288]	; (8005628 <MX_ADC1_Init+0x164>)
 8005506:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005508:	4b45      	ldr	r3, [pc, #276]	; (8005620 <MX_ADC1_Init+0x15c>)
 800550a:	2200      	movs	r2, #0
 800550c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800550e:	4b44      	ldr	r3, [pc, #272]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005510:	2208      	movs	r2, #8
 8005512:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005514:	4b42      	ldr	r3, [pc, #264]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800551c:	4b40      	ldr	r3, [pc, #256]	; (8005620 <MX_ADC1_Init+0x15c>)
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005522:	483f      	ldr	r0, [pc, #252]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005524:	f003 fb9a 	bl	8008c5c <HAL_ADC_Init>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800552e:	f001 fb89 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005532:	2301      	movs	r3, #1
 8005534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005536:	2301      	movs	r3, #1
 8005538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800553a:	2306      	movs	r3, #6
 800553c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800553e:	463b      	mov	r3, r7
 8005540:	4619      	mov	r1, r3
 8005542:	4837      	ldr	r0, [pc, #220]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005544:	f003 fcbe 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800554e:	f001 fb79 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005552:	2302      	movs	r3, #2
 8005554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005556:	2302      	movs	r3, #2
 8005558:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800555a:	463b      	mov	r3, r7
 800555c:	4619      	mov	r1, r3
 800555e:	4830      	ldr	r0, [pc, #192]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005560:	f003 fcb0 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800556a:	f001 fb6b 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800556e:	2303      	movs	r3, #3
 8005570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005572:	2303      	movs	r3, #3
 8005574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005576:	463b      	mov	r3, r7
 8005578:	4619      	mov	r1, r3
 800557a:	4829      	ldr	r0, [pc, #164]	; (8005620 <MX_ADC1_Init+0x15c>)
 800557c:	f003 fca2 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8005586:	f001 fb5d 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800558a:	230e      	movs	r3, #14
 800558c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800558e:	2304      	movs	r3, #4
 8005590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005592:	463b      	mov	r3, r7
 8005594:	4619      	mov	r1, r3
 8005596:	4822      	ldr	r0, [pc, #136]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005598:	f003 fc94 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80055a2:	f001 fb4f 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80055a6:	230f      	movs	r3, #15
 80055a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80055aa:	2305      	movs	r3, #5
 80055ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ae:	463b      	mov	r3, r7
 80055b0:	4619      	mov	r1, r3
 80055b2:	481b      	ldr	r0, [pc, #108]	; (8005620 <MX_ADC1_Init+0x15c>)
 80055b4:	f003 fc86 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80055be:	f001 fb41 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80055c2:	230b      	movs	r3, #11
 80055c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80055c6:	2306      	movs	r3, #6
 80055c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ca:	463b      	mov	r3, r7
 80055cc:	4619      	mov	r1, r3
 80055ce:	4814      	ldr	r0, [pc, #80]	; (8005620 <MX_ADC1_Init+0x15c>)
 80055d0:	f003 fc78 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 80055da:	f001 fb33 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80055de:	230c      	movs	r3, #12
 80055e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80055e2:	2307      	movs	r3, #7
 80055e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055e6:	463b      	mov	r3, r7
 80055e8:	4619      	mov	r1, r3
 80055ea:	480d      	ldr	r0, [pc, #52]	; (8005620 <MX_ADC1_Init+0x15c>)
 80055ec:	f003 fc6a 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 80055f6:	f001 fb25 	bl	8006c44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80055fa:	2308      	movs	r3, #8
 80055fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80055fe:	2308      	movs	r3, #8
 8005600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005602:	463b      	mov	r3, r7
 8005604:	4619      	mov	r1, r3
 8005606:	4806      	ldr	r0, [pc, #24]	; (8005620 <MX_ADC1_Init+0x15c>)
 8005608:	f003 fc5c 	bl	8008ec4 <HAL_ADC_ConfigChannel>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8005612:	f001 fb17 	bl	8006c44 <Error_Handler>
  }

}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20001340 	.word	0x20001340
 8005624:	40012000 	.word	0x40012000
 8005628:	0f000001 	.word	0x0f000001

0800562c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	; 0x30
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a4a      	ldr	r2, [pc, #296]	; (8005774 <HAL_ADC_MspInit+0x148>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f040 808d 	bne.w	800576a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	4b48      	ldr	r3, [pc, #288]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	4a47      	ldr	r2, [pc, #284]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	6453      	str	r3, [r2, #68]	; 0x44
 8005660:	4b45      	ldr	r3, [pc, #276]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	4b41      	ldr	r3, [pc, #260]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	4a40      	ldr	r2, [pc, #256]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005676:	f043 0304 	orr.w	r3, r3, #4
 800567a:	6313      	str	r3, [r2, #48]	; 0x30
 800567c:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	4b3a      	ldr	r3, [pc, #232]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	4a39      	ldr	r2, [pc, #228]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6313      	str	r3, [r2, #48]	; 0x30
 8005698:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	4b33      	ldr	r3, [pc, #204]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	4a32      	ldr	r2, [pc, #200]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 80056ae:	f043 0302 	orr.w	r3, r3, #2
 80056b2:	6313      	str	r3, [r2, #48]	; 0x30
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80056c0:	2336      	movs	r3, #54	; 0x36
 80056c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056c4:	2303      	movs	r3, #3
 80056c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056cc:	f107 031c 	add.w	r3, r7, #28
 80056d0:	4619      	mov	r1, r3
 80056d2:	482a      	ldr	r0, [pc, #168]	; (800577c <HAL_ADC_MspInit+0x150>)
 80056d4:	f005 f9bc 	bl	800aa50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80056d8:	230e      	movs	r3, #14
 80056da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056dc:	2303      	movs	r3, #3
 80056de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e4:	f107 031c 	add.w	r3, r7, #28
 80056e8:	4619      	mov	r1, r3
 80056ea:	4825      	ldr	r0, [pc, #148]	; (8005780 <HAL_ADC_MspInit+0x154>)
 80056ec:	f005 f9b0 	bl	800aa50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056f4:	2303      	movs	r3, #3
 80056f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fc:	f107 031c 	add.w	r3, r7, #28
 8005700:	4619      	mov	r1, r3
 8005702:	4820      	ldr	r0, [pc, #128]	; (8005784 <HAL_ADC_MspInit+0x158>)
 8005704:	f005 f9a4 	bl	800aa50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005708:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800570a:	4a20      	ldr	r2, [pc, #128]	; (800578c <HAL_ADC_MspInit+0x160>)
 800570c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800570e:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005710:	2200      	movs	r2, #0
 8005712:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800571c:	2200      	movs	r2, #0
 800571e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800572a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005730:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005738:	4b13      	ldr	r3, [pc, #76]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800573a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005742:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005746:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800574a:	2200      	movs	r2, #0
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800574e:	480e      	ldr	r0, [pc, #56]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005750:	f004 fdf0 	bl	800a334 <HAL_DMA_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800575a:	f001 fa73 	bl	8006c44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a09      	ldr	r2, [pc, #36]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800576a:	bf00      	nop
 800576c:	3730      	adds	r7, #48	; 0x30
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40012000 	.word	0x40012000
 8005778:	40023800 	.word	0x40023800
 800577c:	40020800 	.word	0x40020800
 8005780:	40020000 	.word	0x40020000
 8005784:	40020400 	.word	0x40020400
 8005788:	20001388 	.word	0x20001388
 800578c:	40026410 	.word	0x40026410

08005790 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <MX_CAN1_Init+0x64>)
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <MX_CAN1_Init+0x68>)
 8005798:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800579a:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <MX_CAN1_Init+0x64>)
 800579c:	2204      	movs	r2, #4
 800579e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057ae:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80057b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057be:	2200      	movs	r2, #0
 80057c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057dc:	2200      	movs	r2, #0
 80057de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80057e0:	4804      	ldr	r0, [pc, #16]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057e2:	f003 fe17 	bl	8009414 <HAL_CAN_Init>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80057ec:	f001 fa2a 	bl	8006c44 <Error_Handler>
  }

}
 80057f0:	bf00      	nop
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20001400 	.word	0x20001400
 80057f8:	40006400 	.word	0x40006400

080057fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	f107 0314 	add.w	r3, r7, #20
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_CAN_MspInit+0x94>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d134      	bne.n	8005888 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800582c:	6413      	str	r3, [r2, #64]	; 0x40
 800582e:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a14      	ldr	r2, [pc, #80]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_CAN_MspInit+0x98>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800585a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005864:	2303      	movs	r3, #3
 8005866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005868:	2309      	movs	r3, #9
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	4809      	ldr	r0, [pc, #36]	; (8005898 <HAL_CAN_MspInit+0x9c>)
 8005874:	f005 f8ec 	bl	800aa50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8005878:	2200      	movs	r2, #0
 800587a:	2101      	movs	r1, #1
 800587c:	2014      	movs	r0, #20
 800587e:	f004 fd22 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005882:	2014      	movs	r0, #20
 8005884:	f004 fd3b 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005888:	bf00      	nop
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40006400 	.word	0x40006400
 8005894:	40023800 	.word	0x40023800
 8005898:	40020000 	.word	0x40020000

0800589c <CAN_Setting>:
  }
}

/* USER CODE BEGIN 1 */
void CAN_Setting(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80058aa:	2301      	movs	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
	//sFilterConfig.FilterIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 80058ae:	2300      	movs	r3, #0
 80058b0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80058c2:	2301      	movs	r3, #1
 80058c4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80058c6:	230e      	movs	r3, #14
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 80058ca:	463b      	mov	r3, r7
 80058cc:	4619      	mov	r1, r3
 80058ce:	4810      	ldr	r0, [pc, #64]	; (8005910 <CAN_Setting+0x74>)
 80058d0:	f003 fe9c 	bl	800960c <HAL_CAN_ConfigFilter>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <CAN_Setting+0x42>
 80058da:	f001 f9b3 	bl	8006c44 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 80058de:	480c      	ldr	r0, [pc, #48]	; (8005910 <CAN_Setting+0x74>)
 80058e0:	f003 ff74 	bl	80097cc <HAL_CAN_Start>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <CAN_Setting+0x52>
 80058ea:	f001 f9ab 	bl	8006c44 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80058ee:	2102      	movs	r1, #2
 80058f0:	4807      	ldr	r0, [pc, #28]	; (8005910 <CAN_Setting+0x74>)
 80058f2:	f004 f9ce 	bl	8009c92 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <CAN_Setting+0x78>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <CAN_Setting+0x78>)
 80058fe:	2200      	movs	r2, #0
 8005900:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <CAN_Setting+0x78>)
 8005904:	2200      	movs	r2, #0
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001400 	.word	0x20001400
 8005914:	200015c8 	.word	0x200015c8

08005918 <CAN_Tx_Process>:

void CAN_Tx_Process(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
	if(send == 1){	//wakeup the battery, but mosfet still open
 800591c:	4b39      	ldr	r3, [pc, #228]	; (8005a04 <CAN_Tx_Process+0xec>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d134      	bne.n	800598e <CAN_Tx_Process+0x76>
		Tx_Header.IDE = CAN_ID_EXT;
 8005924:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <CAN_Tx_Process+0xf0>)
 8005926:	2204      	movs	r2, #4
 8005928:	609a      	str	r2, [r3, #8]
		Tx_Header.ExtId = 0x0E300000;
 800592a:	4b37      	ldr	r3, [pc, #220]	; (8005a08 <CAN_Tx_Process+0xf0>)
 800592c:	f04f 6263 	mov.w	r2, #238026752	; 0xe300000
 8005930:	605a      	str	r2, [r3, #4]
		Tx_data[0] = 0x9C;
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <CAN_Tx_Process+0xf4>)
 8005934:	229c      	movs	r2, #156	; 0x9c
 8005936:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = 0x18;
 8005938:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <CAN_Tx_Process+0xf4>)
 800593a:	2218      	movs	r2, #24
 800593c:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = 0xf4;
 800593e:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <CAN_Tx_Process+0xf4>)
 8005940:	22f4      	movs	r2, #244	; 0xf4
 8005942:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = 0x01;
 8005944:	4b31      	ldr	r3, [pc, #196]	; (8005a0c <CAN_Tx_Process+0xf4>)
 8005946:	2201      	movs	r2, #1
 8005948:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = 0;
 800594a:	4b30      	ldr	r3, [pc, #192]	; (8005a0c <CAN_Tx_Process+0xf4>)
 800594c:	2200      	movs	r2, #0
 800594e:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = 0x55;
 8005950:	4b2e      	ldr	r3, [pc, #184]	; (8005a0c <CAN_Tx_Process+0xf4>)
 8005952:	2255      	movs	r2, #85	; 0x55
 8005954:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = 0;
 8005956:	4b2d      	ldr	r3, [pc, #180]	; (8005a0c <CAN_Tx_Process+0xf4>)
 8005958:	2200      	movs	r2, #0
 800595a:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = 0;
 800595c:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <CAN_Tx_Process+0xf4>)
 800595e:	2200      	movs	r2, #0
 8005960:	71da      	strb	r2, [r3, #7]
		Tx_Header.DLC = 8;
 8005962:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <CAN_Tx_Process+0xf0>)
 8005964:	2208      	movs	r2, #8
 8005966:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005968:	bf00      	nop
 800596a:	4829      	ldr	r0, [pc, #164]	; (8005a10 <CAN_Tx_Process+0xf8>)
 800596c:	f004 f84c 	bl	8009a08 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f9      	beq.n	800596a <CAN_Tx_Process+0x52>
		if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005976:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <CAN_Tx_Process+0xfc>)
 8005978:	4a24      	ldr	r2, [pc, #144]	; (8005a0c <CAN_Tx_Process+0xf4>)
 800597a:	4923      	ldr	r1, [pc, #140]	; (8005a08 <CAN_Tx_Process+0xf0>)
 800597c:	4824      	ldr	r0, [pc, #144]	; (8005a10 <CAN_Tx_Process+0xf8>)
 800597e:	f003 ff69 	bl	8009854 <HAL_CAN_AddTxMessage>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d03a      	beq.n	80059fe <CAN_Tx_Process+0xe6>
 8005988:	f001 f95c 	bl	8006c44 <Error_Handler>
		Tx_data[7] = 0;
		Tx_Header.DLC = 8;
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
		if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
	}
}
 800598c:	e037      	b.n	80059fe <CAN_Tx_Process+0xe6>
	else if(send == 2){	//close the mosfet, start charge
 800598e:	4b1d      	ldr	r3, [pc, #116]	; (8005a04 <CAN_Tx_Process+0xec>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d133      	bne.n	80059fe <CAN_Tx_Process+0xe6>
		Tx_Header.IDE = CAN_ID_EXT;
 8005996:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <CAN_Tx_Process+0xf0>)
 8005998:	2204      	movs	r2, #4
 800599a:	609a      	str	r2, [r3, #8]
		Tx_Header.ExtId = 0x0E300000;
 800599c:	4b1a      	ldr	r3, [pc, #104]	; (8005a08 <CAN_Tx_Process+0xf0>)
 800599e:	f04f 6263 	mov.w	r2, #238026752	; 0xe300000
 80059a2:	605a      	str	r2, [r3, #4]
		Tx_data[0] = 0x9C;
 80059a4:	4b19      	ldr	r3, [pc, #100]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059a6:	229c      	movs	r2, #156	; 0x9c
 80059a8:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = 0x18;
 80059aa:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059ac:	2218      	movs	r2, #24
 80059ae:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = 0xf4;
 80059b0:	4b16      	ldr	r3, [pc, #88]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059b2:	22f4      	movs	r2, #244	; 0xf4
 80059b4:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = 0x01;
 80059b6:	4b15      	ldr	r3, [pc, #84]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = 0;
 80059bc:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059be:	2200      	movs	r2, #0
 80059c0:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = 0xAA;
 80059c2:	4b12      	ldr	r3, [pc, #72]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059c4:	22aa      	movs	r2, #170	; 0xaa
 80059c6:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = 0;
 80059c8:	4b10      	ldr	r3, [pc, #64]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = 0;
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059d0:	2200      	movs	r2, #0
 80059d2:	71da      	strb	r2, [r3, #7]
		Tx_Header.DLC = 8;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <CAN_Tx_Process+0xf0>)
 80059d6:	2208      	movs	r2, #8
 80059d8:	611a      	str	r2, [r3, #16]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 80059da:	bf00      	nop
 80059dc:	480c      	ldr	r0, [pc, #48]	; (8005a10 <CAN_Tx_Process+0xf8>)
 80059de:	f004 f813 	bl	8009a08 <HAL_CAN_GetTxMailboxesFreeLevel>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f9      	beq.n	80059dc <CAN_Tx_Process+0xc4>
		if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <CAN_Tx_Process+0xfc>)
 80059ea:	4a08      	ldr	r2, [pc, #32]	; (8005a0c <CAN_Tx_Process+0xf4>)
 80059ec:	4906      	ldr	r1, [pc, #24]	; (8005a08 <CAN_Tx_Process+0xf0>)
 80059ee:	4808      	ldr	r0, [pc, #32]	; (8005a10 <CAN_Tx_Process+0xf8>)
 80059f0:	f003 ff30 	bl	8009854 <HAL_CAN_AddTxMessage>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <CAN_Tx_Process+0xe6>
 80059fa:	f001 f923 	bl	8006c44 <Error_Handler>
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000918 	.word	0x20000918
 8005a08:	200015c8 	.word	0x200015c8
 8005a0c:	200013e8 	.word	0x200013e8
 8005a10:	20001400 	.word	0x20001400
 8005a14:	200013fc 	.word	0x200013fc

08005a18 <HAL_CAN_RxFifo0MsgPendingCallback>:
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
		}
	}
}*/

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b084      	sub	sp, #16
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, Rx_data) == HAL_OK) {
 8005a20:	4b6a      	ldr	r3, [pc, #424]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005a22:	4a6b      	ldr	r2, [pc, #428]	; (8005bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8005a24:	2100      	movs	r1, #0
 8005a26:	486b      	ldr	r0, [pc, #428]	; (8005bd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8005a28:	f004 f822 	bl	8009a70 <HAL_CAN_GetRxMessage>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f040 8393 	bne.w	800615a <HAL_CAN_RxFifo0MsgPendingCallback+0x742>
		HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 8005a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a38:	4867      	ldr	r0, [pc, #412]	; (8005bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8005a3a:	f005 f9bf 	bl	800adbc <HAL_GPIO_TogglePin>

		if(Rx_Header.StdId == 0x0BB){
 8005a3e:	4b64      	ldr	r3, [pc, #400]	; (8005bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2bbb      	cmp	r3, #187	; 0xbb
 8005a44:	d120      	bne.n	8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
			if((Rx_data[2] & Rx_data[3]) == 0x40){
 8005a46:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005a48:	789a      	ldrb	r2, [r3, #2]
 8005a4a:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005a4c:	78db      	ldrb	r3, [r3, #3]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b40      	cmp	r3, #64	; 0x40
 8005a54:	d108      	bne.n	8005a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
				if(Ready_toHandshake == 1){
 8005a56:	4b61      	ldr	r3, [pc, #388]	; (8005bdc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	f040 8372 	bne.w	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
					send = 2;	//send data to activate the mosfet
 8005a60:	4b5f      	ldr	r3, [pc, #380]	; (8005be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8005a62:	2202      	movs	r2, #2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e36d      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
				}
			}

			else if(((Rx_data[2] & Rx_data[3]) == 0x43)){
 8005a68:	4b58      	ldr	r3, [pc, #352]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005a6a:	789a      	ldrb	r2, [r3, #2]
 8005a6c:	4b57      	ldr	r3, [pc, #348]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005a6e:	78db      	ldrb	r3, [r3, #3]
 8005a70:	4013      	ands	r3, r2
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b43      	cmp	r3, #67	; 0x43
 8005a76:	f040 8365 	bne.w	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
				Handshake_Recognition = 1;
 8005a7a:	4b5a      	ldr	r3, [pc, #360]	; (8005be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	701a      	strb	r2, [r3, #0]
				Ready_toCharge = 1;
 8005a80:	4b59      	ldr	r3, [pc, #356]	; (8005be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8005a82:	2201      	movs	r2, #1
 8005a84:	701a      	strb	r2, [r3, #0]
 8005a86:	e35d      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
			}
		}

		// CAN ID receive #1 (0x7b1)
		else if((Rx_Header.ExtId & 0xFFF00000) == 0x0B000000) {
 8005a88:	4b51      	ldr	r3, [pc, #324]	; (8005bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	0d1b      	lsrs	r3, r3, #20
 8005a8e:	051b      	lsls	r3, r3, #20
 8005a90:	f1b3 6f30 	cmp.w	r3, #184549376	; 0xb000000
 8005a94:	f040 8081 	bne.w	8005b9a <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
			UNIQUE_Code = Rx_Header.ExtId & 0x000FFFFF;
 8005a98:	4b4d      	ldr	r3, [pc, #308]	; (8005bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005aa0:	4a52      	ldr	r2, [pc, #328]	; (8005bec <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8005aa2:	6013      	str	r3, [r2, #0]
			//UNIQUE_Code = 0xABCD1;
			itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8005aa4:	4b51      	ldr	r3, [pc, #324]	; (8005bec <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2210      	movs	r2, #16
 8005aaa:	4951      	ldr	r1, [pc, #324]	; (8005bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8005aac:	4618      	mov	r0, r3
 8005aae:	f008 facb 	bl	800e048 <itoa>
			int ii=0;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
			while(ii<6){
 8005ab6:	e01c      	b.n	8005af2 <HAL_CAN_RxFifo0MsgPendingCallback+0xda>
				UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8005ab8:	4a4d      	ldr	r2, [pc, #308]	; (8005bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	72fb      	strb	r3, [r7, #11]
 8005ac2:	f008 fac3 	bl	800e04c <__locale_ctype_ptr>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	7afb      	ldrb	r3, [r7, #11]
 8005aca:	3301      	adds	r3, #1
 8005acc:	4413      	add	r3, r2
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	2b02      	cmp	r3, #2
 8005ad6:	d102      	bne.n	8005ade <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
 8005ad8:	7afb      	ldrb	r3, [r7, #11]
 8005ada:	3b20      	subs	r3, #32
 8005adc:	e000      	b.n	8005ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
 8005ade:	7afb      	ldrb	r3, [r7, #11]
 8005ae0:	b2d9      	uxtb	r1, r3
 8005ae2:	4a44      	ldr	r2, [pc, #272]	; (8005bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	460a      	mov	r2, r1
 8005aea:	701a      	strb	r2, [r3, #0]
				ii++;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	3301      	adds	r3, #1
 8005af0:	60fb      	str	r3, [r7, #12]
			while(ii<6){
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b05      	cmp	r3, #5
 8005af6:	dddf      	ble.n	8005ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			}

			Communication_BMS_Flag = 1;
 8005af8:	4b3f      	ldr	r3, [pc, #252]	; (8005bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	701a      	strb	r2, [r3, #0]
			Batt_voltage.m_bytes[0] = Rx_data[0];
 8005afe:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b00:	781a      	ldrb	r2, [r3, #0]
 8005b02:	4b3e      	ldr	r3, [pc, #248]	; (8005bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8005b04:	701a      	strb	r2, [r3, #0]
			Batt_voltage.m_bytes[1] = Rx_data[1];
 8005b06:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b08:	785a      	ldrb	r2, [r3, #1]
 8005b0a:	4b3c      	ldr	r3, [pc, #240]	; (8005bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8005b0c:	705a      	strb	r2, [r3, #1]
			Batt_current.m_bytes[0] = Rx_data[2];
 8005b0e:	4b2f      	ldr	r3, [pc, #188]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b10:	789a      	ldrb	r2, [r3, #2]
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8005b14:	701a      	strb	r2, [r3, #0]
			Batt_current.m_bytes[1] = Rx_data[3];
 8005b16:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b18:	78da      	ldrb	r2, [r3, #3]
 8005b1a:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8005b1c:	705a      	strb	r2, [r3, #1]
			Batt_SOC.m_bytes[0] = Rx_data[4];
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b20:	791a      	ldrb	r2, [r3, #4]
 8005b22:	4b38      	ldr	r3, [pc, #224]	; (8005c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8005b24:	701a      	strb	r2, [r3, #0]
			Batt_SOC.m_bytes[1] = Rx_data[5];
 8005b26:	4b29      	ldr	r3, [pc, #164]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b28:	795a      	ldrb	r2, [r3, #5]
 8005b2a:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8005b2c:	705a      	strb	r2, [r3, #1]
			Batt_temp.m_bytes[0] = Rx_data[6];
 8005b2e:	4b27      	ldr	r3, [pc, #156]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b30:	799a      	ldrb	r2, [r3, #6]
 8005b32:	4b35      	ldr	r3, [pc, #212]	; (8005c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8005b34:	701a      	strb	r2, [r3, #0]
			Batt_temp.m_bytes[1] = Rx_data[7];
 8005b36:	4b25      	ldr	r3, [pc, #148]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005b38:	79da      	ldrb	r2, [r3, #7]
 8005b3a:	4b33      	ldr	r3, [pc, #204]	; (8005c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8005b3c:	705a      	strb	r2, [r3, #1]

			BPack_Temp = (float)(Batt_temp.m_uint16t-40);
 8005b3e:	4b32      	ldr	r3, [pc, #200]	; (8005c08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	3b28      	subs	r3, #40	; 0x28
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fb f8e5 	bl	8000d14 <__aeabi_i2f>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	4b2f      	ldr	r3, [pc, #188]	; (8005c0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8005b4e:	601a      	str	r2, [r3, #0]
			BPack_Voltage = (float)Batt_voltage.m_uint16t/100;
 8005b50:	4b2a      	ldr	r3, [pc, #168]	; (8005bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fb f8d9 	bl	8000d0c <__aeabi_ui2f>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	492c      	ldr	r1, [pc, #176]	; (8005c10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fb f9e0 	bl	8000f24 <__aeabi_fdiv>
 8005b64:	4603      	mov	r3, r0
 8005b66:	461a      	mov	r2, r3
 8005b68:	4b2a      	ldr	r3, [pc, #168]	; (8005c14 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 8005b6a:	601a      	str	r2, [r3, #0]
			BPack_SOC = (float)Batt_SOC.m_uint16t;
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	4618      	mov	r0, r3
 8005b72:	f7fb f8cb 	bl	8000d0c <__aeabi_ui2f>
 8005b76:	4602      	mov	r2, r0
 8005b78:	4b27      	ldr	r3, [pc, #156]	; (8005c18 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8005b7a:	601a      	str	r2, [r3, #0]
			BPack_Current = (float)Batt_current.m_uint16t/10;
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fb f8c3 	bl	8000d0c <__aeabi_ui2f>
 8005b86:	4603      	mov	r3, r0
 8005b88:	4924      	ldr	r1, [pc, #144]	; (8005c1c <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7fb f9ca 	bl	8000f24 <__aeabi_fdiv>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8005b96:	601a      	str	r2, [r3, #0]
 8005b98:	e2d4      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>

		}

		// CAN ID receive #1 (0x7b1)
		else if((Rx_Header.ExtId & 0xFFF00000) == 0x0E000000) {
 8005b9a:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	0d1b      	lsrs	r3, r3, #20
 8005ba0:	051b      	lsls	r3, r3, #20
 8005ba2:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8005ba6:	d141      	bne.n	8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0x214>
			maxcharge_voltage.m_bytes[0] = Rx_data[0];
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005baa:	781a      	ldrb	r2, [r3, #0]
 8005bac:	4b1d      	ldr	r3, [pc, #116]	; (8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8005bae:	701a      	strb	r2, [r3, #0]
			maxcharge_voltage.m_bytes[1] = Rx_data[1];
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005bb2:	785a      	ldrb	r2, [r3, #1]
 8005bb4:	4b1b      	ldr	r3, [pc, #108]	; (8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8005bb6:	705a      	strb	r2, [r3, #1]
			maxcharge_current.m_bytes[0] = Rx_data[2];
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005bba:	789a      	ldrb	r2, [r3, #2]
 8005bbc:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8005bbe:	701a      	strb	r2, [r3, #0]
			maxcharge_current.m_bytes[1] = Rx_data[3];
 8005bc0:	4b02      	ldr	r3, [pc, #8]	; (8005bcc <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8005bc2:	78da      	ldrb	r2, [r3, #3]
 8005bc4:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8005bc6:	705a      	strb	r2, [r3, #1]
 8005bc8:	e2bc      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
 8005bca:	bf00      	nop
 8005bcc:	200013f0 	.word	0x200013f0
 8005bd0:	200015a8 	.word	0x200015a8
 8005bd4:	20001400 	.word	0x20001400
 8005bd8:	40020400 	.word	0x40020400
 8005bdc:	20000cec 	.word	0x20000cec
 8005be0:	20000918 	.word	0x20000918
 8005be4:	20000d68 	.word	0x20000d68
 8005be8:	20000d88 	.word	0x20000d88
 8005bec:	20000d84 	.word	0x20000d84
 8005bf0:	20000ca4 	.word	0x20000ca4
 8005bf4:	200006ec 	.word	0x200006ec
 8005bf8:	20000adc 	.word	0x20000adc
 8005bfc:	2000133c 	.word	0x2000133c
 8005c00:	20000ce0 	.word	0x20000ce0
 8005c04:	20000d24 	.word	0x20000d24
 8005c08:	20000d70 	.word	0x20000d70
 8005c0c:	20000d1c 	.word	0x20000d1c
 8005c10:	42c80000 	.word	0x42c80000
 8005c14:	20000d10 	.word	0x20000d10
 8005c18:	20000ae4 	.word	0x20000ae4
 8005c1c:	41200000 	.word	0x41200000
 8005c20:	200006b0 	.word	0x200006b0
 8005c24:	20000f64 	.word	0x20000f64
 8005c28:	20000d98 	.word	0x20000d98

		}

		// CAN ID receive #2 (0x7b1)
		else if((Rx_Header.ExtId & 0xFFF00000) == 0x0B100000) {
 8005c2c:	4b78      	ldr	r3, [pc, #480]	; (8005e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	0d1b      	lsrs	r3, r3, #20
 8005c32:	051b      	lsls	r3, r3, #20
 8005c34:	f1b3 6f31 	cmp.w	r3, #185597952	; 0xb100000
 8005c38:	f040 808b 	bne.w	8005d52 <HAL_CAN_RxFifo0MsgPendingCallback+0x33a>
			Communication_BMS_Flag = 1;
 8005c3c:	4b75      	ldr	r3, [pc, #468]	; (8005e14 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	701a      	strb	r2, [r3, #0]
			Batt_capacity.m_bytes[0] = Rx_data[0];
 8005c42:	4b75      	ldr	r3, [pc, #468]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c44:	781a      	ldrb	r2, [r3, #0]
 8005c46:	4b75      	ldr	r3, [pc, #468]	; (8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8005c48:	701a      	strb	r2, [r3, #0]
			Batt_capacity.m_bytes[1] = Rx_data[1];
 8005c4a:	4b73      	ldr	r3, [pc, #460]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c4c:	785a      	ldrb	r2, [r3, #1]
 8005c4e:	4b73      	ldr	r3, [pc, #460]	; (8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8005c50:	705a      	strb	r2, [r3, #1]
			Batt_SOH.m_bytes[0] = Rx_data[2];
 8005c52:	4b71      	ldr	r3, [pc, #452]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c54:	789a      	ldrb	r2, [r3, #2]
 8005c56:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>)
 8005c58:	701a      	strb	r2, [r3, #0]
			Batt_SOH.m_bytes[1] = Rx_data[3];
 8005c5a:	4b6f      	ldr	r3, [pc, #444]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c5c:	78da      	ldrb	r2, [r3, #3]
 8005c5e:	4b70      	ldr	r3, [pc, #448]	; (8005e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>)
 8005c60:	705a      	strb	r2, [r3, #1]
			Batt_cycle.m_bytes[0] = Rx_data[4];
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c64:	791a      	ldrb	r2, [r3, #4]
 8005c66:	4b6f      	ldr	r3, [pc, #444]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x40c>)
 8005c68:	701a      	strb	r2, [r3, #0]
			Batt_cycle.m_bytes[1] = Rx_data[5];
 8005c6a:	4b6b      	ldr	r3, [pc, #428]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c6c:	795a      	ldrb	r2, [r3, #5]
 8005c6e:	4b6d      	ldr	r3, [pc, #436]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x40c>)
 8005c70:	705a      	strb	r2, [r3, #1]

			flag_trip_shortcircuit = Rx_data[6]&0x01;
 8005c72:	4b69      	ldr	r3, [pc, #420]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c74:	799b      	ldrb	r3, [r3, #6]
 8005c76:	f003 0301 	and.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 8005c7e:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentdischarge = (Rx_data[6]>>1)&0x01;
 8005c80:	4b65      	ldr	r3, [pc, #404]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c82:	799b      	ldrb	r3, [r3, #6]
 8005c84:	085b      	lsrs	r3, r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	4b67      	ldr	r3, [pc, #412]	; (8005e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 8005c90:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentcharge = (Rx_data[6]>>2)&0x01;
 8005c92:	4b61      	ldr	r3, [pc, #388]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005c94:	799b      	ldrb	r3, [r3, #6]
 8005c96:	089b      	lsrs	r3, r3, #2
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x418>)
 8005ca2:	701a      	strb	r2, [r3, #0]
			flag_trip_overtemperature = (Rx_data[6]>>3)&0x01;
 8005ca4:	4b5c      	ldr	r3, [pc, #368]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005ca6:	799b      	ldrb	r3, [r3, #6]
 8005ca8:	08db      	lsrs	r3, r3, #3
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	b2da      	uxtb	r2, r3
 8005cb2:	4b60      	ldr	r3, [pc, #384]	; (8005e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x41c>)
 8005cb4:	701a      	strb	r2, [r3, #0]
			flag_trip_undertemperature = (Rx_data[6]>>4)&0x01;
 8005cb6:	4b58      	ldr	r3, [pc, #352]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005cb8:	799b      	ldrb	r3, [r3, #6]
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	4b5c      	ldr	r3, [pc, #368]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x420>)
 8005cc6:	701a      	strb	r2, [r3, #0]
			//flag_trip_overtemperature = (Rx_data[6]>>5)&0x01;
			//flag_trip_undertemperature = (Rx_data[6]>>6)&0x01;
			flag_trip_unbalance = (Rx_data[6]>>7)&0x01;
 8005cc8:	4b53      	ldr	r3, [pc, #332]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005cca:	799b      	ldrb	r3, [r3, #6]
 8005ccc:	09db      	lsrs	r3, r3, #7
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	4b5a      	ldr	r3, [pc, #360]	; (8005e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x424>)
 8005cd2:	701a      	strb	r2, [r3, #0]
			flag_trip_undervoltage = Rx_data[7]&0x01;
 8005cd4:	4b50      	ldr	r3, [pc, #320]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005cd6:	79db      	ldrb	r3, [r3, #7]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	4b58      	ldr	r3, [pc, #352]	; (8005e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x428>)
 8005ce0:	701a      	strb	r2, [r3, #0]
			flag_trip_overvoltage = (Rx_data[7]<<1)&0x01;
 8005ce2:	4b58      	ldr	r3, [pc, #352]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x42c>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
			flag_trip_SOCOverDischarge = (Rx_data[7]<<2)&0x01;
 8005ce8:	4b57      	ldr	r3, [pc, #348]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x430>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
			flag_trip_systemfailure = (Rx_data[7]<<3)&0x01;
 8005cee:	4b57      	ldr	r3, [pc, #348]	; (8005e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x434>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
			charge_state = (Rx_data[7]<<4)&0x01;
 8005cf4:	4b56      	ldr	r3, [pc, #344]	; (8005e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x438>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]
			discharge_state = (Rx_data[7]<<5)&0x01;
 8005cfa:	4b56      	ldr	r3, [pc, #344]	; (8005e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x43c>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	701a      	strb	r2, [r3, #0]
			sleep_state = (Rx_data[7]<<6)&0x01;
 8005d00:	4b55      	ldr	r3, [pc, #340]	; (8005e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x440>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	701a      	strb	r2, [r3, #0]

			BPack_byte6 = Rx_data[6];
 8005d06:	4b44      	ldr	r3, [pc, #272]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d08:	799a      	ldrb	r2, [r3, #6]
 8005d0a:	4b54      	ldr	r3, [pc, #336]	; (8005e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x444>)
 8005d0c:	701a      	strb	r2, [r3, #0]
			BPack_byte7 = Rx_data[7];
 8005d0e:	4b42      	ldr	r3, [pc, #264]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d10:	79da      	ldrb	r2, [r3, #7]
 8005d12:	4b53      	ldr	r3, [pc, #332]	; (8005e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x448>)
 8005d14:	701a      	strb	r2, [r3, #0]

			BPack_Capacity = Batt_capacity.m_uint16t/10;
 8005d16:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8005d18:	881b      	ldrh	r3, [r3, #0]
 8005d1a:	4a52      	ldr	r2, [pc, #328]	; (8005e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x44c>)
 8005d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d20:	08db      	lsrs	r3, r3, #3
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7fa fff5 	bl	8000d14 <__aeabi_i2f>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	4b4e      	ldr	r3, [pc, #312]	; (8005e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x450>)
 8005d2e:	601a      	str	r2, [r3, #0]
			BPack_SOH = Batt_SOH.m_uint16t;
 8005d30:	4b3b      	ldr	r3, [pc, #236]	; (8005e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>)
 8005d32:	881b      	ldrh	r3, [r3, #0]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fa ffe9 	bl	8000d0c <__aeabi_ui2f>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x454>)
 8005d3e:	601a      	str	r2, [r3, #0]
			BPack_cycle = Batt_cycle.m_uint16t;
 8005d40:	4b38      	ldr	r3, [pc, #224]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x40c>)
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fa ffe1 	bl	8000d0c <__aeabi_ui2f>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	4b48      	ldr	r3, [pc, #288]	; (8005e70 <HAL_CAN_RxFifo0MsgPendingCallback+0x458>)
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e1f8      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
		}


		// *********************** Start Cell  Voltage Data Send ******************************
		else if(Rx_Header.StdId == 0x0B4){
 8005d52:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2bb4      	cmp	r3, #180	; 0xb4
 8005d58:	f040 8098 	bne.w	8005e8c <HAL_CAN_RxFifo0MsgPendingCallback+0x474>
			vcell_15databyte[0].m_bytes[0] = Rx_data[0];
 8005d5c:	4b2e      	ldr	r3, [pc, #184]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d5e:	781a      	ldrb	r2, [r3, #0]
 8005d60:	4b44      	ldr	r3, [pc, #272]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d62:	701a      	strb	r2, [r3, #0]
			vcell_15databyte[0].m_bytes[1] = Rx_data[1];
 8005d64:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d66:	785a      	ldrb	r2, [r3, #1]
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d6a:	705a      	strb	r2, [r3, #1]
			vcell_15databyte[1].m_bytes[0] = Rx_data[2];
 8005d6c:	4b2a      	ldr	r3, [pc, #168]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d6e:	789a      	ldrb	r2, [r3, #2]
 8005d70:	4b40      	ldr	r3, [pc, #256]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d72:	711a      	strb	r2, [r3, #4]
			vcell_15databyte[1].m_bytes[1] = Rx_data[3];
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d76:	78da      	ldrb	r2, [r3, #3]
 8005d78:	4b3e      	ldr	r3, [pc, #248]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d7a:	715a      	strb	r2, [r3, #5]
			vcell_15databyte[2].m_bytes[0] = Rx_data[4];
 8005d7c:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d7e:	791a      	ldrb	r2, [r3, #4]
 8005d80:	4b3c      	ldr	r3, [pc, #240]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d82:	721a      	strb	r2, [r3, #8]
			vcell_15databyte[2].m_bytes[1] = Rx_data[5];
 8005d84:	4b24      	ldr	r3, [pc, #144]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d86:	795a      	ldrb	r2, [r3, #5]
 8005d88:	4b3a      	ldr	r3, [pc, #232]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d8a:	725a      	strb	r2, [r3, #9]
			vcell_15databyte[3].m_bytes[0] = Rx_data[6];
 8005d8c:	4b22      	ldr	r3, [pc, #136]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d8e:	799a      	ldrb	r2, [r3, #6]
 8005d90:	4b38      	ldr	r3, [pc, #224]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d92:	731a      	strb	r2, [r3, #12]
			vcell_15databyte[3].m_bytes[1] = Rx_data[7];
 8005d94:	4b20      	ldr	r3, [pc, #128]	; (8005e18 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 8005d96:	79da      	ldrb	r2, [r3, #7]
 8005d98:	4b36      	ldr	r3, [pc, #216]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d9a:	735a      	strb	r2, [r3, #13]

			vcell_1 = (float)vcell_15databyte[0].m_uint16t/1000;
 8005d9c:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005d9e:	881b      	ldrh	r3, [r3, #0]
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fa ffb3 	bl	8000d0c <__aeabi_ui2f>
 8005da6:	4603      	mov	r3, r0
 8005da8:	4933      	ldr	r1, [pc, #204]	; (8005e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fb f8ba 	bl	8000f24 <__aeabi_fdiv>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x464>)
 8005db6:	601a      	str	r2, [r3, #0]
			vcell_2 = (float)vcell_15databyte[1].m_uint16t/1000;
 8005db8:	4b2e      	ldr	r3, [pc, #184]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005dba:	889b      	ldrh	r3, [r3, #4]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fa ffa5 	bl	8000d0c <__aeabi_ui2f>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	492c      	ldr	r1, [pc, #176]	; (8005e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fb f8ac 	bl	8000f24 <__aeabi_fdiv>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x468>)
 8005dd2:	601a      	str	r2, [r3, #0]
			vcell_3 = (float)vcell_15databyte[2].m_uint16t/1000;
 8005dd4:	4b27      	ldr	r3, [pc, #156]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005dd6:	891b      	ldrh	r3, [r3, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fa ff97 	bl	8000d0c <__aeabi_ui2f>
 8005dde:	4603      	mov	r3, r0
 8005de0:	4925      	ldr	r1, [pc, #148]	; (8005e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fb f89e 	bl	8000f24 <__aeabi_fdiv>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	4b25      	ldr	r3, [pc, #148]	; (8005e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x46c>)
 8005dee:	601a      	str	r2, [r3, #0]
			vcell_4 = (float)vcell_15databyte[3].m_uint16t/1000;
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x45c>)
 8005df2:	899b      	ldrh	r3, [r3, #12]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa ff89 	bl	8000d0c <__aeabi_ui2f>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	491e      	ldr	r1, [pc, #120]	; (8005e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x460>)
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fb f890 	bl	8000f24 <__aeabi_fdiv>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <HAL_CAN_RxFifo0MsgPendingCallback+0x470>)
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	e19a      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
 8005e0e:	bf00      	nop
 8005e10:	200015a8 	.word	0x200015a8
 8005e14:	20000adc 	.word	0x20000adc
 8005e18:	200013f0 	.word	0x200013f0
 8005e1c:	200012e0 	.word	0x200012e0
 8005e20:	200006b8 	.word	0x200006b8
 8005e24:	20000cb4 	.word	0x20000cb4
 8005e28:	200006cc 	.word	0x200006cc
 8005e2c:	20000cd0 	.word	0x20000cd0
 8005e30:	20000d80 	.word	0x20000d80
 8005e34:	200008d8 	.word	0x200008d8
 8005e38:	20000af4 	.word	0x20000af4
 8005e3c:	200006a4 	.word	0x200006a4
 8005e40:	20000afc 	.word	0x20000afc
 8005e44:	20001308 	.word	0x20001308
 8005e48:	20000da0 	.word	0x20000da0
 8005e4c:	200006fc 	.word	0x200006fc
 8005e50:	20000f50 	.word	0x20000f50
 8005e54:	20000900 	.word	0x20000900
 8005e58:	20001310 	.word	0x20001310
 8005e5c:	20000cc8 	.word	0x20000cc8
 8005e60:	20000690 	.word	0x20000690
 8005e64:	cccccccd 	.word	0xcccccccd
 8005e68:	200012bc 	.word	0x200012bc
 8005e6c:	20000730 	.word	0x20000730
 8005e70:	200008dc 	.word	0x200008dc
 8005e74:	20000d28 	.word	0x20000d28
 8005e78:	447a0000 	.word	0x447a0000
 8005e7c:	20000674 	.word	0x20000674
 8005e80:	200006c4 	.word	0x200006c4
 8005e84:	20000f4c 	.word	0x20000f4c
 8005e88:	20000ae8 	.word	0x20000ae8
		}

		else if(Rx_Header.StdId == 0x0B5){
 8005e8c:	4b8c      	ldr	r3, [pc, #560]	; (80060c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a8>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2bb5      	cmp	r3, #181	; 0xb5
 8005e92:	d158      	bne.n	8005f46 <HAL_CAN_RxFifo0MsgPendingCallback+0x52e>
			vcell_15databyte[4].m_bytes[0] = Rx_data[0];
 8005e94:	4b8b      	ldr	r3, [pc, #556]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005e96:	781a      	ldrb	r2, [r3, #0]
 8005e98:	4b8b      	ldr	r3, [pc, #556]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005e9a:	741a      	strb	r2, [r3, #16]
			vcell_15databyte[4].m_bytes[1] = Rx_data[1];
 8005e9c:	4b89      	ldr	r3, [pc, #548]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005e9e:	785a      	ldrb	r2, [r3, #1]
 8005ea0:	4b89      	ldr	r3, [pc, #548]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005ea2:	745a      	strb	r2, [r3, #17]
			vcell_15databyte[5].m_bytes[0] = Rx_data[2];
 8005ea4:	4b87      	ldr	r3, [pc, #540]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005ea6:	789a      	ldrb	r2, [r3, #2]
 8005ea8:	4b87      	ldr	r3, [pc, #540]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005eaa:	751a      	strb	r2, [r3, #20]
			vcell_15databyte[5].m_bytes[1] = Rx_data[3];
 8005eac:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005eae:	78da      	ldrb	r2, [r3, #3]
 8005eb0:	4b85      	ldr	r3, [pc, #532]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005eb2:	755a      	strb	r2, [r3, #21]
			vcell_15databyte[6].m_bytes[0] = Rx_data[4];
 8005eb4:	4b83      	ldr	r3, [pc, #524]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005eb6:	791a      	ldrb	r2, [r3, #4]
 8005eb8:	4b83      	ldr	r3, [pc, #524]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005eba:	761a      	strb	r2, [r3, #24]
			vcell_15databyte[6].m_bytes[1] = Rx_data[5];
 8005ebc:	4b81      	ldr	r3, [pc, #516]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005ebe:	795a      	ldrb	r2, [r3, #5]
 8005ec0:	4b81      	ldr	r3, [pc, #516]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005ec2:	765a      	strb	r2, [r3, #25]
			vcell_15databyte[7].m_bytes[0] = Rx_data[6];
 8005ec4:	4b7f      	ldr	r3, [pc, #508]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005ec6:	799a      	ldrb	r2, [r3, #6]
 8005ec8:	4b7f      	ldr	r3, [pc, #508]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005eca:	771a      	strb	r2, [r3, #28]
			vcell_15databyte[7].m_bytes[1] = Rx_data[7];
 8005ecc:	4b7d      	ldr	r3, [pc, #500]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005ece:	79da      	ldrb	r2, [r3, #7]
 8005ed0:	4b7d      	ldr	r3, [pc, #500]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005ed2:	775a      	strb	r2, [r3, #29]

			vcell_5 = (float)vcell_15databyte[4].m_uint16t/1000;
 8005ed4:	4b7c      	ldr	r3, [pc, #496]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005ed6:	8a1b      	ldrh	r3, [r3, #16]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fa ff17 	bl	8000d0c <__aeabi_ui2f>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	497a      	ldr	r1, [pc, #488]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fb f81e 	bl	8000f24 <__aeabi_fdiv>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	461a      	mov	r2, r3
 8005eec:	4b78      	ldr	r3, [pc, #480]	; (80060d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b8>)
 8005eee:	601a      	str	r2, [r3, #0]
			vcell_6 = (float)vcell_15databyte[5].m_uint16t/1000;
 8005ef0:	4b75      	ldr	r3, [pc, #468]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005ef2:	8a9b      	ldrh	r3, [r3, #20]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fa ff09 	bl	8000d0c <__aeabi_ui2f>
 8005efa:	4603      	mov	r3, r0
 8005efc:	4973      	ldr	r1, [pc, #460]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7fb f810 	bl	8000f24 <__aeabi_fdiv>
 8005f04:	4603      	mov	r3, r0
 8005f06:	461a      	mov	r2, r3
 8005f08:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6bc>)
 8005f0a:	601a      	str	r2, [r3, #0]
			vcell_7 = (float)vcell_15databyte[6].m_uint16t/1000;
 8005f0c:	4b6e      	ldr	r3, [pc, #440]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f0e:	8b1b      	ldrh	r3, [r3, #24]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fa fefb 	bl	8000d0c <__aeabi_ui2f>
 8005f16:	4603      	mov	r3, r0
 8005f18:	496c      	ldr	r1, [pc, #432]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fb f802 	bl	8000f24 <__aeabi_fdiv>
 8005f20:	4603      	mov	r3, r0
 8005f22:	461a      	mov	r2, r3
 8005f24:	4b6c      	ldr	r3, [pc, #432]	; (80060d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c0>)
 8005f26:	601a      	str	r2, [r3, #0]
			vcell_8 = (float)vcell_15databyte[7].m_uint16t/1000;
 8005f28:	4b67      	ldr	r3, [pc, #412]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f2a:	8b9b      	ldrh	r3, [r3, #28]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa feed 	bl	8000d0c <__aeabi_ui2f>
 8005f32:	4603      	mov	r3, r0
 8005f34:	4965      	ldr	r1, [pc, #404]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fa fff4 	bl	8000f24 <__aeabi_fdiv>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	461a      	mov	r2, r3
 8005f40:	4b66      	ldr	r3, [pc, #408]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x6c4>)
 8005f42:	601a      	str	r2, [r3, #0]
 8005f44:	e0fe      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
		}

		else if(Rx_Header.StdId == 0x0B6){
 8005f46:	4b5e      	ldr	r3, [pc, #376]	; (80060c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2bb6      	cmp	r3, #182	; 0xb6
 8005f4c:	d160      	bne.n	8006010 <HAL_CAN_RxFifo0MsgPendingCallback+0x5f8>
			vcell_15databyte[8].m_bytes[0] = Rx_data[0];
 8005f4e:	4b5d      	ldr	r3, [pc, #372]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f50:	781a      	ldrb	r2, [r3, #0]
 8005f52:	4b5d      	ldr	r3, [pc, #372]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f54:	f883 2020 	strb.w	r2, [r3, #32]
			vcell_15databyte[8].m_bytes[1] = Rx_data[1];
 8005f58:	4b5a      	ldr	r3, [pc, #360]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f5a:	785a      	ldrb	r2, [r3, #1]
 8005f5c:	4b5a      	ldr	r3, [pc, #360]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			vcell_15databyte[9].m_bytes[0] = Rx_data[2];
 8005f62:	4b58      	ldr	r3, [pc, #352]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f64:	789a      	ldrb	r2, [r3, #2]
 8005f66:	4b58      	ldr	r3, [pc, #352]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			vcell_15databyte[9].m_bytes[1] = Rx_data[3];
 8005f6c:	4b55      	ldr	r3, [pc, #340]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f6e:	78da      	ldrb	r2, [r3, #3]
 8005f70:	4b55      	ldr	r3, [pc, #340]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			vcell_15databyte[10].m_bytes[0] = Rx_data[4];
 8005f76:	4b53      	ldr	r3, [pc, #332]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f78:	791a      	ldrb	r2, [r3, #4]
 8005f7a:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			vcell_15databyte[10].m_bytes[1] = Rx_data[5];
 8005f80:	4b50      	ldr	r3, [pc, #320]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f82:	795a      	ldrb	r2, [r3, #5]
 8005f84:	4b50      	ldr	r3, [pc, #320]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f86:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			vcell_15databyte[11].m_bytes[0] = Rx_data[6];
 8005f8a:	4b4e      	ldr	r3, [pc, #312]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f8c:	799a      	ldrb	r2, [r3, #6]
 8005f8e:	4b4e      	ldr	r3, [pc, #312]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			vcell_15databyte[11].m_bytes[1] = Rx_data[7];
 8005f94:	4b4b      	ldr	r3, [pc, #300]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8005f96:	79da      	ldrb	r2, [r3, #7]
 8005f98:	4b4b      	ldr	r3, [pc, #300]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005f9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

			vcell_9 = (float)vcell_15databyte[8].m_uint16t/1000;
 8005f9e:	4b4a      	ldr	r3, [pc, #296]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005fa0:	8c1b      	ldrh	r3, [r3, #32]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa feb2 	bl	8000d0c <__aeabi_ui2f>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4948      	ldr	r1, [pc, #288]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa ffb9 	bl	8000f24 <__aeabi_fdiv>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	4b4a      	ldr	r3, [pc, #296]	; (80060e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c8>)
 8005fb8:	601a      	str	r2, [r3, #0]
			vcell_10 = (float)vcell_15databyte[9].m_uint16t/1000;
 8005fba:	4b43      	ldr	r3, [pc, #268]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005fbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fa fea4 	bl	8000d0c <__aeabi_ui2f>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4941      	ldr	r1, [pc, #260]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fa ffab 	bl	8000f24 <__aeabi_fdiv>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	4b44      	ldr	r3, [pc, #272]	; (80060e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6cc>)
 8005fd4:	601a      	str	r2, [r3, #0]
			vcell_11 = (float)vcell_15databyte[10].m_uint16t/1000;
 8005fd6:	4b3c      	ldr	r3, [pc, #240]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fa fe96 	bl	8000d0c <__aeabi_ui2f>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	493a      	ldr	r1, [pc, #232]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f7fa ff9d 	bl	8000f24 <__aeabi_fdiv>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	4b3e      	ldr	r3, [pc, #248]	; (80060e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d0>)
 8005ff0:	601a      	str	r2, [r3, #0]
			vcell_12 = (float)vcell_15databyte[11].m_uint16t/1000;
 8005ff2:	4b35      	ldr	r3, [pc, #212]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8005ff4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fa fe88 	bl	8000d0c <__aeabi_ui2f>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4933      	ldr	r1, [pc, #204]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8006000:	4618      	mov	r0, r3
 8006002:	f7fa ff8f 	bl	8000f24 <__aeabi_fdiv>
 8006006:	4603      	mov	r3, r0
 8006008:	461a      	mov	r2, r3
 800600a:	4b38      	ldr	r3, [pc, #224]	; (80060ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6d4>)
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e099      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
		}

		else if(Rx_Header.StdId == 0x0B7){
 8006010:	4b2b      	ldr	r3, [pc, #172]	; (80060c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6a8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2bb7      	cmp	r3, #183	; 0xb7
 8006016:	d171      	bne.n	80060fc <HAL_CAN_RxFifo0MsgPendingCallback+0x6e4>
			vcell_15databyte[12].m_bytes[0] = Rx_data[0];
 8006018:	4b2a      	ldr	r3, [pc, #168]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 800601a:	781a      	ldrb	r2, [r3, #0]
 800601c:	4b2a      	ldr	r3, [pc, #168]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 800601e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			vcell_15databyte[12].m_bytes[1] = Rx_data[1];
 8006022:	4b28      	ldr	r3, [pc, #160]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8006024:	785a      	ldrb	r2, [r3, #1]
 8006026:	4b28      	ldr	r3, [pc, #160]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8006028:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			vcell_15databyte[13].m_bytes[0] = Rx_data[2];
 800602c:	4b25      	ldr	r3, [pc, #148]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 800602e:	789a      	ldrb	r2, [r3, #2]
 8006030:	4b25      	ldr	r3, [pc, #148]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8006032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			vcell_15databyte[13].m_bytes[1] = Rx_data[3];
 8006036:	4b23      	ldr	r3, [pc, #140]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8006038:	78da      	ldrb	r2, [r3, #3]
 800603a:	4b23      	ldr	r3, [pc, #140]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 800603c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			vcell_15databyte[14].m_bytes[0] = Rx_data[4];
 8006040:	4b20      	ldr	r3, [pc, #128]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8006042:	791a      	ldrb	r2, [r3, #4]
 8006044:	4b20      	ldr	r3, [pc, #128]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8006046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			vcell_15databyte[14].m_bytes[1] = Rx_data[5];
 800604a:	4b1e      	ldr	r3, [pc, #120]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 800604c:	795a      	ldrb	r2, [r3, #5]
 800604e:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8006050:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			vcell_15databyte[15].m_bytes[0] = Rx_data[6];
 8006054:	4b1b      	ldr	r3, [pc, #108]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8006056:	799a      	ldrb	r2, [r3, #6]
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 800605a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			vcell_15databyte[15].m_bytes[1] = Rx_data[7];
 800605e:	4b19      	ldr	r3, [pc, #100]	; (80060c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6ac>)
 8006060:	79da      	ldrb	r2, [r3, #7]
 8006062:	4b19      	ldr	r3, [pc, #100]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8006064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

			vcell_13 = (float)vcell_15databyte[12].m_uint16t/1000;
 8006068:	4b17      	ldr	r3, [pc, #92]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 800606a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800606c:	4618      	mov	r0, r3
 800606e:	f7fa fe4d 	bl	8000d0c <__aeabi_ui2f>
 8006072:	4603      	mov	r3, r0
 8006074:	4915      	ldr	r1, [pc, #84]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8006076:	4618      	mov	r0, r3
 8006078:	f7fa ff54 	bl	8000f24 <__aeabi_fdiv>
 800607c:	4603      	mov	r3, r0
 800607e:	461a      	mov	r2, r3
 8006080:	4b1b      	ldr	r3, [pc, #108]	; (80060f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d8>)
 8006082:	601a      	str	r2, [r3, #0]
			vcell_14 = (float)vcell_15databyte[13].m_uint16t/1000;
 8006084:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 8006086:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8006088:	4618      	mov	r0, r3
 800608a:	f7fa fe3f 	bl	8000d0c <__aeabi_ui2f>
 800608e:	4603      	mov	r3, r0
 8006090:	490e      	ldr	r1, [pc, #56]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 8006092:	4618      	mov	r0, r3
 8006094:	f7fa ff46 	bl	8000f24 <__aeabi_fdiv>
 8006098:	4603      	mov	r3, r0
 800609a:	461a      	mov	r2, r3
 800609c:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6dc>)
 800609e:	601a      	str	r2, [r3, #0]
			vcell_15 = (float)vcell_15databyte[14].m_uint16t/1000;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6b0>)
 80060a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7fa fe31 	bl	8000d0c <__aeabi_ui2f>
 80060aa:	4603      	mov	r3, r0
 80060ac:	4907      	ldr	r1, [pc, #28]	; (80060cc <HAL_CAN_RxFifo0MsgPendingCallback+0x6b4>)
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa ff38 	bl	8000f24 <__aeabi_fdiv>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461a      	mov	r2, r3
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e0>)
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e042      	b.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
 80060be:	bf00      	nop
 80060c0:	200015a8 	.word	0x200015a8
 80060c4:	200013f0 	.word	0x200013f0
 80060c8:	20000d28 	.word	0x20000d28
 80060cc:	447a0000 	.word	0x447a0000
 80060d0:	20001328 	.word	0x20001328
 80060d4:	200006e8 	.word	0x200006e8
 80060d8:	20001100 	.word	0x20001100
 80060dc:	20001304 	.word	0x20001304
 80060e0:	20000cd8 	.word	0x20000cd8
 80060e4:	20000680 	.word	0x20000680
 80060e8:	20000d90 	.word	0x20000d90
 80060ec:	20000f60 	.word	0x20000f60
 80060f0:	20000af0 	.word	0x20000af0
 80060f4:	20000cc0 	.word	0x20000cc0
 80060f8:	2000071c 	.word	0x2000071c
		}
			// ******************************End Cell  Voltage Data Send**************************************
		else if(Rx_Header.StdId == 0x0BA){
 80060fc:	4b19      	ldr	r3, [pc, #100]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0x74c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2bba      	cmp	r3, #186	; 0xba
 8006102:	d11f      	bne.n	8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x72c>
			Bpack_maxvoltage.m_bytes[0] = Rx_data[0];
 8006104:	4b18      	ldr	r3, [pc, #96]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 8006106:	781a      	ldrb	r2, [r3, #0]
 8006108:	4b18      	ldr	r3, [pc, #96]	; (800616c <HAL_CAN_RxFifo0MsgPendingCallback+0x754>)
 800610a:	701a      	strb	r2, [r3, #0]
			Bpack_maxvoltage.m_bytes[1] = Rx_data[1];
 800610c:	4b16      	ldr	r3, [pc, #88]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 800610e:	785a      	ldrb	r2, [r3, #1]
 8006110:	4b16      	ldr	r3, [pc, #88]	; (800616c <HAL_CAN_RxFifo0MsgPendingCallback+0x754>)
 8006112:	705a      	strb	r2, [r3, #1]
			Bpack_maxchargecurrent.m_bytes[0] = Rx_data[0];
 8006114:	4b14      	ldr	r3, [pc, #80]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <HAL_CAN_RxFifo0MsgPendingCallback+0x758>)
 800611a:	701a      	strb	r2, [r3, #0]
			Bpack_maxchargecurrent.m_bytes[1] = Rx_data[1];
 800611c:	4b12      	ldr	r3, [pc, #72]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 800611e:	785a      	ldrb	r2, [r3, #1]
 8006120:	4b13      	ldr	r3, [pc, #76]	; (8006170 <HAL_CAN_RxFifo0MsgPendingCallback+0x758>)
 8006122:	705a      	strb	r2, [r3, #1]
			Bpack_maxdischargecurrent.m_bytes[0] = Rx_data[0];
 8006124:	4b10      	ldr	r3, [pc, #64]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	4b12      	ldr	r3, [pc, #72]	; (8006174 <HAL_CAN_RxFifo0MsgPendingCallback+0x75c>)
 800612a:	701a      	strb	r2, [r3, #0]
			Bpack_maxdischargecurrent.m_bytes[1] = Rx_data[1];
 800612c:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 800612e:	785a      	ldrb	r2, [r3, #1]
 8006130:	4b10      	ldr	r3, [pc, #64]	; (8006174 <HAL_CAN_RxFifo0MsgPendingCallback+0x75c>)
 8006132:	705a      	strb	r2, [r3, #1]
			Bpack_maxtemp.m_bytes[0] = Rx_data[0];
 8006134:	4b0c      	ldr	r3, [pc, #48]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 8006136:	781a      	ldrb	r2, [r3, #0]
 8006138:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <HAL_CAN_RxFifo0MsgPendingCallback+0x760>)
 800613a:	701a      	strb	r2, [r3, #0]
			Bpack_maxtemp.m_bytes[1] = Rx_data[1];
 800613c:	4b0a      	ldr	r3, [pc, #40]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 800613e:	785a      	ldrb	r2, [r3, #1]
 8006140:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_CAN_RxFifo0MsgPendingCallback+0x760>)
 8006142:	705a      	strb	r2, [r3, #1]
		}
	Rx_Header.ExtId = 0;
 8006144:	4b07      	ldr	r3, [pc, #28]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0x74c>)
 8006146:	2200      	movs	r2, #0
 8006148:	605a      	str	r2, [r3, #4]
	Rx_Header.StdId = 0;
 800614a:	4b06      	ldr	r3, [pc, #24]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0x74c>)
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
	memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 8006150:	2208      	movs	r2, #8
 8006152:	2100      	movs	r1, #0
 8006154:	4804      	ldr	r0, [pc, #16]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0x750>)
 8006156:	f007 ff99 	bl	800e08c <memset>
	}
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	200015a8 	.word	0x200015a8
 8006168:	200013f0 	.word	0x200013f0
 800616c:	2000068c 	.word	0x2000068c
 8006170:	20000af8 	.word	0x20000af8
 8006174:	200006a8 	.word	0x200006a8
 8006178:	20000d74 	.word	0x20000d74

0800617c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	4b0c      	ldr	r3, [pc, #48]	; (80061b8 <MX_DMA_Init+0x3c>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	4a0b      	ldr	r2, [pc, #44]	; (80061b8 <MX_DMA_Init+0x3c>)
 800618c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006190:	6313      	str	r3, [r2, #48]	; 0x30
 8006192:	4b09      	ldr	r3, [pc, #36]	; (80061b8 <MX_DMA_Init+0x3c>)
 8006194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800619a:	607b      	str	r3, [r7, #4]
 800619c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800619e:	2200      	movs	r2, #0
 80061a0:	2100      	movs	r1, #0
 80061a2:	2038      	movs	r0, #56	; 0x38
 80061a4:	f004 f88f 	bl	800a2c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80061a8:	2038      	movs	r0, #56	; 0x38
 80061aa:	f004 f8a8 	bl	800a2fe <HAL_NVIC_EnableIRQ>

}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40023800 	.word	0x40023800

080061bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b088      	sub	sp, #32
 80061c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c2:	f107 030c 	add.w	r3, r7, #12
 80061c6:	2200      	movs	r2, #0
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	605a      	str	r2, [r3, #4]
 80061cc:	609a      	str	r2, [r3, #8]
 80061ce:	60da      	str	r2, [r3, #12]
 80061d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061d2:	2300      	movs	r3, #0
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <MX_GPIO_Init+0xc8>)
 80061d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061da:	4a2a      	ldr	r2, [pc, #168]	; (8006284 <MX_GPIO_Init+0xc8>)
 80061dc:	f043 0304 	orr.w	r3, r3, #4
 80061e0:	6313      	str	r3, [r2, #48]	; 0x30
 80061e2:	4b28      	ldr	r3, [pc, #160]	; (8006284 <MX_GPIO_Init+0xc8>)
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	f003 0304 	and.w	r3, r3, #4
 80061ea:	60bb      	str	r3, [r7, #8]
 80061ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
 80061f2:	4b24      	ldr	r3, [pc, #144]	; (8006284 <MX_GPIO_Init+0xc8>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	4a23      	ldr	r2, [pc, #140]	; (8006284 <MX_GPIO_Init+0xc8>)
 80061f8:	f043 0301 	orr.w	r3, r3, #1
 80061fc:	6313      	str	r3, [r2, #48]	; 0x30
 80061fe:	4b21      	ldr	r3, [pc, #132]	; (8006284 <MX_GPIO_Init+0xc8>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f003 0301 	and.w	r3, r3, #1
 8006206:	607b      	str	r3, [r7, #4]
 8006208:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	603b      	str	r3, [r7, #0]
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <MX_GPIO_Init+0xc8>)
 8006210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006212:	4a1c      	ldr	r2, [pc, #112]	; (8006284 <MX_GPIO_Init+0xc8>)
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	6313      	str	r3, [r2, #48]	; 0x30
 800621a:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <MX_GPIO_Init+0xc8>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 8006226:	2200      	movs	r2, #0
 8006228:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800622c:	4816      	ldr	r0, [pc, #88]	; (8006288 <MX_GPIO_Init+0xcc>)
 800622e:	f004 fdad 	bl	800ad8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led3_Pin|RS485_EN_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8006232:	2200      	movs	r2, #0
 8006234:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8006238:	4814      	ldr	r0, [pc, #80]	; (800628c <MX_GPIO_Init+0xd0>)
 800623a:	f004 fda7 	bl	800ad8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 800623e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006242:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006244:	2301      	movs	r3, #1
 8006246:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800624c:	2300      	movs	r3, #0
 800624e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006250:	f107 030c 	add.w	r3, r7, #12
 8006254:	4619      	mov	r1, r3
 8006256:	480c      	ldr	r0, [pc, #48]	; (8006288 <MX_GPIO_Init+0xcc>)
 8006258:	f004 fbfa 	bl	800aa50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Led3_Pin|RS485_EN_Pin|Buzzer_Pin;
 800625c:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8006260:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006262:	2301      	movs	r3, #1
 8006264:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800626a:	2300      	movs	r3, #0
 800626c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	4619      	mov	r1, r3
 8006274:	4805      	ldr	r0, [pc, #20]	; (800628c <MX_GPIO_Init+0xd0>)
 8006276:	f004 fbeb 	bl	800aa50 <HAL_GPIO_Init>

}
 800627a:	bf00      	nop
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	40023800 	.word	0x40023800
 8006288:	40020400 	.word	0x40020400
 800628c:	40020800 	.word	0x40020800

08006290 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006294:	4b12      	ldr	r3, [pc, #72]	; (80062e0 <MX_I2C1_Init+0x50>)
 8006296:	4a13      	ldr	r2, [pc, #76]	; (80062e4 <MX_I2C1_Init+0x54>)
 8006298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <MX_I2C1_Init+0x50>)
 800629c:	4a12      	ldr	r2, [pc, #72]	; (80062e8 <MX_I2C1_Init+0x58>)
 800629e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80062a6:	4b0e      	ldr	r3, [pc, #56]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062c0:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80062c6:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80062cc:	4804      	ldr	r0, [pc, #16]	; (80062e0 <MX_I2C1_Init+0x50>)
 80062ce:	f004 fd8f 	bl	800adf0 <HAL_I2C_Init>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80062d8:	f000 fcb4 	bl	8006c44 <Error_Handler>
  }

}
 80062dc:	bf00      	nop
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20001428 	.word	0x20001428
 80062e4:	40005400 	.word	0x40005400
 80062e8:	000186a0 	.word	0x000186a0

080062ec <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <MX_I2C2_Init+0x50>)
 80062f2:	4a13      	ldr	r2, [pc, #76]	; (8006340 <MX_I2C2_Init+0x54>)
 80062f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80062f6:	4b11      	ldr	r3, [pc, #68]	; (800633c <MX_I2C2_Init+0x50>)
 80062f8:	4a12      	ldr	r2, [pc, #72]	; (8006344 <MX_I2C2_Init+0x58>)
 80062fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <MX_I2C2_Init+0x50>)
 80062fe:	2200      	movs	r2, #0
 8006300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006302:	4b0e      	ldr	r3, [pc, #56]	; (800633c <MX_I2C2_Init+0x50>)
 8006304:	2200      	movs	r2, #0
 8006306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <MX_I2C2_Init+0x50>)
 800630a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800630e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <MX_I2C2_Init+0x50>)
 8006312:	2200      	movs	r2, #0
 8006314:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006316:	4b09      	ldr	r3, [pc, #36]	; (800633c <MX_I2C2_Init+0x50>)
 8006318:	2200      	movs	r2, #0
 800631a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800631c:	4b07      	ldr	r3, [pc, #28]	; (800633c <MX_I2C2_Init+0x50>)
 800631e:	2200      	movs	r2, #0
 8006320:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006322:	4b06      	ldr	r3, [pc, #24]	; (800633c <MX_I2C2_Init+0x50>)
 8006324:	2200      	movs	r2, #0
 8006326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006328:	4804      	ldr	r0, [pc, #16]	; (800633c <MX_I2C2_Init+0x50>)
 800632a:	f004 fd61 	bl	800adf0 <HAL_I2C_Init>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006334:	f000 fc86 	bl	8006c44 <Error_Handler>
  }

}
 8006338:	bf00      	nop
 800633a:	bd80      	pop	{r7, pc}
 800633c:	2000147c 	.word	0x2000147c
 8006340:	40005800 	.word	0x40005800
 8006344:	00061a80 	.word	0x00061a80

08006348 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08c      	sub	sp, #48	; 0x30
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006350:	f107 031c 	add.w	r3, r7, #28
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	605a      	str	r2, [r3, #4]
 800635a:	609a      	str	r2, [r3, #8]
 800635c:	60da      	str	r2, [r3, #12]
 800635e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a33      	ldr	r2, [pc, #204]	; (8006434 <HAL_I2C_MspInit+0xec>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d12d      	bne.n	80063c6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	61bb      	str	r3, [r7, #24]
 800636e:	4b32      	ldr	r3, [pc, #200]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	4a31      	ldr	r2, [pc, #196]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 8006374:	f043 0302 	orr.w	r3, r3, #2
 8006378:	6313      	str	r3, [r2, #48]	; 0x30
 800637a:	4b2f      	ldr	r3, [pc, #188]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	61bb      	str	r3, [r7, #24]
 8006384:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006386:	f44f 7340 	mov.w	r3, #768	; 0x300
 800638a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800638c:	2312      	movs	r3, #18
 800638e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006390:	2301      	movs	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006394:	2303      	movs	r3, #3
 8006396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006398:	2304      	movs	r3, #4
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800639c:	f107 031c 	add.w	r3, r7, #28
 80063a0:	4619      	mov	r1, r3
 80063a2:	4826      	ldr	r0, [pc, #152]	; (800643c <HAL_I2C_MspInit+0xf4>)
 80063a4:	f004 fb54 	bl	800aa50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063a8:	2300      	movs	r3, #0
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	4b22      	ldr	r3, [pc, #136]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 80063ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b0:	4a21      	ldr	r2, [pc, #132]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 80063b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063b6:	6413      	str	r3, [r2, #64]	; 0x40
 80063b8:	4b1f      	ldr	r3, [pc, #124]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 80063ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80063c4:	e031      	b.n	800642a <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1d      	ldr	r2, [pc, #116]	; (8006440 <HAL_I2C_MspInit+0xf8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d12c      	bne.n	800642a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063d0:	2300      	movs	r3, #0
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	4b18      	ldr	r3, [pc, #96]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	4a17      	ldr	r2, [pc, #92]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 80063da:	f043 0302 	orr.w	r3, r3, #2
 80063de:	6313      	str	r3, [r2, #48]	; 0x30
 80063e0:	4b15      	ldr	r3, [pc, #84]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80063ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80063f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063f2:	2312      	movs	r3, #18
 80063f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063f6:	2301      	movs	r3, #1
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063fa:	2303      	movs	r3, #3
 80063fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80063fe:	2304      	movs	r3, #4
 8006400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006402:	f107 031c 	add.w	r3, r7, #28
 8006406:	4619      	mov	r1, r3
 8006408:	480c      	ldr	r0, [pc, #48]	; (800643c <HAL_I2C_MspInit+0xf4>)
 800640a:	f004 fb21 	bl	800aa50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	60fb      	str	r3, [r7, #12]
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	4a08      	ldr	r2, [pc, #32]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 8006418:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800641c:	6413      	str	r3, [r2, #64]	; 0x40
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_I2C_MspInit+0xf0>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	68fb      	ldr	r3, [r7, #12]
}
 800642a:	bf00      	nop
 800642c:	3730      	adds	r7, #48	; 0x30
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	40005400 	.word	0x40005400
 8006438:	40023800 	.word	0x40023800
 800643c:	40020400 	.word	0x40020400
 8006440:	40005800 	.word	0x40005800

08006444 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8006448:	4b09      	ldr	r3, [pc, #36]	; (8006470 <MX_IWDG_Init+0x2c>)
 800644a:	4a0a      	ldr	r2, [pc, #40]	; (8006474 <MX_IWDG_Init+0x30>)
 800644c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800644e:	4b08      	ldr	r3, [pc, #32]	; (8006470 <MX_IWDG_Init+0x2c>)
 8006450:	2204      	movs	r2, #4
 8006452:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8006454:	4b06      	ldr	r3, [pc, #24]	; (8006470 <MX_IWDG_Init+0x2c>)
 8006456:	f640 72ff 	movw	r2, #4095	; 0xfff
 800645a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800645c:	4804      	ldr	r0, [pc, #16]	; (8006470 <MX_IWDG_Init+0x2c>)
 800645e:	f005 fbc3 	bl	800bbe8 <HAL_IWDG_Init>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8006468:	f000 fbec 	bl	8006c44 <Error_Handler>
  }

}
 800646c:	bf00      	nop
 800646e:	bd80      	pop	{r7, pc}
 8006470:	200014d0 	.word	0x200014d0
 8006474:	40003000 	.word	0x40003000

08006478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800647c:	f002 fb5e 	bl	8008b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006480:	f000 f90a 	bl	8006698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006484:	f7ff fe9a 	bl	80061bc <MX_GPIO_Init>
  MX_DMA_Init();
 8006488:	f7ff fe78 	bl	800617c <MX_DMA_Init>
  MX_I2C2_Init();
 800648c:	f7ff ff2e 	bl	80062ec <MX_I2C2_Init>
  MX_TIM1_Init();
 8006490:	f002 f876 	bl	8008580 <MX_TIM1_Init>
  MX_CAN1_Init();
 8006494:	f7ff f97c 	bl	8005790 <MX_CAN1_Init>
  MX_I2C1_Init();
 8006498:	f7ff fefa 	bl	8006290 <MX_I2C1_Init>
  MX_ADC1_Init();
 800649c:	f7ff f812 	bl	80054c4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80064a0:	f002 f90e 	bl	80086c0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80064a4:	f002 faa6 	bl	80089f4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80064a8:	f002 f956 	bl	8008758 <MX_TIM3_Init>
  MX_IWDG_Init();
 80064ac:	f7ff ffca 	bl	8006444 <MX_IWDG_Init>
  MX_TIM4_Init();
 80064b0:	f002 f9a0 	bl	80087f4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 80064b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064b8:	f002 fbae 	bl	8008c18 <HAL_Delay>
  Charger_Mode = 0;
 80064bc:	4b5a      	ldr	r3, [pc, #360]	; (8006628 <main+0x1b0>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]
  flag_CHARGE_MODE=0;
 80064c2:	4b5a      	ldr	r3, [pc, #360]	; (800662c <main+0x1b4>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
  Eror_Code = 0;
 80064c8:	4b59      	ldr	r3, [pc, #356]	; (8006630 <main+0x1b8>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
  CHARGER_ON_Init();
 80064ce:	f000 f96f 	bl	80067b0 <CHARGER_ON_Init>
  reset=0;
 80064d2:	4b58      	ldr	r3, [pc, #352]	; (8006634 <main+0x1bc>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
  send = 1;
 80064d8:	4b57      	ldr	r3, [pc, #348]	; (8006638 <main+0x1c0>)
 80064da:	2201      	movs	r2, #1
 80064dc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_isDeviceReady(0XA0);
 80064de:	20a0      	movs	r0, #160	; 0xa0
 80064e0:	f7fe ffb4 	bl	800544c <EEPROM_isDeviceReady>
  EEPROM_WriteData(10, 15);
 80064e4:	210f      	movs	r1, #15
 80064e6:	200a      	movs	r0, #10
 80064e8:	f7fe ffce 	bl	8005488 <EEPROM_WriteData>
  HAL_UART_Receive_IT(&huart1, &buffer_serial, 1);
 80064ec:	2201      	movs	r2, #1
 80064ee:	4953      	ldr	r1, [pc, #332]	; (800663c <main+0x1c4>)
 80064f0:	4853      	ldr	r0, [pc, #332]	; (8006640 <main+0x1c8>)
 80064f2:	f007 f9ab 	bl	800d84c <HAL_UART_Receive_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Charger_Mode==1) 		{
 80064f6:	4b4c      	ldr	r3, [pc, #304]	; (8006628 <main+0x1b0>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d105      	bne.n	800650a <main+0x92>
		  Display_ChargeMode();
 80064fe:	f000 fa2f 	bl	8006960 <Display_ChargeMode>
		  flag_charge = 1;
 8006502:	4b50      	ldr	r3, [pc, #320]	; (8006644 <main+0x1cc>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e008      	b.n	800651c <main+0xa4>
	  }
	  else if (Charger_Mode==2)	Display_ProtectionMode();
 800650a:	4b47      	ldr	r3, [pc, #284]	; (8006628 <main+0x1b0>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b02      	cmp	r3, #2
 8006510:	d102      	bne.n	8006518 <main+0xa0>
 8006512:	f000 f9f9 	bl	8006908 <Display_ProtectionMode>
 8006516:	e001      	b.n	800651c <main+0xa4>
	  else						Display_StanbyMode();
 8006518:	f000 f9d8 	bl	80068cc <Display_StanbyMode>

	  if(flag_charge == 1 && Charger_Mode == 0){	// Deteksi perubahan state dari charge ke standby
 800651c:	4b49      	ldr	r3, [pc, #292]	; (8006644 <main+0x1cc>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d17c      	bne.n	800661e <main+0x1a6>
 8006524:	4b40      	ldr	r3, [pc, #256]	; (8006628 <main+0x1b0>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d178      	bne.n	800661e <main+0x1a6>
		  Ready_toHandshake = 0;					// Variable bantu untuk delay handshaking
 800652c:	4b46      	ldr	r3, [pc, #280]	; (8006648 <main+0x1d0>)
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
		  if(flag_FullCharge == 1) {
 8006532:	4b46      	ldr	r3, [pc, #280]	; (800664c <main+0x1d4>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d11a      	bne.n	8006570 <main+0xf8>
			  send = 1;
 800653a:	4b3f      	ldr	r3, [pc, #252]	; (8006638 <main+0x1c0>)
 800653c:	2201      	movs	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
			  oke = 2;
 8006540:	4b43      	ldr	r3, [pc, #268]	; (8006650 <main+0x1d8>)
 8006542:	2202      	movs	r2, #2
 8006544:	601a      	str	r2, [r3, #0]
			  if(BPack_SOC < 85){
 8006546:	4b43      	ldr	r3, [pc, #268]	; (8006654 <main+0x1dc>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4943      	ldr	r1, [pc, #268]	; (8006658 <main+0x1e0>)
 800654c:	4618      	mov	r0, r3
 800654e:	f7fa fdd3 	bl	80010f8 <__aeabi_fcmplt>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00b      	beq.n	8006570 <main+0xf8>
				  send = 2;	//send data to activate the mosfet
 8006558:	4b37      	ldr	r3, [pc, #220]	; (8006638 <main+0x1c0>)
 800655a:	2202      	movs	r2, #2
 800655c:	701a      	strb	r2, [r3, #0]
				  Ready_toCharge = 1;
 800655e:	4b3f      	ldr	r3, [pc, #252]	; (800665c <main+0x1e4>)
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
				  Handshake_Recognition = 1;
 8006564:	4b3e      	ldr	r3, [pc, #248]	; (8006660 <main+0x1e8>)
 8006566:	2201      	movs	r2, #1
 8006568:	701a      	strb	r2, [r3, #0]
				  flag_FullCharge = 0;
 800656a:	4b38      	ldr	r3, [pc, #224]	; (800664c <main+0x1d4>)
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if(flag_ForceSwap == 1) {
 8006570:	4b3c      	ldr	r3, [pc, #240]	; (8006664 <main+0x1ec>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b01      	cmp	r3, #1
 8006576:	d152      	bne.n	800661e <main+0x1a6>
			  send = 1;
 8006578:	4b2f      	ldr	r3, [pc, #188]	; (8006638 <main+0x1c0>)
 800657a:	2201      	movs	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
			  Handshake_Recognition = 0;
 800657e:	4b38      	ldr	r3, [pc, #224]	; (8006660 <main+0x1e8>)
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
			  Ready_toCharge = 0;
 8006584:	4b35      	ldr	r3, [pc, #212]	; (800665c <main+0x1e4>)
 8006586:	2200      	movs	r2, #0
 8006588:	701a      	strb	r2, [r3, #0]

			  Delay_ForceSWAP += 1;
 800658a:	4b37      	ldr	r3, [pc, #220]	; (8006668 <main+0x1f0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3301      	adds	r3, #1
 8006590:	4a35      	ldr	r2, [pc, #212]	; (8006668 <main+0x1f0>)
 8006592:	6013      	str	r3, [r2, #0]
			  if(Delay_ForceSWAP >= 300){
 8006594:	4b34      	ldr	r3, [pc, #208]	; (8006668 <main+0x1f0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800659c:	db3f      	blt.n	800661e <main+0x1a6>
					Eror_Code = 0;
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <main+0x1b8>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
					Handshake_Recognition = 0;
 80065a4:	4b2e      	ldr	r3, [pc, #184]	; (8006660 <main+0x1e8>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	701a      	strb	r2, [r3, #0]
					Ready_toCharge = 0;
 80065aa:	4b2c      	ldr	r3, [pc, #176]	; (800665c <main+0x1e4>)
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
					BPack_Voltage = 0;
 80065b0:	4b2e      	ldr	r3, [pc, #184]	; (800666c <main+0x1f4>)
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
					BPack_Current = 0;
 80065b8:	4b2d      	ldr	r3, [pc, #180]	; (8006670 <main+0x1f8>)
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	601a      	str	r2, [r3, #0]
					BPack_SOC = 0;
 80065c0:	4b24      	ldr	r3, [pc, #144]	; (8006654 <main+0x1dc>)
 80065c2:	f04f 0200 	mov.w	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
					BPack_Temp = 0;
 80065c8:	4b2a      	ldr	r3, [pc, #168]	; (8006674 <main+0x1fc>)
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	601a      	str	r2, [r3, #0]
					BPack_Capacity = 0;
 80065d0:	4b29      	ldr	r3, [pc, #164]	; (8006678 <main+0x200>)
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
					BPack_SOH = 0;
 80065d8:	4b28      	ldr	r3, [pc, #160]	; (800667c <main+0x204>)
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
					BPack_cycle = 0;
 80065e0:	4b27      	ldr	r3, [pc, #156]	; (8006680 <main+0x208>)
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
					BPack_byte6 = 0;
 80065e8:	4b26      	ldr	r3, [pc, #152]	; (8006684 <main+0x20c>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	701a      	strb	r2, [r3, #0]
					BPack_byte7 = 0;
 80065ee:	4b26      	ldr	r3, [pc, #152]	; (8006688 <main+0x210>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	701a      	strb	r2, [r3, #0]
				  UNIQUE_Code = 0;
 80065f4:	4b25      	ldr	r3, [pc, #148]	; (800668c <main+0x214>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]
				  Ready_toHandshake = 1;
 80065fa:	4b13      	ldr	r3, [pc, #76]	; (8006648 <main+0x1d0>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	701a      	strb	r2, [r3, #0]
				  flag_charge = 0;
 8006600:	4b10      	ldr	r3, [pc, #64]	; (8006644 <main+0x1cc>)
 8006602:	2200      	movs	r2, #0
 8006604:	701a      	strb	r2, [r3, #0]
				  Delay_ForceSWAP = 0;
 8006606:	4b18      	ldr	r3, [pc, #96]	; (8006668 <main+0x1f0>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]
				  LastCharger_Mode = 0;
 800660c:	4b20      	ldr	r3, [pc, #128]	; (8006690 <main+0x218>)
 800660e:	2200      	movs	r2, #0
 8006610:	701a      	strb	r2, [r3, #0]
				  flag_ForceSwap = 0;
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <main+0x1ec>)
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
				  flag_FullCharge = 0;
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <main+0x1d4>)
 800661a:	2200      	movs	r2, #0
 800661c:	701a      	strb	r2, [r3, #0]

			  }
		  }
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 800661e:	481d      	ldr	r0, [pc, #116]	; (8006694 <main+0x21c>)
 8006620:	f005 fb1b 	bl	800bc5a <HAL_IWDG_Refresh>
	  if(Charger_Mode==1) 		{
 8006624:	e767      	b.n	80064f6 <main+0x7e>
 8006626:	bf00      	nop
 8006628:	20000744 	.word	0x20000744
 800662c:	20000704 	.word	0x20000704
 8006630:	200006a0 	.word	0x200006a0
 8006634:	2000070c 	.word	0x2000070c
 8006638:	20000918 	.word	0x20000918
 800663c:	200015c4 	.word	0x200015c4
 8006640:	20001850 	.word	0x20001850
 8006644:	20000f48 	.word	0x20000f48
 8006648:	20000cec 	.word	0x20000cec
 800664c:	200012c0 	.word	0x200012c0
 8006650:	20001124 	.word	0x20001124
 8006654:	20000ae4 	.word	0x20000ae4
 8006658:	42aa0000 	.word	0x42aa0000
 800665c:	20000d88 	.word	0x20000d88
 8006660:	20000d68 	.word	0x20000d68
 8006664:	20000688 	.word	0x20000688
 8006668:	20000258 	.word	0x20000258
 800666c:	20000d10 	.word	0x20000d10
 8006670:	200006b0 	.word	0x200006b0
 8006674:	20000d1c 	.word	0x20000d1c
 8006678:	200012bc 	.word	0x200012bc
 800667c:	20000730 	.word	0x20000730
 8006680:	200008dc 	.word	0x200008dc
 8006684:	20000cc8 	.word	0x20000cc8
 8006688:	20000690 	.word	0x20000690
 800668c:	20000d84 	.word	0x20000d84
 8006690:	200006a1 	.word	0x200006a1
 8006694:	200014d0 	.word	0x200014d0

08006698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b092      	sub	sp, #72	; 0x48
 800669c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800669e:	f107 0318 	add.w	r3, r7, #24
 80066a2:	2230      	movs	r2, #48	; 0x30
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f007 fcf0 	bl	800e08c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066ac:	1d3b      	adds	r3, r7, #4
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
 80066b2:	605a      	str	r2, [r3, #4]
 80066b4:	609a      	str	r2, [r3, #8]
 80066b6:	60da      	str	r2, [r3, #12]
 80066b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80066ba:	230a      	movs	r3, #10
 80066bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80066be:	2301      	movs	r3, #1
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80066c2:	2310      	movs	r3, #16
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80066c6:	2301      	movs	r3, #1
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80066ca:	2302      	movs	r3, #2
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80066ce:	2300      	movs	r3, #0
 80066d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80066d2:	230d      	movs	r3, #13
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80066d6:	23c3      	movs	r3, #195	; 0xc3
 80066d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80066da:	2302      	movs	r3, #2
 80066dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80066de:	2304      	movs	r3, #4
 80066e0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80066e2:	f107 0318 	add.w	r3, r7, #24
 80066e6:	4618      	mov	r0, r3
 80066e8:	f005 fac6 	bl	800bc78 <HAL_RCC_OscConfig>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80066f2:	f000 faa7 	bl	8006c44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80066f6:	230f      	movs	r3, #15
 80066f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80066fa:	2302      	movs	r3, #2
 80066fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006702:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800670c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	2103      	movs	r1, #3
 8006712:	4618      	mov	r0, r3
 8006714:	f005 fd00 	bl	800c118 <HAL_RCC_ClockConfig>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800671e:	f000 fa91 	bl	8006c44 <Error_Handler>
  }
}
 8006722:	bf00      	nop
 8006724:	3748      	adds	r7, #72	; 0x48
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
	...

0800672c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a13      	ldr	r2, [pc, #76]	; (8006788 <HAL_ADC_ConvCpltCallback+0x5c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d11f      	bne.n	800677e <HAL_ADC_ConvCpltCallback+0x52>
	{
		ADC_VoutN = ADC_value[0];
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006740:	881a      	ldrh	r2, [r3, #0]
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <HAL_ADC_ConvCpltCallback+0x64>)
 8006744:	801a      	strh	r2, [r3, #0]
		ADC_VoutP = ADC_value[1];
 8006746:	4b11      	ldr	r3, [pc, #68]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006748:	885a      	ldrh	r2, [r3, #2]
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <HAL_ADC_ConvCpltCallback+0x68>)
 800674c:	801a      	strh	r2, [r3, #0]
		ADC_Iin = ADC_value[2];
 800674e:	4b0f      	ldr	r3, [pc, #60]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006750:	889a      	ldrh	r2, [r3, #4]
 8006752:	4b11      	ldr	r3, [pc, #68]	; (8006798 <HAL_ADC_ConvCpltCallback+0x6c>)
 8006754:	801a      	strh	r2, [r3, #0]
		ADC_temp1 = ADC_value[3];
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006758:	88da      	ldrh	r2, [r3, #6]
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <HAL_ADC_ConvCpltCallback+0x70>)
 800675c:	801a      	strh	r2, [r3, #0]
		ADC_temp2 = ADC_value[4];
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006760:	891a      	ldrh	r2, [r3, #8]
 8006762:	4b0f      	ldr	r3, [pc, #60]	; (80067a0 <HAL_ADC_ConvCpltCallback+0x74>)
 8006764:	801a      	strh	r2, [r3, #0]
		ADC_VinN = ADC_value[5];
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006768:	895a      	ldrh	r2, [r3, #10]
 800676a:	4b0e      	ldr	r3, [pc, #56]	; (80067a4 <HAL_ADC_ConvCpltCallback+0x78>)
 800676c:	801a      	strh	r2, [r3, #0]
		ADC_VinP = ADC_value[6];
 800676e:	4b07      	ldr	r3, [pc, #28]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006770:	899a      	ldrh	r2, [r3, #12]
 8006772:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <HAL_ADC_ConvCpltCallback+0x7c>)
 8006774:	801a      	strh	r2, [r3, #0]
		ADC_Iout = ADC_value[7];
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <HAL_ADC_ConvCpltCallback+0x60>)
 8006778:	89da      	ldrh	r2, [r3, #14]
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <HAL_ADC_ConvCpltCallback+0x80>)
 800677c:	801a      	strh	r2, [r3, #0]
	}
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	40012000 	.word	0x40012000
 800678c:	2000092c 	.word	0x2000092c
 8006790:	200006a2 	.word	0x200006a2
 8006794:	2000090c 	.word	0x2000090c
 8006798:	200006ce 	.word	0x200006ce
 800679c:	20000916 	.word	0x20000916
 80067a0:	200006ae 	.word	0x200006ae
 80067a4:	20000ce4 	.word	0x20000ce4
 80067a8:	20000738 	.word	0x20000738
 80067ac:	20000718 	.word	0x20000718

080067b0 <CHARGER_ON_Init>:

void CHARGER_ON_Init(void)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 80067b4:	2201      	movs	r2, #1
 80067b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067ba:	4839      	ldr	r0, [pc, #228]	; (80068a0 <CHARGER_ON_Init+0xf0>)
 80067bc:	f004 fae6 	bl	800ad8c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOC, Led3_Pin,1);
	HAL_Delay(300);
 80067c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067c4:	f002 fa28 	bl	8008c18 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80067c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067cc:	4834      	ldr	r0, [pc, #208]	; (80068a0 <CHARGER_ON_Init+0xf0>)
 80067ce:	f004 faf5 	bl	800adbc <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
	HAL_Delay(300);
 80067d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80067d6:	f002 fa1f 	bl	8008c18 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80067da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067de:	4830      	ldr	r0, [pc, #192]	; (80068a0 <CHARGER_ON_Init+0xf0>)
 80067e0:	f004 faec 	bl	800adbc <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
	HAL_Delay(100);
 80067e4:	2064      	movs	r0, #100	; 0x64
 80067e6:	f002 fa17 	bl	8008c18 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80067ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067ee:	482c      	ldr	r0, [pc, #176]	; (80068a0 <CHARGER_ON_Init+0xf0>)
 80067f0:	f004 fae4 	bl	800adbc <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
	HAL_Delay(100);
 80067f4:	2064      	movs	r0, #100	; 0x64
 80067f6:	f002 fa0f 	bl	8008c18 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80067fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067fe:	4828      	ldr	r0, [pc, #160]	; (80068a0 <CHARGER_ON_Init+0xf0>)
 8006800:	f004 fadc 	bl	800adbc <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
	HAL_Delay(100);
 8006804:	2064      	movs	r0, #100	; 0x64
 8006806:	f002 fa07 	bl	8008c18 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 800680a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800680e:	4824      	ldr	r0, [pc, #144]	; (80068a0 <CHARGER_ON_Init+0xf0>)
 8006810:	f004 fad4 	bl	800adbc <HAL_GPIO_TogglePin>
//	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
	HAL_Delay(100);
 8006814:	2064      	movs	r0, #100	; 0x64
 8006816:	f002 f9ff 	bl	8008c18 <HAL_Delay>

	SSD1306_Init();
 800681a:	f000 fa19 	bl	8006c50 <SSD1306_Init>
	HAL_Delay(1000);
 800681e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006822:	f002 f9f9 	bl	8008c18 <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006826:	2000      	movs	r0, #0
 8006828:	f000 fafe 	bl	8006e28 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800682c:	f000 face 	bl	8006dcc <SSD1306_UpdateScreen>

	CAN_Setting();
 8006830:	f7ff f834 	bl	800589c <CAN_Setting>

	SSD1306_GotoXY (15,10);
 8006834:	210a      	movs	r1, #10
 8006836:	200f      	movs	r0, #15
 8006838:	f000 fb6c 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I Charger", &Font_7x10, 1);
 800683c:	2201      	movs	r2, #1
 800683e:	4919      	ldr	r1, [pc, #100]	; (80068a4 <CHARGER_ON_Init+0xf4>)
 8006840:	4819      	ldr	r0, [pc, #100]	; (80068a8 <CHARGER_ON_Init+0xf8>)
 8006842:	f000 fbfd 	bl	8007040 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 8006846:	211e      	movs	r1, #30
 8006848:	2032      	movs	r0, #50	; 0x32
 800684a:	f000 fb63 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts ("V1.0", &Font_7x10, 1);
 800684e:	2201      	movs	r2, #1
 8006850:	4914      	ldr	r1, [pc, #80]	; (80068a4 <CHARGER_ON_Init+0xf4>)
 8006852:	4816      	ldr	r0, [pc, #88]	; (80068ac <CHARGER_ON_Init+0xfc>)
 8006854:	f000 fbf4 	bl	8007040 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8006858:	f000 fab8 	bl	8006dcc <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 800685c:	2000      	movs	r0, #0
 800685e:	f000 fae3 	bl	8006e28 <SSD1306_Fill>

	Ready_toHandshake = 1;
 8006862:	4b13      	ldr	r3, [pc, #76]	; (80068b0 <CHARGER_ON_Init+0x100>)
 8006864:	2201      	movs	r2, #1
 8006866:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim1);
 8006868:	4812      	ldr	r0, [pc, #72]	; (80068b4 <CHARGER_ON_Init+0x104>)
 800686a:	f005 fe91 	bl	800c590 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800686e:	2100      	movs	r1, #0
 8006870:	4810      	ldr	r0, [pc, #64]	; (80068b4 <CHARGER_ON_Init+0x104>)
 8006872:	f005 ffb9 	bl	800c7e8 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8006876:	4810      	ldr	r0, [pc, #64]	; (80068b8 <CHARGER_ON_Init+0x108>)
 8006878:	f005 fef0 	bl	800c65c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800687c:	480f      	ldr	r0, [pc, #60]	; (80068bc <CHARGER_ON_Init+0x10c>)
 800687e:	f005 feed 	bl	800c65c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8006882:	480f      	ldr	r0, [pc, #60]	; (80068c0 <CHARGER_ON_Init+0x110>)
 8006884:	f005 feea 	bl	800c65c <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_value, 8);
 8006888:	2208      	movs	r2, #8
 800688a:	490e      	ldr	r1, [pc, #56]	; (80068c4 <CHARGER_ON_Init+0x114>)
 800688c:	480e      	ldr	r0, [pc, #56]	; (80068c8 <CHARGER_ON_Init+0x118>)
 800688e:	f002 fa29 	bl	8008ce4 <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 8006892:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006896:	f002 f9bf 	bl	8008c18 <HAL_Delay>
//	Charger_Mode=1;
}
 800689a:	bf00      	nop
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40020800 	.word	0x40020800
 80068a4:	20000044 	.word	0x20000044
 80068a8:	080105f8 	.word	0x080105f8
 80068ac:	08010608 	.word	0x08010608
 80068b0:	20000cec 	.word	0x20000cec
 80068b4:	200017c0 	.word	0x200017c0
 80068b8:	20001808 	.word	0x20001808
 80068bc:	20001778 	.word	0x20001778
 80068c0:	20001730 	.word	0x20001730
 80068c4:	2000092c 	.word	0x2000092c
 80068c8:	20001340 	.word	0x20001340

080068cc <Display_StanbyMode>:

void Display_StanbyMode(void){
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80068d0:	2000      	movs	r0, #0
 80068d2:	f000 faa9 	bl	8006e28 <SSD1306_Fill>
	SSD1306_GotoXY (20,30);
 80068d6:	211e      	movs	r1, #30
 80068d8:	2014      	movs	r0, #20
 80068da:	f000 fb1b 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts ("STANBY-Mode", &Font_7x10, 1);
 80068de:	2201      	movs	r2, #1
 80068e0:	4906      	ldr	r1, [pc, #24]	; (80068fc <Display_StanbyMode+0x30>)
 80068e2:	4807      	ldr	r0, [pc, #28]	; (8006900 <Display_StanbyMode+0x34>)
 80068e4:	f000 fbac 	bl	8007040 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80068e8:	f000 fa70 	bl	8006dcc <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 80068ec:	2200      	movs	r2, #0
 80068ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068f2:	4804      	ldr	r0, [pc, #16]	; (8006904 <Display_StanbyMode+0x38>)
 80068f4:	f004 fa4a 	bl	800ad8c <HAL_GPIO_WritePin>

//	sprintf(buffer_i2c," RS485 TEST ");
//	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
//	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
}
 80068f8:	bf00      	nop
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20000044 	.word	0x20000044
 8006900:	08010610 	.word	0x08010610
 8006904:	40020800 	.word	0x40020800

08006908 <Display_ProtectionMode>:

void Display_ProtectionMode(void){
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800690c:	2000      	movs	r0, #0
 800690e:	f000 fa8b 	bl	8006e28 <SSD1306_Fill>
	SSD1306_GotoXY (20,10);
 8006912:	210a      	movs	r1, #10
 8006914:	2014      	movs	r0, #20
 8006916:	f000 fafd 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts ("FAULT Protect", &Font_7x10, 1);
 800691a:	2201      	movs	r2, #1
 800691c:	490b      	ldr	r1, [pc, #44]	; (800694c <Display_ProtectionMode+0x44>)
 800691e:	480c      	ldr	r0, [pc, #48]	; (8006950 <Display_ProtectionMode+0x48>)
 8006920:	f000 fb8e 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, "Eror =%2d", Eror_Code);
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <Display_ProtectionMode+0x4c>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	490b      	ldr	r1, [pc, #44]	; (8006958 <Display_ProtectionMode+0x50>)
 800692c:	480b      	ldr	r0, [pc, #44]	; (800695c <Display_ProtectionMode+0x54>)
 800692e:	f008 f805 	bl	800e93c <siprintf>
	SSD1306_GotoXY (20,30);
 8006932:	211e      	movs	r1, #30
 8006934:	2014      	movs	r0, #20
 8006936:	f000 faed 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800693a:	2201      	movs	r2, #1
 800693c:	4903      	ldr	r1, [pc, #12]	; (800694c <Display_ProtectionMode+0x44>)
 800693e:	4807      	ldr	r0, [pc, #28]	; (800695c <Display_ProtectionMode+0x54>)
 8006940:	f000 fb7e 	bl	8007040 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006944:	f000 fa42 	bl	8006dcc <SSD1306_UpdateScreen>
}
 8006948:	bf00      	nop
 800694a:	bd80      	pop	{r7, pc}
 800694c:	20000044 	.word	0x20000044
 8006950:	0801061c 	.word	0x0801061c
 8006954:	200006a0 	.word	0x200006a0
 8006958:	0801062c 	.word	0x0801062c
 800695c:	200014dc 	.word	0x200014dc

08006960 <Display_ChargeMode>:

void Display_ChargeMode(void){
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	b08b      	sub	sp, #44	; 0x2c
 8006966:	af08      	add	r7, sp, #32
	SSD1306_Fill (0);
 8006968:	2000      	movs	r0, #0
 800696a:	f000 fa5d 	bl	8006e28 <SSD1306_Fill>

	sprintf(buffer_i2c, "HOLE-%d : ",HOLE);
 800696e:	2206      	movs	r2, #6
 8006970:	4996      	ldr	r1, [pc, #600]	; (8006bcc <Display_ChargeMode+0x26c>)
 8006972:	4897      	ldr	r0, [pc, #604]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006974:	f007 ffe2 	bl	800e93c <siprintf>
	SSD1306_GotoXY (3,0);
 8006978:	2100      	movs	r1, #0
 800697a:	2003      	movs	r0, #3
 800697c:	f000 faca 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006980:	2201      	movs	r2, #1
 8006982:	4994      	ldr	r1, [pc, #592]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006984:	4892      	ldr	r0, [pc, #584]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006986:	f000 fb5b 	bl	8007040 <SSD1306_Puts>

	if(flag_CHARGE_MODE == 0) sprintf(buffer_i2c, "(CC)");
 800698a:	4b93      	ldr	r3, [pc, #588]	; (8006bd8 <Display_ChargeMode+0x278>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d106      	bne.n	80069a0 <Display_ChargeMode+0x40>
 8006992:	4b8f      	ldr	r3, [pc, #572]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006994:	4a91      	ldr	r2, [pc, #580]	; (8006bdc <Display_ChargeMode+0x27c>)
 8006996:	6810      	ldr	r0, [r2, #0]
 8006998:	6018      	str	r0, [r3, #0]
 800699a:	7912      	ldrb	r2, [r2, #4]
 800699c:	711a      	strb	r2, [r3, #4]
 800699e:	e00e      	b.n	80069be <Display_ChargeMode+0x5e>
	else if(flag_CHARGE_MODE == 1) sprintf(buffer_i2c, "(CV)");
 80069a0:	4b8d      	ldr	r3, [pc, #564]	; (8006bd8 <Display_ChargeMode+0x278>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d106      	bne.n	80069b6 <Display_ChargeMode+0x56>
 80069a8:	4b89      	ldr	r3, [pc, #548]	; (8006bd0 <Display_ChargeMode+0x270>)
 80069aa:	4a8d      	ldr	r2, [pc, #564]	; (8006be0 <Display_ChargeMode+0x280>)
 80069ac:	6810      	ldr	r0, [r2, #0]
 80069ae:	6018      	str	r0, [r3, #0]
 80069b0:	7912      	ldrb	r2, [r2, #4]
 80069b2:	711a      	strb	r2, [r3, #4]
 80069b4:	e003      	b.n	80069be <Display_ChargeMode+0x5e>
	else sprintf(buffer_i2c, "(-)");
 80069b6:	4b86      	ldr	r3, [pc, #536]	; (8006bd0 <Display_ChargeMode+0x270>)
 80069b8:	4a8a      	ldr	r2, [pc, #552]	; (8006be4 <Display_ChargeMode+0x284>)
 80069ba:	6810      	ldr	r0, [r2, #0]
 80069bc:	6018      	str	r0, [r3, #0]

	SSD1306_GotoXY (97,0);
 80069be:	2100      	movs	r1, #0
 80069c0:	2061      	movs	r0, #97	; 0x61
 80069c2:	f000 faa7 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80069c6:	2201      	movs	r2, #1
 80069c8:	4982      	ldr	r1, [pc, #520]	; (8006bd4 <Display_ChargeMode+0x274>)
 80069ca:	4881      	ldr	r0, [pc, #516]	; (8006bd0 <Display_ChargeMode+0x270>)
 80069cc:	f000 fb38 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, "%05s", UPPER_UNIQUE_Code);
 80069d0:	4a85      	ldr	r2, [pc, #532]	; (8006be8 <Display_ChargeMode+0x288>)
 80069d2:	4986      	ldr	r1, [pc, #536]	; (8006bec <Display_ChargeMode+0x28c>)
 80069d4:	487e      	ldr	r0, [pc, #504]	; (8006bd0 <Display_ChargeMode+0x270>)
 80069d6:	f007 ffb1 	bl	800e93c <siprintf>
	SSD1306_GotoXY (60,0);
 80069da:	2100      	movs	r1, #0
 80069dc:	203c      	movs	r0, #60	; 0x3c
 80069de:	f000 fa99 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80069e2:	2201      	movs	r2, #1
 80069e4:	497b      	ldr	r1, [pc, #492]	; (8006bd4 <Display_ChargeMode+0x274>)
 80069e6:	487a      	ldr	r0, [pc, #488]	; (8006bd0 <Display_ChargeMode+0x270>)
 80069e8:	f000 fb2a 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, ">> %4.1f|%4.1f|%4.1f \r\n", dc, BPack_SOC, BPack_Temp);
 80069ec:	4b80      	ldr	r3, [pc, #512]	; (8006bf0 <Display_ChargeMode+0x290>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7f9 fd55 	bl	80004a0 <__aeabi_f2d>
 80069f6:	4680      	mov	r8, r0
 80069f8:	4689      	mov	r9, r1
 80069fa:	4b7e      	ldr	r3, [pc, #504]	; (8006bf4 <Display_ChargeMode+0x294>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7f9 fd4e 	bl	80004a0 <__aeabi_f2d>
 8006a04:	4604      	mov	r4, r0
 8006a06:	460d      	mov	r5, r1
 8006a08:	4b7b      	ldr	r3, [pc, #492]	; (8006bf8 <Display_ChargeMode+0x298>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7f9 fd47 	bl	80004a0 <__aeabi_f2d>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a1a:	e9cd 4500 	strd	r4, r5, [sp]
 8006a1e:	4642      	mov	r2, r8
 8006a20:	464b      	mov	r3, r9
 8006a22:	4976      	ldr	r1, [pc, #472]	; (8006bfc <Display_ChargeMode+0x29c>)
 8006a24:	486a      	ldr	r0, [pc, #424]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006a26:	f007 ff89 	bl	800e93c <siprintf>
//	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", dc, EEPROM_ReadData(10));
	SSD1306_GotoXY (3,13);
 8006a2a:	210d      	movs	r1, #13
 8006a2c:	2003      	movs	r0, #3
 8006a2e:	f000 fa71 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006a32:	2201      	movs	r2, #1
 8006a34:	4967      	ldr	r1, [pc, #412]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006a36:	4866      	ldr	r0, [pc, #408]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006a38:	f000 fb02 	bl	8007040 <SSD1306_Puts>

	if(Delay_USART == 1){
 8006a3c:	4b70      	ldr	r3, [pc, #448]	; (8006c00 <Display_ChargeMode+0x2a0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d133      	bne.n	8006aac <Display_ChargeMode+0x14c>
	sprintf(buffer_i2c,"%4.3f,%4.2f,%4.2f,%4.2f,%4.0f \r\n", duty, Voltage_Charger, Current_Charger, BPack_SOC, Ah_CONSUMPTION);
 8006a44:	4b6f      	ldr	r3, [pc, #444]	; (8006c04 <Display_ChargeMode+0x2a4>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7f9 fd29 	bl	80004a0 <__aeabi_f2d>
 8006a4e:	e9c7 0100 	strd	r0, r1, [r7]
 8006a52:	4b6d      	ldr	r3, [pc, #436]	; (8006c08 <Display_ChargeMode+0x2a8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7f9 fd22 	bl	80004a0 <__aeabi_f2d>
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	460d      	mov	r5, r1
 8006a60:	4b6a      	ldr	r3, [pc, #424]	; (8006c0c <Display_ChargeMode+0x2ac>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4618      	mov	r0, r3
 8006a66:	f7f9 fd1b 	bl	80004a0 <__aeabi_f2d>
 8006a6a:	4680      	mov	r8, r0
 8006a6c:	4689      	mov	r9, r1
 8006a6e:	4b61      	ldr	r3, [pc, #388]	; (8006bf4 <Display_ChargeMode+0x294>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7f9 fd14 	bl	80004a0 <__aeabi_f2d>
 8006a78:	4682      	mov	sl, r0
 8006a7a:	468b      	mov	fp, r1
 8006a7c:	4b64      	ldr	r3, [pc, #400]	; (8006c10 <Display_ChargeMode+0x2b0>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7f9 fd0d 	bl	80004a0 <__aeabi_f2d>
 8006a86:	4602      	mov	r2, r0
 8006a88:	460b      	mov	r3, r1
 8006a8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a8e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006a92:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006a96:	e9cd 4500 	strd	r4, r5, [sp]
 8006a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9e:	495d      	ldr	r1, [pc, #372]	; (8006c14 <Display_ChargeMode+0x2b4>)
 8006aa0:	484b      	ldr	r0, [pc, #300]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006aa2:	f007 ff4b 	bl	800e93c <siprintf>
//	sprintf(buffer_i2c,"%4.0f,%4.0f,%4.0f",ADC_Average_VoutP,ADC_Average_VoutN,ADC_VoltageResult);
//	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
//	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
	Delay_USART = 0;
 8006aa6:	4b56      	ldr	r3, [pc, #344]	; (8006c00 <Display_ChargeMode+0x2a0>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(10);
 8006aac:	200a      	movs	r0, #10
 8006aae:	f002 f8b3 	bl	8008c18 <HAL_Delay>

	sprintf(buffer_i2c, "T = %4.1f | %4.1f", Temp_T1, Temp_T2);
 8006ab2:	4b59      	ldr	r3, [pc, #356]	; (8006c18 <Display_ChargeMode+0x2b8>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fcf2 	bl	80004a0 <__aeabi_f2d>
 8006abc:	4605      	mov	r5, r0
 8006abe:	460e      	mov	r6, r1
 8006ac0:	4b56      	ldr	r3, [pc, #344]	; (8006c1c <Display_ChargeMode+0x2bc>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7f9 fceb 	bl	80004a0 <__aeabi_f2d>
 8006aca:	4603      	mov	r3, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	e9cd 3400 	strd	r3, r4, [sp]
 8006ad2:	462a      	mov	r2, r5
 8006ad4:	4633      	mov	r3, r6
 8006ad6:	4952      	ldr	r1, [pc, #328]	; (8006c20 <Display_ChargeMode+0x2c0>)
 8006ad8:	483d      	ldr	r0, [pc, #244]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006ada:	f007 ff2f 	bl	800e93c <siprintf>
	SSD1306_GotoXY (3,23);
 8006ade:	2117      	movs	r1, #23
 8006ae0:	2003      	movs	r0, #3
 8006ae2:	f000 fa17 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	493a      	ldr	r1, [pc, #232]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006aea:	4839      	ldr	r0, [pc, #228]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006aec:	f000 faa8 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, "V = %4.0f | %5.2f", ADC_VoltageResult, Voltage_Charger);
 8006af0:	4b4c      	ldr	r3, [pc, #304]	; (8006c24 <Display_ChargeMode+0x2c4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7f9 fcd3 	bl	80004a0 <__aeabi_f2d>
 8006afa:	4605      	mov	r5, r0
 8006afc:	460e      	mov	r6, r1
 8006afe:	4b42      	ldr	r3, [pc, #264]	; (8006c08 <Display_ChargeMode+0x2a8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7f9 fccc 	bl	80004a0 <__aeabi_f2d>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	e9cd 3400 	strd	r3, r4, [sp]
 8006b10:	462a      	mov	r2, r5
 8006b12:	4633      	mov	r3, r6
 8006b14:	4944      	ldr	r1, [pc, #272]	; (8006c28 <Display_ChargeMode+0x2c8>)
 8006b16:	482e      	ldr	r0, [pc, #184]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006b18:	f007 ff10 	bl	800e93c <siprintf>
//	sprintf(buffer_i2c,"%4.0f|%4.0f|%4.0f",ADC_Average_VoutP,ADC_Average_VoutN,ADC_VoltageResult);
	SSD1306_GotoXY (3,33);
 8006b1c:	2121      	movs	r1, #33	; 0x21
 8006b1e:	2003      	movs	r0, #3
 8006b20:	f000 f9f8 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006b24:	2201      	movs	r2, #1
 8006b26:	492b      	ldr	r1, [pc, #172]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006b28:	4829      	ldr	r0, [pc, #164]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006b2a:	f000 fa89 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, "A = %4.0f | %5.2f", ADC_Average_Iout, Current_Charger);
 8006b2e:	4b3f      	ldr	r3, [pc, #252]	; (8006c2c <Display_ChargeMode+0x2cc>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7f9 fcb4 	bl	80004a0 <__aeabi_f2d>
 8006b38:	4605      	mov	r5, r0
 8006b3a:	460e      	mov	r6, r1
 8006b3c:	4b33      	ldr	r3, [pc, #204]	; (8006c0c <Display_ChargeMode+0x2ac>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7f9 fcad 	bl	80004a0 <__aeabi_f2d>
 8006b46:	4603      	mov	r3, r0
 8006b48:	460c      	mov	r4, r1
 8006b4a:	e9cd 3400 	strd	r3, r4, [sp]
 8006b4e:	462a      	mov	r2, r5
 8006b50:	4633      	mov	r3, r6
 8006b52:	4937      	ldr	r1, [pc, #220]	; (8006c30 <Display_ChargeMode+0x2d0>)
 8006b54:	481e      	ldr	r0, [pc, #120]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006b56:	f007 fef1 	bl	800e93c <siprintf>
	SSD1306_GotoXY (3,43);
 8006b5a:	212b      	movs	r1, #43	; 0x2b
 8006b5c:	2003      	movs	r0, #3
 8006b5e:	f000 f9d9 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006b62:	2201      	movs	r2, #1
 8006b64:	491b      	ldr	r1, [pc, #108]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006b66:	481a      	ldr	r0, [pc, #104]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006b68:	f000 fa6a 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, "E =%2d--%2d ", Eror_Code, LastEror_code);
 8006b6c:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <Display_ChargeMode+0x2d4>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	461a      	mov	r2, r3
 8006b72:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <Display_ChargeMode+0x2d8>)
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	4931      	ldr	r1, [pc, #196]	; (8006c3c <Display_ChargeMode+0x2dc>)
 8006b78:	4815      	ldr	r0, [pc, #84]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006b7a:	f007 fedf 	bl	800e93c <siprintf>
	SSD1306_GotoXY (3,53);
 8006b7e:	2135      	movs	r1, #53	; 0x35
 8006b80:	2003      	movs	r0, #3
 8006b82:	f000 f9c7 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006b86:	2201      	movs	r2, #1
 8006b88:	4912      	ldr	r1, [pc, #72]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006b8a:	4811      	ldr	r0, [pc, #68]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006b8c:	f000 fa58 	bl	8007040 <SSD1306_Puts>

	sprintf(buffer_i2c, "%5.0f", Ah_CONSUMPTION);
 8006b90:	4b1f      	ldr	r3, [pc, #124]	; (8006c10 <Display_ChargeMode+0x2b0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7f9 fc83 	bl	80004a0 <__aeabi_f2d>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	4927      	ldr	r1, [pc, #156]	; (8006c40 <Display_ChargeMode+0x2e0>)
 8006ba4:	480a      	ldr	r0, [pc, #40]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006ba6:	f007 fec9 	bl	800e93c <siprintf>
	SSD1306_GotoXY (80,53);
 8006baa:	2135      	movs	r1, #53	; 0x35
 8006bac:	2050      	movs	r0, #80	; 0x50
 8006bae:	f000 f9b1 	bl	8006f14 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	4907      	ldr	r1, [pc, #28]	; (8006bd4 <Display_ChargeMode+0x274>)
 8006bb6:	4806      	ldr	r0, [pc, #24]	; (8006bd0 <Display_ChargeMode+0x270>)
 8006bb8:	f000 fa42 	bl	8007040 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006bbc:	f000 f906 	bl	8006dcc <SSD1306_UpdateScreen>
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bca:	bf00      	nop
 8006bcc:	08010638 	.word	0x08010638
 8006bd0:	200014dc 	.word	0x200014dc
 8006bd4:	20000044 	.word	0x20000044
 8006bd8:	20000704 	.word	0x20000704
 8006bdc:	08010644 	.word	0x08010644
 8006be0:	0801064c 	.word	0x0801064c
 8006be4:	08010654 	.word	0x08010654
 8006be8:	200006ec 	.word	0x200006ec
 8006bec:	08010658 	.word	0x08010658
 8006bf0:	200006dc 	.word	0x200006dc
 8006bf4:	20000ae4 	.word	0x20000ae4
 8006bf8:	20000d1c 	.word	0x20000d1c
 8006bfc:	08010660 	.word	0x08010660
 8006c00:	200006bc 	.word	0x200006bc
 8006c04:	200012cc 	.word	0x200012cc
 8006c08:	20000f44 	.word	0x20000f44
 8006c0c:	200012c4 	.word	0x200012c4
 8006c10:	2000091c 	.word	0x2000091c
 8006c14:	08010678 	.word	0x08010678
 8006c18:	20000d14 	.word	0x20000d14
 8006c1c:	200006b4 	.word	0x200006b4
 8006c20:	0801069c 	.word	0x0801069c
 8006c24:	20000d18 	.word	0x20000d18
 8006c28:	080106b0 	.word	0x080106b0
 8006c2c:	200012e8 	.word	0x200012e8
 8006c30:	080106c4 	.word	0x080106c4
 8006c34:	200006a0 	.word	0x200006a0
 8006c38:	20000720 	.word	0x20000720
 8006c3c:	080106d8 	.word	0x080106d8
 8006c40:	080106e8 	.word	0x080106e8

08006c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006c44:	b480      	push	{r7}
 8006c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bc80      	pop	{r7}
 8006c4e:	4770      	bx	lr

08006c50 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006c56:	f000 fa19 	bl	800708c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8006c5a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006c5e:	2201      	movs	r2, #1
 8006c60:	2178      	movs	r1, #120	; 0x78
 8006c62:	4858      	ldr	r0, [pc, #352]	; (8006dc4 <SSD1306_Init+0x174>)
 8006c64:	f004 fbf4 	bl	800b450 <HAL_I2C_IsDeviceReady>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e0a4      	b.n	8006dbc <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 25000;
 8006c72:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8006c76:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006c78:	e002      	b.n	8006c80 <SSD1306_Init+0x30>
		p--;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f9      	bne.n	8006c7a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8006c86:	22ae      	movs	r2, #174	; 0xae
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2078      	movs	r0, #120	; 0x78
 8006c8c:	f000 fa6c 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8006c90:	2220      	movs	r2, #32
 8006c92:	2100      	movs	r1, #0
 8006c94:	2078      	movs	r0, #120	; 0x78
 8006c96:	f000 fa67 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	2078      	movs	r0, #120	; 0x78
 8006ca0:	f000 fa62 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006ca4:	22b0      	movs	r2, #176	; 0xb0
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	2078      	movs	r0, #120	; 0x78
 8006caa:	f000 fa5d 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006cae:	22c8      	movs	r2, #200	; 0xc8
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	2078      	movs	r0, #120	; 0x78
 8006cb4:	f000 fa58 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006cb8:	2200      	movs	r2, #0
 8006cba:	2100      	movs	r1, #0
 8006cbc:	2078      	movs	r0, #120	; 0x78
 8006cbe:	f000 fa53 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006cc2:	2210      	movs	r2, #16
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	2078      	movs	r0, #120	; 0x78
 8006cc8:	f000 fa4e 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006ccc:	2240      	movs	r2, #64	; 0x40
 8006cce:	2100      	movs	r1, #0
 8006cd0:	2078      	movs	r0, #120	; 0x78
 8006cd2:	f000 fa49 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006cd6:	2281      	movs	r2, #129	; 0x81
 8006cd8:	2100      	movs	r1, #0
 8006cda:	2078      	movs	r0, #120	; 0x78
 8006cdc:	f000 fa44 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006ce0:	22ff      	movs	r2, #255	; 0xff
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	2078      	movs	r0, #120	; 0x78
 8006ce6:	f000 fa3f 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006cea:	22a1      	movs	r2, #161	; 0xa1
 8006cec:	2100      	movs	r1, #0
 8006cee:	2078      	movs	r0, #120	; 0x78
 8006cf0:	f000 fa3a 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006cf4:	22a6      	movs	r2, #166	; 0xa6
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	2078      	movs	r0, #120	; 0x78
 8006cfa:	f000 fa35 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006cfe:	22a8      	movs	r2, #168	; 0xa8
 8006d00:	2100      	movs	r1, #0
 8006d02:	2078      	movs	r0, #120	; 0x78
 8006d04:	f000 fa30 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006d08:	223f      	movs	r2, #63	; 0x3f
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	2078      	movs	r0, #120	; 0x78
 8006d0e:	f000 fa2b 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006d12:	22a4      	movs	r2, #164	; 0xa4
 8006d14:	2100      	movs	r1, #0
 8006d16:	2078      	movs	r0, #120	; 0x78
 8006d18:	f000 fa26 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006d1c:	22d3      	movs	r2, #211	; 0xd3
 8006d1e:	2100      	movs	r1, #0
 8006d20:	2078      	movs	r0, #120	; 0x78
 8006d22:	f000 fa21 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006d26:	2200      	movs	r2, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	2078      	movs	r0, #120	; 0x78
 8006d2c:	f000 fa1c 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006d30:	22d5      	movs	r2, #213	; 0xd5
 8006d32:	2100      	movs	r1, #0
 8006d34:	2078      	movs	r0, #120	; 0x78
 8006d36:	f000 fa17 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006d3a:	22f0      	movs	r2, #240	; 0xf0
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	2078      	movs	r0, #120	; 0x78
 8006d40:	f000 fa12 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006d44:	22d9      	movs	r2, #217	; 0xd9
 8006d46:	2100      	movs	r1, #0
 8006d48:	2078      	movs	r0, #120	; 0x78
 8006d4a:	f000 fa0d 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8006d4e:	2222      	movs	r2, #34	; 0x22
 8006d50:	2100      	movs	r1, #0
 8006d52:	2078      	movs	r0, #120	; 0x78
 8006d54:	f000 fa08 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006d58:	22da      	movs	r2, #218	; 0xda
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	2078      	movs	r0, #120	; 0x78
 8006d5e:	f000 fa03 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8006d62:	2212      	movs	r2, #18
 8006d64:	2100      	movs	r1, #0
 8006d66:	2078      	movs	r0, #120	; 0x78
 8006d68:	f000 f9fe 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006d6c:	22db      	movs	r2, #219	; 0xdb
 8006d6e:	2100      	movs	r1, #0
 8006d70:	2078      	movs	r0, #120	; 0x78
 8006d72:	f000 f9f9 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8006d76:	2220      	movs	r2, #32
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2078      	movs	r0, #120	; 0x78
 8006d7c:	f000 f9f4 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006d80:	228d      	movs	r2, #141	; 0x8d
 8006d82:	2100      	movs	r1, #0
 8006d84:	2078      	movs	r0, #120	; 0x78
 8006d86:	f000 f9ef 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8006d8a:	2214      	movs	r2, #20
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2078      	movs	r0, #120	; 0x78
 8006d90:	f000 f9ea 	bl	8007168 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006d94:	22af      	movs	r2, #175	; 0xaf
 8006d96:	2100      	movs	r1, #0
 8006d98:	2078      	movs	r0, #120	; 0x78
 8006d9a:	f000 f9e5 	bl	8007168 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006d9e:	2000      	movs	r0, #0
 8006da0:	f000 f842 	bl	8006e28 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006da4:	f000 f812 	bl	8006dcc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8006da8:	4b07      	ldr	r3, [pc, #28]	; (8006dc8 <SSD1306_Init+0x178>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006dae:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <SSD1306_Init+0x178>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <SSD1306_Init+0x178>)
 8006db6:	2201      	movs	r2, #1
 8006db8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006dba:	2301      	movs	r3, #1
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	2000147c 	.word	0x2000147c
 8006dc8:	2000065c 	.word	0x2000065c

08006dcc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	71fb      	strb	r3, [r7, #7]
 8006dd6:	e01d      	b.n	8006e14 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006dd8:	79fb      	ldrb	r3, [r7, #7]
 8006dda:	3b50      	subs	r3, #80	; 0x50
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	2100      	movs	r1, #0
 8006de2:	2078      	movs	r0, #120	; 0x78
 8006de4:	f000 f9c0 	bl	8007168 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006de8:	2200      	movs	r2, #0
 8006dea:	2100      	movs	r1, #0
 8006dec:	2078      	movs	r0, #120	; 0x78
 8006dee:	f000 f9bb 	bl	8007168 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006df2:	2210      	movs	r2, #16
 8006df4:	2100      	movs	r1, #0
 8006df6:	2078      	movs	r0, #120	; 0x78
 8006df8:	f000 f9b6 	bl	8007168 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	01db      	lsls	r3, r3, #7
 8006e00:	4a08      	ldr	r2, [pc, #32]	; (8006e24 <SSD1306_UpdateScreen+0x58>)
 8006e02:	441a      	add	r2, r3
 8006e04:	2380      	movs	r3, #128	; 0x80
 8006e06:	2140      	movs	r1, #64	; 0x40
 8006e08:	2078      	movs	r0, #120	; 0x78
 8006e0a:	f000 f953 	bl	80070b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	3301      	adds	r3, #1
 8006e12:	71fb      	strb	r3, [r7, #7]
 8006e14:	79fb      	ldrb	r3, [r7, #7]
 8006e16:	2b07      	cmp	r3, #7
 8006e18:	d9de      	bls.n	8006dd8 <SSD1306_UpdateScreen+0xc>
	}
}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	2000025c 	.word	0x2000025c

08006e28 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	4603      	mov	r3, r0
 8006e30:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <SSD1306_Fill+0x14>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e001      	b.n	8006e40 <SSD1306_Fill+0x18>
 8006e3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e44:	4619      	mov	r1, r3
 8006e46:	4803      	ldr	r0, [pc, #12]	; (8006e54 <SSD1306_Fill+0x2c>)
 8006e48:	f007 f920 	bl	800e08c <memset>
}
 8006e4c:	bf00      	nop
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	2000025c 	.word	0x2000025c

08006e58 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	4603      	mov	r3, r0
 8006e60:	80fb      	strh	r3, [r7, #6]
 8006e62:	460b      	mov	r3, r1
 8006e64:	80bb      	strh	r3, [r7, #4]
 8006e66:	4613      	mov	r3, r2
 8006e68:	70fb      	strb	r3, [r7, #3]
	if (
 8006e6a:	88fb      	ldrh	r3, [r7, #6]
 8006e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e6e:	d848      	bhi.n	8006f02 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006e70:	88bb      	ldrh	r3, [r7, #4]
 8006e72:	2b3f      	cmp	r3, #63	; 0x3f
 8006e74:	d845      	bhi.n	8006f02 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006e76:	4b25      	ldr	r3, [pc, #148]	; (8006f0c <SSD1306_DrawPixel+0xb4>)
 8006e78:	791b      	ldrb	r3, [r3, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d006      	beq.n	8006e8c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006e7e:	78fb      	ldrb	r3, [r7, #3]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf0c      	ite	eq
 8006e84:	2301      	moveq	r3, #1
 8006e86:	2300      	movne	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d11a      	bne.n	8006ec8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	88bb      	ldrh	r3, [r7, #4]
 8006e96:	08db      	lsrs	r3, r3, #3
 8006e98:	b298      	uxth	r0, r3
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	01db      	lsls	r3, r3, #7
 8006e9e:	4413      	add	r3, r2
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <SSD1306_DrawPixel+0xb8>)
 8006ea2:	5cd3      	ldrb	r3, [r2, r3]
 8006ea4:	b25a      	sxtb	r2, r3
 8006ea6:	88bb      	ldrh	r3, [r7, #4]
 8006ea8:	f003 0307 	and.w	r3, r3, #7
 8006eac:	2101      	movs	r1, #1
 8006eae:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb2:	b25b      	sxtb	r3, r3
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	b259      	sxtb	r1, r3
 8006eb8:	88fa      	ldrh	r2, [r7, #6]
 8006eba:	4603      	mov	r3, r0
 8006ebc:	01db      	lsls	r3, r3, #7
 8006ebe:	4413      	add	r3, r2
 8006ec0:	b2c9      	uxtb	r1, r1
 8006ec2:	4a13      	ldr	r2, [pc, #76]	; (8006f10 <SSD1306_DrawPixel+0xb8>)
 8006ec4:	54d1      	strb	r1, [r2, r3]
 8006ec6:	e01d      	b.n	8006f04 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006ec8:	88fa      	ldrh	r2, [r7, #6]
 8006eca:	88bb      	ldrh	r3, [r7, #4]
 8006ecc:	08db      	lsrs	r3, r3, #3
 8006ece:	b298      	uxth	r0, r3
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	01db      	lsls	r3, r3, #7
 8006ed4:	4413      	add	r3, r2
 8006ed6:	4a0e      	ldr	r2, [pc, #56]	; (8006f10 <SSD1306_DrawPixel+0xb8>)
 8006ed8:	5cd3      	ldrb	r3, [r2, r3]
 8006eda:	b25a      	sxtb	r2, r3
 8006edc:	88bb      	ldrh	r3, [r7, #4]
 8006ede:	f003 0307 	and.w	r3, r3, #7
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	b25b      	sxtb	r3, r3
 8006eea:	43db      	mvns	r3, r3
 8006eec:	b25b      	sxtb	r3, r3
 8006eee:	4013      	ands	r3, r2
 8006ef0:	b259      	sxtb	r1, r3
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	01db      	lsls	r3, r3, #7
 8006ef8:	4413      	add	r3, r2
 8006efa:	b2c9      	uxtb	r1, r1
 8006efc:	4a04      	ldr	r2, [pc, #16]	; (8006f10 <SSD1306_DrawPixel+0xb8>)
 8006efe:	54d1      	strb	r1, [r2, r3]
 8006f00:	e000      	b.n	8006f04 <SSD1306_DrawPixel+0xac>
		return;
 8006f02:	bf00      	nop
	}
}
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	2000065c 	.word	0x2000065c
 8006f10:	2000025c 	.word	0x2000025c

08006f14 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	460a      	mov	r2, r1
 8006f1e:	80fb      	strh	r3, [r7, #6]
 8006f20:	4613      	mov	r3, r2
 8006f22:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006f24:	4a05      	ldr	r2, [pc, #20]	; (8006f3c <SSD1306_GotoXY+0x28>)
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006f2a:	4a04      	ldr	r2, [pc, #16]	; (8006f3c <SSD1306_GotoXY+0x28>)
 8006f2c:	88bb      	ldrh	r3, [r7, #4]
 8006f2e:	8053      	strh	r3, [r2, #2]
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bc80      	pop	{r7}
 8006f38:	4770      	bx	lr
 8006f3a:	bf00      	nop
 8006f3c:	2000065c 	.word	0x2000065c

08006f40 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006f50:	4b3a      	ldr	r3, [pc, #232]	; (800703c <SSD1306_Putc+0xfc>)
 8006f52:	881b      	ldrh	r3, [r3, #0]
 8006f54:	461a      	mov	r2, r3
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	4413      	add	r3, r2
	if (
 8006f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f5e:	dc07      	bgt.n	8006f70 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8006f60:	4b36      	ldr	r3, [pc, #216]	; (800703c <SSD1306_Putc+0xfc>)
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	461a      	mov	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	785b      	ldrb	r3, [r3, #1]
 8006f6a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006f6c:	2b3f      	cmp	r3, #63	; 0x3f
 8006f6e:	dd01      	ble.n	8006f74 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	e05e      	b.n	8007032 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]
 8006f78:	e04b      	b.n	8007012 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	79fb      	ldrb	r3, [r7, #7]
 8006f80:	3b20      	subs	r3, #32
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	7849      	ldrb	r1, [r1, #1]
 8006f86:	fb01 f303 	mul.w	r3, r1, r3
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	440b      	add	r3, r1
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	881b      	ldrh	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	e030      	b.n	8007000 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d010      	beq.n	8006fd0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006fae:	4b23      	ldr	r3, [pc, #140]	; (800703c <SSD1306_Putc+0xfc>)
 8006fb0:	881a      	ldrh	r2, [r3, #0]
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	4413      	add	r3, r2
 8006fb8:	b298      	uxth	r0, r3
 8006fba:	4b20      	ldr	r3, [pc, #128]	; (800703c <SSD1306_Putc+0xfc>)
 8006fbc:	885a      	ldrh	r2, [r3, #2]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	79ba      	ldrb	r2, [r7, #6]
 8006fc8:	4619      	mov	r1, r3
 8006fca:	f7ff ff45 	bl	8006e58 <SSD1306_DrawPixel>
 8006fce:	e014      	b.n	8006ffa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006fd0:	4b1a      	ldr	r3, [pc, #104]	; (800703c <SSD1306_Putc+0xfc>)
 8006fd2:	881a      	ldrh	r2, [r3, #0]
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	4413      	add	r3, r2
 8006fda:	b298      	uxth	r0, r3
 8006fdc:	4b17      	ldr	r3, [pc, #92]	; (800703c <SSD1306_Putc+0xfc>)
 8006fde:	885a      	ldrh	r2, [r3, #2]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	b299      	uxth	r1, r3
 8006fe8:	79bb      	ldrb	r3, [r7, #6]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	bf0c      	ite	eq
 8006fee:	2301      	moveq	r3, #1
 8006ff0:	2300      	movne	r3, #0
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	f7ff ff2f 	bl	8006e58 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	781b      	ldrb	r3, [r3, #0]
 8007004:	461a      	mov	r2, r3
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	4293      	cmp	r3, r2
 800700a:	d3c8      	bcc.n	8006f9e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	3301      	adds	r3, #1
 8007010:	617b      	str	r3, [r7, #20]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	785b      	ldrb	r3, [r3, #1]
 8007016:	461a      	mov	r2, r3
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	4293      	cmp	r3, r2
 800701c:	d3ad      	bcc.n	8006f7a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <SSD1306_Putc+0xfc>)
 8007020:	881a      	ldrh	r2, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b29b      	uxth	r3, r3
 8007028:	4413      	add	r3, r2
 800702a:	b29a      	uxth	r2, r3
 800702c:	4b03      	ldr	r3, [pc, #12]	; (800703c <SSD1306_Putc+0xfc>)
 800702e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8007030:	79fb      	ldrb	r3, [r7, #7]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3718      	adds	r7, #24
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	2000065c 	.word	0x2000065c

08007040 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	4613      	mov	r3, r2
 800704c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800704e:	e012      	b.n	8007076 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	79fa      	ldrb	r2, [r7, #7]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff ff71 	bl	8006f40 <SSD1306_Putc>
 800705e:	4603      	mov	r3, r0
 8007060:	461a      	mov	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	429a      	cmp	r2, r3
 8007068:	d002      	beq.n	8007070 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	e008      	b.n	8007082 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e8      	bne.n	8007050 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	781b      	ldrb	r3, [r3, #0]
}
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8007092:	4b07      	ldr	r3, [pc, #28]	; (80070b0 <ssd1306_I2C_Init+0x24>)
 8007094:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007096:	e002      	b.n	800709e <ssd1306_I2C_Init+0x12>
		p--;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3b01      	subs	r3, #1
 800709c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1f9      	bne.n	8007098 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bc80      	pop	{r7}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	00055730 	.word	0x00055730

080070b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80070b4:	b5b0      	push	{r4, r5, r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	603a      	str	r2, [r7, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	71fb      	strb	r3, [r7, #7]
 80070c2:	460b      	mov	r3, r1
 80070c4:	71bb      	strb	r3, [r7, #6]
 80070c6:	4613      	mov	r3, r2
 80070c8:	80bb      	strh	r3, [r7, #4]
 80070ca:	466b      	mov	r3, sp
 80070cc:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80070ce:	88bb      	ldrh	r3, [r7, #4]
 80070d0:	1c58      	adds	r0, r3, #1
 80070d2:	1e43      	subs	r3, r0, #1
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	4603      	mov	r3, r0
 80070d8:	4619      	mov	r1, r3
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	f04f 0300 	mov.w	r3, #0
 80070e2:	f04f 0400 	mov.w	r4, #0
 80070e6:	00d4      	lsls	r4, r2, #3
 80070e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80070ec:	00cb      	lsls	r3, r1, #3
 80070ee:	4603      	mov	r3, r0
 80070f0:	4619      	mov	r1, r3
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	f04f 0400 	mov.w	r4, #0
 80070fe:	00d4      	lsls	r4, r2, #3
 8007100:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8007104:	00cb      	lsls	r3, r1, #3
 8007106:	4603      	mov	r3, r0
 8007108:	3307      	adds	r3, #7
 800710a:	08db      	lsrs	r3, r3, #3
 800710c:	00db      	lsls	r3, r3, #3
 800710e:	ebad 0d03 	sub.w	sp, sp, r3
 8007112:	ab02      	add	r3, sp, #8
 8007114:	3300      	adds	r3, #0
 8007116:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	79ba      	ldrb	r2, [r7, #6]
 800711c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800711e:	2301      	movs	r3, #1
 8007120:	75fb      	strb	r3, [r7, #23]
 8007122:	e00a      	b.n	800713a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	3b01      	subs	r3, #1
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	441a      	add	r2, r3
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	7811      	ldrb	r1, [r2, #0]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	3301      	adds	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	b29b      	uxth	r3, r3
 800713e:	88ba      	ldrh	r2, [r7, #4]
 8007140:	429a      	cmp	r2, r3
 8007142:	d2ef      	bcs.n	8007124 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	b299      	uxth	r1, r3
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	88b8      	ldrh	r0, [r7, #4]
 800714c:	230a      	movs	r3, #10
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4603      	mov	r3, r0
 8007152:	4804      	ldr	r0, [pc, #16]	; (8007164 <ssd1306_I2C_WriteMulti+0xb0>)
 8007154:	f003 ff84 	bl	800b060 <HAL_I2C_Master_Transmit>
 8007158:	46ad      	mov	sp, r5
}
 800715a:	bf00      	nop
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	bdb0      	pop	{r4, r5, r7, pc}
 8007162:	bf00      	nop
 8007164:	2000147c 	.word	0x2000147c

08007168 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b086      	sub	sp, #24
 800716c:	af02      	add	r7, sp, #8
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]
 8007172:	460b      	mov	r3, r1
 8007174:	71bb      	strb	r3, [r7, #6]
 8007176:	4613      	mov	r3, r2
 8007178:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800717a:	79bb      	ldrb	r3, [r7, #6]
 800717c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800717e:	797b      	ldrb	r3, [r7, #5]
 8007180:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	b299      	uxth	r1, r3
 8007186:	f107 020c 	add.w	r2, r7, #12
 800718a:	230a      	movs	r3, #10
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	2302      	movs	r3, #2
 8007190:	4803      	ldr	r0, [pc, #12]	; (80071a0 <ssd1306_I2C_Write+0x38>)
 8007192:	f003 ff65 	bl	800b060 <HAL_I2C_Master_Transmit>
}
 8007196:	bf00      	nop
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	2000147c 	.word	0x2000147c

080071a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	4b21      	ldr	r3, [pc, #132]	; (8007234 <HAL_MspInit+0x90>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	4a20      	ldr	r2, [pc, #128]	; (8007234 <HAL_MspInit+0x90>)
 80071b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071b8:	6453      	str	r3, [r2, #68]	; 0x44
 80071ba:	4b1e      	ldr	r3, [pc, #120]	; (8007234 <HAL_MspInit+0x90>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	4b1a      	ldr	r3, [pc, #104]	; (8007234 <HAL_MspInit+0x90>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	4a19      	ldr	r2, [pc, #100]	; (8007234 <HAL_MspInit+0x90>)
 80071d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d4:	6413      	str	r3, [r2, #64]	; 0x40
 80071d6:	4b17      	ldr	r3, [pc, #92]	; (8007234 <HAL_MspInit+0x90>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80071e2:	2200      	movs	r2, #0
 80071e4:	2101      	movs	r1, #1
 80071e6:	f06f 000b 	mvn.w	r0, #11
 80071ea:	f003 f86c 	bl	800a2c6 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80071ee:	2200      	movs	r2, #0
 80071f0:	2101      	movs	r1, #1
 80071f2:	f06f 000a 	mvn.w	r0, #10
 80071f6:	f003 f866 	bl	800a2c6 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80071fa:	2200      	movs	r2, #0
 80071fc:	2101      	movs	r1, #1
 80071fe:	f06f 0009 	mvn.w	r0, #9
 8007202:	f003 f860 	bl	800a2c6 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8007206:	2200      	movs	r2, #0
 8007208:	2101      	movs	r1, #1
 800720a:	f06f 0004 	mvn.w	r0, #4
 800720e:	f003 f85a 	bl	800a2c6 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8007212:	2200      	movs	r2, #0
 8007214:	2101      	movs	r1, #1
 8007216:	f06f 0003 	mvn.w	r0, #3
 800721a:	f003 f854 	bl	800a2c6 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 800721e:	2200      	movs	r2, #0
 8007220:	2101      	movs	r1, #1
 8007222:	f06f 0001 	mvn.w	r0, #1
 8007226:	f003 f84e 	bl	800a2c6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800722a:	bf00      	nop
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	40023800 	.word	0x40023800

08007238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800723c:	bf00      	nop
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr

08007244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007244:	b480      	push	{r7}
 8007246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007248:	e7fe      	b.n	8007248 <HardFault_Handler+0x4>

0800724a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800724a:	b480      	push	{r7}
 800724c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800724e:	e7fe      	b.n	800724e <MemManage_Handler+0x4>

08007250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007254:	e7fe      	b.n	8007254 <BusFault_Handler+0x4>

08007256 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007256:	b480      	push	{r7}
 8007258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800725a:	e7fe      	b.n	800725a <UsageFault_Handler+0x4>

0800725c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800725c:	b480      	push	{r7}
 800725e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007260:	bf00      	nop
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	bc80      	pop	{r7}
 8007272:	4770      	bx	lr

08007274 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007274:	b480      	push	{r7}
 8007276:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007278:	bf00      	nop
 800727a:	46bd      	mov	sp, r7
 800727c:	bc80      	pop	{r7}
 800727e:	4770      	bx	lr

08007280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007284:	f001 fcac 	bl	8008be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007288:	bf00      	nop
 800728a:	bd80      	pop	{r7, pc}

0800728c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007290:	4802      	ldr	r0, [pc, #8]	; (800729c <CAN1_RX0_IRQHandler+0x10>)
 8007292:	f002 fd23 	bl	8009cdc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007296:	bf00      	nop
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20001400 	.word	0x20001400

080072a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80072a0:	b5b0      	push	{r4, r5, r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// *********************** Sensing Process (ADC average) ******************************
	ADC_SUM_Iin = ADC_SUM_Iin - ADC_Array_Iin[i];		//delete old data
 80072a4:	4ba2      	ldr	r3, [pc, #648]	; (8007530 <TIM2_IRQHandler+0x290>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4aa2      	ldr	r2, [pc, #648]	; (8007534 <TIM2_IRQHandler+0x294>)
 80072aa:	7812      	ldrb	r2, [r2, #0]
 80072ac:	4611      	mov	r1, r2
 80072ae:	4aa2      	ldr	r2, [pc, #648]	; (8007538 <TIM2_IRQHandler+0x298>)
 80072b0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80072b4:	1a9b      	subs	r3, r3, r2
 80072b6:	4a9e      	ldr	r2, [pc, #632]	; (8007530 <TIM2_IRQHandler+0x290>)
 80072b8:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN - ADC_Array_VinN[i];
 80072ba:	4ba0      	ldr	r3, [pc, #640]	; (800753c <TIM2_IRQHandler+0x29c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a9d      	ldr	r2, [pc, #628]	; (8007534 <TIM2_IRQHandler+0x294>)
 80072c0:	7812      	ldrb	r2, [r2, #0]
 80072c2:	4611      	mov	r1, r2
 80072c4:	4a9e      	ldr	r2, [pc, #632]	; (8007540 <TIM2_IRQHandler+0x2a0>)
 80072c6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	4a9b      	ldr	r2, [pc, #620]	; (800753c <TIM2_IRQHandler+0x29c>)
 80072ce:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP - ADC_Array_VinP[i];
 80072d0:	4b9c      	ldr	r3, [pc, #624]	; (8007544 <TIM2_IRQHandler+0x2a4>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a97      	ldr	r2, [pc, #604]	; (8007534 <TIM2_IRQHandler+0x294>)
 80072d6:	7812      	ldrb	r2, [r2, #0]
 80072d8:	4611      	mov	r1, r2
 80072da:	4a9b      	ldr	r2, [pc, #620]	; (8007548 <TIM2_IRQHandler+0x2a8>)
 80072dc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80072e0:	1a9b      	subs	r3, r3, r2
 80072e2:	4a98      	ldr	r2, [pc, #608]	; (8007544 <TIM2_IRQHandler+0x2a4>)
 80072e4:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout - ADC_Array_Iout[i];
 80072e6:	4b99      	ldr	r3, [pc, #612]	; (800754c <TIM2_IRQHandler+0x2ac>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a92      	ldr	r2, [pc, #584]	; (8007534 <TIM2_IRQHandler+0x294>)
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	4611      	mov	r1, r2
 80072f0:	4a97      	ldr	r2, [pc, #604]	; (8007550 <TIM2_IRQHandler+0x2b0>)
 80072f2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80072f6:	1a9b      	subs	r3, r3, r2
 80072f8:	4a94      	ldr	r2, [pc, #592]	; (800754c <TIM2_IRQHandler+0x2ac>)
 80072fa:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN - ADC_Array_VoutN[i];
 80072fc:	4b95      	ldr	r3, [pc, #596]	; (8007554 <TIM2_IRQHandler+0x2b4>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a8c      	ldr	r2, [pc, #560]	; (8007534 <TIM2_IRQHandler+0x294>)
 8007302:	7812      	ldrb	r2, [r2, #0]
 8007304:	4611      	mov	r1, r2
 8007306:	4a94      	ldr	r2, [pc, #592]	; (8007558 <TIM2_IRQHandler+0x2b8>)
 8007308:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	4a91      	ldr	r2, [pc, #580]	; (8007554 <TIM2_IRQHandler+0x2b4>)
 8007310:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP - ADC_Array_VoutP[i];
 8007312:	4b92      	ldr	r3, [pc, #584]	; (800755c <TIM2_IRQHandler+0x2bc>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a87      	ldr	r2, [pc, #540]	; (8007534 <TIM2_IRQHandler+0x294>)
 8007318:	7812      	ldrb	r2, [r2, #0]
 800731a:	4611      	mov	r1, r2
 800731c:	4a90      	ldr	r2, [pc, #576]	; (8007560 <TIM2_IRQHandler+0x2c0>)
 800731e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	4a8d      	ldr	r2, [pc, #564]	; (800755c <TIM2_IRQHandler+0x2bc>)
 8007326:	6013      	str	r3, [r2, #0]

	ADC_Array_Iin[i] = ADC_Iin;				//save data from ADC read
 8007328:	4b82      	ldr	r3, [pc, #520]	; (8007534 <TIM2_IRQHandler+0x294>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	461a      	mov	r2, r3
 800732e:	4b8d      	ldr	r3, [pc, #564]	; (8007564 <TIM2_IRQHandler+0x2c4>)
 8007330:	8819      	ldrh	r1, [r3, #0]
 8007332:	4b81      	ldr	r3, [pc, #516]	; (8007538 <TIM2_IRQHandler+0x298>)
 8007334:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinN[i] = ADC_VinN;
 8007338:	4b7e      	ldr	r3, [pc, #504]	; (8007534 <TIM2_IRQHandler+0x294>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	4b8a      	ldr	r3, [pc, #552]	; (8007568 <TIM2_IRQHandler+0x2c8>)
 8007340:	8819      	ldrh	r1, [r3, #0]
 8007342:	4b7f      	ldr	r3, [pc, #508]	; (8007540 <TIM2_IRQHandler+0x2a0>)
 8007344:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinP[i] = ADC_VinP;
 8007348:	4b7a      	ldr	r3, [pc, #488]	; (8007534 <TIM2_IRQHandler+0x294>)
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	461a      	mov	r2, r3
 800734e:	4b87      	ldr	r3, [pc, #540]	; (800756c <TIM2_IRQHandler+0x2cc>)
 8007350:	8819      	ldrh	r1, [r3, #0]
 8007352:	4b7d      	ldr	r3, [pc, #500]	; (8007548 <TIM2_IRQHandler+0x2a8>)
 8007354:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Iout[i] = ADC_Iout;
 8007358:	4b76      	ldr	r3, [pc, #472]	; (8007534 <TIM2_IRQHandler+0x294>)
 800735a:	781b      	ldrb	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	4b84      	ldr	r3, [pc, #528]	; (8007570 <TIM2_IRQHandler+0x2d0>)
 8007360:	8819      	ldrh	r1, [r3, #0]
 8007362:	4b7b      	ldr	r3, [pc, #492]	; (8007550 <TIM2_IRQHandler+0x2b0>)
 8007364:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutN[i] = ADC_VoutN;
 8007368:	4b72      	ldr	r3, [pc, #456]	; (8007534 <TIM2_IRQHandler+0x294>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	461a      	mov	r2, r3
 800736e:	4b81      	ldr	r3, [pc, #516]	; (8007574 <TIM2_IRQHandler+0x2d4>)
 8007370:	8819      	ldrh	r1, [r3, #0]
 8007372:	4b79      	ldr	r3, [pc, #484]	; (8007558 <TIM2_IRQHandler+0x2b8>)
 8007374:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutP[i] = ADC_VoutP;
 8007378:	4b6e      	ldr	r3, [pc, #440]	; (8007534 <TIM2_IRQHandler+0x294>)
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	4b7e      	ldr	r3, [pc, #504]	; (8007578 <TIM2_IRQHandler+0x2d8>)
 8007380:	8819      	ldrh	r1, [r3, #0]
 8007382:	4b77      	ldr	r3, [pc, #476]	; (8007560 <TIM2_IRQHandler+0x2c0>)
 8007384:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	ADC_SUM_Iin = ADC_SUM_Iin + ADC_Array_Iin[i];		//summing data and add new data
 8007388:	4b6a      	ldr	r3, [pc, #424]	; (8007534 <TIM2_IRQHandler+0x294>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	461a      	mov	r2, r3
 800738e:	4b6a      	ldr	r3, [pc, #424]	; (8007538 <TIM2_IRQHandler+0x298>)
 8007390:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007394:	461a      	mov	r2, r3
 8007396:	4b66      	ldr	r3, [pc, #408]	; (8007530 <TIM2_IRQHandler+0x290>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4413      	add	r3, r2
 800739c:	4a64      	ldr	r2, [pc, #400]	; (8007530 <TIM2_IRQHandler+0x290>)
 800739e:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN + ADC_Array_VinN[i];
 80073a0:	4b64      	ldr	r3, [pc, #400]	; (8007534 <TIM2_IRQHandler+0x294>)
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	4b66      	ldr	r3, [pc, #408]	; (8007540 <TIM2_IRQHandler+0x2a0>)
 80073a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073ac:	461a      	mov	r2, r3
 80073ae:	4b63      	ldr	r3, [pc, #396]	; (800753c <TIM2_IRQHandler+0x29c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4413      	add	r3, r2
 80073b4:	4a61      	ldr	r2, [pc, #388]	; (800753c <TIM2_IRQHandler+0x29c>)
 80073b6:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP + ADC_Array_VinP[i];
 80073b8:	4b5e      	ldr	r3, [pc, #376]	; (8007534 <TIM2_IRQHandler+0x294>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	4b62      	ldr	r3, [pc, #392]	; (8007548 <TIM2_IRQHandler+0x2a8>)
 80073c0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073c4:	461a      	mov	r2, r3
 80073c6:	4b5f      	ldr	r3, [pc, #380]	; (8007544 <TIM2_IRQHandler+0x2a4>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4413      	add	r3, r2
 80073cc:	4a5d      	ldr	r2, [pc, #372]	; (8007544 <TIM2_IRQHandler+0x2a4>)
 80073ce:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout + ADC_Array_Iout[i];
 80073d0:	4b58      	ldr	r3, [pc, #352]	; (8007534 <TIM2_IRQHandler+0x294>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b5e      	ldr	r3, [pc, #376]	; (8007550 <TIM2_IRQHandler+0x2b0>)
 80073d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073dc:	461a      	mov	r2, r3
 80073de:	4b5b      	ldr	r3, [pc, #364]	; (800754c <TIM2_IRQHandler+0x2ac>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4413      	add	r3, r2
 80073e4:	4a59      	ldr	r2, [pc, #356]	; (800754c <TIM2_IRQHandler+0x2ac>)
 80073e6:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN + ADC_Array_VoutN[i];
 80073e8:	4b52      	ldr	r3, [pc, #328]	; (8007534 <TIM2_IRQHandler+0x294>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b5a      	ldr	r3, [pc, #360]	; (8007558 <TIM2_IRQHandler+0x2b8>)
 80073f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80073f4:	461a      	mov	r2, r3
 80073f6:	4b57      	ldr	r3, [pc, #348]	; (8007554 <TIM2_IRQHandler+0x2b4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4413      	add	r3, r2
 80073fc:	4a55      	ldr	r2, [pc, #340]	; (8007554 <TIM2_IRQHandler+0x2b4>)
 80073fe:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP + ADC_Array_VoutP[i];
 8007400:	4b4c      	ldr	r3, [pc, #304]	; (8007534 <TIM2_IRQHandler+0x294>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	4b56      	ldr	r3, [pc, #344]	; (8007560 <TIM2_IRQHandler+0x2c0>)
 8007408:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800740c:	461a      	mov	r2, r3
 800740e:	4b53      	ldr	r3, [pc, #332]	; (800755c <TIM2_IRQHandler+0x2bc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4413      	add	r3, r2
 8007414:	4a51      	ldr	r2, [pc, #324]	; (800755c <TIM2_IRQHandler+0x2bc>)
 8007416:	6013      	str	r3, [r2, #0]

	ADC_Average_Iin = (float) ADC_SUM_Iin / maxdata;	//calculate average data
 8007418:	4b45      	ldr	r3, [pc, #276]	; (8007530 <TIM2_IRQHandler+0x290>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4618      	mov	r0, r3
 800741e:	f7f9 fc79 	bl	8000d14 <__aeabi_i2f>
 8007422:	4603      	mov	r3, r0
 8007424:	4955      	ldr	r1, [pc, #340]	; (800757c <TIM2_IRQHandler+0x2dc>)
 8007426:	4618      	mov	r0, r3
 8007428:	f7f9 fd7c 	bl	8000f24 <__aeabi_fdiv>
 800742c:	4603      	mov	r3, r0
 800742e:	461a      	mov	r2, r3
 8007430:	4b53      	ldr	r3, [pc, #332]	; (8007580 <TIM2_IRQHandler+0x2e0>)
 8007432:	601a      	str	r2, [r3, #0]
	ADC_Average_VinN = (float) ADC_SUM_VinN / maxdata;
 8007434:	4b41      	ldr	r3, [pc, #260]	; (800753c <TIM2_IRQHandler+0x29c>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4618      	mov	r0, r3
 800743a:	f7f9 fc6b 	bl	8000d14 <__aeabi_i2f>
 800743e:	4603      	mov	r3, r0
 8007440:	494e      	ldr	r1, [pc, #312]	; (800757c <TIM2_IRQHandler+0x2dc>)
 8007442:	4618      	mov	r0, r3
 8007444:	f7f9 fd6e 	bl	8000f24 <__aeabi_fdiv>
 8007448:	4603      	mov	r3, r0
 800744a:	461a      	mov	r2, r3
 800744c:	4b4d      	ldr	r3, [pc, #308]	; (8007584 <TIM2_IRQHandler+0x2e4>)
 800744e:	601a      	str	r2, [r3, #0]
	ADC_Average_VinP = (float) ADC_SUM_VinP / maxdata;
 8007450:	4b3c      	ldr	r3, [pc, #240]	; (8007544 <TIM2_IRQHandler+0x2a4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 fc5d 	bl	8000d14 <__aeabi_i2f>
 800745a:	4603      	mov	r3, r0
 800745c:	4947      	ldr	r1, [pc, #284]	; (800757c <TIM2_IRQHandler+0x2dc>)
 800745e:	4618      	mov	r0, r3
 8007460:	f7f9 fd60 	bl	8000f24 <__aeabi_fdiv>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	4b47      	ldr	r3, [pc, #284]	; (8007588 <TIM2_IRQHandler+0x2e8>)
 800746a:	601a      	str	r2, [r3, #0]
	ADC_Average_Iout = (float) ADC_SUM_Iout / maxdata;
 800746c:	4b37      	ldr	r3, [pc, #220]	; (800754c <TIM2_IRQHandler+0x2ac>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f7f9 fc4f 	bl	8000d14 <__aeabi_i2f>
 8007476:	4603      	mov	r3, r0
 8007478:	4940      	ldr	r1, [pc, #256]	; (800757c <TIM2_IRQHandler+0x2dc>)
 800747a:	4618      	mov	r0, r3
 800747c:	f7f9 fd52 	bl	8000f24 <__aeabi_fdiv>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	4b41      	ldr	r3, [pc, #260]	; (800758c <TIM2_IRQHandler+0x2ec>)
 8007486:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutN = (float) ADC_SUM_VoutN / maxdata;
 8007488:	4b32      	ldr	r3, [pc, #200]	; (8007554 <TIM2_IRQHandler+0x2b4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f7f9 fc41 	bl	8000d14 <__aeabi_i2f>
 8007492:	4603      	mov	r3, r0
 8007494:	4939      	ldr	r1, [pc, #228]	; (800757c <TIM2_IRQHandler+0x2dc>)
 8007496:	4618      	mov	r0, r3
 8007498:	f7f9 fd44 	bl	8000f24 <__aeabi_fdiv>
 800749c:	4603      	mov	r3, r0
 800749e:	461a      	mov	r2, r3
 80074a0:	4b3b      	ldr	r3, [pc, #236]	; (8007590 <TIM2_IRQHandler+0x2f0>)
 80074a2:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutP = (float) ADC_SUM_VoutP / maxdata;
 80074a4:	4b2d      	ldr	r3, [pc, #180]	; (800755c <TIM2_IRQHandler+0x2bc>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7f9 fc33 	bl	8000d14 <__aeabi_i2f>
 80074ae:	4603      	mov	r3, r0
 80074b0:	4932      	ldr	r1, [pc, #200]	; (800757c <TIM2_IRQHandler+0x2dc>)
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7f9 fd36 	bl	8000f24 <__aeabi_fdiv>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	4b35      	ldr	r3, [pc, #212]	; (8007594 <TIM2_IRQHandler+0x2f4>)
 80074be:	601a      	str	r2, [r3, #0]

	i++;
 80074c0:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <TIM2_IRQHandler+0x294>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	4b1a      	ldr	r3, [pc, #104]	; (8007534 <TIM2_IRQHandler+0x294>)
 80074ca:	701a      	strb	r2, [r3, #0]
	i = i % maxdata;
 80074cc:	4b19      	ldr	r3, [pc, #100]	; (8007534 <TIM2_IRQHandler+0x294>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	4a31      	ldr	r2, [pc, #196]	; (8007598 <TIM2_IRQHandler+0x2f8>)
 80074d2:	fba2 1203 	umull	r1, r2, r2, r3
 80074d6:	0992      	lsrs	r2, r2, #6
 80074d8:	21c8      	movs	r1, #200	; 0xc8
 80074da:	fb01 f202 	mul.w	r2, r1, r2
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	4b14      	ldr	r3, [pc, #80]	; (8007534 <TIM2_IRQHandler+0x294>)
 80074e4:	701a      	strb	r2, [r3, #0]

	//Current value calculation and calibration
	Current_Charger = 0.0125*ADC_Average_Iout - 24.845 - OFFSET_CurrentSense;
 80074e6:	4b29      	ldr	r3, [pc, #164]	; (800758c <TIM2_IRQHandler+0x2ec>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7f8 ffd8 	bl	80004a0 <__aeabi_f2d>
 80074f0:	a30b      	add	r3, pc, #44	; (adr r3, 8007520 <TIM2_IRQHandler+0x280>)
 80074f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f6:	f7f9 f82b 	bl	8000550 <__aeabi_dmul>
 80074fa:	4603      	mov	r3, r0
 80074fc:	460c      	mov	r4, r1
 80074fe:	4618      	mov	r0, r3
 8007500:	4621      	mov	r1, r4
 8007502:	a309      	add	r3, pc, #36	; (adr r3, 8007528 <TIM2_IRQHandler+0x288>)
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f7f8 fe6a 	bl	80001e0 <__aeabi_dsub>
 800750c:	4603      	mov	r3, r0
 800750e:	460c      	mov	r4, r1
 8007510:	4625      	mov	r5, r4
 8007512:	461c      	mov	r4, r3
 8007514:	4b21      	ldr	r3, [pc, #132]	; (800759c <TIM2_IRQHandler+0x2fc>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	e042      	b.n	80075a0 <TIM2_IRQHandler+0x300>
 800751a:	bf00      	nop
 800751c:	f3af 8000 	nop.w
 8007520:	9999999a 	.word	0x9999999a
 8007524:	3f899999 	.word	0x3f899999
 8007528:	eb851eb8 	.word	0xeb851eb8
 800752c:	4038d851 	.word	0x4038d851
 8007530:	20000724 	.word	0x20000724
 8007534:	200016b4 	.word	0x200016b4
 8007538:	20000748 	.word	0x20000748
 800753c:	20000ca0 	.word	0x20000ca0
 8007540:	20000dac 	.word	0x20000dac
 8007544:	20001110 	.word	0x20001110
 8007548:	20000f6c 	.word	0x20000f6c
 800754c:	20000d0c 	.word	0x20000d0c
 8007550:	20000b10 	.word	0x20000b10
 8007554:	20000694 	.word	0x20000694
 8007558:	20000948 	.word	0x20000948
 800755c:	2000072c 	.word	0x2000072c
 8007560:	2000112c 	.word	0x2000112c
 8007564:	200006ce 	.word	0x200006ce
 8007568:	20000ce4 	.word	0x20000ce4
 800756c:	20000738 	.word	0x20000738
 8007570:	20000718 	.word	0x20000718
 8007574:	200006a2 	.word	0x200006a2
 8007578:	2000090c 	.word	0x2000090c
 800757c:	43480000 	.word	0x43480000
 8007580:	20000b04 	.word	0x20000b04
 8007584:	200008ec 	.word	0x200008ec
 8007588:	20000cf8 	.word	0x20000cf8
 800758c:	200012e8 	.word	0x200012e8
 8007590:	20000698 	.word	0x20000698
 8007594:	20000908 	.word	0x20000908
 8007598:	51eb851f 	.word	0x51eb851f
 800759c:	200008e8 	.word	0x200008e8
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7f8 ff7d 	bl	80004a0 <__aeabi_f2d>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4620      	mov	r0, r4
 80075ac:	4629      	mov	r1, r5
 80075ae:	f7f8 fe17 	bl	80001e0 <__aeabi_dsub>
 80075b2:	4603      	mov	r3, r0
 80075b4:	460c      	mov	r4, r1
 80075b6:	4618      	mov	r0, r3
 80075b8:	4621      	mov	r1, r4
 80075ba:	f7f9 faa1 	bl	8000b00 <__aeabi_d2f>
 80075be:	4602      	mov	r2, r0
 80075c0:	4b95      	ldr	r3, [pc, #596]	; (8007818 <TIM2_IRQHandler+0x578>)
 80075c2:	601a      	str	r2, [r3, #0]
	OFFSET_Calibration = 0.0125*ADC_Average_Iout - 24.845;
 80075c4:	4b95      	ldr	r3, [pc, #596]	; (800781c <TIM2_IRQHandler+0x57c>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7f8 ff69 	bl	80004a0 <__aeabi_f2d>
 80075ce:	a386      	add	r3, pc, #536	; (adr r3, 80077e8 <TIM2_IRQHandler+0x548>)
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f7f8 ffbc 	bl	8000550 <__aeabi_dmul>
 80075d8:	4603      	mov	r3, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	4618      	mov	r0, r3
 80075de:	4621      	mov	r1, r4
 80075e0:	a383      	add	r3, pc, #524	; (adr r3, 80077f0 <TIM2_IRQHandler+0x550>)
 80075e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e6:	f7f8 fdfb 	bl	80001e0 <__aeabi_dsub>
 80075ea:	4603      	mov	r3, r0
 80075ec:	460c      	mov	r4, r1
 80075ee:	4618      	mov	r0, r3
 80075f0:	4621      	mov	r1, r4
 80075f2:	f7f9 fa85 	bl	8000b00 <__aeabi_d2f>
 80075f6:	4602      	mov	r2, r0
 80075f8:	4b89      	ldr	r3, [pc, #548]	; (8007820 <TIM2_IRQHandler+0x580>)
 80075fa:	601a      	str	r2, [r3, #0]
	if (Current_Charger<=0)
 80075fc:	4b86      	ldr	r3, [pc, #536]	; (8007818 <TIM2_IRQHandler+0x578>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f04f 0100 	mov.w	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f7f9 fd81 	bl	800110c <__aeabi_fcmple>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d003      	beq.n	8007618 <TIM2_IRQHandler+0x378>
		Current_Charger = 0;
 8007610:	4b81      	ldr	r3, [pc, #516]	; (8007818 <TIM2_IRQHandler+0x578>)
 8007612:	f04f 0200 	mov.w	r2, #0
 8007616:	601a      	str	r2, [r3, #0]

	//Voltage value calculation and calibration
	ADC_VoltageResult = fabs (ADC_Average_VoutN - ADC_Average_VoutP);
 8007618:	4b82      	ldr	r3, [pc, #520]	; (8007824 <TIM2_IRQHandler+0x584>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	4b82      	ldr	r3, [pc, #520]	; (8007828 <TIM2_IRQHandler+0x588>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4619      	mov	r1, r3
 8007622:	4610      	mov	r0, r2
 8007624:	f7f9 fac0 	bl	8000ba8 <__aeabi_fsub>
 8007628:	4603      	mov	r3, r0
 800762a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800762e:	4a7f      	ldr	r2, [pc, #508]	; (800782c <TIM2_IRQHandler+0x58c>)
 8007630:	6013      	str	r3, [r2, #0]
	Voltage_Charger = ADC_VoltageResult*0.042318765307477 - 0.240709805391821;
 8007632:	4b7e      	ldr	r3, [pc, #504]	; (800782c <TIM2_IRQHandler+0x58c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4618      	mov	r0, r3
 8007638:	f7f8 ff32 	bl	80004a0 <__aeabi_f2d>
 800763c:	a36e      	add	r3, pc, #440	; (adr r3, 80077f8 <TIM2_IRQHandler+0x558>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f8 ff85 	bl	8000550 <__aeabi_dmul>
 8007646:	4603      	mov	r3, r0
 8007648:	460c      	mov	r4, r1
 800764a:	4618      	mov	r0, r3
 800764c:	4621      	mov	r1, r4
 800764e:	a36c      	add	r3, pc, #432	; (adr r3, 8007800 <TIM2_IRQHandler+0x560>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 fdc4 	bl	80001e0 <__aeabi_dsub>
 8007658:	4603      	mov	r3, r0
 800765a:	460c      	mov	r4, r1
 800765c:	4618      	mov	r0, r3
 800765e:	4621      	mov	r1, r4
 8007660:	f7f9 fa4e 	bl	8000b00 <__aeabi_d2f>
 8007664:	4602      	mov	r2, r0
 8007666:	4b72      	ldr	r3, [pc, #456]	; (8007830 <TIM2_IRQHandler+0x590>)
 8007668:	601a      	str	r2, [r3, #0]
	if(Voltage_Charger <= 0)
 800766a:	4b71      	ldr	r3, [pc, #452]	; (8007830 <TIM2_IRQHandler+0x590>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f04f 0100 	mov.w	r1, #0
 8007672:	4618      	mov	r0, r3
 8007674:	f7f9 fd4a 	bl	800110c <__aeabi_fcmple>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <TIM2_IRQHandler+0x3e6>
		Voltage_Charger = 0;
 800767e:	4b6c      	ldr	r3, [pc, #432]	; (8007830 <TIM2_IRQHandler+0x590>)
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	601a      	str	r2, [r3, #0]

	Temp_delay_calc++;
 8007686:	4b6b      	ldr	r3, [pc, #428]	; (8007834 <TIM2_IRQHandler+0x594>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	3301      	adds	r3, #1
 800768c:	b2da      	uxtb	r2, r3
 800768e:	4b69      	ldr	r3, [pc, #420]	; (8007834 <TIM2_IRQHandler+0x594>)
 8007690:	701a      	strb	r2, [r3, #0]

	if(Temp_delay_calc >= 100)
 8007692:	4b68      	ldr	r3, [pc, #416]	; (8007834 <TIM2_IRQHandler+0x594>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b63      	cmp	r3, #99	; 0x63
 8007698:	d96e      	bls.n	8007778 <TIM2_IRQHandler+0x4d8>
	{
		Temp_delay_calc = 0;
 800769a:	4b66      	ldr	r3, [pc, #408]	; (8007834 <TIM2_IRQHandler+0x594>)
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
		Res_T1 = ADC_temp1*10000/(3900-ADC_temp1); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 80076a0:	4b65      	ldr	r3, [pc, #404]	; (8007838 <TIM2_IRQHandler+0x598>)
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f242 7310 	movw	r3, #10000	; 0x2710
 80076aa:	fb03 f202 	mul.w	r2, r3, r2
 80076ae:	4b62      	ldr	r3, [pc, #392]	; (8007838 <TIM2_IRQHandler+0x598>)
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80076b6:	330c      	adds	r3, #12
 80076b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80076bc:	4618      	mov	r0, r3
 80076be:	f7f9 fb29 	bl	8000d14 <__aeabi_i2f>
 80076c2:	4602      	mov	r2, r0
 80076c4:	4b5d      	ldr	r3, [pc, #372]	; (800783c <TIM2_IRQHandler+0x59c>)
 80076c6:	601a      	str	r2, [r3, #0]
		Temp_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80076c8:	4b5c      	ldr	r3, [pc, #368]	; (800783c <TIM2_IRQHandler+0x59c>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7f8 fee7 	bl	80004a0 <__aeabi_f2d>
 80076d2:	4603      	mov	r3, r0
 80076d4:	460c      	mov	r4, r1
 80076d6:	4618      	mov	r0, r3
 80076d8:	4621      	mov	r1, r4
 80076da:	f008 fd49 	bl	8010170 <log>
 80076de:	a34a      	add	r3, pc, #296	; (adr r3, 8007808 <TIM2_IRQHandler+0x568>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f7f8 ff34 	bl	8000550 <__aeabi_dmul>
 80076e8:	4603      	mov	r3, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4618      	mov	r0, r3
 80076ee:	4621      	mov	r1, r4
 80076f0:	a347      	add	r3, pc, #284	; (adr r3, 8007810 <TIM2_IRQHandler+0x570>)
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f7f8 fd75 	bl	80001e4 <__adddf3>
 80076fa:	4603      	mov	r3, r0
 80076fc:	460c      	mov	r4, r1
 80076fe:	4618      	mov	r0, r3
 8007700:	4621      	mov	r1, r4
 8007702:	f7f9 f9fd 	bl	8000b00 <__aeabi_d2f>
 8007706:	4602      	mov	r2, r0
 8007708:	4b4d      	ldr	r3, [pc, #308]	; (8007840 <TIM2_IRQHandler+0x5a0>)
 800770a:	601a      	str	r2, [r3, #0]
		Res_T2 = ADC_temp2*10000/(3900-ADC_temp2);
 800770c:	4b4d      	ldr	r3, [pc, #308]	; (8007844 <TIM2_IRQHandler+0x5a4>)
 800770e:	881b      	ldrh	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	f242 7310 	movw	r3, #10000	; 0x2710
 8007716:	fb03 f202 	mul.w	r2, r3, r2
 800771a:	4b4a      	ldr	r3, [pc, #296]	; (8007844 <TIM2_IRQHandler+0x5a4>)
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8007722:	330c      	adds	r3, #12
 8007724:	fb92 f3f3 	sdiv	r3, r2, r3
 8007728:	4618      	mov	r0, r3
 800772a:	f7f9 faf3 	bl	8000d14 <__aeabi_i2f>
 800772e:	4602      	mov	r2, r0
 8007730:	4b45      	ldr	r3, [pc, #276]	; (8007848 <TIM2_IRQHandler+0x5a8>)
 8007732:	601a      	str	r2, [r3, #0]
		Temp_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8007734:	4b44      	ldr	r3, [pc, #272]	; (8007848 <TIM2_IRQHandler+0x5a8>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4618      	mov	r0, r3
 800773a:	f7f8 feb1 	bl	80004a0 <__aeabi_f2d>
 800773e:	4603      	mov	r3, r0
 8007740:	460c      	mov	r4, r1
 8007742:	4618      	mov	r0, r3
 8007744:	4621      	mov	r1, r4
 8007746:	f008 fd13 	bl	8010170 <log>
 800774a:	a32f      	add	r3, pc, #188	; (adr r3, 8007808 <TIM2_IRQHandler+0x568>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f8 fefe 	bl	8000550 <__aeabi_dmul>
 8007754:	4603      	mov	r3, r0
 8007756:	460c      	mov	r4, r1
 8007758:	4618      	mov	r0, r3
 800775a:	4621      	mov	r1, r4
 800775c:	a32c      	add	r3, pc, #176	; (adr r3, 8007810 <TIM2_IRQHandler+0x570>)
 800775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007762:	f7f8 fd3f 	bl	80001e4 <__adddf3>
 8007766:	4603      	mov	r3, r0
 8007768:	460c      	mov	r4, r1
 800776a:	4618      	mov	r0, r3
 800776c:	4621      	mov	r1, r4
 800776e:	f7f9 f9c7 	bl	8000b00 <__aeabi_d2f>
 8007772:	4602      	mov	r2, r0
 8007774:	4b35      	ldr	r3, [pc, #212]	; (800784c <TIM2_IRQHandler+0x5ac>)
 8007776:	601a      	str	r2, [r3, #0]
	// *********************** end of Sensing Process (ADC average) ******************************


	// ***********************Charge or standby State ******************************

	if (Charger_Mode == 1){	//charge mode
 8007778:	4b35      	ldr	r3, [pc, #212]	; (8007850 <TIM2_IRQHandler+0x5b0>)
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 80dc 	bne.w	800793a <TIM2_IRQHandler+0x69a>
		flag_FullCharge = 0;
 8007782:	4b34      	ldr	r3, [pc, #208]	; (8007854 <TIM2_IRQHandler+0x5b4>)
 8007784:	2200      	movs	r2, #0
 8007786:	701a      	strb	r2, [r3, #0]
		flag_ForceSwap = 0;
 8007788:	4b33      	ldr	r3, [pc, #204]	; (8007858 <TIM2_IRQHandler+0x5b8>)
 800778a:	2200      	movs	r2, #0
 800778c:	701a      	strb	r2, [r3, #0]
		Fault_Check();
 800778e:	f000 fd33 	bl	80081f8 <Fault_Check>
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8007792:	4b32      	ldr	r3, [pc, #200]	; (800785c <TIM2_IRQHandler+0x5bc>)
 8007794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007796:	4618      	mov	r0, r3
 8007798:	f7f9 fab8 	bl	8000d0c <__aeabi_ui2f>
 800779c:	4602      	mov	r2, r0
 800779e:	4b30      	ldr	r3, [pc, #192]	; (8007860 <TIM2_IRQHandler+0x5c0>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f7f9 fb09 	bl	8000dbc <__aeabi_fmul>
 80077aa:	4603      	mov	r3, r0
 80077ac:	461a      	mov	r2, r3
 80077ae:	4b2d      	ldr	r3, [pc, #180]	; (8007864 <TIM2_IRQHandler+0x5c4>)
 80077b0:	681c      	ldr	r4, [r3, #0]
 80077b2:	4610      	mov	r0, r2
 80077b4:	f7f9 fcc8 	bl	8001148 <__aeabi_f2uiz>
 80077b8:	4603      	mov	r3, r0
 80077ba:	6363      	str	r3, [r4, #52]	; 0x34
//		if(duty>=0.85)
//			duty=0.85;

		if(Voltage_Charger > MAX_CHARGE_VOLTAGE) flag_CHARGE_MODE = 1;
 80077bc:	4b1c      	ldr	r3, [pc, #112]	; (8007830 <TIM2_IRQHandler+0x590>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4929      	ldr	r1, [pc, #164]	; (8007868 <TIM2_IRQHandler+0x5c8>)
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7f9 fcb6 	bl	8001134 <__aeabi_fcmpgt>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <TIM2_IRQHandler+0x534>
 80077ce:	4b27      	ldr	r3, [pc, #156]	; (800786c <TIM2_IRQHandler+0x5cc>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]

		if(flag_CHARGE_MODE == 0) Constant_Current();
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <TIM2_IRQHandler+0x5cc>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d149      	bne.n	8007870 <TIM2_IRQHandler+0x5d0>
 80077dc:	f7f9 fe58 	bl	8001490 <Constant_Current>
 80077e0:	e04c      	b.n	800787c <TIM2_IRQHandler+0x5dc>
 80077e2:	bf00      	nop
 80077e4:	f3af 8000 	nop.w
 80077e8:	9999999a 	.word	0x9999999a
 80077ec:	3f899999 	.word	0x3f899999
 80077f0:	eb851eb8 	.word	0xeb851eb8
 80077f4:	4038d851 	.word	0x4038d851
 80077f8:	2201639d 	.word	0x2201639d
 80077fc:	3fa5aace 	.word	0x3fa5aace
 8007800:	32fe00ad 	.word	0x32fe00ad
 8007804:	3fcecf94 	.word	0x3fcecf94
 8007808:	cccccccd 	.word	0xcccccccd
 800780c:	c0380ccc 	.word	0xc0380ccc
 8007810:	b851eb85 	.word	0xb851eb85
 8007814:	406ecd1e 	.word	0x406ecd1e
 8007818:	200012c4 	.word	0x200012c4
 800781c:	200012e8 	.word	0x200012e8
 8007820:	20000710 	.word	0x20000710
 8007824:	20000698 	.word	0x20000698
 8007828:	20000908 	.word	0x20000908
 800782c:	20000d18 	.word	0x20000d18
 8007830:	20000f44 	.word	0x20000f44
 8007834:	20001722 	.word	0x20001722
 8007838:	20000916 	.word	0x20000916
 800783c:	20000928 	.word	0x20000928
 8007840:	20000d14 	.word	0x20000d14
 8007844:	200006ae 	.word	0x200006ae
 8007848:	20000da8 	.word	0x20000da8
 800784c:	200006b4 	.word	0x200006b4
 8007850:	20000744 	.word	0x20000744
 8007854:	200012c0 	.word	0x200012c0
 8007858:	20000688 	.word	0x20000688
 800785c:	40010000 	.word	0x40010000
 8007860:	200012cc 	.word	0x200012cc
 8007864:	200017c0 	.word	0x200017c0
 8007868:	427e0000 	.word	0x427e0000
 800786c:	20000704 	.word	0x20000704
		else if(flag_CHARGE_MODE == 1) Constant_Voltage();
 8007870:	4ba9      	ldr	r3, [pc, #676]	; (8007b18 <TIM2_IRQHandler+0x878>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d101      	bne.n	800787c <TIM2_IRQHandler+0x5dc>
 8007878:	f7fb fe74 	bl	8003564 <Constant_Voltage>

		//Clearing Charger Decrease rating flag
		if (flag_Derating == 1 && Temp_T1<=(SetProtection_Temp1-15) && Temp_T2<=(SetProtection_Temp2-25)){
 800787c:	4ba7      	ldr	r3, [pc, #668]	; (8007b1c <TIM2_IRQHandler+0x87c>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d122      	bne.n	80078ca <TIM2_IRQHandler+0x62a>
 8007884:	4ba6      	ldr	r3, [pc, #664]	; (8007b20 <TIM2_IRQHandler+0x880>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	3b0f      	subs	r3, #15
 800788a:	4618      	mov	r0, r3
 800788c:	f7f9 fa42 	bl	8000d14 <__aeabi_i2f>
 8007890:	4602      	mov	r2, r0
 8007892:	4ba4      	ldr	r3, [pc, #656]	; (8007b24 <TIM2_IRQHandler+0x884>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4619      	mov	r1, r3
 8007898:	4610      	mov	r0, r2
 800789a:	f7f9 fc41 	bl	8001120 <__aeabi_fcmpge>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d012      	beq.n	80078ca <TIM2_IRQHandler+0x62a>
 80078a4:	4ba0      	ldr	r3, [pc, #640]	; (8007b28 <TIM2_IRQHandler+0x888>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	3b19      	subs	r3, #25
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f9 fa32 	bl	8000d14 <__aeabi_i2f>
 80078b0:	4602      	mov	r2, r0
 80078b2:	4b9e      	ldr	r3, [pc, #632]	; (8007b2c <TIM2_IRQHandler+0x88c>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4619      	mov	r1, r3
 80078b8:	4610      	mov	r0, r2
 80078ba:	f7f9 fc31 	bl	8001120 <__aeabi_fcmpge>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <TIM2_IRQHandler+0x62a>
			flag_Derating = 0;
 80078c4:	4b95      	ldr	r3, [pc, #596]	; (8007b1c <TIM2_IRQHandler+0x87c>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
		}

		if(BPack_SOC>=100 || (Current_Charger < (0.02*BPack_Capacity) && flag_CHARGE_MODE == 1)) {
 80078ca:	4b99      	ldr	r3, [pc, #612]	; (8007b30 <TIM2_IRQHandler+0x890>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4999      	ldr	r1, [pc, #612]	; (8007b34 <TIM2_IRQHandler+0x894>)
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7f9 fc25 	bl	8001120 <__aeabi_fcmpge>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11d      	bne.n	8007918 <TIM2_IRQHandler+0x678>
 80078dc:	4b96      	ldr	r3, [pc, #600]	; (8007b38 <TIM2_IRQHandler+0x898>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7f8 fddd 	bl	80004a0 <__aeabi_f2d>
 80078e6:	4604      	mov	r4, r0
 80078e8:	460d      	mov	r5, r1
 80078ea:	4b94      	ldr	r3, [pc, #592]	; (8007b3c <TIM2_IRQHandler+0x89c>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f8 fdd6 	bl	80004a0 <__aeabi_f2d>
 80078f4:	a386      	add	r3, pc, #536	; (adr r3, 8007b10 <TIM2_IRQHandler+0x870>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 fe29 	bl	8000550 <__aeabi_dmul>
 80078fe:	4602      	mov	r2, r0
 8007900:	460b      	mov	r3, r1
 8007902:	4620      	mov	r0, r4
 8007904:	4629      	mov	r1, r5
 8007906:	f7f9 f895 	bl	8000a34 <__aeabi_dcmplt>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d010      	beq.n	8007932 <TIM2_IRQHandler+0x692>
 8007910:	4b81      	ldr	r3, [pc, #516]	; (8007b18 <TIM2_IRQHandler+0x878>)
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d10c      	bne.n	8007932 <TIM2_IRQHandler+0x692>
			send = 1;
 8007918:	4b89      	ldr	r3, [pc, #548]	; (8007b40 <TIM2_IRQHandler+0x8a0>)
 800791a:	2201      	movs	r2, #1
 800791c:	701a      	strb	r2, [r3, #0]
			duty=0;
 800791e:	4b89      	ldr	r3, [pc, #548]	; (8007b44 <TIM2_IRQHandler+0x8a4>)
 8007920:	f04f 0200 	mov.w	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
			Charger_Mode = 0;
 8007926:	4b88      	ldr	r3, [pc, #544]	; (8007b48 <TIM2_IRQHandler+0x8a8>)
 8007928:	2200      	movs	r2, #0
 800792a:	701a      	strb	r2, [r3, #0]
			//Ready_toCharge = 0;
			flag_FullCharge = 1;
 800792c:	4b87      	ldr	r3, [pc, #540]	; (8007b4c <TIM2_IRQHandler+0x8ac>)
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
		}
		Tbuzz=999;
 8007932:	4b87      	ldr	r3, [pc, #540]	; (8007b50 <TIM2_IRQHandler+0x8b0>)
 8007934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007938:	801a      	strh	r2, [r3, #0]
	}

	if(Charger_Mode == 0){	//standby mode
 800793a:	4b83      	ldr	r3, [pc, #524]	; (8007b48 <TIM2_IRQHandler+0x8a8>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d127      	bne.n	8007992 <TIM2_IRQHandler+0x6f2>
		duty=0;
 8007942:	4b80      	ldr	r3, [pc, #512]	; (8007b44 <TIM2_IRQHandler+0x8a4>)
 8007944:	f04f 0200 	mov.w	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
		dc=0;
 800794a:	4b82      	ldr	r3, [pc, #520]	; (8007b54 <TIM2_IRQHandler+0x8b4>)
 800794c:	f04f 0200 	mov.w	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8007952:	4b81      	ldr	r3, [pc, #516]	; (8007b58 <TIM2_IRQHandler+0x8b8>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	4618      	mov	r0, r3
 8007958:	f7f9 f9d8 	bl	8000d0c <__aeabi_ui2f>
 800795c:	4602      	mov	r2, r0
 800795e:	4b79      	ldr	r3, [pc, #484]	; (8007b44 <TIM2_IRQHandler+0x8a4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4619      	mov	r1, r3
 8007964:	4610      	mov	r0, r2
 8007966:	f7f9 fa29 	bl	8000dbc <__aeabi_fmul>
 800796a:	4603      	mov	r3, r0
 800796c:	461a      	mov	r2, r3
 800796e:	4b7b      	ldr	r3, [pc, #492]	; (8007b5c <TIM2_IRQHandler+0x8bc>)
 8007970:	681c      	ldr	r4, [r3, #0]
 8007972:	4610      	mov	r0, r2
 8007974:	f7f9 fbe8 	bl	8001148 <__aeabi_f2uiz>
 8007978:	4603      	mov	r3, r0
 800797a:	6363      	str	r3, [r4, #52]	; 0x34
		Ah_CONSUMPTION = 0;
 800797c:	4b78      	ldr	r3, [pc, #480]	; (8007b60 <TIM2_IRQHandler+0x8c0>)
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	601a      	str	r2, [r3, #0]
		OFFSET_CurrentSense = OFFSET_Calibration;
 8007984:	4b77      	ldr	r3, [pc, #476]	; (8007b64 <TIM2_IRQHandler+0x8c4>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a77      	ldr	r2, [pc, #476]	; (8007b68 <TIM2_IRQHandler+0x8c8>)
 800798a:	6013      	str	r3, [r2, #0]
		beepbuzz=0;
 800798c:	4b77      	ldr	r3, [pc, #476]	; (8007b6c <TIM2_IRQHandler+0x8cc>)
 800798e:	2200      	movs	r2, #0
 8007990:	701a      	strb	r2, [r3, #0]

	}

	if(Charger_Mode == 2){	//Protection mode
 8007992:	4b6d      	ldr	r3, [pc, #436]	; (8007b48 <TIM2_IRQHandler+0x8a8>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b02      	cmp	r3, #2
 8007998:	f040 8096 	bne.w	8007ac8 <TIM2_IRQHandler+0x828>
		Tbuzz=Tbuzz+1;
 800799c:	4b6c      	ldr	r3, [pc, #432]	; (8007b50 <TIM2_IRQHandler+0x8b0>)
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	3301      	adds	r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	4b6a      	ldr	r3, [pc, #424]	; (8007b50 <TIM2_IRQHandler+0x8b0>)
 80079a6:	801a      	strh	r2, [r3, #0]
		if (Tbuzz==1000 && beepbuzz<=5){
 80079a8:	4b69      	ldr	r3, [pc, #420]	; (8007b50 <TIM2_IRQHandler+0x8b0>)
 80079aa:	881b      	ldrh	r3, [r3, #0]
 80079ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079b0:	d116      	bne.n	80079e0 <TIM2_IRQHandler+0x740>
 80079b2:	4b6e      	ldr	r3, [pc, #440]	; (8007b6c <TIM2_IRQHandler+0x8cc>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	d812      	bhi.n	80079e0 <TIM2_IRQHandler+0x740>
			HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80079ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079be:	486c      	ldr	r0, [pc, #432]	; (8007b70 <TIM2_IRQHandler+0x8d0>)
 80079c0:	f003 f9fc 	bl	800adbc <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 80079c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80079c8:	486a      	ldr	r0, [pc, #424]	; (8007b74 <TIM2_IRQHandler+0x8d4>)
 80079ca:	f003 f9f7 	bl	800adbc <HAL_GPIO_TogglePin>
			Tbuzz=0; beepbuzz+=1;
 80079ce:	4b60      	ldr	r3, [pc, #384]	; (8007b50 <TIM2_IRQHandler+0x8b0>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	801a      	strh	r2, [r3, #0]
 80079d4:	4b65      	ldr	r3, [pc, #404]	; (8007b6c <TIM2_IRQHandler+0x8cc>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	3301      	adds	r3, #1
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	4b63      	ldr	r3, [pc, #396]	; (8007b6c <TIM2_IRQHandler+0x8cc>)
 80079de:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Charger Over Temperature
		if (Flag_ChargerOverTemperature == 1 && Temp_T1<=(SetProtection_Temp1-10) && Temp_T2<=(SetProtection_Temp2-10) && beepbuzz>5){
 80079e0:	4b65      	ldr	r3, [pc, #404]	; (8007b78 <TIM2_IRQHandler+0x8d8>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d13f      	bne.n	8007a68 <TIM2_IRQHandler+0x7c8>
 80079e8:	4b4d      	ldr	r3, [pc, #308]	; (8007b20 <TIM2_IRQHandler+0x880>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	3b0a      	subs	r3, #10
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f9 f990 	bl	8000d14 <__aeabi_i2f>
 80079f4:	4602      	mov	r2, r0
 80079f6:	4b4b      	ldr	r3, [pc, #300]	; (8007b24 <TIM2_IRQHandler+0x884>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f7f9 fb8f 	bl	8001120 <__aeabi_fcmpge>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d02f      	beq.n	8007a68 <TIM2_IRQHandler+0x7c8>
 8007a08:	4b47      	ldr	r3, [pc, #284]	; (8007b28 <TIM2_IRQHandler+0x888>)
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	3b0a      	subs	r3, #10
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7f9 f980 	bl	8000d14 <__aeabi_i2f>
 8007a14:	4602      	mov	r2, r0
 8007a16:	4b45      	ldr	r3, [pc, #276]	; (8007b2c <TIM2_IRQHandler+0x88c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	f7f9 fb7f 	bl	8001120 <__aeabi_fcmpge>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01f      	beq.n	8007a68 <TIM2_IRQHandler+0x7c8>
 8007a28:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <TIM2_IRQHandler+0x8cc>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b05      	cmp	r3, #5
 8007a2e:	d91b      	bls.n	8007a68 <TIM2_IRQHandler+0x7c8>
			Flag_ChargerOverTemperature = 0;
 8007a30:	4b51      	ldr	r3, [pc, #324]	; (8007b78 <TIM2_IRQHandler+0x8d8>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	701a      	strb	r2, [r3, #0]
			flag_CHARGE_MODE = 0;
 8007a36:	4b38      	ldr	r3, [pc, #224]	; (8007b18 <TIM2_IRQHandler+0x878>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
			dc=0; Charger_Mode =1;
 8007a3c:	4b45      	ldr	r3, [pc, #276]	; (8007b54 <TIM2_IRQHandler+0x8b4>)
 8007a3e:	f04f 0200 	mov.w	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	4b40      	ldr	r3, [pc, #256]	; (8007b48 <TIM2_IRQHandler+0x8a8>)
 8007a46:	2201      	movs	r2, #1
 8007a48:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a50:	4847      	ldr	r0, [pc, #284]	; (8007b70 <TIM2_IRQHandler+0x8d0>)
 8007a52:	f003 f99b 	bl	800ad8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led1_Pin,0);
 8007a56:	2200      	movs	r2, #0
 8007a58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a5c:	4845      	ldr	r0, [pc, #276]	; (8007b74 <TIM2_IRQHandler+0x8d4>)
 8007a5e:	f003 f995 	bl	800ad8c <HAL_GPIO_WritePin>
			flag_CHARGE_MODE = 0;
 8007a62:	4b2d      	ldr	r3, [pc, #180]	; (8007b18 <TIM2_IRQHandler+0x878>)
 8007a64:	2200      	movs	r2, #0
 8007a66:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Battery Over Temperature
		if (flag_trip_overtemperature == 0 && LastFlag_OverTemperature == 1){
 8007a68:	4b44      	ldr	r3, [pc, #272]	; (8007b7c <TIM2_IRQHandler+0x8dc>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d12b      	bne.n	8007ac8 <TIM2_IRQHandler+0x828>
 8007a70:	4b43      	ldr	r3, [pc, #268]	; (8007b80 <TIM2_IRQHandler+0x8e0>)
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d127      	bne.n	8007ac8 <TIM2_IRQHandler+0x828>
			delay_clearing_overtemp ++;
 8007a78:	4b42      	ldr	r3, [pc, #264]	; (8007b84 <TIM2_IRQHandler+0x8e4>)
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	3301      	adds	r3, #1
 8007a7e:	b29a      	uxth	r2, r3
 8007a80:	4b40      	ldr	r3, [pc, #256]	; (8007b84 <TIM2_IRQHandler+0x8e4>)
 8007a82:	801a      	strh	r2, [r3, #0]
			if(delay_clearing_overtemp >= 1500) {
 8007a84:	4b3f      	ldr	r3, [pc, #252]	; (8007b84 <TIM2_IRQHandler+0x8e4>)
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	f240 52db 	movw	r2, #1499	; 0x5db
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d91b      	bls.n	8007ac8 <TIM2_IRQHandler+0x828>
				flag_CHARGE_MODE = 0;
 8007a90:	4b21      	ldr	r3, [pc, #132]	; (8007b18 <TIM2_IRQHandler+0x878>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	701a      	strb	r2, [r3, #0]
				dc=0; Charger_Mode =1;
 8007a96:	4b2f      	ldr	r3, [pc, #188]	; (8007b54 <TIM2_IRQHandler+0x8b4>)
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <TIM2_IRQHandler+0x8a8>)
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aaa:	4831      	ldr	r0, [pc, #196]	; (8007b70 <TIM2_IRQHandler+0x8d0>)
 8007aac:	f003 f96e 	bl	800ad8c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, Led1_Pin,0);
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ab6:	482f      	ldr	r0, [pc, #188]	; (8007b74 <TIM2_IRQHandler+0x8d4>)
 8007ab8:	f003 f968 	bl	800ad8c <HAL_GPIO_WritePin>
				flag_CHARGE_MODE = 0;
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <TIM2_IRQHandler+0x878>)
 8007abe:	2200      	movs	r2, #0
 8007ac0:	701a      	strb	r2, [r3, #0]
				delay_clearing_overtemp = 0;
 8007ac2:	4b30      	ldr	r3, [pc, #192]	; (8007b84 <TIM2_IRQHandler+0x8e4>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	Eror_CodeCheck();
 8007ac8:	f000 fa9e 	bl	8008008 <Eror_CodeCheck>
	if(	flag_trip_overvoltage == 1		||
 8007acc:	4b2e      	ldr	r3, [pc, #184]	; (8007b88 <TIM2_IRQHandler+0x8e8>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d07d      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		flag_trip_overtemperature == 1	||
 8007ad4:	4b29      	ldr	r3, [pc, #164]	; (8007b7c <TIM2_IRQHandler+0x8dc>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d079      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		flag_trip_undertemperature == 1	||
 8007adc:	4b2b      	ldr	r3, [pc, #172]	; (8007b8c <TIM2_IRQHandler+0x8ec>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d075      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		flag_trip_overcurrentcharge == 1||
 8007ae4:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <TIM2_IRQHandler+0x8f0>)
 8007ae6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d071      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		flag_trip_SOCOverCharge == 1	||
 8007aec:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <TIM2_IRQHandler+0x8f4>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d06d      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		flag_trip_shortcircuit == 1		||
 8007af4:	4b28      	ldr	r3, [pc, #160]	; (8007b98 <TIM2_IRQHandler+0x8f8>)
 8007af6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d069      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		flag_trip_systemfailure == 1	||
 8007afc:	4b27      	ldr	r3, [pc, #156]	; (8007b9c <TIM2_IRQHandler+0x8fc>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d065      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		Flag_ChargerShortCircuit == 1	||
 8007b04:	4b26      	ldr	r3, [pc, #152]	; (8007ba0 <TIM2_IRQHandler+0x900>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	e04c      	b.n	8007ba4 <TIM2_IRQHandler+0x904>
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w
 8007b10:	47ae147b 	.word	0x47ae147b
 8007b14:	3f947ae1 	.word	0x3f947ae1
 8007b18:	20000704 	.word	0x20000704
 8007b1c:	20001118 	.word	0x20001118
 8007b20:	20000052 	.word	0x20000052
 8007b24:	20000d14 	.word	0x20000d14
 8007b28:	20000051 	.word	0x20000051
 8007b2c:	200006b4 	.word	0x200006b4
 8007b30:	20000ae4 	.word	0x20000ae4
 8007b34:	42c80000 	.word	0x42c80000
 8007b38:	200012c4 	.word	0x200012c4
 8007b3c:	200012bc 	.word	0x200012bc
 8007b40:	20000918 	.word	0x20000918
 8007b44:	200012cc 	.word	0x200012cc
 8007b48:	20000744 	.word	0x20000744
 8007b4c:	200012c0 	.word	0x200012c0
 8007b50:	2000004c 	.word	0x2000004c
 8007b54:	200006dc 	.word	0x200006dc
 8007b58:	40010000 	.word	0x40010000
 8007b5c:	200017c0 	.word	0x200017c0
 8007b60:	2000091c 	.word	0x2000091c
 8007b64:	20000710 	.word	0x20000710
 8007b68:	200008e8 	.word	0x200008e8
 8007b6c:	20000662 	.word	0x20000662
 8007b70:	40020800 	.word	0x40020800
 8007b74:	40020400 	.word	0x40020400
 8007b78:	20000721 	.word	0x20000721
 8007b7c:	200008d8 	.word	0x200008d8
 8007b80:	20000ced 	.word	0x20000ced
 8007b84:	20001720 	.word	0x20001720
 8007b88:	20001308 	.word	0x20001308
 8007b8c:	20000af4 	.word	0x20000af4
 8007b90:	20000d80 	.word	0x20000d80
 8007b94:	200006ac 	.word	0x200006ac
 8007b98:	200006cc 	.word	0x200006cc
 8007b9c:	200006fc 	.word	0x200006fc
 8007ba0:	20000914 	.word	0x20000914
		flag_trip_systemfailure == 1	||
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d013      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		Flag_ChargerOverCurrent == 1	||
 8007ba8:	4b1a      	ldr	r3, [pc, #104]	; (8007c14 <TIM2_IRQHandler+0x974>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d00f      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		Flag_ChargerOverTemperature == 1||
 8007bb0:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <TIM2_IRQHandler+0x978>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d00b      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		Flag_ChargerOverVoltage == 1	||
 8007bb8:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <TIM2_IRQHandler+0x97c>)
 8007bba:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d007      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		Flag_MiniPC_LostCommunication==1||
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <TIM2_IRQHandler+0x980>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d003      	beq.n	8007bd0 <TIM2_IRQHandler+0x930>
		Flag_BMS_LostCommunication == 1)
 8007bc8:	4b16      	ldr	r3, [pc, #88]	; (8007c24 <TIM2_IRQHandler+0x984>)
 8007bca:	781b      	ldrb	r3, [r3, #0]
		Flag_MiniPC_LostCommunication==1||
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d11b      	bne.n	8007c08 <TIM2_IRQHandler+0x968>
		{
			duty=0;
 8007bd0:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <TIM2_IRQHandler+0x988>)
 8007bd2:	f04f 0200 	mov.w	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]
			htim1.Instance->CCR1=duty*TIM1->ARR;
 8007bd8:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <TIM2_IRQHandler+0x98c>)
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7f9 f895 	bl	8000d0c <__aeabi_ui2f>
 8007be2:	4602      	mov	r2, r0
 8007be4:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <TIM2_IRQHandler+0x988>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4619      	mov	r1, r3
 8007bea:	4610      	mov	r0, r2
 8007bec:	f7f9 f8e6 	bl	8000dbc <__aeabi_fmul>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <TIM2_IRQHandler+0x990>)
 8007bf6:	681c      	ldr	r4, [r3, #0]
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	f7f9 faa5 	bl	8001148 <__aeabi_f2uiz>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	6363      	str	r3, [r4, #52]	; 0x34
			Charger_Mode = 2;
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <TIM2_IRQHandler+0x994>)
 8007c04:	2202      	movs	r2, #2
 8007c06:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007c08:	480b      	ldr	r0, [pc, #44]	; (8007c38 <TIM2_IRQHandler+0x998>)
 8007c0a:	f004 feb5 	bl	800c978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007c0e:	bf00      	nop
 8007c10:	bdb0      	pop	{r4, r5, r7, pc}
 8007c12:	bf00      	nop
 8007c14:	200008f8 	.word	0x200008f8
 8007c18:	20000721 	.word	0x20000721
 8007c1c:	20000920 	.word	0x20000920
 8007c20:	200012c8 	.word	0x200012c8
 8007c24:	200006f6 	.word	0x200006f6
 8007c28:	200012cc 	.word	0x200012cc
 8007c2c:	40010000 	.word	0x40010000
 8007c30:	200017c0 	.word	0x200017c0
 8007c34:	20000744 	.word	0x20000744
 8007c38:	20001808 	.word	0x20001808

08007c3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	CAN_Tx_Process();
 8007c40:	f7fd fe6a 	bl	8005918 <CAN_Tx_Process>

	if(Handshake_Recognition == 1){
 8007c44:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <TIM3_IRQHandler+0xcc>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d117      	bne.n	8007c7c <TIM3_IRQHandler+0x40>
		SS+=1;
 8007c4c:	4b2f      	ldr	r3, [pc, #188]	; (8007d0c <TIM3_IRQHandler+0xd0>)
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	4b2d      	ldr	r3, [pc, #180]	; (8007d0c <TIM3_IRQHandler+0xd0>)
 8007c56:	701a      	strb	r2, [r3, #0]
		if(SS >= 50){
 8007c58:	4b2c      	ldr	r3, [pc, #176]	; (8007d0c <TIM3_IRQHandler+0xd0>)
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	2b31      	cmp	r3, #49	; 0x31
 8007c5e:	d90d      	bls.n	8007c7c <TIM3_IRQHandler+0x40>
			if(Communication_BMS_Flag == 1) Communication_BMS_Flag = 0;
 8007c60:	4b2b      	ldr	r3, [pc, #172]	; (8007d10 <TIM3_IRQHandler+0xd4>)
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d103      	bne.n	8007c70 <TIM3_IRQHandler+0x34>
 8007c68:	4b29      	ldr	r3, [pc, #164]	; (8007d10 <TIM3_IRQHandler+0xd4>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <TIM3_IRQHandler+0x3a>
			else Flag_BMS_LostCommunication = 1;
 8007c70:	4b28      	ldr	r3, [pc, #160]	; (8007d14 <TIM3_IRQHandler+0xd8>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	701a      	strb	r2, [r3, #0]
			SS = 0;
 8007c76:	4b25      	ldr	r3, [pc, #148]	; (8007d0c <TIM3_IRQHandler+0xd0>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	701a      	strb	r2, [r3, #0]
//			else Flag_MiniPC_LostCommunication = 1;
//
		}
	}

	if (Charger_Mode == 1){
 8007c7c:	4b26      	ldr	r3, [pc, #152]	; (8007d18 <TIM3_IRQHandler+0xdc>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d138      	bne.n	8007cf6 <TIM3_IRQHandler+0xba>
		Time_Ah++;
 8007c84:	4b25      	ldr	r3, [pc, #148]	; (8007d1c <TIM3_IRQHandler+0xe0>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	4b23      	ldr	r3, [pc, #140]	; (8007d1c <TIM3_IRQHandler+0xe0>)
 8007c8e:	701a      	strb	r2, [r3, #0]
		SUM_Ah += Current_Charger;
 8007c90:	4b23      	ldr	r3, [pc, #140]	; (8007d20 <TIM3_IRQHandler+0xe4>)
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	4b23      	ldr	r3, [pc, #140]	; (8007d24 <TIM3_IRQHandler+0xe8>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	f7f8 ff86 	bl	8000bac <__addsf3>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <TIM3_IRQHandler+0xe4>)
 8007ca6:	601a      	str	r2, [r3, #0]
		if(Time_Ah == 10){
 8007ca8:	4b1c      	ldr	r3, [pc, #112]	; (8007d1c <TIM3_IRQHandler+0xe0>)
 8007caa:	781b      	ldrb	r3, [r3, #0]
 8007cac:	2b0a      	cmp	r3, #10
 8007cae:	d122      	bne.n	8007cf6 <TIM3_IRQHandler+0xba>
			Ah_CONSUMPTION = Ah_CONSUMPTION + (SUM_Ah*1000/10/3600); //1000 mAh, 1/10 Hz, 3600 secon
 8007cb0:	4b1b      	ldr	r3, [pc, #108]	; (8007d20 <TIM3_IRQHandler+0xe4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	491c      	ldr	r1, [pc, #112]	; (8007d28 <TIM3_IRQHandler+0xec>)
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7f9 f880 	bl	8000dbc <__aeabi_fmul>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	491b      	ldr	r1, [pc, #108]	; (8007d2c <TIM3_IRQHandler+0xf0>)
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7f9 f92f 	bl	8000f24 <__aeabi_fdiv>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4919      	ldr	r1, [pc, #100]	; (8007d30 <TIM3_IRQHandler+0xf4>)
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7f9 f92a 	bl	8000f24 <__aeabi_fdiv>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	4b17      	ldr	r3, [pc, #92]	; (8007d34 <TIM3_IRQHandler+0xf8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7f8 ff66 	bl	8000bac <__addsf3>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <TIM3_IRQHandler+0xf8>)
 8007ce6:	601a      	str	r2, [r3, #0]
			SUM_Ah = 0;
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <TIM3_IRQHandler+0xe4>)
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	601a      	str	r2, [r3, #0]
			Time_Ah = 0;
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <TIM3_IRQHandler+0xe0>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	701a      	strb	r2, [r3, #0]
		}
	}
	Delay_USART = 1;
 8007cf6:	4b10      	ldr	r3, [pc, #64]	; (8007d38 <TIM3_IRQHandler+0xfc>)
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007cfc:	480f      	ldr	r0, [pc, #60]	; (8007d3c <TIM3_IRQHandler+0x100>)
 8007cfe:	f004 fe3b 	bl	800c978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007d02:	bf00      	nop
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20000d68 	.word	0x20000d68
 8007d0c:	20000663 	.word	0x20000663
 8007d10:	20000adc 	.word	0x20000adc
 8007d14:	200006f6 	.word	0x200006f6
 8007d18:	20000744 	.word	0x20000744
 8007d1c:	20000664 	.word	0x20000664
 8007d20:	200016b0 	.word	0x200016b0
 8007d24:	200012c4 	.word	0x200012c4
 8007d28:	447a0000 	.word	0x447a0000
 8007d2c:	41200000 	.word	0x41200000
 8007d30:	45610000 	.word	0x45610000
 8007d34:	2000091c 	.word	0x2000091c
 8007d38:	200006bc 	.word	0x200006bc
 8007d3c:	20001778 	.word	0x20001778

08007d40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//	CAN_Rx_Process();	//can receive handle

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007d44:	4802      	ldr	r0, [pc, #8]	; (8007d50 <TIM4_IRQHandler+0x10>)
 8007d46:	f004 fe17 	bl	800c978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007d4a:	bf00      	nop
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20001730 	.word	0x20001730

08007d54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	b0a1      	sub	sp, #132	; 0x84
 8007d5a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007d5c:	4889      	ldr	r0, [pc, #548]	; (8007f84 <USART1_IRQHandler+0x230>)
 8007d5e:	f005 fdc9 	bl	800d8f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  uint8_t kl;

  	if(buffer_serial =='#'){
 8007d62:	4b89      	ldr	r3, [pc, #548]	; (8007f88 <USART1_IRQHandler+0x234>)
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	2b23      	cmp	r3, #35	; 0x23
 8007d68:	d129      	bne.n	8007dbe <USART1_IRQHandler+0x6a>
  		clear_data_receive();
 8007d6a:	f000 fb91 	bl	8008490 <clear_data_receive>
  		for(kl=0;kl<=indeks_words;kl++){
 8007d6e:	2300      	movs	r3, #0
 8007d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007d74:	e01d      	b.n	8007db2 <USART1_IRQHandler+0x5e>
  			memset(words[kl],0,strlen(words[kl]));
 8007d76:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	4a82      	ldr	r2, [pc, #520]	; (8007f8c <USART1_IRQHandler+0x238>)
 8007d84:	189c      	adds	r4, r3, r2
 8007d86:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4a7e      	ldr	r2, [pc, #504]	; (8007f8c <USART1_IRQHandler+0x238>)
 8007d94:	4413      	add	r3, r2
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7f8 fa16 	bl	80001c8 <strlen>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	461a      	mov	r2, r3
 8007da0:	2100      	movs	r1, #0
 8007da2:	4620      	mov	r0, r4
 8007da4:	f006 f972 	bl	800e08c <memset>
  		for(kl=0;kl<=indeks_words;kl++){
 8007da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007dac:	3301      	adds	r3, #1
 8007dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007db2:	4b77      	ldr	r3, [pc, #476]	; (8007f90 <USART1_IRQHandler+0x23c>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d9db      	bls.n	8007d76 <USART1_IRQHandler+0x22>
  		}
  	}

  	if(buffer_serial=='*'){
 8007dbe:	4b72      	ldr	r3, [pc, #456]	; (8007f88 <USART1_IRQHandler+0x234>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc4:	f040 80c8 	bne.w	8007f58 <USART1_IRQHandler+0x204>

		if((data_receive[1]-48) == HOLE) { //
 8007dc8:	4b72      	ldr	r3, [pc, #456]	; (8007f94 <USART1_IRQHandler+0x240>)
 8007dca:	785b      	ldrb	r3, [r3, #1]
 8007dcc:	2b36      	cmp	r3, #54	; 0x36
 8007dce:	f040 8093 	bne.w	8007ef8 <USART1_IRQHandler+0x1a4>
			sprintf(buffer_RS485,"#%d;%ld;%d;%d;%d;%5.2f;%5.2f;%5.2f;%5.2f;%5.2f;%5.2f;%5.2f;%d;%d* \r\n",
 8007dd2:	4b71      	ldr	r3, [pc, #452]	; (8007f98 <USART1_IRQHandler+0x244>)
 8007dd4:	681e      	ldr	r6, [r3, #0]
 8007dd6:	4b71      	ldr	r3, [pc, #452]	; (8007f9c <USART1_IRQHandler+0x248>)
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
 8007ddc:	4b70      	ldr	r3, [pc, #448]	; (8007fa0 <USART1_IRQHandler+0x24c>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	623b      	str	r3, [r7, #32]
 8007de2:	4b70      	ldr	r3, [pc, #448]	; (8007fa4 <USART1_IRQHandler+0x250>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	61fb      	str	r3, [r7, #28]
 8007de8:	4b6f      	ldr	r3, [pc, #444]	; (8007fa8 <USART1_IRQHandler+0x254>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 fb57 	bl	80004a0 <__aeabi_f2d>
 8007df2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8007df6:	4b6d      	ldr	r3, [pc, #436]	; (8007fac <USART1_IRQHandler+0x258>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7f8 fb50 	bl	80004a0 <__aeabi_f2d>
 8007e00:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8007e04:	4b6a      	ldr	r3, [pc, #424]	; (8007fb0 <USART1_IRQHandler+0x25c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7f8 fb49 	bl	80004a0 <__aeabi_f2d>
 8007e0e:	e9c7 0100 	strd	r0, r1, [r7]
 8007e12:	4b68      	ldr	r3, [pc, #416]	; (8007fb4 <USART1_IRQHandler+0x260>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7f8 fb42 	bl	80004a0 <__aeabi_f2d>
 8007e1c:	4682      	mov	sl, r0
 8007e1e:	468b      	mov	fp, r1
 8007e20:	4b65      	ldr	r3, [pc, #404]	; (8007fb8 <USART1_IRQHandler+0x264>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7f8 fb3b 	bl	80004a0 <__aeabi_f2d>
 8007e2a:	4680      	mov	r8, r0
 8007e2c:	4689      	mov	r9, r1
 8007e2e:	4b63      	ldr	r3, [pc, #396]	; (8007fbc <USART1_IRQHandler+0x268>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7f8 fb34 	bl	80004a0 <__aeabi_f2d>
 8007e38:	4604      	mov	r4, r0
 8007e3a:	460d      	mov	r5, r1
 8007e3c:	4b60      	ldr	r3, [pc, #384]	; (8007fc0 <USART1_IRQHandler+0x26c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7f8 fb2d 	bl	80004a0 <__aeabi_f2d>
 8007e46:	460a      	mov	r2, r1
 8007e48:	4601      	mov	r1, r0
 8007e4a:	4b5e      	ldr	r3, [pc, #376]	; (8007fc4 <USART1_IRQHandler+0x270>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	4b5d      	ldr	r3, [pc, #372]	; (8007fc8 <USART1_IRQHandler+0x274>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	9313      	str	r3, [sp, #76]	; 0x4c
 8007e56:	9012      	str	r0, [sp, #72]	; 0x48
 8007e58:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
 8007e5c:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8007e60:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8007e64:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007e68:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007e6c:	e9cd 1208 	strd	r1, r2, [sp, #32]
 8007e70:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007e74:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8007e78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e7c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	9202      	str	r2, [sp, #8]
 8007e84:	6a3a      	ldr	r2, [r7, #32]
 8007e86:	9201      	str	r2, [sp, #4]
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4633      	mov	r3, r6
 8007e8e:	2206      	movs	r2, #6
 8007e90:	494e      	ldr	r1, [pc, #312]	; (8007fcc <USART1_IRQHandler+0x278>)
 8007e92:	484f      	ldr	r0, [pc, #316]	; (8007fd0 <USART1_IRQHandler+0x27c>)
 8007e94:	f006 fd52 	bl	800e93c <siprintf>
					BPack_SOH,
					BPack_cycle,
					BPack_byte6,
					BPack_byte7);

			check++;
 8007e98:	4b4e      	ldr	r3, [pc, #312]	; (8007fd4 <USART1_IRQHandler+0x280>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	4b4c      	ldr	r3, [pc, #304]	; (8007fd4 <USART1_IRQHandler+0x280>)
 8007ea2:	701a      	strb	r2, [r3, #0]
			if(Handshake_Recognition == 1 || BPack_SOC >= 100){
 8007ea4:	4b3e      	ldr	r3, [pc, #248]	; (8007fa0 <USART1_IRQHandler+0x24c>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d008      	beq.n	8007ebe <USART1_IRQHandler+0x16a>
 8007eac:	4b40      	ldr	r3, [pc, #256]	; (8007fb0 <USART1_IRQHandler+0x25c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4949      	ldr	r1, [pc, #292]	; (8007fd8 <USART1_IRQHandler+0x284>)
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7f9 f934 	bl	8001120 <__aeabi_fcmpge>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d04c      	beq.n	8007f58 <USART1_IRQHandler+0x204>
				HAL_GPIO_WritePin(GPIOC, RS485_EN_Pin, 1);
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	2180      	movs	r1, #128	; 0x80
 8007ec2:	4846      	ldr	r0, [pc, #280]	; (8007fdc <USART1_IRQHandler+0x288>)
 8007ec4:	f002 ff62 	bl	800ad8c <HAL_GPIO_WritePin>
				HAL_UART_Transmit(&huart1, (uint8_t *)buffer_RS485, strlen(buffer_RS485), 10*strlen(buffer_RS485));
 8007ec8:	4841      	ldr	r0, [pc, #260]	; (8007fd0 <USART1_IRQHandler+0x27c>)
 8007eca:	f7f8 f97d 	bl	80001c8 <strlen>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	b29c      	uxth	r4, r3
 8007ed2:	483f      	ldr	r0, [pc, #252]	; (8007fd0 <USART1_IRQHandler+0x27c>)
 8007ed4:	f7f8 f978 	bl	80001c8 <strlen>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	4613      	mov	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	4413      	add	r3, r2
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	493a      	ldr	r1, [pc, #232]	; (8007fd0 <USART1_IRQHandler+0x27c>)
 8007ee6:	4827      	ldr	r0, [pc, #156]	; (8007f84 <USART1_IRQHandler+0x230>)
 8007ee8:	f005 fc1e 	bl	800d728 <HAL_UART_Transmit>
				HAL_GPIO_WritePin(GPIOC, RS485_EN_Pin, 0);
 8007eec:	2200      	movs	r2, #0
 8007eee:	2180      	movs	r1, #128	; 0x80
 8007ef0:	483a      	ldr	r0, [pc, #232]	; (8007fdc <USART1_IRQHandler+0x288>)
 8007ef2:	f002 ff4b 	bl	800ad8c <HAL_GPIO_WritePin>
 8007ef6:	e02f      	b.n	8007f58 <USART1_IRQHandler+0x204>
			}
		}

		else if(data_receive[1]-48 == 9) { //
 8007ef8:	4b26      	ldr	r3, [pc, #152]	; (8007f94 <USART1_IRQHandler+0x240>)
 8007efa:	785b      	ldrb	r3, [r3, #1]
 8007efc:	2b39      	cmp	r3, #57	; 0x39
 8007efe:	d12b      	bne.n	8007f58 <USART1_IRQHandler+0x204>
			check--;
 8007f00:	4b34      	ldr	r3, [pc, #208]	; (8007fd4 <USART1_IRQHandler+0x280>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	4b32      	ldr	r3, [pc, #200]	; (8007fd4 <USART1_IRQHandler+0x280>)
 8007f0a:	701a      	strb	r2, [r3, #0]
//				sprintf(words[indeks_words],"%s", token );
//
//				token = strtok(NULL, s);
//				indeks_words++;
//			}
			if(data_receive[HOLE+1]-48 == 1 && Ready_toCharge == 1 && flag_FullCharge != 1) {
 8007f0c:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <USART1_IRQHandler+0x240>)
 8007f0e:	79db      	ldrb	r3, [r3, #7]
 8007f10:	2b31      	cmp	r3, #49	; 0x31
 8007f12:	d10d      	bne.n	8007f30 <USART1_IRQHandler+0x1dc>
 8007f14:	4b23      	ldr	r3, [pc, #140]	; (8007fa4 <USART1_IRQHandler+0x250>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d109      	bne.n	8007f30 <USART1_IRQHandler+0x1dc>
 8007f1c:	4b30      	ldr	r3, [pc, #192]	; (8007fe0 <USART1_IRQHandler+0x28c>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d005      	beq.n	8007f30 <USART1_IRQHandler+0x1dc>
				Charger_Mode = 1;
 8007f24:	4b2f      	ldr	r3, [pc, #188]	; (8007fe4 <USART1_IRQHandler+0x290>)
 8007f26:	2201      	movs	r2, #1
 8007f28:	701a      	strb	r2, [r3, #0]
				LastCharger_Mode = 1;
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	; (8007fe8 <USART1_IRQHandler+0x294>)
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	701a      	strb	r2, [r3, #0]
			}

			if(data_receive[HOLE+1]-48 == 0) {
 8007f30:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <USART1_IRQHandler+0x240>)
 8007f32:	79db      	ldrb	r3, [r3, #7]
 8007f34:	2b30      	cmp	r3, #48	; 0x30
 8007f36:	d10f      	bne.n	8007f58 <USART1_IRQHandler+0x204>
				Charger_Mode = 0;
 8007f38:	4b2a      	ldr	r3, [pc, #168]	; (8007fe4 <USART1_IRQHandler+0x290>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	701a      	strb	r2, [r3, #0]
				Clear_ProtectionFlag();
 8007f3e:	f000 f919 	bl	8008174 <Clear_ProtectionFlag>
				if((LastCharger_Mode == 1) && (Charger_Mode == 0) )
 8007f42:	4b29      	ldr	r3, [pc, #164]	; (8007fe8 <USART1_IRQHandler+0x294>)
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d106      	bne.n	8007f58 <USART1_IRQHandler+0x204>
 8007f4a:	4b26      	ldr	r3, [pc, #152]	; (8007fe4 <USART1_IRQHandler+0x290>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d102      	bne.n	8007f58 <USART1_IRQHandler+0x204>
					flag_ForceSwap = 1;
 8007f52:	4b26      	ldr	r3, [pc, #152]	; (8007fec <USART1_IRQHandler+0x298>)
 8007f54:	2201      	movs	r2, #1
 8007f56:	701a      	strb	r2, [r3, #0]
			}
		}

  	}
  	data_receive[indeks]=buffer_serial;
 8007f58:	4b25      	ldr	r3, [pc, #148]	; (8007ff0 <USART1_IRQHandler+0x29c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	; (8007f88 <USART1_IRQHandler+0x234>)
 8007f5e:	7811      	ldrb	r1, [r2, #0]
 8007f60:	4a0c      	ldr	r2, [pc, #48]	; (8007f94 <USART1_IRQHandler+0x240>)
 8007f62:	54d1      	strb	r1, [r2, r3]
  	indeks++;
 8007f64:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <USART1_IRQHandler+0x29c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	4a21      	ldr	r2, [pc, #132]	; (8007ff0 <USART1_IRQHandler+0x29c>)
 8007f6c:	6013      	str	r3, [r2, #0]
  	HAL_UART_Receive_IT(&huart1,&buffer_serial,1);
 8007f6e:	2201      	movs	r2, #1
 8007f70:	4905      	ldr	r1, [pc, #20]	; (8007f88 <USART1_IRQHandler+0x234>)
 8007f72:	4804      	ldr	r0, [pc, #16]	; (8007f84 <USART1_IRQHandler+0x230>)
 8007f74:	f005 fc6a 	bl	800d84c <HAL_UART_Receive_IT>

  /* USER CODE END USART1_IRQn 1 */
}
 8007f78:	bf00      	nop
 8007f7a:	3734      	adds	r7, #52	; 0x34
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	bf00      	nop
 8007f84:	20001850 	.word	0x20001850
 8007f88:	200015c4 	.word	0x200015c4
 8007f8c:	200016b8 	.word	0x200016b8
 8007f90:	200016ac 	.word	0x200016ac
 8007f94:	200015e4 	.word	0x200015e4
 8007f98:	20000d84 	.word	0x20000d84
 8007f9c:	200006a0 	.word	0x200006a0
 8007fa0:	20000d68 	.word	0x20000d68
 8007fa4:	20000d88 	.word	0x20000d88
 8007fa8:	20000d10 	.word	0x20000d10
 8007fac:	200006b0 	.word	0x200006b0
 8007fb0:	20000ae4 	.word	0x20000ae4
 8007fb4:	20000d1c 	.word	0x20000d1c
 8007fb8:	200012bc 	.word	0x200012bc
 8007fbc:	20000730 	.word	0x20000730
 8007fc0:	200008dc 	.word	0x200008dc
 8007fc4:	20000cc8 	.word	0x20000cc8
 8007fc8:	20000690 	.word	0x20000690
 8007fcc:	080106f0 	.word	0x080106f0
 8007fd0:	20001648 	.word	0x20001648
 8007fd4:	200013f8 	.word	0x200013f8
 8007fd8:	42c80000 	.word	0x42c80000
 8007fdc:	40020800 	.word	0x40020800
 8007fe0:	200012c0 	.word	0x200012c0
 8007fe4:	20000744 	.word	0x20000744
 8007fe8:	200006a1 	.word	0x200006a1
 8007fec:	20000688 	.word	0x20000688
 8007ff0:	20001728 	.word	0x20001728

08007ff4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007ff8:	4802      	ldr	r0, [pc, #8]	; (8008004 <DMA2_Stream0_IRQHandler+0x10>)
 8007ffa:	f002 fac3 	bl	800a584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007ffe:	bf00      	nop
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20001388 	.word	0x20001388

08008008 <Eror_CodeCheck>:

/* USER CODE BEGIN 1 */

void Eror_CodeCheck(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
	if (flag_trip_unbalance==1)
 800800c:	4b46      	ldr	r3, [pc, #280]	; (8008128 <Eror_CodeCheck+0x120>)
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d103      	bne.n	800801c <Eror_CodeCheck+0x14>
			Eror_Code=6;	//Battery Pack imbalance
 8008014:	4b45      	ldr	r3, [pc, #276]	; (800812c <Eror_CodeCheck+0x124>)
 8008016:	2206      	movs	r2, #6
 8008018:	701a      	strb	r2, [r3, #0]

	else if(Flag_BMS_LostCommunication==1)
		Eror_Code=22;
	else if(Flag_MiniPC_LostCommunication==1)
		Eror_Code=23;
}
 800801a:	e081      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (flag_trip_overtemperature==1){
 800801c:	4b44      	ldr	r3, [pc, #272]	; (8008130 <Eror_CodeCheck+0x128>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d106      	bne.n	8008032 <Eror_CodeCheck+0x2a>
			Eror_Code=8;	//Battery Pack over temperature
 8008024:	4b41      	ldr	r3, [pc, #260]	; (800812c <Eror_CodeCheck+0x124>)
 8008026:	2208      	movs	r2, #8
 8008028:	701a      	strb	r2, [r3, #0]
			LastFlag_OverTemperature = 1;
 800802a:	4b42      	ldr	r3, [pc, #264]	; (8008134 <Eror_CodeCheck+0x12c>)
 800802c:	2201      	movs	r2, #1
 800802e:	701a      	strb	r2, [r3, #0]
}
 8008030:	e076      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (flag_trip_undertemperature==1)
 8008032:	4b41      	ldr	r3, [pc, #260]	; (8008138 <Eror_CodeCheck+0x130>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d103      	bne.n	8008042 <Eror_CodeCheck+0x3a>
			Eror_Code=9;	//Battery Pack under temperature
 800803a:	4b3c      	ldr	r3, [pc, #240]	; (800812c <Eror_CodeCheck+0x124>)
 800803c:	2209      	movs	r2, #9
 800803e:	701a      	strb	r2, [r3, #0]
}
 8008040:	e06e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (flag_trip_overcurrentcharge==1)
 8008042:	4b3e      	ldr	r3, [pc, #248]	; (800813c <Eror_CodeCheck+0x134>)
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d103      	bne.n	8008052 <Eror_CodeCheck+0x4a>
			Eror_Code=10;	//Battery Pack over current charge
 800804a:	4b38      	ldr	r3, [pc, #224]	; (800812c <Eror_CodeCheck+0x124>)
 800804c:	220a      	movs	r2, #10
 800804e:	701a      	strb	r2, [r3, #0]
}
 8008050:	e066      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (flag_trip_overvoltage==1)
 8008052:	4b3b      	ldr	r3, [pc, #236]	; (8008140 <Eror_CodeCheck+0x138>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2b01      	cmp	r3, #1
 8008058:	d103      	bne.n	8008062 <Eror_CodeCheck+0x5a>
			Eror_Code=11;	//Battery Pack over voltage
 800805a:	4b34      	ldr	r3, [pc, #208]	; (800812c <Eror_CodeCheck+0x124>)
 800805c:	220b      	movs	r2, #11
 800805e:	701a      	strb	r2, [r3, #0]
}
 8008060:	e05e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (flag_trip_shortcircuit==1)
 8008062:	4b38      	ldr	r3, [pc, #224]	; (8008144 <Eror_CodeCheck+0x13c>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d103      	bne.n	8008072 <Eror_CodeCheck+0x6a>
			Eror_Code=12;	//Battery Pack short circuit
 800806a:	4b30      	ldr	r3, [pc, #192]	; (800812c <Eror_CodeCheck+0x124>)
 800806c:	220c      	movs	r2, #12
 800806e:	701a      	strb	r2, [r3, #0]
}
 8008070:	e056      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (flag_trip_systemfailure==1)
 8008072:	4b35      	ldr	r3, [pc, #212]	; (8008148 <Eror_CodeCheck+0x140>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d103      	bne.n	8008082 <Eror_CodeCheck+0x7a>
			Eror_Code=13;	//Battery Pack system failure
 800807a:	4b2c      	ldr	r3, [pc, #176]	; (800812c <Eror_CodeCheck+0x124>)
 800807c:	220d      	movs	r2, #13
 800807e:	701a      	strb	r2, [r3, #0]
}
 8008080:	e04e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerUnderVoltage==1)
 8008082:	4b32      	ldr	r3, [pc, #200]	; (800814c <Eror_CodeCheck+0x144>)
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d103      	bne.n	8008092 <Eror_CodeCheck+0x8a>
		Eror_Code=14;	//Charger Under Voltage
 800808a:	4b28      	ldr	r3, [pc, #160]	; (800812c <Eror_CodeCheck+0x124>)
 800808c:	220e      	movs	r2, #14
 800808e:	701a      	strb	r2, [r3, #0]
}
 8008090:	e046      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerOverVoltage==1)
 8008092:	4b2f      	ldr	r3, [pc, #188]	; (8008150 <Eror_CodeCheck+0x148>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d103      	bne.n	80080a2 <Eror_CodeCheck+0x9a>
		Eror_Code=15;	//Charger Over Current
 800809a:	4b24      	ldr	r3, [pc, #144]	; (800812c <Eror_CodeCheck+0x124>)
 800809c:	220f      	movs	r2, #15
 800809e:	701a      	strb	r2, [r3, #0]
}
 80080a0:	e03e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerOverTemperature==1)
 80080a2:	4b2c      	ldr	r3, [pc, #176]	; (8008154 <Eror_CodeCheck+0x14c>)
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d103      	bne.n	80080b2 <Eror_CodeCheck+0xaa>
		Eror_Code=16;	//Charger Over Temperature
 80080aa:	4b20      	ldr	r3, [pc, #128]	; (800812c <Eror_CodeCheck+0x124>)
 80080ac:	2210      	movs	r2, #16
 80080ae:	701a      	strb	r2, [r3, #0]
}
 80080b0:	e036      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerUnderTemperature==1)
 80080b2:	4b29      	ldr	r3, [pc, #164]	; (8008158 <Eror_CodeCheck+0x150>)
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d103      	bne.n	80080c2 <Eror_CodeCheck+0xba>
		Eror_Code=17;	//Charger Under Temperature
 80080ba:	4b1c      	ldr	r3, [pc, #112]	; (800812c <Eror_CodeCheck+0x124>)
 80080bc:	2211      	movs	r2, #17
 80080be:	701a      	strb	r2, [r3, #0]
}
 80080c0:	e02e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerShortCircuit==1)
 80080c2:	4b26      	ldr	r3, [pc, #152]	; (800815c <Eror_CodeCheck+0x154>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d103      	bne.n	80080d2 <Eror_CodeCheck+0xca>
		Eror_Code=18;	//Charger Short Circuit
 80080ca:	4b18      	ldr	r3, [pc, #96]	; (800812c <Eror_CodeCheck+0x124>)
 80080cc:	2212      	movs	r2, #18
 80080ce:	701a      	strb	r2, [r3, #0]
}
 80080d0:	e026      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerOverCurrent==1)
 80080d2:	4b23      	ldr	r3, [pc, #140]	; (8008160 <Eror_CodeCheck+0x158>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d103      	bne.n	80080e2 <Eror_CodeCheck+0xda>
		Eror_Code=19;	//Charger Over Current
 80080da:	4b14      	ldr	r3, [pc, #80]	; (800812c <Eror_CodeCheck+0x124>)
 80080dc:	2213      	movs	r2, #19
 80080de:	701a      	strb	r2, [r3, #0]
}
 80080e0:	e01e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_InputUnderVoltage==1)
 80080e2:	4b20      	ldr	r3, [pc, #128]	; (8008164 <Eror_CodeCheck+0x15c>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d103      	bne.n	80080f2 <Eror_CodeCheck+0xea>
		Eror_Code=20;	//Input Under Voltage
 80080ea:	4b10      	ldr	r3, [pc, #64]	; (800812c <Eror_CodeCheck+0x124>)
 80080ec:	2214      	movs	r2, #20
 80080ee:	701a      	strb	r2, [r3, #0]
}
 80080f0:	e016      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if (Flag_InputOverVoltage==1)
 80080f2:	4b1d      	ldr	r3, [pc, #116]	; (8008168 <Eror_CodeCheck+0x160>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d103      	bne.n	8008102 <Eror_CodeCheck+0xfa>
		Eror_Code=21;	//Input Over Current
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <Eror_CodeCheck+0x124>)
 80080fc:	2215      	movs	r2, #21
 80080fe:	701a      	strb	r2, [r3, #0]
}
 8008100:	e00e      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if(Flag_BMS_LostCommunication==1)
 8008102:	4b1a      	ldr	r3, [pc, #104]	; (800816c <Eror_CodeCheck+0x164>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d103      	bne.n	8008112 <Eror_CodeCheck+0x10a>
		Eror_Code=22;
 800810a:	4b08      	ldr	r3, [pc, #32]	; (800812c <Eror_CodeCheck+0x124>)
 800810c:	2216      	movs	r2, #22
 800810e:	701a      	strb	r2, [r3, #0]
}
 8008110:	e006      	b.n	8008120 <Eror_CodeCheck+0x118>
	else if(Flag_MiniPC_LostCommunication==1)
 8008112:	4b17      	ldr	r3, [pc, #92]	; (8008170 <Eror_CodeCheck+0x168>)
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d102      	bne.n	8008120 <Eror_CodeCheck+0x118>
		Eror_Code=23;
 800811a:	4b04      	ldr	r3, [pc, #16]	; (800812c <Eror_CodeCheck+0x124>)
 800811c:	2217      	movs	r2, #23
 800811e:	701a      	strb	r2, [r3, #0]
}
 8008120:	bf00      	nop
 8008122:	46bd      	mov	sp, r7
 8008124:	bc80      	pop	{r7}
 8008126:	4770      	bx	lr
 8008128:	200006a4 	.word	0x200006a4
 800812c:	200006a0 	.word	0x200006a0
 8008130:	200008d8 	.word	0x200008d8
 8008134:	20000ced 	.word	0x20000ced
 8008138:	20000af4 	.word	0x20000af4
 800813c:	20000d80 	.word	0x20000d80
 8008140:	20001308 	.word	0x20001308
 8008144:	200006cc 	.word	0x200006cc
 8008148:	200006fc 	.word	0x200006fc
 800814c:	200008e4 	.word	0x200008e4
 8008150:	20000920 	.word	0x20000920
 8008154:	20000721 	.word	0x20000721
 8008158:	20001324 	.word	0x20001324
 800815c:	20000914 	.word	0x20000914
 8008160:	200008f8 	.word	0x200008f8
 8008164:	200006d8 	.word	0x200006d8
 8008168:	20000d20 	.word	0x20000d20
 800816c:	200006f6 	.word	0x200006f6
 8008170:	200012c8 	.word	0x200012c8

08008174 <Clear_ProtectionFlag>:

void Clear_ProtectionFlag(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0
	flag_trip_overvoltage = 0;
 8008178:	4b13      	ldr	r3, [pc, #76]	; (80081c8 <Clear_ProtectionFlag+0x54>)
 800817a:	2200      	movs	r2, #0
 800817c:	701a      	strb	r2, [r3, #0]
	flag_trip_overtemperature = 0;
 800817e:	4b13      	ldr	r3, [pc, #76]	; (80081cc <Clear_ProtectionFlag+0x58>)
 8008180:	2200      	movs	r2, #0
 8008182:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature = 0;
 8008184:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <Clear_ProtectionFlag+0x5c>)
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge = 0;
 800818a:	4b12      	ldr	r3, [pc, #72]	; (80081d4 <Clear_ProtectionFlag+0x60>)
 800818c:	2200      	movs	r2, #0
 800818e:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge = 0;
 8008190:	4b11      	ldr	r3, [pc, #68]	; (80081d8 <Clear_ProtectionFlag+0x64>)
 8008192:	2200      	movs	r2, #0
 8008194:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit = 0;
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <Clear_ProtectionFlag+0x68>)
 8008198:	2200      	movs	r2, #0
 800819a:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure = 0;
 800819c:	4b10      	ldr	r3, [pc, #64]	; (80081e0 <Clear_ProtectionFlag+0x6c>)
 800819e:	2200      	movs	r2, #0
 80081a0:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverCurrent = 0;
 80081a2:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <Clear_ProtectionFlag+0x70>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverTemperature = 0;
 80081a8:	4b0f      	ldr	r3, [pc, #60]	; (80081e8 <Clear_ProtectionFlag+0x74>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverVoltage = 0;
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <Clear_ProtectionFlag+0x78>)
 80081b0:	2200      	movs	r2, #0
 80081b2:	701a      	strb	r2, [r3, #0]
	Flag_MiniPC_LostCommunication = 0;
 80081b4:	4b0e      	ldr	r3, [pc, #56]	; (80081f0 <Clear_ProtectionFlag+0x7c>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]
	Flag_BMS_LostCommunication = 0;
 80081ba:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <Clear_ProtectionFlag+0x80>)
 80081bc:	2200      	movs	r2, #0
 80081be:	701a      	strb	r2, [r3, #0]
}
 80081c0:	bf00      	nop
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	20001308 	.word	0x20001308
 80081cc:	200008d8 	.word	0x200008d8
 80081d0:	20000af4 	.word	0x20000af4
 80081d4:	20000d80 	.word	0x20000d80
 80081d8:	200006ac 	.word	0x200006ac
 80081dc:	200006cc 	.word	0x200006cc
 80081e0:	200006fc 	.word	0x200006fc
 80081e4:	200008f8 	.word	0x200008f8
 80081e8:	20000721 	.word	0x20000721
 80081ec:	20000920 	.word	0x20000920
 80081f0:	200012c8 	.word	0x200012c8
 80081f4:	200006f6 	.word	0x200006f6

080081f8 <Fault_Check>:

void Fault_Check(void)
{
 80081f8:	b5b0      	push	{r4, r5, r7, lr}
 80081fa:	af00      	add	r7, sp, #0
	if(Current_Charger >= SetProtection_ShortCircuit){
 80081fc:	4b90      	ldr	r3, [pc, #576]	; (8008440 <Fault_Check+0x248>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	4618      	mov	r0, r3
 8008202:	f7f8 fd87 	bl	8000d14 <__aeabi_i2f>
 8008206:	4602      	mov	r2, r0
 8008208:	4b8e      	ldr	r3, [pc, #568]	; (8008444 <Fault_Check+0x24c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7f8 ff7c 	bl	800110c <__aeabi_fcmple>
 8008214:	4603      	mov	r3, r0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d009      	beq.n	800822e <Fault_Check+0x36>
		Flag_ChargerShortCircuit=1;
 800821a:	4b8b      	ldr	r3, [pc, #556]	; (8008448 <Fault_Check+0x250>)
 800821c:	2201      	movs	r2, #1
 800821e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8008220:	2201      	movs	r2, #1
 8008222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008226:	4889      	ldr	r0, [pc, #548]	; (800844c <Fault_Check+0x254>)
 8008228:	f002 fdb0 	bl	800ad8c <HAL_GPIO_WritePin>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
		Eror_Code = 0;
		TripTime_OverCurrent = 0;
		Count_TripTime -= 0.001;
	}
}
 800822c:	e0fb      	b.n	8008426 <Fault_Check+0x22e>
	else if((SetProtection_OverCurrent - Current_Charger)<=0 && Flag_ChargerOverCurrent==0 ){
 800822e:	4b88      	ldr	r3, [pc, #544]	; (8008450 <Fault_Check+0x258>)
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	4618      	mov	r0, r3
 8008234:	f7f8 fd6e 	bl	8000d14 <__aeabi_i2f>
 8008238:	4602      	mov	r2, r0
 800823a:	4b82      	ldr	r3, [pc, #520]	; (8008444 <Fault_Check+0x24c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4619      	mov	r1, r3
 8008240:	4610      	mov	r0, r2
 8008242:	f7f8 fcb1 	bl	8000ba8 <__aeabi_fsub>
 8008246:	4603      	mov	r3, r0
 8008248:	f04f 0100 	mov.w	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f7f8 ff5d 	bl	800110c <__aeabi_fcmple>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d064      	beq.n	8008322 <Fault_Check+0x12a>
 8008258:	4b7e      	ldr	r3, [pc, #504]	; (8008454 <Fault_Check+0x25c>)
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d160      	bne.n	8008322 <Fault_Check+0x12a>
		Eror_Code=17;
 8008260:	4b7d      	ldr	r3, [pc, #500]	; (8008458 <Fault_Check+0x260>)
 8008262:	2211      	movs	r2, #17
 8008264:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 1.8/(((Current_Charger/SetProtection_OverCurrent)*(Current_Charger/SetProtection_OverCurrent))-1);
 8008266:	4b77      	ldr	r3, [pc, #476]	; (8008444 <Fault_Check+0x24c>)
 8008268:	681c      	ldr	r4, [r3, #0]
 800826a:	4b79      	ldr	r3, [pc, #484]	; (8008450 <Fault_Check+0x258>)
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	4618      	mov	r0, r3
 8008270:	f7f8 fd50 	bl	8000d14 <__aeabi_i2f>
 8008274:	4603      	mov	r3, r0
 8008276:	4619      	mov	r1, r3
 8008278:	4620      	mov	r0, r4
 800827a:	f7f8 fe53 	bl	8000f24 <__aeabi_fdiv>
 800827e:	4603      	mov	r3, r0
 8008280:	461d      	mov	r5, r3
 8008282:	4b70      	ldr	r3, [pc, #448]	; (8008444 <Fault_Check+0x24c>)
 8008284:	681c      	ldr	r4, [r3, #0]
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <Fault_Check+0x258>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7f8 fd42 	bl	8000d14 <__aeabi_i2f>
 8008290:	4603      	mov	r3, r0
 8008292:	4619      	mov	r1, r3
 8008294:	4620      	mov	r0, r4
 8008296:	f7f8 fe45 	bl	8000f24 <__aeabi_fdiv>
 800829a:	4603      	mov	r3, r0
 800829c:	4619      	mov	r1, r3
 800829e:	4628      	mov	r0, r5
 80082a0:	f7f8 fd8c 	bl	8000dbc <__aeabi_fmul>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7f8 fc7c 	bl	8000ba8 <__aeabi_fsub>
 80082b0:	4603      	mov	r3, r0
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f8 f8f4 	bl	80004a0 <__aeabi_f2d>
 80082b8:	4603      	mov	r3, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	461a      	mov	r2, r3
 80082be:	4623      	mov	r3, r4
 80082c0:	a15b      	add	r1, pc, #364	; (adr r1, 8008430 <Fault_Check+0x238>)
 80082c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082c6:	f7f8 fa6d 	bl	80007a4 <__aeabi_ddiv>
 80082ca:	4603      	mov	r3, r0
 80082cc:	460c      	mov	r4, r1
 80082ce:	4618      	mov	r0, r3
 80082d0:	4621      	mov	r1, r4
 80082d2:	f7f8 fc15 	bl	8000b00 <__aeabi_d2f>
 80082d6:	4602      	mov	r2, r0
 80082d8:	4b60      	ldr	r3, [pc, #384]	; (800845c <Fault_Check+0x264>)
 80082da:	601a      	str	r2, [r3, #0]
		Count_TripTime += 0.001;
 80082dc:	4b60      	ldr	r3, [pc, #384]	; (8008460 <Fault_Check+0x268>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7f8 f8dd 	bl	80004a0 <__aeabi_f2d>
 80082e6:	a354      	add	r3, pc, #336	; (adr r3, 8008438 <Fault_Check+0x240>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f7 ff7a 	bl	80001e4 <__adddf3>
 80082f0:	4603      	mov	r3, r0
 80082f2:	460c      	mov	r4, r1
 80082f4:	4618      	mov	r0, r3
 80082f6:	4621      	mov	r1, r4
 80082f8:	f7f8 fc02 	bl	8000b00 <__aeabi_d2f>
 80082fc:	4602      	mov	r2, r0
 80082fe:	4b58      	ldr	r3, [pc, #352]	; (8008460 <Fault_Check+0x268>)
 8008300:	601a      	str	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8008302:	4b57      	ldr	r3, [pc, #348]	; (8008460 <Fault_Check+0x268>)
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	4b55      	ldr	r3, [pc, #340]	; (800845c <Fault_Check+0x264>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4619      	mov	r1, r3
 800830c:	4610      	mov	r0, r2
 800830e:	f7f8 ff07 	bl	8001120 <__aeabi_fcmpge>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	f000 8086 	beq.w	8008426 <Fault_Check+0x22e>
			Flag_ChargerOverCurrent=1;
 800831a:	4b4e      	ldr	r3, [pc, #312]	; (8008454 <Fault_Check+0x25c>)
 800831c:	2201      	movs	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8008320:	e081      	b.n	8008426 <Fault_Check+0x22e>
	else if ( Temp_T1 >= (SetProtection_Temp1-10)  || Temp_T2 >= (SetProtection_Temp2-10)){
 8008322:	4b50      	ldr	r3, [pc, #320]	; (8008464 <Fault_Check+0x26c>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	3b0a      	subs	r3, #10
 8008328:	4618      	mov	r0, r3
 800832a:	f7f8 fcf3 	bl	8000d14 <__aeabi_i2f>
 800832e:	4602      	mov	r2, r0
 8008330:	4b4d      	ldr	r3, [pc, #308]	; (8008468 <Fault_Check+0x270>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4619      	mov	r1, r3
 8008336:	4610      	mov	r0, r2
 8008338:	f7f8 fee8 	bl	800110c <__aeabi_fcmple>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10f      	bne.n	8008362 <Fault_Check+0x16a>
 8008342:	4b4a      	ldr	r3, [pc, #296]	; (800846c <Fault_Check+0x274>)
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	3b0a      	subs	r3, #10
 8008348:	4618      	mov	r0, r3
 800834a:	f7f8 fce3 	bl	8000d14 <__aeabi_i2f>
 800834e:	4602      	mov	r2, r0
 8008350:	4b47      	ldr	r3, [pc, #284]	; (8008470 <Fault_Check+0x278>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4619      	mov	r1, r3
 8008356:	4610      	mov	r0, r2
 8008358:	f7f8 fed8 	bl	800110c <__aeabi_fcmple>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d02b      	beq.n	80083ba <Fault_Check+0x1c2>
		flag_Derating = 1;
 8008362:	4b44      	ldr	r3, [pc, #272]	; (8008474 <Fault_Check+0x27c>)
 8008364:	2201      	movs	r2, #1
 8008366:	701a      	strb	r2, [r3, #0]
		Eror_Code = 14;
 8008368:	4b3b      	ldr	r3, [pc, #236]	; (8008458 <Fault_Check+0x260>)
 800836a:	220e      	movs	r2, #14
 800836c:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 800836e:	4b3d      	ldr	r3, [pc, #244]	; (8008464 <Fault_Check+0x26c>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	4618      	mov	r0, r3
 8008374:	f7f8 fcce 	bl	8000d14 <__aeabi_i2f>
 8008378:	4602      	mov	r2, r0
 800837a:	4b3b      	ldr	r3, [pc, #236]	; (8008468 <Fault_Check+0x270>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4619      	mov	r1, r3
 8008380:	4610      	mov	r0, r2
 8008382:	f7f8 fec3 	bl	800110c <__aeabi_fcmple>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10f      	bne.n	80083ac <Fault_Check+0x1b4>
 800838c:	4b37      	ldr	r3, [pc, #220]	; (800846c <Fault_Check+0x274>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f7f8 fcbf 	bl	8000d14 <__aeabi_i2f>
 8008396:	4602      	mov	r2, r0
 8008398:	4b35      	ldr	r3, [pc, #212]	; (8008470 <Fault_Check+0x278>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7f8 feb4 	bl	800110c <__aeabi_fcmple>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d100      	bne.n	80083ac <Fault_Check+0x1b4>
 80083aa:	e03c      	b.n	8008426 <Fault_Check+0x22e>
			Flag_ChargerOverTemperature = 1;
 80083ac:	4b32      	ldr	r3, [pc, #200]	; (8008478 <Fault_Check+0x280>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 2;
 80083b2:	4b32      	ldr	r3, [pc, #200]	; (800847c <Fault_Check+0x284>)
 80083b4:	2202      	movs	r2, #2
 80083b6:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 80083b8:	e035      	b.n	8008426 <Fault_Check+0x22e>
	else if(Voltage_Charger >= SetProtection_OverVoltage){
 80083ba:	4b31      	ldr	r3, [pc, #196]	; (8008480 <Fault_Check+0x288>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f8 fca8 	bl	8000d14 <__aeabi_i2f>
 80083c4:	4602      	mov	r2, r0
 80083c6:	4b2f      	ldr	r3, [pc, #188]	; (8008484 <Fault_Check+0x28c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f7f8 fe9d 	bl	800110c <__aeabi_fcmple>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <Fault_Check+0x1e8>
		Flag_ChargerOverVoltage=1;
 80083d8:	4b2b      	ldr	r3, [pc, #172]	; (8008488 <Fault_Check+0x290>)
 80083da:	2201      	movs	r2, #1
 80083dc:	701a      	strb	r2, [r3, #0]
}
 80083de:	e022      	b.n	8008426 <Fault_Check+0x22e>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
 80083e0:	4b1d      	ldr	r3, [pc, #116]	; (8008458 <Fault_Check+0x260>)
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d003      	beq.n	80083f0 <Fault_Check+0x1f8>
 80083e8:	4b1b      	ldr	r3, [pc, #108]	; (8008458 <Fault_Check+0x260>)
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	4b27      	ldr	r3, [pc, #156]	; (800848c <Fault_Check+0x294>)
 80083ee:	701a      	strb	r2, [r3, #0]
		Eror_Code = 0;
 80083f0:	4b19      	ldr	r3, [pc, #100]	; (8008458 <Fault_Check+0x260>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 0;
 80083f6:	4b19      	ldr	r3, [pc, #100]	; (800845c <Fault_Check+0x264>)
 80083f8:	f04f 0200 	mov.w	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
		Count_TripTime -= 0.001;
 80083fe:	4b18      	ldr	r3, [pc, #96]	; (8008460 <Fault_Check+0x268>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4618      	mov	r0, r3
 8008404:	f7f8 f84c 	bl	80004a0 <__aeabi_f2d>
 8008408:	a30b      	add	r3, pc, #44	; (adr r3, 8008438 <Fault_Check+0x240>)
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f7 fee7 	bl	80001e0 <__aeabi_dsub>
 8008412:	4603      	mov	r3, r0
 8008414:	460c      	mov	r4, r1
 8008416:	4618      	mov	r0, r3
 8008418:	4621      	mov	r1, r4
 800841a:	f7f8 fb71 	bl	8000b00 <__aeabi_d2f>
 800841e:	4602      	mov	r2, r0
 8008420:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <Fault_Check+0x268>)
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	e7ff      	b.n	8008426 <Fault_Check+0x22e>
 8008426:	bf00      	nop
 8008428:	bdb0      	pop	{r4, r5, r7, pc}
 800842a:	bf00      	nop
 800842c:	f3af 8000 	nop.w
 8008430:	cccccccd 	.word	0xcccccccd
 8008434:	3ffccccc 	.word	0x3ffccccc
 8008438:	d2f1a9fc 	.word	0xd2f1a9fc
 800843c:	3f50624d 	.word	0x3f50624d
 8008440:	2000004e 	.word	0x2000004e
 8008444:	200012c4 	.word	0x200012c4
 8008448:	20000914 	.word	0x20000914
 800844c:	40020800 	.word	0x40020800
 8008450:	2000004f 	.word	0x2000004f
 8008454:	200008f8 	.word	0x200008f8
 8008458:	200006a0 	.word	0x200006a0
 800845c:	2000171c 	.word	0x2000171c
 8008460:	2000172c 	.word	0x2000172c
 8008464:	20000052 	.word	0x20000052
 8008468:	20000d14 	.word	0x20000d14
 800846c:	20000051 	.word	0x20000051
 8008470:	200006b4 	.word	0x200006b4
 8008474:	20001118 	.word	0x20001118
 8008478:	20000721 	.word	0x20000721
 800847c:	20000744 	.word	0x20000744
 8008480:	20000050 	.word	0x20000050
 8008484:	20000f44 	.word	0x20000f44
 8008488:	20000920 	.word	0x20000920
 800848c:	20000720 	.word	0x20000720

08008490 <clear_data_receive>:

void clear_data_receive(void)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
	int i;
	for(i=indeks;i>=0;i--)
 8008496:	4b0b      	ldr	r3, [pc, #44]	; (80084c4 <clear_data_receive+0x34>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	e007      	b.n	80084ae <clear_data_receive+0x1e>
	{
		data_receive[i]=0;
 800849e:	4a0a      	ldr	r2, [pc, #40]	; (80084c8 <clear_data_receive+0x38>)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4413      	add	r3, r2
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
	for(i=indeks;i>=0;i--)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	3b01      	subs	r3, #1
 80084ac:	607b      	str	r3, [r7, #4]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	daf4      	bge.n	800849e <clear_data_receive+0xe>
	}
	indeks=0;
 80084b4:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <clear_data_receive+0x34>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
}
 80084ba:	bf00      	nop
 80084bc:	370c      	adds	r7, #12
 80084be:	46bd      	mov	sp, r7
 80084c0:	bc80      	pop	{r7}
 80084c2:	4770      	bx	lr
 80084c4:	20001728 	.word	0x20001728
 80084c8:	200015e4 	.word	0x200015e4

080084cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80084d4:	4b11      	ldr	r3, [pc, #68]	; (800851c <_sbrk+0x50>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d102      	bne.n	80084e2 <_sbrk+0x16>
		heap_end = &end;
 80084dc:	4b0f      	ldr	r3, [pc, #60]	; (800851c <_sbrk+0x50>)
 80084de:	4a10      	ldr	r2, [pc, #64]	; (8008520 <_sbrk+0x54>)
 80084e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80084e2:	4b0e      	ldr	r3, [pc, #56]	; (800851c <_sbrk+0x50>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80084e8:	4b0c      	ldr	r3, [pc, #48]	; (800851c <_sbrk+0x50>)
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4413      	add	r3, r2
 80084f0:	466a      	mov	r2, sp
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d907      	bls.n	8008506 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80084f6:	f005 fd65 	bl	800dfc4 <__errno>
 80084fa:	4602      	mov	r2, r0
 80084fc:	230c      	movs	r3, #12
 80084fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008500:	f04f 33ff 	mov.w	r3, #4294967295
 8008504:	e006      	b.n	8008514 <_sbrk+0x48>
	}

	heap_end += incr;
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <_sbrk+0x50>)
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	4a03      	ldr	r2, [pc, #12]	; (800851c <_sbrk+0x50>)
 8008510:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008512:	68fb      	ldr	r3, [r7, #12]
}
 8008514:	4618      	mov	r0, r3
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	20000668 	.word	0x20000668
 8008520:	20001898 	.word	0x20001898

08008524 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008524:	b480      	push	{r7}
 8008526:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008528:	4b12      	ldr	r3, [pc, #72]	; (8008574 <SystemInit+0x50>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a11      	ldr	r2, [pc, #68]	; (8008574 <SystemInit+0x50>)
 800852e:	f043 0301 	orr.w	r3, r3, #1
 8008532:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008534:	4b0f      	ldr	r3, [pc, #60]	; (8008574 <SystemInit+0x50>)
 8008536:	2200      	movs	r2, #0
 8008538:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800853a:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <SystemInit+0x50>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a0d      	ldr	r2, [pc, #52]	; (8008574 <SystemInit+0x50>)
 8008540:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008548:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800854a:	4b0a      	ldr	r3, [pc, #40]	; (8008574 <SystemInit+0x50>)
 800854c:	4a0a      	ldr	r2, [pc, #40]	; (8008578 <SystemInit+0x54>)
 800854e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008550:	4b08      	ldr	r3, [pc, #32]	; (8008574 <SystemInit+0x50>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a07      	ldr	r2, [pc, #28]	; (8008574 <SystemInit+0x50>)
 8008556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800855a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800855c:	4b05      	ldr	r3, [pc, #20]	; (8008574 <SystemInit+0x50>)
 800855e:	2200      	movs	r2, #0
 8008560:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008562:	4b06      	ldr	r3, [pc, #24]	; (800857c <SystemInit+0x58>)
 8008564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008568:	609a      	str	r2, [r3, #8]
#endif
}
 800856a:	bf00      	nop
 800856c:	46bd      	mov	sp, r7
 800856e:	bc80      	pop	{r7}
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40023800 	.word	0x40023800
 8008578:	24003010 	.word	0x24003010
 800857c:	e000ed00 	.word	0xe000ed00

08008580 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b096      	sub	sp, #88	; 0x58
 8008584:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008586:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	605a      	str	r2, [r3, #4]
 8008590:	609a      	str	r2, [r3, #8]
 8008592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008598:	2200      	movs	r2, #0
 800859a:	601a      	str	r2, [r3, #0]
 800859c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800859e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	605a      	str	r2, [r3, #4]
 80085a8:	609a      	str	r2, [r3, #8]
 80085aa:	60da      	str	r2, [r3, #12]
 80085ac:	611a      	str	r2, [r3, #16]
 80085ae:	615a      	str	r2, [r3, #20]
 80085b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80085b2:	1d3b      	adds	r3, r7, #4
 80085b4:	2220      	movs	r2, #32
 80085b6:	2100      	movs	r1, #0
 80085b8:	4618      	mov	r0, r3
 80085ba:	f005 fd67 	bl	800e08c <memset>

  htim1.Instance = TIM1;
 80085be:	4b3e      	ldr	r3, [pc, #248]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085c0:	4a3e      	ldr	r2, [pc, #248]	; (80086bc <MX_TIM1_Init+0x13c>)
 80085c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80085c4:	4b3c      	ldr	r3, [pc, #240]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085ca:	4b3b      	ldr	r3, [pc, #236]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085cc:	2200      	movs	r2, #0
 80085ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 80085d0:	4b39      	ldr	r3, [pc, #228]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085d2:	f241 726f 	movw	r2, #5999	; 0x176f
 80085d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085d8:	4b37      	ldr	r3, [pc, #220]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085da:	2200      	movs	r2, #0
 80085dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80085de:	4b36      	ldr	r3, [pc, #216]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085e4:	4b34      	ldr	r3, [pc, #208]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80085ea:	4833      	ldr	r0, [pc, #204]	; (80086b8 <MX_TIM1_Init+0x138>)
 80085ec:	f003 ff80 	bl	800c4f0 <HAL_TIM_Base_Init>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d001      	beq.n	80085fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80085f6:	f7fe fb25 	bl	8006c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008600:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008604:	4619      	mov	r1, r3
 8008606:	482c      	ldr	r0, [pc, #176]	; (80086b8 <MX_TIM1_Init+0x138>)
 8008608:	f004 fb7c 	bl	800cd04 <HAL_TIM_ConfigClockSource>
 800860c:	4603      	mov	r3, r0
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8008612:	f7fe fb17 	bl	8006c44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008616:	4828      	ldr	r0, [pc, #160]	; (80086b8 <MX_TIM1_Init+0x138>)
 8008618:	f004 f88e 	bl	800c738 <HAL_TIM_PWM_Init>
 800861c:	4603      	mov	r3, r0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d001      	beq.n	8008626 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8008622:	f7fe fb0f 	bl	8006c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008626:	2300      	movs	r3, #0
 8008628:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800862a:	2300      	movs	r3, #0
 800862c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800862e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008632:	4619      	mov	r1, r3
 8008634:	4820      	ldr	r0, [pc, #128]	; (80086b8 <MX_TIM1_Init+0x138>)
 8008636:	f004 ff4d 	bl	800d4d4 <HAL_TIMEx_MasterConfigSynchronization>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8008640:	f7fe fb00 	bl	8006c44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008644:	2360      	movs	r3, #96	; 0x60
 8008646:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008648:	2300      	movs	r3, #0
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800864c:	2300      	movs	r3, #0
 800864e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008650:	2300      	movs	r3, #0
 8008652:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008654:	2300      	movs	r3, #0
 8008656:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008658:	2300      	movs	r3, #0
 800865a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800865c:	2300      	movs	r3, #0
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008664:	2200      	movs	r2, #0
 8008666:	4619      	mov	r1, r3
 8008668:	4813      	ldr	r0, [pc, #76]	; (80086b8 <MX_TIM1_Init+0x138>)
 800866a:	f004 fa8d 	bl	800cb88 <HAL_TIM_PWM_ConfigChannel>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8008674:	f7fe fae6 	bl	8006c44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008678:	2300      	movs	r3, #0
 800867a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800867c:	2300      	movs	r3, #0
 800867e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008680:	2300      	movs	r3, #0
 8008682:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008688:	2300      	movs	r3, #0
 800868a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800868c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008690:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008692:	2300      	movs	r3, #0
 8008694:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008696:	1d3b      	adds	r3, r7, #4
 8008698:	4619      	mov	r1, r3
 800869a:	4807      	ldr	r0, [pc, #28]	; (80086b8 <MX_TIM1_Init+0x138>)
 800869c:	f004 ff94 	bl	800d5c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80086a6:	f7fe facd 	bl	8006c44 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80086aa:	4803      	ldr	r0, [pc, #12]	; (80086b8 <MX_TIM1_Init+0x138>)
 80086ac:	f000 f968 	bl	8008980 <HAL_TIM_MspPostInit>

}
 80086b0:	bf00      	nop
 80086b2:	3758      	adds	r7, #88	; 0x58
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	200017c0 	.word	0x200017c0
 80086bc:	40010000 	.word	0x40010000

080086c0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086c6:	f107 0308 	add.w	r3, r7, #8
 80086ca:	2200      	movs	r2, #0
 80086cc:	601a      	str	r2, [r3, #0]
 80086ce:	605a      	str	r2, [r3, #4]
 80086d0:	609a      	str	r2, [r3, #8]
 80086d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086d4:	463b      	mov	r3, r7
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80086dc:	4b1d      	ldr	r3, [pc, #116]	; (8008754 <MX_TIM2_Init+0x94>)
 80086de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80086e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 80086e4:	4b1b      	ldr	r3, [pc, #108]	; (8008754 <MX_TIM2_Init+0x94>)
 80086e6:	223b      	movs	r2, #59	; 0x3b
 80086e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086ea:	4b1a      	ldr	r3, [pc, #104]	; (8008754 <MX_TIM2_Init+0x94>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80086f0:	4b18      	ldr	r3, [pc, #96]	; (8008754 <MX_TIM2_Init+0x94>)
 80086f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80086f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086f8:	4b16      	ldr	r3, [pc, #88]	; (8008754 <MX_TIM2_Init+0x94>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086fe:	4b15      	ldr	r3, [pc, #84]	; (8008754 <MX_TIM2_Init+0x94>)
 8008700:	2200      	movs	r2, #0
 8008702:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008704:	4813      	ldr	r0, [pc, #76]	; (8008754 <MX_TIM2_Init+0x94>)
 8008706:	f003 fef3 	bl	800c4f0 <HAL_TIM_Base_Init>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008710:	f7fe fa98 	bl	8006c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	4619      	mov	r1, r3
 8008720:	480c      	ldr	r0, [pc, #48]	; (8008754 <MX_TIM2_Init+0x94>)
 8008722:	f004 faef 	bl	800cd04 <HAL_TIM_ConfigClockSource>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d001      	beq.n	8008730 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800872c:	f7fe fa8a 	bl	8006c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008730:	2300      	movs	r3, #0
 8008732:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008734:	2300      	movs	r3, #0
 8008736:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008738:	463b      	mov	r3, r7
 800873a:	4619      	mov	r1, r3
 800873c:	4805      	ldr	r0, [pc, #20]	; (8008754 <MX_TIM2_Init+0x94>)
 800873e:	f004 fec9 	bl	800d4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008748:	f7fe fa7c 	bl	8006c44 <Error_Handler>
  }

}
 800874c:	bf00      	nop
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	20001808 	.word	0x20001808

08008758 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800875e:	f107 0308 	add.w	r3, r7, #8
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	605a      	str	r2, [r3, #4]
 8008768:	609a      	str	r2, [r3, #8]
 800876a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800876c:	463b      	mov	r3, r7
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8008774:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <MX_TIM3_Init+0x94>)
 8008776:	4a1e      	ldr	r2, [pc, #120]	; (80087f0 <MX_TIM3_Init+0x98>)
 8008778:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 800877a:	4b1c      	ldr	r3, [pc, #112]	; (80087ec <MX_TIM3_Init+0x94>)
 800877c:	f240 2257 	movw	r2, #599	; 0x257
 8008780:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008782:	4b1a      	ldr	r3, [pc, #104]	; (80087ec <MX_TIM3_Init+0x94>)
 8008784:	2200      	movs	r2, #0
 8008786:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8008788:	4b18      	ldr	r3, [pc, #96]	; (80087ec <MX_TIM3_Init+0x94>)
 800878a:	f242 720f 	movw	r2, #9999	; 0x270f
 800878e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008790:	4b16      	ldr	r3, [pc, #88]	; (80087ec <MX_TIM3_Init+0x94>)
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008796:	4b15      	ldr	r3, [pc, #84]	; (80087ec <MX_TIM3_Init+0x94>)
 8008798:	2200      	movs	r2, #0
 800879a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800879c:	4813      	ldr	r0, [pc, #76]	; (80087ec <MX_TIM3_Init+0x94>)
 800879e:	f003 fea7 	bl	800c4f0 <HAL_TIM_Base_Init>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80087a8:	f7fe fa4c 	bl	8006c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80087b2:	f107 0308 	add.w	r3, r7, #8
 80087b6:	4619      	mov	r1, r3
 80087b8:	480c      	ldr	r0, [pc, #48]	; (80087ec <MX_TIM3_Init+0x94>)
 80087ba:	f004 faa3 	bl	800cd04 <HAL_TIM_ConfigClockSource>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80087c4:	f7fe fa3e 	bl	8006c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087c8:	2300      	movs	r3, #0
 80087ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80087d0:	463b      	mov	r3, r7
 80087d2:	4619      	mov	r1, r3
 80087d4:	4805      	ldr	r0, [pc, #20]	; (80087ec <MX_TIM3_Init+0x94>)
 80087d6:	f004 fe7d 	bl	800d4d4 <HAL_TIMEx_MasterConfigSynchronization>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80087e0:	f7fe fa30 	bl	8006c44 <Error_Handler>
  }

}
 80087e4:	bf00      	nop
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20001778 	.word	0x20001778
 80087f0:	40000400 	.word	0x40000400

080087f4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087fa:	f107 0308 	add.w	r3, r7, #8
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	605a      	str	r2, [r3, #4]
 8008804:	609a      	str	r2, [r3, #8]
 8008806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008808:	463b      	mov	r3, r7
 800880a:	2200      	movs	r2, #0
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8008810:	4b1d      	ldr	r3, [pc, #116]	; (8008888 <MX_TIM4_Init+0x94>)
 8008812:	4a1e      	ldr	r2, [pc, #120]	; (800888c <MX_TIM4_Init+0x98>)
 8008814:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8008816:	4b1c      	ldr	r3, [pc, #112]	; (8008888 <MX_TIM4_Init+0x94>)
 8008818:	2204      	movs	r2, #4
 800881a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800881c:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <MX_TIM4_Init+0x94>)
 800881e:	2200      	movs	r2, #0
 8008820:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5999;
 8008822:	4b19      	ldr	r3, [pc, #100]	; (8008888 <MX_TIM4_Init+0x94>)
 8008824:	f241 726f 	movw	r2, #5999	; 0x176f
 8008828:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800882a:	4b17      	ldr	r3, [pc, #92]	; (8008888 <MX_TIM4_Init+0x94>)
 800882c:	2200      	movs	r2, #0
 800882e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008830:	4b15      	ldr	r3, [pc, #84]	; (8008888 <MX_TIM4_Init+0x94>)
 8008832:	2200      	movs	r2, #0
 8008834:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008836:	4814      	ldr	r0, [pc, #80]	; (8008888 <MX_TIM4_Init+0x94>)
 8008838:	f003 fe5a 	bl	800c4f0 <HAL_TIM_Base_Init>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8008842:	f7fe f9ff 	bl	8006c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800884a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800884c:	f107 0308 	add.w	r3, r7, #8
 8008850:	4619      	mov	r1, r3
 8008852:	480d      	ldr	r0, [pc, #52]	; (8008888 <MX_TIM4_Init+0x94>)
 8008854:	f004 fa56 	bl	800cd04 <HAL_TIM_ConfigClockSource>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800885e:	f7fe f9f1 	bl	8006c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008862:	2300      	movs	r3, #0
 8008864:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008866:	2300      	movs	r3, #0
 8008868:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800886a:	463b      	mov	r3, r7
 800886c:	4619      	mov	r1, r3
 800886e:	4806      	ldr	r0, [pc, #24]	; (8008888 <MX_TIM4_Init+0x94>)
 8008870:	f004 fe30 	bl	800d4d4 <HAL_TIMEx_MasterConfigSynchronization>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800887a:	f7fe f9e3 	bl	8006c44 <Error_Handler>
  }

}
 800887e:	bf00      	nop
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20001730 	.word	0x20001730
 800888c:	40000800 	.word	0x40000800

08008890 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a34      	ldr	r2, [pc, #208]	; (8008970 <HAL_TIM_Base_MspInit+0xe0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d10e      	bne.n	80088c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80088a2:	2300      	movs	r3, #0
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	4b33      	ldr	r3, [pc, #204]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 80088a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088aa:	4a32      	ldr	r2, [pc, #200]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 80088ac:	f043 0301 	orr.w	r3, r3, #1
 80088b0:	6453      	str	r3, [r2, #68]	; 0x44
 80088b2:	4b30      	ldr	r3, [pc, #192]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 80088b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b6:	f003 0301 	and.w	r3, r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80088be:	e052      	b.n	8008966 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c8:	d116      	bne.n	80088f8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80088ca:	2300      	movs	r3, #0
 80088cc:	613b      	str	r3, [r7, #16]
 80088ce:	4b29      	ldr	r3, [pc, #164]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	4a28      	ldr	r2, [pc, #160]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 80088d4:	f043 0301 	orr.w	r3, r3, #1
 80088d8:	6413      	str	r3, [r2, #64]	; 0x40
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80088e6:	2200      	movs	r2, #0
 80088e8:	2101      	movs	r1, #1
 80088ea:	201c      	movs	r0, #28
 80088ec:	f001 fceb 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80088f0:	201c      	movs	r0, #28
 80088f2:	f001 fd04 	bl	800a2fe <HAL_NVIC_EnableIRQ>
}
 80088f6:	e036      	b.n	8008966 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a1e      	ldr	r2, [pc, #120]	; (8008978 <HAL_TIM_Base_MspInit+0xe8>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d116      	bne.n	8008930 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
 8008906:	4b1b      	ldr	r3, [pc, #108]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	4a1a      	ldr	r2, [pc, #104]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 800890c:	f043 0302 	orr.w	r3, r3, #2
 8008910:	6413      	str	r3, [r2, #64]	; 0x40
 8008912:	4b18      	ldr	r3, [pc, #96]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	60fb      	str	r3, [r7, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800891e:	2200      	movs	r2, #0
 8008920:	2101      	movs	r1, #1
 8008922:	201d      	movs	r0, #29
 8008924:	f001 fccf 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008928:	201d      	movs	r0, #29
 800892a:	f001 fce8 	bl	800a2fe <HAL_NVIC_EnableIRQ>
}
 800892e:	e01a      	b.n	8008966 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a11      	ldr	r2, [pc, #68]	; (800897c <HAL_TIM_Base_MspInit+0xec>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d115      	bne.n	8008966 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800893a:	2300      	movs	r3, #0
 800893c:	60bb      	str	r3, [r7, #8]
 800893e:	4b0d      	ldr	r3, [pc, #52]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	4a0c      	ldr	r2, [pc, #48]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 8008944:	f043 0304 	orr.w	r3, r3, #4
 8008948:	6413      	str	r3, [r2, #64]	; 0x40
 800894a:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <HAL_TIM_Base_MspInit+0xe4>)
 800894c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894e:	f003 0304 	and.w	r3, r3, #4
 8008952:	60bb      	str	r3, [r7, #8]
 8008954:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8008956:	2200      	movs	r2, #0
 8008958:	2101      	movs	r1, #1
 800895a:	201e      	movs	r0, #30
 800895c:	f001 fcb3 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008960:	201e      	movs	r0, #30
 8008962:	f001 fccc 	bl	800a2fe <HAL_NVIC_EnableIRQ>
}
 8008966:	bf00      	nop
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40010000 	.word	0x40010000
 8008974:	40023800 	.word	0x40023800
 8008978:	40000400 	.word	0x40000400
 800897c:	40000800 	.word	0x40000800

08008980 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b088      	sub	sp, #32
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008988:	f107 030c 	add.w	r3, r7, #12
 800898c:	2200      	movs	r2, #0
 800898e:	601a      	str	r2, [r3, #0]
 8008990:	605a      	str	r2, [r3, #4]
 8008992:	609a      	str	r2, [r3, #8]
 8008994:	60da      	str	r2, [r3, #12]
 8008996:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a12      	ldr	r2, [pc, #72]	; (80089e8 <HAL_TIM_MspPostInit+0x68>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d11e      	bne.n	80089e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089a2:	2300      	movs	r3, #0
 80089a4:	60bb      	str	r3, [r7, #8]
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <HAL_TIM_MspPostInit+0x6c>)
 80089a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089aa:	4a10      	ldr	r2, [pc, #64]	; (80089ec <HAL_TIM_MspPostInit+0x6c>)
 80089ac:	f043 0301 	orr.w	r3, r3, #1
 80089b0:	6313      	str	r3, [r2, #48]	; 0x30
 80089b2:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <HAL_TIM_MspPostInit+0x6c>)
 80089b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b6:	f003 0301 	and.w	r3, r3, #1
 80089ba:	60bb      	str	r3, [r7, #8]
 80089bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80089be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c4:	2302      	movs	r3, #2
 80089c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089cc:	2303      	movs	r3, #3
 80089ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80089d0:	2301      	movs	r3, #1
 80089d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089d4:	f107 030c 	add.w	r3, r7, #12
 80089d8:	4619      	mov	r1, r3
 80089da:	4805      	ldr	r0, [pc, #20]	; (80089f0 <HAL_TIM_MspPostInit+0x70>)
 80089dc:	f002 f838 	bl	800aa50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80089e0:	bf00      	nop
 80089e2:	3720      	adds	r7, #32
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40023800 	.word	0x40023800
 80089f0:	40020000 	.word	0x40020000

080089f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80089f8:	4b11      	ldr	r3, [pc, #68]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 80089fa:	4a12      	ldr	r2, [pc, #72]	; (8008a44 <MX_USART1_UART_Init+0x50>)
 80089fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80089fe:	4b10      	ldr	r3, [pc, #64]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a06:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a12:	4b0b      	ldr	r3, [pc, #44]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a14:	2200      	movs	r2, #0
 8008a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a1a:	220c      	movs	r2, #12
 8008a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a1e:	4b08      	ldr	r3, [pc, #32]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a20:	2200      	movs	r2, #0
 8008a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a24:	4b06      	ldr	r3, [pc, #24]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a2a:	4805      	ldr	r0, [pc, #20]	; (8008a40 <MX_USART1_UART_Init+0x4c>)
 8008a2c:	f004 fe2f 	bl	800d68e <HAL_UART_Init>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008a36:	f7fe f905 	bl	8006c44 <Error_Handler>
  }

}
 8008a3a:	bf00      	nop
 8008a3c:	bd80      	pop	{r7, pc}
 8008a3e:	bf00      	nop
 8008a40:	20001850 	.word	0x20001850
 8008a44:	40011000 	.word	0x40011000

08008a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a50:	f107 0314 	add.w	r3, r7, #20
 8008a54:	2200      	movs	r2, #0
 8008a56:	601a      	str	r2, [r3, #0]
 8008a58:	605a      	str	r2, [r3, #4]
 8008a5a:	609a      	str	r2, [r3, #8]
 8008a5c:	60da      	str	r2, [r3, #12]
 8008a5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a1d      	ldr	r2, [pc, #116]	; (8008adc <HAL_UART_MspInit+0x94>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d133      	bne.n	8008ad2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	613b      	str	r3, [r7, #16]
 8008a6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ae0 <HAL_UART_MspInit+0x98>)
 8008a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a72:	4a1b      	ldr	r2, [pc, #108]	; (8008ae0 <HAL_UART_MspInit+0x98>)
 8008a74:	f043 0310 	orr.w	r3, r3, #16
 8008a78:	6453      	str	r3, [r2, #68]	; 0x44
 8008a7a:	4b19      	ldr	r3, [pc, #100]	; (8008ae0 <HAL_UART_MspInit+0x98>)
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	4b15      	ldr	r3, [pc, #84]	; (8008ae0 <HAL_UART_MspInit+0x98>)
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	4a14      	ldr	r2, [pc, #80]	; (8008ae0 <HAL_UART_MspInit+0x98>)
 8008a90:	f043 0302 	orr.w	r3, r3, #2
 8008a94:	6313      	str	r3, [r2, #48]	; 0x30
 8008a96:	4b12      	ldr	r3, [pc, #72]	; (8008ae0 <HAL_UART_MspInit+0x98>)
 8008a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008aa2:	23c0      	movs	r3, #192	; 0xc0
 8008aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aae:	2303      	movs	r3, #3
 8008ab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008ab2:	2307      	movs	r3, #7
 8008ab4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ab6:	f107 0314 	add.w	r3, r7, #20
 8008aba:	4619      	mov	r1, r3
 8008abc:	4809      	ldr	r0, [pc, #36]	; (8008ae4 <HAL_UART_MspInit+0x9c>)
 8008abe:	f001 ffc7 	bl	800aa50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	2025      	movs	r0, #37	; 0x25
 8008ac8:	f001 fbfd 	bl	800a2c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008acc:	2025      	movs	r0, #37	; 0x25
 8008ace:	f001 fc16 	bl	800a2fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	3728      	adds	r7, #40	; 0x28
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40011000 	.word	0x40011000
 8008ae0:	40023800 	.word	0x40023800
 8008ae4:	40020400 	.word	0x40020400

08008ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008aec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008aee:	e003      	b.n	8008af8 <LoopCopyDataInit>

08008af0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008af0:	4b0c      	ldr	r3, [pc, #48]	; (8008b24 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008af2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008af4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008af6:	3104      	adds	r1, #4

08008af8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008af8:	480b      	ldr	r0, [pc, #44]	; (8008b28 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008afa:	4b0c      	ldr	r3, [pc, #48]	; (8008b2c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008afc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008afe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b00:	d3f6      	bcc.n	8008af0 <CopyDataInit>
  ldr  r2, =_sbss
 8008b02:	4a0b      	ldr	r2, [pc, #44]	; (8008b30 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008b04:	e002      	b.n	8008b0c <LoopFillZerobss>

08008b06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008b06:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008b08:	f842 3b04 	str.w	r3, [r2], #4

08008b0c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008b0c:	4b09      	ldr	r3, [pc, #36]	; (8008b34 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008b0e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008b10:	d3f9      	bcc.n	8008b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008b12:	f7ff fd07 	bl	8008524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b16:	f005 fa5b 	bl	800dfd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008b1a:	f7fd fcad 	bl	8006478 <main>
  bx  lr    
 8008b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008b20:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008b24:	0801115c 	.word	0x0801115c
  ldr  r0, =_sdata
 8008b28:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008b2c:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8008b30:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 8008b34:	20001898 	.word	0x20001898

08008b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008b38:	e7fe      	b.n	8008b38 <ADC_IRQHandler>
	...

08008b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008b40:	4b0e      	ldr	r3, [pc, #56]	; (8008b7c <HAL_Init+0x40>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a0d      	ldr	r2, [pc, #52]	; (8008b7c <HAL_Init+0x40>)
 8008b46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	; (8008b7c <HAL_Init+0x40>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a0a      	ldr	r2, [pc, #40]	; (8008b7c <HAL_Init+0x40>)
 8008b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008b58:	4b08      	ldr	r3, [pc, #32]	; (8008b7c <HAL_Init+0x40>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a07      	ldr	r2, [pc, #28]	; (8008b7c <HAL_Init+0x40>)
 8008b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b64:	2003      	movs	r0, #3
 8008b66:	f001 fba3 	bl	800a2b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008b6a:	2001      	movs	r0, #1
 8008b6c:	f000 f808 	bl	8008b80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008b70:	f7fe fb18 	bl	80071a4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023c00 	.word	0x40023c00

08008b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008b88:	4b12      	ldr	r3, [pc, #72]	; (8008bd4 <HAL_InitTick+0x54>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <HAL_InitTick+0x58>)
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	4619      	mov	r1, r3
 8008b92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f001 fbbb 	bl	800a31a <HAL_SYSTICK_Config>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e00e      	b.n	8008bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2b0f      	cmp	r3, #15
 8008bb2:	d80a      	bhi.n	8008bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbc:	f001 fb83 	bl	800a2c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008bc0:	4a06      	ldr	r2, [pc, #24]	; (8008bdc <HAL_InitTick+0x5c>)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	e000      	b.n	8008bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	20000054 	.word	0x20000054
 8008bd8:	2000005c 	.word	0x2000005c
 8008bdc:	20000058 	.word	0x20000058

08008be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008be0:	b480      	push	{r7}
 8008be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008be4:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <HAL_IncTick+0x1c>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	461a      	mov	r2, r3
 8008bea:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <HAL_IncTick+0x20>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4413      	add	r3, r2
 8008bf0:	4a03      	ldr	r2, [pc, #12]	; (8008c00 <HAL_IncTick+0x20>)
 8008bf2:	6013      	str	r3, [r2, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bc80      	pop	{r7}
 8008bfa:	4770      	bx	lr
 8008bfc:	2000005c 	.word	0x2000005c
 8008c00:	20001890 	.word	0x20001890

08008c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return uwTick;
 8008c08:	4b02      	ldr	r3, [pc, #8]	; (8008c14 <HAL_GetTick+0x10>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr
 8008c14:	20001890 	.word	0x20001890

08008c18 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c20:	f7ff fff0 	bl	8008c04 <HAL_GetTick>
 8008c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d005      	beq.n	8008c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c32:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <HAL_Delay+0x40>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c3e:	bf00      	nop
 8008c40:	f7ff ffe0 	bl	8008c04 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d8f7      	bhi.n	8008c40 <HAL_Delay+0x28>
  {
  }
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	2000005c 	.word	0x2000005c

08008c5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d101      	bne.n	8008c72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e033      	b.n	8008cda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7fc fcd6 	bl	800562c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2200      	movs	r2, #0
 8008c84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	f003 0310 	and.w	r3, r3, #16
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d118      	bne.n	8008ccc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008ca2:	f023 0302 	bic.w	r3, r3, #2
 8008ca6:	f043 0202 	orr.w	r2, r3, #2
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa28 	bl	8009104 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbe:	f023 0303 	bic.w	r3, r3, #3
 8008cc2:	f043 0201 	orr.w	r2, r3, #1
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8008cca:	e001      	b.n	8008cd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d101      	bne.n	8008d02 <HAL_ADC_Start_DMA+0x1e>
 8008cfe:	2302      	movs	r3, #2
 8008d00:	e0bc      	b.n	8008e7c <HAL_ADC_Start_DMA+0x198>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d018      	beq.n	8008d4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f042 0201 	orr.w	r2, r2, #1
 8008d26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008d28:	4b56      	ldr	r3, [pc, #344]	; (8008e84 <HAL_ADC_Start_DMA+0x1a0>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a56      	ldr	r2, [pc, #344]	; (8008e88 <HAL_ADC_Start_DMA+0x1a4>)
 8008d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d32:	0c9a      	lsrs	r2, r3, #18
 8008d34:	4613      	mov	r3, r2
 8008d36:	005b      	lsls	r3, r3, #1
 8008d38:	4413      	add	r3, r2
 8008d3a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8008d3c:	e002      	b.n	8008d44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	3b01      	subs	r3, #1
 8008d42:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f9      	bne.n	8008d3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	f040 8084 	bne.w	8008e62 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008d62:	f023 0301 	bic.w	r3, r3, #1
 8008d66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d007      	beq.n	8008d8c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008d84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d98:	d106      	bne.n	8008da8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9e:	f023 0206 	bic.w	r2, r3, #6
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44
 8008da6:	e002      	b.n	8008dae <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2200      	movs	r2, #0
 8008dac:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	4a34      	ldr	r2, [pc, #208]	; (8008e8c <HAL_ADC_Start_DMA+0x1a8>)
 8008dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc2:	4a33      	ldr	r2, [pc, #204]	; (8008e90 <HAL_ADC_Start_DMA+0x1ac>)
 8008dc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dca:	4a32      	ldr	r2, [pc, #200]	; (8008e94 <HAL_ADC_Start_DMA+0x1b0>)
 8008dcc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008dd6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008de6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689a      	ldr	r2, [r3, #8]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008df6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	334c      	adds	r3, #76	; 0x4c
 8008e02:	4619      	mov	r1, r3
 8008e04:	68ba      	ldr	r2, [r7, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f001 fb42 	bl	800a490 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008e0c:	4b22      	ldr	r3, [pc, #136]	; (8008e98 <HAL_ADC_Start_DMA+0x1b4>)
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10f      	bne.n	8008e38 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d129      	bne.n	8008e7a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	689a      	ldr	r2, [r3, #8]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008e34:	609a      	str	r2, [r3, #8]
 8008e36:	e020      	b.n	8008e7a <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a17      	ldr	r2, [pc, #92]	; (8008e9c <HAL_ADC_Start_DMA+0x1b8>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d11b      	bne.n	8008e7a <HAL_ADC_Start_DMA+0x196>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d114      	bne.n	8008e7a <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	e00b      	b.n	8008e7a <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e66:	f043 0210 	orr.w	r2, r3, #16
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e72:	f043 0201 	orr.w	r2, r3, #1
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	20000054 	.word	0x20000054
 8008e88:	431bde83 	.word	0x431bde83
 8008e8c:	08009311 	.word	0x08009311
 8008e90:	080093cb 	.word	0x080093cb
 8008e94:	080093e7 	.word	0x080093e7
 8008e98:	40012300 	.word	0x40012300
 8008e9c:	40012000 	.word	0x40012000

08008ea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bc80      	pop	{r7}
 8008eb0:	4770      	bx	lr

08008eb2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008eb2:	b480      	push	{r7}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008eba:	bf00      	nop
 8008ebc:	370c      	adds	r7, #12
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bc80      	pop	{r7}
 8008ec2:	4770      	bx	lr

08008ec4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <HAL_ADC_ConfigChannel+0x1c>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e103      	b.n	80090e8 <HAL_ADC_ConfigChannel+0x224>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b09      	cmp	r3, #9
 8008eee:	d925      	bls.n	8008f3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68d9      	ldr	r1, [r3, #12]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	461a      	mov	r2, r3
 8008efe:	4613      	mov	r3, r2
 8008f00:	005b      	lsls	r3, r3, #1
 8008f02:	4413      	add	r3, r2
 8008f04:	3b1e      	subs	r3, #30
 8008f06:	2207      	movs	r2, #7
 8008f08:	fa02 f303 	lsl.w	r3, r2, r3
 8008f0c:	43da      	mvns	r2, r3
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	400a      	ands	r2, r1
 8008f14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68d9      	ldr	r1, [r3, #12]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	4618      	mov	r0, r3
 8008f28:	4603      	mov	r3, r0
 8008f2a:	005b      	lsls	r3, r3, #1
 8008f2c:	4403      	add	r3, r0
 8008f2e:	3b1e      	subs	r3, #30
 8008f30:	409a      	lsls	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	e022      	b.n	8008f82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6919      	ldr	r1, [r3, #16]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	4413      	add	r3, r2
 8008f50:	2207      	movs	r2, #7
 8008f52:	fa02 f303 	lsl.w	r3, r2, r3
 8008f56:	43da      	mvns	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	400a      	ands	r2, r1
 8008f5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6919      	ldr	r1, [r3, #16]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	4618      	mov	r0, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	4403      	add	r3, r0
 8008f78:	409a      	lsls	r2, r3
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b06      	cmp	r3, #6
 8008f88:	d824      	bhi.n	8008fd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	4613      	mov	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4413      	add	r3, r2
 8008f9a:	3b05      	subs	r3, #5
 8008f9c:	221f      	movs	r2, #31
 8008f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa2:	43da      	mvns	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	400a      	ands	r2, r1
 8008faa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	4618      	mov	r0, r3
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685a      	ldr	r2, [r3, #4]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3b05      	subs	r3, #5
 8008fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8008fd2:	e04c      	b.n	800906e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b0c      	cmp	r3, #12
 8008fda:	d824      	bhi.n	8009026 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	009b      	lsls	r3, r3, #2
 8008fea:	4413      	add	r3, r2
 8008fec:	3b23      	subs	r3, #35	; 0x23
 8008fee:	221f      	movs	r2, #31
 8008ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ff4:	43da      	mvns	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	400a      	ands	r2, r1
 8008ffc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	b29b      	uxth	r3, r3
 800900a:	4618      	mov	r0, r3
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	4613      	mov	r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	3b23      	subs	r3, #35	; 0x23
 8009018:	fa00 f203 	lsl.w	r2, r0, r3
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	430a      	orrs	r2, r1
 8009022:	631a      	str	r2, [r3, #48]	; 0x30
 8009024:	e023      	b.n	800906e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4613      	mov	r3, r2
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	3b41      	subs	r3, #65	; 0x41
 8009038:	221f      	movs	r2, #31
 800903a:	fa02 f303 	lsl.w	r3, r2, r3
 800903e:	43da      	mvns	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	400a      	ands	r2, r1
 8009046:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	b29b      	uxth	r3, r3
 8009054:	4618      	mov	r0, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	4613      	mov	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4413      	add	r3, r2
 8009060:	3b41      	subs	r3, #65	; 0x41
 8009062:	fa00 f203 	lsl.w	r2, r0, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	430a      	orrs	r2, r1
 800906c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a20      	ldr	r2, [pc, #128]	; (80090f4 <HAL_ADC_ConfigChannel+0x230>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d109      	bne.n	800908c <HAL_ADC_ConfigChannel+0x1c8>
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b12      	cmp	r3, #18
 800907e:	d105      	bne.n	800908c <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8009080:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <HAL_ADC_ConfigChannel+0x234>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	4a1c      	ldr	r2, [pc, #112]	; (80090f8 <HAL_ADC_ConfigChannel+0x234>)
 8009086:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800908a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a18      	ldr	r2, [pc, #96]	; (80090f4 <HAL_ADC_ConfigChannel+0x230>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d123      	bne.n	80090de <HAL_ADC_ConfigChannel+0x21a>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b10      	cmp	r3, #16
 800909c:	d003      	beq.n	80090a6 <HAL_ADC_ConfigChannel+0x1e2>
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b11      	cmp	r3, #17
 80090a4:	d11b      	bne.n	80090de <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <HAL_ADC_ConfigChannel+0x234>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <HAL_ADC_ConfigChannel+0x234>)
 80090ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090b0:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b10      	cmp	r3, #16
 80090b8:	d111      	bne.n	80090de <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80090ba:	4b10      	ldr	r3, [pc, #64]	; (80090fc <HAL_ADC_ConfigChannel+0x238>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a10      	ldr	r2, [pc, #64]	; (8009100 <HAL_ADC_ConfigChannel+0x23c>)
 80090c0:	fba2 2303 	umull	r2, r3, r2, r3
 80090c4:	0c9a      	lsrs	r2, r3, #18
 80090c6:	4613      	mov	r3, r2
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	4413      	add	r3, r2
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80090d0:	e002      	b.n	80090d8 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	3b01      	subs	r3, #1
 80090d6:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f9      	bne.n	80090d2 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bc80      	pop	{r7}
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40012000 	.word	0x40012000
 80090f8:	40012300 	.word	0x40012300
 80090fc:	20000054 	.word	0x20000054
 8009100:	431bde83 	.word	0x431bde83

08009104 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800910c:	4b7e      	ldr	r3, [pc, #504]	; (8009308 <ADC_Init+0x204>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	4a7d      	ldr	r2, [pc, #500]	; (8009308 <ADC_Init+0x204>)
 8009112:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8009116:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8009118:	4b7b      	ldr	r3, [pc, #492]	; (8009308 <ADC_Init+0x204>)
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	4979      	ldr	r1, [pc, #484]	; (8009308 <ADC_Init+0x204>)
 8009122:	4313      	orrs	r3, r2
 8009124:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	685a      	ldr	r2, [r3, #4]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6859      	ldr	r1, [r3, #4]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	691b      	ldr	r3, [r3, #16]
 8009140:	021a      	lsls	r2, r3, #8
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	430a      	orrs	r2, r1
 8009148:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009158:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	6859      	ldr	r1, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689a      	ldr	r2, [r3, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	430a      	orrs	r2, r1
 800916a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800917a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6899      	ldr	r1, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68da      	ldr	r2, [r3, #12]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009192:	4a5e      	ldr	r2, [pc, #376]	; (800930c <ADC_Init+0x208>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d022      	beq.n	80091de <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6899      	ldr	r1, [r3, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80091c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	6899      	ldr	r1, [r3, #8]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	609a      	str	r2, [r3, #8]
 80091dc:	e00f      	b.n	80091fe <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689a      	ldr	r2, [r3, #8]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80091fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0202 	bic.w	r2, r2, #2
 800920c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6899      	ldr	r1, [r3, #8]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	7e1b      	ldrb	r3, [r3, #24]
 8009218:	005a      	lsls	r2, r3, #1
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	430a      	orrs	r2, r1
 8009220:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d027      	beq.n	800927c <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800923a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	685a      	ldr	r2, [r3, #4]
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800924a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009250:	3b01      	subs	r3, #1
 8009252:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8009256:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	fa92 f2a2 	rbit	r2, r2
 800925e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	fab2 f282 	clz	r2, r2
 8009266:	b2d2      	uxtb	r2, r2
 8009268:	fa03 f102 	lsl.w	r1, r3, r2
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
 800927a:	e007      	b.n	800928c <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800928a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800929a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69db      	ldr	r3, [r3, #28]
 80092a6:	3b01      	subs	r3, #1
 80092a8:	051a      	lsls	r2, r3, #20
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	689a      	ldr	r2, [r3, #8]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80092c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6899      	ldr	r1, [r3, #8]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092ce:	025a      	lsls	r2, r3, #9
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6899      	ldr	r1, [r3, #8]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	029a      	lsls	r2, r3, #10
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	609a      	str	r2, [r3, #8]
}
 80092fc:	bf00      	nop
 80092fe:	3714      	adds	r7, #20
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	40012300 	.word	0x40012300
 800930c:	0f000001 	.word	0x0f000001

08009310 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009326:	2b00      	cmp	r3, #0
 8009328:	d13c      	bne.n	80093a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800932e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d12b      	bne.n	800939c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009348:	2b00      	cmp	r3, #0
 800934a:	d127      	bne.n	800939c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009352:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009356:	2b00      	cmp	r3, #0
 8009358:	d006      	beq.n	8009368 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009364:	2b00      	cmp	r3, #0
 8009366:	d119      	bne.n	800939c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f022 0220 	bic.w	r2, r2, #32
 8009376:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d105      	bne.n	800939c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800939c:	68f8      	ldr	r0, [r7, #12]
 800939e:	f7fd f9c5 	bl	800672c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80093a2:	e00e      	b.n	80093c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	f003 0310 	and.w	r3, r3, #16
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f7ff fd7e 	bl	8008eb2 <HAL_ADC_ErrorCallback>
}
 80093b6:	e004      	b.n	80093c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	4798      	blx	r3
}
 80093c2:	bf00      	nop
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b084      	sub	sp, #16
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7ff fd61 	bl	8008ea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80093de:	bf00      	nop
 80093e0:	3710      	adds	r7, #16
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2240      	movs	r2, #64	; 0x40
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093fe:	f043 0204 	orr.w	r2, r3, #4
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009406:	68f8      	ldr	r0, [r7, #12]
 8009408:	f7ff fd53 	bl	8008eb2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800940c:	bf00      	nop
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e0ed      	b.n	8009602 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b00      	cmp	r3, #0
 8009430:	d102      	bne.n	8009438 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7fc f9e2 	bl	80057fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f022 0202 	bic.w	r2, r2, #2
 8009446:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009448:	f7ff fbdc 	bl	8008c04 <HAL_GetTick>
 800944c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800944e:	e012      	b.n	8009476 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009450:	f7ff fbd8 	bl	8008c04 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	2b0a      	cmp	r3, #10
 800945c:	d90b      	bls.n	8009476 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	2205      	movs	r2, #5
 800946e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e0c5      	b.n	8009602 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e5      	bne.n	8009450 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f042 0201 	orr.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009494:	f7ff fbb6 	bl	8008c04 <HAL_GetTick>
 8009498:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800949a:	e012      	b.n	80094c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800949c:	f7ff fbb2 	bl	8008c04 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b0a      	cmp	r3, #10
 80094a8:	d90b      	bls.n	80094c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2205      	movs	r2, #5
 80094ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e09f      	b.n	8009602 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0e5      	beq.n	800949c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	7e1b      	ldrb	r3, [r3, #24]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d108      	bne.n	80094ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	e007      	b.n	80094fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80094f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	7e5b      	ldrb	r3, [r3, #25]
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d108      	bne.n	8009514 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	e007      	b.n	8009524 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009522:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7e9b      	ldrb	r3, [r3, #26]
 8009528:	2b01      	cmp	r3, #1
 800952a:	d108      	bne.n	800953e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0220 	orr.w	r2, r2, #32
 800953a:	601a      	str	r2, [r3, #0]
 800953c:	e007      	b.n	800954e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f022 0220 	bic.w	r2, r2, #32
 800954c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	7edb      	ldrb	r3, [r3, #27]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d108      	bne.n	8009568 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0210 	bic.w	r2, r2, #16
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	e007      	b.n	8009578 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f042 0210 	orr.w	r2, r2, #16
 8009576:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	7f1b      	ldrb	r3, [r3, #28]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d108      	bne.n	8009592 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f042 0208 	orr.w	r2, r2, #8
 800958e:	601a      	str	r2, [r3, #0]
 8009590:	e007      	b.n	80095a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 0208 	bic.w	r2, r2, #8
 80095a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	7f5b      	ldrb	r3, [r3, #29]
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d108      	bne.n	80095bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0204 	orr.w	r2, r2, #4
 80095b8:	601a      	str	r2, [r3, #0]
 80095ba:	e007      	b.n	80095cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 0204 	bic.w	r2, r2, #4
 80095ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	689a      	ldr	r2, [r3, #8]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	68db      	ldr	r3, [r3, #12]
 80095d4:	431a      	orrs	r2, r3
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	691b      	ldr	r3, [r3, #16]
 80095da:	431a      	orrs	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	ea42 0103 	orr.w	r1, r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	1e5a      	subs	r2, r3, #1
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	430a      	orrs	r2, r1
 80095f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2201      	movs	r2, #1
 80095fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800960c:	b480      	push	{r7}
 800960e:	b087      	sub	sp, #28
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009622:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009624:	7cfb      	ldrb	r3, [r7, #19]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d003      	beq.n	8009632 <HAL_CAN_ConfigFilter+0x26>
 800962a:	7cfb      	ldrb	r3, [r7, #19]
 800962c:	2b02      	cmp	r3, #2
 800962e:	f040 80be 	bne.w	80097ae <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009632:	4b65      	ldr	r3, [pc, #404]	; (80097c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8009634:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800963c:	f043 0201 	orr.w	r2, r3, #1
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800964c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009660:	021b      	lsls	r3, r3, #8
 8009662:	431a      	orrs	r2, r3
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800966a:	683b      	ldr	r3, [r7, #0]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	f003 031f 	and.w	r3, r3, #31
 8009672:	2201      	movs	r2, #1
 8009674:	fa02 f303 	lsl.w	r3, r2, r3
 8009678:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	43db      	mvns	r3, r3
 8009684:	401a      	ands	r2, r3
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d123      	bne.n	80096dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	43db      	mvns	r3, r3
 800969e:	401a      	ands	r2, r3
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80096b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	3248      	adds	r2, #72	; 0x48
 80096bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	689b      	ldr	r3, [r3, #8]
 80096c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80096d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80096d2:	6979      	ldr	r1, [r7, #20]
 80096d4:	3348      	adds	r3, #72	; 0x48
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	440b      	add	r3, r1
 80096da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d122      	bne.n	800972a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	431a      	orrs	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009700:	683a      	ldr	r2, [r7, #0]
 8009702:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009704:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	3248      	adds	r2, #72	; 0x48
 800970a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800971e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009720:	6979      	ldr	r1, [r7, #20]
 8009722:	3348      	adds	r3, #72	; 0x48
 8009724:	00db      	lsls	r3, r3, #3
 8009726:	440b      	add	r3, r1
 8009728:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	699b      	ldr	r3, [r3, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	43db      	mvns	r3, r3
 800973c:	401a      	ands	r2, r3
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009744:	e007      	b.n	8009756 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	431a      	orrs	r2, r3
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d109      	bne.n	8009772 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	43db      	mvns	r3, r3
 8009768:	401a      	ands	r2, r3
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009770:	e007      	b.n	8009782 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	431a      	orrs	r2, r3
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	6a1b      	ldr	r3, [r3, #32]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d107      	bne.n	800979a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	431a      	orrs	r2, r3
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80097a0:	f023 0201 	bic.w	r2, r3, #1
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80097aa:	2300      	movs	r3, #0
 80097ac:	e006      	b.n	80097bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
  }
}
 80097bc:	4618      	mov	r0, r3
 80097be:	371c      	adds	r7, #28
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bc80      	pop	{r7}
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	40006400 	.word	0x40006400

080097cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d12e      	bne.n	800983e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2202      	movs	r2, #2
 80097e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0201 	bic.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80097f8:	f7ff fa04 	bl	8008c04 <HAL_GetTick>
 80097fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80097fe:	e012      	b.n	8009826 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009800:	f7ff fa00 	bl	8008c04 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b0a      	cmp	r3, #10
 800980c:	d90b      	bls.n	8009826 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009812:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2205      	movs	r2, #5
 800981e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e012      	b.n	800984c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e5      	bne.n	8009800 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	e006      	b.n	800984c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009842:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
  }
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009854:	b480      	push	{r7}
 8009856:	b089      	sub	sp, #36	; 0x24
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009868:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009872:	7ffb      	ldrb	r3, [r7, #31]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d003      	beq.n	8009880 <HAL_CAN_AddTxMessage+0x2c>
 8009878:	7ffb      	ldrb	r3, [r7, #31]
 800987a:	2b02      	cmp	r3, #2
 800987c:	f040 80b8 	bne.w	80099f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009886:	2b00      	cmp	r3, #0
 8009888:	d10a      	bne.n	80098a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009890:	2b00      	cmp	r3, #0
 8009892:	d105      	bne.n	80098a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 80a0 	beq.w	80099e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	0e1b      	lsrs	r3, r3, #24
 80098a4:	f003 0303 	and.w	r3, r3, #3
 80098a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d907      	bls.n	80098c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e09e      	b.n	80099fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80098c0:	2201      	movs	r2, #1
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	409a      	lsls	r2, r3
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10d      	bne.n	80098ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80098dc:	68f9      	ldr	r1, [r7, #12]
 80098de:	6809      	ldr	r1, [r1, #0]
 80098e0:	431a      	orrs	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	3318      	adds	r3, #24
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	440b      	add	r3, r1
 80098ea:	601a      	str	r2, [r3, #0]
 80098ec:	e00f      	b.n	800990e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80098f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80098fe:	68f9      	ldr	r1, [r7, #12]
 8009900:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8009902:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	3318      	adds	r3, #24
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	440b      	add	r3, r1
 800990c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6819      	ldr	r1, [r3, #0]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	691a      	ldr	r2, [r3, #16]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	3318      	adds	r3, #24
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	440b      	add	r3, r1
 800991e:	3304      	adds	r3, #4
 8009920:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	7d1b      	ldrb	r3, [r3, #20]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d111      	bne.n	800994e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	3318      	adds	r3, #24
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	4413      	add	r3, r2
 8009936:	3304      	adds	r3, #4
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	3318      	adds	r3, #24
 8009946:	011b      	lsls	r3, r3, #4
 8009948:	440b      	add	r3, r1
 800994a:	3304      	adds	r3, #4
 800994c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3307      	adds	r3, #7
 8009952:	781b      	ldrb	r3, [r3, #0]
 8009954:	061a      	lsls	r2, r3, #24
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	3306      	adds	r3, #6
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	041b      	lsls	r3, r3, #16
 800995e:	431a      	orrs	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	3305      	adds	r3, #5
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	021b      	lsls	r3, r3, #8
 8009968:	4313      	orrs	r3, r2
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	3204      	adds	r2, #4
 800996e:	7812      	ldrb	r2, [r2, #0]
 8009970:	4610      	mov	r0, r2
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	6811      	ldr	r1, [r2, #0]
 8009976:	ea43 0200 	orr.w	r2, r3, r0
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	011b      	lsls	r3, r3, #4
 800997e:	440b      	add	r3, r1
 8009980:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009984:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3303      	adds	r3, #3
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	061a      	lsls	r2, r3, #24
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	3302      	adds	r3, #2
 8009992:	781b      	ldrb	r3, [r3, #0]
 8009994:	041b      	lsls	r3, r3, #16
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	3301      	adds	r3, #1
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	021b      	lsls	r3, r3, #8
 80099a0:	4313      	orrs	r3, r2
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	7812      	ldrb	r2, [r2, #0]
 80099a6:	4610      	mov	r0, r2
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	6811      	ldr	r1, [r2, #0]
 80099ac:	ea43 0200 	orr.w	r2, r3, r0
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	440b      	add	r3, r1
 80099b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80099ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	3318      	adds	r3, #24
 80099c4:	011b      	lsls	r3, r3, #4
 80099c6:	4413      	add	r3, r2
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	6811      	ldr	r1, [r2, #0]
 80099ce:	f043 0201 	orr.w	r2, r3, #1
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	3318      	adds	r3, #24
 80099d6:	011b      	lsls	r3, r3, #4
 80099d8:	440b      	add	r3, r1
 80099da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	e00e      	b.n	80099fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e006      	b.n	80099fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
  }
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3724      	adds	r7, #36	; 0x24
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bc80      	pop	{r7}
 8009a06:	4770      	bx	lr

08009a08 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a1a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009a1c:	7afb      	ldrb	r3, [r7, #11]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d002      	beq.n	8009a28 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009a22:	7afb      	ldrb	r3, [r7, #11]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d11d      	bne.n	8009a64 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d002      	beq.n	8009a3c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d002      	beq.n	8009a64 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	3301      	adds	r3, #1
 8009a62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009a64:	68fb      	ldr	r3, [r7, #12]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr

08009a70 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009a70:	b480      	push	{r7}
 8009a72:	b087      	sub	sp, #28
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a84:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a86:	7dfb      	ldrb	r3, [r7, #23]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d003      	beq.n	8009a94 <HAL_CAN_GetRxMessage+0x24>
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	f040 80f3 	bne.w	8009c7a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10e      	bne.n	8009ab8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f003 0303 	and.w	r3, r3, #3
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d116      	bne.n	8009ad6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	e0e7      	b.n	8009c88 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	f003 0303 	and.w	r3, r3, #3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d107      	bne.n	8009ad6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e0d8      	b.n	8009c88 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	331b      	adds	r3, #27
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	4413      	add	r3, r2
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f003 0204 	and.w	r2, r3, #4
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10c      	bne.n	8009b0e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	331b      	adds	r3, #27
 8009afc:	011b      	lsls	r3, r3, #4
 8009afe:	4413      	add	r3, r2
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	0d5b      	lsrs	r3, r3, #21
 8009b04:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	601a      	str	r2, [r3, #0]
 8009b0c:	e00b      	b.n	8009b26 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	331b      	adds	r3, #27
 8009b16:	011b      	lsls	r3, r3, #4
 8009b18:	4413      	add	r3, r2
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	08db      	lsrs	r3, r3, #3
 8009b1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	331b      	adds	r3, #27
 8009b2e:	011b      	lsls	r3, r3, #4
 8009b30:	4413      	add	r3, r2
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f003 0202 	and.w	r2, r3, #2
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	331b      	adds	r3, #27
 8009b44:	011b      	lsls	r3, r3, #4
 8009b46:	4413      	add	r3, r2
 8009b48:	3304      	adds	r3, #4
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 020f 	and.w	r2, r3, #15
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681a      	ldr	r2, [r3, #0]
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	331b      	adds	r3, #27
 8009b5c:	011b      	lsls	r3, r3, #4
 8009b5e:	4413      	add	r3, r2
 8009b60:	3304      	adds	r3, #4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	0a1b      	lsrs	r3, r3, #8
 8009b66:	b2da      	uxtb	r2, r3
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	331b      	adds	r3, #27
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	4413      	add	r3, r2
 8009b78:	3304      	adds	r3, #4
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	0c1b      	lsrs	r3, r3, #16
 8009b7e:	b29a      	uxth	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	0a1a      	lsrs	r2, r3, #8
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	3301      	adds	r3, #1
 8009bb0:	b2d2      	uxtb	r2, r2
 8009bb2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	011b      	lsls	r3, r3, #4
 8009bbc:	4413      	add	r3, r2
 8009bbe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	0c1a      	lsrs	r2, r3, #16
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	3302      	adds	r3, #2
 8009bca:	b2d2      	uxtb	r2, r2
 8009bcc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	0e1a      	lsrs	r2, r3, #24
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	3303      	adds	r3, #3
 8009be4:	b2d2      	uxtb	r2, r2
 8009be6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	011b      	lsls	r3, r3, #4
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	b2d2      	uxtb	r2, r2
 8009bfe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681a      	ldr	r2, [r3, #0]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	0a1a      	lsrs	r2, r3, #8
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	3305      	adds	r3, #5
 8009c16:	b2d2      	uxtb	r2, r2
 8009c18:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	0c1a      	lsrs	r2, r3, #16
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	3306      	adds	r3, #6
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	011b      	lsls	r3, r3, #4
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	0e1a      	lsrs	r2, r3, #24
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	3307      	adds	r3, #7
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d108      	bne.n	8009c66 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68da      	ldr	r2, [r3, #12]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f042 0220 	orr.w	r2, r2, #32
 8009c62:	60da      	str	r2, [r3, #12]
 8009c64:	e007      	b.n	8009c76 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	691a      	ldr	r2, [r3, #16]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f042 0220 	orr.w	r2, r2, #32
 8009c74:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009c76:	2300      	movs	r3, #0
 8009c78:	e006      	b.n	8009c88 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
  }
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	371c      	adds	r7, #28
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr

08009c92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ca2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d002      	beq.n	8009cb0 <HAL_CAN_ActivateNotification+0x1e>
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d109      	bne.n	8009cc4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6959      	ldr	r1, [r3, #20]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e006      	b.n	8009cd2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
  }
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bc80      	pop	{r7}
 8009cda:	4770      	bx	lr

08009cdc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b08a      	sub	sp, #40	; 0x28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	695b      	ldr	r3, [r3, #20]
 8009cee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d07c      	beq.n	8009e1c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	f003 0301 	and.w	r3, r3, #1
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d023      	beq.n	8009d74 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2201      	movs	r2, #1
 8009d32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f97d 	bl	800a03e <HAL_CAN_TxMailbox0CompleteCallback>
 8009d44:	e016      	b.n	8009d74 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d004      	beq.n	8009d5a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
 8009d58:	e00c      	b.n	8009d74 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d004      	beq.n	8009d6e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d6c:	e002      	b.n	8009d74 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f980 	bl	800a074 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d024      	beq.n	8009dc8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 f95c 	bl	800a050 <HAL_CAN_TxMailbox1CompleteCallback>
 8009d98:	e016      	b.n	8009dc8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009d9a:	69bb      	ldr	r3, [r7, #24]
 8009d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d004      	beq.n	8009dae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009daa:	627b      	str	r3, [r7, #36]	; 0x24
 8009dac:	e00c      	b.n	8009dc8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d004      	beq.n	8009dc2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009dbe:	627b      	str	r3, [r7, #36]	; 0x24
 8009dc0:	e002      	b.n	8009dc8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f95f 	bl	800a086 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d024      	beq.n	8009e1c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009dda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f93b 	bl	800a062 <HAL_CAN_TxMailbox2CompleteCallback>
 8009dec:	e016      	b.n	8009e1c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d004      	beq.n	8009e02 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8009e00:	e00c      	b.n	8009e1c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009e02:	69bb      	ldr	r3, [r7, #24]
 8009e04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d004      	beq.n	8009e16 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
 8009e14:	e002      	b.n	8009e1c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f93e 	bl	800a098 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	f003 0308 	and.w	r3, r3, #8
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00c      	beq.n	8009e40 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2210      	movs	r2, #16
 8009e3e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	f003 0304 	and.w	r3, r3, #4
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d00b      	beq.n	8009e62 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f003 0308 	and.w	r3, r3, #8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d006      	beq.n	8009e62 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2208      	movs	r2, #8
 8009e5a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f924 	bl	800a0aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	f003 0302 	and.w	r3, r3, #2
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d009      	beq.n	8009e80 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	68db      	ldr	r3, [r3, #12]
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d002      	beq.n	8009e80 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f7fb fdcc 	bl	8005a18 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00c      	beq.n	8009ea4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	f003 0310 	and.w	r3, r3, #16
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d007      	beq.n	8009ea4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	2210      	movs	r2, #16
 8009ea2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	f003 0320 	and.w	r3, r3, #32
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00b      	beq.n	8009ec6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f904 	bl	800a0ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d009      	beq.n	8009ee4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	691b      	ldr	r3, [r3, #16]
 8009ed6:	f003 0303 	and.w	r3, r3, #3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d002      	beq.n	8009ee4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8ec 	bl	800a0bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009ee4:	6a3b      	ldr	r3, [r7, #32]
 8009ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	f003 0310 	and.w	r3, r3, #16
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d006      	beq.n	8009f06 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2210      	movs	r2, #16
 8009efe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f8ed 	bl	800a0e0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d00b      	beq.n	8009f28 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	f003 0308 	and.w	r3, r3, #8
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2208      	movs	r2, #8
 8009f20:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 f8e5 	bl	800a0f2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d075      	beq.n	800a01e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d06c      	beq.n	800a016 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d008      	beq.n	8009f58 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d003      	beq.n	8009f58 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	f043 0301 	orr.w	r3, r3, #1
 8009f56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f58:	6a3b      	ldr	r3, [r7, #32]
 8009f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d008      	beq.n	8009f74 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6e:	f043 0302 	orr.w	r3, r3, #2
 8009f72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d008      	beq.n	8009f90 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	f043 0304 	orr.w	r3, r3, #4
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d03d      	beq.n	800a016 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d038      	beq.n	800a016 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009faa:	2b30      	cmp	r3, #48	; 0x30
 8009fac:	d017      	beq.n	8009fde <HAL_CAN_IRQHandler+0x302>
 8009fae:	2b30      	cmp	r3, #48	; 0x30
 8009fb0:	d804      	bhi.n	8009fbc <HAL_CAN_IRQHandler+0x2e0>
 8009fb2:	2b10      	cmp	r3, #16
 8009fb4:	d009      	beq.n	8009fca <HAL_CAN_IRQHandler+0x2ee>
 8009fb6:	2b20      	cmp	r3, #32
 8009fb8:	d00c      	beq.n	8009fd4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009fba:	e024      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009fbc:	2b50      	cmp	r3, #80	; 0x50
 8009fbe:	d018      	beq.n	8009ff2 <HAL_CAN_IRQHandler+0x316>
 8009fc0:	2b60      	cmp	r3, #96	; 0x60
 8009fc2:	d01b      	beq.n	8009ffc <HAL_CAN_IRQHandler+0x320>
 8009fc4:	2b40      	cmp	r3, #64	; 0x40
 8009fc6:	d00f      	beq.n	8009fe8 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009fc8:	e01d      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fcc:	f043 0308 	orr.w	r3, r3, #8
 8009fd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009fd2:	e018      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	f043 0310 	orr.w	r3, r3, #16
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009fdc:	e013      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe0:	f043 0320 	orr.w	r3, r3, #32
 8009fe4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009fe6:	e00e      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ff0:	e009      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8009ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ff8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ffa:	e004      	b.n	800a006 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a004:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	699a      	ldr	r2, [r3, #24]
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a014:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2204      	movs	r2, #4
 800a01c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	2b00      	cmp	r3, #0
 800a022:	d008      	beq.n	800a036 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	431a      	orrs	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f867 	bl	800a104 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a036:	bf00      	nop
 800a038:	3728      	adds	r7, #40	; 0x28
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}

0800a03e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a03e:	b480      	push	{r7}
 800a040:	b083      	sub	sp, #12
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800a046:	bf00      	nop
 800a048:	370c      	adds	r7, #12
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bc80      	pop	{r7}
 800a04e:	4770      	bx	lr

0800a050 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bc80      	pop	{r7}
 800a060:	4770      	bx	lr

0800a062 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800a062:	b480      	push	{r7}
 800a064:	b083      	sub	sp, #12
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800a06a:	bf00      	nop
 800a06c:	370c      	adds	r7, #12
 800a06e:	46bd      	mov	sp, r7
 800a070:	bc80      	pop	{r7}
 800a072:	4770      	bx	lr

0800a074 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	bc80      	pop	{r7}
 800a084:	4770      	bx	lr

0800a086 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a08e:	bf00      	nop
 800a090:	370c      	adds	r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	bc80      	pop	{r7}
 800a096:	4770      	bx	lr

0800a098 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bc80      	pop	{r7}
 800a0a8:	4770      	bx	lr

0800a0aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0aa:	b480      	push	{r7}
 800a0ac:	b083      	sub	sp, #12
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bc80      	pop	{r7}
 800a0ba:	4770      	bx	lr

0800a0bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b083      	sub	sp, #12
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a0c4:	bf00      	nop
 800a0c6:	370c      	adds	r7, #12
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bc80      	pop	{r7}
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bc80      	pop	{r7}
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bc80      	pop	{r7}
 800a0f0:	4770      	bx	lr

0800a0f2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b083      	sub	sp, #12
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a0fa:	bf00      	nop
 800a0fc:	370c      	adds	r7, #12
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bc80      	pop	{r7}
 800a102:	4770      	bx	lr

0800a104 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr
	...

0800a118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a118:	b480      	push	{r7}
 800a11a:	b085      	sub	sp, #20
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f003 0307 	and.w	r3, r3, #7
 800a126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a128:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <__NVIC_SetPriorityGrouping+0x44>)
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a134:	4013      	ands	r3, r2
 800a136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a14a:	4a04      	ldr	r2, [pc, #16]	; (800a15c <__NVIC_SetPriorityGrouping+0x44>)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	60d3      	str	r3, [r2, #12]
}
 800a150:	bf00      	nop
 800a152:	3714      	adds	r7, #20
 800a154:	46bd      	mov	sp, r7
 800a156:	bc80      	pop	{r7}
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	e000ed00 	.word	0xe000ed00

0800a160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a160:	b480      	push	{r7}
 800a162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a164:	4b04      	ldr	r3, [pc, #16]	; (800a178 <__NVIC_GetPriorityGrouping+0x18>)
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	0a1b      	lsrs	r3, r3, #8
 800a16a:	f003 0307 	and.w	r3, r3, #7
}
 800a16e:	4618      	mov	r0, r3
 800a170:	46bd      	mov	sp, r7
 800a172:	bc80      	pop	{r7}
 800a174:	4770      	bx	lr
 800a176:	bf00      	nop
 800a178:	e000ed00 	.word	0xe000ed00

0800a17c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	4603      	mov	r3, r0
 800a184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	db0b      	blt.n	800a1a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a18e:	79fb      	ldrb	r3, [r7, #7]
 800a190:	f003 021f 	and.w	r2, r3, #31
 800a194:	4906      	ldr	r1, [pc, #24]	; (800a1b0 <__NVIC_EnableIRQ+0x34>)
 800a196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a19a:	095b      	lsrs	r3, r3, #5
 800a19c:	2001      	movs	r0, #1
 800a19e:	fa00 f202 	lsl.w	r2, r0, r2
 800a1a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	370c      	adds	r7, #12
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bc80      	pop	{r7}
 800a1ae:	4770      	bx	lr
 800a1b0:	e000e100 	.word	0xe000e100

0800a1b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	6039      	str	r1, [r7, #0]
 800a1be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	db0a      	blt.n	800a1de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	490c      	ldr	r1, [pc, #48]	; (800a200 <__NVIC_SetPriority+0x4c>)
 800a1ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1d2:	0112      	lsls	r2, r2, #4
 800a1d4:	b2d2      	uxtb	r2, r2
 800a1d6:	440b      	add	r3, r1
 800a1d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1dc:	e00a      	b.n	800a1f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	b2da      	uxtb	r2, r3
 800a1e2:	4908      	ldr	r1, [pc, #32]	; (800a204 <__NVIC_SetPriority+0x50>)
 800a1e4:	79fb      	ldrb	r3, [r7, #7]
 800a1e6:	f003 030f 	and.w	r3, r3, #15
 800a1ea:	3b04      	subs	r3, #4
 800a1ec:	0112      	lsls	r2, r2, #4
 800a1ee:	b2d2      	uxtb	r2, r2
 800a1f0:	440b      	add	r3, r1
 800a1f2:	761a      	strb	r2, [r3, #24]
}
 800a1f4:	bf00      	nop
 800a1f6:	370c      	adds	r7, #12
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bc80      	pop	{r7}
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	e000e100 	.word	0xe000e100
 800a204:	e000ed00 	.word	0xe000ed00

0800a208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a208:	b480      	push	{r7}
 800a20a:	b089      	sub	sp, #36	; 0x24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f1c3 0307 	rsb	r3, r3, #7
 800a222:	2b04      	cmp	r3, #4
 800a224:	bf28      	it	cs
 800a226:	2304      	movcs	r3, #4
 800a228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a22a:	69fb      	ldr	r3, [r7, #28]
 800a22c:	3304      	adds	r3, #4
 800a22e:	2b06      	cmp	r3, #6
 800a230:	d902      	bls.n	800a238 <NVIC_EncodePriority+0x30>
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	3b03      	subs	r3, #3
 800a236:	e000      	b.n	800a23a <NVIC_EncodePriority+0x32>
 800a238:	2300      	movs	r3, #0
 800a23a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a23c:	f04f 32ff 	mov.w	r2, #4294967295
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	fa02 f303 	lsl.w	r3, r2, r3
 800a246:	43da      	mvns	r2, r3
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	401a      	ands	r2, r3
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a250:	f04f 31ff 	mov.w	r1, #4294967295
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	fa01 f303 	lsl.w	r3, r1, r3
 800a25a:	43d9      	mvns	r1, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a260:	4313      	orrs	r3, r2
         );
}
 800a262:	4618      	mov	r0, r3
 800a264:	3724      	adds	r7, #36	; 0x24
 800a266:	46bd      	mov	sp, r7
 800a268:	bc80      	pop	{r7}
 800a26a:	4770      	bx	lr

0800a26c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3b01      	subs	r3, #1
 800a278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a27c:	d301      	bcc.n	800a282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a27e:	2301      	movs	r3, #1
 800a280:	e00f      	b.n	800a2a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a282:	4a0a      	ldr	r2, [pc, #40]	; (800a2ac <SysTick_Config+0x40>)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3b01      	subs	r3, #1
 800a288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a28a:	210f      	movs	r1, #15
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	f7ff ff90 	bl	800a1b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <SysTick_Config+0x40>)
 800a296:	2200      	movs	r2, #0
 800a298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a29a:	4b04      	ldr	r3, [pc, #16]	; (800a2ac <SysTick_Config+0x40>)
 800a29c:	2207      	movs	r2, #7
 800a29e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	e000e010 	.word	0xe000e010

0800a2b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7ff ff2d 	bl	800a118 <__NVIC_SetPriorityGrouping>
}
 800a2be:	bf00      	nop
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
 800a2d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2d8:	f7ff ff42 	bl	800a160 <__NVIC_GetPriorityGrouping>
 800a2dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	68b9      	ldr	r1, [r7, #8]
 800a2e2:	6978      	ldr	r0, [r7, #20]
 800a2e4:	f7ff ff90 	bl	800a208 <NVIC_EncodePriority>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2ee:	4611      	mov	r1, r2
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7ff ff5f 	bl	800a1b4 <__NVIC_SetPriority>
}
 800a2f6:	bf00      	nop
 800a2f8:	3718      	adds	r7, #24
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b082      	sub	sp, #8
 800a302:	af00      	add	r7, sp, #0
 800a304:	4603      	mov	r3, r0
 800a306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7ff ff35 	bl	800a17c <__NVIC_EnableIRQ>
}
 800a312:	bf00      	nop
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}

0800a31a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a31a:	b580      	push	{r7, lr}
 800a31c:	b082      	sub	sp, #8
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff ffa2 	bl	800a26c <SysTick_Config>
 800a328:	4603      	mov	r3, r0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a340:	f7fe fc60 	bl	8008c04 <HAL_GetTick>
 800a344:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e099      	b.n	800a484 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a370:	e00f      	b.n	800a392 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a372:	f7fe fc47 	bl	8008c04 <HAL_GetTick>
 800a376:	4602      	mov	r2, r0
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	1ad3      	subs	r3, r2, r3
 800a37c:	2b05      	cmp	r3, #5
 800a37e:	d908      	bls.n	800a392 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2220      	movs	r2, #32
 800a384:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2203      	movs	r2, #3
 800a38a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a38e:	2303      	movs	r3, #3
 800a390:	e078      	b.n	800a484 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d1e8      	bne.n	800a372 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3a8:	697a      	ldr	r2, [r7, #20]
 800a3aa:	4b38      	ldr	r3, [pc, #224]	; (800a48c <HAL_DMA_Init+0x158>)
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	699b      	ldr	r3, [r3, #24]
 800a3d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a1b      	ldr	r3, [r3, #32]
 800a3dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3de:	697a      	ldr	r2, [r7, #20]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d107      	bne.n	800a3fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	f023 0307 	bic.w	r3, r3, #7
 800a412:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a418:	697a      	ldr	r2, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a422:	2b04      	cmp	r3, #4
 800a424:	d117      	bne.n	800a456 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	2b00      	cmp	r3, #0
 800a436:	d00e      	beq.n	800a456 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 fa8f 	bl	800a95c <DMA_CheckFifoParam>
 800a43e:	4603      	mov	r3, r0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d008      	beq.n	800a456 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2240      	movs	r2, #64	; 0x40
 800a448:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2201      	movs	r2, #1
 800a44e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a452:	2301      	movs	r3, #1
 800a454:	e016      	b.n	800a484 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fa48 	bl	800a8f4 <DMA_CalcBaseAndBitshift>
 800a464:	4603      	mov	r3, r0
 800a466:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a46c:	223f      	movs	r2, #63	; 0x3f
 800a46e:	409a      	lsls	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a482:	2300      	movs	r3, #0
}
 800a484:	4618      	mov	r0, r3
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	f010803f 	.word	0xf010803f

0800a490 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d101      	bne.n	800a4b6 <HAL_DMA_Start_IT+0x26>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	e040      	b.n	800a538 <HAL_DMA_Start_IT+0xa8>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4c4:	b2db      	uxtb	r3, r3
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d12f      	bne.n	800a52a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	687a      	ldr	r2, [r7, #4]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	68f8      	ldr	r0, [r7, #12]
 800a4e0:	f000 f9da 	bl	800a898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	223f      	movs	r2, #63	; 0x3f
 800a4ea:	409a      	lsls	r2, r3
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0216 	orr.w	r2, r2, #22
 800a4fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d007      	beq.n	800a518 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f042 0208 	orr.w	r2, r2, #8
 800a516:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f042 0201 	orr.w	r2, r2, #1
 800a526:	601a      	str	r2, [r3, #0]
 800a528:	e005      	b.n	800a536 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a532:	2302      	movs	r3, #2
 800a534:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a536:	7dfb      	ldrb	r3, [r7, #23]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3718      	adds	r7, #24
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a54e:	b2db      	uxtb	r3, r3
 800a550:	2b02      	cmp	r3, #2
 800a552:	d004      	beq.n	800a55e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2280      	movs	r2, #128	; 0x80
 800a558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e00c      	b.n	800a578 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2205      	movs	r2, #5
 800a562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	f022 0201 	bic.w	r2, r2, #1
 800a574:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a576:	2300      	movs	r3, #0
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr
	...

0800a584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a58c:	2300      	movs	r3, #0
 800a58e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a590:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <HAL_DMA_IRQHandler+0x258>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a92      	ldr	r2, [pc, #584]	; (800a7e0 <HAL_DMA_IRQHandler+0x25c>)
 800a596:	fba2 2303 	umull	r2, r3, r2, r3
 800a59a:	0a9b      	lsrs	r3, r3, #10
 800a59c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ae:	2208      	movs	r2, #8
 800a5b0:	409a      	lsls	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01a      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d013      	beq.n	800a5f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f022 0204 	bic.w	r2, r2, #4
 800a5d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5dc:	2208      	movs	r2, #8
 800a5de:	409a      	lsls	r2, r3
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e8:	f043 0201 	orr.w	r2, r3, #1
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	409a      	lsls	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d012      	beq.n	800a626 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d00b      	beq.n	800a626 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a612:	2201      	movs	r2, #1
 800a614:	409a      	lsls	r2, r3
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	f043 0202 	orr.w	r2, r3, #2
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62a:	2204      	movs	r2, #4
 800a62c:	409a      	lsls	r2, r3
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	4013      	ands	r3, r2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d012      	beq.n	800a65c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0302 	and.w	r3, r3, #2
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00b      	beq.n	800a65c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a648:	2204      	movs	r2, #4
 800a64a:	409a      	lsls	r2, r3
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a654:	f043 0204 	orr.w	r2, r3, #4
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a660:	2210      	movs	r2, #16
 800a662:	409a      	lsls	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	4013      	ands	r3, r2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d043      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d03c      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67e:	2210      	movs	r2, #16
 800a680:	409a      	lsls	r2, r3
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a690:	2b00      	cmp	r3, #0
 800a692:	d018      	beq.n	800a6c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d108      	bne.n	800a6b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d024      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	4798      	blx	r3
 800a6b2:	e01f      	b.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01b      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	4798      	blx	r3
 800a6c4:	e016      	b.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d107      	bne.n	800a6e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0208 	bic.w	r2, r2, #8
 800a6e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d003      	beq.n	800a6f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	409a      	lsls	r2, r3
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	4013      	ands	r3, r2
 800a700:	2b00      	cmp	r3, #0
 800a702:	f000 808e 	beq.w	800a822 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 0310 	and.w	r3, r3, #16
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 8086 	beq.w	800a822 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71a:	2220      	movs	r2, #32
 800a71c:	409a      	lsls	r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b05      	cmp	r3, #5
 800a72c:	d136      	bne.n	800a79c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0216 	bic.w	r2, r2, #22
 800a73c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	695a      	ldr	r2, [r3, #20]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a74c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d103      	bne.n	800a75e <HAL_DMA_IRQHandler+0x1da>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0208 	bic.w	r2, r2, #8
 800a76c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a772:	223f      	movs	r2, #63	; 0x3f
 800a774:	409a      	lsls	r2, r3
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d07d      	beq.n	800a88e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	4798      	blx	r3
        }
        return;
 800a79a:	e078      	b.n	800a88e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01c      	beq.n	800a7e4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d108      	bne.n	800a7ca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d030      	beq.n	800a822 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	4798      	blx	r3
 800a7c8:	e02b      	b.n	800a822 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d027      	beq.n	800a822 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	e022      	b.n	800a822 <HAL_DMA_IRQHandler+0x29e>
 800a7dc:	20000054 	.word	0x20000054
 800a7e0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d10f      	bne.n	800a812 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0210 	bic.w	r2, r2, #16
 800a800:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2201      	movs	r2, #1
 800a80e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a826:	2b00      	cmp	r3, #0
 800a828:	d032      	beq.n	800a890 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82e:	f003 0301 	and.w	r3, r3, #1
 800a832:	2b00      	cmp	r3, #0
 800a834:	d022      	beq.n	800a87c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2205      	movs	r2, #5
 800a83a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 0201 	bic.w	r2, r2, #1
 800a84c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	3301      	adds	r3, #1
 800a852:	60bb      	str	r3, [r7, #8]
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	429a      	cmp	r2, r3
 800a858:	d307      	bcc.n	800a86a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1f2      	bne.n	800a84e <HAL_DMA_IRQHandler+0x2ca>
 800a868:	e000      	b.n	800a86c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a86a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2200      	movs	r2, #0
 800a870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d005      	beq.n	800a890 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	4798      	blx	r3
 800a88c:	e000      	b.n	800a890 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a88e:	bf00      	nop
    }
  }
}
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop

0800a898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
 800a8a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	2b40      	cmp	r3, #64	; 0x40
 800a8c4:	d108      	bne.n	800a8d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	68ba      	ldr	r2, [r7, #8]
 800a8d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a8d6:	e007      	b.n	800a8e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	60da      	str	r2, [r3, #12]
}
 800a8e8:	bf00      	nop
 800a8ea:	3714      	adds	r7, #20
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bc80      	pop	{r7}
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b085      	sub	sp, #20
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	b2db      	uxtb	r3, r3
 800a902:	3b10      	subs	r3, #16
 800a904:	4a13      	ldr	r2, [pc, #76]	; (800a954 <DMA_CalcBaseAndBitshift+0x60>)
 800a906:	fba2 2303 	umull	r2, r3, r2, r3
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a90e:	4a12      	ldr	r2, [pc, #72]	; (800a958 <DMA_CalcBaseAndBitshift+0x64>)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	781b      	ldrb	r3, [r3, #0]
 800a916:	461a      	mov	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b03      	cmp	r3, #3
 800a920:	d909      	bls.n	800a936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a92a:	f023 0303 	bic.w	r3, r3, #3
 800a92e:	1d1a      	adds	r2, r3, #4
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	659a      	str	r2, [r3, #88]	; 0x58
 800a934:	e007      	b.n	800a946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a93e:	f023 0303 	bic.w	r3, r3, #3
 800a942:	687a      	ldr	r2, [r7, #4]
 800a944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	bc80      	pop	{r7}
 800a952:	4770      	bx	lr
 800a954:	aaaaaaab 	.word	0xaaaaaaab
 800a958:	08010ebc 	.word	0x08010ebc

0800a95c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b085      	sub	sp, #20
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a964:	2300      	movs	r3, #0
 800a966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a96c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	699b      	ldr	r3, [r3, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d11f      	bne.n	800a9b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	2b03      	cmp	r3, #3
 800a97a:	d855      	bhi.n	800aa28 <DMA_CheckFifoParam+0xcc>
 800a97c:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <DMA_CheckFifoParam+0x28>)
 800a97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a982:	bf00      	nop
 800a984:	0800a995 	.word	0x0800a995
 800a988:	0800a9a7 	.word	0x0800a9a7
 800a98c:	0800a995 	.word	0x0800a995
 800a990:	0800aa29 	.word	0x0800aa29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d045      	beq.n	800aa2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9a4:	e042      	b.n	800aa2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9ae:	d13f      	bne.n	800aa30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9b4:	e03c      	b.n	800aa30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9be:	d121      	bne.n	800aa04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	d836      	bhi.n	800aa34 <DMA_CheckFifoParam+0xd8>
 800a9c6:	a201      	add	r2, pc, #4	; (adr r2, 800a9cc <DMA_CheckFifoParam+0x70>)
 800a9c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9cc:	0800a9dd 	.word	0x0800a9dd
 800a9d0:	0800a9e3 	.word	0x0800a9e3
 800a9d4:	0800a9dd 	.word	0x0800a9dd
 800a9d8:	0800a9f5 	.word	0x0800a9f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e0:	e02f      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d024      	beq.n	800aa38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9f2:	e021      	b.n	800aa38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9fc:	d11e      	bne.n	800aa3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa02:	e01b      	b.n	800aa3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2b02      	cmp	r3, #2
 800aa08:	d902      	bls.n	800aa10 <DMA_CheckFifoParam+0xb4>
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	d003      	beq.n	800aa16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa0e:	e018      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa10:	2301      	movs	r3, #1
 800aa12:	73fb      	strb	r3, [r7, #15]
      break;
 800aa14:	e015      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00e      	beq.n	800aa40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	73fb      	strb	r3, [r7, #15]
      break;
 800aa26:	e00b      	b.n	800aa40 <DMA_CheckFifoParam+0xe4>
      break;
 800aa28:	bf00      	nop
 800aa2a:	e00a      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      break;
 800aa2c:	bf00      	nop
 800aa2e:	e008      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      break;
 800aa30:	bf00      	nop
 800aa32:	e006      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      break;
 800aa34:	bf00      	nop
 800aa36:	e004      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      break;
 800aa38:	bf00      	nop
 800aa3a:	e002      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      break;   
 800aa3c:	bf00      	nop
 800aa3e:	e000      	b.n	800aa42 <DMA_CheckFifoParam+0xe6>
      break;
 800aa40:	bf00      	nop
    }
  } 
  
  return status; 
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bc80      	pop	{r7}
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop

0800aa50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800aa5e:	e16f      	b.n	800ad40 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	2101      	movs	r1, #1
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 8161 	beq.w	800ad3a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d00b      	beq.n	800aa98 <HAL_GPIO_Init+0x48>
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d007      	beq.n	800aa98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aa8c:	2b11      	cmp	r3, #17
 800aa8e:	d003      	beq.n	800aa98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	2b12      	cmp	r3, #18
 800aa96:	d130      	bne.n	800aafa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	005b      	lsls	r3, r3, #1
 800aaa2:	2203      	movs	r2, #3
 800aaa4:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa8:	43db      	mvns	r3, r3
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	4013      	ands	r3, r2
 800aaae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	68da      	ldr	r2, [r3, #12]
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	fa02 f303 	lsl.w	r3, r2, r3
 800aabc:	693a      	ldr	r2, [r7, #16]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	693a      	ldr	r2, [r7, #16]
 800aac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	685b      	ldr	r3, [r3, #4]
 800aacc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aace:	2201      	movs	r2, #1
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	fa02 f303 	lsl.w	r3, r2, r3
 800aad6:	43db      	mvns	r3, r3
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4013      	ands	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	091b      	lsrs	r3, r3, #4
 800aae4:	f003 0201 	and.w	r2, r3, #1
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	fa02 f303 	lsl.w	r3, r2, r3
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	693a      	ldr	r2, [r7, #16]
 800aaf8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	2203      	movs	r2, #3
 800ab06:	fa02 f303 	lsl.w	r3, r2, r3
 800ab0a:	43db      	mvns	r3, r3
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	4013      	ands	r3, r2
 800ab10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	689a      	ldr	r2, [r3, #8]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	005b      	lsls	r3, r3, #1
 800ab1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	693a      	ldr	r2, [r7, #16]
 800ab28:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d003      	beq.n	800ab3a <HAL_GPIO_Init+0xea>
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	2b12      	cmp	r3, #18
 800ab38:	d123      	bne.n	800ab82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	08da      	lsrs	r2, r3, #3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	3208      	adds	r2, #8
 800ab42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	f003 0307 	and.w	r3, r3, #7
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	220f      	movs	r2, #15
 800ab52:	fa02 f303 	lsl.w	r3, r2, r3
 800ab56:	43db      	mvns	r3, r3
 800ab58:	693a      	ldr	r2, [r7, #16]
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	691a      	ldr	r2, [r3, #16]
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f003 0307 	and.w	r3, r3, #7
 800ab68:	009b      	lsls	r3, r3, #2
 800ab6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab6e:	693a      	ldr	r2, [r7, #16]
 800ab70:	4313      	orrs	r3, r2
 800ab72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	08da      	lsrs	r2, r3, #3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	3208      	adds	r2, #8
 800ab7c:	6939      	ldr	r1, [r7, #16]
 800ab7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	005b      	lsls	r3, r3, #1
 800ab8c:	2203      	movs	r2, #3
 800ab8e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab92:	43db      	mvns	r3, r3
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	4013      	ands	r3, r2
 800ab98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	f003 0203 	and.w	r2, r3, #3
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	005b      	lsls	r3, r3, #1
 800aba6:	fa02 f303 	lsl.w	r3, r2, r3
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	4313      	orrs	r3, r2
 800abae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	f000 80bb 	beq.w	800ad3a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800abc4:	2300      	movs	r3, #0
 800abc6:	60bb      	str	r3, [r7, #8]
 800abc8:	4b64      	ldr	r3, [pc, #400]	; (800ad5c <HAL_GPIO_Init+0x30c>)
 800abca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abcc:	4a63      	ldr	r2, [pc, #396]	; (800ad5c <HAL_GPIO_Init+0x30c>)
 800abce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800abd2:	6453      	str	r3, [r2, #68]	; 0x44
 800abd4:	4b61      	ldr	r3, [pc, #388]	; (800ad5c <HAL_GPIO_Init+0x30c>)
 800abd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abdc:	60bb      	str	r3, [r7, #8]
 800abde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800abe0:	4a5f      	ldr	r2, [pc, #380]	; (800ad60 <HAL_GPIO_Init+0x310>)
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	089b      	lsrs	r3, r3, #2
 800abe6:	3302      	adds	r3, #2
 800abe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	220f      	movs	r2, #15
 800abf8:	fa02 f303 	lsl.w	r3, r2, r3
 800abfc:	43db      	mvns	r3, r3
 800abfe:	693a      	ldr	r2, [r7, #16]
 800ac00:	4013      	ands	r3, r2
 800ac02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	4a57      	ldr	r2, [pc, #348]	; (800ad64 <HAL_GPIO_Init+0x314>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d031      	beq.n	800ac70 <HAL_GPIO_Init+0x220>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a56      	ldr	r2, [pc, #344]	; (800ad68 <HAL_GPIO_Init+0x318>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d02b      	beq.n	800ac6c <HAL_GPIO_Init+0x21c>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	4a55      	ldr	r2, [pc, #340]	; (800ad6c <HAL_GPIO_Init+0x31c>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d025      	beq.n	800ac68 <HAL_GPIO_Init+0x218>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a54      	ldr	r2, [pc, #336]	; (800ad70 <HAL_GPIO_Init+0x320>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d01f      	beq.n	800ac64 <HAL_GPIO_Init+0x214>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a53      	ldr	r2, [pc, #332]	; (800ad74 <HAL_GPIO_Init+0x324>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d019      	beq.n	800ac60 <HAL_GPIO_Init+0x210>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	4a52      	ldr	r2, [pc, #328]	; (800ad78 <HAL_GPIO_Init+0x328>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d013      	beq.n	800ac5c <HAL_GPIO_Init+0x20c>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a51      	ldr	r2, [pc, #324]	; (800ad7c <HAL_GPIO_Init+0x32c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d00d      	beq.n	800ac58 <HAL_GPIO_Init+0x208>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a50      	ldr	r2, [pc, #320]	; (800ad80 <HAL_GPIO_Init+0x330>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d007      	beq.n	800ac54 <HAL_GPIO_Init+0x204>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a4f      	ldr	r2, [pc, #316]	; (800ad84 <HAL_GPIO_Init+0x334>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d101      	bne.n	800ac50 <HAL_GPIO_Init+0x200>
 800ac4c:	2308      	movs	r3, #8
 800ac4e:	e010      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac50:	2309      	movs	r3, #9
 800ac52:	e00e      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac54:	2307      	movs	r3, #7
 800ac56:	e00c      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac58:	2306      	movs	r3, #6
 800ac5a:	e00a      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac5c:	2305      	movs	r3, #5
 800ac5e:	e008      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac60:	2304      	movs	r3, #4
 800ac62:	e006      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac64:	2303      	movs	r3, #3
 800ac66:	e004      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	e002      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac6c:	2301      	movs	r3, #1
 800ac6e:	e000      	b.n	800ac72 <HAL_GPIO_Init+0x222>
 800ac70:	2300      	movs	r3, #0
 800ac72:	697a      	ldr	r2, [r7, #20]
 800ac74:	f002 0203 	and.w	r2, r2, #3
 800ac78:	0092      	lsls	r2, r2, #2
 800ac7a:	4093      	lsls	r3, r2
 800ac7c:	461a      	mov	r2, r3
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	4313      	orrs	r3, r2
 800ac82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ac84:	4936      	ldr	r1, [pc, #216]	; (800ad60 <HAL_GPIO_Init+0x310>)
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	089b      	lsrs	r3, r3, #2
 800ac8a:	3302      	adds	r3, #2
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ac92:	4b3d      	ldr	r3, [pc, #244]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	43db      	mvns	r3, r3
 800ac9c:	693a      	ldr	r2, [r7, #16]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800acb6:	4a34      	ldr	r2, [pc, #208]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800acbc:	4b32      	ldr	r3, [pc, #200]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	43db      	mvns	r3, r3
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	4013      	ands	r3, r2
 800acca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	685b      	ldr	r3, [r3, #4]
 800acd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d003      	beq.n	800ace0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	4313      	orrs	r3, r2
 800acde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800ace0:	4a29      	ldr	r2, [pc, #164]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ace6:	4b28      	ldr	r3, [pc, #160]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800ace8:	689b      	ldr	r3, [r3, #8]
 800acea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	43db      	mvns	r3, r3
 800acf0:	693a      	ldr	r2, [r7, #16]
 800acf2:	4013      	ands	r3, r2
 800acf4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800ad0a:	4a1f      	ldr	r2, [pc, #124]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ad10:	4b1d      	ldr	r3, [pc, #116]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	43db      	mvns	r3, r3
 800ad1a:	693a      	ldr	r2, [r7, #16]
 800ad1c:	4013      	ands	r3, r2
 800ad1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d003      	beq.n	800ad34 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ad34:	4a14      	ldr	r2, [pc, #80]	; (800ad88 <HAL_GPIO_Init+0x338>)
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	697b      	ldr	r3, [r7, #20]
 800ad46:	fa22 f303 	lsr.w	r3, r2, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f47f ae88 	bne.w	800aa60 <HAL_GPIO_Init+0x10>
  }
}
 800ad50:	bf00      	nop
 800ad52:	371c      	adds	r7, #28
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bc80      	pop	{r7}
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	40023800 	.word	0x40023800
 800ad60:	40013800 	.word	0x40013800
 800ad64:	40020000 	.word	0x40020000
 800ad68:	40020400 	.word	0x40020400
 800ad6c:	40020800 	.word	0x40020800
 800ad70:	40020c00 	.word	0x40020c00
 800ad74:	40021000 	.word	0x40021000
 800ad78:	40021400 	.word	0x40021400
 800ad7c:	40021800 	.word	0x40021800
 800ad80:	40021c00 	.word	0x40021c00
 800ad84:	40022000 	.word	0x40022000
 800ad88:	40013c00 	.word	0x40013c00

0800ad8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b083      	sub	sp, #12
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	807b      	strh	r3, [r7, #2]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ad9c:	787b      	ldrb	r3, [r7, #1]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ada2:	887a      	ldrh	r2, [r7, #2]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ada8:	e003      	b.n	800adb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800adaa:	887b      	ldrh	r3, [r7, #2]
 800adac:	041a      	lsls	r2, r3, #16
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	619a      	str	r2, [r3, #24]
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bc80      	pop	{r7}
 800adba:	4770      	bx	lr

0800adbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b085      	sub	sp, #20
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	695b      	ldr	r3, [r3, #20]
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800adce:	887a      	ldrh	r2, [r7, #2]
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4013      	ands	r3, r2
 800add4:	041a      	lsls	r2, r3, #16
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	43d9      	mvns	r1, r3
 800adda:	887b      	ldrh	r3, [r7, #2]
 800addc:	400b      	ands	r3, r1
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	619a      	str	r2, [r3, #24]
}
 800ade4:	bf00      	nop
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	bc80      	pop	{r7}
 800adec:	4770      	bx	lr
	...

0800adf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b084      	sub	sp, #16
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d101      	bne.n	800ae02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e11f      	b.n	800b042 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d106      	bne.n	800ae1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7fb fa96 	bl	8006348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2224      	movs	r2, #36	; 0x24
 800ae20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f022 0201 	bic.w	r2, r2, #1
 800ae32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ae52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ae54:	f001 fb08 	bl	800c468 <HAL_RCC_GetPCLK1Freq>
 800ae58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4a7b      	ldr	r2, [pc, #492]	; (800b04c <HAL_I2C_Init+0x25c>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d807      	bhi.n	800ae74 <HAL_I2C_Init+0x84>
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	4a7a      	ldr	r2, [pc, #488]	; (800b050 <HAL_I2C_Init+0x260>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	bf94      	ite	ls
 800ae6c:	2301      	movls	r3, #1
 800ae6e:	2300      	movhi	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	e006      	b.n	800ae82 <HAL_I2C_Init+0x92>
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	4a77      	ldr	r2, [pc, #476]	; (800b054 <HAL_I2C_Init+0x264>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	bf94      	ite	ls
 800ae7c:	2301      	movls	r3, #1
 800ae7e:	2300      	movhi	r3, #0
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e0db      	b.n	800b042 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	4a72      	ldr	r2, [pc, #456]	; (800b058 <HAL_I2C_Init+0x268>)
 800ae8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ae92:	0c9b      	lsrs	r3, r3, #18
 800ae94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	430a      	orrs	r2, r1
 800aea8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6a1b      	ldr	r3, [r3, #32]
 800aeb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	685b      	ldr	r3, [r3, #4]
 800aeb8:	4a64      	ldr	r2, [pc, #400]	; (800b04c <HAL_I2C_Init+0x25c>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d802      	bhi.n	800aec4 <HAL_I2C_Init+0xd4>
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	3301      	adds	r3, #1
 800aec2:	e009      	b.n	800aed8 <HAL_I2C_Init+0xe8>
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800aeca:	fb02 f303 	mul.w	r3, r2, r3
 800aece:	4a63      	ldr	r2, [pc, #396]	; (800b05c <HAL_I2C_Init+0x26c>)
 800aed0:	fba2 2303 	umull	r2, r3, r2, r3
 800aed4:	099b      	lsrs	r3, r3, #6
 800aed6:	3301      	adds	r3, #1
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6812      	ldr	r2, [r2, #0]
 800aedc:	430b      	orrs	r3, r1
 800aede:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aeea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	685b      	ldr	r3, [r3, #4]
 800aef2:	4956      	ldr	r1, [pc, #344]	; (800b04c <HAL_I2C_Init+0x25c>)
 800aef4:	428b      	cmp	r3, r1
 800aef6:	d80d      	bhi.n	800af14 <HAL_I2C_Init+0x124>
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	1e59      	subs	r1, r3, #1
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	fbb1 f3f3 	udiv	r3, r1, r3
 800af06:	3301      	adds	r3, #1
 800af08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	bf38      	it	cc
 800af10:	2304      	movcc	r3, #4
 800af12:	e04f      	b.n	800afb4 <HAL_I2C_Init+0x1c4>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d111      	bne.n	800af40 <HAL_I2C_Init+0x150>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	1e58      	subs	r0, r3, #1
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6859      	ldr	r1, [r3, #4]
 800af24:	460b      	mov	r3, r1
 800af26:	005b      	lsls	r3, r3, #1
 800af28:	440b      	add	r3, r1
 800af2a:	fbb0 f3f3 	udiv	r3, r0, r3
 800af2e:	3301      	adds	r3, #1
 800af30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf0c      	ite	eq
 800af38:	2301      	moveq	r3, #1
 800af3a:	2300      	movne	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	e012      	b.n	800af66 <HAL_I2C_Init+0x176>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	1e58      	subs	r0, r3, #1
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6859      	ldr	r1, [r3, #4]
 800af48:	460b      	mov	r3, r1
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	440b      	add	r3, r1
 800af4e:	0099      	lsls	r1, r3, #2
 800af50:	440b      	add	r3, r1
 800af52:	fbb0 f3f3 	udiv	r3, r0, r3
 800af56:	3301      	adds	r3, #1
 800af58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	bf0c      	ite	eq
 800af60:	2301      	moveq	r3, #1
 800af62:	2300      	movne	r3, #0
 800af64:	b2db      	uxtb	r3, r3
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <HAL_I2C_Init+0x17e>
 800af6a:	2301      	movs	r3, #1
 800af6c:	e022      	b.n	800afb4 <HAL_I2C_Init+0x1c4>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d10e      	bne.n	800af94 <HAL_I2C_Init+0x1a4>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	1e58      	subs	r0, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6859      	ldr	r1, [r3, #4]
 800af7e:	460b      	mov	r3, r1
 800af80:	005b      	lsls	r3, r3, #1
 800af82:	440b      	add	r3, r1
 800af84:	fbb0 f3f3 	udiv	r3, r0, r3
 800af88:	3301      	adds	r3, #1
 800af8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800af8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af92:	e00f      	b.n	800afb4 <HAL_I2C_Init+0x1c4>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	1e58      	subs	r0, r3, #1
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6859      	ldr	r1, [r3, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	440b      	add	r3, r1
 800afa2:	0099      	lsls	r1, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	fbb0 f3f3 	udiv	r3, r0, r3
 800afaa:	3301      	adds	r3, #1
 800afac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afb4:	6879      	ldr	r1, [r7, #4]
 800afb6:	6809      	ldr	r1, [r1, #0]
 800afb8:	4313      	orrs	r3, r2
 800afba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	69da      	ldr	r2, [r3, #28]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a1b      	ldr	r3, [r3, #32]
 800afce:	431a      	orrs	r2, r3
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	430a      	orrs	r2, r1
 800afd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800afe2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6911      	ldr	r1, [r2, #16]
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	68d2      	ldr	r2, [r2, #12]
 800afee:	4311      	orrs	r1, r2
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	6812      	ldr	r2, [r2, #0]
 800aff4:	430b      	orrs	r3, r1
 800aff6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68db      	ldr	r3, [r3, #12]
 800affe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695a      	ldr	r2, [r3, #20]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	699b      	ldr	r3, [r3, #24]
 800b00a:	431a      	orrs	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	430a      	orrs	r2, r1
 800b012:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f042 0201 	orr.w	r2, r2, #1
 800b022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2200      	movs	r2, #0
 800b03c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3710      	adds	r7, #16
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	000186a0 	.word	0x000186a0
 800b050:	001e847f 	.word	0x001e847f
 800b054:	003d08ff 	.word	0x003d08ff
 800b058:	431bde83 	.word	0x431bde83
 800b05c:	10624dd3 	.word	0x10624dd3

0800b060 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b088      	sub	sp, #32
 800b064:	af02      	add	r7, sp, #8
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	461a      	mov	r2, r3
 800b06c:	460b      	mov	r3, r1
 800b06e:	817b      	strh	r3, [r7, #10]
 800b070:	4613      	mov	r3, r2
 800b072:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b074:	f7fd fdc6 	bl	8008c04 <HAL_GetTick>
 800b078:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b20      	cmp	r3, #32
 800b084:	f040 80e0 	bne.w	800b248 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	2319      	movs	r3, #25
 800b08e:	2201      	movs	r2, #1
 800b090:	4970      	ldr	r1, [pc, #448]	; (800b254 <HAL_I2C_Master_Transmit+0x1f4>)
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 fc22 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d001      	beq.n	800b0a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e0d3      	b.n	800b24a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d101      	bne.n	800b0b0 <HAL_I2C_Master_Transmit+0x50>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e0cc      	b.n	800b24a <HAL_I2C_Master_Transmit+0x1ea>
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d007      	beq.n	800b0d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f042 0201 	orr.w	r2, r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2221      	movs	r2, #33	; 0x21
 800b0ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2210      	movs	r2, #16
 800b0f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	893a      	ldrh	r2, [r7, #8]
 800b106:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4a50      	ldr	r2, [pc, #320]	; (800b258 <HAL_I2C_Master_Transmit+0x1f8>)
 800b116:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b118:	8979      	ldrh	r1, [r7, #10]
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	6a3a      	ldr	r2, [r7, #32]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 fac4 	bl	800b6ac <I2C_MasterRequestWrite>
 800b124:	4603      	mov	r3, r0
 800b126:	2b00      	cmp	r3, #0
 800b128:	d001      	beq.n	800b12e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e08d      	b.n	800b24a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b12e:	2300      	movs	r3, #0
 800b130:	613b      	str	r3, [r7, #16]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	695b      	ldr	r3, [r3, #20]
 800b138:	613b      	str	r3, [r7, #16]
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	613b      	str	r3, [r7, #16]
 800b142:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b144:	e066      	b.n	800b214 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b146:	697a      	ldr	r2, [r7, #20]
 800b148:	6a39      	ldr	r1, [r7, #32]
 800b14a:	68f8      	ldr	r0, [r7, #12]
 800b14c:	f000 fc9c 	bl	800ba88 <I2C_WaitOnTXEFlagUntilTimeout>
 800b150:	4603      	mov	r3, r0
 800b152:	2b00      	cmp	r3, #0
 800b154:	d00d      	beq.n	800b172 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	2b04      	cmp	r3, #4
 800b15c:	d107      	bne.n	800b16e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b16c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e06b      	b.n	800b24a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	781a      	ldrb	r2, [r3, #0]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b182:	1c5a      	adds	r2, r3, #1
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	3b01      	subs	r3, #1
 800b190:	b29a      	uxth	r2, r3
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b19a:	3b01      	subs	r3, #1
 800b19c:	b29a      	uxth	r2, r3
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	695b      	ldr	r3, [r3, #20]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	d11b      	bne.n	800b1e8 <HAL_I2C_Master_Transmit+0x188>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d017      	beq.n	800b1e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1bc:	781a      	ldrb	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	1c5a      	adds	r2, r3, #1
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	b29a      	uxth	r2, r3
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1e8:	697a      	ldr	r2, [r7, #20]
 800b1ea:	6a39      	ldr	r1, [r7, #32]
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 fc8c 	bl	800bb0a <I2C_WaitOnBTFFlagUntilTimeout>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00d      	beq.n	800b214 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1fc:	2b04      	cmp	r3, #4
 800b1fe:	d107      	bne.n	800b210 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	681a      	ldr	r2, [r3, #0]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b20e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e01a      	b.n	800b24a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d194      	bne.n	800b146 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b22a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2220      	movs	r2, #32
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b244:	2300      	movs	r3, #0
 800b246:	e000      	b.n	800b24a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b248:	2302      	movs	r3, #2
  }
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3718      	adds	r7, #24
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	00100002 	.word	0x00100002
 800b258:	ffff0000 	.word	0xffff0000

0800b25c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b088      	sub	sp, #32
 800b260:	af02      	add	r7, sp, #8
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	4608      	mov	r0, r1
 800b266:	4611      	mov	r1, r2
 800b268:	461a      	mov	r2, r3
 800b26a:	4603      	mov	r3, r0
 800b26c:	817b      	strh	r3, [r7, #10]
 800b26e:	460b      	mov	r3, r1
 800b270:	813b      	strh	r3, [r7, #8]
 800b272:	4613      	mov	r3, r2
 800b274:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b276:	f7fd fcc5 	bl	8008c04 <HAL_GetTick>
 800b27a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b282:	b2db      	uxtb	r3, r3
 800b284:	2b20      	cmp	r3, #32
 800b286:	f040 80d9 	bne.w	800b43c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	9300      	str	r3, [sp, #0]
 800b28e:	2319      	movs	r3, #25
 800b290:	2201      	movs	r2, #1
 800b292:	496d      	ldr	r1, [pc, #436]	; (800b448 <HAL_I2C_Mem_Write+0x1ec>)
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fb21 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b29a:	4603      	mov	r3, r0
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d001      	beq.n	800b2a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e0cc      	b.n	800b43e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d101      	bne.n	800b2b2 <HAL_I2C_Mem_Write+0x56>
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e0c5      	b.n	800b43e <HAL_I2C_Mem_Write+0x1e2>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d007      	beq.n	800b2d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f042 0201 	orr.w	r2, r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b2e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2221      	movs	r2, #33	; 0x21
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2240      	movs	r2, #64	; 0x40
 800b2f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	6a3a      	ldr	r2, [r7, #32]
 800b302:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b308:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b30e:	b29a      	uxth	r2, r3
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	4a4d      	ldr	r2, [pc, #308]	; (800b44c <HAL_I2C_Mem_Write+0x1f0>)
 800b318:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b31a:	88f8      	ldrh	r0, [r7, #6]
 800b31c:	893a      	ldrh	r2, [r7, #8]
 800b31e:	8979      	ldrh	r1, [r7, #10]
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	9301      	str	r3, [sp, #4]
 800b324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b326:	9300      	str	r3, [sp, #0]
 800b328:	4603      	mov	r3, r0
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	f000 fa40 	bl	800b7b0 <I2C_RequestMemoryWrite>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d052      	beq.n	800b3dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e081      	b.n	800b43e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b33a:	697a      	ldr	r2, [r7, #20]
 800b33c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 fba2 	bl	800ba88 <I2C_WaitOnTXEFlagUntilTimeout>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00d      	beq.n	800b366 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d107      	bne.n	800b362 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e06b      	b.n	800b43e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36a:	781a      	ldrb	r2, [r3, #0]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b380:	3b01      	subs	r3, #1
 800b382:	b29a      	uxth	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b38c:	b29b      	uxth	r3, r3
 800b38e:	3b01      	subs	r3, #1
 800b390:	b29a      	uxth	r2, r3
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d11b      	bne.n	800b3dc <HAL_I2C_Mem_Write+0x180>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d017      	beq.n	800b3dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3bc:	1c5a      	adds	r2, r3, #1
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1aa      	bne.n	800b33a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3e4:	697a      	ldr	r2, [r7, #20]
 800b3e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 fb8e 	bl	800bb0a <I2C_WaitOnBTFFlagUntilTimeout>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00d      	beq.n	800b410 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	d107      	bne.n	800b40c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b40a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e016      	b.n	800b43e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b41e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2220      	movs	r2, #32
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	e000      	b.n	800b43e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b43c:	2302      	movs	r3, #2
  }
}
 800b43e:	4618      	mov	r0, r3
 800b440:	3718      	adds	r7, #24
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	00100002 	.word	0x00100002
 800b44c:	ffff0000 	.word	0xffff0000

0800b450 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	; 0x28
 800b454:	af02      	add	r7, sp, #8
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	607a      	str	r2, [r7, #4]
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	460b      	mov	r3, r1
 800b45e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800b460:	f7fd fbd0 	bl	8008c04 <HAL_GetTick>
 800b464:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800b466:	2301      	movs	r3, #1
 800b468:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b470:	b2db      	uxtb	r3, r3
 800b472:	2b20      	cmp	r3, #32
 800b474:	f040 8111 	bne.w	800b69a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b478:	69fb      	ldr	r3, [r7, #28]
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	2319      	movs	r3, #25
 800b47e:	2201      	movs	r2, #1
 800b480:	4988      	ldr	r1, [pc, #544]	; (800b6a4 <HAL_I2C_IsDeviceReady+0x254>)
 800b482:	68f8      	ldr	r0, [r7, #12]
 800b484:	f000 fa2a 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d001      	beq.n	800b492 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800b48e:	2302      	movs	r3, #2
 800b490:	e104      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d101      	bne.n	800b4a0 <HAL_I2C_IsDeviceReady+0x50>
 800b49c:	2302      	movs	r3, #2
 800b49e:	e0fd      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 0301 	and.w	r3, r3, #1
 800b4b2:	2b01      	cmp	r3, #1
 800b4b4:	d007      	beq.n	800b4c6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f042 0201 	orr.w	r2, r2, #1
 800b4c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2224      	movs	r2, #36	; 0x24
 800b4da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	4a70      	ldr	r2, [pc, #448]	; (800b6a8 <HAL_I2C_IsDeviceReady+0x258>)
 800b4e8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4f8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2200      	movs	r2, #0
 800b502:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 f9e8 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d00d      	beq.n	800b52e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b51c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b520:	d103      	bne.n	800b52a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b528:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800b52a:	2303      	movs	r3, #3
 800b52c:	e0b6      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b52e:	897b      	ldrh	r3, [r7, #10]
 800b530:	b2db      	uxtb	r3, r3
 800b532:	461a      	mov	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b53c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800b53e:	f7fd fb61 	bl	8008c04 <HAL_GetTick>
 800b542:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b02      	cmp	r3, #2
 800b550:	bf0c      	ite	eq
 800b552:	2301      	moveq	r3, #1
 800b554:	2300      	movne	r3, #0
 800b556:	b2db      	uxtb	r3, r3
 800b558:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b568:	bf0c      	ite	eq
 800b56a:	2301      	moveq	r3, #1
 800b56c:	2300      	movne	r3, #0
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800b572:	e025      	b.n	800b5c0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b574:	f7fd fb46 	bl	8008c04 <HAL_GetTick>
 800b578:	4602      	mov	r2, r0
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	1ad3      	subs	r3, r2, r3
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	429a      	cmp	r2, r3
 800b582:	d302      	bcc.n	800b58a <HAL_I2C_IsDeviceReady+0x13a>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d103      	bne.n	800b592 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	22a0      	movs	r2, #160	; 0xa0
 800b58e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	695b      	ldr	r3, [r3, #20]
 800b598:	f003 0302 	and.w	r3, r3, #2
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	bf0c      	ite	eq
 800b5a0:	2301      	moveq	r3, #1
 800b5a2:	2300      	movne	r3, #0
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b5b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b6:	bf0c      	ite	eq
 800b5b8:	2301      	moveq	r3, #1
 800b5ba:	2300      	movne	r3, #0
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2ba0      	cmp	r3, #160	; 0xa0
 800b5ca:	d005      	beq.n	800b5d8 <HAL_I2C_IsDeviceReady+0x188>
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d102      	bne.n	800b5d8 <HAL_I2C_IsDeviceReady+0x188>
 800b5d2:	7dbb      	ldrb	r3, [r7, #22]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d0cd      	beq.n	800b574 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	f003 0302 	and.w	r3, r3, #2
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d129      	bne.n	800b642 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	681a      	ldr	r2, [r3, #0]
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b5fc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b5fe:	2300      	movs	r3, #0
 800b600:	613b      	str	r3, [r7, #16]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	613b      	str	r3, [r7, #16]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	613b      	str	r3, [r7, #16]
 800b612:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b614:	69fb      	ldr	r3, [r7, #28]
 800b616:	9300      	str	r3, [sp, #0]
 800b618:	2319      	movs	r3, #25
 800b61a:	2201      	movs	r2, #1
 800b61c:	4921      	ldr	r1, [pc, #132]	; (800b6a4 <HAL_I2C_IsDeviceReady+0x254>)
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 f95c 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e036      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2220      	movs	r2, #32
 800b632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800b63e:	2300      	movs	r3, #0
 800b640:	e02c      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b650:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b65a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	2319      	movs	r3, #25
 800b662:	2201      	movs	r2, #1
 800b664:	490f      	ldr	r1, [pc, #60]	; (800b6a4 <HAL_I2C_IsDeviceReady+0x254>)
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f000 f938 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d001      	beq.n	800b676 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800b672:	2301      	movs	r3, #1
 800b674:	e012      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800b676:	69bb      	ldr	r3, [r7, #24]
 800b678:	3301      	adds	r3, #1
 800b67a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	429a      	cmp	r2, r3
 800b682:	f4ff af32 	bcc.w	800b4ea <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2220      	movs	r2, #32
 800b68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e000      	b.n	800b69c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800b69a:	2302      	movs	r3, #2
  }
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	00100002 	.word	0x00100002
 800b6a8:	ffff0000 	.word	0xffff0000

0800b6ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b088      	sub	sp, #32
 800b6b0:	af02      	add	r7, sp, #8
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	607a      	str	r2, [r7, #4]
 800b6b6:	603b      	str	r3, [r7, #0]
 800b6b8:	460b      	mov	r3, r1
 800b6ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b08      	cmp	r3, #8
 800b6c6:	d006      	beq.n	800b6d6 <I2C_MasterRequestWrite+0x2a>
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d003      	beq.n	800b6d6 <I2C_MasterRequestWrite+0x2a>
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b6d4:	d108      	bne.n	800b6e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6e4:	601a      	str	r2, [r3, #0]
 800b6e6:	e00b      	b.n	800b700 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6ec:	2b12      	cmp	r3, #18
 800b6ee:	d107      	bne.n	800b700 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f000 f8e5 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00d      	beq.n	800b734 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b726:	d103      	bne.n	800b730 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b72e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b730:	2303      	movs	r3, #3
 800b732:	e035      	b.n	800b7a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	691b      	ldr	r3, [r3, #16]
 800b738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b73c:	d108      	bne.n	800b750 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b73e:	897b      	ldrh	r3, [r7, #10]
 800b740:	b2db      	uxtb	r3, r3
 800b742:	461a      	mov	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b74c:	611a      	str	r2, [r3, #16]
 800b74e:	e01b      	b.n	800b788 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b750:	897b      	ldrh	r3, [r7, #10]
 800b752:	11db      	asrs	r3, r3, #7
 800b754:	b2db      	uxtb	r3, r3
 800b756:	f003 0306 	and.w	r3, r3, #6
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	f063 030f 	orn	r3, r3, #15
 800b760:	b2da      	uxtb	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	490e      	ldr	r1, [pc, #56]	; (800b7a8 <I2C_MasterRequestWrite+0xfc>)
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 f90b 	bl	800b98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b774:	4603      	mov	r3, r0
 800b776:	2b00      	cmp	r3, #0
 800b778:	d001      	beq.n	800b77e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	e010      	b.n	800b7a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b77e:	897b      	ldrh	r3, [r7, #10]
 800b780:	b2da      	uxtb	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	4907      	ldr	r1, [pc, #28]	; (800b7ac <I2C_MasterRequestWrite+0x100>)
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 f8fb 	bl	800b98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d001      	beq.n	800b79e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b79a:	2301      	movs	r3, #1
 800b79c:	e000      	b.n	800b7a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	00010008 	.word	0x00010008
 800b7ac:	00010002 	.word	0x00010002

0800b7b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b088      	sub	sp, #32
 800b7b4:	af02      	add	r7, sp, #8
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	4608      	mov	r0, r1
 800b7ba:	4611      	mov	r1, r2
 800b7bc:	461a      	mov	r2, r3
 800b7be:	4603      	mov	r3, r0
 800b7c0:	817b      	strh	r3, [r7, #10]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	813b      	strh	r3, [r7, #8]
 800b7c6:	4613      	mov	r3, r2
 800b7c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	6a3b      	ldr	r3, [r7, #32]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 f878 	bl	800b8dc <I2C_WaitOnFlagUntilTimeout>
 800b7ec:	4603      	mov	r3, r0
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d00d      	beq.n	800b80e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b800:	d103      	bne.n	800b80a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b808:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b80a:	2303      	movs	r3, #3
 800b80c:	e05f      	b.n	800b8ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b80e:	897b      	ldrh	r3, [r7, #10]
 800b810:	b2db      	uxtb	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b81c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	6a3a      	ldr	r2, [r7, #32]
 800b822:	492d      	ldr	r1, [pc, #180]	; (800b8d8 <I2C_RequestMemoryWrite+0x128>)
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f8b0 	bl	800b98a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d001      	beq.n	800b834 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e04c      	b.n	800b8ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b834:	2300      	movs	r3, #0
 800b836:	617b      	str	r3, [r7, #20]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	617b      	str	r3, [r7, #20]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	699b      	ldr	r3, [r3, #24]
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b84a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84c:	6a39      	ldr	r1, [r7, #32]
 800b84e:	68f8      	ldr	r0, [r7, #12]
 800b850:	f000 f91a 	bl	800ba88 <I2C_WaitOnTXEFlagUntilTimeout>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00d      	beq.n	800b876 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85e:	2b04      	cmp	r3, #4
 800b860:	d107      	bne.n	800b872 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b870:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b872:	2301      	movs	r3, #1
 800b874:	e02b      	b.n	800b8ce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b876:	88fb      	ldrh	r3, [r7, #6]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d105      	bne.n	800b888 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b87c:	893b      	ldrh	r3, [r7, #8]
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	611a      	str	r2, [r3, #16]
 800b886:	e021      	b.n	800b8cc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b888:	893b      	ldrh	r3, [r7, #8]
 800b88a:	0a1b      	lsrs	r3, r3, #8
 800b88c:	b29b      	uxth	r3, r3
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b898:	6a39      	ldr	r1, [r7, #32]
 800b89a:	68f8      	ldr	r0, [r7, #12]
 800b89c:	f000 f8f4 	bl	800ba88 <I2C_WaitOnTXEFlagUntilTimeout>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d00d      	beq.n	800b8c2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8aa:	2b04      	cmp	r3, #4
 800b8ac:	d107      	bne.n	800b8be <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e005      	b.n	800b8ce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b8c2:	893b      	ldrh	r3, [r7, #8]
 800b8c4:	b2da      	uxtb	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b8cc:	2300      	movs	r3, #0
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3718      	adds	r7, #24
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	00010002 	.word	0x00010002

0800b8dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8ec:	e025      	b.n	800b93a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d021      	beq.n	800b93a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8f6:	f7fd f985 	bl	8008c04 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	429a      	cmp	r2, r3
 800b904:	d302      	bcc.n	800b90c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d116      	bne.n	800b93a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2220      	movs	r2, #32
 800b916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b926:	f043 0220 	orr.w	r2, r3, #32
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	2200      	movs	r2, #0
 800b932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	e023      	b.n	800b982 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	0c1b      	lsrs	r3, r3, #16
 800b93e:	b2db      	uxtb	r3, r3
 800b940:	2b01      	cmp	r3, #1
 800b942:	d10d      	bne.n	800b960 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	43da      	mvns	r2, r3
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	4013      	ands	r3, r2
 800b950:	b29b      	uxth	r3, r3
 800b952:	2b00      	cmp	r3, #0
 800b954:	bf0c      	ite	eq
 800b956:	2301      	moveq	r3, #1
 800b958:	2300      	movne	r3, #0
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	461a      	mov	r2, r3
 800b95e:	e00c      	b.n	800b97a <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	43da      	mvns	r2, r3
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4013      	ands	r3, r2
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	bf0c      	ite	eq
 800b972:	2301      	moveq	r3, #1
 800b974:	2300      	movne	r3, #0
 800b976:	b2db      	uxtb	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d0b6      	beq.n	800b8ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}

0800b98a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b98a:	b580      	push	{r7, lr}
 800b98c:	b084      	sub	sp, #16
 800b98e:	af00      	add	r7, sp, #0
 800b990:	60f8      	str	r0, [r7, #12]
 800b992:	60b9      	str	r1, [r7, #8]
 800b994:	607a      	str	r2, [r7, #4]
 800b996:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b998:	e051      	b.n	800ba3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9a8:	d123      	bne.n	800b9f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b9c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2220      	movs	r2, #32
 800b9ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9de:	f043 0204 	orr.w	r2, r3, #4
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e046      	b.n	800ba80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9f8:	d021      	beq.n	800ba3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9fa:	f7fd f903 	bl	8008c04 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d302      	bcc.n	800ba10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d116      	bne.n	800ba3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2220      	movs	r2, #32
 800ba1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2a:	f043 0220 	orr.w	r2, r3, #32
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e020      	b.n	800ba80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	0c1b      	lsrs	r3, r3, #16
 800ba42:	b2db      	uxtb	r3, r3
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d10c      	bne.n	800ba62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	43da      	mvns	r2, r3
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	4013      	ands	r3, r2
 800ba54:	b29b      	uxth	r3, r3
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	bf14      	ite	ne
 800ba5a:	2301      	movne	r3, #1
 800ba5c:	2300      	moveq	r3, #0
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	e00b      	b.n	800ba7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	43da      	mvns	r2, r3
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	4013      	ands	r3, r2
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	bf14      	ite	ne
 800ba74:	2301      	movne	r3, #1
 800ba76:	2300      	moveq	r3, #0
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d18d      	bne.n	800b99a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba94:	e02d      	b.n	800baf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f000 f878 	bl	800bb8c <I2C_IsAcknowledgeFailed>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	e02d      	b.n	800bb02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baac:	d021      	beq.n	800baf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baae:	f7fd f8a9 	bl	8008c04 <HAL_GetTick>
 800bab2:	4602      	mov	r2, r0
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	68ba      	ldr	r2, [r7, #8]
 800baba:	429a      	cmp	r2, r3
 800babc:	d302      	bcc.n	800bac4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d116      	bne.n	800baf2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2220      	movs	r2, #32
 800bace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bade:	f043 0220 	orr.w	r2, r3, #32
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800baee:	2301      	movs	r3, #1
 800baf0:	e007      	b.n	800bb02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bafc:	2b80      	cmp	r3, #128	; 0x80
 800bafe:	d1ca      	bne.n	800ba96 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	60f8      	str	r0, [r7, #12]
 800bb12:	60b9      	str	r1, [r7, #8]
 800bb14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb16:	e02d      	b.n	800bb74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb18:	68f8      	ldr	r0, [r7, #12]
 800bb1a:	f000 f837 	bl	800bb8c <I2C_IsAcknowledgeFailed>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e02d      	b.n	800bb84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2e:	d021      	beq.n	800bb74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb30:	f7fd f868 	bl	8008c04 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d302      	bcc.n	800bb46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d116      	bne.n	800bb74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	f043 0220 	orr.w	r2, r3, #32
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e007      	b.n	800bb84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	f003 0304 	and.w	r3, r3, #4
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d1ca      	bne.n	800bb18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bba2:	d11b      	bne.n	800bbdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc8:	f043 0204 	orr.w	r2, r3, #4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e000      	b.n	800bbde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bc80      	pop	{r7}
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e02b      	b.n	800bc52 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800bc02:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f245 5255 	movw	r2, #21845	; 0x5555
 800bc0c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	687a      	ldr	r2, [r7, #4]
 800bc14:	6852      	ldr	r2, [r2, #4]
 800bc16:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	6892      	ldr	r2, [r2, #8]
 800bc20:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800bc22:	f7fc ffef 	bl	8008c04 <HAL_GetTick>
 800bc26:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800bc28:	e008      	b.n	800bc3c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800bc2a:	f7fc ffeb 	bl	8008c04 <HAL_GetTick>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b30      	cmp	r3, #48	; 0x30
 800bc36:	d901      	bls.n	800bc3c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800bc38:	2303      	movs	r3, #3
 800bc3a:	e00a      	b.n	800bc52 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1f1      	bne.n	800bc2a <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bc4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bc50:	2300      	movs	r3, #0
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3710      	adds	r7, #16
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bc6a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bc80      	pop	{r7}
 800bc76:	4770      	bx	lr

0800bc78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b08a      	sub	sp, #40	; 0x28
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d101      	bne.n	800bc8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bc86:	2301      	movs	r3, #1
 800bc88:	e237      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d050      	beq.n	800bd38 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bc96:	4ba3      	ldr	r3, [pc, #652]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f003 030c 	and.w	r3, r3, #12
 800bc9e:	2b04      	cmp	r3, #4
 800bca0:	d00c      	beq.n	800bcbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bca2:	4ba0      	ldr	r3, [pc, #640]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bcaa:	2b08      	cmp	r3, #8
 800bcac:	d112      	bne.n	800bcd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bcae:	4b9d      	ldr	r3, [pc, #628]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bcb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcba:	d10b      	bne.n	800bcd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bcbc:	4b99      	ldr	r3, [pc, #612]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d036      	beq.n	800bd36 <HAL_RCC_OscConfig+0xbe>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d132      	bne.n	800bd36 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e212      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	4b93      	ldr	r3, [pc, #588]	; (800bf28 <HAL_RCC_OscConfig+0x2b0>)
 800bcda:	b2d2      	uxtb	r2, r2
 800bcdc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d013      	beq.n	800bd0e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bce6:	f7fc ff8d 	bl	8008c04 <HAL_GetTick>
 800bcea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bcec:	e008      	b.n	800bd00 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bcee:	f7fc ff89 	bl	8008c04 <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	6a3b      	ldr	r3, [r7, #32]
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	2b64      	cmp	r3, #100	; 0x64
 800bcfa:	d901      	bls.n	800bd00 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e1fc      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd00:	4b88      	ldr	r3, [pc, #544]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0f0      	beq.n	800bcee <HAL_RCC_OscConfig+0x76>
 800bd0c:	e014      	b.n	800bd38 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd0e:	f7fc ff79 	bl	8008c04 <HAL_GetTick>
 800bd12:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd14:	e008      	b.n	800bd28 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bd16:	f7fc ff75 	bl	8008c04 <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	6a3b      	ldr	r3, [r7, #32]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b64      	cmp	r3, #100	; 0x64
 800bd22:	d901      	bls.n	800bd28 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e1e8      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd28:	4b7e      	ldr	r3, [pc, #504]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1f0      	bne.n	800bd16 <HAL_RCC_OscConfig+0x9e>
 800bd34:	e000      	b.n	800bd38 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd36:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0302 	and.w	r3, r3, #2
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d077      	beq.n	800be34 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bd44:	4b77      	ldr	r3, [pc, #476]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd46:	689b      	ldr	r3, [r3, #8]
 800bd48:	f003 030c 	and.w	r3, r3, #12
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d00b      	beq.n	800bd68 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd50:	4b74      	ldr	r3, [pc, #464]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd52:	689b      	ldr	r3, [r3, #8]
 800bd54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bd58:	2b08      	cmp	r3, #8
 800bd5a:	d126      	bne.n	800bdaa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bd5c:	4b71      	ldr	r3, [pc, #452]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd5e:	685b      	ldr	r3, [r3, #4]
 800bd60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d120      	bne.n	800bdaa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd68:	4b6e      	ldr	r3, [pc, #440]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 0302 	and.w	r3, r3, #2
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d005      	beq.n	800bd80 <HAL_RCC_OscConfig+0x108>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d001      	beq.n	800bd80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e1bc      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd80:	4b68      	ldr	r3, [pc, #416]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	691b      	ldr	r3, [r3, #16]
 800bd8c:	21f8      	movs	r1, #248	; 0xf8
 800bd8e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bd90:	69b9      	ldr	r1, [r7, #24]
 800bd92:	fa91 f1a1 	rbit	r1, r1
 800bd96:	6179      	str	r1, [r7, #20]
  return result;
 800bd98:	6979      	ldr	r1, [r7, #20]
 800bd9a:	fab1 f181 	clz	r1, r1
 800bd9e:	b2c9      	uxtb	r1, r1
 800bda0:	408b      	lsls	r3, r1
 800bda2:	4960      	ldr	r1, [pc, #384]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bda4:	4313      	orrs	r3, r2
 800bda6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bda8:	e044      	b.n	800be34 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d02a      	beq.n	800be08 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bdb2:	4b5e      	ldr	r3, [pc, #376]	; (800bf2c <HAL_RCC_OscConfig+0x2b4>)
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdb8:	f7fc ff24 	bl	8008c04 <HAL_GetTick>
 800bdbc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdbe:	e008      	b.n	800bdd2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bdc0:	f7fc ff20 	bl	8008c04 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	6a3b      	ldr	r3, [r7, #32]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	2b02      	cmp	r3, #2
 800bdcc:	d901      	bls.n	800bdd2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e193      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdd2:	4b54      	ldr	r3, [pc, #336]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f003 0302 	and.w	r3, r3, #2
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d0f0      	beq.n	800bdc0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bdde:	4b51      	ldr	r3, [pc, #324]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	691b      	ldr	r3, [r3, #16]
 800bdea:	21f8      	movs	r1, #248	; 0xf8
 800bdec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bdee:	6939      	ldr	r1, [r7, #16]
 800bdf0:	fa91 f1a1 	rbit	r1, r1
 800bdf4:	60f9      	str	r1, [r7, #12]
  return result;
 800bdf6:	68f9      	ldr	r1, [r7, #12]
 800bdf8:	fab1 f181 	clz	r1, r1
 800bdfc:	b2c9      	uxtb	r1, r1
 800bdfe:	408b      	lsls	r3, r1
 800be00:	4948      	ldr	r1, [pc, #288]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800be02:	4313      	orrs	r3, r2
 800be04:	600b      	str	r3, [r1, #0]
 800be06:	e015      	b.n	800be34 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800be08:	4b48      	ldr	r3, [pc, #288]	; (800bf2c <HAL_RCC_OscConfig+0x2b4>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be0e:	f7fc fef9 	bl	8008c04 <HAL_GetTick>
 800be12:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be14:	e008      	b.n	800be28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800be16:	f7fc fef5 	bl	8008c04 <HAL_GetTick>
 800be1a:	4602      	mov	r2, r0
 800be1c:	6a3b      	ldr	r3, [r7, #32]
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	2b02      	cmp	r3, #2
 800be22:	d901      	bls.n	800be28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e168      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be28:	4b3e      	ldr	r3, [pc, #248]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 0302 	and.w	r3, r3, #2
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1f0      	bne.n	800be16 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f003 0308 	and.w	r3, r3, #8
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d030      	beq.n	800bea2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d016      	beq.n	800be76 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be48:	4b39      	ldr	r3, [pc, #228]	; (800bf30 <HAL_RCC_OscConfig+0x2b8>)
 800be4a:	2201      	movs	r2, #1
 800be4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be4e:	f7fc fed9 	bl	8008c04 <HAL_GetTick>
 800be52:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be54:	e008      	b.n	800be68 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be56:	f7fc fed5 	bl	8008c04 <HAL_GetTick>
 800be5a:	4602      	mov	r2, r0
 800be5c:	6a3b      	ldr	r3, [r7, #32]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	2b02      	cmp	r3, #2
 800be62:	d901      	bls.n	800be68 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800be64:	2303      	movs	r3, #3
 800be66:	e148      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be68:	4b2e      	ldr	r3, [pc, #184]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800be6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be6c:	f003 0302 	and.w	r3, r3, #2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d0f0      	beq.n	800be56 <HAL_RCC_OscConfig+0x1de>
 800be74:	e015      	b.n	800bea2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be76:	4b2e      	ldr	r3, [pc, #184]	; (800bf30 <HAL_RCC_OscConfig+0x2b8>)
 800be78:	2200      	movs	r2, #0
 800be7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be7c:	f7fc fec2 	bl	8008c04 <HAL_GetTick>
 800be80:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be82:	e008      	b.n	800be96 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800be84:	f7fc febe 	bl	8008c04 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	6a3b      	ldr	r3, [r7, #32]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d901      	bls.n	800be96 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e131      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be96:	4b23      	ldr	r3, [pc, #140]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800be98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be9a:	f003 0302 	and.w	r3, r3, #2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1f0      	bne.n	800be84 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f003 0304 	and.w	r3, r3, #4
 800beaa:	2b00      	cmp	r3, #0
 800beac:	f000 8088 	beq.w	800bfc0 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800beb6:	4b1b      	ldr	r3, [pc, #108]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d110      	bne.n	800bee4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bec2:	2300      	movs	r3, #0
 800bec4:	60bb      	str	r3, [r7, #8]
 800bec6:	4b17      	ldr	r3, [pc, #92]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beca:	4a16      	ldr	r2, [pc, #88]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800becc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bed0:	6413      	str	r3, [r2, #64]	; 0x40
 800bed2:	4b14      	ldr	r3, [pc, #80]	; (800bf24 <HAL_RCC_OscConfig+0x2ac>)
 800bed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800beda:	60bb      	str	r3, [r7, #8]
 800bedc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bede:	2301      	movs	r3, #1
 800bee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bee4:	4b13      	ldr	r3, [pc, #76]	; (800bf34 <HAL_RCC_OscConfig+0x2bc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a12      	ldr	r2, [pc, #72]	; (800bf34 <HAL_RCC_OscConfig+0x2bc>)
 800beea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bef0:	4b10      	ldr	r3, [pc, #64]	; (800bf34 <HAL_RCC_OscConfig+0x2bc>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d123      	bne.n	800bf44 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800befc:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <HAL_RCC_OscConfig+0x2bc>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	4a0c      	ldr	r2, [pc, #48]	; (800bf34 <HAL_RCC_OscConfig+0x2bc>)
 800bf02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bf08:	f7fc fe7c 	bl	8008c04 <HAL_GetTick>
 800bf0c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf0e:	e013      	b.n	800bf38 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf10:	f7fc fe78 	bl	8008c04 <HAL_GetTick>
 800bf14:	4602      	mov	r2, r0
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	2b02      	cmp	r3, #2
 800bf1c:	d90c      	bls.n	800bf38 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e0eb      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
 800bf22:	bf00      	nop
 800bf24:	40023800 	.word	0x40023800
 800bf28:	40023802 	.word	0x40023802
 800bf2c:	42470000 	.word	0x42470000
 800bf30:	42470e80 	.word	0x42470e80
 800bf34:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf38:	4b72      	ldr	r3, [pc, #456]	; (800c104 <HAL_RCC_OscConfig+0x48c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0e5      	beq.n	800bf10 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	4b6f      	ldr	r3, [pc, #444]	; (800c108 <HAL_RCC_OscConfig+0x490>)
 800bf4a:	b2d2      	uxtb	r2, r2
 800bf4c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d015      	beq.n	800bf82 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf56:	f7fc fe55 	bl	8008c04 <HAL_GetTick>
 800bf5a:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf5c:	e00a      	b.n	800bf74 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf5e:	f7fc fe51 	bl	8008c04 <HAL_GetTick>
 800bf62:	4602      	mov	r2, r0
 800bf64:	6a3b      	ldr	r3, [r7, #32]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d901      	bls.n	800bf74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bf70:	2303      	movs	r3, #3
 800bf72:	e0c2      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bf74:	4b65      	ldr	r3, [pc, #404]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800bf76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf78:	f003 0302 	and.w	r3, r3, #2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d0ee      	beq.n	800bf5e <HAL_RCC_OscConfig+0x2e6>
 800bf80:	e014      	b.n	800bfac <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf82:	f7fc fe3f 	bl	8008c04 <HAL_GetTick>
 800bf86:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bf88:	e00a      	b.n	800bfa0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bf8a:	f7fc fe3b 	bl	8008c04 <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	6a3b      	ldr	r3, [r7, #32]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d901      	bls.n	800bfa0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e0ac      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfa0:	4b5a      	ldr	r3, [pc, #360]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800bfa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfa4:	f003 0302 	and.w	r3, r3, #2
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d1ee      	bne.n	800bf8a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d105      	bne.n	800bfc0 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bfb4:	4b55      	ldr	r3, [pc, #340]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800bfb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb8:	4a54      	ldr	r2, [pc, #336]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800bfba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f000 8097 	beq.w	800c0f8 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bfca:	4b50      	ldr	r3, [pc, #320]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f003 030c 	and.w	r3, r3, #12
 800bfd2:	2b08      	cmp	r3, #8
 800bfd4:	d061      	beq.n	800c09a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	699b      	ldr	r3, [r3, #24]
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d146      	bne.n	800c06c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfde:	4b4c      	ldr	r3, [pc, #304]	; (800c110 <HAL_RCC_OscConfig+0x498>)
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfe4:	f7fc fe0e 	bl	8008c04 <HAL_GetTick>
 800bfe8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfea:	e008      	b.n	800bffe <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfec:	f7fc fe0a 	bl	8008c04 <HAL_GetTick>
 800bff0:	4602      	mov	r2, r0
 800bff2:	6a3b      	ldr	r3, [r7, #32]
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	2b64      	cmp	r3, #100	; 0x64
 800bff8:	d901      	bls.n	800bffe <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800bffa:	2303      	movs	r3, #3
 800bffc:	e07d      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bffe:	4b43      	ldr	r3, [pc, #268]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1f0      	bne.n	800bfec <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c00a:	4b40      	ldr	r3, [pc, #256]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800c00c:	685a      	ldr	r2, [r3, #4]
 800c00e:	4b41      	ldr	r3, [pc, #260]	; (800c114 <HAL_RCC_OscConfig+0x49c>)
 800c010:	4013      	ands	r3, r2
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	69d1      	ldr	r1, [r2, #28]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6a12      	ldr	r2, [r2, #32]
 800c01a:	4311      	orrs	r1, r2
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c020:	0192      	lsls	r2, r2, #6
 800c022:	4311      	orrs	r1, r2
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c028:	0612      	lsls	r2, r2, #24
 800c02a:	4311      	orrs	r1, r2
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c030:	0852      	lsrs	r2, r2, #1
 800c032:	3a01      	subs	r2, #1
 800c034:	0412      	lsls	r2, r2, #16
 800c036:	430a      	orrs	r2, r1
 800c038:	4934      	ldr	r1, [pc, #208]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c03e:	4b34      	ldr	r3, [pc, #208]	; (800c110 <HAL_RCC_OscConfig+0x498>)
 800c040:	2201      	movs	r2, #1
 800c042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c044:	f7fc fdde 	bl	8008c04 <HAL_GetTick>
 800c048:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c04a:	e008      	b.n	800c05e <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c04c:	f7fc fdda 	bl	8008c04 <HAL_GetTick>
 800c050:	4602      	mov	r2, r0
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	1ad3      	subs	r3, r2, r3
 800c056:	2b64      	cmp	r3, #100	; 0x64
 800c058:	d901      	bls.n	800c05e <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 800c05a:	2303      	movs	r3, #3
 800c05c:	e04d      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c05e:	4b2b      	ldr	r3, [pc, #172]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c066:	2b00      	cmp	r3, #0
 800c068:	d0f0      	beq.n	800c04c <HAL_RCC_OscConfig+0x3d4>
 800c06a:	e045      	b.n	800c0f8 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c06c:	4b28      	ldr	r3, [pc, #160]	; (800c110 <HAL_RCC_OscConfig+0x498>)
 800c06e:	2200      	movs	r2, #0
 800c070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c072:	f7fc fdc7 	bl	8008c04 <HAL_GetTick>
 800c076:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c078:	e008      	b.n	800c08c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c07a:	f7fc fdc3 	bl	8008c04 <HAL_GetTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	6a3b      	ldr	r3, [r7, #32]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	2b64      	cmp	r3, #100	; 0x64
 800c086:	d901      	bls.n	800c08c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e036      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c08c:	4b1f      	ldr	r3, [pc, #124]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1f0      	bne.n	800c07a <HAL_RCC_OscConfig+0x402>
 800c098:	e02e      	b.n	800c0f8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	2b01      	cmp	r3, #1
 800c0a0:	d101      	bne.n	800c0a6 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e029      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800c0a6:	4b19      	ldr	r3, [pc, #100]	; (800c10c <HAL_RCC_OscConfig+0x494>)
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0ac:	69fb      	ldr	r3, [r7, #28]
 800c0ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69db      	ldr	r3, [r3, #28]
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d11c      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d115      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	099b      	lsrs	r3, r3, #6
 800c0cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d10d      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d106      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c0e6:	69fb      	ldr	r3, [r7, #28]
 800c0e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d001      	beq.n	800c0f8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	e000      	b.n	800c0fa <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3728      	adds	r7, #40	; 0x28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	40007000 	.word	0x40007000
 800c108:	40023870 	.word	0x40023870
 800c10c:	40023800 	.word	0x40023800
 800c110:	42470060 	.word	0x42470060
 800c114:	f0bc8000 	.word	0xf0bc8000

0800c118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b086      	sub	sp, #24
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	e0d2      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c12c:	4b6b      	ldr	r3, [pc, #428]	; (800c2dc <HAL_RCC_ClockConfig+0x1c4>)
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f003 030f 	and.w	r3, r3, #15
 800c134:	683a      	ldr	r2, [r7, #0]
 800c136:	429a      	cmp	r2, r3
 800c138:	d90c      	bls.n	800c154 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c13a:	4b68      	ldr	r3, [pc, #416]	; (800c2dc <HAL_RCC_ClockConfig+0x1c4>)
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	b2d2      	uxtb	r2, r2
 800c140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c142:	4b66      	ldr	r3, [pc, #408]	; (800c2dc <HAL_RCC_ClockConfig+0x1c4>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f003 030f 	and.w	r3, r3, #15
 800c14a:	683a      	ldr	r2, [r7, #0]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d001      	beq.n	800c154 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c150:	2301      	movs	r3, #1
 800c152:	e0be      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 0302 	and.w	r3, r3, #2
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d020      	beq.n	800c1a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 0304 	and.w	r3, r3, #4
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d005      	beq.n	800c178 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c16c:	4b5c      	ldr	r3, [pc, #368]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	4a5b      	ldr	r2, [pc, #364]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c172:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c176:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0308 	and.w	r3, r3, #8
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800c184:	4b56      	ldr	r3, [pc, #344]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c186:	689b      	ldr	r3, [r3, #8]
 800c188:	4a55      	ldr	r2, [pc, #340]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c18a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c18e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c190:	4b53      	ldr	r3, [pc, #332]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	4950      	ldr	r1, [pc, #320]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	f003 0301 	and.w	r3, r3, #1
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d040      	beq.n	800c230 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d107      	bne.n	800c1c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1b6:	4b4a      	ldr	r3, [pc, #296]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d115      	bne.n	800c1ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e085      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d107      	bne.n	800c1de <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1ce:	4b44      	ldr	r3, [pc, #272]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d109      	bne.n	800c1ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e079      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1de:	4b40      	ldr	r3, [pc, #256]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f003 0302 	and.w	r3, r3, #2
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d101      	bne.n	800c1ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	e071      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c1ee:	4b3c      	ldr	r3, [pc, #240]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1f0:	689b      	ldr	r3, [r3, #8]
 800c1f2:	f023 0203 	bic.w	r2, r3, #3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	4939      	ldr	r1, [pc, #228]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c200:	f7fc fd00 	bl	8008c04 <HAL_GetTick>
 800c204:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c206:	e00a      	b.n	800c21e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c208:	f7fc fcfc 	bl	8008c04 <HAL_GetTick>
 800c20c:	4602      	mov	r2, r0
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	f241 3288 	movw	r2, #5000	; 0x1388
 800c216:	4293      	cmp	r3, r2
 800c218:	d901      	bls.n	800c21e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e059      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c21e:	4b30      	ldr	r3, [pc, #192]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f003 020c 	and.w	r2, r3, #12
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d1eb      	bne.n	800c208 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c230:	4b2a      	ldr	r3, [pc, #168]	; (800c2dc <HAL_RCC_ClockConfig+0x1c4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 030f 	and.w	r3, r3, #15
 800c238:	683a      	ldr	r2, [r7, #0]
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d20c      	bcs.n	800c258 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c23e:	4b27      	ldr	r3, [pc, #156]	; (800c2dc <HAL_RCC_ClockConfig+0x1c4>)
 800c240:	683a      	ldr	r2, [r7, #0]
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c246:	4b25      	ldr	r3, [pc, #148]	; (800c2dc <HAL_RCC_ClockConfig+0x1c4>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 030f 	and.w	r3, r3, #15
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	429a      	cmp	r2, r3
 800c252:	d001      	beq.n	800c258 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e03c      	b.n	800c2d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f003 0304 	and.w	r3, r3, #4
 800c260:	2b00      	cmp	r3, #0
 800c262:	d008      	beq.n	800c276 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c264:	4b1e      	ldr	r3, [pc, #120]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c266:	689b      	ldr	r3, [r3, #8]
 800c268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	491b      	ldr	r1, [pc, #108]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c272:	4313      	orrs	r3, r2
 800c274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f003 0308 	and.w	r3, r3, #8
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d009      	beq.n	800c296 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c282:	4b17      	ldr	r3, [pc, #92]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	691b      	ldr	r3, [r3, #16]
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	4913      	ldr	r1, [pc, #76]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c292:	4313      	orrs	r3, r2
 800c294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800c296:	f000 f82b 	bl	800c2f0 <HAL_RCC_GetSysClockFreq>
 800c29a:	4601      	mov	r1, r0
 800c29c:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <HAL_RCC_ClockConfig+0x1c8>)
 800c29e:	689b      	ldr	r3, [r3, #8]
 800c2a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2a4:	22f0      	movs	r2, #240	; 0xf0
 800c2a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2a8:	693a      	ldr	r2, [r7, #16]
 800c2aa:	fa92 f2a2 	rbit	r2, r2
 800c2ae:	60fa      	str	r2, [r7, #12]
  return result;
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	fab2 f282 	clz	r2, r2
 800c2b6:	b2d2      	uxtb	r2, r2
 800c2b8:	40d3      	lsrs	r3, r2
 800c2ba:	4a0a      	ldr	r2, [pc, #40]	; (800c2e4 <HAL_RCC_ClockConfig+0x1cc>)
 800c2bc:	5cd3      	ldrb	r3, [r2, r3]
 800c2be:	fa21 f303 	lsr.w	r3, r1, r3
 800c2c2:	4a09      	ldr	r2, [pc, #36]	; (800c2e8 <HAL_RCC_ClockConfig+0x1d0>)
 800c2c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c2c6:	4b09      	ldr	r3, [pc, #36]	; (800c2ec <HAL_RCC_ClockConfig+0x1d4>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fc fc58 	bl	8008b80 <HAL_InitTick>

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	40023c00 	.word	0x40023c00
 800c2e0:	40023800 	.word	0x40023800
 800c2e4:	08010ea4 	.word	0x08010ea4
 800c2e8:	20000054 	.word	0x20000054
 800c2ec:	20000058 	.word	0x20000058

0800c2f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	60fb      	str	r3, [r7, #12]
 800c2fe:	2300      	movs	r3, #0
 800c300:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c302:	2300      	movs	r3, #0
 800c304:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c306:	4b50      	ldr	r3, [pc, #320]	; (800c448 <HAL_RCC_GetSysClockFreq+0x158>)
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	f003 030c 	and.w	r3, r3, #12
 800c30e:	2b04      	cmp	r3, #4
 800c310:	d007      	beq.n	800c322 <HAL_RCC_GetSysClockFreq+0x32>
 800c312:	2b08      	cmp	r3, #8
 800c314:	d008      	beq.n	800c328 <HAL_RCC_GetSysClockFreq+0x38>
 800c316:	2b00      	cmp	r3, #0
 800c318:	f040 808d 	bne.w	800c436 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c31c:	4b4b      	ldr	r3, [pc, #300]	; (800c44c <HAL_RCC_GetSysClockFreq+0x15c>)
 800c31e:	60bb      	str	r3, [r7, #8]
       break;
 800c320:	e08c      	b.n	800c43c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c322:	4b4b      	ldr	r3, [pc, #300]	; (800c450 <HAL_RCC_GetSysClockFreq+0x160>)
 800c324:	60bb      	str	r3, [r7, #8]
      break;
 800c326:	e089      	b.n	800c43c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c328:	4b47      	ldr	r3, [pc, #284]	; (800c448 <HAL_RCC_GetSysClockFreq+0x158>)
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c330:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c332:	4b45      	ldr	r3, [pc, #276]	; (800c448 <HAL_RCC_GetSysClockFreq+0x158>)
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d023      	beq.n	800c386 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c33e:	4b42      	ldr	r3, [pc, #264]	; (800c448 <HAL_RCC_GetSysClockFreq+0x158>)
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	099b      	lsrs	r3, r3, #6
 800c344:	f04f 0400 	mov.w	r4, #0
 800c348:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c34c:	f04f 0200 	mov.w	r2, #0
 800c350:	ea03 0501 	and.w	r5, r3, r1
 800c354:	ea04 0602 	and.w	r6, r4, r2
 800c358:	4a3d      	ldr	r2, [pc, #244]	; (800c450 <HAL_RCC_GetSysClockFreq+0x160>)
 800c35a:	fb02 f106 	mul.w	r1, r2, r6
 800c35e:	2200      	movs	r2, #0
 800c360:	fb02 f205 	mul.w	r2, r2, r5
 800c364:	440a      	add	r2, r1
 800c366:	493a      	ldr	r1, [pc, #232]	; (800c450 <HAL_RCC_GetSysClockFreq+0x160>)
 800c368:	fba5 0101 	umull	r0, r1, r5, r1
 800c36c:	1853      	adds	r3, r2, r1
 800c36e:	4619      	mov	r1, r3
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f04f 0400 	mov.w	r4, #0
 800c376:	461a      	mov	r2, r3
 800c378:	4623      	mov	r3, r4
 800c37a:	f7f4 ff05 	bl	8001188 <__aeabi_uldivmod>
 800c37e:	4603      	mov	r3, r0
 800c380:	460c      	mov	r4, r1
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	e049      	b.n	800c41a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c386:	4b30      	ldr	r3, [pc, #192]	; (800c448 <HAL_RCC_GetSysClockFreq+0x158>)
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	099b      	lsrs	r3, r3, #6
 800c38c:	f04f 0400 	mov.w	r4, #0
 800c390:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c394:	f04f 0200 	mov.w	r2, #0
 800c398:	ea03 0501 	and.w	r5, r3, r1
 800c39c:	ea04 0602 	and.w	r6, r4, r2
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	4632      	mov	r2, r6
 800c3a4:	f04f 0300 	mov.w	r3, #0
 800c3a8:	f04f 0400 	mov.w	r4, #0
 800c3ac:	0154      	lsls	r4, r2, #5
 800c3ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c3b2:	014b      	lsls	r3, r1, #5
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4622      	mov	r2, r4
 800c3b8:	1b49      	subs	r1, r1, r5
 800c3ba:	eb62 0206 	sbc.w	r2, r2, r6
 800c3be:	f04f 0300 	mov.w	r3, #0
 800c3c2:	f04f 0400 	mov.w	r4, #0
 800c3c6:	0194      	lsls	r4, r2, #6
 800c3c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c3cc:	018b      	lsls	r3, r1, #6
 800c3ce:	1a5b      	subs	r3, r3, r1
 800c3d0:	eb64 0402 	sbc.w	r4, r4, r2
 800c3d4:	f04f 0100 	mov.w	r1, #0
 800c3d8:	f04f 0200 	mov.w	r2, #0
 800c3dc:	00e2      	lsls	r2, r4, #3
 800c3de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c3e2:	00d9      	lsls	r1, r3, #3
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4614      	mov	r4, r2
 800c3e8:	195b      	adds	r3, r3, r5
 800c3ea:	eb44 0406 	adc.w	r4, r4, r6
 800c3ee:	f04f 0100 	mov.w	r1, #0
 800c3f2:	f04f 0200 	mov.w	r2, #0
 800c3f6:	02a2      	lsls	r2, r4, #10
 800c3f8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c3fc:	0299      	lsls	r1, r3, #10
 800c3fe:	460b      	mov	r3, r1
 800c400:	4614      	mov	r4, r2
 800c402:	4618      	mov	r0, r3
 800c404:	4621      	mov	r1, r4
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f04f 0400 	mov.w	r4, #0
 800c40c:	461a      	mov	r2, r3
 800c40e:	4623      	mov	r3, r4
 800c410:	f7f4 feba 	bl	8001188 <__aeabi_uldivmod>
 800c414:	4603      	mov	r3, r0
 800c416:	460c      	mov	r4, r1
 800c418:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c41a:	4b0b      	ldr	r3, [pc, #44]	; (800c448 <HAL_RCC_GetSysClockFreq+0x158>)
 800c41c:	685b      	ldr	r3, [r3, #4]
 800c41e:	0c1b      	lsrs	r3, r3, #16
 800c420:	f003 0303 	and.w	r3, r3, #3
 800c424:	3301      	adds	r3, #1
 800c426:	005b      	lsls	r3, r3, #1
 800c428:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c432:	60bb      	str	r3, [r7, #8]
      break;
 800c434:	e002      	b.n	800c43c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c436:	4b05      	ldr	r3, [pc, #20]	; (800c44c <HAL_RCC_GetSysClockFreq+0x15c>)
 800c438:	60bb      	str	r3, [r7, #8]
      break;
 800c43a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c43c:	68bb      	ldr	r3, [r7, #8]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c446:	bf00      	nop
 800c448:	40023800 	.word	0x40023800
 800c44c:	00f42400 	.word	0x00f42400
 800c450:	017d7840 	.word	0x017d7840

0800c454 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c454:	b480      	push	{r7}
 800c456:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c458:	4b02      	ldr	r3, [pc, #8]	; (800c464 <HAL_RCC_GetHCLKFreq+0x10>)
 800c45a:	681b      	ldr	r3, [r3, #0]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	46bd      	mov	sp, r7
 800c460:	bc80      	pop	{r7}
 800c462:	4770      	bx	lr
 800c464:	20000054 	.word	0x20000054

0800c468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800c46e:	f7ff fff1 	bl	800c454 <HAL_RCC_GetHCLKFreq>
 800c472:	4601      	mov	r1, r0
 800c474:	4b0b      	ldr	r3, [pc, #44]	; (800c4a4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800c47c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800c480:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	fa92 f2a2 	rbit	r2, r2
 800c488:	603a      	str	r2, [r7, #0]
  return result;
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	fab2 f282 	clz	r2, r2
 800c490:	b2d2      	uxtb	r2, r2
 800c492:	40d3      	lsrs	r3, r2
 800c494:	4a04      	ldr	r2, [pc, #16]	; (800c4a8 <HAL_RCC_GetPCLK1Freq+0x40>)
 800c496:	5cd3      	ldrb	r3, [r2, r3]
 800c498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c49c:	4618      	mov	r0, r3
 800c49e:	3708      	adds	r7, #8
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}
 800c4a4:	40023800 	.word	0x40023800
 800c4a8:	08010eb4 	.word	0x08010eb4

0800c4ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800c4b2:	f7ff ffcf 	bl	800c454 <HAL_RCC_GetHCLKFreq>
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	4b0b      	ldr	r3, [pc, #44]	; (800c4e8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c4c0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800c4c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	fa92 f2a2 	rbit	r2, r2
 800c4cc:	603a      	str	r2, [r7, #0]
  return result;
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	fab2 f282 	clz	r2, r2
 800c4d4:	b2d2      	uxtb	r2, r2
 800c4d6:	40d3      	lsrs	r3, r2
 800c4d8:	4a04      	ldr	r2, [pc, #16]	; (800c4ec <HAL_RCC_GetPCLK2Freq+0x40>)
 800c4da:	5cd3      	ldrb	r3, [r2, r3]
 800c4dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3708      	adds	r7, #8
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	40023800 	.word	0x40023800
 800c4ec:	08010eb4 	.word	0x08010eb4

0800c4f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d101      	bne.n	800c502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e041      	b.n	800c586 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7fc f9ba 	bl	8008890 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2202      	movs	r2, #2
 800c520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	3304      	adds	r3, #4
 800c52c:	4619      	mov	r1, r3
 800c52e:	4610      	mov	r0, r2
 800c530:	f000 fccc 	bl	800cecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2201      	movs	r2, #1
 800c548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2201      	movs	r2, #1
 800c560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2201      	movs	r2, #1
 800c568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2201      	movs	r2, #1
 800c580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3708      	adds	r7, #8
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d001      	beq.n	800c5a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e046      	b.n	800c636 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2202      	movs	r2, #2
 800c5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a22      	ldr	r2, [pc, #136]	; (800c640 <HAL_TIM_Base_Start+0xb0>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d022      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5c2:	d01d      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a1e      	ldr	r2, [pc, #120]	; (800c644 <HAL_TIM_Base_Start+0xb4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d018      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a1d      	ldr	r2, [pc, #116]	; (800c648 <HAL_TIM_Base_Start+0xb8>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d013      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a1b      	ldr	r2, [pc, #108]	; (800c64c <HAL_TIM_Base_Start+0xbc>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d00e      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a1a      	ldr	r2, [pc, #104]	; (800c650 <HAL_TIM_Base_Start+0xc0>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d009      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a18      	ldr	r2, [pc, #96]	; (800c654 <HAL_TIM_Base_Start+0xc4>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d004      	beq.n	800c600 <HAL_TIM_Base_Start+0x70>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a17      	ldr	r2, [pc, #92]	; (800c658 <HAL_TIM_Base_Start+0xc8>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d111      	bne.n	800c624 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	f003 0307 	and.w	r3, r3, #7
 800c60a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2b06      	cmp	r3, #6
 800c610:	d010      	beq.n	800c634 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f042 0201 	orr.w	r2, r2, #1
 800c620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c622:	e007      	b.n	800c634 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	681a      	ldr	r2, [r3, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f042 0201 	orr.w	r2, r2, #1
 800c632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	3714      	adds	r7, #20
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bc80      	pop	{r7}
 800c63e:	4770      	bx	lr
 800c640:	40010000 	.word	0x40010000
 800c644:	40000400 	.word	0x40000400
 800c648:	40000800 	.word	0x40000800
 800c64c:	40000c00 	.word	0x40000c00
 800c650:	40010400 	.word	0x40010400
 800c654:	40014000 	.word	0x40014000
 800c658:	40001800 	.word	0x40001800

0800c65c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d001      	beq.n	800c674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e04e      	b.n	800c712 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2202      	movs	r2, #2
 800c678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f042 0201 	orr.w	r2, r2, #1
 800c68a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	4a22      	ldr	r2, [pc, #136]	; (800c71c <HAL_TIM_Base_Start_IT+0xc0>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d022      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c69e:	d01d      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	4a1e      	ldr	r2, [pc, #120]	; (800c720 <HAL_TIM_Base_Start_IT+0xc4>)
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	d018      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a1d      	ldr	r2, [pc, #116]	; (800c724 <HAL_TIM_Base_Start_IT+0xc8>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d013      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a1b      	ldr	r2, [pc, #108]	; (800c728 <HAL_TIM_Base_Start_IT+0xcc>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d00e      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a1a      	ldr	r2, [pc, #104]	; (800c72c <HAL_TIM_Base_Start_IT+0xd0>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d009      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a18      	ldr	r2, [pc, #96]	; (800c730 <HAL_TIM_Base_Start_IT+0xd4>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d004      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0x80>
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	4a17      	ldr	r2, [pc, #92]	; (800c734 <HAL_TIM_Base_Start_IT+0xd8>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d111      	bne.n	800c700 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b06      	cmp	r3, #6
 800c6ec:	d010      	beq.n	800c710 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f042 0201 	orr.w	r2, r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6fe:	e007      	b.n	800c710 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f042 0201 	orr.w	r2, r2, #1
 800c70e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	bc80      	pop	{r7}
 800c71a:	4770      	bx	lr
 800c71c:	40010000 	.word	0x40010000
 800c720:	40000400 	.word	0x40000400
 800c724:	40000800 	.word	0x40000800
 800c728:	40000c00 	.word	0x40000c00
 800c72c:	40010400 	.word	0x40010400
 800c730:	40014000 	.word	0x40014000
 800c734:	40001800 	.word	0x40001800

0800c738 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b082      	sub	sp, #8
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d101      	bne.n	800c74a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	e041      	b.n	800c7ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c750:	b2db      	uxtb	r3, r3
 800c752:	2b00      	cmp	r3, #0
 800c754:	d106      	bne.n	800c764 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f839 	bl	800c7d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	3304      	adds	r3, #4
 800c774:	4619      	mov	r1, r3
 800c776:	4610      	mov	r0, r2
 800c778:	f000 fba8 	bl	800cecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2201      	movs	r2, #1
 800c7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3708      	adds	r7, #8
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}

0800c7d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c7d6:	b480      	push	{r7}
 800c7d8:	b083      	sub	sp, #12
 800c7da:	af00      	add	r7, sp, #0
 800c7dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c7de:	bf00      	nop
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bc80      	pop	{r7}
 800c7e6:	4770      	bx	lr

0800c7e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d109      	bne.n	800c80c <HAL_TIM_PWM_Start+0x24>
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	2b01      	cmp	r3, #1
 800c802:	bf14      	ite	ne
 800c804:	2301      	movne	r3, #1
 800c806:	2300      	moveq	r3, #0
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	e022      	b.n	800c852 <HAL_TIM_PWM_Start+0x6a>
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2b04      	cmp	r3, #4
 800c810:	d109      	bne.n	800c826 <HAL_TIM_PWM_Start+0x3e>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	bf14      	ite	ne
 800c81e:	2301      	movne	r3, #1
 800c820:	2300      	moveq	r3, #0
 800c822:	b2db      	uxtb	r3, r3
 800c824:	e015      	b.n	800c852 <HAL_TIM_PWM_Start+0x6a>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2b08      	cmp	r3, #8
 800c82a:	d109      	bne.n	800c840 <HAL_TIM_PWM_Start+0x58>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b01      	cmp	r3, #1
 800c836:	bf14      	ite	ne
 800c838:	2301      	movne	r3, #1
 800c83a:	2300      	moveq	r3, #0
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	e008      	b.n	800c852 <HAL_TIM_PWM_Start+0x6a>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c846:	b2db      	uxtb	r3, r3
 800c848:	2b01      	cmp	r3, #1
 800c84a:	bf14      	ite	ne
 800c84c:	2301      	movne	r3, #1
 800c84e:	2300      	moveq	r3, #0
 800c850:	b2db      	uxtb	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	d001      	beq.n	800c85a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	e07c      	b.n	800c954 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d104      	bne.n	800c86a <HAL_TIM_PWM_Start+0x82>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c868:	e013      	b.n	800c892 <HAL_TIM_PWM_Start+0xaa>
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d104      	bne.n	800c87a <HAL_TIM_PWM_Start+0x92>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2202      	movs	r2, #2
 800c874:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c878:	e00b      	b.n	800c892 <HAL_TIM_PWM_Start+0xaa>
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	2b08      	cmp	r3, #8
 800c87e:	d104      	bne.n	800c88a <HAL_TIM_PWM_Start+0xa2>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2202      	movs	r2, #2
 800c884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c888:	e003      	b.n	800c892 <HAL_TIM_PWM_Start+0xaa>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2202      	movs	r2, #2
 800c88e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	2201      	movs	r2, #1
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 fdf6 	bl	800d48c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a2d      	ldr	r2, [pc, #180]	; (800c95c <HAL_TIM_PWM_Start+0x174>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d004      	beq.n	800c8b4 <HAL_TIM_PWM_Start+0xcc>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	4a2c      	ldr	r2, [pc, #176]	; (800c960 <HAL_TIM_PWM_Start+0x178>)
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d101      	bne.n	800c8b8 <HAL_TIM_PWM_Start+0xd0>
 800c8b4:	2301      	movs	r3, #1
 800c8b6:	e000      	b.n	800c8ba <HAL_TIM_PWM_Start+0xd2>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d007      	beq.n	800c8ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c8cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a22      	ldr	r2, [pc, #136]	; (800c95c <HAL_TIM_PWM_Start+0x174>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d022      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8e0:	d01d      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a1f      	ldr	r2, [pc, #124]	; (800c964 <HAL_TIM_PWM_Start+0x17c>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d018      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a1d      	ldr	r2, [pc, #116]	; (800c968 <HAL_TIM_PWM_Start+0x180>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d013      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a1c      	ldr	r2, [pc, #112]	; (800c96c <HAL_TIM_PWM_Start+0x184>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d00e      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a16      	ldr	r2, [pc, #88]	; (800c960 <HAL_TIM_PWM_Start+0x178>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d009      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a18      	ldr	r2, [pc, #96]	; (800c970 <HAL_TIM_PWM_Start+0x188>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d004      	beq.n	800c91e <HAL_TIM_PWM_Start+0x136>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a16      	ldr	r2, [pc, #88]	; (800c974 <HAL_TIM_PWM_Start+0x18c>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d111      	bne.n	800c942 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	f003 0307 	and.w	r3, r3, #7
 800c928:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b06      	cmp	r3, #6
 800c92e:	d010      	beq.n	800c952 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f042 0201 	orr.w	r2, r2, #1
 800c93e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c940:	e007      	b.n	800c952 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f042 0201 	orr.w	r2, r2, #1
 800c950:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3710      	adds	r7, #16
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	40010000 	.word	0x40010000
 800c960:	40010400 	.word	0x40010400
 800c964:	40000400 	.word	0x40000400
 800c968:	40000800 	.word	0x40000800
 800c96c:	40000c00 	.word	0x40000c00
 800c970:	40014000 	.word	0x40014000
 800c974:	40001800 	.word	0x40001800

0800c978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	691b      	ldr	r3, [r3, #16]
 800c986:	f003 0302 	and.w	r3, r3, #2
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	d122      	bne.n	800c9d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	68db      	ldr	r3, [r3, #12]
 800c994:	f003 0302 	and.w	r3, r3, #2
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d11b      	bne.n	800c9d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f06f 0202 	mvn.w	r2, #2
 800c9a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	699b      	ldr	r3, [r3, #24]
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d003      	beq.n	800c9c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 fa6b 	bl	800ce96 <HAL_TIM_IC_CaptureCallback>
 800c9c0:	e005      	b.n	800c9ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fa5e 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fa6d 	bl	800cea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 0304 	and.w	r3, r3, #4
 800c9de:	2b04      	cmp	r3, #4
 800c9e0:	d122      	bne.n	800ca28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f003 0304 	and.w	r3, r3, #4
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	d11b      	bne.n	800ca28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f06f 0204 	mvn.w	r2, #4
 800c9f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	699b      	ldr	r3, [r3, #24]
 800ca06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fa41 	bl	800ce96 <HAL_TIM_IC_CaptureCallback>
 800ca14:	e005      	b.n	800ca22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f000 fa34 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 fa43 	bl	800cea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2200      	movs	r2, #0
 800ca26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	691b      	ldr	r3, [r3, #16]
 800ca2e:	f003 0308 	and.w	r3, r3, #8
 800ca32:	2b08      	cmp	r3, #8
 800ca34:	d122      	bne.n	800ca7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	f003 0308 	and.w	r3, r3, #8
 800ca40:	2b08      	cmp	r3, #8
 800ca42:	d11b      	bne.n	800ca7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f06f 0208 	mvn.w	r2, #8
 800ca4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2204      	movs	r2, #4
 800ca52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	69db      	ldr	r3, [r3, #28]
 800ca5a:	f003 0303 	and.w	r3, r3, #3
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d003      	beq.n	800ca6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa17 	bl	800ce96 <HAL_TIM_IC_CaptureCallback>
 800ca68:	e005      	b.n	800ca76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 fa0a 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 fa19 	bl	800cea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	f003 0310 	and.w	r3, r3, #16
 800ca86:	2b10      	cmp	r3, #16
 800ca88:	d122      	bne.n	800cad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	f003 0310 	and.w	r3, r3, #16
 800ca94:	2b10      	cmp	r3, #16
 800ca96:	d11b      	bne.n	800cad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f06f 0210 	mvn.w	r2, #16
 800caa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2208      	movs	r2, #8
 800caa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	69db      	ldr	r3, [r3, #28]
 800caae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d003      	beq.n	800cabe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f9ed 	bl	800ce96 <HAL_TIM_IC_CaptureCallback>
 800cabc:	e005      	b.n	800caca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 f9e0 	bl	800ce84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f000 f9ef 	bl	800cea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d10e      	bne.n	800cafc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	68db      	ldr	r3, [r3, #12]
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	2b01      	cmp	r3, #1
 800caea:	d107      	bne.n	800cafc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f06f 0201 	mvn.w	r2, #1
 800caf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f9bb 	bl	800ce72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	691b      	ldr	r3, [r3, #16]
 800cb02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb06:	2b80      	cmp	r3, #128	; 0x80
 800cb08:	d10e      	bne.n	800cb28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68db      	ldr	r3, [r3, #12]
 800cb10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb14:	2b80      	cmp	r3, #128	; 0x80
 800cb16:	d107      	bne.n	800cb28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fdaa 	bl	800d67c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	691b      	ldr	r3, [r3, #16]
 800cb2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb32:	2b40      	cmp	r3, #64	; 0x40
 800cb34:	d10e      	bne.n	800cb54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb40:	2b40      	cmp	r3, #64	; 0x40
 800cb42:	d107      	bne.n	800cb54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 f9b3 	bl	800ceba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	691b      	ldr	r3, [r3, #16]
 800cb5a:	f003 0320 	and.w	r3, r3, #32
 800cb5e:	2b20      	cmp	r3, #32
 800cb60:	d10e      	bne.n	800cb80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	f003 0320 	and.w	r3, r3, #32
 800cb6c:	2b20      	cmp	r3, #32
 800cb6e:	d107      	bne.n	800cb80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f06f 0220 	mvn.w	r2, #32
 800cb78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f000 fd75 	bl	800d66a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cb80:	bf00      	nop
 800cb82:	3708      	adds	r7, #8
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d101      	bne.n	800cba2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cb9e:	2302      	movs	r3, #2
 800cba0:	e0ac      	b.n	800ccfc <HAL_TIM_PWM_ConfigChannel+0x174>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b0c      	cmp	r3, #12
 800cbae:	f200 809f 	bhi.w	800ccf0 <HAL_TIM_PWM_ConfigChannel+0x168>
 800cbb2:	a201      	add	r2, pc, #4	; (adr r2, 800cbb8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800cbb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb8:	0800cbed 	.word	0x0800cbed
 800cbbc:	0800ccf1 	.word	0x0800ccf1
 800cbc0:	0800ccf1 	.word	0x0800ccf1
 800cbc4:	0800ccf1 	.word	0x0800ccf1
 800cbc8:	0800cc2d 	.word	0x0800cc2d
 800cbcc:	0800ccf1 	.word	0x0800ccf1
 800cbd0:	0800ccf1 	.word	0x0800ccf1
 800cbd4:	0800ccf1 	.word	0x0800ccf1
 800cbd8:	0800cc6f 	.word	0x0800cc6f
 800cbdc:	0800ccf1 	.word	0x0800ccf1
 800cbe0:	0800ccf1 	.word	0x0800ccf1
 800cbe4:	0800ccf1 	.word	0x0800ccf1
 800cbe8:	0800ccaf 	.word	0x0800ccaf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f000 fa08 	bl	800d008 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f042 0208 	orr.w	r2, r2, #8
 800cc06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	699a      	ldr	r2, [r3, #24]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0204 	bic.w	r2, r2, #4
 800cc16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	6999      	ldr	r1, [r3, #24]
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	691a      	ldr	r2, [r3, #16]
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	430a      	orrs	r2, r1
 800cc28:	619a      	str	r2, [r3, #24]
      break;
 800cc2a:	e062      	b.n	800ccf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	68b9      	ldr	r1, [r7, #8]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 fa58 	bl	800d0e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	699a      	ldr	r2, [r3, #24]
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	699a      	ldr	r2, [r3, #24]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6999      	ldr	r1, [r3, #24]
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	691b      	ldr	r3, [r3, #16]
 800cc62:	021a      	lsls	r2, r3, #8
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	430a      	orrs	r2, r1
 800cc6a:	619a      	str	r2, [r3, #24]
      break;
 800cc6c:	e041      	b.n	800ccf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	68b9      	ldr	r1, [r7, #8]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 faab 	bl	800d1d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	69da      	ldr	r2, [r3, #28]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f042 0208 	orr.w	r2, r2, #8
 800cc88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	69da      	ldr	r2, [r3, #28]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f022 0204 	bic.w	r2, r2, #4
 800cc98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	69d9      	ldr	r1, [r3, #28]
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	691a      	ldr	r2, [r3, #16]
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	430a      	orrs	r2, r1
 800ccaa:	61da      	str	r2, [r3, #28]
      break;
 800ccac:	e021      	b.n	800ccf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 faff 	bl	800d2b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	69da      	ldr	r2, [r3, #28]
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ccc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	69da      	ldr	r2, [r3, #28]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ccd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	69d9      	ldr	r1, [r3, #28]
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	021a      	lsls	r2, r3, #8
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	430a      	orrs	r2, r1
 800ccec:	61da      	str	r2, [r3, #28]
      break;
 800ccee:	e000      	b.n	800ccf2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800ccf0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3710      	adds	r7, #16
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d101      	bne.n	800cd1c <HAL_TIM_ConfigClockSource+0x18>
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e0a6      	b.n	800ce6a <HAL_TIM_ConfigClockSource+0x166>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2202      	movs	r2, #2
 800cd28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cd3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2b40      	cmp	r3, #64	; 0x40
 800cd52:	d067      	beq.n	800ce24 <HAL_TIM_ConfigClockSource+0x120>
 800cd54:	2b40      	cmp	r3, #64	; 0x40
 800cd56:	d80b      	bhi.n	800cd70 <HAL_TIM_ConfigClockSource+0x6c>
 800cd58:	2b10      	cmp	r3, #16
 800cd5a:	d073      	beq.n	800ce44 <HAL_TIM_ConfigClockSource+0x140>
 800cd5c:	2b10      	cmp	r3, #16
 800cd5e:	d802      	bhi.n	800cd66 <HAL_TIM_ConfigClockSource+0x62>
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d06f      	beq.n	800ce44 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800cd64:	e078      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd66:	2b20      	cmp	r3, #32
 800cd68:	d06c      	beq.n	800ce44 <HAL_TIM_ConfigClockSource+0x140>
 800cd6a:	2b30      	cmp	r3, #48	; 0x30
 800cd6c:	d06a      	beq.n	800ce44 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800cd6e:	e073      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd70:	2b70      	cmp	r3, #112	; 0x70
 800cd72:	d00d      	beq.n	800cd90 <HAL_TIM_ConfigClockSource+0x8c>
 800cd74:	2b70      	cmp	r3, #112	; 0x70
 800cd76:	d804      	bhi.n	800cd82 <HAL_TIM_ConfigClockSource+0x7e>
 800cd78:	2b50      	cmp	r3, #80	; 0x50
 800cd7a:	d033      	beq.n	800cde4 <HAL_TIM_ConfigClockSource+0xe0>
 800cd7c:	2b60      	cmp	r3, #96	; 0x60
 800cd7e:	d041      	beq.n	800ce04 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800cd80:	e06a      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cd82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd86:	d066      	beq.n	800ce56 <HAL_TIM_ConfigClockSource+0x152>
 800cd88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd8c:	d017      	beq.n	800cdbe <HAL_TIM_ConfigClockSource+0xba>
      break;
 800cd8e:	e063      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	6899      	ldr	r1, [r3, #8]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	68db      	ldr	r3, [r3, #12]
 800cda0:	f000 fb55 	bl	800d44e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800cdb2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	68fa      	ldr	r2, [r7, #12]
 800cdba:	609a      	str	r2, [r3, #8]
      break;
 800cdbc:	e04c      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6818      	ldr	r0, [r3, #0]
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	6899      	ldr	r1, [r3, #8]
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	685a      	ldr	r2, [r3, #4]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	68db      	ldr	r3, [r3, #12]
 800cdce:	f000 fb3e 	bl	800d44e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	689a      	ldr	r2, [r3, #8]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cde0:	609a      	str	r2, [r3, #8]
      break;
 800cde2:	e039      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6818      	ldr	r0, [r3, #0]
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	6859      	ldr	r1, [r3, #4]
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	461a      	mov	r2, r3
 800cdf2:	f000 fab5 	bl	800d360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	2150      	movs	r1, #80	; 0x50
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f000 fb0c 	bl	800d41a <TIM_ITRx_SetConfig>
      break;
 800ce02:	e029      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6818      	ldr	r0, [r3, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	6859      	ldr	r1, [r3, #4]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	68db      	ldr	r3, [r3, #12]
 800ce10:	461a      	mov	r2, r3
 800ce12:	f000 fad3 	bl	800d3bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2160      	movs	r1, #96	; 0x60
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 fafc 	bl	800d41a <TIM_ITRx_SetConfig>
      break;
 800ce22:	e019      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6818      	ldr	r0, [r3, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	6859      	ldr	r1, [r3, #4]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	68db      	ldr	r3, [r3, #12]
 800ce30:	461a      	mov	r2, r3
 800ce32:	f000 fa95 	bl	800d360 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2140      	movs	r1, #64	; 0x40
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 faec 	bl	800d41a <TIM_ITRx_SetConfig>
      break;
 800ce42:	e009      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	4610      	mov	r0, r2
 800ce50:	f000 fae3 	bl	800d41a <TIM_ITRx_SetConfig>
        break;
 800ce54:	e000      	b.n	800ce58 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800ce56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b083      	sub	sp, #12
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ce7a:	bf00      	nop
 800ce7c:	370c      	adds	r7, #12
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bc80      	pop	{r7}
 800ce82:	4770      	bx	lr

0800ce84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b083      	sub	sp, #12
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ce8c:	bf00      	nop
 800ce8e:	370c      	adds	r7, #12
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bc80      	pop	{r7}
 800ce94:	4770      	bx	lr

0800ce96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ce9e:	bf00      	nop
 800cea0:	370c      	adds	r7, #12
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bc80      	pop	{r7}
 800cea6:	4770      	bx	lr

0800cea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bc80      	pop	{r7}
 800ceb8:	4770      	bx	lr

0800ceba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ceba:	b480      	push	{r7}
 800cebc:	b083      	sub	sp, #12
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cec2:	bf00      	nop
 800cec4:	370c      	adds	r7, #12
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bc80      	pop	{r7}
 800ceca:	4770      	bx	lr

0800cecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4a3f      	ldr	r2, [pc, #252]	; (800cfdc <TIM_Base_SetConfig+0x110>)
 800cee0:	4293      	cmp	r3, r2
 800cee2:	d013      	beq.n	800cf0c <TIM_Base_SetConfig+0x40>
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceea:	d00f      	beq.n	800cf0c <TIM_Base_SetConfig+0x40>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	4a3c      	ldr	r2, [pc, #240]	; (800cfe0 <TIM_Base_SetConfig+0x114>)
 800cef0:	4293      	cmp	r3, r2
 800cef2:	d00b      	beq.n	800cf0c <TIM_Base_SetConfig+0x40>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	4a3b      	ldr	r2, [pc, #236]	; (800cfe4 <TIM_Base_SetConfig+0x118>)
 800cef8:	4293      	cmp	r3, r2
 800cefa:	d007      	beq.n	800cf0c <TIM_Base_SetConfig+0x40>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	4a3a      	ldr	r2, [pc, #232]	; (800cfe8 <TIM_Base_SetConfig+0x11c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d003      	beq.n	800cf0c <TIM_Base_SetConfig+0x40>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a39      	ldr	r2, [pc, #228]	; (800cfec <TIM_Base_SetConfig+0x120>)
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d108      	bne.n	800cf1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	4a2e      	ldr	r2, [pc, #184]	; (800cfdc <TIM_Base_SetConfig+0x110>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d02b      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf2c:	d027      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4a2b      	ldr	r2, [pc, #172]	; (800cfe0 <TIM_Base_SetConfig+0x114>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d023      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	4a2a      	ldr	r2, [pc, #168]	; (800cfe4 <TIM_Base_SetConfig+0x118>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d01f      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	4a29      	ldr	r2, [pc, #164]	; (800cfe8 <TIM_Base_SetConfig+0x11c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d01b      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	4a28      	ldr	r2, [pc, #160]	; (800cfec <TIM_Base_SetConfig+0x120>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d017      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	4a27      	ldr	r2, [pc, #156]	; (800cff0 <TIM_Base_SetConfig+0x124>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d013      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	4a26      	ldr	r2, [pc, #152]	; (800cff4 <TIM_Base_SetConfig+0x128>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d00f      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	4a25      	ldr	r2, [pc, #148]	; (800cff8 <TIM_Base_SetConfig+0x12c>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d00b      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4a24      	ldr	r2, [pc, #144]	; (800cffc <TIM_Base_SetConfig+0x130>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d007      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	4a23      	ldr	r2, [pc, #140]	; (800d000 <TIM_Base_SetConfig+0x134>)
 800cf72:	4293      	cmp	r3, r2
 800cf74:	d003      	beq.n	800cf7e <TIM_Base_SetConfig+0xb2>
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	4a22      	ldr	r2, [pc, #136]	; (800d004 <TIM_Base_SetConfig+0x138>)
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d108      	bne.n	800cf90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	68db      	ldr	r3, [r3, #12]
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	695b      	ldr	r3, [r3, #20]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	4a09      	ldr	r2, [pc, #36]	; (800cfdc <TIM_Base_SetConfig+0x110>)
 800cfb8:	4293      	cmp	r3, r2
 800cfba:	d003      	beq.n	800cfc4 <TIM_Base_SetConfig+0xf8>
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	4a0b      	ldr	r2, [pc, #44]	; (800cfec <TIM_Base_SetConfig+0x120>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d103      	bne.n	800cfcc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	691a      	ldr	r2, [r3, #16]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	615a      	str	r2, [r3, #20]
}
 800cfd2:	bf00      	nop
 800cfd4:	3714      	adds	r7, #20
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bc80      	pop	{r7}
 800cfda:	4770      	bx	lr
 800cfdc:	40010000 	.word	0x40010000
 800cfe0:	40000400 	.word	0x40000400
 800cfe4:	40000800 	.word	0x40000800
 800cfe8:	40000c00 	.word	0x40000c00
 800cfec:	40010400 	.word	0x40010400
 800cff0:	40014000 	.word	0x40014000
 800cff4:	40014400 	.word	0x40014400
 800cff8:	40014800 	.word	0x40014800
 800cffc:	40001800 	.word	0x40001800
 800d000:	40001c00 	.word	0x40001c00
 800d004:	40002000 	.word	0x40002000

0800d008 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d008:	b480      	push	{r7}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a1b      	ldr	r3, [r3, #32]
 800d016:	f023 0201 	bic.w	r2, r3, #1
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a1b      	ldr	r3, [r3, #32]
 800d022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	685b      	ldr	r3, [r3, #4]
 800d028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	f023 0303 	bic.w	r3, r3, #3
 800d03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	68fa      	ldr	r2, [r7, #12]
 800d046:	4313      	orrs	r3, r2
 800d048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d04a:	697b      	ldr	r3, [r7, #20]
 800d04c:	f023 0302 	bic.w	r3, r3, #2
 800d050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	689b      	ldr	r3, [r3, #8]
 800d056:	697a      	ldr	r2, [r7, #20]
 800d058:	4313      	orrs	r3, r2
 800d05a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4a20      	ldr	r2, [pc, #128]	; (800d0e0 <TIM_OC1_SetConfig+0xd8>)
 800d060:	4293      	cmp	r3, r2
 800d062:	d003      	beq.n	800d06c <TIM_OC1_SetConfig+0x64>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	4a1f      	ldr	r2, [pc, #124]	; (800d0e4 <TIM_OC1_SetConfig+0xdc>)
 800d068:	4293      	cmp	r3, r2
 800d06a:	d10c      	bne.n	800d086 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f023 0308 	bic.w	r3, r3, #8
 800d072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	f023 0304 	bic.w	r3, r3, #4
 800d084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	4a15      	ldr	r2, [pc, #84]	; (800d0e0 <TIM_OC1_SetConfig+0xd8>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d003      	beq.n	800d096 <TIM_OC1_SetConfig+0x8e>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	4a14      	ldr	r2, [pc, #80]	; (800d0e4 <TIM_OC1_SetConfig+0xdc>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d111      	bne.n	800d0ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d09e:	693b      	ldr	r3, [r7, #16]
 800d0a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	695b      	ldr	r3, [r3, #20]
 800d0aa:	693a      	ldr	r2, [r7, #16]
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	693a      	ldr	r2, [r7, #16]
 800d0b6:	4313      	orrs	r3, r2
 800d0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	693a      	ldr	r2, [r7, #16]
 800d0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	685a      	ldr	r2, [r3, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	621a      	str	r2, [r3, #32]
}
 800d0d4:	bf00      	nop
 800d0d6:	371c      	adds	r7, #28
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bc80      	pop	{r7}
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	40010000 	.word	0x40010000
 800d0e4:	40010400 	.word	0x40010400

0800d0e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b087      	sub	sp, #28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a1b      	ldr	r3, [r3, #32]
 800d0f6:	f023 0210 	bic.w	r2, r3, #16
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6a1b      	ldr	r3, [r3, #32]
 800d102:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	685b      	ldr	r3, [r3, #4]
 800d108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	699b      	ldr	r3, [r3, #24]
 800d10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d11e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	021b      	lsls	r3, r3, #8
 800d126:	68fa      	ldr	r2, [r7, #12]
 800d128:	4313      	orrs	r3, r2
 800d12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	f023 0320 	bic.w	r3, r3, #32
 800d132:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	011b      	lsls	r3, r3, #4
 800d13a:	697a      	ldr	r2, [r7, #20]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	4a21      	ldr	r2, [pc, #132]	; (800d1c8 <TIM_OC2_SetConfig+0xe0>)
 800d144:	4293      	cmp	r3, r2
 800d146:	d003      	beq.n	800d150 <TIM_OC2_SetConfig+0x68>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a20      	ldr	r2, [pc, #128]	; (800d1cc <TIM_OC2_SetConfig+0xe4>)
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d10d      	bne.n	800d16c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d156:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	011b      	lsls	r3, r3, #4
 800d15e:	697a      	ldr	r2, [r7, #20]
 800d160:	4313      	orrs	r3, r2
 800d162:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d16a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4a16      	ldr	r2, [pc, #88]	; (800d1c8 <TIM_OC2_SetConfig+0xe0>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d003      	beq.n	800d17c <TIM_OC2_SetConfig+0x94>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	4a15      	ldr	r2, [pc, #84]	; (800d1cc <TIM_OC2_SetConfig+0xe4>)
 800d178:	4293      	cmp	r3, r2
 800d17a:	d113      	bne.n	800d1a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d182:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d18a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	695b      	ldr	r3, [r3, #20]
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	693a      	ldr	r2, [r7, #16]
 800d194:	4313      	orrs	r3, r2
 800d196:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	699b      	ldr	r3, [r3, #24]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	693a      	ldr	r2, [r7, #16]
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	693a      	ldr	r2, [r7, #16]
 800d1a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	68fa      	ldr	r2, [r7, #12]
 800d1ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	685a      	ldr	r2, [r3, #4]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	697a      	ldr	r2, [r7, #20]
 800d1bc:	621a      	str	r2, [r3, #32]
}
 800d1be:	bf00      	nop
 800d1c0:	371c      	adds	r7, #28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bc80      	pop	{r7}
 800d1c6:	4770      	bx	lr
 800d1c8:	40010000 	.word	0x40010000
 800d1cc:	40010400 	.word	0x40010400

0800d1d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a1b      	ldr	r3, [r3, #32]
 800d1de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6a1b      	ldr	r3, [r3, #32]
 800d1ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	69db      	ldr	r3, [r3, #28]
 800d1f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f023 0303 	bic.w	r3, r3, #3
 800d206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	689b      	ldr	r3, [r3, #8]
 800d21e:	021b      	lsls	r3, r3, #8
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	4313      	orrs	r3, r2
 800d224:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	4a21      	ldr	r2, [pc, #132]	; (800d2b0 <TIM_OC3_SetConfig+0xe0>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d003      	beq.n	800d236 <TIM_OC3_SetConfig+0x66>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	4a20      	ldr	r2, [pc, #128]	; (800d2b4 <TIM_OC3_SetConfig+0xe4>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d10d      	bne.n	800d252 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d236:	697b      	ldr	r3, [r7, #20]
 800d238:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d23c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	68db      	ldr	r3, [r3, #12]
 800d242:	021b      	lsls	r3, r3, #8
 800d244:	697a      	ldr	r2, [r7, #20]
 800d246:	4313      	orrs	r3, r2
 800d248:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d250:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a16      	ldr	r2, [pc, #88]	; (800d2b0 <TIM_OC3_SetConfig+0xe0>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d003      	beq.n	800d262 <TIM_OC3_SetConfig+0x92>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a15      	ldr	r2, [pc, #84]	; (800d2b4 <TIM_OC3_SetConfig+0xe4>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d113      	bne.n	800d28a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	011b      	lsls	r3, r3, #4
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	699b      	ldr	r3, [r3, #24]
 800d282:	011b      	lsls	r3, r3, #4
 800d284:	693a      	ldr	r2, [r7, #16]
 800d286:	4313      	orrs	r3, r2
 800d288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	685a      	ldr	r2, [r3, #4]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	621a      	str	r2, [r3, #32]
}
 800d2a4:	bf00      	nop
 800d2a6:	371c      	adds	r7, #28
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bc80      	pop	{r7}
 800d2ac:	4770      	bx	lr
 800d2ae:	bf00      	nop
 800d2b0:	40010000 	.word	0x40010000
 800d2b4:	40010400 	.word	0x40010400

0800d2b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a1b      	ldr	r3, [r3, #32]
 800d2c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a1b      	ldr	r3, [r3, #32]
 800d2d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d2ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	021b      	lsls	r3, r3, #8
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	4313      	orrs	r3, r2
 800d2fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d2fc:	693b      	ldr	r3, [r7, #16]
 800d2fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d302:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	689b      	ldr	r3, [r3, #8]
 800d308:	031b      	lsls	r3, r3, #12
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a11      	ldr	r2, [pc, #68]	; (800d358 <TIM_OC4_SetConfig+0xa0>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d003      	beq.n	800d320 <TIM_OC4_SetConfig+0x68>
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	4a10      	ldr	r2, [pc, #64]	; (800d35c <TIM_OC4_SetConfig+0xa4>)
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d109      	bne.n	800d334 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	695b      	ldr	r3, [r3, #20]
 800d32c:	019b      	lsls	r3, r3, #6
 800d32e:	697a      	ldr	r2, [r7, #20]
 800d330:	4313      	orrs	r3, r2
 800d332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	697a      	ldr	r2, [r7, #20]
 800d338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	685a      	ldr	r2, [r3, #4]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	693a      	ldr	r2, [r7, #16]
 800d34c:	621a      	str	r2, [r3, #32]
}
 800d34e:	bf00      	nop
 800d350:	371c      	adds	r7, #28
 800d352:	46bd      	mov	sp, r7
 800d354:	bc80      	pop	{r7}
 800d356:	4770      	bx	lr
 800d358:	40010000 	.word	0x40010000
 800d35c:	40010400 	.word	0x40010400

0800d360 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d360:	b480      	push	{r7}
 800d362:	b087      	sub	sp, #28
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	6a1b      	ldr	r3, [r3, #32]
 800d370:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6a1b      	ldr	r3, [r3, #32]
 800d376:	f023 0201 	bic.w	r2, r3, #1
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	699b      	ldr	r3, [r3, #24]
 800d382:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d38a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	011b      	lsls	r3, r3, #4
 800d390:	693a      	ldr	r2, [r7, #16]
 800d392:	4313      	orrs	r3, r2
 800d394:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	f023 030a 	bic.w	r3, r3, #10
 800d39c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d39e:	697a      	ldr	r2, [r7, #20]
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	693a      	ldr	r2, [r7, #16]
 800d3aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	621a      	str	r2, [r3, #32]
}
 800d3b2:	bf00      	nop
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bc80      	pop	{r7}
 800d3ba:	4770      	bx	lr

0800d3bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b087      	sub	sp, #28
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	60f8      	str	r0, [r7, #12]
 800d3c4:	60b9      	str	r1, [r7, #8]
 800d3c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	6a1b      	ldr	r3, [r3, #32]
 800d3cc:	f023 0210 	bic.w	r2, r3, #16
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6a1b      	ldr	r3, [r3, #32]
 800d3de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d3e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	031b      	lsls	r3, r3, #12
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	4313      	orrs	r3, r2
 800d3f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d3f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	011b      	lsls	r3, r3, #4
 800d3fe:	693a      	ldr	r2, [r7, #16]
 800d400:	4313      	orrs	r3, r2
 800d402:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	697a      	ldr	r2, [r7, #20]
 800d408:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	621a      	str	r2, [r3, #32]
}
 800d410:	bf00      	nop
 800d412:	371c      	adds	r7, #28
 800d414:	46bd      	mov	sp, r7
 800d416:	bc80      	pop	{r7}
 800d418:	4770      	bx	lr

0800d41a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d41a:	b480      	push	{r7}
 800d41c:	b085      	sub	sp, #20
 800d41e:	af00      	add	r7, sp, #0
 800d420:	6078      	str	r0, [r7, #4]
 800d422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	689b      	ldr	r3, [r3, #8]
 800d428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d432:	683a      	ldr	r2, [r7, #0]
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4313      	orrs	r3, r2
 800d438:	f043 0307 	orr.w	r3, r3, #7
 800d43c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	68fa      	ldr	r2, [r7, #12]
 800d442:	609a      	str	r2, [r3, #8]
}
 800d444:	bf00      	nop
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	bc80      	pop	{r7}
 800d44c:	4770      	bx	lr

0800d44e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d44e:	b480      	push	{r7}
 800d450:	b087      	sub	sp, #28
 800d452:	af00      	add	r7, sp, #0
 800d454:	60f8      	str	r0, [r7, #12]
 800d456:	60b9      	str	r1, [r7, #8]
 800d458:	607a      	str	r2, [r7, #4]
 800d45a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	689b      	ldr	r3, [r3, #8]
 800d460:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d468:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	021a      	lsls	r2, r3, #8
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	431a      	orrs	r2, r3
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	4313      	orrs	r3, r2
 800d476:	697a      	ldr	r2, [r7, #20]
 800d478:	4313      	orrs	r3, r2
 800d47a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	697a      	ldr	r2, [r7, #20]
 800d480:	609a      	str	r2, [r3, #8]
}
 800d482:	bf00      	nop
 800d484:	371c      	adds	r7, #28
 800d486:	46bd      	mov	sp, r7
 800d488:	bc80      	pop	{r7}
 800d48a:	4770      	bx	lr

0800d48c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d48c:	b480      	push	{r7}
 800d48e:	b087      	sub	sp, #28
 800d490:	af00      	add	r7, sp, #0
 800d492:	60f8      	str	r0, [r7, #12]
 800d494:	60b9      	str	r1, [r7, #8]
 800d496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f003 031f 	and.w	r3, r3, #31
 800d49e:	2201      	movs	r2, #1
 800d4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	6a1a      	ldr	r2, [r3, #32]
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	43db      	mvns	r3, r3
 800d4ae:	401a      	ands	r2, r3
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6a1a      	ldr	r2, [r3, #32]
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	f003 031f 	and.w	r3, r3, #31
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4c4:	431a      	orrs	r2, r3
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	621a      	str	r2, [r3, #32]
}
 800d4ca:	bf00      	nop
 800d4cc:	371c      	adds	r7, #28
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bc80      	pop	{r7}
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d101      	bne.n	800d4ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4e8:	2302      	movs	r3, #2
 800d4ea:	e05a      	b.n	800d5a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	4a20      	ldr	r2, [pc, #128]	; (800d5ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800d52c:	4293      	cmp	r3, r2
 800d52e:	d022      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d538:	d01d      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	4a1c      	ldr	r2, [pc, #112]	; (800d5b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d540:	4293      	cmp	r3, r2
 800d542:	d018      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a1a      	ldr	r2, [pc, #104]	; (800d5b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d013      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	4a19      	ldr	r2, [pc, #100]	; (800d5b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d554:	4293      	cmp	r3, r2
 800d556:	d00e      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4a17      	ldr	r2, [pc, #92]	; (800d5bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d55e:	4293      	cmp	r3, r2
 800d560:	d009      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4a16      	ldr	r2, [pc, #88]	; (800d5c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d568:	4293      	cmp	r3, r2
 800d56a:	d004      	beq.n	800d576 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4a14      	ldr	r2, [pc, #80]	; (800d5c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d10c      	bne.n	800d590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d57c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	685b      	ldr	r3, [r3, #4]
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	4313      	orrs	r3, r2
 800d586:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68ba      	ldr	r2, [r7, #8]
 800d58e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d5a0:	2300      	movs	r3, #0
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3714      	adds	r7, #20
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bc80      	pop	{r7}
 800d5aa:	4770      	bx	lr
 800d5ac:	40010000 	.word	0x40010000
 800d5b0:	40000400 	.word	0x40000400
 800d5b4:	40000800 	.word	0x40000800
 800d5b8:	40000c00 	.word	0x40000c00
 800d5bc:	40010400 	.word	0x40010400
 800d5c0:	40014000 	.word	0x40014000
 800d5c4:	40001800 	.word	0x40001800

0800d5c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b085      	sub	sp, #20
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d5dc:	2b01      	cmp	r3, #1
 800d5de:	d101      	bne.n	800d5e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d5e0:	2302      	movs	r3, #2
 800d5e2:	e03d      	b.n	800d660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	68db      	ldr	r3, [r3, #12]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	689b      	ldr	r3, [r3, #8]
 800d604:	4313      	orrs	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	4313      	orrs	r3, r2
 800d614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4313      	orrs	r3, r2
 800d622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	691b      	ldr	r3, [r3, #16]
 800d62e:	4313      	orrs	r3, r2
 800d630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	695b      	ldr	r3, [r3, #20]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	69db      	ldr	r3, [r3, #28]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2200      	movs	r2, #0
 800d65a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d65e:	2300      	movs	r3, #0
}
 800d660:	4618      	mov	r0, r3
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	bc80      	pop	{r7}
 800d668:	4770      	bx	lr

0800d66a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d66a:	b480      	push	{r7}
 800d66c:	b083      	sub	sp, #12
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d672:	bf00      	nop
 800d674:	370c      	adds	r7, #12
 800d676:	46bd      	mov	sp, r7
 800d678:	bc80      	pop	{r7}
 800d67a:	4770      	bx	lr

0800d67c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	bc80      	pop	{r7}
 800d68c:	4770      	bx	lr

0800d68e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d68e:	b580      	push	{r7, lr}
 800d690:	b082      	sub	sp, #8
 800d692:	af00      	add	r7, sp, #0
 800d694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d101      	bne.n	800d6a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e03f      	b.n	800d720 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d106      	bne.n	800d6ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f7fb f9c7 	bl	8008a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2224      	movs	r2, #36	; 0x24
 800d6be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	68da      	ldr	r2, [r3, #12]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d6d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fb8c 	bl	800ddf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	691a      	ldr	r2, [r3, #16]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d6e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	695a      	ldr	r2, [r3, #20]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d6f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	68da      	ldr	r2, [r3, #12]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d706:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2220      	movs	r2, #32
 800d712:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2220      	movs	r2, #32
 800d71a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b08a      	sub	sp, #40	; 0x28
 800d72c:	af02      	add	r7, sp, #8
 800d72e:	60f8      	str	r0, [r7, #12]
 800d730:	60b9      	str	r1, [r7, #8]
 800d732:	603b      	str	r3, [r7, #0]
 800d734:	4613      	mov	r3, r2
 800d736:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800d738:	2300      	movs	r3, #0
 800d73a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d742:	b2db      	uxtb	r3, r3
 800d744:	2b20      	cmp	r3, #32
 800d746:	d17c      	bne.n	800d842 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d002      	beq.n	800d754 <HAL_UART_Transmit+0x2c>
 800d74e:	88fb      	ldrh	r3, [r7, #6]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d101      	bne.n	800d758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e075      	b.n	800d844 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d75e:	2b01      	cmp	r3, #1
 800d760:	d101      	bne.n	800d766 <HAL_UART_Transmit+0x3e>
 800d762:	2302      	movs	r3, #2
 800d764:	e06e      	b.n	800d844 <HAL_UART_Transmit+0x11c>
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2201      	movs	r2, #1
 800d76a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	2200      	movs	r2, #0
 800d772:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2221      	movs	r2, #33	; 0x21
 800d778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800d77c:	f7fb fa42 	bl	8008c04 <HAL_GetTick>
 800d780:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	88fa      	ldrh	r2, [r7, #6]
 800d786:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	88fa      	ldrh	r2, [r7, #6]
 800d78c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	689b      	ldr	r3, [r3, #8]
 800d792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d796:	d108      	bne.n	800d7aa <HAL_UART_Transmit+0x82>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	691b      	ldr	r3, [r3, #16]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d104      	bne.n	800d7aa <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	61bb      	str	r3, [r7, #24]
 800d7a8:	e003      	b.n	800d7b2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800d7ba:	e02a      	b.n	800d812 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	9300      	str	r3, [sp, #0]
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2180      	movs	r1, #128	; 0x80
 800d7c6:	68f8      	ldr	r0, [r7, #12]
 800d7c8:	f000 f9af 	bl	800db2a <UART_WaitOnFlagUntilTimeout>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d001      	beq.n	800d7d6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e036      	b.n	800d844 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d10b      	bne.n	800d7f4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d7dc:	69bb      	ldr	r3, [r7, #24]
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	461a      	mov	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d7ea:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800d7ec:	69bb      	ldr	r3, [r7, #24]
 800d7ee:	3302      	adds	r3, #2
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	e007      	b.n	800d804 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800d7f4:	69fb      	ldr	r3, [r7, #28]
 800d7f6:	781a      	ldrb	r2, [r3, #0]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	3301      	adds	r3, #1
 800d802:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d808:	b29b      	uxth	r3, r3
 800d80a:	3b01      	subs	r3, #1
 800d80c:	b29a      	uxth	r2, r3
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d816:	b29b      	uxth	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d1cf      	bne.n	800d7bc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	697b      	ldr	r3, [r7, #20]
 800d822:	2200      	movs	r2, #0
 800d824:	2140      	movs	r1, #64	; 0x40
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 f97f 	bl	800db2a <UART_WaitOnFlagUntilTimeout>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800d832:	2303      	movs	r3, #3
 800d834:	e006      	b.n	800d844 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2220      	movs	r2, #32
 800d83a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800d83e:	2300      	movs	r3, #0
 800d840:	e000      	b.n	800d844 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d842:	2302      	movs	r3, #2
  }
}
 800d844:	4618      	mov	r0, r3
 800d846:	3720      	adds	r7, #32
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b085      	sub	sp, #20
 800d850:	af00      	add	r7, sp, #0
 800d852:	60f8      	str	r0, [r7, #12]
 800d854:	60b9      	str	r1, [r7, #8]
 800d856:	4613      	mov	r3, r2
 800d858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b20      	cmp	r3, #32
 800d864:	d140      	bne.n	800d8e8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <HAL_UART_Receive_IT+0x26>
 800d86c:	88fb      	ldrh	r3, [r7, #6]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d101      	bne.n	800d876 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d872:	2301      	movs	r3, #1
 800d874:	e039      	b.n	800d8ea <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d101      	bne.n	800d884 <HAL_UART_Receive_IT+0x38>
 800d880:	2302      	movs	r3, #2
 800d882:	e032      	b.n	800d8ea <HAL_UART_Receive_IT+0x9e>
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	2201      	movs	r2, #1
 800d888:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	68ba      	ldr	r2, [r7, #8]
 800d890:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	88fa      	ldrh	r2, [r7, #6]
 800d896:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	88fa      	ldrh	r2, [r7, #6]
 800d89c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2222      	movs	r2, #34	; 0x22
 800d8a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68da      	ldr	r2, [r3, #12]
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d8c2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	695a      	ldr	r2, [r3, #20]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f042 0201 	orr.w	r2, r2, #1
 800d8d2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	68da      	ldr	r2, [r3, #12]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f042 0220 	orr.w	r2, r2, #32
 800d8e2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	e000      	b.n	800d8ea <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800d8e8:	2302      	movs	r3, #2
  }
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	3714      	adds	r7, #20
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bc80      	pop	{r7}
 800d8f2:	4770      	bx	lr

0800d8f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b088      	sub	sp, #32
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	68db      	ldr	r3, [r3, #12]
 800d90a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	695b      	ldr	r3, [r3, #20]
 800d912:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d914:	2300      	movs	r3, #0
 800d916:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d918:	2300      	movs	r3, #0
 800d91a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	f003 030f 	and.w	r3, r3, #15
 800d922:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10d      	bne.n	800d946 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	f003 0320 	and.w	r3, r3, #32
 800d930:	2b00      	cmp	r3, #0
 800d932:	d008      	beq.n	800d946 <HAL_UART_IRQHandler+0x52>
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	f003 0320 	and.w	r3, r3, #32
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d003      	beq.n	800d946 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f9d5 	bl	800dcee <UART_Receive_IT>
      return;
 800d944:	e0d1      	b.n	800daea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	f000 80b0 	beq.w	800daae <HAL_UART_IRQHandler+0x1ba>
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	2b00      	cmp	r3, #0
 800d956:	d105      	bne.n	800d964 <HAL_UART_IRQHandler+0x70>
 800d958:	69bb      	ldr	r3, [r7, #24]
 800d95a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d95e:	2b00      	cmp	r3, #0
 800d960:	f000 80a5 	beq.w	800daae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	f003 0301 	and.w	r3, r3, #1
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d00a      	beq.n	800d984 <HAL_UART_IRQHandler+0x90>
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d974:	2b00      	cmp	r3, #0
 800d976:	d005      	beq.n	800d984 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d97c:	f043 0201 	orr.w	r2, r3, #1
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	f003 0304 	and.w	r3, r3, #4
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <HAL_UART_IRQHandler+0xb0>
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	2b00      	cmp	r3, #0
 800d996:	d005      	beq.n	800d9a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99c:	f043 0202 	orr.w	r2, r3, #2
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	f003 0302 	and.w	r3, r3, #2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d00a      	beq.n	800d9c4 <HAL_UART_IRQHandler+0xd0>
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	f003 0301 	and.w	r3, r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9bc:	f043 0204 	orr.w	r2, r3, #4
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	f003 0308 	and.w	r3, r3, #8
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d00f      	beq.n	800d9ee <HAL_UART_IRQHandler+0xfa>
 800d9ce:	69bb      	ldr	r3, [r7, #24]
 800d9d0:	f003 0320 	and.w	r3, r3, #32
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d104      	bne.n	800d9e2 <HAL_UART_IRQHandler+0xee>
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f003 0301 	and.w	r3, r3, #1
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d005      	beq.n	800d9ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e6:	f043 0208 	orr.w	r2, r3, #8
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d078      	beq.n	800dae8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	f003 0320 	and.w	r3, r3, #32
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d007      	beq.n	800da10 <HAL_UART_IRQHandler+0x11c>
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	f003 0320 	and.w	r3, r3, #32
 800da06:	2b00      	cmp	r3, #0
 800da08:	d002      	beq.n	800da10 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f96f 	bl	800dcee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	695b      	ldr	r3, [r3, #20]
 800da16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da1a:	2b40      	cmp	r3, #64	; 0x40
 800da1c:	bf0c      	ite	eq
 800da1e:	2301      	moveq	r3, #1
 800da20:	2300      	movne	r3, #0
 800da22:	b2db      	uxtb	r3, r3
 800da24:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2a:	f003 0308 	and.w	r3, r3, #8
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d102      	bne.n	800da38 <HAL_UART_IRQHandler+0x144>
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d031      	beq.n	800da9c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f8c0 	bl	800dbbe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	695b      	ldr	r3, [r3, #20]
 800da44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da48:	2b40      	cmp	r3, #64	; 0x40
 800da4a:	d123      	bne.n	800da94 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	695a      	ldr	r2, [r3, #20]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da5a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da60:	2b00      	cmp	r3, #0
 800da62:	d013      	beq.n	800da8c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	4a21      	ldr	r2, [pc, #132]	; (800daf0 <HAL_UART_IRQHandler+0x1fc>)
 800da6a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da70:	4618      	mov	r0, r3
 800da72:	f7fc fd65 	bl	800a540 <HAL_DMA_Abort_IT>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d016      	beq.n	800daaa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800da86:	4610      	mov	r0, r2
 800da88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da8a:	e00e      	b.n	800daaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f843 	bl	800db18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da92:	e00a      	b.n	800daaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f000 f83f 	bl	800db18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da9a:	e006      	b.n	800daaa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800da9c:	6878      	ldr	r0, [r7, #4]
 800da9e:	f000 f83b 	bl	800db18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800daa8:	e01e      	b.n	800dae8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daaa:	bf00      	nop
    return;
 800daac:	e01c      	b.n	800dae8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d008      	beq.n	800daca <HAL_UART_IRQHandler+0x1d6>
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 f8ac 	bl	800dc20 <UART_Transmit_IT>
    return;
 800dac8:	e00f      	b.n	800daea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d00a      	beq.n	800daea <HAL_UART_IRQHandler+0x1f6>
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d005      	beq.n	800daea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 f8ed 	bl	800dcbe <UART_EndTransmit_IT>
    return;
 800dae4:	bf00      	nop
 800dae6:	e000      	b.n	800daea <HAL_UART_IRQHandler+0x1f6>
    return;
 800dae8:	bf00      	nop
  }
}
 800daea:	3720      	adds	r7, #32
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	0800dbf9 	.word	0x0800dbf9

0800daf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800dafc:	bf00      	nop
 800dafe:	370c      	adds	r7, #12
 800db00:	46bd      	mov	sp, r7
 800db02:	bc80      	pop	{r7}
 800db04:	4770      	bx	lr

0800db06 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db06:	b480      	push	{r7}
 800db08:	b083      	sub	sp, #12
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db0e:	bf00      	nop
 800db10:	370c      	adds	r7, #12
 800db12:	46bd      	mov	sp, r7
 800db14:	bc80      	pop	{r7}
 800db16:	4770      	bx	lr

0800db18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	bc80      	pop	{r7}
 800db28:	4770      	bx	lr

0800db2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b084      	sub	sp, #16
 800db2e:	af00      	add	r7, sp, #0
 800db30:	60f8      	str	r0, [r7, #12]
 800db32:	60b9      	str	r1, [r7, #8]
 800db34:	603b      	str	r3, [r7, #0]
 800db36:	4613      	mov	r3, r2
 800db38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db3a:	e02c      	b.n	800db96 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db3c:	69bb      	ldr	r3, [r7, #24]
 800db3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db42:	d028      	beq.n	800db96 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800db44:	69bb      	ldr	r3, [r7, #24]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d007      	beq.n	800db5a <UART_WaitOnFlagUntilTimeout+0x30>
 800db4a:	f7fb f85b 	bl	8008c04 <HAL_GetTick>
 800db4e:	4602      	mov	r2, r0
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	1ad3      	subs	r3, r2, r3
 800db54:	69ba      	ldr	r2, [r7, #24]
 800db56:	429a      	cmp	r2, r3
 800db58:	d21d      	bcs.n	800db96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	68da      	ldr	r2, [r3, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800db68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	695a      	ldr	r2, [r3, #20]
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f022 0201 	bic.w	r2, r2, #1
 800db78:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2220      	movs	r2, #32
 800db7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2220      	movs	r2, #32
 800db86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	2200      	movs	r2, #0
 800db8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800db92:	2303      	movs	r3, #3
 800db94:	e00f      	b.n	800dbb6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	4013      	ands	r3, r2
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	bf0c      	ite	eq
 800dba6:	2301      	moveq	r3, #1
 800dba8:	2300      	movne	r3, #0
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	461a      	mov	r2, r3
 800dbae:	79fb      	ldrb	r3, [r7, #7]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d0c3      	beq.n	800db3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3710      	adds	r7, #16
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}

0800dbbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	b083      	sub	sp, #12
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	68da      	ldr	r2, [r3, #12]
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dbd4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	695a      	ldr	r2, [r3, #20]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f022 0201 	bic.w	r2, r2, #1
 800dbe4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800dbee:	bf00      	nop
 800dbf0:	370c      	adds	r7, #12
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bc80      	pop	{r7}
 800dbf6:	4770      	bx	lr

0800dbf8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7ff ff80 	bl	800db18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc18:	bf00      	nop
 800dc1a:	3710      	adds	r7, #16
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	bd80      	pop	{r7, pc}

0800dc20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	2b21      	cmp	r3, #33	; 0x21
 800dc32:	d13e      	bne.n	800dcb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	689b      	ldr	r3, [r3, #8]
 800dc38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc3c:	d114      	bne.n	800dc68 <UART_Transmit_IT+0x48>
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	691b      	ldr	r3, [r3, #16]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d110      	bne.n	800dc68 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	6a1b      	ldr	r3, [r3, #32]
 800dc4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	461a      	mov	r2, r3
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6a1b      	ldr	r3, [r3, #32]
 800dc60:	1c9a      	adds	r2, r3, #2
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	621a      	str	r2, [r3, #32]
 800dc66:	e008      	b.n	800dc7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6a1b      	ldr	r3, [r3, #32]
 800dc6c:	1c59      	adds	r1, r3, #1
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	6211      	str	r1, [r2, #32]
 800dc72:	781a      	ldrb	r2, [r3, #0]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	3b01      	subs	r3, #1
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	687a      	ldr	r2, [r7, #4]
 800dc86:	4619      	mov	r1, r3
 800dc88:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10f      	bne.n	800dcae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	68da      	ldr	r2, [r3, #12]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68da      	ldr	r2, [r3, #12]
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dcac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	e000      	b.n	800dcb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dcb2:	2302      	movs	r3, #2
  }
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	3714      	adds	r7, #20
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	bc80      	pop	{r7}
 800dcbc:	4770      	bx	lr

0800dcbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b082      	sub	sp, #8
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	68da      	ldr	r2, [r3, #12]
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f7ff ff08 	bl	800daf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dce4:	2300      	movs	r3, #0
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b084      	sub	sp, #16
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b22      	cmp	r3, #34	; 0x22
 800dd00:	d170      	bne.n	800dde4 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd0a:	d117      	bne.n	800dd3c <UART_Receive_IT+0x4e>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	691b      	ldr	r3, [r3, #16]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d113      	bne.n	800dd3c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800dd14:	2300      	movs	r3, #0
 800dd16:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd1c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	b29b      	uxth	r3, r3
 800dd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd2a:	b29a      	uxth	r2, r3
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd34:	1c9a      	adds	r2, r3, #2
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	629a      	str	r2, [r3, #40]	; 0x28
 800dd3a:	e026      	b.n	800dd8a <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd40:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800dd42:	2300      	movs	r3, #0
 800dd44:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	689b      	ldr	r3, [r3, #8]
 800dd4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd4e:	d007      	beq.n	800dd60 <UART_Receive_IT+0x72>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d10a      	bne.n	800dd6e <UART_Receive_IT+0x80>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	691b      	ldr	r3, [r3, #16]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	b2da      	uxtb	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	701a      	strb	r2, [r3, #0]
 800dd6c:	e008      	b.n	800dd80 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd7a:	b2da      	uxtb	r2, r3
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	3b01      	subs	r3, #1
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	4619      	mov	r1, r3
 800dd98:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d120      	bne.n	800dde0 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	68da      	ldr	r2, [r3, #12]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f022 0220 	bic.w	r2, r2, #32
 800ddac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	68da      	ldr	r2, [r3, #12]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ddbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	695a      	ldr	r2, [r3, #20]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f022 0201 	bic.w	r2, r2, #1
 800ddcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2220      	movs	r2, #32
 800ddd2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7ff fe95 	bl	800db06 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	e002      	b.n	800dde6 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800dde0:	2300      	movs	r3, #0
 800dde2:	e000      	b.n	800dde6 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800dde4:	2302      	movs	r3, #2
  }
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	3710      	adds	r7, #16
 800ddea:	46bd      	mov	sp, r7
 800ddec:	bd80      	pop	{r7, pc}
	...

0800ddf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	68da      	ldr	r2, [r3, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	689a      	ldr	r2, [r3, #8]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	431a      	orrs	r2, r3
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	431a      	orrs	r2, r3
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	69db      	ldr	r3, [r3, #28]
 800de22:	4313      	orrs	r3, r2
 800de24:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800de30:	f023 030c 	bic.w	r3, r3, #12
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	6812      	ldr	r2, [r2, #0]
 800de38:	68b9      	ldr	r1, [r7, #8]
 800de3a:	430b      	orrs	r3, r1
 800de3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	699a      	ldr	r2, [r3, #24]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	430a      	orrs	r2, r1
 800de52:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	4a57      	ldr	r2, [pc, #348]	; (800dfb8 <UART_SetConfig+0x1c8>)
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d004      	beq.n	800de68 <UART_SetConfig+0x78>
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a56      	ldr	r2, [pc, #344]	; (800dfbc <UART_SetConfig+0x1cc>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d103      	bne.n	800de70 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800de68:	f7fe fb20 	bl	800c4ac <HAL_RCC_GetPCLK2Freq>
 800de6c:	60f8      	str	r0, [r7, #12]
 800de6e:	e002      	b.n	800de76 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800de70:	f7fe fafa 	bl	800c468 <HAL_RCC_GetPCLK1Freq>
 800de74:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	69db      	ldr	r3, [r3, #28]
 800de7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de7e:	d14c      	bne.n	800df1a <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	4613      	mov	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4413      	add	r3, r2
 800de88:	009a      	lsls	r2, r3, #2
 800de8a:	441a      	add	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	685b      	ldr	r3, [r3, #4]
 800de90:	005b      	lsls	r3, r3, #1
 800de92:	fbb2 f3f3 	udiv	r3, r2, r3
 800de96:	4a4a      	ldr	r2, [pc, #296]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800de98:	fba2 2303 	umull	r2, r3, r2, r3
 800de9c:	095b      	lsrs	r3, r3, #5
 800de9e:	0119      	lsls	r1, r3, #4
 800dea0:	68fa      	ldr	r2, [r7, #12]
 800dea2:	4613      	mov	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4413      	add	r3, r2
 800dea8:	009a      	lsls	r2, r3, #2
 800deaa:	441a      	add	r2, r3
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	005b      	lsls	r3, r3, #1
 800deb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800deb6:	4b42      	ldr	r3, [pc, #264]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800deb8:	fba3 0302 	umull	r0, r3, r3, r2
 800debc:	095b      	lsrs	r3, r3, #5
 800debe:	2064      	movs	r0, #100	; 0x64
 800dec0:	fb00 f303 	mul.w	r3, r0, r3
 800dec4:	1ad3      	subs	r3, r2, r3
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	3332      	adds	r3, #50	; 0x32
 800deca:	4a3d      	ldr	r2, [pc, #244]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800decc:	fba2 2303 	umull	r2, r3, r2, r3
 800ded0:	095b      	lsrs	r3, r3, #5
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ded8:	4419      	add	r1, r3
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009a      	lsls	r2, r3, #2
 800dee4:	441a      	add	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	fbb2 f2f3 	udiv	r2, r2, r3
 800def0:	4b33      	ldr	r3, [pc, #204]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800def2:	fba3 0302 	umull	r0, r3, r3, r2
 800def6:	095b      	lsrs	r3, r3, #5
 800def8:	2064      	movs	r0, #100	; 0x64
 800defa:	fb00 f303 	mul.w	r3, r0, r3
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	3332      	adds	r3, #50	; 0x32
 800df04:	4a2e      	ldr	r2, [pc, #184]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800df06:	fba2 2303 	umull	r2, r3, r2, r3
 800df0a:	095b      	lsrs	r3, r3, #5
 800df0c:	f003 0207 	and.w	r2, r3, #7
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	440a      	add	r2, r1
 800df16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800df18:	e04a      	b.n	800dfb0 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	4613      	mov	r3, r2
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	009a      	lsls	r2, r3, #2
 800df24:	441a      	add	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df30:	4a23      	ldr	r2, [pc, #140]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800df32:	fba2 2303 	umull	r2, r3, r2, r3
 800df36:	095b      	lsrs	r3, r3, #5
 800df38:	0119      	lsls	r1, r3, #4
 800df3a:	68fa      	ldr	r2, [r7, #12]
 800df3c:	4613      	mov	r3, r2
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	4413      	add	r3, r2
 800df42:	009a      	lsls	r2, r3, #2
 800df44:	441a      	add	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	fbb2 f2f3 	udiv	r2, r2, r3
 800df50:	4b1b      	ldr	r3, [pc, #108]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800df52:	fba3 0302 	umull	r0, r3, r3, r2
 800df56:	095b      	lsrs	r3, r3, #5
 800df58:	2064      	movs	r0, #100	; 0x64
 800df5a:	fb00 f303 	mul.w	r3, r0, r3
 800df5e:	1ad3      	subs	r3, r2, r3
 800df60:	011b      	lsls	r3, r3, #4
 800df62:	3332      	adds	r3, #50	; 0x32
 800df64:	4a16      	ldr	r2, [pc, #88]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800df66:	fba2 2303 	umull	r2, r3, r2, r3
 800df6a:	095b      	lsrs	r3, r3, #5
 800df6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df70:	4419      	add	r1, r3
 800df72:	68fa      	ldr	r2, [r7, #12]
 800df74:	4613      	mov	r3, r2
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	4413      	add	r3, r2
 800df7a:	009a      	lsls	r2, r3, #2
 800df7c:	441a      	add	r2, r3
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	685b      	ldr	r3, [r3, #4]
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	fbb2 f2f3 	udiv	r2, r2, r3
 800df88:	4b0d      	ldr	r3, [pc, #52]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800df8a:	fba3 0302 	umull	r0, r3, r3, r2
 800df8e:	095b      	lsrs	r3, r3, #5
 800df90:	2064      	movs	r0, #100	; 0x64
 800df92:	fb00 f303 	mul.w	r3, r0, r3
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	3332      	adds	r3, #50	; 0x32
 800df9c:	4a08      	ldr	r2, [pc, #32]	; (800dfc0 <UART_SetConfig+0x1d0>)
 800df9e:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa2:	095b      	lsrs	r3, r3, #5
 800dfa4:	f003 020f 	and.w	r2, r3, #15
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	440a      	add	r2, r1
 800dfae:	609a      	str	r2, [r3, #8]
}
 800dfb0:	bf00      	nop
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	40011000 	.word	0x40011000
 800dfbc:	40011400 	.word	0x40011400
 800dfc0:	51eb851f 	.word	0x51eb851f

0800dfc4 <__errno>:
 800dfc4:	4b01      	ldr	r3, [pc, #4]	; (800dfcc <__errno+0x8>)
 800dfc6:	6818      	ldr	r0, [r3, #0]
 800dfc8:	4770      	bx	lr
 800dfca:	bf00      	nop
 800dfcc:	20000060 	.word	0x20000060

0800dfd0 <__libc_init_array>:
 800dfd0:	b570      	push	{r4, r5, r6, lr}
 800dfd2:	2500      	movs	r5, #0
 800dfd4:	4e0c      	ldr	r6, [pc, #48]	; (800e008 <__libc_init_array+0x38>)
 800dfd6:	4c0d      	ldr	r4, [pc, #52]	; (800e00c <__libc_init_array+0x3c>)
 800dfd8:	1ba4      	subs	r4, r4, r6
 800dfda:	10a4      	asrs	r4, r4, #2
 800dfdc:	42a5      	cmp	r5, r4
 800dfde:	d109      	bne.n	800dff4 <__libc_init_array+0x24>
 800dfe0:	f002 fafc 	bl	80105dc <_init>
 800dfe4:	2500      	movs	r5, #0
 800dfe6:	4e0a      	ldr	r6, [pc, #40]	; (800e010 <__libc_init_array+0x40>)
 800dfe8:	4c0a      	ldr	r4, [pc, #40]	; (800e014 <__libc_init_array+0x44>)
 800dfea:	1ba4      	subs	r4, r4, r6
 800dfec:	10a4      	asrs	r4, r4, #2
 800dfee:	42a5      	cmp	r5, r4
 800dff0:	d105      	bne.n	800dffe <__libc_init_array+0x2e>
 800dff2:	bd70      	pop	{r4, r5, r6, pc}
 800dff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dff8:	4798      	blx	r3
 800dffa:	3501      	adds	r5, #1
 800dffc:	e7ee      	b.n	800dfdc <__libc_init_array+0xc>
 800dffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e002:	4798      	blx	r3
 800e004:	3501      	adds	r5, #1
 800e006:	e7f2      	b.n	800dfee <__libc_init_array+0x1e>
 800e008:	08011154 	.word	0x08011154
 800e00c:	08011154 	.word	0x08011154
 800e010:	08011154 	.word	0x08011154
 800e014:	08011158 	.word	0x08011158

0800e018 <__itoa>:
 800e018:	1e93      	subs	r3, r2, #2
 800e01a:	2b22      	cmp	r3, #34	; 0x22
 800e01c:	b510      	push	{r4, lr}
 800e01e:	460c      	mov	r4, r1
 800e020:	d904      	bls.n	800e02c <__itoa+0x14>
 800e022:	2300      	movs	r3, #0
 800e024:	461c      	mov	r4, r3
 800e026:	700b      	strb	r3, [r1, #0]
 800e028:	4620      	mov	r0, r4
 800e02a:	bd10      	pop	{r4, pc}
 800e02c:	2a0a      	cmp	r2, #10
 800e02e:	d109      	bne.n	800e044 <__itoa+0x2c>
 800e030:	2800      	cmp	r0, #0
 800e032:	da07      	bge.n	800e044 <__itoa+0x2c>
 800e034:	232d      	movs	r3, #45	; 0x2d
 800e036:	700b      	strb	r3, [r1, #0]
 800e038:	2101      	movs	r1, #1
 800e03a:	4240      	negs	r0, r0
 800e03c:	4421      	add	r1, r4
 800e03e:	f000 fc9d 	bl	800e97c <__utoa>
 800e042:	e7f1      	b.n	800e028 <__itoa+0x10>
 800e044:	2100      	movs	r1, #0
 800e046:	e7f9      	b.n	800e03c <__itoa+0x24>

0800e048 <itoa>:
 800e048:	f7ff bfe6 	b.w	800e018 <__itoa>

0800e04c <__locale_ctype_ptr>:
 800e04c:	4b04      	ldr	r3, [pc, #16]	; (800e060 <__locale_ctype_ptr+0x14>)
 800e04e:	4a05      	ldr	r2, [pc, #20]	; (800e064 <__locale_ctype_ptr+0x18>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	2b00      	cmp	r3, #0
 800e056:	bf08      	it	eq
 800e058:	4613      	moveq	r3, r2
 800e05a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800e05e:	4770      	bx	lr
 800e060:	20000060 	.word	0x20000060
 800e064:	200000c4 	.word	0x200000c4

0800e068 <__ascii_mbtowc>:
 800e068:	b082      	sub	sp, #8
 800e06a:	b901      	cbnz	r1, 800e06e <__ascii_mbtowc+0x6>
 800e06c:	a901      	add	r1, sp, #4
 800e06e:	b142      	cbz	r2, 800e082 <__ascii_mbtowc+0x1a>
 800e070:	b14b      	cbz	r3, 800e086 <__ascii_mbtowc+0x1e>
 800e072:	7813      	ldrb	r3, [r2, #0]
 800e074:	600b      	str	r3, [r1, #0]
 800e076:	7812      	ldrb	r2, [r2, #0]
 800e078:	1c10      	adds	r0, r2, #0
 800e07a:	bf18      	it	ne
 800e07c:	2001      	movne	r0, #1
 800e07e:	b002      	add	sp, #8
 800e080:	4770      	bx	lr
 800e082:	4610      	mov	r0, r2
 800e084:	e7fb      	b.n	800e07e <__ascii_mbtowc+0x16>
 800e086:	f06f 0001 	mvn.w	r0, #1
 800e08a:	e7f8      	b.n	800e07e <__ascii_mbtowc+0x16>

0800e08c <memset>:
 800e08c:	4603      	mov	r3, r0
 800e08e:	4402      	add	r2, r0
 800e090:	4293      	cmp	r3, r2
 800e092:	d100      	bne.n	800e096 <memset+0xa>
 800e094:	4770      	bx	lr
 800e096:	f803 1b01 	strb.w	r1, [r3], #1
 800e09a:	e7f9      	b.n	800e090 <memset+0x4>

0800e09c <__cvt>:
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a2:	461e      	mov	r6, r3
 800e0a4:	bfbb      	ittet	lt
 800e0a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800e0aa:	461e      	movlt	r6, r3
 800e0ac:	2300      	movge	r3, #0
 800e0ae:	232d      	movlt	r3, #45	; 0x2d
 800e0b0:	b088      	sub	sp, #32
 800e0b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e0b4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800e0b8:	f027 0720 	bic.w	r7, r7, #32
 800e0bc:	2f46      	cmp	r7, #70	; 0x46
 800e0be:	4614      	mov	r4, r2
 800e0c0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800e0c2:	700b      	strb	r3, [r1, #0]
 800e0c4:	d004      	beq.n	800e0d0 <__cvt+0x34>
 800e0c6:	2f45      	cmp	r7, #69	; 0x45
 800e0c8:	d100      	bne.n	800e0cc <__cvt+0x30>
 800e0ca:	3501      	adds	r5, #1
 800e0cc:	2302      	movs	r3, #2
 800e0ce:	e000      	b.n	800e0d2 <__cvt+0x36>
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	aa07      	add	r2, sp, #28
 800e0d4:	9204      	str	r2, [sp, #16]
 800e0d6:	aa06      	add	r2, sp, #24
 800e0d8:	e9cd a202 	strd	sl, r2, [sp, #8]
 800e0dc:	e9cd 3500 	strd	r3, r5, [sp]
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	4633      	mov	r3, r6
 800e0e4:	f000 fd24 	bl	800eb30 <_dtoa_r>
 800e0e8:	2f47      	cmp	r7, #71	; 0x47
 800e0ea:	4680      	mov	r8, r0
 800e0ec:	d102      	bne.n	800e0f4 <__cvt+0x58>
 800e0ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e0f0:	07db      	lsls	r3, r3, #31
 800e0f2:	d526      	bpl.n	800e142 <__cvt+0xa6>
 800e0f4:	2f46      	cmp	r7, #70	; 0x46
 800e0f6:	eb08 0905 	add.w	r9, r8, r5
 800e0fa:	d111      	bne.n	800e120 <__cvt+0x84>
 800e0fc:	f898 3000 	ldrb.w	r3, [r8]
 800e100:	2b30      	cmp	r3, #48	; 0x30
 800e102:	d10a      	bne.n	800e11a <__cvt+0x7e>
 800e104:	2200      	movs	r2, #0
 800e106:	2300      	movs	r3, #0
 800e108:	4620      	mov	r0, r4
 800e10a:	4631      	mov	r1, r6
 800e10c:	f7f2 fc88 	bl	8000a20 <__aeabi_dcmpeq>
 800e110:	b918      	cbnz	r0, 800e11a <__cvt+0x7e>
 800e112:	f1c5 0501 	rsb	r5, r5, #1
 800e116:	f8ca 5000 	str.w	r5, [sl]
 800e11a:	f8da 3000 	ldr.w	r3, [sl]
 800e11e:	4499      	add	r9, r3
 800e120:	2200      	movs	r2, #0
 800e122:	2300      	movs	r3, #0
 800e124:	4620      	mov	r0, r4
 800e126:	4631      	mov	r1, r6
 800e128:	f7f2 fc7a 	bl	8000a20 <__aeabi_dcmpeq>
 800e12c:	b938      	cbnz	r0, 800e13e <__cvt+0xa2>
 800e12e:	2230      	movs	r2, #48	; 0x30
 800e130:	9b07      	ldr	r3, [sp, #28]
 800e132:	454b      	cmp	r3, r9
 800e134:	d205      	bcs.n	800e142 <__cvt+0xa6>
 800e136:	1c59      	adds	r1, r3, #1
 800e138:	9107      	str	r1, [sp, #28]
 800e13a:	701a      	strb	r2, [r3, #0]
 800e13c:	e7f8      	b.n	800e130 <__cvt+0x94>
 800e13e:	f8cd 901c 	str.w	r9, [sp, #28]
 800e142:	4640      	mov	r0, r8
 800e144:	9b07      	ldr	r3, [sp, #28]
 800e146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e148:	eba3 0308 	sub.w	r3, r3, r8
 800e14c:	6013      	str	r3, [r2, #0]
 800e14e:	b008      	add	sp, #32
 800e150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e154 <__exponent>:
 800e154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e156:	2900      	cmp	r1, #0
 800e158:	bfb4      	ite	lt
 800e15a:	232d      	movlt	r3, #45	; 0x2d
 800e15c:	232b      	movge	r3, #43	; 0x2b
 800e15e:	4604      	mov	r4, r0
 800e160:	bfb8      	it	lt
 800e162:	4249      	neglt	r1, r1
 800e164:	2909      	cmp	r1, #9
 800e166:	f804 2b02 	strb.w	r2, [r4], #2
 800e16a:	7043      	strb	r3, [r0, #1]
 800e16c:	dd21      	ble.n	800e1b2 <__exponent+0x5e>
 800e16e:	f10d 0307 	add.w	r3, sp, #7
 800e172:	461f      	mov	r7, r3
 800e174:	260a      	movs	r6, #10
 800e176:	fb91 f5f6 	sdiv	r5, r1, r6
 800e17a:	fb06 1115 	mls	r1, r6, r5, r1
 800e17e:	2d09      	cmp	r5, #9
 800e180:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800e184:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e188:	f103 32ff 	add.w	r2, r3, #4294967295
 800e18c:	4629      	mov	r1, r5
 800e18e:	dc09      	bgt.n	800e1a4 <__exponent+0x50>
 800e190:	3130      	adds	r1, #48	; 0x30
 800e192:	3b02      	subs	r3, #2
 800e194:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e198:	42bb      	cmp	r3, r7
 800e19a:	4622      	mov	r2, r4
 800e19c:	d304      	bcc.n	800e1a8 <__exponent+0x54>
 800e19e:	1a10      	subs	r0, r2, r0
 800e1a0:	b003      	add	sp, #12
 800e1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	e7e6      	b.n	800e176 <__exponent+0x22>
 800e1a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1ac:	f804 2b01 	strb.w	r2, [r4], #1
 800e1b0:	e7f2      	b.n	800e198 <__exponent+0x44>
 800e1b2:	2330      	movs	r3, #48	; 0x30
 800e1b4:	4419      	add	r1, r3
 800e1b6:	7083      	strb	r3, [r0, #2]
 800e1b8:	1d02      	adds	r2, r0, #4
 800e1ba:	70c1      	strb	r1, [r0, #3]
 800e1bc:	e7ef      	b.n	800e19e <__exponent+0x4a>
	...

0800e1c0 <_printf_float>:
 800e1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	b091      	sub	sp, #68	; 0x44
 800e1c6:	460c      	mov	r4, r1
 800e1c8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800e1ca:	4693      	mov	fp, r2
 800e1cc:	461e      	mov	r6, r3
 800e1ce:	4605      	mov	r5, r0
 800e1d0:	f001 fa62 	bl	800f698 <_localeconv_r>
 800e1d4:	6803      	ldr	r3, [r0, #0]
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1da:	f7f1 fff5 	bl	80001c8 <strlen>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	930e      	str	r3, [sp, #56]	; 0x38
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	900a      	str	r0, [sp, #40]	; 0x28
 800e1e6:	3307      	adds	r3, #7
 800e1e8:	f023 0307 	bic.w	r3, r3, #7
 800e1ec:	f103 0208 	add.w	r2, r3, #8
 800e1f0:	f894 8018 	ldrb.w	r8, [r4, #24]
 800e1f4:	f8d4 a000 	ldr.w	sl, [r4]
 800e1f8:	603a      	str	r2, [r7, #0]
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e202:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800e206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e20c:	f04f 32ff 	mov.w	r2, #4294967295
 800e210:	4ba6      	ldr	r3, [pc, #664]	; (800e4ac <_printf_float+0x2ec>)
 800e212:	4638      	mov	r0, r7
 800e214:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e216:	f7f2 fc35 	bl	8000a84 <__aeabi_dcmpun>
 800e21a:	bb68      	cbnz	r0, 800e278 <_printf_float+0xb8>
 800e21c:	f04f 32ff 	mov.w	r2, #4294967295
 800e220:	4ba2      	ldr	r3, [pc, #648]	; (800e4ac <_printf_float+0x2ec>)
 800e222:	4638      	mov	r0, r7
 800e224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e226:	f7f2 fc0f 	bl	8000a48 <__aeabi_dcmple>
 800e22a:	bb28      	cbnz	r0, 800e278 <_printf_float+0xb8>
 800e22c:	2200      	movs	r2, #0
 800e22e:	2300      	movs	r3, #0
 800e230:	4638      	mov	r0, r7
 800e232:	4649      	mov	r1, r9
 800e234:	f7f2 fbfe 	bl	8000a34 <__aeabi_dcmplt>
 800e238:	b110      	cbz	r0, 800e240 <_printf_float+0x80>
 800e23a:	232d      	movs	r3, #45	; 0x2d
 800e23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e240:	4f9b      	ldr	r7, [pc, #620]	; (800e4b0 <_printf_float+0x2f0>)
 800e242:	4b9c      	ldr	r3, [pc, #624]	; (800e4b4 <_printf_float+0x2f4>)
 800e244:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e248:	bf98      	it	ls
 800e24a:	461f      	movls	r7, r3
 800e24c:	2303      	movs	r3, #3
 800e24e:	f04f 0900 	mov.w	r9, #0
 800e252:	6123      	str	r3, [r4, #16]
 800e254:	f02a 0304 	bic.w	r3, sl, #4
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	9600      	str	r6, [sp, #0]
 800e25c:	465b      	mov	r3, fp
 800e25e:	aa0f      	add	r2, sp, #60	; 0x3c
 800e260:	4621      	mov	r1, r4
 800e262:	4628      	mov	r0, r5
 800e264:	f000 f9e2 	bl	800e62c <_printf_common>
 800e268:	3001      	adds	r0, #1
 800e26a:	f040 8090 	bne.w	800e38e <_printf_float+0x1ce>
 800e26e:	f04f 30ff 	mov.w	r0, #4294967295
 800e272:	b011      	add	sp, #68	; 0x44
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e278:	463a      	mov	r2, r7
 800e27a:	464b      	mov	r3, r9
 800e27c:	4638      	mov	r0, r7
 800e27e:	4649      	mov	r1, r9
 800e280:	f7f2 fc00 	bl	8000a84 <__aeabi_dcmpun>
 800e284:	b110      	cbz	r0, 800e28c <_printf_float+0xcc>
 800e286:	4f8c      	ldr	r7, [pc, #560]	; (800e4b8 <_printf_float+0x2f8>)
 800e288:	4b8c      	ldr	r3, [pc, #560]	; (800e4bc <_printf_float+0x2fc>)
 800e28a:	e7db      	b.n	800e244 <_printf_float+0x84>
 800e28c:	6863      	ldr	r3, [r4, #4]
 800e28e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800e292:	1c59      	adds	r1, r3, #1
 800e294:	a80d      	add	r0, sp, #52	; 0x34
 800e296:	a90e      	add	r1, sp, #56	; 0x38
 800e298:	d140      	bne.n	800e31c <_printf_float+0x15c>
 800e29a:	2306      	movs	r3, #6
 800e29c:	6063      	str	r3, [r4, #4]
 800e29e:	f04f 0c00 	mov.w	ip, #0
 800e2a2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800e2a6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800e2aa:	6863      	ldr	r3, [r4, #4]
 800e2ac:	6022      	str	r2, [r4, #0]
 800e2ae:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	463a      	mov	r2, r7
 800e2b6:	464b      	mov	r3, r9
 800e2b8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800e2bc:	4628      	mov	r0, r5
 800e2be:	f7ff feed 	bl	800e09c <__cvt>
 800e2c2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800e2c6:	2b47      	cmp	r3, #71	; 0x47
 800e2c8:	4607      	mov	r7, r0
 800e2ca:	d109      	bne.n	800e2e0 <_printf_float+0x120>
 800e2cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2ce:	1cd8      	adds	r0, r3, #3
 800e2d0:	db02      	blt.n	800e2d8 <_printf_float+0x118>
 800e2d2:	6862      	ldr	r2, [r4, #4]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	dd47      	ble.n	800e368 <_printf_float+0x1a8>
 800e2d8:	f1a8 0802 	sub.w	r8, r8, #2
 800e2dc:	fa5f f888 	uxtb.w	r8, r8
 800e2e0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800e2e4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e2e6:	d824      	bhi.n	800e332 <_printf_float+0x172>
 800e2e8:	3901      	subs	r1, #1
 800e2ea:	4642      	mov	r2, r8
 800e2ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e2f0:	910d      	str	r1, [sp, #52]	; 0x34
 800e2f2:	f7ff ff2f 	bl	800e154 <__exponent>
 800e2f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2f8:	4681      	mov	r9, r0
 800e2fa:	1813      	adds	r3, r2, r0
 800e2fc:	2a01      	cmp	r2, #1
 800e2fe:	6123      	str	r3, [r4, #16]
 800e300:	dc02      	bgt.n	800e308 <_printf_float+0x148>
 800e302:	6822      	ldr	r2, [r4, #0]
 800e304:	07d1      	lsls	r1, r2, #31
 800e306:	d501      	bpl.n	800e30c <_printf_float+0x14c>
 800e308:	3301      	adds	r3, #1
 800e30a:	6123      	str	r3, [r4, #16]
 800e30c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800e310:	2b00      	cmp	r3, #0
 800e312:	d0a2      	beq.n	800e25a <_printf_float+0x9a>
 800e314:	232d      	movs	r3, #45	; 0x2d
 800e316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e31a:	e79e      	b.n	800e25a <_printf_float+0x9a>
 800e31c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800e320:	f000 816e 	beq.w	800e600 <_printf_float+0x440>
 800e324:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e328:	d1b9      	bne.n	800e29e <_printf_float+0xde>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1b7      	bne.n	800e29e <_printf_float+0xde>
 800e32e:	2301      	movs	r3, #1
 800e330:	e7b4      	b.n	800e29c <_printf_float+0xdc>
 800e332:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800e336:	d119      	bne.n	800e36c <_printf_float+0x1ac>
 800e338:	2900      	cmp	r1, #0
 800e33a:	6863      	ldr	r3, [r4, #4]
 800e33c:	dd0c      	ble.n	800e358 <_printf_float+0x198>
 800e33e:	6121      	str	r1, [r4, #16]
 800e340:	b913      	cbnz	r3, 800e348 <_printf_float+0x188>
 800e342:	6822      	ldr	r2, [r4, #0]
 800e344:	07d2      	lsls	r2, r2, #31
 800e346:	d502      	bpl.n	800e34e <_printf_float+0x18e>
 800e348:	3301      	adds	r3, #1
 800e34a:	440b      	add	r3, r1
 800e34c:	6123      	str	r3, [r4, #16]
 800e34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e350:	f04f 0900 	mov.w	r9, #0
 800e354:	65a3      	str	r3, [r4, #88]	; 0x58
 800e356:	e7d9      	b.n	800e30c <_printf_float+0x14c>
 800e358:	b913      	cbnz	r3, 800e360 <_printf_float+0x1a0>
 800e35a:	6822      	ldr	r2, [r4, #0]
 800e35c:	07d0      	lsls	r0, r2, #31
 800e35e:	d501      	bpl.n	800e364 <_printf_float+0x1a4>
 800e360:	3302      	adds	r3, #2
 800e362:	e7f3      	b.n	800e34c <_printf_float+0x18c>
 800e364:	2301      	movs	r3, #1
 800e366:	e7f1      	b.n	800e34c <_printf_float+0x18c>
 800e368:	f04f 0867 	mov.w	r8, #103	; 0x67
 800e36c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800e370:	4293      	cmp	r3, r2
 800e372:	db05      	blt.n	800e380 <_printf_float+0x1c0>
 800e374:	6822      	ldr	r2, [r4, #0]
 800e376:	6123      	str	r3, [r4, #16]
 800e378:	07d1      	lsls	r1, r2, #31
 800e37a:	d5e8      	bpl.n	800e34e <_printf_float+0x18e>
 800e37c:	3301      	adds	r3, #1
 800e37e:	e7e5      	b.n	800e34c <_printf_float+0x18c>
 800e380:	2b00      	cmp	r3, #0
 800e382:	bfcc      	ite	gt
 800e384:	2301      	movgt	r3, #1
 800e386:	f1c3 0302 	rsble	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	e7de      	b.n	800e34c <_printf_float+0x18c>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	055a      	lsls	r2, r3, #21
 800e392:	d407      	bmi.n	800e3a4 <_printf_float+0x1e4>
 800e394:	6923      	ldr	r3, [r4, #16]
 800e396:	463a      	mov	r2, r7
 800e398:	4659      	mov	r1, fp
 800e39a:	4628      	mov	r0, r5
 800e39c:	47b0      	blx	r6
 800e39e:	3001      	adds	r0, #1
 800e3a0:	d129      	bne.n	800e3f6 <_printf_float+0x236>
 800e3a2:	e764      	b.n	800e26e <_printf_float+0xae>
 800e3a4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800e3a8:	f240 80d7 	bls.w	800e55a <_printf_float+0x39a>
 800e3ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f7f2 fb34 	bl	8000a20 <__aeabi_dcmpeq>
 800e3b8:	b388      	cbz	r0, 800e41e <_printf_float+0x25e>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	4a40      	ldr	r2, [pc, #256]	; (800e4c0 <_printf_float+0x300>)
 800e3be:	4659      	mov	r1, fp
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	47b0      	blx	r6
 800e3c4:	3001      	adds	r0, #1
 800e3c6:	f43f af52 	beq.w	800e26e <_printf_float+0xae>
 800e3ca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	db02      	blt.n	800e3d8 <_printf_float+0x218>
 800e3d2:	6823      	ldr	r3, [r4, #0]
 800e3d4:	07d8      	lsls	r0, r3, #31
 800e3d6:	d50e      	bpl.n	800e3f6 <_printf_float+0x236>
 800e3d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e3dc:	4659      	mov	r1, fp
 800e3de:	4628      	mov	r0, r5
 800e3e0:	47b0      	blx	r6
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	f43f af43 	beq.w	800e26e <_printf_float+0xae>
 800e3e8:	2700      	movs	r7, #0
 800e3ea:	f104 081a 	add.w	r8, r4, #26
 800e3ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e3f0:	3b01      	subs	r3, #1
 800e3f2:	42bb      	cmp	r3, r7
 800e3f4:	dc09      	bgt.n	800e40a <_printf_float+0x24a>
 800e3f6:	6823      	ldr	r3, [r4, #0]
 800e3f8:	079f      	lsls	r7, r3, #30
 800e3fa:	f100 80fd 	bmi.w	800e5f8 <_printf_float+0x438>
 800e3fe:	68e0      	ldr	r0, [r4, #12]
 800e400:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e402:	4298      	cmp	r0, r3
 800e404:	bfb8      	it	lt
 800e406:	4618      	movlt	r0, r3
 800e408:	e733      	b.n	800e272 <_printf_float+0xb2>
 800e40a:	2301      	movs	r3, #1
 800e40c:	4642      	mov	r2, r8
 800e40e:	4659      	mov	r1, fp
 800e410:	4628      	mov	r0, r5
 800e412:	47b0      	blx	r6
 800e414:	3001      	adds	r0, #1
 800e416:	f43f af2a 	beq.w	800e26e <_printf_float+0xae>
 800e41a:	3701      	adds	r7, #1
 800e41c:	e7e7      	b.n	800e3ee <_printf_float+0x22e>
 800e41e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e420:	2b00      	cmp	r3, #0
 800e422:	dc2b      	bgt.n	800e47c <_printf_float+0x2bc>
 800e424:	2301      	movs	r3, #1
 800e426:	4a26      	ldr	r2, [pc, #152]	; (800e4c0 <_printf_float+0x300>)
 800e428:	4659      	mov	r1, fp
 800e42a:	4628      	mov	r0, r5
 800e42c:	47b0      	blx	r6
 800e42e:	3001      	adds	r0, #1
 800e430:	f43f af1d 	beq.w	800e26e <_printf_float+0xae>
 800e434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e436:	b923      	cbnz	r3, 800e442 <_printf_float+0x282>
 800e438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e43a:	b913      	cbnz	r3, 800e442 <_printf_float+0x282>
 800e43c:	6823      	ldr	r3, [r4, #0]
 800e43e:	07d9      	lsls	r1, r3, #31
 800e440:	d5d9      	bpl.n	800e3f6 <_printf_float+0x236>
 800e442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e446:	4659      	mov	r1, fp
 800e448:	4628      	mov	r0, r5
 800e44a:	47b0      	blx	r6
 800e44c:	3001      	adds	r0, #1
 800e44e:	f43f af0e 	beq.w	800e26e <_printf_float+0xae>
 800e452:	f04f 0800 	mov.w	r8, #0
 800e456:	f104 091a 	add.w	r9, r4, #26
 800e45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e45c:	425b      	negs	r3, r3
 800e45e:	4543      	cmp	r3, r8
 800e460:	dc01      	bgt.n	800e466 <_printf_float+0x2a6>
 800e462:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e464:	e797      	b.n	800e396 <_printf_float+0x1d6>
 800e466:	2301      	movs	r3, #1
 800e468:	464a      	mov	r2, r9
 800e46a:	4659      	mov	r1, fp
 800e46c:	4628      	mov	r0, r5
 800e46e:	47b0      	blx	r6
 800e470:	3001      	adds	r0, #1
 800e472:	f43f aefc 	beq.w	800e26e <_printf_float+0xae>
 800e476:	f108 0801 	add.w	r8, r8, #1
 800e47a:	e7ee      	b.n	800e45a <_printf_float+0x29a>
 800e47c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e47e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e480:	429a      	cmp	r2, r3
 800e482:	bfa8      	it	ge
 800e484:	461a      	movge	r2, r3
 800e486:	2a00      	cmp	r2, #0
 800e488:	4690      	mov	r8, r2
 800e48a:	dd07      	ble.n	800e49c <_printf_float+0x2dc>
 800e48c:	4613      	mov	r3, r2
 800e48e:	4659      	mov	r1, fp
 800e490:	463a      	mov	r2, r7
 800e492:	4628      	mov	r0, r5
 800e494:	47b0      	blx	r6
 800e496:	3001      	adds	r0, #1
 800e498:	f43f aee9 	beq.w	800e26e <_printf_float+0xae>
 800e49c:	f104 031a 	add.w	r3, r4, #26
 800e4a0:	f04f 0a00 	mov.w	sl, #0
 800e4a4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800e4a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4aa:	e015      	b.n	800e4d8 <_printf_float+0x318>
 800e4ac:	7fefffff 	.word	0x7fefffff
 800e4b0:	08010ed2 	.word	0x08010ed2
 800e4b4:	08010ece 	.word	0x08010ece
 800e4b8:	08010eda 	.word	0x08010eda
 800e4bc:	08010ed6 	.word	0x08010ed6
 800e4c0:	08010ede 	.word	0x08010ede
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4c8:	4659      	mov	r1, fp
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	47b0      	blx	r6
 800e4ce:	3001      	adds	r0, #1
 800e4d0:	f43f aecd 	beq.w	800e26e <_printf_float+0xae>
 800e4d4:	f10a 0a01 	add.w	sl, sl, #1
 800e4d8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800e4dc:	eba9 0308 	sub.w	r3, r9, r8
 800e4e0:	4553      	cmp	r3, sl
 800e4e2:	dcef      	bgt.n	800e4c4 <_printf_float+0x304>
 800e4e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	444f      	add	r7, r9
 800e4ec:	db14      	blt.n	800e518 <_printf_float+0x358>
 800e4ee:	6823      	ldr	r3, [r4, #0]
 800e4f0:	07da      	lsls	r2, r3, #31
 800e4f2:	d411      	bmi.n	800e518 <_printf_float+0x358>
 800e4f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e4f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e4f8:	eba3 0209 	sub.w	r2, r3, r9
 800e4fc:	eba3 0901 	sub.w	r9, r3, r1
 800e500:	4591      	cmp	r9, r2
 800e502:	bfa8      	it	ge
 800e504:	4691      	movge	r9, r2
 800e506:	f1b9 0f00 	cmp.w	r9, #0
 800e50a:	dc0d      	bgt.n	800e528 <_printf_float+0x368>
 800e50c:	2700      	movs	r7, #0
 800e50e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e512:	f104 081a 	add.w	r8, r4, #26
 800e516:	e018      	b.n	800e54a <_printf_float+0x38a>
 800e518:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e51c:	4659      	mov	r1, fp
 800e51e:	4628      	mov	r0, r5
 800e520:	47b0      	blx	r6
 800e522:	3001      	adds	r0, #1
 800e524:	d1e6      	bne.n	800e4f4 <_printf_float+0x334>
 800e526:	e6a2      	b.n	800e26e <_printf_float+0xae>
 800e528:	464b      	mov	r3, r9
 800e52a:	463a      	mov	r2, r7
 800e52c:	4659      	mov	r1, fp
 800e52e:	4628      	mov	r0, r5
 800e530:	47b0      	blx	r6
 800e532:	3001      	adds	r0, #1
 800e534:	d1ea      	bne.n	800e50c <_printf_float+0x34c>
 800e536:	e69a      	b.n	800e26e <_printf_float+0xae>
 800e538:	2301      	movs	r3, #1
 800e53a:	4642      	mov	r2, r8
 800e53c:	4659      	mov	r1, fp
 800e53e:	4628      	mov	r0, r5
 800e540:	47b0      	blx	r6
 800e542:	3001      	adds	r0, #1
 800e544:	f43f ae93 	beq.w	800e26e <_printf_float+0xae>
 800e548:	3701      	adds	r7, #1
 800e54a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	eba3 0309 	sub.w	r3, r3, r9
 800e554:	42bb      	cmp	r3, r7
 800e556:	dcef      	bgt.n	800e538 <_printf_float+0x378>
 800e558:	e74d      	b.n	800e3f6 <_printf_float+0x236>
 800e55a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e55c:	2a01      	cmp	r2, #1
 800e55e:	dc01      	bgt.n	800e564 <_printf_float+0x3a4>
 800e560:	07db      	lsls	r3, r3, #31
 800e562:	d538      	bpl.n	800e5d6 <_printf_float+0x416>
 800e564:	2301      	movs	r3, #1
 800e566:	463a      	mov	r2, r7
 800e568:	4659      	mov	r1, fp
 800e56a:	4628      	mov	r0, r5
 800e56c:	47b0      	blx	r6
 800e56e:	3001      	adds	r0, #1
 800e570:	f43f ae7d 	beq.w	800e26e <_printf_float+0xae>
 800e574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e578:	4659      	mov	r1, fp
 800e57a:	4628      	mov	r0, r5
 800e57c:	47b0      	blx	r6
 800e57e:	3001      	adds	r0, #1
 800e580:	f107 0701 	add.w	r7, r7, #1
 800e584:	f43f ae73 	beq.w	800e26e <_printf_float+0xae>
 800e588:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e58c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e58e:	2200      	movs	r2, #0
 800e590:	f103 38ff 	add.w	r8, r3, #4294967295
 800e594:	2300      	movs	r3, #0
 800e596:	f7f2 fa43 	bl	8000a20 <__aeabi_dcmpeq>
 800e59a:	b9c0      	cbnz	r0, 800e5ce <_printf_float+0x40e>
 800e59c:	4643      	mov	r3, r8
 800e59e:	463a      	mov	r2, r7
 800e5a0:	4659      	mov	r1, fp
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	47b0      	blx	r6
 800e5a6:	3001      	adds	r0, #1
 800e5a8:	d10d      	bne.n	800e5c6 <_printf_float+0x406>
 800e5aa:	e660      	b.n	800e26e <_printf_float+0xae>
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	4642      	mov	r2, r8
 800e5b0:	4659      	mov	r1, fp
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b0      	blx	r6
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	f43f ae59 	beq.w	800e26e <_printf_float+0xae>
 800e5bc:	3701      	adds	r7, #1
 800e5be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	42bb      	cmp	r3, r7
 800e5c4:	dcf2      	bgt.n	800e5ac <_printf_float+0x3ec>
 800e5c6:	464b      	mov	r3, r9
 800e5c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e5cc:	e6e4      	b.n	800e398 <_printf_float+0x1d8>
 800e5ce:	2700      	movs	r7, #0
 800e5d0:	f104 081a 	add.w	r8, r4, #26
 800e5d4:	e7f3      	b.n	800e5be <_printf_float+0x3fe>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e7e1      	b.n	800e59e <_printf_float+0x3de>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	4642      	mov	r2, r8
 800e5de:	4659      	mov	r1, fp
 800e5e0:	4628      	mov	r0, r5
 800e5e2:	47b0      	blx	r6
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	f43f ae42 	beq.w	800e26e <_printf_float+0xae>
 800e5ea:	3701      	adds	r7, #1
 800e5ec:	68e3      	ldr	r3, [r4, #12]
 800e5ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e5f0:	1a9b      	subs	r3, r3, r2
 800e5f2:	42bb      	cmp	r3, r7
 800e5f4:	dcf1      	bgt.n	800e5da <_printf_float+0x41a>
 800e5f6:	e702      	b.n	800e3fe <_printf_float+0x23e>
 800e5f8:	2700      	movs	r7, #0
 800e5fa:	f104 0819 	add.w	r8, r4, #25
 800e5fe:	e7f5      	b.n	800e5ec <_printf_float+0x42c>
 800e600:	2b00      	cmp	r3, #0
 800e602:	f43f ae94 	beq.w	800e32e <_printf_float+0x16e>
 800e606:	f04f 0c00 	mov.w	ip, #0
 800e60a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800e60e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800e612:	6022      	str	r2, [r4, #0]
 800e614:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800e618:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	463a      	mov	r2, r7
 800e620:	464b      	mov	r3, r9
 800e622:	4628      	mov	r0, r5
 800e624:	f7ff fd3a 	bl	800e09c <__cvt>
 800e628:	4607      	mov	r7, r0
 800e62a:	e64f      	b.n	800e2cc <_printf_float+0x10c>

0800e62c <_printf_common>:
 800e62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e630:	4691      	mov	r9, r2
 800e632:	461f      	mov	r7, r3
 800e634:	688a      	ldr	r2, [r1, #8]
 800e636:	690b      	ldr	r3, [r1, #16]
 800e638:	4606      	mov	r6, r0
 800e63a:	4293      	cmp	r3, r2
 800e63c:	bfb8      	it	lt
 800e63e:	4613      	movlt	r3, r2
 800e640:	f8c9 3000 	str.w	r3, [r9]
 800e644:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e648:	460c      	mov	r4, r1
 800e64a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e64e:	b112      	cbz	r2, 800e656 <_printf_common+0x2a>
 800e650:	3301      	adds	r3, #1
 800e652:	f8c9 3000 	str.w	r3, [r9]
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	0699      	lsls	r1, r3, #26
 800e65a:	bf42      	ittt	mi
 800e65c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e660:	3302      	addmi	r3, #2
 800e662:	f8c9 3000 	strmi.w	r3, [r9]
 800e666:	6825      	ldr	r5, [r4, #0]
 800e668:	f015 0506 	ands.w	r5, r5, #6
 800e66c:	d107      	bne.n	800e67e <_printf_common+0x52>
 800e66e:	f104 0a19 	add.w	sl, r4, #25
 800e672:	68e3      	ldr	r3, [r4, #12]
 800e674:	f8d9 2000 	ldr.w	r2, [r9]
 800e678:	1a9b      	subs	r3, r3, r2
 800e67a:	42ab      	cmp	r3, r5
 800e67c:	dc29      	bgt.n	800e6d2 <_printf_common+0xa6>
 800e67e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e682:	6822      	ldr	r2, [r4, #0]
 800e684:	3300      	adds	r3, #0
 800e686:	bf18      	it	ne
 800e688:	2301      	movne	r3, #1
 800e68a:	0692      	lsls	r2, r2, #26
 800e68c:	d42e      	bmi.n	800e6ec <_printf_common+0xc0>
 800e68e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e692:	4639      	mov	r1, r7
 800e694:	4630      	mov	r0, r6
 800e696:	47c0      	blx	r8
 800e698:	3001      	adds	r0, #1
 800e69a:	d021      	beq.n	800e6e0 <_printf_common+0xb4>
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	68e5      	ldr	r5, [r4, #12]
 800e6a0:	f003 0306 	and.w	r3, r3, #6
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	bf18      	it	ne
 800e6a8:	2500      	movne	r5, #0
 800e6aa:	f8d9 2000 	ldr.w	r2, [r9]
 800e6ae:	f04f 0900 	mov.w	r9, #0
 800e6b2:	bf08      	it	eq
 800e6b4:	1aad      	subeq	r5, r5, r2
 800e6b6:	68a3      	ldr	r3, [r4, #8]
 800e6b8:	6922      	ldr	r2, [r4, #16]
 800e6ba:	bf08      	it	eq
 800e6bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	bfc4      	itt	gt
 800e6c4:	1a9b      	subgt	r3, r3, r2
 800e6c6:	18ed      	addgt	r5, r5, r3
 800e6c8:	341a      	adds	r4, #26
 800e6ca:	454d      	cmp	r5, r9
 800e6cc:	d11a      	bne.n	800e704 <_printf_common+0xd8>
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	e008      	b.n	800e6e4 <_printf_common+0xb8>
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	4652      	mov	r2, sl
 800e6d6:	4639      	mov	r1, r7
 800e6d8:	4630      	mov	r0, r6
 800e6da:	47c0      	blx	r8
 800e6dc:	3001      	adds	r0, #1
 800e6de:	d103      	bne.n	800e6e8 <_printf_common+0xbc>
 800e6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e8:	3501      	adds	r5, #1
 800e6ea:	e7c2      	b.n	800e672 <_printf_common+0x46>
 800e6ec:	2030      	movs	r0, #48	; 0x30
 800e6ee:	18e1      	adds	r1, r4, r3
 800e6f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6f4:	1c5a      	adds	r2, r3, #1
 800e6f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6fa:	4422      	add	r2, r4
 800e6fc:	3302      	adds	r3, #2
 800e6fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e702:	e7c4      	b.n	800e68e <_printf_common+0x62>
 800e704:	2301      	movs	r3, #1
 800e706:	4622      	mov	r2, r4
 800e708:	4639      	mov	r1, r7
 800e70a:	4630      	mov	r0, r6
 800e70c:	47c0      	blx	r8
 800e70e:	3001      	adds	r0, #1
 800e710:	d0e6      	beq.n	800e6e0 <_printf_common+0xb4>
 800e712:	f109 0901 	add.w	r9, r9, #1
 800e716:	e7d8      	b.n	800e6ca <_printf_common+0x9e>

0800e718 <_printf_i>:
 800e718:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e71c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e720:	460c      	mov	r4, r1
 800e722:	7e09      	ldrb	r1, [r1, #24]
 800e724:	b085      	sub	sp, #20
 800e726:	296e      	cmp	r1, #110	; 0x6e
 800e728:	4617      	mov	r7, r2
 800e72a:	4606      	mov	r6, r0
 800e72c:	4698      	mov	r8, r3
 800e72e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e730:	f000 80b3 	beq.w	800e89a <_printf_i+0x182>
 800e734:	d822      	bhi.n	800e77c <_printf_i+0x64>
 800e736:	2963      	cmp	r1, #99	; 0x63
 800e738:	d036      	beq.n	800e7a8 <_printf_i+0x90>
 800e73a:	d80a      	bhi.n	800e752 <_printf_i+0x3a>
 800e73c:	2900      	cmp	r1, #0
 800e73e:	f000 80b9 	beq.w	800e8b4 <_printf_i+0x19c>
 800e742:	2958      	cmp	r1, #88	; 0x58
 800e744:	f000 8083 	beq.w	800e84e <_printf_i+0x136>
 800e748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e74c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e750:	e032      	b.n	800e7b8 <_printf_i+0xa0>
 800e752:	2964      	cmp	r1, #100	; 0x64
 800e754:	d001      	beq.n	800e75a <_printf_i+0x42>
 800e756:	2969      	cmp	r1, #105	; 0x69
 800e758:	d1f6      	bne.n	800e748 <_printf_i+0x30>
 800e75a:	6820      	ldr	r0, [r4, #0]
 800e75c:	6813      	ldr	r3, [r2, #0]
 800e75e:	0605      	lsls	r5, r0, #24
 800e760:	f103 0104 	add.w	r1, r3, #4
 800e764:	d52a      	bpl.n	800e7bc <_printf_i+0xa4>
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	6011      	str	r1, [r2, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	da03      	bge.n	800e776 <_printf_i+0x5e>
 800e76e:	222d      	movs	r2, #45	; 0x2d
 800e770:	425b      	negs	r3, r3
 800e772:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e776:	486f      	ldr	r0, [pc, #444]	; (800e934 <_printf_i+0x21c>)
 800e778:	220a      	movs	r2, #10
 800e77a:	e039      	b.n	800e7f0 <_printf_i+0xd8>
 800e77c:	2973      	cmp	r1, #115	; 0x73
 800e77e:	f000 809d 	beq.w	800e8bc <_printf_i+0x1a4>
 800e782:	d808      	bhi.n	800e796 <_printf_i+0x7e>
 800e784:	296f      	cmp	r1, #111	; 0x6f
 800e786:	d020      	beq.n	800e7ca <_printf_i+0xb2>
 800e788:	2970      	cmp	r1, #112	; 0x70
 800e78a:	d1dd      	bne.n	800e748 <_printf_i+0x30>
 800e78c:	6823      	ldr	r3, [r4, #0]
 800e78e:	f043 0320 	orr.w	r3, r3, #32
 800e792:	6023      	str	r3, [r4, #0]
 800e794:	e003      	b.n	800e79e <_printf_i+0x86>
 800e796:	2975      	cmp	r1, #117	; 0x75
 800e798:	d017      	beq.n	800e7ca <_printf_i+0xb2>
 800e79a:	2978      	cmp	r1, #120	; 0x78
 800e79c:	d1d4      	bne.n	800e748 <_printf_i+0x30>
 800e79e:	2378      	movs	r3, #120	; 0x78
 800e7a0:	4865      	ldr	r0, [pc, #404]	; (800e938 <_printf_i+0x220>)
 800e7a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e7a6:	e055      	b.n	800e854 <_printf_i+0x13c>
 800e7a8:	6813      	ldr	r3, [r2, #0]
 800e7aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7ae:	1d19      	adds	r1, r3, #4
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	6011      	str	r1, [r2, #0]
 800e7b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e08c      	b.n	800e8d6 <_printf_i+0x1be>
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e7c2:	6011      	str	r1, [r2, #0]
 800e7c4:	bf18      	it	ne
 800e7c6:	b21b      	sxthne	r3, r3
 800e7c8:	e7cf      	b.n	800e76a <_printf_i+0x52>
 800e7ca:	6813      	ldr	r3, [r2, #0]
 800e7cc:	6825      	ldr	r5, [r4, #0]
 800e7ce:	1d18      	adds	r0, r3, #4
 800e7d0:	6010      	str	r0, [r2, #0]
 800e7d2:	0628      	lsls	r0, r5, #24
 800e7d4:	d501      	bpl.n	800e7da <_printf_i+0xc2>
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	e002      	b.n	800e7e0 <_printf_i+0xc8>
 800e7da:	0668      	lsls	r0, r5, #25
 800e7dc:	d5fb      	bpl.n	800e7d6 <_printf_i+0xbe>
 800e7de:	881b      	ldrh	r3, [r3, #0]
 800e7e0:	296f      	cmp	r1, #111	; 0x6f
 800e7e2:	bf14      	ite	ne
 800e7e4:	220a      	movne	r2, #10
 800e7e6:	2208      	moveq	r2, #8
 800e7e8:	4852      	ldr	r0, [pc, #328]	; (800e934 <_printf_i+0x21c>)
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7f0:	6865      	ldr	r5, [r4, #4]
 800e7f2:	2d00      	cmp	r5, #0
 800e7f4:	60a5      	str	r5, [r4, #8]
 800e7f6:	f2c0 8095 	blt.w	800e924 <_printf_i+0x20c>
 800e7fa:	6821      	ldr	r1, [r4, #0]
 800e7fc:	f021 0104 	bic.w	r1, r1, #4
 800e800:	6021      	str	r1, [r4, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d13d      	bne.n	800e882 <_printf_i+0x16a>
 800e806:	2d00      	cmp	r5, #0
 800e808:	f040 808e 	bne.w	800e928 <_printf_i+0x210>
 800e80c:	4665      	mov	r5, ip
 800e80e:	2a08      	cmp	r2, #8
 800e810:	d10b      	bne.n	800e82a <_printf_i+0x112>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	07db      	lsls	r3, r3, #31
 800e816:	d508      	bpl.n	800e82a <_printf_i+0x112>
 800e818:	6923      	ldr	r3, [r4, #16]
 800e81a:	6862      	ldr	r2, [r4, #4]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	bfde      	ittt	le
 800e820:	2330      	movle	r3, #48	; 0x30
 800e822:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e826:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e82a:	ebac 0305 	sub.w	r3, ip, r5
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	f8cd 8000 	str.w	r8, [sp]
 800e834:	463b      	mov	r3, r7
 800e836:	aa03      	add	r2, sp, #12
 800e838:	4621      	mov	r1, r4
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7ff fef6 	bl	800e62c <_printf_common>
 800e840:	3001      	adds	r0, #1
 800e842:	d14d      	bne.n	800e8e0 <_printf_i+0x1c8>
 800e844:	f04f 30ff 	mov.w	r0, #4294967295
 800e848:	b005      	add	sp, #20
 800e84a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e84e:	4839      	ldr	r0, [pc, #228]	; (800e934 <_printf_i+0x21c>)
 800e850:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e854:	6813      	ldr	r3, [r2, #0]
 800e856:	6821      	ldr	r1, [r4, #0]
 800e858:	1d1d      	adds	r5, r3, #4
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6015      	str	r5, [r2, #0]
 800e85e:	060a      	lsls	r2, r1, #24
 800e860:	d50b      	bpl.n	800e87a <_printf_i+0x162>
 800e862:	07ca      	lsls	r2, r1, #31
 800e864:	bf44      	itt	mi
 800e866:	f041 0120 	orrmi.w	r1, r1, #32
 800e86a:	6021      	strmi	r1, [r4, #0]
 800e86c:	b91b      	cbnz	r3, 800e876 <_printf_i+0x15e>
 800e86e:	6822      	ldr	r2, [r4, #0]
 800e870:	f022 0220 	bic.w	r2, r2, #32
 800e874:	6022      	str	r2, [r4, #0]
 800e876:	2210      	movs	r2, #16
 800e878:	e7b7      	b.n	800e7ea <_printf_i+0xd2>
 800e87a:	064d      	lsls	r5, r1, #25
 800e87c:	bf48      	it	mi
 800e87e:	b29b      	uxthmi	r3, r3
 800e880:	e7ef      	b.n	800e862 <_printf_i+0x14a>
 800e882:	4665      	mov	r5, ip
 800e884:	fbb3 f1f2 	udiv	r1, r3, r2
 800e888:	fb02 3311 	mls	r3, r2, r1, r3
 800e88c:	5cc3      	ldrb	r3, [r0, r3]
 800e88e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e892:	460b      	mov	r3, r1
 800e894:	2900      	cmp	r1, #0
 800e896:	d1f5      	bne.n	800e884 <_printf_i+0x16c>
 800e898:	e7b9      	b.n	800e80e <_printf_i+0xf6>
 800e89a:	6813      	ldr	r3, [r2, #0]
 800e89c:	6825      	ldr	r5, [r4, #0]
 800e89e:	1d18      	adds	r0, r3, #4
 800e8a0:	6961      	ldr	r1, [r4, #20]
 800e8a2:	6010      	str	r0, [r2, #0]
 800e8a4:	0628      	lsls	r0, r5, #24
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	d501      	bpl.n	800e8ae <_printf_i+0x196>
 800e8aa:	6019      	str	r1, [r3, #0]
 800e8ac:	e002      	b.n	800e8b4 <_printf_i+0x19c>
 800e8ae:	066a      	lsls	r2, r5, #25
 800e8b0:	d5fb      	bpl.n	800e8aa <_printf_i+0x192>
 800e8b2:	8019      	strh	r1, [r3, #0]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4665      	mov	r5, ip
 800e8b8:	6123      	str	r3, [r4, #16]
 800e8ba:	e7b9      	b.n	800e830 <_printf_i+0x118>
 800e8bc:	6813      	ldr	r3, [r2, #0]
 800e8be:	1d19      	adds	r1, r3, #4
 800e8c0:	6011      	str	r1, [r2, #0]
 800e8c2:	681d      	ldr	r5, [r3, #0]
 800e8c4:	6862      	ldr	r2, [r4, #4]
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	f000 fefb 	bl	800f6c4 <memchr>
 800e8ce:	b108      	cbz	r0, 800e8d4 <_printf_i+0x1bc>
 800e8d0:	1b40      	subs	r0, r0, r5
 800e8d2:	6060      	str	r0, [r4, #4]
 800e8d4:	6863      	ldr	r3, [r4, #4]
 800e8d6:	6123      	str	r3, [r4, #16]
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8de:	e7a7      	b.n	800e830 <_printf_i+0x118>
 800e8e0:	6923      	ldr	r3, [r4, #16]
 800e8e2:	462a      	mov	r2, r5
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	47c0      	blx	r8
 800e8ea:	3001      	adds	r0, #1
 800e8ec:	d0aa      	beq.n	800e844 <_printf_i+0x12c>
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	079b      	lsls	r3, r3, #30
 800e8f2:	d413      	bmi.n	800e91c <_printf_i+0x204>
 800e8f4:	68e0      	ldr	r0, [r4, #12]
 800e8f6:	9b03      	ldr	r3, [sp, #12]
 800e8f8:	4298      	cmp	r0, r3
 800e8fa:	bfb8      	it	lt
 800e8fc:	4618      	movlt	r0, r3
 800e8fe:	e7a3      	b.n	800e848 <_printf_i+0x130>
 800e900:	2301      	movs	r3, #1
 800e902:	464a      	mov	r2, r9
 800e904:	4639      	mov	r1, r7
 800e906:	4630      	mov	r0, r6
 800e908:	47c0      	blx	r8
 800e90a:	3001      	adds	r0, #1
 800e90c:	d09a      	beq.n	800e844 <_printf_i+0x12c>
 800e90e:	3501      	adds	r5, #1
 800e910:	68e3      	ldr	r3, [r4, #12]
 800e912:	9a03      	ldr	r2, [sp, #12]
 800e914:	1a9b      	subs	r3, r3, r2
 800e916:	42ab      	cmp	r3, r5
 800e918:	dcf2      	bgt.n	800e900 <_printf_i+0x1e8>
 800e91a:	e7eb      	b.n	800e8f4 <_printf_i+0x1dc>
 800e91c:	2500      	movs	r5, #0
 800e91e:	f104 0919 	add.w	r9, r4, #25
 800e922:	e7f5      	b.n	800e910 <_printf_i+0x1f8>
 800e924:	2b00      	cmp	r3, #0
 800e926:	d1ac      	bne.n	800e882 <_printf_i+0x16a>
 800e928:	7803      	ldrb	r3, [r0, #0]
 800e92a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e92e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e932:	e76c      	b.n	800e80e <_printf_i+0xf6>
 800e934:	08010ee0 	.word	0x08010ee0
 800e938:	08010ef1 	.word	0x08010ef1

0800e93c <siprintf>:
 800e93c:	b40e      	push	{r1, r2, r3}
 800e93e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e942:	b500      	push	{lr}
 800e944:	b09c      	sub	sp, #112	; 0x70
 800e946:	ab1d      	add	r3, sp, #116	; 0x74
 800e948:	9002      	str	r0, [sp, #8]
 800e94a:	9006      	str	r0, [sp, #24]
 800e94c:	9107      	str	r1, [sp, #28]
 800e94e:	9104      	str	r1, [sp, #16]
 800e950:	4808      	ldr	r0, [pc, #32]	; (800e974 <siprintf+0x38>)
 800e952:	4909      	ldr	r1, [pc, #36]	; (800e978 <siprintf+0x3c>)
 800e954:	f853 2b04 	ldr.w	r2, [r3], #4
 800e958:	9105      	str	r1, [sp, #20]
 800e95a:	6800      	ldr	r0, [r0, #0]
 800e95c:	a902      	add	r1, sp, #8
 800e95e:	9301      	str	r3, [sp, #4]
 800e960:	f001 fab4 	bl	800fecc <_svfiprintf_r>
 800e964:	2200      	movs	r2, #0
 800e966:	9b02      	ldr	r3, [sp, #8]
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	b01c      	add	sp, #112	; 0x70
 800e96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e970:	b003      	add	sp, #12
 800e972:	4770      	bx	lr
 800e974:	20000060 	.word	0x20000060
 800e978:	ffff0208 	.word	0xffff0208

0800e97c <__utoa>:
 800e97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e97e:	b08b      	sub	sp, #44	; 0x2c
 800e980:	4605      	mov	r5, r0
 800e982:	460c      	mov	r4, r1
 800e984:	466e      	mov	r6, sp
 800e986:	4b1b      	ldr	r3, [pc, #108]	; (800e9f4 <__utoa+0x78>)
 800e988:	f103 0c20 	add.w	ip, r3, #32
 800e98c:	4637      	mov	r7, r6
 800e98e:	6818      	ldr	r0, [r3, #0]
 800e990:	6859      	ldr	r1, [r3, #4]
 800e992:	3308      	adds	r3, #8
 800e994:	c703      	stmia	r7!, {r0, r1}
 800e996:	4563      	cmp	r3, ip
 800e998:	463e      	mov	r6, r7
 800e99a:	d1f7      	bne.n	800e98c <__utoa+0x10>
 800e99c:	6818      	ldr	r0, [r3, #0]
 800e99e:	791b      	ldrb	r3, [r3, #4]
 800e9a0:	6038      	str	r0, [r7, #0]
 800e9a2:	713b      	strb	r3, [r7, #4]
 800e9a4:	1e93      	subs	r3, r2, #2
 800e9a6:	2b22      	cmp	r3, #34	; 0x22
 800e9a8:	f04f 0300 	mov.w	r3, #0
 800e9ac:	d904      	bls.n	800e9b8 <__utoa+0x3c>
 800e9ae:	7023      	strb	r3, [r4, #0]
 800e9b0:	461c      	mov	r4, r3
 800e9b2:	4620      	mov	r0, r4
 800e9b4:	b00b      	add	sp, #44	; 0x2c
 800e9b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b8:	1e66      	subs	r6, r4, #1
 800e9ba:	fbb5 f0f2 	udiv	r0, r5, r2
 800e9be:	fb02 5510 	mls	r5, r2, r0, r5
 800e9c2:	af0a      	add	r7, sp, #40	; 0x28
 800e9c4:	443d      	add	r5, r7
 800e9c6:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800e9ca:	1c59      	adds	r1, r3, #1
 800e9cc:	f806 5f01 	strb.w	r5, [r6, #1]!
 800e9d0:	4605      	mov	r5, r0
 800e9d2:	b968      	cbnz	r0, 800e9f0 <__utoa+0x74>
 800e9d4:	4622      	mov	r2, r4
 800e9d6:	5460      	strb	r0, [r4, r1]
 800e9d8:	4423      	add	r3, r4
 800e9da:	1b19      	subs	r1, r3, r4
 800e9dc:	1b10      	subs	r0, r2, r4
 800e9de:	4281      	cmp	r1, r0
 800e9e0:	dde7      	ble.n	800e9b2 <__utoa+0x36>
 800e9e2:	7811      	ldrb	r1, [r2, #0]
 800e9e4:	7818      	ldrb	r0, [r3, #0]
 800e9e6:	f802 0b01 	strb.w	r0, [r2], #1
 800e9ea:	f803 1901 	strb.w	r1, [r3], #-1
 800e9ee:	e7f4      	b.n	800e9da <__utoa+0x5e>
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	e7e2      	b.n	800e9ba <__utoa+0x3e>
 800e9f4:	08010f02 	.word	0x08010f02

0800e9f8 <__ascii_wctomb>:
 800e9f8:	b149      	cbz	r1, 800ea0e <__ascii_wctomb+0x16>
 800e9fa:	2aff      	cmp	r2, #255	; 0xff
 800e9fc:	bf8b      	itete	hi
 800e9fe:	238a      	movhi	r3, #138	; 0x8a
 800ea00:	700a      	strbls	r2, [r1, #0]
 800ea02:	6003      	strhi	r3, [r0, #0]
 800ea04:	2001      	movls	r0, #1
 800ea06:	bf88      	it	hi
 800ea08:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea0c:	4770      	bx	lr
 800ea0e:	4608      	mov	r0, r1
 800ea10:	4770      	bx	lr

0800ea12 <quorem>:
 800ea12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea16:	6903      	ldr	r3, [r0, #16]
 800ea18:	690c      	ldr	r4, [r1, #16]
 800ea1a:	4680      	mov	r8, r0
 800ea1c:	42a3      	cmp	r3, r4
 800ea1e:	f2c0 8084 	blt.w	800eb2a <quorem+0x118>
 800ea22:	3c01      	subs	r4, #1
 800ea24:	f101 0714 	add.w	r7, r1, #20
 800ea28:	f100 0614 	add.w	r6, r0, #20
 800ea2c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ea30:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ea34:	3501      	adds	r5, #1
 800ea36:	fbb0 f5f5 	udiv	r5, r0, r5
 800ea3a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ea3e:	eb06 030c 	add.w	r3, r6, ip
 800ea42:	eb07 090c 	add.w	r9, r7, ip
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	b39d      	cbz	r5, 800eab2 <quorem+0xa0>
 800ea4a:	f04f 0a00 	mov.w	sl, #0
 800ea4e:	4638      	mov	r0, r7
 800ea50:	46b6      	mov	lr, r6
 800ea52:	46d3      	mov	fp, sl
 800ea54:	f850 2b04 	ldr.w	r2, [r0], #4
 800ea58:	b293      	uxth	r3, r2
 800ea5a:	fb05 a303 	mla	r3, r5, r3, sl
 800ea5e:	0c12      	lsrs	r2, r2, #16
 800ea60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ea64:	fb05 a202 	mla	r2, r5, r2, sl
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	ebab 0303 	sub.w	r3, fp, r3
 800ea6e:	f8de b000 	ldr.w	fp, [lr]
 800ea72:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ea76:	fa1f fb8b 	uxth.w	fp, fp
 800ea7a:	445b      	add	r3, fp
 800ea7c:	fa1f fb82 	uxth.w	fp, r2
 800ea80:	f8de 2000 	ldr.w	r2, [lr]
 800ea84:	4581      	cmp	r9, r0
 800ea86:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ea8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800ea98:	f84e 3b04 	str.w	r3, [lr], #4
 800ea9c:	d2da      	bcs.n	800ea54 <quorem+0x42>
 800ea9e:	f856 300c 	ldr.w	r3, [r6, ip]
 800eaa2:	b933      	cbnz	r3, 800eab2 <quorem+0xa0>
 800eaa4:	9b01      	ldr	r3, [sp, #4]
 800eaa6:	3b04      	subs	r3, #4
 800eaa8:	429e      	cmp	r6, r3
 800eaaa:	461a      	mov	r2, r3
 800eaac:	d331      	bcc.n	800eb12 <quorem+0x100>
 800eaae:	f8c8 4010 	str.w	r4, [r8, #16]
 800eab2:	4640      	mov	r0, r8
 800eab4:	f001 f834 	bl	800fb20 <__mcmp>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	db26      	blt.n	800eb0a <quorem+0xf8>
 800eabc:	4630      	mov	r0, r6
 800eabe:	f04f 0c00 	mov.w	ip, #0
 800eac2:	3501      	adds	r5, #1
 800eac4:	f857 1b04 	ldr.w	r1, [r7], #4
 800eac8:	f8d0 e000 	ldr.w	lr, [r0]
 800eacc:	b28b      	uxth	r3, r1
 800eace:	ebac 0303 	sub.w	r3, ip, r3
 800ead2:	fa1f f28e 	uxth.w	r2, lr
 800ead6:	4413      	add	r3, r2
 800ead8:	0c0a      	lsrs	r2, r1, #16
 800eada:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800eade:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eae8:	45b9      	cmp	r9, r7
 800eaea:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800eaee:	f840 3b04 	str.w	r3, [r0], #4
 800eaf2:	d2e7      	bcs.n	800eac4 <quorem+0xb2>
 800eaf4:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800eaf8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800eafc:	b92a      	cbnz	r2, 800eb0a <quorem+0xf8>
 800eafe:	3b04      	subs	r3, #4
 800eb00:	429e      	cmp	r6, r3
 800eb02:	461a      	mov	r2, r3
 800eb04:	d30b      	bcc.n	800eb1e <quorem+0x10c>
 800eb06:	f8c8 4010 	str.w	r4, [r8, #16]
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	b003      	add	sp, #12
 800eb0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb12:	6812      	ldr	r2, [r2, #0]
 800eb14:	3b04      	subs	r3, #4
 800eb16:	2a00      	cmp	r2, #0
 800eb18:	d1c9      	bne.n	800eaae <quorem+0x9c>
 800eb1a:	3c01      	subs	r4, #1
 800eb1c:	e7c4      	b.n	800eaa8 <quorem+0x96>
 800eb1e:	6812      	ldr	r2, [r2, #0]
 800eb20:	3b04      	subs	r3, #4
 800eb22:	2a00      	cmp	r2, #0
 800eb24:	d1ef      	bne.n	800eb06 <quorem+0xf4>
 800eb26:	3c01      	subs	r4, #1
 800eb28:	e7ea      	b.n	800eb00 <quorem+0xee>
 800eb2a:	2000      	movs	r0, #0
 800eb2c:	e7ee      	b.n	800eb0c <quorem+0xfa>
	...

0800eb30 <_dtoa_r>:
 800eb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb34:	4616      	mov	r6, r2
 800eb36:	461f      	mov	r7, r3
 800eb38:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb3a:	b095      	sub	sp, #84	; 0x54
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800eb42:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800eb46:	b93d      	cbnz	r5, 800eb58 <_dtoa_r+0x28>
 800eb48:	2010      	movs	r0, #16
 800eb4a:	f000 fdb3 	bl	800f6b4 <malloc>
 800eb4e:	6260      	str	r0, [r4, #36]	; 0x24
 800eb50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb54:	6005      	str	r5, [r0, #0]
 800eb56:	60c5      	str	r5, [r0, #12]
 800eb58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb5a:	6819      	ldr	r1, [r3, #0]
 800eb5c:	b151      	cbz	r1, 800eb74 <_dtoa_r+0x44>
 800eb5e:	685a      	ldr	r2, [r3, #4]
 800eb60:	2301      	movs	r3, #1
 800eb62:	4093      	lsls	r3, r2
 800eb64:	604a      	str	r2, [r1, #4]
 800eb66:	608b      	str	r3, [r1, #8]
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f000 fdf8 	bl	800f75e <_Bfree>
 800eb6e:	2200      	movs	r2, #0
 800eb70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb72:	601a      	str	r2, [r3, #0]
 800eb74:	1e3b      	subs	r3, r7, #0
 800eb76:	bfaf      	iteee	ge
 800eb78:	2300      	movge	r3, #0
 800eb7a:	2201      	movlt	r2, #1
 800eb7c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eb80:	9303      	strlt	r3, [sp, #12]
 800eb82:	bfac      	ite	ge
 800eb84:	f8c8 3000 	strge.w	r3, [r8]
 800eb88:	f8c8 2000 	strlt.w	r2, [r8]
 800eb8c:	4bae      	ldr	r3, [pc, #696]	; (800ee48 <_dtoa_r+0x318>)
 800eb8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800eb92:	ea33 0308 	bics.w	r3, r3, r8
 800eb96:	d11b      	bne.n	800ebd0 <_dtoa_r+0xa0>
 800eb98:	f242 730f 	movw	r3, #9999	; 0x270f
 800eb9c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800eb9e:	6013      	str	r3, [r2, #0]
 800eba0:	9b02      	ldr	r3, [sp, #8]
 800eba2:	b923      	cbnz	r3, 800ebae <_dtoa_r+0x7e>
 800eba4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800eba8:	2800      	cmp	r0, #0
 800ebaa:	f000 8545 	beq.w	800f638 <_dtoa_r+0xb08>
 800ebae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebb0:	b953      	cbnz	r3, 800ebc8 <_dtoa_r+0x98>
 800ebb2:	4ba6      	ldr	r3, [pc, #664]	; (800ee4c <_dtoa_r+0x31c>)
 800ebb4:	e021      	b.n	800ebfa <_dtoa_r+0xca>
 800ebb6:	4ba6      	ldr	r3, [pc, #664]	; (800ee50 <_dtoa_r+0x320>)
 800ebb8:	9306      	str	r3, [sp, #24]
 800ebba:	3308      	adds	r3, #8
 800ebbc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ebbe:	6013      	str	r3, [r2, #0]
 800ebc0:	9806      	ldr	r0, [sp, #24]
 800ebc2:	b015      	add	sp, #84	; 0x54
 800ebc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebc8:	4ba0      	ldr	r3, [pc, #640]	; (800ee4c <_dtoa_r+0x31c>)
 800ebca:	9306      	str	r3, [sp, #24]
 800ebcc:	3303      	adds	r3, #3
 800ebce:	e7f5      	b.n	800ebbc <_dtoa_r+0x8c>
 800ebd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	4630      	mov	r0, r6
 800ebda:	4639      	mov	r1, r7
 800ebdc:	f7f1 ff20 	bl	8000a20 <__aeabi_dcmpeq>
 800ebe0:	4682      	mov	sl, r0
 800ebe2:	b160      	cbz	r0, 800ebfe <_dtoa_r+0xce>
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ebe8:	6013      	str	r3, [r2, #0]
 800ebea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 8520 	beq.w	800f632 <_dtoa_r+0xb02>
 800ebf2:	4b98      	ldr	r3, [pc, #608]	; (800ee54 <_dtoa_r+0x324>)
 800ebf4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ebf6:	6013      	str	r3, [r2, #0]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	9306      	str	r3, [sp, #24]
 800ebfc:	e7e0      	b.n	800ebc0 <_dtoa_r+0x90>
 800ebfe:	ab12      	add	r3, sp, #72	; 0x48
 800ec00:	9301      	str	r3, [sp, #4]
 800ec02:	ab13      	add	r3, sp, #76	; 0x4c
 800ec04:	9300      	str	r3, [sp, #0]
 800ec06:	4632      	mov	r2, r6
 800ec08:	463b      	mov	r3, r7
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f001 f800 	bl	800fc10 <__d2b>
 800ec10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ec14:	4683      	mov	fp, r0
 800ec16:	2d00      	cmp	r5, #0
 800ec18:	d07d      	beq.n	800ed16 <_dtoa_r+0x1e6>
 800ec1a:	46b0      	mov	r8, r6
 800ec1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ec20:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800ec24:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800ec28:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ec2c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ec30:	2200      	movs	r2, #0
 800ec32:	4b89      	ldr	r3, [pc, #548]	; (800ee58 <_dtoa_r+0x328>)
 800ec34:	4640      	mov	r0, r8
 800ec36:	4649      	mov	r1, r9
 800ec38:	f7f1 fad2 	bl	80001e0 <__aeabi_dsub>
 800ec3c:	a37c      	add	r3, pc, #496	; (adr r3, 800ee30 <_dtoa_r+0x300>)
 800ec3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec42:	f7f1 fc85 	bl	8000550 <__aeabi_dmul>
 800ec46:	a37c      	add	r3, pc, #496	; (adr r3, 800ee38 <_dtoa_r+0x308>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	f7f1 faca 	bl	80001e4 <__adddf3>
 800ec50:	4606      	mov	r6, r0
 800ec52:	4628      	mov	r0, r5
 800ec54:	460f      	mov	r7, r1
 800ec56:	f7f1 fc11 	bl	800047c <__aeabi_i2d>
 800ec5a:	a379      	add	r3, pc, #484	; (adr r3, 800ee40 <_dtoa_r+0x310>)
 800ec5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec60:	f7f1 fc76 	bl	8000550 <__aeabi_dmul>
 800ec64:	4602      	mov	r2, r0
 800ec66:	460b      	mov	r3, r1
 800ec68:	4630      	mov	r0, r6
 800ec6a:	4639      	mov	r1, r7
 800ec6c:	f7f1 faba 	bl	80001e4 <__adddf3>
 800ec70:	4606      	mov	r6, r0
 800ec72:	460f      	mov	r7, r1
 800ec74:	f7f1 ff1c 	bl	8000ab0 <__aeabi_d2iz>
 800ec78:	2200      	movs	r2, #0
 800ec7a:	4682      	mov	sl, r0
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4630      	mov	r0, r6
 800ec80:	4639      	mov	r1, r7
 800ec82:	f7f1 fed7 	bl	8000a34 <__aeabi_dcmplt>
 800ec86:	b148      	cbz	r0, 800ec9c <_dtoa_r+0x16c>
 800ec88:	4650      	mov	r0, sl
 800ec8a:	f7f1 fbf7 	bl	800047c <__aeabi_i2d>
 800ec8e:	4632      	mov	r2, r6
 800ec90:	463b      	mov	r3, r7
 800ec92:	f7f1 fec5 	bl	8000a20 <__aeabi_dcmpeq>
 800ec96:	b908      	cbnz	r0, 800ec9c <_dtoa_r+0x16c>
 800ec98:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec9c:	f1ba 0f16 	cmp.w	sl, #22
 800eca0:	d85a      	bhi.n	800ed58 <_dtoa_r+0x228>
 800eca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eca6:	496d      	ldr	r1, [pc, #436]	; (800ee5c <_dtoa_r+0x32c>)
 800eca8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ecac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecb0:	f7f1 fede 	bl	8000a70 <__aeabi_dcmpgt>
 800ecb4:	2800      	cmp	r0, #0
 800ecb6:	d051      	beq.n	800ed5c <_dtoa_r+0x22c>
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecbe:	930d      	str	r3, [sp, #52]	; 0x34
 800ecc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ecc2:	1b5d      	subs	r5, r3, r5
 800ecc4:	1e6b      	subs	r3, r5, #1
 800ecc6:	9307      	str	r3, [sp, #28]
 800ecc8:	bf43      	ittte	mi
 800ecca:	2300      	movmi	r3, #0
 800eccc:	f1c5 0901 	rsbmi	r9, r5, #1
 800ecd0:	9307      	strmi	r3, [sp, #28]
 800ecd2:	f04f 0900 	movpl.w	r9, #0
 800ecd6:	f1ba 0f00 	cmp.w	sl, #0
 800ecda:	db41      	blt.n	800ed60 <_dtoa_r+0x230>
 800ecdc:	9b07      	ldr	r3, [sp, #28]
 800ecde:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ece2:	4453      	add	r3, sl
 800ece4:	9307      	str	r3, [sp, #28]
 800ece6:	2300      	movs	r3, #0
 800ece8:	9308      	str	r3, [sp, #32]
 800ecea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ecec:	2b09      	cmp	r3, #9
 800ecee:	f200 808f 	bhi.w	800ee10 <_dtoa_r+0x2e0>
 800ecf2:	2b05      	cmp	r3, #5
 800ecf4:	bfc4      	itt	gt
 800ecf6:	3b04      	subgt	r3, #4
 800ecf8:	931e      	strgt	r3, [sp, #120]	; 0x78
 800ecfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ecfc:	bfc8      	it	gt
 800ecfe:	2500      	movgt	r5, #0
 800ed00:	f1a3 0302 	sub.w	r3, r3, #2
 800ed04:	bfd8      	it	le
 800ed06:	2501      	movle	r5, #1
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	f200 808d 	bhi.w	800ee28 <_dtoa_r+0x2f8>
 800ed0e:	e8df f003 	tbb	[pc, r3]
 800ed12:	7d7b      	.short	0x7d7b
 800ed14:	6f2f      	.short	0x6f2f
 800ed16:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ed1a:	441d      	add	r5, r3
 800ed1c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ed20:	2820      	cmp	r0, #32
 800ed22:	dd13      	ble.n	800ed4c <_dtoa_r+0x21c>
 800ed24:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ed28:	9b02      	ldr	r3, [sp, #8]
 800ed2a:	fa08 f800 	lsl.w	r8, r8, r0
 800ed2e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ed32:	fa23 f000 	lsr.w	r0, r3, r0
 800ed36:	ea48 0000 	orr.w	r0, r8, r0
 800ed3a:	f7f1 fb8f 	bl	800045c <__aeabi_ui2d>
 800ed3e:	2301      	movs	r3, #1
 800ed40:	4680      	mov	r8, r0
 800ed42:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800ed46:	3d01      	subs	r5, #1
 800ed48:	9310      	str	r3, [sp, #64]	; 0x40
 800ed4a:	e771      	b.n	800ec30 <_dtoa_r+0x100>
 800ed4c:	9b02      	ldr	r3, [sp, #8]
 800ed4e:	f1c0 0020 	rsb	r0, r0, #32
 800ed52:	fa03 f000 	lsl.w	r0, r3, r0
 800ed56:	e7f0      	b.n	800ed3a <_dtoa_r+0x20a>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e7b0      	b.n	800ecbe <_dtoa_r+0x18e>
 800ed5c:	900d      	str	r0, [sp, #52]	; 0x34
 800ed5e:	e7af      	b.n	800ecc0 <_dtoa_r+0x190>
 800ed60:	f1ca 0300 	rsb	r3, sl, #0
 800ed64:	9308      	str	r3, [sp, #32]
 800ed66:	2300      	movs	r3, #0
 800ed68:	eba9 090a 	sub.w	r9, r9, sl
 800ed6c:	930c      	str	r3, [sp, #48]	; 0x30
 800ed6e:	e7bc      	b.n	800ecea <_dtoa_r+0x1ba>
 800ed70:	2301      	movs	r3, #1
 800ed72:	9309      	str	r3, [sp, #36]	; 0x24
 800ed74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	dd74      	ble.n	800ee64 <_dtoa_r+0x334>
 800ed7a:	4698      	mov	r8, r3
 800ed7c:	9304      	str	r3, [sp, #16]
 800ed7e:	2200      	movs	r2, #0
 800ed80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ed82:	6072      	str	r2, [r6, #4]
 800ed84:	2204      	movs	r2, #4
 800ed86:	f102 0014 	add.w	r0, r2, #20
 800ed8a:	4298      	cmp	r0, r3
 800ed8c:	6871      	ldr	r1, [r6, #4]
 800ed8e:	d96e      	bls.n	800ee6e <_dtoa_r+0x33e>
 800ed90:	4620      	mov	r0, r4
 800ed92:	f000 fcb0 	bl	800f6f6 <_Balloc>
 800ed96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ed98:	6030      	str	r0, [r6, #0]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f1b8 0f0e 	cmp.w	r8, #14
 800eda0:	9306      	str	r3, [sp, #24]
 800eda2:	f200 80ed 	bhi.w	800ef80 <_dtoa_r+0x450>
 800eda6:	2d00      	cmp	r5, #0
 800eda8:	f000 80ea 	beq.w	800ef80 <_dtoa_r+0x450>
 800edac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edb0:	f1ba 0f00 	cmp.w	sl, #0
 800edb4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800edb8:	dd77      	ble.n	800eeaa <_dtoa_r+0x37a>
 800edba:	4a28      	ldr	r2, [pc, #160]	; (800ee5c <_dtoa_r+0x32c>)
 800edbc:	f00a 030f 	and.w	r3, sl, #15
 800edc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800edc4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800edc8:	06f0      	lsls	r0, r6, #27
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800edd2:	d568      	bpl.n	800eea6 <_dtoa_r+0x376>
 800edd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800edd8:	4b21      	ldr	r3, [pc, #132]	; (800ee60 <_dtoa_r+0x330>)
 800edda:	2503      	movs	r5, #3
 800eddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ede0:	f7f1 fce0 	bl	80007a4 <__aeabi_ddiv>
 800ede4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ede8:	f006 060f 	and.w	r6, r6, #15
 800edec:	4f1c      	ldr	r7, [pc, #112]	; (800ee60 <_dtoa_r+0x330>)
 800edee:	e04f      	b.n	800ee90 <_dtoa_r+0x360>
 800edf0:	2301      	movs	r3, #1
 800edf2:	9309      	str	r3, [sp, #36]	; 0x24
 800edf4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800edf6:	4453      	add	r3, sl
 800edf8:	f103 0801 	add.w	r8, r3, #1
 800edfc:	9304      	str	r3, [sp, #16]
 800edfe:	4643      	mov	r3, r8
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	bfb8      	it	lt
 800ee04:	2301      	movlt	r3, #1
 800ee06:	e7ba      	b.n	800ed7e <_dtoa_r+0x24e>
 800ee08:	2300      	movs	r3, #0
 800ee0a:	e7b2      	b.n	800ed72 <_dtoa_r+0x242>
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	e7f0      	b.n	800edf2 <_dtoa_r+0x2c2>
 800ee10:	2501      	movs	r5, #1
 800ee12:	2300      	movs	r3, #0
 800ee14:	9509      	str	r5, [sp, #36]	; 0x24
 800ee16:	931e      	str	r3, [sp, #120]	; 0x78
 800ee18:	f04f 33ff 	mov.w	r3, #4294967295
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	9304      	str	r3, [sp, #16]
 800ee20:	4698      	mov	r8, r3
 800ee22:	2312      	movs	r3, #18
 800ee24:	921f      	str	r2, [sp, #124]	; 0x7c
 800ee26:	e7aa      	b.n	800ed7e <_dtoa_r+0x24e>
 800ee28:	2301      	movs	r3, #1
 800ee2a:	9309      	str	r3, [sp, #36]	; 0x24
 800ee2c:	e7f4      	b.n	800ee18 <_dtoa_r+0x2e8>
 800ee2e:	bf00      	nop
 800ee30:	636f4361 	.word	0x636f4361
 800ee34:	3fd287a7 	.word	0x3fd287a7
 800ee38:	8b60c8b3 	.word	0x8b60c8b3
 800ee3c:	3fc68a28 	.word	0x3fc68a28
 800ee40:	509f79fb 	.word	0x509f79fb
 800ee44:	3fd34413 	.word	0x3fd34413
 800ee48:	7ff00000 	.word	0x7ff00000
 800ee4c:	08011031 	.word	0x08011031
 800ee50:	08011028 	.word	0x08011028
 800ee54:	08010edf 	.word	0x08010edf
 800ee58:	3ff80000 	.word	0x3ff80000
 800ee5c:	08011060 	.word	0x08011060
 800ee60:	08011038 	.word	0x08011038
 800ee64:	2301      	movs	r3, #1
 800ee66:	9304      	str	r3, [sp, #16]
 800ee68:	4698      	mov	r8, r3
 800ee6a:	461a      	mov	r2, r3
 800ee6c:	e7da      	b.n	800ee24 <_dtoa_r+0x2f4>
 800ee6e:	3101      	adds	r1, #1
 800ee70:	6071      	str	r1, [r6, #4]
 800ee72:	0052      	lsls	r2, r2, #1
 800ee74:	e787      	b.n	800ed86 <_dtoa_r+0x256>
 800ee76:	07f1      	lsls	r1, r6, #31
 800ee78:	d508      	bpl.n	800ee8c <_dtoa_r+0x35c>
 800ee7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee82:	f7f1 fb65 	bl	8000550 <__aeabi_dmul>
 800ee86:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ee8a:	3501      	adds	r5, #1
 800ee8c:	1076      	asrs	r6, r6, #1
 800ee8e:	3708      	adds	r7, #8
 800ee90:	2e00      	cmp	r6, #0
 800ee92:	d1f0      	bne.n	800ee76 <_dtoa_r+0x346>
 800ee94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ee98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee9c:	f7f1 fc82 	bl	80007a4 <__aeabi_ddiv>
 800eea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eea4:	e01b      	b.n	800eede <_dtoa_r+0x3ae>
 800eea6:	2502      	movs	r5, #2
 800eea8:	e7a0      	b.n	800edec <_dtoa_r+0x2bc>
 800eeaa:	f000 80a4 	beq.w	800eff6 <_dtoa_r+0x4c6>
 800eeae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800eeb2:	f1ca 0600 	rsb	r6, sl, #0
 800eeb6:	4ba0      	ldr	r3, [pc, #640]	; (800f138 <_dtoa_r+0x608>)
 800eeb8:	f006 020f 	and.w	r2, r6, #15
 800eebc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eec4:	f7f1 fb44 	bl	8000550 <__aeabi_dmul>
 800eec8:	2502      	movs	r5, #2
 800eeca:	2300      	movs	r3, #0
 800eecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eed0:	4f9a      	ldr	r7, [pc, #616]	; (800f13c <_dtoa_r+0x60c>)
 800eed2:	1136      	asrs	r6, r6, #4
 800eed4:	2e00      	cmp	r6, #0
 800eed6:	f040 8083 	bne.w	800efe0 <_dtoa_r+0x4b0>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1e0      	bne.n	800eea0 <_dtoa_r+0x370>
 800eede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	f000 808a 	beq.w	800effa <_dtoa_r+0x4ca>
 800eee6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eeea:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eeee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eef2:	2200      	movs	r2, #0
 800eef4:	4b92      	ldr	r3, [pc, #584]	; (800f140 <_dtoa_r+0x610>)
 800eef6:	f7f1 fd9d 	bl	8000a34 <__aeabi_dcmplt>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d07d      	beq.n	800effa <_dtoa_r+0x4ca>
 800eefe:	f1b8 0f00 	cmp.w	r8, #0
 800ef02:	d07a      	beq.n	800effa <_dtoa_r+0x4ca>
 800ef04:	9b04      	ldr	r3, [sp, #16]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	dd36      	ble.n	800ef78 <_dtoa_r+0x448>
 800ef0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ef0e:	2200      	movs	r2, #0
 800ef10:	4b8c      	ldr	r3, [pc, #560]	; (800f144 <_dtoa_r+0x614>)
 800ef12:	f7f1 fb1d 	bl	8000550 <__aeabi_dmul>
 800ef16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef1a:	9e04      	ldr	r6, [sp, #16]
 800ef1c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ef20:	3501      	adds	r5, #1
 800ef22:	4628      	mov	r0, r5
 800ef24:	f7f1 faaa 	bl	800047c <__aeabi_i2d>
 800ef28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef2c:	f7f1 fb10 	bl	8000550 <__aeabi_dmul>
 800ef30:	2200      	movs	r2, #0
 800ef32:	4b85      	ldr	r3, [pc, #532]	; (800f148 <_dtoa_r+0x618>)
 800ef34:	f7f1 f956 	bl	80001e4 <__adddf3>
 800ef38:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800ef3c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ef40:	950b      	str	r5, [sp, #44]	; 0x2c
 800ef42:	2e00      	cmp	r6, #0
 800ef44:	d15c      	bne.n	800f000 <_dtoa_r+0x4d0>
 800ef46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	4b7f      	ldr	r3, [pc, #508]	; (800f14c <_dtoa_r+0x61c>)
 800ef4e:	f7f1 f947 	bl	80001e0 <__aeabi_dsub>
 800ef52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef54:	462b      	mov	r3, r5
 800ef56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef5a:	f7f1 fd89 	bl	8000a70 <__aeabi_dcmpgt>
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	f040 8281 	bne.w	800f466 <_dtoa_r+0x936>
 800ef64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef6a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ef6e:	f7f1 fd61 	bl	8000a34 <__aeabi_dcmplt>
 800ef72:	2800      	cmp	r0, #0
 800ef74:	f040 8275 	bne.w	800f462 <_dtoa_r+0x932>
 800ef78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ef7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	f2c0 814b 	blt.w	800f21e <_dtoa_r+0x6ee>
 800ef88:	f1ba 0f0e 	cmp.w	sl, #14
 800ef8c:	f300 8147 	bgt.w	800f21e <_dtoa_r+0x6ee>
 800ef90:	4b69      	ldr	r3, [pc, #420]	; (800f138 <_dtoa_r+0x608>)
 800ef92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef9e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	f280 80d7 	bge.w	800f154 <_dtoa_r+0x624>
 800efa6:	f1b8 0f00 	cmp.w	r8, #0
 800efaa:	f300 80d3 	bgt.w	800f154 <_dtoa_r+0x624>
 800efae:	f040 8257 	bne.w	800f460 <_dtoa_r+0x930>
 800efb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800efb6:	2200      	movs	r2, #0
 800efb8:	4b64      	ldr	r3, [pc, #400]	; (800f14c <_dtoa_r+0x61c>)
 800efba:	f7f1 fac9 	bl	8000550 <__aeabi_dmul>
 800efbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800efc2:	f7f1 fd4b 	bl	8000a5c <__aeabi_dcmpge>
 800efc6:	4646      	mov	r6, r8
 800efc8:	4647      	mov	r7, r8
 800efca:	2800      	cmp	r0, #0
 800efcc:	f040 822d 	bne.w	800f42a <_dtoa_r+0x8fa>
 800efd0:	9b06      	ldr	r3, [sp, #24]
 800efd2:	9a06      	ldr	r2, [sp, #24]
 800efd4:	1c5d      	adds	r5, r3, #1
 800efd6:	2331      	movs	r3, #49	; 0x31
 800efd8:	f10a 0a01 	add.w	sl, sl, #1
 800efdc:	7013      	strb	r3, [r2, #0]
 800efde:	e228      	b.n	800f432 <_dtoa_r+0x902>
 800efe0:	07f2      	lsls	r2, r6, #31
 800efe2:	d505      	bpl.n	800eff0 <_dtoa_r+0x4c0>
 800efe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800efe8:	f7f1 fab2 	bl	8000550 <__aeabi_dmul>
 800efec:	2301      	movs	r3, #1
 800efee:	3501      	adds	r5, #1
 800eff0:	1076      	asrs	r6, r6, #1
 800eff2:	3708      	adds	r7, #8
 800eff4:	e76e      	b.n	800eed4 <_dtoa_r+0x3a4>
 800eff6:	2502      	movs	r5, #2
 800eff8:	e771      	b.n	800eede <_dtoa_r+0x3ae>
 800effa:	4657      	mov	r7, sl
 800effc:	4646      	mov	r6, r8
 800effe:	e790      	b.n	800ef22 <_dtoa_r+0x3f2>
 800f000:	4b4d      	ldr	r3, [pc, #308]	; (800f138 <_dtoa_r+0x608>)
 800f002:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f006:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f00a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d048      	beq.n	800f0a2 <_dtoa_r+0x572>
 800f010:	4602      	mov	r2, r0
 800f012:	460b      	mov	r3, r1
 800f014:	2000      	movs	r0, #0
 800f016:	494e      	ldr	r1, [pc, #312]	; (800f150 <_dtoa_r+0x620>)
 800f018:	f7f1 fbc4 	bl	80007a4 <__aeabi_ddiv>
 800f01c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f020:	f7f1 f8de 	bl	80001e0 <__aeabi_dsub>
 800f024:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f028:	9d06      	ldr	r5, [sp, #24]
 800f02a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f02e:	f7f1 fd3f 	bl	8000ab0 <__aeabi_d2iz>
 800f032:	9011      	str	r0, [sp, #68]	; 0x44
 800f034:	f7f1 fa22 	bl	800047c <__aeabi_i2d>
 800f038:	4602      	mov	r2, r0
 800f03a:	460b      	mov	r3, r1
 800f03c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f040:	f7f1 f8ce 	bl	80001e0 <__aeabi_dsub>
 800f044:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f04a:	3330      	adds	r3, #48	; 0x30
 800f04c:	f805 3b01 	strb.w	r3, [r5], #1
 800f050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f054:	f7f1 fcee 	bl	8000a34 <__aeabi_dcmplt>
 800f058:	2800      	cmp	r0, #0
 800f05a:	d163      	bne.n	800f124 <_dtoa_r+0x5f4>
 800f05c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f060:	2000      	movs	r0, #0
 800f062:	4937      	ldr	r1, [pc, #220]	; (800f140 <_dtoa_r+0x610>)
 800f064:	f7f1 f8bc 	bl	80001e0 <__aeabi_dsub>
 800f068:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f06c:	f7f1 fce2 	bl	8000a34 <__aeabi_dcmplt>
 800f070:	2800      	cmp	r0, #0
 800f072:	f040 80b5 	bne.w	800f1e0 <_dtoa_r+0x6b0>
 800f076:	9b06      	ldr	r3, [sp, #24]
 800f078:	1aeb      	subs	r3, r5, r3
 800f07a:	429e      	cmp	r6, r3
 800f07c:	f77f af7c 	ble.w	800ef78 <_dtoa_r+0x448>
 800f080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f084:	2200      	movs	r2, #0
 800f086:	4b2f      	ldr	r3, [pc, #188]	; (800f144 <_dtoa_r+0x614>)
 800f088:	f7f1 fa62 	bl	8000550 <__aeabi_dmul>
 800f08c:	2200      	movs	r2, #0
 800f08e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f096:	4b2b      	ldr	r3, [pc, #172]	; (800f144 <_dtoa_r+0x614>)
 800f098:	f7f1 fa5a 	bl	8000550 <__aeabi_dmul>
 800f09c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0a0:	e7c3      	b.n	800f02a <_dtoa_r+0x4fa>
 800f0a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f0a6:	f7f1 fa53 	bl	8000550 <__aeabi_dmul>
 800f0aa:	9b06      	ldr	r3, [sp, #24]
 800f0ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f0b0:	199d      	adds	r5, r3, r6
 800f0b2:	461e      	mov	r6, r3
 800f0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0b8:	f7f1 fcfa 	bl	8000ab0 <__aeabi_d2iz>
 800f0bc:	9011      	str	r0, [sp, #68]	; 0x44
 800f0be:	f7f1 f9dd 	bl	800047c <__aeabi_i2d>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0ca:	f7f1 f889 	bl	80001e0 <__aeabi_dsub>
 800f0ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f0d4:	3330      	adds	r3, #48	; 0x30
 800f0d6:	f806 3b01 	strb.w	r3, [r6], #1
 800f0da:	42ae      	cmp	r6, r5
 800f0dc:	f04f 0200 	mov.w	r2, #0
 800f0e0:	d124      	bne.n	800f12c <_dtoa_r+0x5fc>
 800f0e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f0e6:	4b1a      	ldr	r3, [pc, #104]	; (800f150 <_dtoa_r+0x620>)
 800f0e8:	f7f1 f87c 	bl	80001e4 <__adddf3>
 800f0ec:	4602      	mov	r2, r0
 800f0ee:	460b      	mov	r3, r1
 800f0f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f0f4:	f7f1 fcbc 	bl	8000a70 <__aeabi_dcmpgt>
 800f0f8:	2800      	cmp	r0, #0
 800f0fa:	d171      	bne.n	800f1e0 <_dtoa_r+0x6b0>
 800f0fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f100:	2000      	movs	r0, #0
 800f102:	4913      	ldr	r1, [pc, #76]	; (800f150 <_dtoa_r+0x620>)
 800f104:	f7f1 f86c 	bl	80001e0 <__aeabi_dsub>
 800f108:	4602      	mov	r2, r0
 800f10a:	460b      	mov	r3, r1
 800f10c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f110:	f7f1 fc90 	bl	8000a34 <__aeabi_dcmplt>
 800f114:	2800      	cmp	r0, #0
 800f116:	f43f af2f 	beq.w	800ef78 <_dtoa_r+0x448>
 800f11a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f11e:	1e6a      	subs	r2, r5, #1
 800f120:	2b30      	cmp	r3, #48	; 0x30
 800f122:	d001      	beq.n	800f128 <_dtoa_r+0x5f8>
 800f124:	46ba      	mov	sl, r7
 800f126:	e04a      	b.n	800f1be <_dtoa_r+0x68e>
 800f128:	4615      	mov	r5, r2
 800f12a:	e7f6      	b.n	800f11a <_dtoa_r+0x5ea>
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <_dtoa_r+0x614>)
 800f12e:	f7f1 fa0f 	bl	8000550 <__aeabi_dmul>
 800f132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f136:	e7bd      	b.n	800f0b4 <_dtoa_r+0x584>
 800f138:	08011060 	.word	0x08011060
 800f13c:	08011038 	.word	0x08011038
 800f140:	3ff00000 	.word	0x3ff00000
 800f144:	40240000 	.word	0x40240000
 800f148:	401c0000 	.word	0x401c0000
 800f14c:	40140000 	.word	0x40140000
 800f150:	3fe00000 	.word	0x3fe00000
 800f154:	9d06      	ldr	r5, [sp, #24]
 800f156:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f15a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f15e:	4630      	mov	r0, r6
 800f160:	4639      	mov	r1, r7
 800f162:	f7f1 fb1f 	bl	80007a4 <__aeabi_ddiv>
 800f166:	f7f1 fca3 	bl	8000ab0 <__aeabi_d2iz>
 800f16a:	4681      	mov	r9, r0
 800f16c:	f7f1 f986 	bl	800047c <__aeabi_i2d>
 800f170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f174:	f7f1 f9ec 	bl	8000550 <__aeabi_dmul>
 800f178:	4602      	mov	r2, r0
 800f17a:	460b      	mov	r3, r1
 800f17c:	4630      	mov	r0, r6
 800f17e:	4639      	mov	r1, r7
 800f180:	f7f1 f82e 	bl	80001e0 <__aeabi_dsub>
 800f184:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800f188:	f805 6b01 	strb.w	r6, [r5], #1
 800f18c:	9e06      	ldr	r6, [sp, #24]
 800f18e:	4602      	mov	r2, r0
 800f190:	1bae      	subs	r6, r5, r6
 800f192:	45b0      	cmp	r8, r6
 800f194:	460b      	mov	r3, r1
 800f196:	d135      	bne.n	800f204 <_dtoa_r+0x6d4>
 800f198:	f7f1 f824 	bl	80001e4 <__adddf3>
 800f19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1a0:	4606      	mov	r6, r0
 800f1a2:	460f      	mov	r7, r1
 800f1a4:	f7f1 fc64 	bl	8000a70 <__aeabi_dcmpgt>
 800f1a8:	b9c8      	cbnz	r0, 800f1de <_dtoa_r+0x6ae>
 800f1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1ae:	4630      	mov	r0, r6
 800f1b0:	4639      	mov	r1, r7
 800f1b2:	f7f1 fc35 	bl	8000a20 <__aeabi_dcmpeq>
 800f1b6:	b110      	cbz	r0, 800f1be <_dtoa_r+0x68e>
 800f1b8:	f019 0f01 	tst.w	r9, #1
 800f1bc:	d10f      	bne.n	800f1de <_dtoa_r+0x6ae>
 800f1be:	4659      	mov	r1, fp
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 facc 	bl	800f75e <_Bfree>
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800f1ca:	702b      	strb	r3, [r5, #0]
 800f1cc:	f10a 0301 	add.w	r3, sl, #1
 800f1d0:	6013      	str	r3, [r2, #0]
 800f1d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f43f acf3 	beq.w	800ebc0 <_dtoa_r+0x90>
 800f1da:	601d      	str	r5, [r3, #0]
 800f1dc:	e4f0      	b.n	800ebc0 <_dtoa_r+0x90>
 800f1de:	4657      	mov	r7, sl
 800f1e0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f1e4:	1e6b      	subs	r3, r5, #1
 800f1e6:	2a39      	cmp	r2, #57	; 0x39
 800f1e8:	d106      	bne.n	800f1f8 <_dtoa_r+0x6c8>
 800f1ea:	9a06      	ldr	r2, [sp, #24]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d107      	bne.n	800f200 <_dtoa_r+0x6d0>
 800f1f0:	2330      	movs	r3, #48	; 0x30
 800f1f2:	7013      	strb	r3, [r2, #0]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	3701      	adds	r7, #1
 800f1f8:	781a      	ldrb	r2, [r3, #0]
 800f1fa:	3201      	adds	r2, #1
 800f1fc:	701a      	strb	r2, [r3, #0]
 800f1fe:	e791      	b.n	800f124 <_dtoa_r+0x5f4>
 800f200:	461d      	mov	r5, r3
 800f202:	e7ed      	b.n	800f1e0 <_dtoa_r+0x6b0>
 800f204:	2200      	movs	r2, #0
 800f206:	4b99      	ldr	r3, [pc, #612]	; (800f46c <_dtoa_r+0x93c>)
 800f208:	f7f1 f9a2 	bl	8000550 <__aeabi_dmul>
 800f20c:	2200      	movs	r2, #0
 800f20e:	2300      	movs	r3, #0
 800f210:	4606      	mov	r6, r0
 800f212:	460f      	mov	r7, r1
 800f214:	f7f1 fc04 	bl	8000a20 <__aeabi_dcmpeq>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d09e      	beq.n	800f15a <_dtoa_r+0x62a>
 800f21c:	e7cf      	b.n	800f1be <_dtoa_r+0x68e>
 800f21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f220:	2a00      	cmp	r2, #0
 800f222:	f000 8088 	beq.w	800f336 <_dtoa_r+0x806>
 800f226:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f228:	2a01      	cmp	r2, #1
 800f22a:	dc6d      	bgt.n	800f308 <_dtoa_r+0x7d8>
 800f22c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f22e:	2a00      	cmp	r2, #0
 800f230:	d066      	beq.n	800f300 <_dtoa_r+0x7d0>
 800f232:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f236:	464d      	mov	r5, r9
 800f238:	9e08      	ldr	r6, [sp, #32]
 800f23a:	9a07      	ldr	r2, [sp, #28]
 800f23c:	2101      	movs	r1, #1
 800f23e:	441a      	add	r2, r3
 800f240:	4620      	mov	r0, r4
 800f242:	4499      	add	r9, r3
 800f244:	9207      	str	r2, [sp, #28]
 800f246:	f000 fb2a 	bl	800f89e <__i2b>
 800f24a:	4607      	mov	r7, r0
 800f24c:	2d00      	cmp	r5, #0
 800f24e:	dd0b      	ble.n	800f268 <_dtoa_r+0x738>
 800f250:	9b07      	ldr	r3, [sp, #28]
 800f252:	2b00      	cmp	r3, #0
 800f254:	dd08      	ble.n	800f268 <_dtoa_r+0x738>
 800f256:	42ab      	cmp	r3, r5
 800f258:	bfa8      	it	ge
 800f25a:	462b      	movge	r3, r5
 800f25c:	9a07      	ldr	r2, [sp, #28]
 800f25e:	eba9 0903 	sub.w	r9, r9, r3
 800f262:	1aed      	subs	r5, r5, r3
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	9307      	str	r3, [sp, #28]
 800f268:	9b08      	ldr	r3, [sp, #32]
 800f26a:	b1eb      	cbz	r3, 800f2a8 <_dtoa_r+0x778>
 800f26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d065      	beq.n	800f33e <_dtoa_r+0x80e>
 800f272:	b18e      	cbz	r6, 800f298 <_dtoa_r+0x768>
 800f274:	4639      	mov	r1, r7
 800f276:	4632      	mov	r2, r6
 800f278:	4620      	mov	r0, r4
 800f27a:	f000 fbaf 	bl	800f9dc <__pow5mult>
 800f27e:	465a      	mov	r2, fp
 800f280:	4601      	mov	r1, r0
 800f282:	4607      	mov	r7, r0
 800f284:	4620      	mov	r0, r4
 800f286:	f000 fb13 	bl	800f8b0 <__multiply>
 800f28a:	4659      	mov	r1, fp
 800f28c:	900a      	str	r0, [sp, #40]	; 0x28
 800f28e:	4620      	mov	r0, r4
 800f290:	f000 fa65 	bl	800f75e <_Bfree>
 800f294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f296:	469b      	mov	fp, r3
 800f298:	9b08      	ldr	r3, [sp, #32]
 800f29a:	1b9a      	subs	r2, r3, r6
 800f29c:	d004      	beq.n	800f2a8 <_dtoa_r+0x778>
 800f29e:	4659      	mov	r1, fp
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f000 fb9b 	bl	800f9dc <__pow5mult>
 800f2a6:	4683      	mov	fp, r0
 800f2a8:	2101      	movs	r1, #1
 800f2aa:	4620      	mov	r0, r4
 800f2ac:	f000 faf7 	bl	800f89e <__i2b>
 800f2b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 81c6 	beq.w	800f646 <_dtoa_r+0xb16>
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	4601      	mov	r1, r0
 800f2be:	4620      	mov	r0, r4
 800f2c0:	f000 fb8c 	bl	800f9dc <__pow5mult>
 800f2c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	dc3e      	bgt.n	800f34a <_dtoa_r+0x81a>
 800f2cc:	9b02      	ldr	r3, [sp, #8]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d137      	bne.n	800f342 <_dtoa_r+0x812>
 800f2d2:	9b03      	ldr	r3, [sp, #12]
 800f2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d134      	bne.n	800f346 <_dtoa_r+0x816>
 800f2dc:	9b03      	ldr	r3, [sp, #12]
 800f2de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f2e2:	0d1b      	lsrs	r3, r3, #20
 800f2e4:	051b      	lsls	r3, r3, #20
 800f2e6:	b12b      	cbz	r3, 800f2f4 <_dtoa_r+0x7c4>
 800f2e8:	9b07      	ldr	r3, [sp, #28]
 800f2ea:	f109 0901 	add.w	r9, r9, #1
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	9307      	str	r3, [sp, #28]
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	9308      	str	r3, [sp, #32]
 800f2f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d128      	bne.n	800f34e <_dtoa_r+0x81e>
 800f2fc:	2001      	movs	r0, #1
 800f2fe:	e02e      	b.n	800f35e <_dtoa_r+0x82e>
 800f300:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f302:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f306:	e796      	b.n	800f236 <_dtoa_r+0x706>
 800f308:	9b08      	ldr	r3, [sp, #32]
 800f30a:	f108 36ff 	add.w	r6, r8, #4294967295
 800f30e:	42b3      	cmp	r3, r6
 800f310:	bfb7      	itett	lt
 800f312:	9b08      	ldrlt	r3, [sp, #32]
 800f314:	1b9e      	subge	r6, r3, r6
 800f316:	1af2      	sublt	r2, r6, r3
 800f318:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800f31a:	bfbf      	itttt	lt
 800f31c:	9608      	strlt	r6, [sp, #32]
 800f31e:	189b      	addlt	r3, r3, r2
 800f320:	930c      	strlt	r3, [sp, #48]	; 0x30
 800f322:	2600      	movlt	r6, #0
 800f324:	f1b8 0f00 	cmp.w	r8, #0
 800f328:	bfb9      	ittee	lt
 800f32a:	eba9 0508 	sublt.w	r5, r9, r8
 800f32e:	2300      	movlt	r3, #0
 800f330:	464d      	movge	r5, r9
 800f332:	4643      	movge	r3, r8
 800f334:	e781      	b.n	800f23a <_dtoa_r+0x70a>
 800f336:	9e08      	ldr	r6, [sp, #32]
 800f338:	464d      	mov	r5, r9
 800f33a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f33c:	e786      	b.n	800f24c <_dtoa_r+0x71c>
 800f33e:	9a08      	ldr	r2, [sp, #32]
 800f340:	e7ad      	b.n	800f29e <_dtoa_r+0x76e>
 800f342:	2300      	movs	r3, #0
 800f344:	e7d6      	b.n	800f2f4 <_dtoa_r+0x7c4>
 800f346:	9b02      	ldr	r3, [sp, #8]
 800f348:	e7d4      	b.n	800f2f4 <_dtoa_r+0x7c4>
 800f34a:	2300      	movs	r3, #0
 800f34c:	9308      	str	r3, [sp, #32]
 800f34e:	6933      	ldr	r3, [r6, #16]
 800f350:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f354:	6918      	ldr	r0, [r3, #16]
 800f356:	f000 fa54 	bl	800f802 <__hi0bits>
 800f35a:	f1c0 0020 	rsb	r0, r0, #32
 800f35e:	9b07      	ldr	r3, [sp, #28]
 800f360:	4418      	add	r0, r3
 800f362:	f010 001f 	ands.w	r0, r0, #31
 800f366:	d047      	beq.n	800f3f8 <_dtoa_r+0x8c8>
 800f368:	f1c0 0320 	rsb	r3, r0, #32
 800f36c:	2b04      	cmp	r3, #4
 800f36e:	dd3b      	ble.n	800f3e8 <_dtoa_r+0x8b8>
 800f370:	9b07      	ldr	r3, [sp, #28]
 800f372:	f1c0 001c 	rsb	r0, r0, #28
 800f376:	4481      	add	r9, r0
 800f378:	4405      	add	r5, r0
 800f37a:	4403      	add	r3, r0
 800f37c:	9307      	str	r3, [sp, #28]
 800f37e:	f1b9 0f00 	cmp.w	r9, #0
 800f382:	dd05      	ble.n	800f390 <_dtoa_r+0x860>
 800f384:	4659      	mov	r1, fp
 800f386:	464a      	mov	r2, r9
 800f388:	4620      	mov	r0, r4
 800f38a:	f000 fb75 	bl	800fa78 <__lshift>
 800f38e:	4683      	mov	fp, r0
 800f390:	9b07      	ldr	r3, [sp, #28]
 800f392:	2b00      	cmp	r3, #0
 800f394:	dd05      	ble.n	800f3a2 <_dtoa_r+0x872>
 800f396:	4631      	mov	r1, r6
 800f398:	461a      	mov	r2, r3
 800f39a:	4620      	mov	r0, r4
 800f39c:	f000 fb6c 	bl	800fa78 <__lshift>
 800f3a0:	4606      	mov	r6, r0
 800f3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3a4:	b353      	cbz	r3, 800f3fc <_dtoa_r+0x8cc>
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4658      	mov	r0, fp
 800f3aa:	f000 fbb9 	bl	800fb20 <__mcmp>
 800f3ae:	2800      	cmp	r0, #0
 800f3b0:	da24      	bge.n	800f3fc <_dtoa_r+0x8cc>
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	4659      	mov	r1, fp
 800f3b6:	220a      	movs	r2, #10
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	f000 f9e7 	bl	800f78c <__multadd>
 800f3be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f3c4:	4683      	mov	fp, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	f000 8144 	beq.w	800f654 <_dtoa_r+0xb24>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	4639      	mov	r1, r7
 800f3d0:	220a      	movs	r2, #10
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f9da 	bl	800f78c <__multadd>
 800f3d8:	9b04      	ldr	r3, [sp, #16]
 800f3da:	4607      	mov	r7, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	dc4d      	bgt.n	800f47c <_dtoa_r+0x94c>
 800f3e0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f3e2:	2b02      	cmp	r3, #2
 800f3e4:	dd4a      	ble.n	800f47c <_dtoa_r+0x94c>
 800f3e6:	e011      	b.n	800f40c <_dtoa_r+0x8dc>
 800f3e8:	d0c9      	beq.n	800f37e <_dtoa_r+0x84e>
 800f3ea:	9a07      	ldr	r2, [sp, #28]
 800f3ec:	331c      	adds	r3, #28
 800f3ee:	441a      	add	r2, r3
 800f3f0:	4499      	add	r9, r3
 800f3f2:	441d      	add	r5, r3
 800f3f4:	4613      	mov	r3, r2
 800f3f6:	e7c1      	b.n	800f37c <_dtoa_r+0x84c>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	e7f6      	b.n	800f3ea <_dtoa_r+0x8ba>
 800f3fc:	f1b8 0f00 	cmp.w	r8, #0
 800f400:	dc36      	bgt.n	800f470 <_dtoa_r+0x940>
 800f402:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f404:	2b02      	cmp	r3, #2
 800f406:	dd33      	ble.n	800f470 <_dtoa_r+0x940>
 800f408:	f8cd 8010 	str.w	r8, [sp, #16]
 800f40c:	9b04      	ldr	r3, [sp, #16]
 800f40e:	b963      	cbnz	r3, 800f42a <_dtoa_r+0x8fa>
 800f410:	4631      	mov	r1, r6
 800f412:	2205      	movs	r2, #5
 800f414:	4620      	mov	r0, r4
 800f416:	f000 f9b9 	bl	800f78c <__multadd>
 800f41a:	4601      	mov	r1, r0
 800f41c:	4606      	mov	r6, r0
 800f41e:	4658      	mov	r0, fp
 800f420:	f000 fb7e 	bl	800fb20 <__mcmp>
 800f424:	2800      	cmp	r0, #0
 800f426:	f73f add3 	bgt.w	800efd0 <_dtoa_r+0x4a0>
 800f42a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f42c:	9d06      	ldr	r5, [sp, #24]
 800f42e:	ea6f 0a03 	mvn.w	sl, r3
 800f432:	f04f 0900 	mov.w	r9, #0
 800f436:	4631      	mov	r1, r6
 800f438:	4620      	mov	r0, r4
 800f43a:	f000 f990 	bl	800f75e <_Bfree>
 800f43e:	2f00      	cmp	r7, #0
 800f440:	f43f aebd 	beq.w	800f1be <_dtoa_r+0x68e>
 800f444:	f1b9 0f00 	cmp.w	r9, #0
 800f448:	d005      	beq.n	800f456 <_dtoa_r+0x926>
 800f44a:	45b9      	cmp	r9, r7
 800f44c:	d003      	beq.n	800f456 <_dtoa_r+0x926>
 800f44e:	4649      	mov	r1, r9
 800f450:	4620      	mov	r0, r4
 800f452:	f000 f984 	bl	800f75e <_Bfree>
 800f456:	4639      	mov	r1, r7
 800f458:	4620      	mov	r0, r4
 800f45a:	f000 f980 	bl	800f75e <_Bfree>
 800f45e:	e6ae      	b.n	800f1be <_dtoa_r+0x68e>
 800f460:	2600      	movs	r6, #0
 800f462:	4637      	mov	r7, r6
 800f464:	e7e1      	b.n	800f42a <_dtoa_r+0x8fa>
 800f466:	46ba      	mov	sl, r7
 800f468:	4637      	mov	r7, r6
 800f46a:	e5b1      	b.n	800efd0 <_dtoa_r+0x4a0>
 800f46c:	40240000 	.word	0x40240000
 800f470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f472:	f8cd 8010 	str.w	r8, [sp, #16]
 800f476:	2b00      	cmp	r3, #0
 800f478:	f000 80f3 	beq.w	800f662 <_dtoa_r+0xb32>
 800f47c:	2d00      	cmp	r5, #0
 800f47e:	dd05      	ble.n	800f48c <_dtoa_r+0x95c>
 800f480:	4639      	mov	r1, r7
 800f482:	462a      	mov	r2, r5
 800f484:	4620      	mov	r0, r4
 800f486:	f000 faf7 	bl	800fa78 <__lshift>
 800f48a:	4607      	mov	r7, r0
 800f48c:	9b08      	ldr	r3, [sp, #32]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d04c      	beq.n	800f52c <_dtoa_r+0x9fc>
 800f492:	6879      	ldr	r1, [r7, #4]
 800f494:	4620      	mov	r0, r4
 800f496:	f000 f92e 	bl	800f6f6 <_Balloc>
 800f49a:	4605      	mov	r5, r0
 800f49c:	693a      	ldr	r2, [r7, #16]
 800f49e:	f107 010c 	add.w	r1, r7, #12
 800f4a2:	3202      	adds	r2, #2
 800f4a4:	0092      	lsls	r2, r2, #2
 800f4a6:	300c      	adds	r0, #12
 800f4a8:	f000 f91a 	bl	800f6e0 <memcpy>
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	4629      	mov	r1, r5
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	f000 fae1 	bl	800fa78 <__lshift>
 800f4b6:	46b9      	mov	r9, r7
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	9b06      	ldr	r3, [sp, #24]
 800f4bc:	9307      	str	r3, [sp, #28]
 800f4be:	9b02      	ldr	r3, [sp, #8]
 800f4c0:	f003 0301 	and.w	r3, r3, #1
 800f4c4:	9308      	str	r3, [sp, #32]
 800f4c6:	4631      	mov	r1, r6
 800f4c8:	4658      	mov	r0, fp
 800f4ca:	f7ff faa2 	bl	800ea12 <quorem>
 800f4ce:	4649      	mov	r1, r9
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f4d6:	4658      	mov	r0, fp
 800f4d8:	f000 fb22 	bl	800fb20 <__mcmp>
 800f4dc:	463a      	mov	r2, r7
 800f4de:	9002      	str	r0, [sp, #8]
 800f4e0:	4631      	mov	r1, r6
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 fb36 	bl	800fb54 <__mdiff>
 800f4e8:	68c3      	ldr	r3, [r0, #12]
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	bb03      	cbnz	r3, 800f530 <_dtoa_r+0xa00>
 800f4ee:	4601      	mov	r1, r0
 800f4f0:	9009      	str	r0, [sp, #36]	; 0x24
 800f4f2:	4658      	mov	r0, fp
 800f4f4:	f000 fb14 	bl	800fb20 <__mcmp>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	4620      	mov	r0, r4
 800f500:	9309      	str	r3, [sp, #36]	; 0x24
 800f502:	f000 f92c 	bl	800f75e <_Bfree>
 800f506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f508:	b9a3      	cbnz	r3, 800f534 <_dtoa_r+0xa04>
 800f50a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f50c:	b992      	cbnz	r2, 800f534 <_dtoa_r+0xa04>
 800f50e:	9a08      	ldr	r2, [sp, #32]
 800f510:	b982      	cbnz	r2, 800f534 <_dtoa_r+0xa04>
 800f512:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f516:	d029      	beq.n	800f56c <_dtoa_r+0xa3c>
 800f518:	9b02      	ldr	r3, [sp, #8]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	dd01      	ble.n	800f522 <_dtoa_r+0x9f2>
 800f51e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f522:	9b07      	ldr	r3, [sp, #28]
 800f524:	1c5d      	adds	r5, r3, #1
 800f526:	f883 8000 	strb.w	r8, [r3]
 800f52a:	e784      	b.n	800f436 <_dtoa_r+0x906>
 800f52c:	4638      	mov	r0, r7
 800f52e:	e7c2      	b.n	800f4b6 <_dtoa_r+0x986>
 800f530:	2301      	movs	r3, #1
 800f532:	e7e3      	b.n	800f4fc <_dtoa_r+0x9cc>
 800f534:	9a02      	ldr	r2, [sp, #8]
 800f536:	2a00      	cmp	r2, #0
 800f538:	db04      	blt.n	800f544 <_dtoa_r+0xa14>
 800f53a:	d123      	bne.n	800f584 <_dtoa_r+0xa54>
 800f53c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f53e:	bb0a      	cbnz	r2, 800f584 <_dtoa_r+0xa54>
 800f540:	9a08      	ldr	r2, [sp, #32]
 800f542:	b9fa      	cbnz	r2, 800f584 <_dtoa_r+0xa54>
 800f544:	2b00      	cmp	r3, #0
 800f546:	ddec      	ble.n	800f522 <_dtoa_r+0x9f2>
 800f548:	4659      	mov	r1, fp
 800f54a:	2201      	movs	r2, #1
 800f54c:	4620      	mov	r0, r4
 800f54e:	f000 fa93 	bl	800fa78 <__lshift>
 800f552:	4631      	mov	r1, r6
 800f554:	4683      	mov	fp, r0
 800f556:	f000 fae3 	bl	800fb20 <__mcmp>
 800f55a:	2800      	cmp	r0, #0
 800f55c:	dc03      	bgt.n	800f566 <_dtoa_r+0xa36>
 800f55e:	d1e0      	bne.n	800f522 <_dtoa_r+0x9f2>
 800f560:	f018 0f01 	tst.w	r8, #1
 800f564:	d0dd      	beq.n	800f522 <_dtoa_r+0x9f2>
 800f566:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f56a:	d1d8      	bne.n	800f51e <_dtoa_r+0x9ee>
 800f56c:	9b07      	ldr	r3, [sp, #28]
 800f56e:	9a07      	ldr	r2, [sp, #28]
 800f570:	1c5d      	adds	r5, r3, #1
 800f572:	2339      	movs	r3, #57	; 0x39
 800f574:	7013      	strb	r3, [r2, #0]
 800f576:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f57a:	1e6a      	subs	r2, r5, #1
 800f57c:	2b39      	cmp	r3, #57	; 0x39
 800f57e:	d04d      	beq.n	800f61c <_dtoa_r+0xaec>
 800f580:	3301      	adds	r3, #1
 800f582:	e052      	b.n	800f62a <_dtoa_r+0xafa>
 800f584:	9a07      	ldr	r2, [sp, #28]
 800f586:	2b00      	cmp	r3, #0
 800f588:	f102 0501 	add.w	r5, r2, #1
 800f58c:	dd06      	ble.n	800f59c <_dtoa_r+0xa6c>
 800f58e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f592:	d0eb      	beq.n	800f56c <_dtoa_r+0xa3c>
 800f594:	f108 0801 	add.w	r8, r8, #1
 800f598:	9b07      	ldr	r3, [sp, #28]
 800f59a:	e7c4      	b.n	800f526 <_dtoa_r+0x9f6>
 800f59c:	9b06      	ldr	r3, [sp, #24]
 800f59e:	9a04      	ldr	r2, [sp, #16]
 800f5a0:	1aeb      	subs	r3, r5, r3
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f5a8:	d021      	beq.n	800f5ee <_dtoa_r+0xabe>
 800f5aa:	4659      	mov	r1, fp
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	220a      	movs	r2, #10
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	f000 f8eb 	bl	800f78c <__multadd>
 800f5b6:	45b9      	cmp	r9, r7
 800f5b8:	4683      	mov	fp, r0
 800f5ba:	f04f 0300 	mov.w	r3, #0
 800f5be:	f04f 020a 	mov.w	r2, #10
 800f5c2:	4649      	mov	r1, r9
 800f5c4:	4620      	mov	r0, r4
 800f5c6:	d105      	bne.n	800f5d4 <_dtoa_r+0xaa4>
 800f5c8:	f000 f8e0 	bl	800f78c <__multadd>
 800f5cc:	4681      	mov	r9, r0
 800f5ce:	4607      	mov	r7, r0
 800f5d0:	9507      	str	r5, [sp, #28]
 800f5d2:	e778      	b.n	800f4c6 <_dtoa_r+0x996>
 800f5d4:	f000 f8da 	bl	800f78c <__multadd>
 800f5d8:	4639      	mov	r1, r7
 800f5da:	4681      	mov	r9, r0
 800f5dc:	2300      	movs	r3, #0
 800f5de:	220a      	movs	r2, #10
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	f000 f8d3 	bl	800f78c <__multadd>
 800f5e6:	4607      	mov	r7, r0
 800f5e8:	e7f2      	b.n	800f5d0 <_dtoa_r+0xaa0>
 800f5ea:	f04f 0900 	mov.w	r9, #0
 800f5ee:	4659      	mov	r1, fp
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f000 fa40 	bl	800fa78 <__lshift>
 800f5f8:	4631      	mov	r1, r6
 800f5fa:	4683      	mov	fp, r0
 800f5fc:	f000 fa90 	bl	800fb20 <__mcmp>
 800f600:	2800      	cmp	r0, #0
 800f602:	dcb8      	bgt.n	800f576 <_dtoa_r+0xa46>
 800f604:	d102      	bne.n	800f60c <_dtoa_r+0xadc>
 800f606:	f018 0f01 	tst.w	r8, #1
 800f60a:	d1b4      	bne.n	800f576 <_dtoa_r+0xa46>
 800f60c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f610:	1e6a      	subs	r2, r5, #1
 800f612:	2b30      	cmp	r3, #48	; 0x30
 800f614:	f47f af0f 	bne.w	800f436 <_dtoa_r+0x906>
 800f618:	4615      	mov	r5, r2
 800f61a:	e7f7      	b.n	800f60c <_dtoa_r+0xadc>
 800f61c:	9b06      	ldr	r3, [sp, #24]
 800f61e:	4293      	cmp	r3, r2
 800f620:	d105      	bne.n	800f62e <_dtoa_r+0xafe>
 800f622:	2331      	movs	r3, #49	; 0x31
 800f624:	9a06      	ldr	r2, [sp, #24]
 800f626:	f10a 0a01 	add.w	sl, sl, #1
 800f62a:	7013      	strb	r3, [r2, #0]
 800f62c:	e703      	b.n	800f436 <_dtoa_r+0x906>
 800f62e:	4615      	mov	r5, r2
 800f630:	e7a1      	b.n	800f576 <_dtoa_r+0xa46>
 800f632:	4b17      	ldr	r3, [pc, #92]	; (800f690 <_dtoa_r+0xb60>)
 800f634:	f7ff bae1 	b.w	800ebfa <_dtoa_r+0xca>
 800f638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f47f aabb 	bne.w	800ebb6 <_dtoa_r+0x86>
 800f640:	4b14      	ldr	r3, [pc, #80]	; (800f694 <_dtoa_r+0xb64>)
 800f642:	f7ff bada 	b.w	800ebfa <_dtoa_r+0xca>
 800f646:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f648:	2b01      	cmp	r3, #1
 800f64a:	f77f ae3f 	ble.w	800f2cc <_dtoa_r+0x79c>
 800f64e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f650:	9308      	str	r3, [sp, #32]
 800f652:	e653      	b.n	800f2fc <_dtoa_r+0x7cc>
 800f654:	9b04      	ldr	r3, [sp, #16]
 800f656:	2b00      	cmp	r3, #0
 800f658:	dc03      	bgt.n	800f662 <_dtoa_r+0xb32>
 800f65a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f65c:	2b02      	cmp	r3, #2
 800f65e:	f73f aed5 	bgt.w	800f40c <_dtoa_r+0x8dc>
 800f662:	9d06      	ldr	r5, [sp, #24]
 800f664:	4631      	mov	r1, r6
 800f666:	4658      	mov	r0, fp
 800f668:	f7ff f9d3 	bl	800ea12 <quorem>
 800f66c:	9b06      	ldr	r3, [sp, #24]
 800f66e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f672:	f805 8b01 	strb.w	r8, [r5], #1
 800f676:	9a04      	ldr	r2, [sp, #16]
 800f678:	1aeb      	subs	r3, r5, r3
 800f67a:	429a      	cmp	r2, r3
 800f67c:	ddb5      	ble.n	800f5ea <_dtoa_r+0xaba>
 800f67e:	4659      	mov	r1, fp
 800f680:	2300      	movs	r3, #0
 800f682:	220a      	movs	r2, #10
 800f684:	4620      	mov	r0, r4
 800f686:	f000 f881 	bl	800f78c <__multadd>
 800f68a:	4683      	mov	fp, r0
 800f68c:	e7ea      	b.n	800f664 <_dtoa_r+0xb34>
 800f68e:	bf00      	nop
 800f690:	08010ede 	.word	0x08010ede
 800f694:	08011028 	.word	0x08011028

0800f698 <_localeconv_r>:
 800f698:	4b04      	ldr	r3, [pc, #16]	; (800f6ac <_localeconv_r+0x14>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	6a18      	ldr	r0, [r3, #32]
 800f69e:	4b04      	ldr	r3, [pc, #16]	; (800f6b0 <_localeconv_r+0x18>)
 800f6a0:	2800      	cmp	r0, #0
 800f6a2:	bf08      	it	eq
 800f6a4:	4618      	moveq	r0, r3
 800f6a6:	30f0      	adds	r0, #240	; 0xf0
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	20000060 	.word	0x20000060
 800f6b0:	200000c4 	.word	0x200000c4

0800f6b4 <malloc>:
 800f6b4:	4b02      	ldr	r3, [pc, #8]	; (800f6c0 <malloc+0xc>)
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	6818      	ldr	r0, [r3, #0]
 800f6ba:	f000 bb53 	b.w	800fd64 <_malloc_r>
 800f6be:	bf00      	nop
 800f6c0:	20000060 	.word	0x20000060

0800f6c4 <memchr>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	b2c9      	uxtb	r1, r1
 800f6c8:	4402      	add	r2, r0
 800f6ca:	4290      	cmp	r0, r2
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	d101      	bne.n	800f6d4 <memchr+0x10>
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	e003      	b.n	800f6dc <memchr+0x18>
 800f6d4:	781c      	ldrb	r4, [r3, #0]
 800f6d6:	3001      	adds	r0, #1
 800f6d8:	428c      	cmp	r4, r1
 800f6da:	d1f6      	bne.n	800f6ca <memchr+0x6>
 800f6dc:	4618      	mov	r0, r3
 800f6de:	bd10      	pop	{r4, pc}

0800f6e0 <memcpy>:
 800f6e0:	b510      	push	{r4, lr}
 800f6e2:	1e43      	subs	r3, r0, #1
 800f6e4:	440a      	add	r2, r1
 800f6e6:	4291      	cmp	r1, r2
 800f6e8:	d100      	bne.n	800f6ec <memcpy+0xc>
 800f6ea:	bd10      	pop	{r4, pc}
 800f6ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f6f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f6f4:	e7f7      	b.n	800f6e6 <memcpy+0x6>

0800f6f6 <_Balloc>:
 800f6f6:	b570      	push	{r4, r5, r6, lr}
 800f6f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f6fa:	4604      	mov	r4, r0
 800f6fc:	460e      	mov	r6, r1
 800f6fe:	b93d      	cbnz	r5, 800f710 <_Balloc+0x1a>
 800f700:	2010      	movs	r0, #16
 800f702:	f7ff ffd7 	bl	800f6b4 <malloc>
 800f706:	6260      	str	r0, [r4, #36]	; 0x24
 800f708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f70c:	6005      	str	r5, [r0, #0]
 800f70e:	60c5      	str	r5, [r0, #12]
 800f710:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f712:	68eb      	ldr	r3, [r5, #12]
 800f714:	b183      	cbz	r3, 800f738 <_Balloc+0x42>
 800f716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f718:	68db      	ldr	r3, [r3, #12]
 800f71a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f71e:	b9b8      	cbnz	r0, 800f750 <_Balloc+0x5a>
 800f720:	2101      	movs	r1, #1
 800f722:	fa01 f506 	lsl.w	r5, r1, r6
 800f726:	1d6a      	adds	r2, r5, #5
 800f728:	0092      	lsls	r2, r2, #2
 800f72a:	4620      	mov	r0, r4
 800f72c:	f000 fabf 	bl	800fcae <_calloc_r>
 800f730:	b160      	cbz	r0, 800f74c <_Balloc+0x56>
 800f732:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f736:	e00e      	b.n	800f756 <_Balloc+0x60>
 800f738:	2221      	movs	r2, #33	; 0x21
 800f73a:	2104      	movs	r1, #4
 800f73c:	4620      	mov	r0, r4
 800f73e:	f000 fab6 	bl	800fcae <_calloc_r>
 800f742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f744:	60e8      	str	r0, [r5, #12]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1e4      	bne.n	800f716 <_Balloc+0x20>
 800f74c:	2000      	movs	r0, #0
 800f74e:	bd70      	pop	{r4, r5, r6, pc}
 800f750:	6802      	ldr	r2, [r0, #0]
 800f752:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f756:	2300      	movs	r3, #0
 800f758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f75c:	e7f7      	b.n	800f74e <_Balloc+0x58>

0800f75e <_Bfree>:
 800f75e:	b570      	push	{r4, r5, r6, lr}
 800f760:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f762:	4606      	mov	r6, r0
 800f764:	460d      	mov	r5, r1
 800f766:	b93c      	cbnz	r4, 800f778 <_Bfree+0x1a>
 800f768:	2010      	movs	r0, #16
 800f76a:	f7ff ffa3 	bl	800f6b4 <malloc>
 800f76e:	6270      	str	r0, [r6, #36]	; 0x24
 800f770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f774:	6004      	str	r4, [r0, #0]
 800f776:	60c4      	str	r4, [r0, #12]
 800f778:	b13d      	cbz	r5, 800f78a <_Bfree+0x2c>
 800f77a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f77c:	686a      	ldr	r2, [r5, #4]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f784:	6029      	str	r1, [r5, #0]
 800f786:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f78a:	bd70      	pop	{r4, r5, r6, pc}

0800f78c <__multadd>:
 800f78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f790:	461f      	mov	r7, r3
 800f792:	4606      	mov	r6, r0
 800f794:	460c      	mov	r4, r1
 800f796:	2300      	movs	r3, #0
 800f798:	690d      	ldr	r5, [r1, #16]
 800f79a:	f101 0c14 	add.w	ip, r1, #20
 800f79e:	f8dc 0000 	ldr.w	r0, [ip]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	b281      	uxth	r1, r0
 800f7a6:	fb02 7101 	mla	r1, r2, r1, r7
 800f7aa:	0c00      	lsrs	r0, r0, #16
 800f7ac:	0c0f      	lsrs	r7, r1, #16
 800f7ae:	fb02 7000 	mla	r0, r2, r0, r7
 800f7b2:	b289      	uxth	r1, r1
 800f7b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f7b8:	429d      	cmp	r5, r3
 800f7ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f7be:	f84c 1b04 	str.w	r1, [ip], #4
 800f7c2:	dcec      	bgt.n	800f79e <__multadd+0x12>
 800f7c4:	b1d7      	cbz	r7, 800f7fc <__multadd+0x70>
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	42ab      	cmp	r3, r5
 800f7ca:	dc12      	bgt.n	800f7f2 <__multadd+0x66>
 800f7cc:	6861      	ldr	r1, [r4, #4]
 800f7ce:	4630      	mov	r0, r6
 800f7d0:	3101      	adds	r1, #1
 800f7d2:	f7ff ff90 	bl	800f6f6 <_Balloc>
 800f7d6:	4680      	mov	r8, r0
 800f7d8:	6922      	ldr	r2, [r4, #16]
 800f7da:	f104 010c 	add.w	r1, r4, #12
 800f7de:	3202      	adds	r2, #2
 800f7e0:	0092      	lsls	r2, r2, #2
 800f7e2:	300c      	adds	r0, #12
 800f7e4:	f7ff ff7c 	bl	800f6e0 <memcpy>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f7ff ffb7 	bl	800f75e <_Bfree>
 800f7f0:	4644      	mov	r4, r8
 800f7f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f7f6:	3501      	adds	r5, #1
 800f7f8:	615f      	str	r7, [r3, #20]
 800f7fa:	6125      	str	r5, [r4, #16]
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f802 <__hi0bits>:
 800f802:	0c02      	lsrs	r2, r0, #16
 800f804:	0412      	lsls	r2, r2, #16
 800f806:	4603      	mov	r3, r0
 800f808:	b9b2      	cbnz	r2, 800f838 <__hi0bits+0x36>
 800f80a:	0403      	lsls	r3, r0, #16
 800f80c:	2010      	movs	r0, #16
 800f80e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f812:	bf04      	itt	eq
 800f814:	021b      	lsleq	r3, r3, #8
 800f816:	3008      	addeq	r0, #8
 800f818:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f81c:	bf04      	itt	eq
 800f81e:	011b      	lsleq	r3, r3, #4
 800f820:	3004      	addeq	r0, #4
 800f822:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f826:	bf04      	itt	eq
 800f828:	009b      	lsleq	r3, r3, #2
 800f82a:	3002      	addeq	r0, #2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	db06      	blt.n	800f83e <__hi0bits+0x3c>
 800f830:	005b      	lsls	r3, r3, #1
 800f832:	d503      	bpl.n	800f83c <__hi0bits+0x3a>
 800f834:	3001      	adds	r0, #1
 800f836:	4770      	bx	lr
 800f838:	2000      	movs	r0, #0
 800f83a:	e7e8      	b.n	800f80e <__hi0bits+0xc>
 800f83c:	2020      	movs	r0, #32
 800f83e:	4770      	bx	lr

0800f840 <__lo0bits>:
 800f840:	6803      	ldr	r3, [r0, #0]
 800f842:	4601      	mov	r1, r0
 800f844:	f013 0207 	ands.w	r2, r3, #7
 800f848:	d00b      	beq.n	800f862 <__lo0bits+0x22>
 800f84a:	07da      	lsls	r2, r3, #31
 800f84c:	d423      	bmi.n	800f896 <__lo0bits+0x56>
 800f84e:	0798      	lsls	r0, r3, #30
 800f850:	bf49      	itett	mi
 800f852:	085b      	lsrmi	r3, r3, #1
 800f854:	089b      	lsrpl	r3, r3, #2
 800f856:	2001      	movmi	r0, #1
 800f858:	600b      	strmi	r3, [r1, #0]
 800f85a:	bf5c      	itt	pl
 800f85c:	600b      	strpl	r3, [r1, #0]
 800f85e:	2002      	movpl	r0, #2
 800f860:	4770      	bx	lr
 800f862:	b298      	uxth	r0, r3
 800f864:	b9a8      	cbnz	r0, 800f892 <__lo0bits+0x52>
 800f866:	2010      	movs	r0, #16
 800f868:	0c1b      	lsrs	r3, r3, #16
 800f86a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f86e:	bf04      	itt	eq
 800f870:	0a1b      	lsreq	r3, r3, #8
 800f872:	3008      	addeq	r0, #8
 800f874:	071a      	lsls	r2, r3, #28
 800f876:	bf04      	itt	eq
 800f878:	091b      	lsreq	r3, r3, #4
 800f87a:	3004      	addeq	r0, #4
 800f87c:	079a      	lsls	r2, r3, #30
 800f87e:	bf04      	itt	eq
 800f880:	089b      	lsreq	r3, r3, #2
 800f882:	3002      	addeq	r0, #2
 800f884:	07da      	lsls	r2, r3, #31
 800f886:	d402      	bmi.n	800f88e <__lo0bits+0x4e>
 800f888:	085b      	lsrs	r3, r3, #1
 800f88a:	d006      	beq.n	800f89a <__lo0bits+0x5a>
 800f88c:	3001      	adds	r0, #1
 800f88e:	600b      	str	r3, [r1, #0]
 800f890:	4770      	bx	lr
 800f892:	4610      	mov	r0, r2
 800f894:	e7e9      	b.n	800f86a <__lo0bits+0x2a>
 800f896:	2000      	movs	r0, #0
 800f898:	4770      	bx	lr
 800f89a:	2020      	movs	r0, #32
 800f89c:	4770      	bx	lr

0800f89e <__i2b>:
 800f89e:	b510      	push	{r4, lr}
 800f8a0:	460c      	mov	r4, r1
 800f8a2:	2101      	movs	r1, #1
 800f8a4:	f7ff ff27 	bl	800f6f6 <_Balloc>
 800f8a8:	2201      	movs	r2, #1
 800f8aa:	6144      	str	r4, [r0, #20]
 800f8ac:	6102      	str	r2, [r0, #16]
 800f8ae:	bd10      	pop	{r4, pc}

0800f8b0 <__multiply>:
 800f8b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b4:	4614      	mov	r4, r2
 800f8b6:	690a      	ldr	r2, [r1, #16]
 800f8b8:	6923      	ldr	r3, [r4, #16]
 800f8ba:	4688      	mov	r8, r1
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	bfbe      	ittt	lt
 800f8c0:	460b      	movlt	r3, r1
 800f8c2:	46a0      	movlt	r8, r4
 800f8c4:	461c      	movlt	r4, r3
 800f8c6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8ca:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f8ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8d2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8d6:	eb07 0609 	add.w	r6, r7, r9
 800f8da:	42b3      	cmp	r3, r6
 800f8dc:	bfb8      	it	lt
 800f8de:	3101      	addlt	r1, #1
 800f8e0:	f7ff ff09 	bl	800f6f6 <_Balloc>
 800f8e4:	f100 0514 	add.w	r5, r0, #20
 800f8e8:	462b      	mov	r3, r5
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f8f0:	4573      	cmp	r3, lr
 800f8f2:	d316      	bcc.n	800f922 <__multiply+0x72>
 800f8f4:	f104 0214 	add.w	r2, r4, #20
 800f8f8:	f108 0114 	add.w	r1, r8, #20
 800f8fc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f900:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f904:	9300      	str	r3, [sp, #0]
 800f906:	9b00      	ldr	r3, [sp, #0]
 800f908:	9201      	str	r2, [sp, #4]
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d80c      	bhi.n	800f928 <__multiply+0x78>
 800f90e:	2e00      	cmp	r6, #0
 800f910:	dd03      	ble.n	800f91a <__multiply+0x6a>
 800f912:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f916:	2b00      	cmp	r3, #0
 800f918:	d05d      	beq.n	800f9d6 <__multiply+0x126>
 800f91a:	6106      	str	r6, [r0, #16]
 800f91c:	b003      	add	sp, #12
 800f91e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f922:	f843 2b04 	str.w	r2, [r3], #4
 800f926:	e7e3      	b.n	800f8f0 <__multiply+0x40>
 800f928:	f8b2 b000 	ldrh.w	fp, [r2]
 800f92c:	f1bb 0f00 	cmp.w	fp, #0
 800f930:	d023      	beq.n	800f97a <__multiply+0xca>
 800f932:	4689      	mov	r9, r1
 800f934:	46ac      	mov	ip, r5
 800f936:	f04f 0800 	mov.w	r8, #0
 800f93a:	f859 4b04 	ldr.w	r4, [r9], #4
 800f93e:	f8dc a000 	ldr.w	sl, [ip]
 800f942:	b2a3      	uxth	r3, r4
 800f944:	fa1f fa8a 	uxth.w	sl, sl
 800f948:	fb0b a303 	mla	r3, fp, r3, sl
 800f94c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f950:	f8dc 4000 	ldr.w	r4, [ip]
 800f954:	4443      	add	r3, r8
 800f956:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f95a:	fb0b 840a 	mla	r4, fp, sl, r8
 800f95e:	46e2      	mov	sl, ip
 800f960:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f964:	b29b      	uxth	r3, r3
 800f966:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f96a:	454f      	cmp	r7, r9
 800f96c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f970:	f84a 3b04 	str.w	r3, [sl], #4
 800f974:	d82b      	bhi.n	800f9ce <__multiply+0x11e>
 800f976:	f8cc 8004 	str.w	r8, [ip, #4]
 800f97a:	9b01      	ldr	r3, [sp, #4]
 800f97c:	3204      	adds	r2, #4
 800f97e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f982:	f1ba 0f00 	cmp.w	sl, #0
 800f986:	d020      	beq.n	800f9ca <__multiply+0x11a>
 800f988:	4689      	mov	r9, r1
 800f98a:	46a8      	mov	r8, r5
 800f98c:	f04f 0b00 	mov.w	fp, #0
 800f990:	682b      	ldr	r3, [r5, #0]
 800f992:	f8b9 c000 	ldrh.w	ip, [r9]
 800f996:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f99a:	b29b      	uxth	r3, r3
 800f99c:	fb0a 440c 	mla	r4, sl, ip, r4
 800f9a0:	46c4      	mov	ip, r8
 800f9a2:	445c      	add	r4, fp
 800f9a4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f9a8:	f84c 3b04 	str.w	r3, [ip], #4
 800f9ac:	f859 3b04 	ldr.w	r3, [r9], #4
 800f9b0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f9b4:	0c1b      	lsrs	r3, r3, #16
 800f9b6:	fb0a b303 	mla	r3, sl, r3, fp
 800f9ba:	454f      	cmp	r7, r9
 800f9bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f9c0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f9c4:	d805      	bhi.n	800f9d2 <__multiply+0x122>
 800f9c6:	f8c8 3004 	str.w	r3, [r8, #4]
 800f9ca:	3504      	adds	r5, #4
 800f9cc:	e79b      	b.n	800f906 <__multiply+0x56>
 800f9ce:	46d4      	mov	ip, sl
 800f9d0:	e7b3      	b.n	800f93a <__multiply+0x8a>
 800f9d2:	46e0      	mov	r8, ip
 800f9d4:	e7dd      	b.n	800f992 <__multiply+0xe2>
 800f9d6:	3e01      	subs	r6, #1
 800f9d8:	e799      	b.n	800f90e <__multiply+0x5e>
	...

0800f9dc <__pow5mult>:
 800f9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9e0:	4615      	mov	r5, r2
 800f9e2:	f012 0203 	ands.w	r2, r2, #3
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	460f      	mov	r7, r1
 800f9ea:	d007      	beq.n	800f9fc <__pow5mult+0x20>
 800f9ec:	4c21      	ldr	r4, [pc, #132]	; (800fa74 <__pow5mult+0x98>)
 800f9ee:	3a01      	subs	r2, #1
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9f6:	f7ff fec9 	bl	800f78c <__multadd>
 800f9fa:	4607      	mov	r7, r0
 800f9fc:	10ad      	asrs	r5, r5, #2
 800f9fe:	d035      	beq.n	800fa6c <__pow5mult+0x90>
 800fa00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa02:	b93c      	cbnz	r4, 800fa14 <__pow5mult+0x38>
 800fa04:	2010      	movs	r0, #16
 800fa06:	f7ff fe55 	bl	800f6b4 <malloc>
 800fa0a:	6270      	str	r0, [r6, #36]	; 0x24
 800fa0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa10:	6004      	str	r4, [r0, #0]
 800fa12:	60c4      	str	r4, [r0, #12]
 800fa14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa1c:	b94c      	cbnz	r4, 800fa32 <__pow5mult+0x56>
 800fa1e:	f240 2171 	movw	r1, #625	; 0x271
 800fa22:	4630      	mov	r0, r6
 800fa24:	f7ff ff3b 	bl	800f89e <__i2b>
 800fa28:	2300      	movs	r3, #0
 800fa2a:	4604      	mov	r4, r0
 800fa2c:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa30:	6003      	str	r3, [r0, #0]
 800fa32:	f04f 0800 	mov.w	r8, #0
 800fa36:	07eb      	lsls	r3, r5, #31
 800fa38:	d50a      	bpl.n	800fa50 <__pow5mult+0x74>
 800fa3a:	4639      	mov	r1, r7
 800fa3c:	4622      	mov	r2, r4
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f7ff ff36 	bl	800f8b0 <__multiply>
 800fa44:	4681      	mov	r9, r0
 800fa46:	4639      	mov	r1, r7
 800fa48:	4630      	mov	r0, r6
 800fa4a:	f7ff fe88 	bl	800f75e <_Bfree>
 800fa4e:	464f      	mov	r7, r9
 800fa50:	106d      	asrs	r5, r5, #1
 800fa52:	d00b      	beq.n	800fa6c <__pow5mult+0x90>
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	b938      	cbnz	r0, 800fa68 <__pow5mult+0x8c>
 800fa58:	4622      	mov	r2, r4
 800fa5a:	4621      	mov	r1, r4
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f7ff ff27 	bl	800f8b0 <__multiply>
 800fa62:	6020      	str	r0, [r4, #0]
 800fa64:	f8c0 8000 	str.w	r8, [r0]
 800fa68:	4604      	mov	r4, r0
 800fa6a:	e7e4      	b.n	800fa36 <__pow5mult+0x5a>
 800fa6c:	4638      	mov	r0, r7
 800fa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa72:	bf00      	nop
 800fa74:	08011128 	.word	0x08011128

0800fa78 <__lshift>:
 800fa78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa7c:	460c      	mov	r4, r1
 800fa7e:	4607      	mov	r7, r0
 800fa80:	4616      	mov	r6, r2
 800fa82:	6923      	ldr	r3, [r4, #16]
 800fa84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa88:	eb0a 0903 	add.w	r9, sl, r3
 800fa8c:	6849      	ldr	r1, [r1, #4]
 800fa8e:	68a3      	ldr	r3, [r4, #8]
 800fa90:	f109 0501 	add.w	r5, r9, #1
 800fa94:	42ab      	cmp	r3, r5
 800fa96:	db32      	blt.n	800fafe <__lshift+0x86>
 800fa98:	4638      	mov	r0, r7
 800fa9a:	f7ff fe2c 	bl	800f6f6 <_Balloc>
 800fa9e:	2300      	movs	r3, #0
 800faa0:	4680      	mov	r8, r0
 800faa2:	461a      	mov	r2, r3
 800faa4:	f100 0114 	add.w	r1, r0, #20
 800faa8:	4553      	cmp	r3, sl
 800faaa:	db2b      	blt.n	800fb04 <__lshift+0x8c>
 800faac:	6920      	ldr	r0, [r4, #16]
 800faae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fab2:	f104 0314 	add.w	r3, r4, #20
 800fab6:	f016 021f 	ands.w	r2, r6, #31
 800faba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fabe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fac2:	d025      	beq.n	800fb10 <__lshift+0x98>
 800fac4:	2000      	movs	r0, #0
 800fac6:	f1c2 0e20 	rsb	lr, r2, #32
 800faca:	468a      	mov	sl, r1
 800facc:	681e      	ldr	r6, [r3, #0]
 800face:	4096      	lsls	r6, r2
 800fad0:	4330      	orrs	r0, r6
 800fad2:	f84a 0b04 	str.w	r0, [sl], #4
 800fad6:	f853 0b04 	ldr.w	r0, [r3], #4
 800fada:	459c      	cmp	ip, r3
 800fadc:	fa20 f00e 	lsr.w	r0, r0, lr
 800fae0:	d814      	bhi.n	800fb0c <__lshift+0x94>
 800fae2:	6048      	str	r0, [r1, #4]
 800fae4:	b108      	cbz	r0, 800faea <__lshift+0x72>
 800fae6:	f109 0502 	add.w	r5, r9, #2
 800faea:	3d01      	subs	r5, #1
 800faec:	4638      	mov	r0, r7
 800faee:	f8c8 5010 	str.w	r5, [r8, #16]
 800faf2:	4621      	mov	r1, r4
 800faf4:	f7ff fe33 	bl	800f75e <_Bfree>
 800faf8:	4640      	mov	r0, r8
 800fafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fafe:	3101      	adds	r1, #1
 800fb00:	005b      	lsls	r3, r3, #1
 800fb02:	e7c7      	b.n	800fa94 <__lshift+0x1c>
 800fb04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	e7cd      	b.n	800faa8 <__lshift+0x30>
 800fb0c:	4651      	mov	r1, sl
 800fb0e:	e7dc      	b.n	800faca <__lshift+0x52>
 800fb10:	3904      	subs	r1, #4
 800fb12:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb16:	459c      	cmp	ip, r3
 800fb18:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb1c:	d8f9      	bhi.n	800fb12 <__lshift+0x9a>
 800fb1e:	e7e4      	b.n	800faea <__lshift+0x72>

0800fb20 <__mcmp>:
 800fb20:	6903      	ldr	r3, [r0, #16]
 800fb22:	690a      	ldr	r2, [r1, #16]
 800fb24:	b530      	push	{r4, r5, lr}
 800fb26:	1a9b      	subs	r3, r3, r2
 800fb28:	d10c      	bne.n	800fb44 <__mcmp+0x24>
 800fb2a:	0092      	lsls	r2, r2, #2
 800fb2c:	3014      	adds	r0, #20
 800fb2e:	3114      	adds	r1, #20
 800fb30:	1884      	adds	r4, r0, r2
 800fb32:	4411      	add	r1, r2
 800fb34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb3c:	4295      	cmp	r5, r2
 800fb3e:	d003      	beq.n	800fb48 <__mcmp+0x28>
 800fb40:	d305      	bcc.n	800fb4e <__mcmp+0x2e>
 800fb42:	2301      	movs	r3, #1
 800fb44:	4618      	mov	r0, r3
 800fb46:	bd30      	pop	{r4, r5, pc}
 800fb48:	42a0      	cmp	r0, r4
 800fb4a:	d3f3      	bcc.n	800fb34 <__mcmp+0x14>
 800fb4c:	e7fa      	b.n	800fb44 <__mcmp+0x24>
 800fb4e:	f04f 33ff 	mov.w	r3, #4294967295
 800fb52:	e7f7      	b.n	800fb44 <__mcmp+0x24>

0800fb54 <__mdiff>:
 800fb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb58:	460d      	mov	r5, r1
 800fb5a:	4607      	mov	r7, r0
 800fb5c:	4611      	mov	r1, r2
 800fb5e:	4628      	mov	r0, r5
 800fb60:	4614      	mov	r4, r2
 800fb62:	f7ff ffdd 	bl	800fb20 <__mcmp>
 800fb66:	1e06      	subs	r6, r0, #0
 800fb68:	d108      	bne.n	800fb7c <__mdiff+0x28>
 800fb6a:	4631      	mov	r1, r6
 800fb6c:	4638      	mov	r0, r7
 800fb6e:	f7ff fdc2 	bl	800f6f6 <_Balloc>
 800fb72:	2301      	movs	r3, #1
 800fb74:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fb78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb7c:	bfa4      	itt	ge
 800fb7e:	4623      	movge	r3, r4
 800fb80:	462c      	movge	r4, r5
 800fb82:	4638      	mov	r0, r7
 800fb84:	6861      	ldr	r1, [r4, #4]
 800fb86:	bfa6      	itte	ge
 800fb88:	461d      	movge	r5, r3
 800fb8a:	2600      	movge	r6, #0
 800fb8c:	2601      	movlt	r6, #1
 800fb8e:	f7ff fdb2 	bl	800f6f6 <_Balloc>
 800fb92:	f04f 0e00 	mov.w	lr, #0
 800fb96:	60c6      	str	r6, [r0, #12]
 800fb98:	692b      	ldr	r3, [r5, #16]
 800fb9a:	6926      	ldr	r6, [r4, #16]
 800fb9c:	f104 0214 	add.w	r2, r4, #20
 800fba0:	f105 0914 	add.w	r9, r5, #20
 800fba4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fba8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fbac:	f100 0114 	add.w	r1, r0, #20
 800fbb0:	f852 ab04 	ldr.w	sl, [r2], #4
 800fbb4:	f859 5b04 	ldr.w	r5, [r9], #4
 800fbb8:	fa1f f38a 	uxth.w	r3, sl
 800fbbc:	4473      	add	r3, lr
 800fbbe:	b2ac      	uxth	r4, r5
 800fbc0:	1b1b      	subs	r3, r3, r4
 800fbc2:	0c2c      	lsrs	r4, r5, #16
 800fbc4:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800fbc8:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800fbd2:	45c8      	cmp	r8, r9
 800fbd4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800fbd8:	4694      	mov	ip, r2
 800fbda:	f841 4b04 	str.w	r4, [r1], #4
 800fbde:	d8e7      	bhi.n	800fbb0 <__mdiff+0x5c>
 800fbe0:	45bc      	cmp	ip, r7
 800fbe2:	d304      	bcc.n	800fbee <__mdiff+0x9a>
 800fbe4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800fbe8:	b183      	cbz	r3, 800fc0c <__mdiff+0xb8>
 800fbea:	6106      	str	r6, [r0, #16]
 800fbec:	e7c4      	b.n	800fb78 <__mdiff+0x24>
 800fbee:	f85c 4b04 	ldr.w	r4, [ip], #4
 800fbf2:	b2a2      	uxth	r2, r4
 800fbf4:	4472      	add	r2, lr
 800fbf6:	1413      	asrs	r3, r2, #16
 800fbf8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fbfc:	b292      	uxth	r2, r2
 800fbfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fc02:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fc06:	f841 2b04 	str.w	r2, [r1], #4
 800fc0a:	e7e9      	b.n	800fbe0 <__mdiff+0x8c>
 800fc0c:	3e01      	subs	r6, #1
 800fc0e:	e7e9      	b.n	800fbe4 <__mdiff+0x90>

0800fc10 <__d2b>:
 800fc10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fc14:	461c      	mov	r4, r3
 800fc16:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800fc1a:	2101      	movs	r1, #1
 800fc1c:	4690      	mov	r8, r2
 800fc1e:	f7ff fd6a 	bl	800f6f6 <_Balloc>
 800fc22:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800fc26:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800fc2a:	4607      	mov	r7, r0
 800fc2c:	bb34      	cbnz	r4, 800fc7c <__d2b+0x6c>
 800fc2e:	9201      	str	r2, [sp, #4]
 800fc30:	f1b8 0200 	subs.w	r2, r8, #0
 800fc34:	d027      	beq.n	800fc86 <__d2b+0x76>
 800fc36:	a802      	add	r0, sp, #8
 800fc38:	f840 2d08 	str.w	r2, [r0, #-8]!
 800fc3c:	f7ff fe00 	bl	800f840 <__lo0bits>
 800fc40:	9900      	ldr	r1, [sp, #0]
 800fc42:	b1f0      	cbz	r0, 800fc82 <__d2b+0x72>
 800fc44:	9a01      	ldr	r2, [sp, #4]
 800fc46:	f1c0 0320 	rsb	r3, r0, #32
 800fc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800fc4e:	430b      	orrs	r3, r1
 800fc50:	40c2      	lsrs	r2, r0
 800fc52:	617b      	str	r3, [r7, #20]
 800fc54:	9201      	str	r2, [sp, #4]
 800fc56:	9b01      	ldr	r3, [sp, #4]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	bf14      	ite	ne
 800fc5c:	2102      	movne	r1, #2
 800fc5e:	2101      	moveq	r1, #1
 800fc60:	61bb      	str	r3, [r7, #24]
 800fc62:	6139      	str	r1, [r7, #16]
 800fc64:	b1c4      	cbz	r4, 800fc98 <__d2b+0x88>
 800fc66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fc6a:	4404      	add	r4, r0
 800fc6c:	6034      	str	r4, [r6, #0]
 800fc6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc72:	6028      	str	r0, [r5, #0]
 800fc74:	4638      	mov	r0, r7
 800fc76:	b002      	add	sp, #8
 800fc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800fc80:	e7d5      	b.n	800fc2e <__d2b+0x1e>
 800fc82:	6179      	str	r1, [r7, #20]
 800fc84:	e7e7      	b.n	800fc56 <__d2b+0x46>
 800fc86:	a801      	add	r0, sp, #4
 800fc88:	f7ff fdda 	bl	800f840 <__lo0bits>
 800fc8c:	2101      	movs	r1, #1
 800fc8e:	9b01      	ldr	r3, [sp, #4]
 800fc90:	6139      	str	r1, [r7, #16]
 800fc92:	617b      	str	r3, [r7, #20]
 800fc94:	3020      	adds	r0, #32
 800fc96:	e7e5      	b.n	800fc64 <__d2b+0x54>
 800fc98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc9c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fca0:	6030      	str	r0, [r6, #0]
 800fca2:	6918      	ldr	r0, [r3, #16]
 800fca4:	f7ff fdad 	bl	800f802 <__hi0bits>
 800fca8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fcac:	e7e1      	b.n	800fc72 <__d2b+0x62>

0800fcae <_calloc_r>:
 800fcae:	b538      	push	{r3, r4, r5, lr}
 800fcb0:	fb02 f401 	mul.w	r4, r2, r1
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	f000 f855 	bl	800fd64 <_malloc_r>
 800fcba:	4605      	mov	r5, r0
 800fcbc:	b118      	cbz	r0, 800fcc6 <_calloc_r+0x18>
 800fcbe:	4622      	mov	r2, r4
 800fcc0:	2100      	movs	r1, #0
 800fcc2:	f7fe f9e3 	bl	800e08c <memset>
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fccc <_free_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	4605      	mov	r5, r0
 800fcd0:	2900      	cmp	r1, #0
 800fcd2:	d043      	beq.n	800fd5c <_free_r+0x90>
 800fcd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcd8:	1f0c      	subs	r4, r1, #4
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	bfb8      	it	lt
 800fcde:	18e4      	addlt	r4, r4, r3
 800fce0:	f000 fa15 	bl	801010e <__malloc_lock>
 800fce4:	4a1e      	ldr	r2, [pc, #120]	; (800fd60 <_free_r+0x94>)
 800fce6:	6813      	ldr	r3, [r2, #0]
 800fce8:	4610      	mov	r0, r2
 800fcea:	b933      	cbnz	r3, 800fcfa <_free_r+0x2e>
 800fcec:	6063      	str	r3, [r4, #4]
 800fcee:	6014      	str	r4, [r2, #0]
 800fcf0:	4628      	mov	r0, r5
 800fcf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcf6:	f000 ba0b 	b.w	8010110 <__malloc_unlock>
 800fcfa:	42a3      	cmp	r3, r4
 800fcfc:	d90b      	bls.n	800fd16 <_free_r+0x4a>
 800fcfe:	6821      	ldr	r1, [r4, #0]
 800fd00:	1862      	adds	r2, r4, r1
 800fd02:	4293      	cmp	r3, r2
 800fd04:	bf01      	itttt	eq
 800fd06:	681a      	ldreq	r2, [r3, #0]
 800fd08:	685b      	ldreq	r3, [r3, #4]
 800fd0a:	1852      	addeq	r2, r2, r1
 800fd0c:	6022      	streq	r2, [r4, #0]
 800fd0e:	6063      	str	r3, [r4, #4]
 800fd10:	6004      	str	r4, [r0, #0]
 800fd12:	e7ed      	b.n	800fcf0 <_free_r+0x24>
 800fd14:	4613      	mov	r3, r2
 800fd16:	685a      	ldr	r2, [r3, #4]
 800fd18:	b10a      	cbz	r2, 800fd1e <_free_r+0x52>
 800fd1a:	42a2      	cmp	r2, r4
 800fd1c:	d9fa      	bls.n	800fd14 <_free_r+0x48>
 800fd1e:	6819      	ldr	r1, [r3, #0]
 800fd20:	1858      	adds	r0, r3, r1
 800fd22:	42a0      	cmp	r0, r4
 800fd24:	d10b      	bne.n	800fd3e <_free_r+0x72>
 800fd26:	6820      	ldr	r0, [r4, #0]
 800fd28:	4401      	add	r1, r0
 800fd2a:	1858      	adds	r0, r3, r1
 800fd2c:	4282      	cmp	r2, r0
 800fd2e:	6019      	str	r1, [r3, #0]
 800fd30:	d1de      	bne.n	800fcf0 <_free_r+0x24>
 800fd32:	6810      	ldr	r0, [r2, #0]
 800fd34:	6852      	ldr	r2, [r2, #4]
 800fd36:	4401      	add	r1, r0
 800fd38:	6019      	str	r1, [r3, #0]
 800fd3a:	605a      	str	r2, [r3, #4]
 800fd3c:	e7d8      	b.n	800fcf0 <_free_r+0x24>
 800fd3e:	d902      	bls.n	800fd46 <_free_r+0x7a>
 800fd40:	230c      	movs	r3, #12
 800fd42:	602b      	str	r3, [r5, #0]
 800fd44:	e7d4      	b.n	800fcf0 <_free_r+0x24>
 800fd46:	6820      	ldr	r0, [r4, #0]
 800fd48:	1821      	adds	r1, r4, r0
 800fd4a:	428a      	cmp	r2, r1
 800fd4c:	bf01      	itttt	eq
 800fd4e:	6811      	ldreq	r1, [r2, #0]
 800fd50:	6852      	ldreq	r2, [r2, #4]
 800fd52:	1809      	addeq	r1, r1, r0
 800fd54:	6021      	streq	r1, [r4, #0]
 800fd56:	6062      	str	r2, [r4, #4]
 800fd58:	605c      	str	r4, [r3, #4]
 800fd5a:	e7c9      	b.n	800fcf0 <_free_r+0x24>
 800fd5c:	bd38      	pop	{r3, r4, r5, pc}
 800fd5e:	bf00      	nop
 800fd60:	2000066c 	.word	0x2000066c

0800fd64 <_malloc_r>:
 800fd64:	b570      	push	{r4, r5, r6, lr}
 800fd66:	1ccd      	adds	r5, r1, #3
 800fd68:	f025 0503 	bic.w	r5, r5, #3
 800fd6c:	3508      	adds	r5, #8
 800fd6e:	2d0c      	cmp	r5, #12
 800fd70:	bf38      	it	cc
 800fd72:	250c      	movcc	r5, #12
 800fd74:	2d00      	cmp	r5, #0
 800fd76:	4606      	mov	r6, r0
 800fd78:	db01      	blt.n	800fd7e <_malloc_r+0x1a>
 800fd7a:	42a9      	cmp	r1, r5
 800fd7c:	d903      	bls.n	800fd86 <_malloc_r+0x22>
 800fd7e:	230c      	movs	r3, #12
 800fd80:	6033      	str	r3, [r6, #0]
 800fd82:	2000      	movs	r0, #0
 800fd84:	bd70      	pop	{r4, r5, r6, pc}
 800fd86:	f000 f9c2 	bl	801010e <__malloc_lock>
 800fd8a:	4a21      	ldr	r2, [pc, #132]	; (800fe10 <_malloc_r+0xac>)
 800fd8c:	6814      	ldr	r4, [r2, #0]
 800fd8e:	4621      	mov	r1, r4
 800fd90:	b991      	cbnz	r1, 800fdb8 <_malloc_r+0x54>
 800fd92:	4c20      	ldr	r4, [pc, #128]	; (800fe14 <_malloc_r+0xb0>)
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	b91b      	cbnz	r3, 800fda0 <_malloc_r+0x3c>
 800fd98:	4630      	mov	r0, r6
 800fd9a:	f000 f98f 	bl	80100bc <_sbrk_r>
 800fd9e:	6020      	str	r0, [r4, #0]
 800fda0:	4629      	mov	r1, r5
 800fda2:	4630      	mov	r0, r6
 800fda4:	f000 f98a 	bl	80100bc <_sbrk_r>
 800fda8:	1c43      	adds	r3, r0, #1
 800fdaa:	d124      	bne.n	800fdf6 <_malloc_r+0x92>
 800fdac:	230c      	movs	r3, #12
 800fdae:	4630      	mov	r0, r6
 800fdb0:	6033      	str	r3, [r6, #0]
 800fdb2:	f000 f9ad 	bl	8010110 <__malloc_unlock>
 800fdb6:	e7e4      	b.n	800fd82 <_malloc_r+0x1e>
 800fdb8:	680b      	ldr	r3, [r1, #0]
 800fdba:	1b5b      	subs	r3, r3, r5
 800fdbc:	d418      	bmi.n	800fdf0 <_malloc_r+0x8c>
 800fdbe:	2b0b      	cmp	r3, #11
 800fdc0:	d90f      	bls.n	800fde2 <_malloc_r+0x7e>
 800fdc2:	600b      	str	r3, [r1, #0]
 800fdc4:	18cc      	adds	r4, r1, r3
 800fdc6:	50cd      	str	r5, [r1, r3]
 800fdc8:	4630      	mov	r0, r6
 800fdca:	f000 f9a1 	bl	8010110 <__malloc_unlock>
 800fdce:	f104 000b 	add.w	r0, r4, #11
 800fdd2:	1d23      	adds	r3, r4, #4
 800fdd4:	f020 0007 	bic.w	r0, r0, #7
 800fdd8:	1ac3      	subs	r3, r0, r3
 800fdda:	d0d3      	beq.n	800fd84 <_malloc_r+0x20>
 800fddc:	425a      	negs	r2, r3
 800fdde:	50e2      	str	r2, [r4, r3]
 800fde0:	e7d0      	b.n	800fd84 <_malloc_r+0x20>
 800fde2:	684b      	ldr	r3, [r1, #4]
 800fde4:	428c      	cmp	r4, r1
 800fde6:	bf16      	itet	ne
 800fde8:	6063      	strne	r3, [r4, #4]
 800fdea:	6013      	streq	r3, [r2, #0]
 800fdec:	460c      	movne	r4, r1
 800fdee:	e7eb      	b.n	800fdc8 <_malloc_r+0x64>
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	6849      	ldr	r1, [r1, #4]
 800fdf4:	e7cc      	b.n	800fd90 <_malloc_r+0x2c>
 800fdf6:	1cc4      	adds	r4, r0, #3
 800fdf8:	f024 0403 	bic.w	r4, r4, #3
 800fdfc:	42a0      	cmp	r0, r4
 800fdfe:	d005      	beq.n	800fe0c <_malloc_r+0xa8>
 800fe00:	1a21      	subs	r1, r4, r0
 800fe02:	4630      	mov	r0, r6
 800fe04:	f000 f95a 	bl	80100bc <_sbrk_r>
 800fe08:	3001      	adds	r0, #1
 800fe0a:	d0cf      	beq.n	800fdac <_malloc_r+0x48>
 800fe0c:	6025      	str	r5, [r4, #0]
 800fe0e:	e7db      	b.n	800fdc8 <_malloc_r+0x64>
 800fe10:	2000066c 	.word	0x2000066c
 800fe14:	20000670 	.word	0x20000670

0800fe18 <__ssputs_r>:
 800fe18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe1c:	688e      	ldr	r6, [r1, #8]
 800fe1e:	4682      	mov	sl, r0
 800fe20:	429e      	cmp	r6, r3
 800fe22:	460c      	mov	r4, r1
 800fe24:	4690      	mov	r8, r2
 800fe26:	4699      	mov	r9, r3
 800fe28:	d837      	bhi.n	800fe9a <__ssputs_r+0x82>
 800fe2a:	898a      	ldrh	r2, [r1, #12]
 800fe2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe30:	d031      	beq.n	800fe96 <__ssputs_r+0x7e>
 800fe32:	2302      	movs	r3, #2
 800fe34:	6825      	ldr	r5, [r4, #0]
 800fe36:	6909      	ldr	r1, [r1, #16]
 800fe38:	1a6f      	subs	r7, r5, r1
 800fe3a:	6965      	ldr	r5, [r4, #20]
 800fe3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe40:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe44:	f109 0301 	add.w	r3, r9, #1
 800fe48:	443b      	add	r3, r7
 800fe4a:	429d      	cmp	r5, r3
 800fe4c:	bf38      	it	cc
 800fe4e:	461d      	movcc	r5, r3
 800fe50:	0553      	lsls	r3, r2, #21
 800fe52:	d530      	bpl.n	800feb6 <__ssputs_r+0x9e>
 800fe54:	4629      	mov	r1, r5
 800fe56:	f7ff ff85 	bl	800fd64 <_malloc_r>
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	b950      	cbnz	r0, 800fe74 <__ssputs_r+0x5c>
 800fe5e:	230c      	movs	r3, #12
 800fe60:	f04f 30ff 	mov.w	r0, #4294967295
 800fe64:	f8ca 3000 	str.w	r3, [sl]
 800fe68:	89a3      	ldrh	r3, [r4, #12]
 800fe6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe6e:	81a3      	strh	r3, [r4, #12]
 800fe70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe74:	463a      	mov	r2, r7
 800fe76:	6921      	ldr	r1, [r4, #16]
 800fe78:	f7ff fc32 	bl	800f6e0 <memcpy>
 800fe7c:	89a3      	ldrh	r3, [r4, #12]
 800fe7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe86:	81a3      	strh	r3, [r4, #12]
 800fe88:	6126      	str	r6, [r4, #16]
 800fe8a:	443e      	add	r6, r7
 800fe8c:	6026      	str	r6, [r4, #0]
 800fe8e:	464e      	mov	r6, r9
 800fe90:	6165      	str	r5, [r4, #20]
 800fe92:	1bed      	subs	r5, r5, r7
 800fe94:	60a5      	str	r5, [r4, #8]
 800fe96:	454e      	cmp	r6, r9
 800fe98:	d900      	bls.n	800fe9c <__ssputs_r+0x84>
 800fe9a:	464e      	mov	r6, r9
 800fe9c:	4632      	mov	r2, r6
 800fe9e:	4641      	mov	r1, r8
 800fea0:	6820      	ldr	r0, [r4, #0]
 800fea2:	f000 f91b 	bl	80100dc <memmove>
 800fea6:	68a3      	ldr	r3, [r4, #8]
 800fea8:	2000      	movs	r0, #0
 800feaa:	1b9b      	subs	r3, r3, r6
 800feac:	60a3      	str	r3, [r4, #8]
 800feae:	6823      	ldr	r3, [r4, #0]
 800feb0:	441e      	add	r6, r3
 800feb2:	6026      	str	r6, [r4, #0]
 800feb4:	e7dc      	b.n	800fe70 <__ssputs_r+0x58>
 800feb6:	462a      	mov	r2, r5
 800feb8:	f000 f92b 	bl	8010112 <_realloc_r>
 800febc:	4606      	mov	r6, r0
 800febe:	2800      	cmp	r0, #0
 800fec0:	d1e2      	bne.n	800fe88 <__ssputs_r+0x70>
 800fec2:	6921      	ldr	r1, [r4, #16]
 800fec4:	4650      	mov	r0, sl
 800fec6:	f7ff ff01 	bl	800fccc <_free_r>
 800feca:	e7c8      	b.n	800fe5e <__ssputs_r+0x46>

0800fecc <_svfiprintf_r>:
 800fecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed0:	461d      	mov	r5, r3
 800fed2:	898b      	ldrh	r3, [r1, #12]
 800fed4:	b09d      	sub	sp, #116	; 0x74
 800fed6:	061f      	lsls	r7, r3, #24
 800fed8:	4680      	mov	r8, r0
 800feda:	460c      	mov	r4, r1
 800fedc:	4616      	mov	r6, r2
 800fede:	d50f      	bpl.n	800ff00 <_svfiprintf_r+0x34>
 800fee0:	690b      	ldr	r3, [r1, #16]
 800fee2:	b96b      	cbnz	r3, 800ff00 <_svfiprintf_r+0x34>
 800fee4:	2140      	movs	r1, #64	; 0x40
 800fee6:	f7ff ff3d 	bl	800fd64 <_malloc_r>
 800feea:	6020      	str	r0, [r4, #0]
 800feec:	6120      	str	r0, [r4, #16]
 800feee:	b928      	cbnz	r0, 800fefc <_svfiprintf_r+0x30>
 800fef0:	230c      	movs	r3, #12
 800fef2:	f8c8 3000 	str.w	r3, [r8]
 800fef6:	f04f 30ff 	mov.w	r0, #4294967295
 800fefa:	e0c8      	b.n	801008e <_svfiprintf_r+0x1c2>
 800fefc:	2340      	movs	r3, #64	; 0x40
 800fefe:	6163      	str	r3, [r4, #20]
 800ff00:	2300      	movs	r3, #0
 800ff02:	9309      	str	r3, [sp, #36]	; 0x24
 800ff04:	2320      	movs	r3, #32
 800ff06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff0a:	2330      	movs	r3, #48	; 0x30
 800ff0c:	f04f 0b01 	mov.w	fp, #1
 800ff10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff14:	9503      	str	r5, [sp, #12]
 800ff16:	4637      	mov	r7, r6
 800ff18:	463d      	mov	r5, r7
 800ff1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff1e:	b10b      	cbz	r3, 800ff24 <_svfiprintf_r+0x58>
 800ff20:	2b25      	cmp	r3, #37	; 0x25
 800ff22:	d13e      	bne.n	800ffa2 <_svfiprintf_r+0xd6>
 800ff24:	ebb7 0a06 	subs.w	sl, r7, r6
 800ff28:	d00b      	beq.n	800ff42 <_svfiprintf_r+0x76>
 800ff2a:	4653      	mov	r3, sl
 800ff2c:	4632      	mov	r2, r6
 800ff2e:	4621      	mov	r1, r4
 800ff30:	4640      	mov	r0, r8
 800ff32:	f7ff ff71 	bl	800fe18 <__ssputs_r>
 800ff36:	3001      	adds	r0, #1
 800ff38:	f000 80a4 	beq.w	8010084 <_svfiprintf_r+0x1b8>
 800ff3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff3e:	4453      	add	r3, sl
 800ff40:	9309      	str	r3, [sp, #36]	; 0x24
 800ff42:	783b      	ldrb	r3, [r7, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f000 809d 	beq.w	8010084 <_svfiprintf_r+0x1b8>
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	f04f 32ff 	mov.w	r2, #4294967295
 800ff50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff54:	9304      	str	r3, [sp, #16]
 800ff56:	9307      	str	r3, [sp, #28]
 800ff58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff5c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff5e:	462f      	mov	r7, r5
 800ff60:	2205      	movs	r2, #5
 800ff62:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ff66:	4850      	ldr	r0, [pc, #320]	; (80100a8 <_svfiprintf_r+0x1dc>)
 800ff68:	f7ff fbac 	bl	800f6c4 <memchr>
 800ff6c:	9b04      	ldr	r3, [sp, #16]
 800ff6e:	b9d0      	cbnz	r0, 800ffa6 <_svfiprintf_r+0xda>
 800ff70:	06d9      	lsls	r1, r3, #27
 800ff72:	bf44      	itt	mi
 800ff74:	2220      	movmi	r2, #32
 800ff76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff7a:	071a      	lsls	r2, r3, #28
 800ff7c:	bf44      	itt	mi
 800ff7e:	222b      	movmi	r2, #43	; 0x2b
 800ff80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff84:	782a      	ldrb	r2, [r5, #0]
 800ff86:	2a2a      	cmp	r2, #42	; 0x2a
 800ff88:	d015      	beq.n	800ffb6 <_svfiprintf_r+0xea>
 800ff8a:	462f      	mov	r7, r5
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	250a      	movs	r5, #10
 800ff90:	9a07      	ldr	r2, [sp, #28]
 800ff92:	4639      	mov	r1, r7
 800ff94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff98:	3b30      	subs	r3, #48	; 0x30
 800ff9a:	2b09      	cmp	r3, #9
 800ff9c:	d94d      	bls.n	801003a <_svfiprintf_r+0x16e>
 800ff9e:	b1b8      	cbz	r0, 800ffd0 <_svfiprintf_r+0x104>
 800ffa0:	e00f      	b.n	800ffc2 <_svfiprintf_r+0xf6>
 800ffa2:	462f      	mov	r7, r5
 800ffa4:	e7b8      	b.n	800ff18 <_svfiprintf_r+0x4c>
 800ffa6:	4a40      	ldr	r2, [pc, #256]	; (80100a8 <_svfiprintf_r+0x1dc>)
 800ffa8:	463d      	mov	r5, r7
 800ffaa:	1a80      	subs	r0, r0, r2
 800ffac:	fa0b f000 	lsl.w	r0, fp, r0
 800ffb0:	4318      	orrs	r0, r3
 800ffb2:	9004      	str	r0, [sp, #16]
 800ffb4:	e7d3      	b.n	800ff5e <_svfiprintf_r+0x92>
 800ffb6:	9a03      	ldr	r2, [sp, #12]
 800ffb8:	1d11      	adds	r1, r2, #4
 800ffba:	6812      	ldr	r2, [r2, #0]
 800ffbc:	9103      	str	r1, [sp, #12]
 800ffbe:	2a00      	cmp	r2, #0
 800ffc0:	db01      	blt.n	800ffc6 <_svfiprintf_r+0xfa>
 800ffc2:	9207      	str	r2, [sp, #28]
 800ffc4:	e004      	b.n	800ffd0 <_svfiprintf_r+0x104>
 800ffc6:	4252      	negs	r2, r2
 800ffc8:	f043 0302 	orr.w	r3, r3, #2
 800ffcc:	9207      	str	r2, [sp, #28]
 800ffce:	9304      	str	r3, [sp, #16]
 800ffd0:	783b      	ldrb	r3, [r7, #0]
 800ffd2:	2b2e      	cmp	r3, #46	; 0x2e
 800ffd4:	d10c      	bne.n	800fff0 <_svfiprintf_r+0x124>
 800ffd6:	787b      	ldrb	r3, [r7, #1]
 800ffd8:	2b2a      	cmp	r3, #42	; 0x2a
 800ffda:	d133      	bne.n	8010044 <_svfiprintf_r+0x178>
 800ffdc:	9b03      	ldr	r3, [sp, #12]
 800ffde:	3702      	adds	r7, #2
 800ffe0:	1d1a      	adds	r2, r3, #4
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	9203      	str	r2, [sp, #12]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	bfb8      	it	lt
 800ffea:	f04f 33ff 	movlt.w	r3, #4294967295
 800ffee:	9305      	str	r3, [sp, #20]
 800fff0:	4d2e      	ldr	r5, [pc, #184]	; (80100ac <_svfiprintf_r+0x1e0>)
 800fff2:	2203      	movs	r2, #3
 800fff4:	7839      	ldrb	r1, [r7, #0]
 800fff6:	4628      	mov	r0, r5
 800fff8:	f7ff fb64 	bl	800f6c4 <memchr>
 800fffc:	b138      	cbz	r0, 801000e <_svfiprintf_r+0x142>
 800fffe:	2340      	movs	r3, #64	; 0x40
 8010000:	1b40      	subs	r0, r0, r5
 8010002:	fa03 f000 	lsl.w	r0, r3, r0
 8010006:	9b04      	ldr	r3, [sp, #16]
 8010008:	3701      	adds	r7, #1
 801000a:	4303      	orrs	r3, r0
 801000c:	9304      	str	r3, [sp, #16]
 801000e:	7839      	ldrb	r1, [r7, #0]
 8010010:	2206      	movs	r2, #6
 8010012:	4827      	ldr	r0, [pc, #156]	; (80100b0 <_svfiprintf_r+0x1e4>)
 8010014:	1c7e      	adds	r6, r7, #1
 8010016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801001a:	f7ff fb53 	bl	800f6c4 <memchr>
 801001e:	2800      	cmp	r0, #0
 8010020:	d038      	beq.n	8010094 <_svfiprintf_r+0x1c8>
 8010022:	4b24      	ldr	r3, [pc, #144]	; (80100b4 <_svfiprintf_r+0x1e8>)
 8010024:	bb13      	cbnz	r3, 801006c <_svfiprintf_r+0x1a0>
 8010026:	9b03      	ldr	r3, [sp, #12]
 8010028:	3307      	adds	r3, #7
 801002a:	f023 0307 	bic.w	r3, r3, #7
 801002e:	3308      	adds	r3, #8
 8010030:	9303      	str	r3, [sp, #12]
 8010032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010034:	444b      	add	r3, r9
 8010036:	9309      	str	r3, [sp, #36]	; 0x24
 8010038:	e76d      	b.n	800ff16 <_svfiprintf_r+0x4a>
 801003a:	fb05 3202 	mla	r2, r5, r2, r3
 801003e:	2001      	movs	r0, #1
 8010040:	460f      	mov	r7, r1
 8010042:	e7a6      	b.n	800ff92 <_svfiprintf_r+0xc6>
 8010044:	2300      	movs	r3, #0
 8010046:	250a      	movs	r5, #10
 8010048:	4619      	mov	r1, r3
 801004a:	3701      	adds	r7, #1
 801004c:	9305      	str	r3, [sp, #20]
 801004e:	4638      	mov	r0, r7
 8010050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010054:	3a30      	subs	r2, #48	; 0x30
 8010056:	2a09      	cmp	r2, #9
 8010058:	d903      	bls.n	8010062 <_svfiprintf_r+0x196>
 801005a:	2b00      	cmp	r3, #0
 801005c:	d0c8      	beq.n	800fff0 <_svfiprintf_r+0x124>
 801005e:	9105      	str	r1, [sp, #20]
 8010060:	e7c6      	b.n	800fff0 <_svfiprintf_r+0x124>
 8010062:	fb05 2101 	mla	r1, r5, r1, r2
 8010066:	2301      	movs	r3, #1
 8010068:	4607      	mov	r7, r0
 801006a:	e7f0      	b.n	801004e <_svfiprintf_r+0x182>
 801006c:	ab03      	add	r3, sp, #12
 801006e:	9300      	str	r3, [sp, #0]
 8010070:	4622      	mov	r2, r4
 8010072:	4b11      	ldr	r3, [pc, #68]	; (80100b8 <_svfiprintf_r+0x1ec>)
 8010074:	a904      	add	r1, sp, #16
 8010076:	4640      	mov	r0, r8
 8010078:	f7fe f8a2 	bl	800e1c0 <_printf_float>
 801007c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010080:	4681      	mov	r9, r0
 8010082:	d1d6      	bne.n	8010032 <_svfiprintf_r+0x166>
 8010084:	89a3      	ldrh	r3, [r4, #12]
 8010086:	065b      	lsls	r3, r3, #25
 8010088:	f53f af35 	bmi.w	800fef6 <_svfiprintf_r+0x2a>
 801008c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801008e:	b01d      	add	sp, #116	; 0x74
 8010090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010094:	ab03      	add	r3, sp, #12
 8010096:	9300      	str	r3, [sp, #0]
 8010098:	4622      	mov	r2, r4
 801009a:	4b07      	ldr	r3, [pc, #28]	; (80100b8 <_svfiprintf_r+0x1ec>)
 801009c:	a904      	add	r1, sp, #16
 801009e:	4640      	mov	r0, r8
 80100a0:	f7fe fb3a 	bl	800e718 <_printf_i>
 80100a4:	e7ea      	b.n	801007c <_svfiprintf_r+0x1b0>
 80100a6:	bf00      	nop
 80100a8:	08011134 	.word	0x08011134
 80100ac:	0801113a 	.word	0x0801113a
 80100b0:	0801113e 	.word	0x0801113e
 80100b4:	0800e1c1 	.word	0x0800e1c1
 80100b8:	0800fe19 	.word	0x0800fe19

080100bc <_sbrk_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	2300      	movs	r3, #0
 80100c0:	4c05      	ldr	r4, [pc, #20]	; (80100d8 <_sbrk_r+0x1c>)
 80100c2:	4605      	mov	r5, r0
 80100c4:	4608      	mov	r0, r1
 80100c6:	6023      	str	r3, [r4, #0]
 80100c8:	f7f8 fa00 	bl	80084cc <_sbrk>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	d102      	bne.n	80100d6 <_sbrk_r+0x1a>
 80100d0:	6823      	ldr	r3, [r4, #0]
 80100d2:	b103      	cbz	r3, 80100d6 <_sbrk_r+0x1a>
 80100d4:	602b      	str	r3, [r5, #0]
 80100d6:	bd38      	pop	{r3, r4, r5, pc}
 80100d8:	20001894 	.word	0x20001894

080100dc <memmove>:
 80100dc:	4288      	cmp	r0, r1
 80100de:	b510      	push	{r4, lr}
 80100e0:	eb01 0302 	add.w	r3, r1, r2
 80100e4:	d807      	bhi.n	80100f6 <memmove+0x1a>
 80100e6:	1e42      	subs	r2, r0, #1
 80100e8:	4299      	cmp	r1, r3
 80100ea:	d00a      	beq.n	8010102 <memmove+0x26>
 80100ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80100f4:	e7f8      	b.n	80100e8 <memmove+0xc>
 80100f6:	4283      	cmp	r3, r0
 80100f8:	d9f5      	bls.n	80100e6 <memmove+0xa>
 80100fa:	1881      	adds	r1, r0, r2
 80100fc:	1ad2      	subs	r2, r2, r3
 80100fe:	42d3      	cmn	r3, r2
 8010100:	d100      	bne.n	8010104 <memmove+0x28>
 8010102:	bd10      	pop	{r4, pc}
 8010104:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010108:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801010c:	e7f7      	b.n	80100fe <memmove+0x22>

0801010e <__malloc_lock>:
 801010e:	4770      	bx	lr

08010110 <__malloc_unlock>:
 8010110:	4770      	bx	lr

08010112 <_realloc_r>:
 8010112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010114:	4607      	mov	r7, r0
 8010116:	4614      	mov	r4, r2
 8010118:	460e      	mov	r6, r1
 801011a:	b921      	cbnz	r1, 8010126 <_realloc_r+0x14>
 801011c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010120:	4611      	mov	r1, r2
 8010122:	f7ff be1f 	b.w	800fd64 <_malloc_r>
 8010126:	b922      	cbnz	r2, 8010132 <_realloc_r+0x20>
 8010128:	f7ff fdd0 	bl	800fccc <_free_r>
 801012c:	4625      	mov	r5, r4
 801012e:	4628      	mov	r0, r5
 8010130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010132:	f000 f814 	bl	801015e <_malloc_usable_size_r>
 8010136:	42a0      	cmp	r0, r4
 8010138:	d20f      	bcs.n	801015a <_realloc_r+0x48>
 801013a:	4621      	mov	r1, r4
 801013c:	4638      	mov	r0, r7
 801013e:	f7ff fe11 	bl	800fd64 <_malloc_r>
 8010142:	4605      	mov	r5, r0
 8010144:	2800      	cmp	r0, #0
 8010146:	d0f2      	beq.n	801012e <_realloc_r+0x1c>
 8010148:	4631      	mov	r1, r6
 801014a:	4622      	mov	r2, r4
 801014c:	f7ff fac8 	bl	800f6e0 <memcpy>
 8010150:	4631      	mov	r1, r6
 8010152:	4638      	mov	r0, r7
 8010154:	f7ff fdba 	bl	800fccc <_free_r>
 8010158:	e7e9      	b.n	801012e <_realloc_r+0x1c>
 801015a:	4635      	mov	r5, r6
 801015c:	e7e7      	b.n	801012e <_realloc_r+0x1c>

0801015e <_malloc_usable_size_r>:
 801015e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010162:	1f18      	subs	r0, r3, #4
 8010164:	2b00      	cmp	r3, #0
 8010166:	bfbc      	itt	lt
 8010168:	580b      	ldrlt	r3, [r1, r0]
 801016a:	18c0      	addlt	r0, r0, r3
 801016c:	4770      	bx	lr
	...

08010170 <log>:
 8010170:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8010174:	b08a      	sub	sp, #40	; 0x28
 8010176:	4604      	mov	r4, r0
 8010178:	460d      	mov	r5, r1
 801017a:	f000 f875 	bl	8010268 <__ieee754_log>
 801017e:	4b34      	ldr	r3, [pc, #208]	; (8010250 <log+0xe0>)
 8010180:	4680      	mov	r8, r0
 8010182:	f993 6000 	ldrsb.w	r6, [r3]
 8010186:	4689      	mov	r9, r1
 8010188:	1c73      	adds	r3, r6, #1
 801018a:	d05b      	beq.n	8010244 <log+0xd4>
 801018c:	4622      	mov	r2, r4
 801018e:	462b      	mov	r3, r5
 8010190:	4620      	mov	r0, r4
 8010192:	4629      	mov	r1, r5
 8010194:	f7f0 fc76 	bl	8000a84 <__aeabi_dcmpun>
 8010198:	2800      	cmp	r0, #0
 801019a:	d153      	bne.n	8010244 <log+0xd4>
 801019c:	2200      	movs	r2, #0
 801019e:	2300      	movs	r3, #0
 80101a0:	4620      	mov	r0, r4
 80101a2:	4629      	mov	r1, r5
 80101a4:	f7f0 fc64 	bl	8000a70 <__aeabi_dcmpgt>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	d14b      	bne.n	8010244 <log+0xd4>
 80101ac:	4b29      	ldr	r3, [pc, #164]	; (8010254 <log+0xe4>)
 80101ae:	9008      	str	r0, [sp, #32]
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80101b6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80101ba:	b9a6      	cbnz	r6, 80101e6 <log+0x76>
 80101bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80101c0:	4b25      	ldr	r3, [pc, #148]	; (8010258 <log+0xe8>)
 80101c2:	4620      	mov	r0, r4
 80101c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80101c8:	4629      	mov	r1, r5
 80101ca:	2200      	movs	r2, #0
 80101cc:	2300      	movs	r3, #0
 80101ce:	f7f0 fc27 	bl	8000a20 <__aeabi_dcmpeq>
 80101d2:	bb40      	cbnz	r0, 8010226 <log+0xb6>
 80101d4:	2301      	movs	r3, #1
 80101d6:	2e02      	cmp	r6, #2
 80101d8:	9300      	str	r3, [sp, #0]
 80101da:	d119      	bne.n	8010210 <log+0xa0>
 80101dc:	f7fd fef2 	bl	800dfc4 <__errno>
 80101e0:	2321      	movs	r3, #33	; 0x21
 80101e2:	6003      	str	r3, [r0, #0]
 80101e4:	e019      	b.n	801021a <log+0xaa>
 80101e6:	2200      	movs	r2, #0
 80101e8:	4b1c      	ldr	r3, [pc, #112]	; (801025c <log+0xec>)
 80101ea:	4620      	mov	r0, r4
 80101ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80101f0:	4629      	mov	r1, r5
 80101f2:	2200      	movs	r2, #0
 80101f4:	2300      	movs	r3, #0
 80101f6:	f7f0 fc13 	bl	8000a20 <__aeabi_dcmpeq>
 80101fa:	2800      	cmp	r0, #0
 80101fc:	d0ea      	beq.n	80101d4 <log+0x64>
 80101fe:	2302      	movs	r3, #2
 8010200:	429e      	cmp	r6, r3
 8010202:	9300      	str	r3, [sp, #0]
 8010204:	d111      	bne.n	801022a <log+0xba>
 8010206:	f7fd fedd 	bl	800dfc4 <__errno>
 801020a:	2322      	movs	r3, #34	; 0x22
 801020c:	6003      	str	r3, [r0, #0]
 801020e:	e011      	b.n	8010234 <log+0xc4>
 8010210:	4668      	mov	r0, sp
 8010212:	f000 f9db 	bl	80105cc <matherr>
 8010216:	2800      	cmp	r0, #0
 8010218:	d0e0      	beq.n	80101dc <log+0x6c>
 801021a:	4811      	ldr	r0, [pc, #68]	; (8010260 <log+0xf0>)
 801021c:	f000 f9d8 	bl	80105d0 <nan>
 8010220:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8010224:	e006      	b.n	8010234 <log+0xc4>
 8010226:	2302      	movs	r3, #2
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	4668      	mov	r0, sp
 801022c:	f000 f9ce 	bl	80105cc <matherr>
 8010230:	2800      	cmp	r0, #0
 8010232:	d0e8      	beq.n	8010206 <log+0x96>
 8010234:	9b08      	ldr	r3, [sp, #32]
 8010236:	b11b      	cbz	r3, 8010240 <log+0xd0>
 8010238:	f7fd fec4 	bl	800dfc4 <__errno>
 801023c:	9b08      	ldr	r3, [sp, #32]
 801023e:	6003      	str	r3, [r0, #0]
 8010240:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8010244:	4640      	mov	r0, r8
 8010246:	4649      	mov	r1, r9
 8010248:	b00a      	add	sp, #40	; 0x28
 801024a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801024e:	bf00      	nop
 8010250:	20000230 	.word	0x20000230
 8010254:	08011145 	.word	0x08011145
 8010258:	c7efffff 	.word	0xc7efffff
 801025c:	fff00000 	.word	0xfff00000
 8010260:	08011139 	.word	0x08011139
 8010264:	00000000 	.word	0x00000000

08010268 <__ieee754_log>:
 8010268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801026c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010270:	b087      	sub	sp, #28
 8010272:	4602      	mov	r2, r0
 8010274:	460b      	mov	r3, r1
 8010276:	460d      	mov	r5, r1
 8010278:	da24      	bge.n	80102c4 <__ieee754_log+0x5c>
 801027a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 801027e:	4304      	orrs	r4, r0
 8010280:	d108      	bne.n	8010294 <__ieee754_log+0x2c>
 8010282:	2200      	movs	r2, #0
 8010284:	2300      	movs	r3, #0
 8010286:	2000      	movs	r0, #0
 8010288:	49cb      	ldr	r1, [pc, #812]	; (80105b8 <__ieee754_log+0x350>)
 801028a:	f7f0 fa8b 	bl	80007a4 <__aeabi_ddiv>
 801028e:	b007      	add	sp, #28
 8010290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010294:	2900      	cmp	r1, #0
 8010296:	da04      	bge.n	80102a2 <__ieee754_log+0x3a>
 8010298:	f7ef ffa2 	bl	80001e0 <__aeabi_dsub>
 801029c:	2200      	movs	r2, #0
 801029e:	2300      	movs	r3, #0
 80102a0:	e7f3      	b.n	801028a <__ieee754_log+0x22>
 80102a2:	2200      	movs	r2, #0
 80102a4:	4bc5      	ldr	r3, [pc, #788]	; (80105bc <__ieee754_log+0x354>)
 80102a6:	f7f0 f953 	bl	8000550 <__aeabi_dmul>
 80102aa:	f06f 0635 	mvn.w	r6, #53	; 0x35
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	460d      	mov	r5, r1
 80102b4:	49c2      	ldr	r1, [pc, #776]	; (80105c0 <__ieee754_log+0x358>)
 80102b6:	428d      	cmp	r5, r1
 80102b8:	dd06      	ble.n	80102c8 <__ieee754_log+0x60>
 80102ba:	4610      	mov	r0, r2
 80102bc:	4619      	mov	r1, r3
 80102be:	f7ef ff91 	bl	80001e4 <__adddf3>
 80102c2:	e7e4      	b.n	801028e <__ieee754_log+0x26>
 80102c4:	2600      	movs	r6, #0
 80102c6:	e7f5      	b.n	80102b4 <__ieee754_log+0x4c>
 80102c8:	152c      	asrs	r4, r5, #20
 80102ca:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80102ce:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 80102d2:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80102d6:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 80102da:	4426      	add	r6, r4
 80102dc:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 80102e0:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 80102e4:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80102e8:	ea41 0305 	orr.w	r3, r1, r5
 80102ec:	4610      	mov	r0, r2
 80102ee:	4619      	mov	r1, r3
 80102f0:	2200      	movs	r2, #0
 80102f2:	4bb4      	ldr	r3, [pc, #720]	; (80105c4 <__ieee754_log+0x35c>)
 80102f4:	f7ef ff74 	bl	80001e0 <__aeabi_dsub>
 80102f8:	1cab      	adds	r3, r5, #2
 80102fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102fe:	2b02      	cmp	r3, #2
 8010300:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 8010304:	4682      	mov	sl, r0
 8010306:	468b      	mov	fp, r1
 8010308:	f04f 0200 	mov.w	r2, #0
 801030c:	dc53      	bgt.n	80103b6 <__ieee754_log+0x14e>
 801030e:	2300      	movs	r3, #0
 8010310:	f7f0 fb86 	bl	8000a20 <__aeabi_dcmpeq>
 8010314:	b1d0      	cbz	r0, 801034c <__ieee754_log+0xe4>
 8010316:	2c00      	cmp	r4, #0
 8010318:	f000 8120 	beq.w	801055c <__ieee754_log+0x2f4>
 801031c:	4620      	mov	r0, r4
 801031e:	f7f0 f8ad 	bl	800047c <__aeabi_i2d>
 8010322:	a391      	add	r3, pc, #580	; (adr r3, 8010568 <__ieee754_log+0x300>)
 8010324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010328:	4606      	mov	r6, r0
 801032a:	460f      	mov	r7, r1
 801032c:	f7f0 f910 	bl	8000550 <__aeabi_dmul>
 8010330:	a38f      	add	r3, pc, #572	; (adr r3, 8010570 <__ieee754_log+0x308>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	4604      	mov	r4, r0
 8010338:	460d      	mov	r5, r1
 801033a:	4630      	mov	r0, r6
 801033c:	4639      	mov	r1, r7
 801033e:	f7f0 f907 	bl	8000550 <__aeabi_dmul>
 8010342:	4602      	mov	r2, r0
 8010344:	460b      	mov	r3, r1
 8010346:	4620      	mov	r0, r4
 8010348:	4629      	mov	r1, r5
 801034a:	e7b8      	b.n	80102be <__ieee754_log+0x56>
 801034c:	a38a      	add	r3, pc, #552	; (adr r3, 8010578 <__ieee754_log+0x310>)
 801034e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010352:	4650      	mov	r0, sl
 8010354:	4659      	mov	r1, fp
 8010356:	f7f0 f8fb 	bl	8000550 <__aeabi_dmul>
 801035a:	4602      	mov	r2, r0
 801035c:	460b      	mov	r3, r1
 801035e:	2000      	movs	r0, #0
 8010360:	4999      	ldr	r1, [pc, #612]	; (80105c8 <__ieee754_log+0x360>)
 8010362:	f7ef ff3d 	bl	80001e0 <__aeabi_dsub>
 8010366:	4652      	mov	r2, sl
 8010368:	4606      	mov	r6, r0
 801036a:	460f      	mov	r7, r1
 801036c:	465b      	mov	r3, fp
 801036e:	4650      	mov	r0, sl
 8010370:	4659      	mov	r1, fp
 8010372:	f7f0 f8ed 	bl	8000550 <__aeabi_dmul>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	4630      	mov	r0, r6
 801037c:	4639      	mov	r1, r7
 801037e:	f7f0 f8e7 	bl	8000550 <__aeabi_dmul>
 8010382:	4606      	mov	r6, r0
 8010384:	460f      	mov	r7, r1
 8010386:	b914      	cbnz	r4, 801038e <__ieee754_log+0x126>
 8010388:	4632      	mov	r2, r6
 801038a:	463b      	mov	r3, r7
 801038c:	e0a0      	b.n	80104d0 <__ieee754_log+0x268>
 801038e:	4620      	mov	r0, r4
 8010390:	f7f0 f874 	bl	800047c <__aeabi_i2d>
 8010394:	a374      	add	r3, pc, #464	; (adr r3, 8010568 <__ieee754_log+0x300>)
 8010396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039a:	4680      	mov	r8, r0
 801039c:	4689      	mov	r9, r1
 801039e:	f7f0 f8d7 	bl	8000550 <__aeabi_dmul>
 80103a2:	a373      	add	r3, pc, #460	; (adr r3, 8010570 <__ieee754_log+0x308>)
 80103a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a8:	4604      	mov	r4, r0
 80103aa:	460d      	mov	r5, r1
 80103ac:	4640      	mov	r0, r8
 80103ae:	4649      	mov	r1, r9
 80103b0:	f7f0 f8ce 	bl	8000550 <__aeabi_dmul>
 80103b4:	e0a5      	b.n	8010502 <__ieee754_log+0x29a>
 80103b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80103ba:	f7ef ff13 	bl	80001e4 <__adddf3>
 80103be:	4602      	mov	r2, r0
 80103c0:	460b      	mov	r3, r1
 80103c2:	4650      	mov	r0, sl
 80103c4:	4659      	mov	r1, fp
 80103c6:	f7f0 f9ed 	bl	80007a4 <__aeabi_ddiv>
 80103ca:	e9cd 0100 	strd	r0, r1, [sp]
 80103ce:	4620      	mov	r0, r4
 80103d0:	f7f0 f854 	bl	800047c <__aeabi_i2d>
 80103d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80103d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80103dc:	4610      	mov	r0, r2
 80103de:	4619      	mov	r1, r3
 80103e0:	f7f0 f8b6 	bl	8000550 <__aeabi_dmul>
 80103e4:	4602      	mov	r2, r0
 80103e6:	460b      	mov	r3, r1
 80103e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103ec:	f7f0 f8b0 	bl	8000550 <__aeabi_dmul>
 80103f0:	a363      	add	r3, pc, #396	; (adr r3, 8010580 <__ieee754_log+0x318>)
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	4680      	mov	r8, r0
 80103f8:	4689      	mov	r9, r1
 80103fa:	f7f0 f8a9 	bl	8000550 <__aeabi_dmul>
 80103fe:	a362      	add	r3, pc, #392	; (adr r3, 8010588 <__ieee754_log+0x320>)
 8010400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010404:	f7ef feee 	bl	80001e4 <__adddf3>
 8010408:	4642      	mov	r2, r8
 801040a:	464b      	mov	r3, r9
 801040c:	f7f0 f8a0 	bl	8000550 <__aeabi_dmul>
 8010410:	a35f      	add	r3, pc, #380	; (adr r3, 8010590 <__ieee754_log+0x328>)
 8010412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010416:	f7ef fee5 	bl	80001e4 <__adddf3>
 801041a:	4642      	mov	r2, r8
 801041c:	464b      	mov	r3, r9
 801041e:	f7f0 f897 	bl	8000550 <__aeabi_dmul>
 8010422:	a35d      	add	r3, pc, #372	; (adr r3, 8010598 <__ieee754_log+0x330>)
 8010424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010428:	f7ef fedc 	bl	80001e4 <__adddf3>
 801042c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010430:	f7f0 f88e 	bl	8000550 <__aeabi_dmul>
 8010434:	a35a      	add	r3, pc, #360	; (adr r3, 80105a0 <__ieee754_log+0x338>)
 8010436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801043e:	4640      	mov	r0, r8
 8010440:	4649      	mov	r1, r9
 8010442:	f7f0 f885 	bl	8000550 <__aeabi_dmul>
 8010446:	a358      	add	r3, pc, #352	; (adr r3, 80105a8 <__ieee754_log+0x340>)
 8010448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801044c:	f7ef feca 	bl	80001e4 <__adddf3>
 8010450:	4642      	mov	r2, r8
 8010452:	464b      	mov	r3, r9
 8010454:	f7f0 f87c 	bl	8000550 <__aeabi_dmul>
 8010458:	a355      	add	r3, pc, #340	; (adr r3, 80105b0 <__ieee754_log+0x348>)
 801045a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045e:	f7ef fec1 	bl	80001e4 <__adddf3>
 8010462:	4642      	mov	r2, r8
 8010464:	464b      	mov	r3, r9
 8010466:	f7f0 f873 	bl	8000550 <__aeabi_dmul>
 801046a:	4602      	mov	r2, r0
 801046c:	460b      	mov	r3, r1
 801046e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010472:	f7ef feb7 	bl	80001e4 <__adddf3>
 8010476:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 801047a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801047e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8010482:	3551      	adds	r5, #81	; 0x51
 8010484:	4335      	orrs	r5, r6
 8010486:	2d00      	cmp	r5, #0
 8010488:	4680      	mov	r8, r0
 801048a:	4689      	mov	r9, r1
 801048c:	dd48      	ble.n	8010520 <__ieee754_log+0x2b8>
 801048e:	2200      	movs	r2, #0
 8010490:	4b4d      	ldr	r3, [pc, #308]	; (80105c8 <__ieee754_log+0x360>)
 8010492:	4650      	mov	r0, sl
 8010494:	4659      	mov	r1, fp
 8010496:	f7f0 f85b 	bl	8000550 <__aeabi_dmul>
 801049a:	4652      	mov	r2, sl
 801049c:	465b      	mov	r3, fp
 801049e:	f7f0 f857 	bl	8000550 <__aeabi_dmul>
 80104a2:	4602      	mov	r2, r0
 80104a4:	460b      	mov	r3, r1
 80104a6:	4606      	mov	r6, r0
 80104a8:	460f      	mov	r7, r1
 80104aa:	4640      	mov	r0, r8
 80104ac:	4649      	mov	r1, r9
 80104ae:	f7ef fe99 	bl	80001e4 <__adddf3>
 80104b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104b6:	f7f0 f84b 	bl	8000550 <__aeabi_dmul>
 80104ba:	4680      	mov	r8, r0
 80104bc:	4689      	mov	r9, r1
 80104be:	b964      	cbnz	r4, 80104da <__ieee754_log+0x272>
 80104c0:	4602      	mov	r2, r0
 80104c2:	460b      	mov	r3, r1
 80104c4:	4630      	mov	r0, r6
 80104c6:	4639      	mov	r1, r7
 80104c8:	f7ef fe8a 	bl	80001e0 <__aeabi_dsub>
 80104cc:	4602      	mov	r2, r0
 80104ce:	460b      	mov	r3, r1
 80104d0:	4650      	mov	r0, sl
 80104d2:	4659      	mov	r1, fp
 80104d4:	f7ef fe84 	bl	80001e0 <__aeabi_dsub>
 80104d8:	e6d9      	b.n	801028e <__ieee754_log+0x26>
 80104da:	a323      	add	r3, pc, #140	; (adr r3, 8010568 <__ieee754_log+0x300>)
 80104dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104e4:	f7f0 f834 	bl	8000550 <__aeabi_dmul>
 80104e8:	a321      	add	r3, pc, #132	; (adr r3, 8010570 <__ieee754_log+0x308>)
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	4604      	mov	r4, r0
 80104f0:	460d      	mov	r5, r1
 80104f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f6:	f7f0 f82b 	bl	8000550 <__aeabi_dmul>
 80104fa:	4642      	mov	r2, r8
 80104fc:	464b      	mov	r3, r9
 80104fe:	f7ef fe71 	bl	80001e4 <__adddf3>
 8010502:	4602      	mov	r2, r0
 8010504:	460b      	mov	r3, r1
 8010506:	4630      	mov	r0, r6
 8010508:	4639      	mov	r1, r7
 801050a:	f7ef fe69 	bl	80001e0 <__aeabi_dsub>
 801050e:	4652      	mov	r2, sl
 8010510:	465b      	mov	r3, fp
 8010512:	f7ef fe65 	bl	80001e0 <__aeabi_dsub>
 8010516:	4602      	mov	r2, r0
 8010518:	460b      	mov	r3, r1
 801051a:	4620      	mov	r0, r4
 801051c:	4629      	mov	r1, r5
 801051e:	e7d9      	b.n	80104d4 <__ieee754_log+0x26c>
 8010520:	4602      	mov	r2, r0
 8010522:	460b      	mov	r3, r1
 8010524:	4650      	mov	r0, sl
 8010526:	4659      	mov	r1, fp
 8010528:	f7ef fe5a 	bl	80001e0 <__aeabi_dsub>
 801052c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010530:	f7f0 f80e 	bl	8000550 <__aeabi_dmul>
 8010534:	4606      	mov	r6, r0
 8010536:	460f      	mov	r7, r1
 8010538:	2c00      	cmp	r4, #0
 801053a:	f43f af25 	beq.w	8010388 <__ieee754_log+0x120>
 801053e:	a30a      	add	r3, pc, #40	; (adr r3, 8010568 <__ieee754_log+0x300>)
 8010540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010548:	f7f0 f802 	bl	8000550 <__aeabi_dmul>
 801054c:	a308      	add	r3, pc, #32	; (adr r3, 8010570 <__ieee754_log+0x308>)
 801054e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010552:	4604      	mov	r4, r0
 8010554:	460d      	mov	r5, r1
 8010556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801055a:	e729      	b.n	80103b0 <__ieee754_log+0x148>
 801055c:	2000      	movs	r0, #0
 801055e:	2100      	movs	r1, #0
 8010560:	e695      	b.n	801028e <__ieee754_log+0x26>
 8010562:	bf00      	nop
 8010564:	f3af 8000 	nop.w
 8010568:	fee00000 	.word	0xfee00000
 801056c:	3fe62e42 	.word	0x3fe62e42
 8010570:	35793c76 	.word	0x35793c76
 8010574:	3dea39ef 	.word	0x3dea39ef
 8010578:	55555555 	.word	0x55555555
 801057c:	3fd55555 	.word	0x3fd55555
 8010580:	df3e5244 	.word	0xdf3e5244
 8010584:	3fc2f112 	.word	0x3fc2f112
 8010588:	96cb03de 	.word	0x96cb03de
 801058c:	3fc74664 	.word	0x3fc74664
 8010590:	94229359 	.word	0x94229359
 8010594:	3fd24924 	.word	0x3fd24924
 8010598:	55555593 	.word	0x55555593
 801059c:	3fe55555 	.word	0x3fe55555
 80105a0:	d078c69f 	.word	0xd078c69f
 80105a4:	3fc39a09 	.word	0x3fc39a09
 80105a8:	1d8e78af 	.word	0x1d8e78af
 80105ac:	3fcc71c5 	.word	0x3fcc71c5
 80105b0:	9997fa04 	.word	0x9997fa04
 80105b4:	3fd99999 	.word	0x3fd99999
 80105b8:	c3500000 	.word	0xc3500000
 80105bc:	43500000 	.word	0x43500000
 80105c0:	7fefffff 	.word	0x7fefffff
 80105c4:	3ff00000 	.word	0x3ff00000
 80105c8:	3fe00000 	.word	0x3fe00000

080105cc <matherr>:
 80105cc:	2000      	movs	r0, #0
 80105ce:	4770      	bx	lr

080105d0 <nan>:
 80105d0:	2000      	movs	r0, #0
 80105d2:	4901      	ldr	r1, [pc, #4]	; (80105d8 <nan+0x8>)
 80105d4:	4770      	bx	lr
 80105d6:	bf00      	nop
 80105d8:	7ff80000 	.word	0x7ff80000

080105dc <_init>:
 80105dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105de:	bf00      	nop
 80105e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105e2:	bc08      	pop	{r3}
 80105e4:	469e      	mov	lr, r3
 80105e6:	4770      	bx	lr

080105e8 <_fini>:
 80105e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105ea:	bf00      	nop
 80105ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80105ee:	bc08      	pop	{r3}
 80105f0:	469e      	mov	lr, r3
 80105f2:	4770      	bx	lr
