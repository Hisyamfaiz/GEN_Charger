
GEN Charger Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f21c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800f3a8  0800f3a8  0001f3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe54  0800fe54  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe54  0800fe54  0001fe54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe5c  0800fe5c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe5c  0800fe5c  0001fe5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe60  0800fe60  0001fe60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800fe64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d1c  20000238  0801009c  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f54  0801009c  00020f54  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4e5  00000000  00000000  00020261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038e5  00000000  00000000  0003d746  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00041030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  000423f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021acf  00000000  00000000  000435e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001395e  00000000  00000000  000650b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c214d  00000000  00000000  00078a15  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ab62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  0013abe0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f38c 	.word	0x0800f38c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	0800f38c 	.word	0x0800f38c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <Constant_Current>:
float 	SetPoint_CC;
float	CC_Value = 0.33*Battery_Capacity;


void Constant_Current()
{
 8001490:	b598      	push	{r3, r4, r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(Batt_SOC.m_uint16t <= 15)
 8001494:	4b98      	ldr	r3, [pc, #608]	; (80016f8 <Constant_Current+0x268>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d813      	bhi.n	80014c4 <Constant_Current+0x34>
		SetPoint_CC = 0.05*CC_Value;
 800149c:	4b97      	ldr	r3, [pc, #604]	; (80016fc <Constant_Current+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fffd 	bl	80004a0 <__aeabi_f2d>
 80014a6:	a38e      	add	r3, pc, #568	; (adr r3, 80016e0 <Constant_Current+0x250>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f850 	bl	8000550 <__aeabi_dmul>
 80014b0:	4603      	mov	r3, r0
 80014b2:	460c      	mov	r4, r1
 80014b4:	4618      	mov	r0, r3
 80014b6:	4621      	mov	r1, r4
 80014b8:	f7ff fb22 	bl	8000b00 <__aeabi_d2f>
 80014bc:	4602      	mov	r2, r0
 80014be:	4b90      	ldr	r3, [pc, #576]	; (8001700 <Constant_Current+0x270>)
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	e073      	b.n	80015ac <Constant_Current+0x11c>
	else {
		if(flag_Derating==1)
 80014c4:	4b8f      	ldr	r3, [pc, #572]	; (8001704 <Constant_Current+0x274>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d10b      	bne.n	80014e4 <Constant_Current+0x54>
			SetPoint_CC = 0.5*CC_Value;
 80014cc:	4b8b      	ldr	r3, [pc, #556]	; (80016fc <Constant_Current+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc71 	bl	8000dbc <__aeabi_fmul>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b88      	ldr	r3, [pc, #544]	; (8001700 <Constant_Current+0x270>)
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e063      	b.n	80015ac <Constant_Current+0x11c>
		else {
			if(Batt_temp.m_uint16t <= 10)
 80014e4:	4b88      	ldr	r3, [pc, #544]	; (8001708 <Constant_Current+0x278>)
 80014e6:	881b      	ldrh	r3, [r3, #0]
 80014e8:	2b0a      	cmp	r3, #10
 80014ea:	d80a      	bhi.n	8001502 <Constant_Current+0x72>
				SetPoint_CC = 0.5*CC_Value;
 80014ec:	4b83      	ldr	r3, [pc, #524]	; (80016fc <Constant_Current+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fc61 	bl	8000dbc <__aeabi_fmul>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b80      	ldr	r3, [pc, #512]	; (8001700 <Constant_Current+0x270>)
 8001500:	601a      	str	r2, [r3, #0]

			if(Batt_temp.m_uint16t >10 && Batt_temp.m_uint16t <= 20) // Temperature 10 ~ 20
 8001502:	4b81      	ldr	r3, [pc, #516]	; (8001708 <Constant_Current+0x278>)
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d90e      	bls.n	8001528 <Constant_Current+0x98>
 800150a:	4b7f      	ldr	r3, [pc, #508]	; (8001708 <Constant_Current+0x278>)
 800150c:	881b      	ldrh	r3, [r3, #0]
 800150e:	2b14      	cmp	r3, #20
 8001510:	d80a      	bhi.n	8001528 <Constant_Current+0x98>
				SetPoint_CC = 0.5*CC_Value;
 8001512:	4b7a      	ldr	r3, [pc, #488]	; (80016fc <Constant_Current+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fc4e 	bl	8000dbc <__aeabi_fmul>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	4b76      	ldr	r3, [pc, #472]	; (8001700 <Constant_Current+0x270>)
 8001526:	601a      	str	r2, [r3, #0]

			if(Batt_temp.m_uint16t > 20 && Batt_temp.m_uint16t <= 30) // Temperature 20 ~ 30
 8001528:	4b77      	ldr	r3, [pc, #476]	; (8001708 <Constant_Current+0x278>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	2b14      	cmp	r3, #20
 800152e:	d916      	bls.n	800155e <Constant_Current+0xce>
 8001530:	4b75      	ldr	r3, [pc, #468]	; (8001708 <Constant_Current+0x278>)
 8001532:	881b      	ldrh	r3, [r3, #0]
 8001534:	2b1e      	cmp	r3, #30
 8001536:	d812      	bhi.n	800155e <Constant_Current+0xce>
				SetPoint_CC = 0.7*CC_Value;
 8001538:	4b70      	ldr	r3, [pc, #448]	; (80016fc <Constant_Current+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f7fe ffaf 	bl	80004a0 <__aeabi_f2d>
 8001542:	a369      	add	r3, pc, #420	; (adr r3, 80016e8 <Constant_Current+0x258>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7ff f802 	bl	8000550 <__aeabi_dmul>
 800154c:	4603      	mov	r3, r0
 800154e:	460c      	mov	r4, r1
 8001550:	4618      	mov	r0, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f7ff fad4 	bl	8000b00 <__aeabi_d2f>
 8001558:	4602      	mov	r2, r0
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <Constant_Current+0x270>)
 800155c:	601a      	str	r2, [r3, #0]

			if(Batt_temp.m_uint16t > 30 && Batt_temp.m_uint16t <= 40)
 800155e:	4b6a      	ldr	r3, [pc, #424]	; (8001708 <Constant_Current+0x278>)
 8001560:	881b      	ldrh	r3, [r3, #0]
 8001562:	2b1e      	cmp	r3, #30
 8001564:	d907      	bls.n	8001576 <Constant_Current+0xe6>
 8001566:	4b68      	ldr	r3, [pc, #416]	; (8001708 <Constant_Current+0x278>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b28      	cmp	r3, #40	; 0x28
 800156c:	d803      	bhi.n	8001576 <Constant_Current+0xe6>
				SetPoint_CC = CC_Value;
 800156e:	4b63      	ldr	r3, [pc, #396]	; (80016fc <Constant_Current+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a63      	ldr	r2, [pc, #396]	; (8001700 <Constant_Current+0x270>)
 8001574:	6013      	str	r3, [r2, #0]

			if(Batt_temp.m_uint16t > 40 && Batt_temp.m_uint16t <= 50)
 8001576:	4b64      	ldr	r3, [pc, #400]	; (8001708 <Constant_Current+0x278>)
 8001578:	881b      	ldrh	r3, [r3, #0]
 800157a:	2b28      	cmp	r3, #40	; 0x28
 800157c:	d916      	bls.n	80015ac <Constant_Current+0x11c>
 800157e:	4b62      	ldr	r3, [pc, #392]	; (8001708 <Constant_Current+0x278>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	2b32      	cmp	r3, #50	; 0x32
 8001584:	d812      	bhi.n	80015ac <Constant_Current+0x11c>
				SetPoint_CC = 0.3*CC_Value;
 8001586:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <Constant_Current+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ff88 	bl	80004a0 <__aeabi_f2d>
 8001590:	a357      	add	r3, pc, #348	; (adr r3, 80016f0 <Constant_Current+0x260>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe ffdb 	bl	8000550 <__aeabi_dmul>
 800159a:	4603      	mov	r3, r0
 800159c:	460c      	mov	r4, r1
 800159e:	4618      	mov	r0, r3
 80015a0:	4621      	mov	r1, r4
 80015a2:	f7ff faad 	bl	8000b00 <__aeabi_d2f>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <Constant_Current+0x270>)
 80015aa:	601a      	str	r2, [r3, #0]
		}
	}

	sp = SetPoint_CC;
 80015ac:	4b54      	ldr	r3, [pc, #336]	; (8001700 <Constant_Current+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a56      	ldr	r2, [pc, #344]	; (800170c <Constant_Current+0x27c>)
 80015b2:	6013      	str	r3, [r2, #0]
	pv = Current_Charger;
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <Constant_Current+0x280>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a56      	ldr	r2, [pc, #344]	; (8001714 <Constant_Current+0x284>)
 80015ba:	6013      	str	r3, [r2, #0]
	e = sp-pv;
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <Constant_Current+0x27c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b54      	ldr	r3, [pc, #336]	; (8001714 <Constant_Current+0x284>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4610      	mov	r0, r2
 80015c8:	f7ff faee 	bl	8000ba8 <__aeabi_fsub>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b51      	ldr	r3, [pc, #324]	; (8001718 <Constant_Current+0x288>)
 80015d2:	601a      	str	r2, [r3, #0]
	d = e-esblm;
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <Constant_Current+0x288>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <Constant_Current+0x28c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	4610      	mov	r0, r2
 80015e0:	f7ff fae2 	bl	8000ba8 <__aeabi_fsub>
 80015e4:	4603      	mov	r3, r0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <Constant_Current+0x290>)
 80015ea:	601a      	str	r2, [r3, #0]
	esblm = e;
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <Constant_Current+0x288>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a4a      	ldr	r2, [pc, #296]	; (800171c <Constant_Current+0x28c>)
 80015f2:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-6)
 80015f4:	4b48      	ldr	r3, [pc, #288]	; (8001718 <Constant_Current+0x288>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	494a      	ldr	r1, [pc, #296]	; (8001724 <Constant_Current+0x294>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fd86 	bl	800110c <__aeabi_fcmple>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01b      	beq.n	800163e <Constant_Current+0x1ae>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 8001606:	4b48      	ldr	r3, [pc, #288]	; (8001728 <Constant_Current+0x298>)
 8001608:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	4b47      	ldr	r3, [pc, #284]	; (800172c <Constant_Current+0x29c>)
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	4b45      	ldr	r3, [pc, #276]	; (800172c <Constant_Current+0x29c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a45      	ldr	r2, [pc, #276]	; (8001730 <Constant_Current+0x2a0>)
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	4b44      	ldr	r3, [pc, #272]	; (8001730 <Constant_Current+0x2a0>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a44      	ldr	r2, [pc, #272]	; (8001734 <Constant_Current+0x2a4>)
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <Constant_Current+0x2a4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a43      	ldr	r2, [pc, #268]	; (8001738 <Constant_Current+0x2a8>)
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	4b42      	ldr	r3, [pc, #264]	; (8001738 <Constant_Current+0x2a8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a42      	ldr	r2, [pc, #264]	; (800173c <Constant_Current+0x2ac>)
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <Constant_Current+0x2ac>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a41      	ldr	r2, [pc, #260]	; (8001740 <Constant_Current+0x2b0>)
 800163c:	6013      	str	r3, [r2, #0]

	if(e>=-6&&e<=-4)
 800163e:	4b36      	ldr	r3, [pc, #216]	; (8001718 <Constant_Current+0x288>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4938      	ldr	r1, [pc, #224]	; (8001724 <Constant_Current+0x294>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd6b 	bl	8001120 <__aeabi_fcmpge>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d07d      	beq.n	800174c <Constant_Current+0x2bc>
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <Constant_Current+0x288>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	493b      	ldr	r1, [pc, #236]	; (8001744 <Constant_Current+0x2b4>)
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fd58 	bl	800110c <__aeabi_fcmple>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d074      	beq.n	800174c <Constant_Current+0x2bc>
	{ eNB=(-(e+6)/2)+1;
 8001662:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <Constant_Current+0x288>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4938      	ldr	r1, [pc, #224]	; (8001748 <Constant_Current+0x2b8>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fa9f 	bl	8000bac <__addsf3>
 800166e:	4603      	mov	r3, r0
 8001670:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001674:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fc53 	bl	8000f24 <__aeabi_fdiv>
 800167e:	4603      	mov	r3, r0
 8001680:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fa91 	bl	8000bac <__addsf3>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b26      	ldr	r3, [pc, #152]	; (8001728 <Constant_Current+0x298>)
 8001690:	601a      	str	r2, [r3, #0]
	   eNM=(e+6)/2;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <Constant_Current+0x288>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	492c      	ldr	r1, [pc, #176]	; (8001748 <Constant_Current+0x2b8>)
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fa87 	bl	8000bac <__addsf3>
 800169e:	4603      	mov	r3, r0
 80016a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fc3d 	bl	8000f24 <__aeabi_fdiv>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <Constant_Current+0x2b0>)
 80016b0:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 80016b2:	4b1e      	ldr	r3, [pc, #120]	; (800172c <Constant_Current+0x29c>)
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <Constant_Current+0x29c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <Constant_Current+0x2a0>)
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <Constant_Current+0x2a0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <Constant_Current+0x2a4>)
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <Constant_Current+0x2a4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1a      	ldr	r2, [pc, #104]	; (8001738 <Constant_Current+0x2a8>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <Constant_Current+0x2a8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a19      	ldr	r2, [pc, #100]	; (800173c <Constant_Current+0x2ac>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e1fe      	b.n	8001ada <Constant_Current+0x64a>
 80016dc:	f3af 8000 	nop.w
 80016e0:	9999999a 	.word	0x9999999a
 80016e4:	3fa99999 	.word	0x3fa99999
 80016e8:	66666666 	.word	0x66666666
 80016ec:	3fe66666 	.word	0x3fe66666
 80016f0:	33333333 	.word	0x33333333
 80016f4:	3fd33333 	.word	0x3fd33333
 80016f8:	20000a00 	.word	0x20000a00
 80016fc:	20000020 	.word	0x20000020
 8001700:	200008f4 	.word	0x200008f4
 8001704:	20000aa4 	.word	0x20000aa4
 8001708:	20000a48 	.word	0x20000a48
 800170c:	20000a88 	.word	0x20000a88
 8001710:	20000ab4 	.word	0x20000ab4
 8001714:	20000aa8 	.word	0x20000aa8
 8001718:	20000ac0 	.word	0x20000ac0
 800171c:	20000ac4 	.word	0x20000ac4
 8001720:	20000a5c 	.word	0x20000a5c
 8001724:	c0c00000 	.word	0xc0c00000
 8001728:	20000ac8 	.word	0x20000ac8
 800172c:	200008f8 	.word	0x200008f8
 8001730:	20000a68 	.word	0x20000a68
 8001734:	200009f0 	.word	0x200009f0
 8001738:	20000b10 	.word	0x20000b10
 800173c:	2000076c 	.word	0x2000076c
 8001740:	20000afc 	.word	0x20000afc
 8001744:	c0800000 	.word	0xc0800000
 8001748:	40c00000 	.word	0x40c00000
	}

	else if(e>=-4&&e<=-2)
 800174c:	4b9e      	ldr	r3, [pc, #632]	; (80019c8 <Constant_Current+0x538>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	499e      	ldr	r1, [pc, #632]	; (80019cc <Constant_Current+0x53c>)
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fce4 	bl	8001120 <__aeabi_fcmpge>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d048      	beq.n	80017f0 <Constant_Current+0x360>
 800175e:	4b9a      	ldr	r3, [pc, #616]	; (80019c8 <Constant_Current+0x538>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fcd0 	bl	800110c <__aeabi_fcmple>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d03e      	beq.n	80017f0 <Constant_Current+0x360>
	{ eNM=(-(e+4)/2)+1;
 8001772:	4b95      	ldr	r3, [pc, #596]	; (80019c8 <Constant_Current+0x538>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fa16 	bl	8000bac <__addsf3>
 8001780:	4603      	mov	r3, r0
 8001782:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001786:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fbca 	bl	8000f24 <__aeabi_fdiv>
 8001790:	4603      	mov	r3, r0
 8001792:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fa08 	bl	8000bac <__addsf3>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	4b8b      	ldr	r3, [pc, #556]	; (80019d0 <Constant_Current+0x540>)
 80017a2:	601a      	str	r2, [r3, #0]
	   eNS=(e+4)/2;
 80017a4:	4b88      	ldr	r3, [pc, #544]	; (80019c8 <Constant_Current+0x538>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff f9fd 	bl	8000bac <__addsf3>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fbb3 	bl	8000f24 <__aeabi_fdiv>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b84      	ldr	r3, [pc, #528]	; (80019d4 <Constant_Current+0x544>)
 80017c4:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 80017c6:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <Constant_Current+0x548>)
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	4b82      	ldr	r3, [pc, #520]	; (80019d8 <Constant_Current+0x548>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a82      	ldr	r2, [pc, #520]	; (80019dc <Constant_Current+0x54c>)
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b81      	ldr	r3, [pc, #516]	; (80019dc <Constant_Current+0x54c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a81      	ldr	r2, [pc, #516]	; (80019e0 <Constant_Current+0x550>)
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b80      	ldr	r3, [pc, #512]	; (80019e0 <Constant_Current+0x550>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a80      	ldr	r2, [pc, #512]	; (80019e4 <Constant_Current+0x554>)
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b7f      	ldr	r3, [pc, #508]	; (80019e4 <Constant_Current+0x554>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7f      	ldr	r2, [pc, #508]	; (80019e8 <Constant_Current+0x558>)
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e174      	b.n	8001ada <Constant_Current+0x64a>
	}

	else if(e>=-2&&e<=0)
 80017f0:	4b75      	ldr	r3, [pc, #468]	; (80019c8 <Constant_Current+0x538>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fc91 	bl	8001120 <__aeabi_fcmpge>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d048      	beq.n	8001896 <Constant_Current+0x406>
 8001804:	4b70      	ldr	r3, [pc, #448]	; (80019c8 <Constant_Current+0x538>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fc7d 	bl	800110c <__aeabi_fcmple>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d03e      	beq.n	8001896 <Constant_Current+0x406>
	{ eNS=(-(e+2)/2)+1;
 8001818:	4b6b      	ldr	r3, [pc, #428]	; (80019c8 <Constant_Current+0x538>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff f9c3 	bl	8000bac <__addsf3>
 8001826:	4603      	mov	r3, r0
 8001828:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800182c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb77 	bl	8000f24 <__aeabi_fdiv>
 8001836:	4603      	mov	r3, r0
 8001838:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff f9b5 	bl	8000bac <__addsf3>
 8001842:	4603      	mov	r3, r0
 8001844:	461a      	mov	r2, r3
 8001846:	4b63      	ldr	r3, [pc, #396]	; (80019d4 <Constant_Current+0x544>)
 8001848:	601a      	str	r2, [r3, #0]
	   eZ=(e/2)+1;
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <Constant_Current+0x538>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fb66 	bl	8000f24 <__aeabi_fdiv>
 8001858:	4603      	mov	r3, r0
 800185a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f9a4 	bl	8000bac <__addsf3>
 8001864:	4603      	mov	r3, r0
 8001866:	461a      	mov	r2, r3
 8001868:	4b5e      	ldr	r3, [pc, #376]	; (80019e4 <Constant_Current+0x554>)
 800186a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <Constant_Current+0x548>)
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <Constant_Current+0x548>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a58      	ldr	r2, [pc, #352]	; (80019dc <Constant_Current+0x54c>)
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b57      	ldr	r3, [pc, #348]	; (80019dc <Constant_Current+0x54c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a57      	ldr	r2, [pc, #348]	; (80019e0 <Constant_Current+0x550>)
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b56      	ldr	r3, [pc, #344]	; (80019e0 <Constant_Current+0x550>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <Constant_Current+0x540>)
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b50      	ldr	r3, [pc, #320]	; (80019d0 <Constant_Current+0x540>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a55      	ldr	r2, [pc, #340]	; (80019e8 <Constant_Current+0x558>)
 8001892:	6013      	str	r3, [r2, #0]
 8001894:	e121      	b.n	8001ada <Constant_Current+0x64a>
	}

	else if(e>=0&&e<=2)
 8001896:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <Constant_Current+0x538>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fc3e 	bl	8001120 <__aeabi_fcmpge>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d03a      	beq.n	8001920 <Constant_Current+0x490>
 80018aa:	4b47      	ldr	r3, [pc, #284]	; (80019c8 <Constant_Current+0x538>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fc2a 	bl	800110c <__aeabi_fcmple>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d030      	beq.n	8001920 <Constant_Current+0x490>
	{ eZ=-(e/2)+1;
 80018be:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <Constant_Current+0x538>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fb2c 	bl	8000f24 <__aeabi_fdiv>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80018d4:	f7ff f968 	bl	8000ba8 <__aeabi_fsub>
 80018d8:	4603      	mov	r3, r0
 80018da:	461a      	mov	r2, r3
 80018dc:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <Constant_Current+0x554>)
 80018de:	601a      	str	r2, [r3, #0]
	   ePS=e/2;
 80018e0:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <Constant_Current+0x538>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fb1b 	bl	8000f24 <__aeabi_fdiv>
 80018ee:	4603      	mov	r3, r0
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b3b      	ldr	r3, [pc, #236]	; (80019e0 <Constant_Current+0x550>)
 80018f4:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <Constant_Current+0x548>)
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	4b36      	ldr	r3, [pc, #216]	; (80019d8 <Constant_Current+0x548>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a36      	ldr	r2, [pc, #216]	; (80019dc <Constant_Current+0x54c>)
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <Constant_Current+0x54c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a32      	ldr	r2, [pc, #200]	; (80019d4 <Constant_Current+0x544>)
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <Constant_Current+0x544>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <Constant_Current+0x540>)
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <Constant_Current+0x540>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a33      	ldr	r2, [pc, #204]	; (80019e8 <Constant_Current+0x558>)
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e0dc      	b.n	8001ada <Constant_Current+0x64a>
	}

	else if(e>=2&&e<=4)
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <Constant_Current+0x538>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fbf9 	bl	8001120 <__aeabi_fcmpge>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <Constant_Current+0x55c>
 8001934:	4b24      	ldr	r3, [pc, #144]	; (80019c8 <Constant_Current+0x538>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fbe5 	bl	800110c <__aeabi_fcmple>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d051      	beq.n	80019ec <Constant_Current+0x55c>
	{ ePS=(-(e-2)/2)+1;
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <Constant_Current+0x538>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff f929 	bl	8000ba8 <__aeabi_fsub>
 8001956:	4603      	mov	r3, r0
 8001958:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800195c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fadf 	bl	8000f24 <__aeabi_fdiv>
 8001966:	4603      	mov	r3, r0
 8001968:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f91d 	bl	8000bac <__addsf3>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b1a      	ldr	r3, [pc, #104]	; (80019e0 <Constant_Current+0x550>)
 8001978:	601a      	str	r2, [r3, #0]
	   ePM=(e-2)/2;
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <Constant_Current+0x538>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f910 	bl	8000ba8 <__aeabi_fsub>
 8001988:	4603      	mov	r3, r0
 800198a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fac8 	bl	8000f24 <__aeabi_fdiv>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <Constant_Current+0x54c>)
 800199a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 800199c:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <Constant_Current+0x548>)
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <Constant_Current+0x548>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <Constant_Current+0x554>)
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b0d      	ldr	r3, [pc, #52]	; (80019e4 <Constant_Current+0x554>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <Constant_Current+0x544>)
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <Constant_Current+0x544>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a05      	ldr	r2, [pc, #20]	; (80019d0 <Constant_Current+0x540>)
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <Constant_Current+0x540>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <Constant_Current+0x558>)
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e089      	b.n	8001ada <Constant_Current+0x64a>
 80019c6:	bf00      	nop
 80019c8:	20000ac0 	.word	0x20000ac0
 80019cc:	c0800000 	.word	0xc0800000
 80019d0:	20000afc 	.word	0x20000afc
 80019d4:	2000076c 	.word	0x2000076c
 80019d8:	200008f8 	.word	0x200008f8
 80019dc:	20000a68 	.word	0x20000a68
 80019e0:	200009f0 	.word	0x200009f0
 80019e4:	20000b10 	.word	0x20000b10
 80019e8:	20000ac8 	.word	0x20000ac8
	}

	else if(e>=4&&e<=6)
 80019ec:	4b75      	ldr	r3, [pc, #468]	; (8001bc4 <Constant_Current+0x734>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fb93 	bl	8001120 <__aeabi_fcmpge>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d047      	beq.n	8001a90 <Constant_Current+0x600>
 8001a00:	4b70      	ldr	r3, [pc, #448]	; (8001bc4 <Constant_Current+0x734>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4970      	ldr	r1, [pc, #448]	; (8001bc8 <Constant_Current+0x738>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb80 	bl	800110c <__aeabi_fcmple>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03e      	beq.n	8001a90 <Constant_Current+0x600>
	{ ePM=(-(e-4)/2)+1;
 8001a12:	4b6c      	ldr	r3, [pc, #432]	; (8001bc4 <Constant_Current+0x734>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f8c4 	bl	8000ba8 <__aeabi_fsub>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fa7a 	bl	8000f24 <__aeabi_fdiv>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f8b8 	bl	8000bac <__addsf3>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	461a      	mov	r2, r3
 8001a40:	4b62      	ldr	r3, [pc, #392]	; (8001bcc <Constant_Current+0x73c>)
 8001a42:	601a      	str	r2, [r3, #0]
	   ePB=(e-4)/2;
 8001a44:	4b5f      	ldr	r3, [pc, #380]	; (8001bc4 <Constant_Current+0x734>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff f8ab 	bl	8000ba8 <__aeabi_fsub>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa63 	bl	8000f24 <__aeabi_fdiv>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b5b      	ldr	r3, [pc, #364]	; (8001bd0 <Constant_Current+0x740>)
 8001a64:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <Constant_Current+0x744>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	4b59      	ldr	r3, [pc, #356]	; (8001bd4 <Constant_Current+0x744>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a59      	ldr	r2, [pc, #356]	; (8001bd8 <Constant_Current+0x748>)
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <Constant_Current+0x748>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a58      	ldr	r2, [pc, #352]	; (8001bdc <Constant_Current+0x74c>)
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <Constant_Current+0x74c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a57      	ldr	r2, [pc, #348]	; (8001be0 <Constant_Current+0x750>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b56      	ldr	r3, [pc, #344]	; (8001be0 <Constant_Current+0x750>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a56      	ldr	r2, [pc, #344]	; (8001be4 <Constant_Current+0x754>)
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e024      	b.n	8001ada <Constant_Current+0x64a>
	}

	else if(e>=6)
 8001a90:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <Constant_Current+0x734>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	494c      	ldr	r1, [pc, #304]	; (8001bc8 <Constant_Current+0x738>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb42 	bl	8001120 <__aeabi_fcmpge>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01b      	beq.n	8001ada <Constant_Current+0x64a>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8001aa2:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <Constant_Current+0x740>)
 8001aa4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <Constant_Current+0x73c>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <Constant_Current+0x73c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <Constant_Current+0x744>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <Constant_Current+0x744>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <Constant_Current+0x748>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <Constant_Current+0x748>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <Constant_Current+0x74c>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b44      	ldr	r3, [pc, #272]	; (8001bdc <Constant_Current+0x74c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a44      	ldr	r2, [pc, #272]	; (8001be0 <Constant_Current+0x750>)
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	4b43      	ldr	r3, [pc, #268]	; (8001be0 <Constant_Current+0x750>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a43      	ldr	r2, [pc, #268]	; (8001be4 <Constant_Current+0x754>)
 8001ad8:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-6)
 8001ada:	4b43      	ldr	r3, [pc, #268]	; (8001be8 <Constant_Current+0x758>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4943      	ldr	r1, [pc, #268]	; (8001bec <Constant_Current+0x75c>)
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fb13 	bl	800110c <__aeabi_fcmple>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <Constant_Current+0x694>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8001aec:	4b40      	ldr	r3, [pc, #256]	; (8001bf0 <Constant_Current+0x760>)
 8001aee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	4b3f      	ldr	r3, [pc, #252]	; (8001bf4 <Constant_Current+0x764>)
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <Constant_Current+0x764>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <Constant_Current+0x768>)
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b3c      	ldr	r3, [pc, #240]	; (8001bf8 <Constant_Current+0x768>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3c      	ldr	r2, [pc, #240]	; (8001bfc <Constant_Current+0x76c>)
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <Constant_Current+0x76c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a3b      	ldr	r2, [pc, #236]	; (8001c00 <Constant_Current+0x770>)
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b3a      	ldr	r3, [pc, #232]	; (8001c00 <Constant_Current+0x770>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a3a      	ldr	r2, [pc, #232]	; (8001c04 <Constant_Current+0x774>)
 8001b1a:	6013      	str	r3, [r2, #0]
 8001b1c:	4b39      	ldr	r3, [pc, #228]	; (8001c04 <Constant_Current+0x774>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a39      	ldr	r2, [pc, #228]	; (8001c08 <Constant_Current+0x778>)
 8001b22:	6013      	str	r3, [r2, #0]

	if(d>=-6&&d<=-4)
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <Constant_Current+0x758>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4930      	ldr	r1, [pc, #192]	; (8001bec <Constant_Current+0x75c>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff faf8 	bl	8001120 <__aeabi_fcmpge>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d06c      	beq.n	8001c10 <Constant_Current+0x780>
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <Constant_Current+0x758>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4934      	ldr	r1, [pc, #208]	; (8001c0c <Constant_Current+0x77c>)
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fae5 	bl	800110c <__aeabi_fcmple>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d063      	beq.n	8001c10 <Constant_Current+0x780>
	{ dNB=(-(d+6)/2)+1;
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <Constant_Current+0x758>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	491e      	ldr	r1, [pc, #120]	; (8001bc8 <Constant_Current+0x738>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f82c 	bl	8000bac <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f9e0 	bl	8000f24 <__aeabi_fdiv>
 8001b64:	4603      	mov	r3, r0
 8001b66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f81e 	bl	8000bac <__addsf3>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <Constant_Current+0x760>)
 8001b76:	601a      	str	r2, [r3, #0]
	   dNM=(d+6)/2;
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <Constant_Current+0x758>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4912      	ldr	r1, [pc, #72]	; (8001bc8 <Constant_Current+0x738>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f814 	bl	8000bac <__addsf3>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f9ca 	bl	8000f24 <__aeabi_fdiv>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <Constant_Current+0x778>)
 8001b96:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <Constant_Current+0x764>)
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <Constant_Current+0x764>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <Constant_Current+0x768>)
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <Constant_Current+0x768>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <Constant_Current+0x76c>)
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <Constant_Current+0x76c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a12      	ldr	r2, [pc, #72]	; (8001c00 <Constant_Current+0x770>)
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <Constant_Current+0x770>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a11      	ldr	r2, [pc, #68]	; (8001c04 <Constant_Current+0x774>)
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e1ff      	b.n	8001fc2 <Constant_Current+0xb32>
 8001bc2:	bf00      	nop
 8001bc4:	20000ac0 	.word	0x20000ac0
 8001bc8:	40c00000 	.word	0x40c00000
 8001bcc:	20000a68 	.word	0x20000a68
 8001bd0:	200008f8 	.word	0x200008f8
 8001bd4:	200009f0 	.word	0x200009f0
 8001bd8:	20000b10 	.word	0x20000b10
 8001bdc:	2000076c 	.word	0x2000076c
 8001be0:	20000afc 	.word	0x20000afc
 8001be4:	20000ac8 	.word	0x20000ac8
 8001be8:	20000a5c 	.word	0x20000a5c
 8001bec:	c0c00000 	.word	0xc0c00000
 8001bf0:	20000790 	.word	0x20000790
 8001bf4:	20000a70 	.word	0x20000a70
 8001bf8:	20000798 	.word	0x20000798
 8001bfc:	20000ad8 	.word	0x20000ad8
 8001c00:	20000af0 	.word	0x20000af0
 8001c04:	200008c4 	.word	0x200008c4
 8001c08:	200009ec 	.word	0x200009ec
 8001c0c:	c0800000 	.word	0xc0800000
	}

	else if(d>=-4&&d<=-2)
 8001c10:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <Constant_Current+0x9fc>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	499e      	ldr	r1, [pc, #632]	; (8001e90 <Constant_Current+0xa00>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fa82 	bl	8001120 <__aeabi_fcmpge>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d048      	beq.n	8001cb4 <Constant_Current+0x824>
 8001c22:	4b9a      	ldr	r3, [pc, #616]	; (8001e8c <Constant_Current+0x9fc>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa6e 	bl	800110c <__aeabi_fcmple>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d03e      	beq.n	8001cb4 <Constant_Current+0x824>
	{ dNM=(-(d+4)/2)+1;
 8001c36:	4b95      	ldr	r3, [pc, #596]	; (8001e8c <Constant_Current+0x9fc>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe ffb4 	bl	8000bac <__addsf3>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f968 	bl	8000f24 <__aeabi_fdiv>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe ffa6 	bl	8000bac <__addsf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461a      	mov	r2, r3
 8001c64:	4b8b      	ldr	r3, [pc, #556]	; (8001e94 <Constant_Current+0xa04>)
 8001c66:	601a      	str	r2, [r3, #0]
	   dNS=(d+4)/2;
 8001c68:	4b88      	ldr	r3, [pc, #544]	; (8001e8c <Constant_Current+0x9fc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe ff9b 	bl	8000bac <__addsf3>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f951 	bl	8000f24 <__aeabi_fdiv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b84      	ldr	r3, [pc, #528]	; (8001e98 <Constant_Current+0xa08>)
 8001c88:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8001c8a:	4b84      	ldr	r3, [pc, #528]	; (8001e9c <Constant_Current+0xa0c>)
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	4b82      	ldr	r3, [pc, #520]	; (8001e9c <Constant_Current+0xa0c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a82      	ldr	r2, [pc, #520]	; (8001ea0 <Constant_Current+0xa10>)
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <Constant_Current+0xa10>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a81      	ldr	r2, [pc, #516]	; (8001ea4 <Constant_Current+0xa14>)
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b80      	ldr	r3, [pc, #512]	; (8001ea4 <Constant_Current+0xa14>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a80      	ldr	r2, [pc, #512]	; (8001ea8 <Constant_Current+0xa18>)
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <Constant_Current+0xa18>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7f      	ldr	r2, [pc, #508]	; (8001eac <Constant_Current+0xa1c>)
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e186      	b.n	8001fc2 <Constant_Current+0xb32>
	}

	else if(d>=-2&&d<=0)
 8001cb4:	4b75      	ldr	r3, [pc, #468]	; (8001e8c <Constant_Current+0x9fc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fa2f 	bl	8001120 <__aeabi_fcmpge>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d048      	beq.n	8001d5a <Constant_Current+0x8ca>
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <Constant_Current+0x9fc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f04f 0100 	mov.w	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa1b 	bl	800110c <__aeabi_fcmple>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d03e      	beq.n	8001d5a <Constant_Current+0x8ca>
	{ dNS=(-(d+2)/2)+1;
 8001cdc:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <Constant_Current+0x9fc>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe ff61 	bl	8000bac <__addsf3>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cf0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f915 	bl	8000f24 <__aeabi_fdiv>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe ff53 	bl	8000bac <__addsf3>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b63      	ldr	r3, [pc, #396]	; (8001e98 <Constant_Current+0xa08>)
 8001d0c:	601a      	str	r2, [r3, #0]
	   dZ=(d+2)/2;
 8001d0e:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <Constant_Current+0x9fc>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe ff48 	bl	8000bac <__addsf3>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f8fe 	bl	8000f24 <__aeabi_fdiv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b5e      	ldr	r3, [pc, #376]	; (8001ea8 <Constant_Current+0xa18>)
 8001d2e:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8001d30:	4b5a      	ldr	r3, [pc, #360]	; (8001e9c <Constant_Current+0xa0c>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	4b58      	ldr	r3, [pc, #352]	; (8001e9c <Constant_Current+0xa0c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <Constant_Current+0xa10>)
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b57      	ldr	r3, [pc, #348]	; (8001ea0 <Constant_Current+0xa10>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <Constant_Current+0xa14>)
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b56      	ldr	r3, [pc, #344]	; (8001ea4 <Constant_Current+0xa14>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a51      	ldr	r2, [pc, #324]	; (8001e94 <Constant_Current+0xa04>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <Constant_Current+0xa04>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a55      	ldr	r2, [pc, #340]	; (8001eac <Constant_Current+0xa1c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e133      	b.n	8001fc2 <Constant_Current+0xb32>
	}

	else if(d>=0&&d<=2)
 8001d5a:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <Constant_Current+0x9fc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f9dc 	bl	8001120 <__aeabi_fcmpge>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d03a      	beq.n	8001de4 <Constant_Current+0x954>
 8001d6e:	4b47      	ldr	r3, [pc, #284]	; (8001e8c <Constant_Current+0x9fc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff f9c8 	bl	800110c <__aeabi_fcmple>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d030      	beq.n	8001de4 <Constant_Current+0x954>
	{ dZ=-(d/2)+1;
 8001d82:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <Constant_Current+0x9fc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f8ca 	bl	8000f24 <__aeabi_fdiv>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4619      	mov	r1, r3
 8001d94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d98:	f7fe ff06 	bl	8000ba8 <__aeabi_fsub>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <Constant_Current+0xa18>)
 8001da2:	601a      	str	r2, [r3, #0]
	   dPS=d/2;
 8001da4:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <Constant_Current+0x9fc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff f8b9 	bl	8000f24 <__aeabi_fdiv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <Constant_Current+0xa14>)
 8001db8:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <Constant_Current+0xa0c>)
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <Constant_Current+0xa0c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a36      	ldr	r2, [pc, #216]	; (8001ea0 <Constant_Current+0xa10>)
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b35      	ldr	r3, [pc, #212]	; (8001ea0 <Constant_Current+0xa10>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <Constant_Current+0xa08>)
 8001dd0:	6013      	str	r3, [r2, #0]
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <Constant_Current+0xa08>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a2f      	ldr	r2, [pc, #188]	; (8001e94 <Constant_Current+0xa04>)
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <Constant_Current+0xa04>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a33      	ldr	r2, [pc, #204]	; (8001eac <Constant_Current+0xa1c>)
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e0ee      	b.n	8001fc2 <Constant_Current+0xb32>
	}

	else if(d>=2&&d<=4)
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <Constant_Current+0x9fc>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff f997 	bl	8001120 <__aeabi_fcmpge>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d05b      	beq.n	8001eb0 <Constant_Current+0xa20>
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <Constant_Current+0x9fc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff f983 	bl	800110c <__aeabi_fcmple>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d051      	beq.n	8001eb0 <Constant_Current+0xa20>
	{ dPS=(-(d-2)/2)+1;
 8001e0c:	4b1f      	ldr	r3, [pc, #124]	; (8001e8c <Constant_Current+0x9fc>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fec7 	bl	8000ba8 <__aeabi_fsub>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f87d 	bl	8000f24 <__aeabi_fdiv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe febb 	bl	8000bac <__addsf3>
 8001e36:	4603      	mov	r3, r0
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ea4 <Constant_Current+0xa14>)
 8001e3c:	601a      	str	r2, [r3, #0]
	   dPM=(d-2)/2;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <Constant_Current+0x9fc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe feae 	bl	8000ba8 <__aeabi_fsub>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f866 	bl	8000f24 <__aeabi_fdiv>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <Constant_Current+0xa10>)
 8001e5e:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <Constant_Current+0xa0c>)
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <Constant_Current+0xa0c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <Constant_Current+0xa18>)
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <Constant_Current+0xa18>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <Constant_Current+0xa08>)
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <Constant_Current+0xa08>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a05      	ldr	r2, [pc, #20]	; (8001e94 <Constant_Current+0xa04>)
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <Constant_Current+0xa04>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <Constant_Current+0xa1c>)
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	e09b      	b.n	8001fc2 <Constant_Current+0xb32>
 8001e8a:	bf00      	nop
 8001e8c:	20000a5c 	.word	0x20000a5c
 8001e90:	c0800000 	.word	0xc0800000
 8001e94:	200009ec 	.word	0x200009ec
 8001e98:	200008c4 	.word	0x200008c4
 8001e9c:	20000a70 	.word	0x20000a70
 8001ea0:	20000798 	.word	0x20000798
 8001ea4:	20000ad8 	.word	0x20000ad8
 8001ea8:	20000af0 	.word	0x20000af0
 8001eac:	20000790 	.word	0x20000790
	}

	else if(d>=4&&d<=6)
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <Constant_Current+0xac4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff f931 	bl	8001120 <__aeabi_fcmpge>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d059      	beq.n	8001f78 <Constant_Current+0xae8>
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <Constant_Current+0xac4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4923      	ldr	r1, [pc, #140]	; (8001f58 <Constant_Current+0xac8>)
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f91e 	bl	800110c <__aeabi_fcmple>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d050      	beq.n	8001f78 <Constant_Current+0xae8>
	{ dPM=(-(d-4)/2)+1;
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <Constant_Current+0xac4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fe62 	bl	8000ba8 <__aeabi_fsub>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001eea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f818 	bl	8000f24 <__aeabi_fdiv>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe fe56 	bl	8000bac <__addsf3>
 8001f00:	4603      	mov	r3, r0
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <Constant_Current+0xacc>)
 8001f06:	601a      	str	r2, [r3, #0]
	   dPB=(d-4)/2;
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <Constant_Current+0xac4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fe49 	bl	8000ba8 <__aeabi_fsub>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff f801 	bl	8000f24 <__aeabi_fdiv>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461a      	mov	r2, r3
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <Constant_Current+0xad0>)
 8001f28:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <Constant_Current+0xad4>)
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <Constant_Current+0xad4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <Constant_Current+0xad8>)
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <Constant_Current+0xad8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <Constant_Current+0xadc>)
 8001f40:	6013      	str	r3, [r2, #0]
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <Constant_Current+0xadc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <Constant_Current+0xae0>)
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <Constant_Current+0xae0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <Constant_Current+0xae4>)
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e036      	b.n	8001fc2 <Constant_Current+0xb32>
 8001f54:	20000a5c 	.word	0x20000a5c
 8001f58:	40c00000 	.word	0x40c00000
 8001f5c:	20000798 	.word	0x20000798
 8001f60:	20000a70 	.word	0x20000a70
 8001f64:	20000ad8 	.word	0x20000ad8
 8001f68:	20000af0 	.word	0x20000af0
 8001f6c:	200008c4 	.word	0x200008c4
 8001f70:	200009ec 	.word	0x200009ec
 8001f74:	20000790 	.word	0x20000790
	}

	else if(d>=6)
 8001f78:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <Constant_Current+0xd20>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	498d      	ldr	r1, [pc, #564]	; (80021b4 <Constant_Current+0xd24>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f8ce 	bl	8001120 <__aeabi_fcmpge>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d01b      	beq.n	8001fc2 <Constant_Current+0xb32>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8001f8a:	4b8b      	ldr	r3, [pc, #556]	; (80021b8 <Constant_Current+0xd28>)
 8001f8c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	4b8a      	ldr	r3, [pc, #552]	; (80021bc <Constant_Current+0xd2c>)
 8001f94:	f04f 0200 	mov.w	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	4b88      	ldr	r3, [pc, #544]	; (80021bc <Constant_Current+0xd2c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a88      	ldr	r2, [pc, #544]	; (80021c0 <Constant_Current+0xd30>)
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b87      	ldr	r3, [pc, #540]	; (80021c0 <Constant_Current+0xd30>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a87      	ldr	r2, [pc, #540]	; (80021c4 <Constant_Current+0xd34>)
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b86      	ldr	r3, [pc, #536]	; (80021c4 <Constant_Current+0xd34>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a86      	ldr	r2, [pc, #536]	; (80021c8 <Constant_Current+0xd38>)
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <Constant_Current+0xd38>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a85      	ldr	r2, [pc, #532]	; (80021cc <Constant_Current+0xd3c>)
 8001fb8:	6013      	str	r3, [r2, #0]
 8001fba:	4b84      	ldr	r3, [pc, #528]	; (80021cc <Constant_Current+0xd3c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a84      	ldr	r2, [pc, #528]	; (80021d0 <Constant_Current+0xd40>)
 8001fc0:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8001fc2:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <Constant_Current+0xd28>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a83      	ldr	r2, [pc, #524]	; (80021d4 <Constant_Current+0xd44>)
 8001fc8:	6013      	str	r3, [r2, #0]
 8001fca:	4b83      	ldr	r3, [pc, #524]	; (80021d8 <Constant_Current+0xd48>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4b7a      	ldr	r3, [pc, #488]	; (80021b8 <Constant_Current+0xd28>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	f7ff f88f 	bl	80010f8 <__aeabi_fcmplt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d003      	beq.n	8001fe8 <Constant_Current+0xb58>
 8001fe0:	4b7d      	ldr	r3, [pc, #500]	; (80021d8 <Constant_Current+0xd48>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a7b      	ldr	r2, [pc, #492]	; (80021d4 <Constant_Current+0xd44>)
 8001fe6:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8001fe8:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <Constant_Current+0xd28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a7b      	ldr	r2, [pc, #492]	; (80021dc <Constant_Current+0xd4c>)
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <Constant_Current+0xd50>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <Constant_Current+0xd28>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	f7ff f87c 	bl	80010f8 <__aeabi_fcmplt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <Constant_Current+0xb7e>
 8002006:	4b76      	ldr	r3, [pc, #472]	; (80021e0 <Constant_Current+0xd50>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a74      	ldr	r2, [pc, #464]	; (80021dc <Constant_Current+0xd4c>)
 800200c:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 800200e:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <Constant_Current+0xd28>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <Constant_Current+0xd54>)
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b74      	ldr	r3, [pc, #464]	; (80021e8 <Constant_Current+0xd58>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <Constant_Current+0xd28>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f7ff f869 	bl	80010f8 <__aeabi_fcmplt>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <Constant_Current+0xba4>
 800202c:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <Constant_Current+0xd58>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6c      	ldr	r2, [pc, #432]	; (80021e4 <Constant_Current+0xd54>)
 8002032:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8002034:	4b60      	ldr	r3, [pc, #384]	; (80021b8 <Constant_Current+0xd28>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6c      	ldr	r2, [pc, #432]	; (80021ec <Constant_Current+0xd5c>)
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b6c      	ldr	r3, [pc, #432]	; (80021f0 <Constant_Current+0xd60>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <Constant_Current+0xd28>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	4610      	mov	r0, r2
 8002048:	f7ff f856 	bl	80010f8 <__aeabi_fcmplt>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <Constant_Current+0xbca>
 8002052:	4b67      	ldr	r3, [pc, #412]	; (80021f0 <Constant_Current+0xd60>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a65      	ldr	r2, [pc, #404]	; (80021ec <Constant_Current+0xd5c>)
 8002058:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <Constant_Current+0xd28>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <Constant_Current+0xd64>)
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <Constant_Current+0xd68>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b54      	ldr	r3, [pc, #336]	; (80021b8 <Constant_Current+0xd28>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f7ff f843 	bl	80010f8 <__aeabi_fcmplt>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <Constant_Current+0xbf0>
 8002078:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <Constant_Current+0xd68>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <Constant_Current+0xd64>)
 800207e:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8002080:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <Constant_Current+0xd28>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <Constant_Current+0xd6c>)
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b5d      	ldr	r3, [pc, #372]	; (8002200 <Constant_Current+0xd70>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <Constant_Current+0xd28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4619      	mov	r1, r3
 8002092:	4610      	mov	r0, r2
 8002094:	f7ff f830 	bl	80010f8 <__aeabi_fcmplt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <Constant_Current+0xc16>
 800209e:	4b58      	ldr	r3, [pc, #352]	; (8002200 <Constant_Current+0xd70>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a56      	ldr	r2, [pc, #344]	; (80021fc <Constant_Current+0xd6c>)
 80020a4:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 80020a6:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <Constant_Current+0xd28>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a56      	ldr	r2, [pc, #344]	; (8002204 <Constant_Current+0xd74>)
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <Constant_Current+0xd78>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <Constant_Current+0xd28>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f7ff f81d 	bl	80010f8 <__aeabi_fcmplt>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <Constant_Current+0xc3c>
 80020c4:	4b50      	ldr	r3, [pc, #320]	; (8002208 <Constant_Current+0xd78>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a4e      	ldr	r2, [pc, #312]	; (8002204 <Constant_Current+0xd74>)
 80020ca:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 80020cc:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <Constant_Current+0xd2c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a4e      	ldr	r2, [pc, #312]	; (800220c <Constant_Current+0xd7c>)
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <Constant_Current+0xd48>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <Constant_Current+0xd2c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7ff f80a 	bl	80010f8 <__aeabi_fcmplt>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <Constant_Current+0xc62>
 80020ea:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <Constant_Current+0xd48>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a47      	ldr	r2, [pc, #284]	; (800220c <Constant_Current+0xd7c>)
 80020f0:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 80020f2:	4b32      	ldr	r3, [pc, #200]	; (80021bc <Constant_Current+0xd2c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a46      	ldr	r2, [pc, #280]	; (8002210 <Constant_Current+0xd80>)
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <Constant_Current+0xd50>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <Constant_Current+0xd2c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	4610      	mov	r0, r2
 8002106:	f7fe fff7 	bl	80010f8 <__aeabi_fcmplt>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <Constant_Current+0xc88>
 8002110:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <Constant_Current+0xd50>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a3e      	ldr	r2, [pc, #248]	; (8002210 <Constant_Current+0xd80>)
 8002116:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <Constant_Current+0xd2c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a3d      	ldr	r2, [pc, #244]	; (8002214 <Constant_Current+0xd84>)
 800211e:	6013      	str	r3, [r2, #0]
 8002120:	4b31      	ldr	r3, [pc, #196]	; (80021e8 <Constant_Current+0xd58>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b25      	ldr	r3, [pc, #148]	; (80021bc <Constant_Current+0xd2c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	4610      	mov	r0, r2
 800212c:	f7fe ffe4 	bl	80010f8 <__aeabi_fcmplt>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <Constant_Current+0xcae>
 8002136:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <Constant_Current+0xd58>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a36      	ldr	r2, [pc, #216]	; (8002214 <Constant_Current+0xd84>)
 800213c:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 800213e:	4b1f      	ldr	r3, [pc, #124]	; (80021bc <Constant_Current+0xd2c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a35      	ldr	r2, [pc, #212]	; (8002218 <Constant_Current+0xd88>)
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b2a      	ldr	r3, [pc, #168]	; (80021f0 <Constant_Current+0xd60>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <Constant_Current+0xd2c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	4610      	mov	r0, r2
 8002152:	f7fe ffd1 	bl	80010f8 <__aeabi_fcmplt>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <Constant_Current+0xcd4>
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <Constant_Current+0xd60>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a2d      	ldr	r2, [pc, #180]	; (8002218 <Constant_Current+0xd88>)
 8002162:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <Constant_Current+0xd2c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2c      	ldr	r2, [pc, #176]	; (800221c <Constant_Current+0xd8c>)
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b22      	ldr	r3, [pc, #136]	; (80021f8 <Constant_Current+0xd68>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <Constant_Current+0xd2c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4619      	mov	r1, r3
 8002176:	4610      	mov	r0, r2
 8002178:	f7fe ffbe 	bl	80010f8 <__aeabi_fcmplt>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <Constant_Current+0xcfa>
 8002182:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <Constant_Current+0xd68>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <Constant_Current+0xd8c>)
 8002188:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <Constant_Current+0xd2c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a24      	ldr	r2, [pc, #144]	; (8002220 <Constant_Current+0xd90>)
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b1b      	ldr	r3, [pc, #108]	; (8002200 <Constant_Current+0xd70>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <Constant_Current+0xd2c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4619      	mov	r1, r3
 800219c:	4610      	mov	r0, r2
 800219e:	f7fe ffab 	bl	80010f8 <__aeabi_fcmplt>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03f      	beq.n	8002228 <Constant_Current+0xd98>
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <Constant_Current+0xd70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	e03a      	b.n	8002224 <Constant_Current+0xd94>
 80021ae:	bf00      	nop
 80021b0:	20000a5c 	.word	0x20000a5c
 80021b4:	40c00000 	.word	0x40c00000
 80021b8:	20000a70 	.word	0x20000a70
 80021bc:	20000798 	.word	0x20000798
 80021c0:	20000ad8 	.word	0x20000ad8
 80021c4:	20000af0 	.word	0x20000af0
 80021c8:	200008c4 	.word	0x200008c4
 80021cc:	200009ec 	.word	0x200009ec
 80021d0:	20000790 	.word	0x20000790
 80021d4:	20000b14 	.word	0x20000b14
 80021d8:	20000ac8 	.word	0x20000ac8
 80021dc:	20000a90 	.word	0x20000a90
 80021e0:	20000afc 	.word	0x20000afc
 80021e4:	20000784 	.word	0x20000784
 80021e8:	2000076c 	.word	0x2000076c
 80021ec:	200007d0 	.word	0x200007d0
 80021f0:	20000b10 	.word	0x20000b10
 80021f4:	20000b04 	.word	0x20000b04
 80021f8:	200009f0 	.word	0x200009f0
 80021fc:	200007c4 	.word	0x200007c4
 8002200:	20000a68 	.word	0x20000a68
 8002204:	20000a4c 	.word	0x20000a4c
 8002208:	200008f8 	.word	0x200008f8
 800220c:	20000908 	.word	0x20000908
 8002210:	200007a0 	.word	0x200007a0
 8002214:	200008ec 	.word	0x200008ec
 8002218:	20000a8c 	.word	0x20000a8c
 800221c:	20000ae4 	.word	0x20000ae4
 8002220:	20000b18 	.word	0x20000b18
 8002224:	4a8d      	ldr	r2, [pc, #564]	; (800245c <Constant_Current+0xfcc>)
 8002226:	6013      	str	r3, [r2, #0]
	r14=dPM; if(ePB<dPM) r14=ePB;	//r14=max(dPM,ePB);
 8002228:	4b8d      	ldr	r3, [pc, #564]	; (8002460 <Constant_Current+0xfd0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a8d      	ldr	r2, [pc, #564]	; (8002464 <Constant_Current+0xfd4>)
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b8d      	ldr	r3, [pc, #564]	; (8002468 <Constant_Current+0xfd8>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b8a      	ldr	r3, [pc, #552]	; (8002460 <Constant_Current+0xfd0>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4619      	mov	r1, r3
 800223a:	4610      	mov	r0, r2
 800223c:	f7fe ff5c 	bl	80010f8 <__aeabi_fcmplt>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <Constant_Current+0xdbe>
 8002246:	4b88      	ldr	r3, [pc, #544]	; (8002468 <Constant_Current+0xfd8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a86      	ldr	r2, [pc, #536]	; (8002464 <Constant_Current+0xfd4>)
 800224c:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 800224e:	4b87      	ldr	r3, [pc, #540]	; (800246c <Constant_Current+0xfdc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a87      	ldr	r2, [pc, #540]	; (8002470 <Constant_Current+0xfe0>)
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b87      	ldr	r3, [pc, #540]	; (8002474 <Constant_Current+0xfe4>)
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	4b84      	ldr	r3, [pc, #528]	; (800246c <Constant_Current+0xfdc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	4610      	mov	r0, r2
 8002262:	f7fe ff49 	bl	80010f8 <__aeabi_fcmplt>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <Constant_Current+0xde4>
 800226c:	4b81      	ldr	r3, [pc, #516]	; (8002474 <Constant_Current+0xfe4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7f      	ldr	r2, [pc, #508]	; (8002470 <Constant_Current+0xfe0>)
 8002272:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 8002274:	4b7d      	ldr	r3, [pc, #500]	; (800246c <Constant_Current+0xfdc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a7f      	ldr	r2, [pc, #508]	; (8002478 <Constant_Current+0xfe8>)
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b7f      	ldr	r3, [pc, #508]	; (800247c <Constant_Current+0xfec>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b7a      	ldr	r3, [pc, #488]	; (800246c <Constant_Current+0xfdc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4619      	mov	r1, r3
 8002286:	4610      	mov	r0, r2
 8002288:	f7fe ff36 	bl	80010f8 <__aeabi_fcmplt>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d003      	beq.n	800229a <Constant_Current+0xe0a>
 8002292:	4b7a      	ldr	r3, [pc, #488]	; (800247c <Constant_Current+0xfec>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a78      	ldr	r2, [pc, #480]	; (8002478 <Constant_Current+0xfe8>)
 8002298:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 800229a:	4b74      	ldr	r3, [pc, #464]	; (800246c <Constant_Current+0xfdc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a78      	ldr	r2, [pc, #480]	; (8002480 <Constant_Current+0xff0>)
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b78      	ldr	r3, [pc, #480]	; (8002484 <Constant_Current+0xff4>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b71      	ldr	r3, [pc, #452]	; (800246c <Constant_Current+0xfdc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4610      	mov	r0, r2
 80022ae:	f7fe ff23 	bl	80010f8 <__aeabi_fcmplt>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <Constant_Current+0xe30>
 80022b8:	4b72      	ldr	r3, [pc, #456]	; (8002484 <Constant_Current+0xff4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a70      	ldr	r2, [pc, #448]	; (8002480 <Constant_Current+0xff0>)
 80022be:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 80022c0:	4b6a      	ldr	r3, [pc, #424]	; (800246c <Constant_Current+0xfdc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a70      	ldr	r2, [pc, #448]	; (8002488 <Constant_Current+0xff8>)
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b70      	ldr	r3, [pc, #448]	; (800248c <Constant_Current+0xffc>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b67      	ldr	r3, [pc, #412]	; (800246c <Constant_Current+0xfdc>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	4610      	mov	r0, r2
 80022d4:	f7fe ff10 	bl	80010f8 <__aeabi_fcmplt>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <Constant_Current+0xe56>
 80022de:	4b6b      	ldr	r3, [pc, #428]	; (800248c <Constant_Current+0xffc>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a69      	ldr	r2, [pc, #420]	; (8002488 <Constant_Current+0xff8>)
 80022e4:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 80022e6:	4b61      	ldr	r3, [pc, #388]	; (800246c <Constant_Current+0xfdc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a69      	ldr	r2, [pc, #420]	; (8002490 <Constant_Current+0x1000>)
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	4b69      	ldr	r3, [pc, #420]	; (8002494 <Constant_Current+0x1004>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b5e      	ldr	r3, [pc, #376]	; (800246c <Constant_Current+0xfdc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	4610      	mov	r0, r2
 80022fa:	f7fe fefd 	bl	80010f8 <__aeabi_fcmplt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <Constant_Current+0xe7c>
 8002304:	4b63      	ldr	r3, [pc, #396]	; (8002494 <Constant_Current+0x1004>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a61      	ldr	r2, [pc, #388]	; (8002490 <Constant_Current+0x1000>)
 800230a:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 800230c:	4b57      	ldr	r3, [pc, #348]	; (800246c <Constant_Current+0xfdc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a61      	ldr	r2, [pc, #388]	; (8002498 <Constant_Current+0x1008>)
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b61      	ldr	r3, [pc, #388]	; (800249c <Constant_Current+0x100c>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b54      	ldr	r3, [pc, #336]	; (800246c <Constant_Current+0xfdc>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f7fe feea 	bl	80010f8 <__aeabi_fcmplt>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <Constant_Current+0xea2>
 800232a:	4b5c      	ldr	r3, [pc, #368]	; (800249c <Constant_Current+0x100c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <Constant_Current+0x1008>)
 8002330:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 8002332:	4b4e      	ldr	r3, [pc, #312]	; (800246c <Constant_Current+0xfdc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a5a      	ldr	r2, [pc, #360]	; (80024a0 <Constant_Current+0x1010>)
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b4b      	ldr	r3, [pc, #300]	; (8002468 <Constant_Current+0xfd8>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	4b4b      	ldr	r3, [pc, #300]	; (800246c <Constant_Current+0xfdc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe fed7 	bl	80010f8 <__aeabi_fcmplt>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <Constant_Current+0xec8>
 8002350:	4b45      	ldr	r3, [pc, #276]	; (8002468 <Constant_Current+0xfd8>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a52      	ldr	r2, [pc, #328]	; (80024a0 <Constant_Current+0x1010>)
 8002356:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 8002358:	4b52      	ldr	r3, [pc, #328]	; (80024a4 <Constant_Current+0x1014>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <Constant_Current+0x1018>)
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b44      	ldr	r3, [pc, #272]	; (8002474 <Constant_Current+0xfe4>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <Constant_Current+0x1014>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f7fe fec4 	bl	80010f8 <__aeabi_fcmplt>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <Constant_Current+0xeee>
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <Constant_Current+0xfe4>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a4b      	ldr	r2, [pc, #300]	; (80024a8 <Constant_Current+0x1018>)
 800237c:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 800237e:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <Constant_Current+0x1014>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a4a      	ldr	r2, [pc, #296]	; (80024ac <Constant_Current+0x101c>)
 8002384:	6013      	str	r3, [r2, #0]
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <Constant_Current+0xfec>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <Constant_Current+0x1014>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	4610      	mov	r0, r2
 8002392:	f7fe feb1 	bl	80010f8 <__aeabi_fcmplt>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d003      	beq.n	80023a4 <Constant_Current+0xf14>
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <Constant_Current+0xfec>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a42      	ldr	r2, [pc, #264]	; (80024ac <Constant_Current+0x101c>)
 80023a2:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 80023a4:	4b3f      	ldr	r3, [pc, #252]	; (80024a4 <Constant_Current+0x1014>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <Constant_Current+0x1020>)
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b35      	ldr	r3, [pc, #212]	; (8002484 <Constant_Current+0xff4>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b3c      	ldr	r3, [pc, #240]	; (80024a4 <Constant_Current+0x1014>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4619      	mov	r1, r3
 80023b6:	4610      	mov	r0, r2
 80023b8:	f7fe fe9e 	bl	80010f8 <__aeabi_fcmplt>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <Constant_Current+0xf3a>
 80023c2:	4b30      	ldr	r3, [pc, #192]	; (8002484 <Constant_Current+0xff4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a3a      	ldr	r2, [pc, #232]	; (80024b0 <Constant_Current+0x1020>)
 80023c8:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 80023ca:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <Constant_Current+0x1014>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a39      	ldr	r2, [pc, #228]	; (80024b4 <Constant_Current+0x1024>)
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b2e      	ldr	r3, [pc, #184]	; (800248c <Constant_Current+0xffc>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <Constant_Current+0x1014>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7fe fe8b 	bl	80010f8 <__aeabi_fcmplt>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <Constant_Current+0xf60>
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <Constant_Current+0xffc>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a31      	ldr	r2, [pc, #196]	; (80024b4 <Constant_Current+0x1024>)
 80023ee:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 80023f0:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <Constant_Current+0x1014>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <Constant_Current+0x1028>)
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b26      	ldr	r3, [pc, #152]	; (8002494 <Constant_Current+0x1004>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b29      	ldr	r3, [pc, #164]	; (80024a4 <Constant_Current+0x1014>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	4610      	mov	r0, r2
 8002404:	f7fe fe78 	bl	80010f8 <__aeabi_fcmplt>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <Constant_Current+0xf86>
 800240e:	4b21      	ldr	r3, [pc, #132]	; (8002494 <Constant_Current+0x1004>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <Constant_Current+0x1028>)
 8002414:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 8002416:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <Constant_Current+0x1014>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a28      	ldr	r2, [pc, #160]	; (80024bc <Constant_Current+0x102c>)
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <Constant_Current+0x100c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b20      	ldr	r3, [pc, #128]	; (80024a4 <Constant_Current+0x1014>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f7fe fe65 	bl	80010f8 <__aeabi_fcmplt>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <Constant_Current+0xfac>
 8002434:	4b19      	ldr	r3, [pc, #100]	; (800249c <Constant_Current+0x100c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a20      	ldr	r2, [pc, #128]	; (80024bc <Constant_Current+0x102c>)
 800243a:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <Constant_Current+0x1014>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1f      	ldr	r2, [pc, #124]	; (80024c0 <Constant_Current+0x1030>)
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <Constant_Current+0xfd8>)
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b16      	ldr	r3, [pc, #88]	; (80024a4 <Constant_Current+0x1014>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f7fe fe52 	bl	80010f8 <__aeabi_fcmplt>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d038      	beq.n	80024cc <Constant_Current+0x103c>
 800245a:	e033      	b.n	80024c4 <Constant_Current+0x1034>
 800245c:	20000b18 	.word	0x20000b18
 8002460:	20000798 	.word	0x20000798
 8002464:	20000678 	.word	0x20000678
 8002468:	200008f8 	.word	0x200008f8
 800246c:	20000ad8 	.word	0x20000ad8
 8002470:	20000ae8 	.word	0x20000ae8
 8002474:	20000ac8 	.word	0x20000ac8
 8002478:	20000a64 	.word	0x20000a64
 800247c:	20000afc 	.word	0x20000afc
 8002480:	200007b8 	.word	0x200007b8
 8002484:	2000076c 	.word	0x2000076c
 8002488:	200009f4 	.word	0x200009f4
 800248c:	20000b10 	.word	0x20000b10
 8002490:	20000ae0 	.word	0x20000ae0
 8002494:	200009f0 	.word	0x200009f0
 8002498:	20000900 	.word	0x20000900
 800249c:	20000a68 	.word	0x20000a68
 80024a0:	200007cc 	.word	0x200007cc
 80024a4:	20000af0 	.word	0x20000af0
 80024a8:	20000ab0 	.word	0x20000ab0
 80024ac:	20000af8 	.word	0x20000af8
 80024b0:	20000b0c 	.word	0x20000b0c
 80024b4:	20000768 	.word	0x20000768
 80024b8:	200007ac 	.word	0x200007ac
 80024bc:	20000914 	.word	0x20000914
 80024c0:	2000067c 	.word	0x2000067c
 80024c4:	4b8d      	ldr	r3, [pc, #564]	; (80026fc <Constant_Current+0x126c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a8d      	ldr	r2, [pc, #564]	; (8002700 <Constant_Current+0x1270>)
 80024ca:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 80024cc:	4b8d      	ldr	r3, [pc, #564]	; (8002704 <Constant_Current+0x1274>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a8d      	ldr	r2, [pc, #564]	; (8002708 <Constant_Current+0x1278>)
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b8d      	ldr	r3, [pc, #564]	; (800270c <Constant_Current+0x127c>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b8a      	ldr	r3, [pc, #552]	; (8002704 <Constant_Current+0x1274>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	4610      	mov	r0, r2
 80024e0:	f7fe fe0a 	bl	80010f8 <__aeabi_fcmplt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <Constant_Current+0x1062>
 80024ea:	4b88      	ldr	r3, [pc, #544]	; (800270c <Constant_Current+0x127c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a86      	ldr	r2, [pc, #536]	; (8002708 <Constant_Current+0x1278>)
 80024f0:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 80024f2:	4b84      	ldr	r3, [pc, #528]	; (8002704 <Constant_Current+0x1274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a86      	ldr	r2, [pc, #536]	; (8002710 <Constant_Current+0x1280>)
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	4b86      	ldr	r3, [pc, #536]	; (8002714 <Constant_Current+0x1284>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4b81      	ldr	r3, [pc, #516]	; (8002704 <Constant_Current+0x1274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f7fe fdf7 	bl	80010f8 <__aeabi_fcmplt>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <Constant_Current+0x1088>
 8002510:	4b80      	ldr	r3, [pc, #512]	; (8002714 <Constant_Current+0x1284>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a7e      	ldr	r2, [pc, #504]	; (8002710 <Constant_Current+0x1280>)
 8002516:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 8002518:	4b7a      	ldr	r3, [pc, #488]	; (8002704 <Constant_Current+0x1274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a7e      	ldr	r2, [pc, #504]	; (8002718 <Constant_Current+0x1288>)
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b7e      	ldr	r3, [pc, #504]	; (800271c <Constant_Current+0x128c>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b77      	ldr	r3, [pc, #476]	; (8002704 <Constant_Current+0x1274>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	4610      	mov	r0, r2
 800252c:	f7fe fde4 	bl	80010f8 <__aeabi_fcmplt>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <Constant_Current+0x10ae>
 8002536:	4b79      	ldr	r3, [pc, #484]	; (800271c <Constant_Current+0x128c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a77      	ldr	r2, [pc, #476]	; (8002718 <Constant_Current+0x1288>)
 800253c:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 800253e:	4b71      	ldr	r3, [pc, #452]	; (8002704 <Constant_Current+0x1274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a77      	ldr	r2, [pc, #476]	; (8002720 <Constant_Current+0x1290>)
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b77      	ldr	r3, [pc, #476]	; (8002724 <Constant_Current+0x1294>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b6e      	ldr	r3, [pc, #440]	; (8002704 <Constant_Current+0x1274>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4619      	mov	r1, r3
 8002550:	4610      	mov	r0, r2
 8002552:	f7fe fdd1 	bl	80010f8 <__aeabi_fcmplt>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <Constant_Current+0x10d4>
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <Constant_Current+0x1294>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a6f      	ldr	r2, [pc, #444]	; (8002720 <Constant_Current+0x1290>)
 8002562:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 8002564:	4b67      	ldr	r3, [pc, #412]	; (8002704 <Constant_Current+0x1274>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a6f      	ldr	r2, [pc, #444]	; (8002728 <Constant_Current+0x1298>)
 800256a:	6013      	str	r3, [r2, #0]
 800256c:	4b6f      	ldr	r3, [pc, #444]	; (800272c <Constant_Current+0x129c>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b64      	ldr	r3, [pc, #400]	; (8002704 <Constant_Current+0x1274>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7fe fdbe 	bl	80010f8 <__aeabi_fcmplt>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <Constant_Current+0x10fa>
 8002582:	4b6a      	ldr	r3, [pc, #424]	; (800272c <Constant_Current+0x129c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a68      	ldr	r2, [pc, #416]	; (8002728 <Constant_Current+0x1298>)
 8002588:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 800258a:	4b5e      	ldr	r3, [pc, #376]	; (8002704 <Constant_Current+0x1274>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a68      	ldr	r2, [pc, #416]	; (8002730 <Constant_Current+0x12a0>)
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	4b68      	ldr	r3, [pc, #416]	; (8002734 <Constant_Current+0x12a4>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b5b      	ldr	r3, [pc, #364]	; (8002704 <Constant_Current+0x1274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f7fe fdab 	bl	80010f8 <__aeabi_fcmplt>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <Constant_Current+0x1120>
 80025a8:	4b62      	ldr	r3, [pc, #392]	; (8002734 <Constant_Current+0x12a4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a60      	ldr	r2, [pc, #384]	; (8002730 <Constant_Current+0x12a0>)
 80025ae:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 80025b0:	4b54      	ldr	r3, [pc, #336]	; (8002704 <Constant_Current+0x1274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a60      	ldr	r2, [pc, #384]	; (8002738 <Constant_Current+0x12a8>)
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b50      	ldr	r3, [pc, #320]	; (80026fc <Constant_Current+0x126c>)
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <Constant_Current+0x1274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f7fe fd98 	bl	80010f8 <__aeabi_fcmplt>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <Constant_Current+0x1146>
 80025ce:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <Constant_Current+0x126c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a59      	ldr	r2, [pc, #356]	; (8002738 <Constant_Current+0x12a8>)
 80025d4:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 80025d6:	4b59      	ldr	r3, [pc, #356]	; (800273c <Constant_Current+0x12ac>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a59      	ldr	r2, [pc, #356]	; (8002740 <Constant_Current+0x12b0>)
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b4b      	ldr	r3, [pc, #300]	; (800270c <Constant_Current+0x127c>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b56      	ldr	r3, [pc, #344]	; (800273c <Constant_Current+0x12ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4619      	mov	r1, r3
 80025e8:	4610      	mov	r0, r2
 80025ea:	f7fe fd85 	bl	80010f8 <__aeabi_fcmplt>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <Constant_Current+0x116c>
 80025f4:	4b45      	ldr	r3, [pc, #276]	; (800270c <Constant_Current+0x127c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a51      	ldr	r2, [pc, #324]	; (8002740 <Constant_Current+0x12b0>)
 80025fa:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <Constant_Current+0x12ac>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a50      	ldr	r2, [pc, #320]	; (8002744 <Constant_Current+0x12b4>)
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b43      	ldr	r3, [pc, #268]	; (8002714 <Constant_Current+0x1284>)
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <Constant_Current+0x12ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	4610      	mov	r0, r2
 8002610:	f7fe fd72 	bl	80010f8 <__aeabi_fcmplt>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <Constant_Current+0x1192>
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <Constant_Current+0x1284>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a49      	ldr	r2, [pc, #292]	; (8002744 <Constant_Current+0x12b4>)
 8002620:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 8002622:	4b46      	ldr	r3, [pc, #280]	; (800273c <Constant_Current+0x12ac>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a48      	ldr	r2, [pc, #288]	; (8002748 <Constant_Current+0x12b8>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b3c      	ldr	r3, [pc, #240]	; (800271c <Constant_Current+0x128c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <Constant_Current+0x12ac>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4619      	mov	r1, r3
 8002634:	4610      	mov	r0, r2
 8002636:	f7fe fd5f 	bl	80010f8 <__aeabi_fcmplt>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <Constant_Current+0x11b8>
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <Constant_Current+0x128c>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a40      	ldr	r2, [pc, #256]	; (8002748 <Constant_Current+0x12b8>)
 8002646:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 8002648:	4b3c      	ldr	r3, [pc, #240]	; (800273c <Constant_Current+0x12ac>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a3f      	ldr	r2, [pc, #252]	; (800274c <Constant_Current+0x12bc>)
 800264e:	6013      	str	r3, [r2, #0]
 8002650:	4b34      	ldr	r3, [pc, #208]	; (8002724 <Constant_Current+0x1294>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b39      	ldr	r3, [pc, #228]	; (800273c <Constant_Current+0x12ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f7fe fd4c 	bl	80010f8 <__aeabi_fcmplt>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <Constant_Current+0x11de>
 8002666:	4b2f      	ldr	r3, [pc, #188]	; (8002724 <Constant_Current+0x1294>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a38      	ldr	r2, [pc, #224]	; (800274c <Constant_Current+0x12bc>)
 800266c:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 800266e:	4b33      	ldr	r3, [pc, #204]	; (800273c <Constant_Current+0x12ac>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a37      	ldr	r2, [pc, #220]	; (8002750 <Constant_Current+0x12c0>)
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <Constant_Current+0x129c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	4b30      	ldr	r3, [pc, #192]	; (800273c <Constant_Current+0x12ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	4610      	mov	r0, r2
 8002682:	f7fe fd39 	bl	80010f8 <__aeabi_fcmplt>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <Constant_Current+0x1204>
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <Constant_Current+0x129c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2f      	ldr	r2, [pc, #188]	; (8002750 <Constant_Current+0x12c0>)
 8002692:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 8002694:	4b29      	ldr	r3, [pc, #164]	; (800273c <Constant_Current+0x12ac>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <Constant_Current+0x12c4>)
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b25      	ldr	r3, [pc, #148]	; (8002734 <Constant_Current+0x12a4>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b26      	ldr	r3, [pc, #152]	; (800273c <Constant_Current+0x12ac>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4610      	mov	r0, r2
 80026a8:	f7fe fd26 	bl	80010f8 <__aeabi_fcmplt>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <Constant_Current+0x122a>
 80026b2:	4b20      	ldr	r3, [pc, #128]	; (8002734 <Constant_Current+0x12a4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a27      	ldr	r2, [pc, #156]	; (8002754 <Constant_Current+0x12c4>)
 80026b8:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 80026ba:	4b20      	ldr	r3, [pc, #128]	; (800273c <Constant_Current+0x12ac>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a26      	ldr	r2, [pc, #152]	; (8002758 <Constant_Current+0x12c8>)
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <Constant_Current+0x126c>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4b1d      	ldr	r3, [pc, #116]	; (800273c <Constant_Current+0x12ac>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4619      	mov	r1, r3
 80026cc:	4610      	mov	r0, r2
 80026ce:	f7fe fd13 	bl	80010f8 <__aeabi_fcmplt>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <Constant_Current+0x1250>
 80026d8:	4b08      	ldr	r3, [pc, #32]	; (80026fc <Constant_Current+0x126c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1e      	ldr	r2, [pc, #120]	; (8002758 <Constant_Current+0x12c8>)
 80026de:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 80026e0:	4b1e      	ldr	r3, [pc, #120]	; (800275c <Constant_Current+0x12cc>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <Constant_Current+0x12d0>)
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <Constant_Current+0x127c>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <Constant_Current+0x12cc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4610      	mov	r0, r2
 80026f4:	f7fe fd00 	bl	80010f8 <__aeabi_fcmplt>
 80026f8:	e034      	b.n	8002764 <Constant_Current+0x12d4>
 80026fa:	bf00      	nop
 80026fc:	200008f8 	.word	0x200008f8
 8002700:	2000067c 	.word	0x2000067c
 8002704:	200008c4 	.word	0x200008c4
 8002708:	2000075c 	.word	0x2000075c
 800270c:	20000ac8 	.word	0x20000ac8
 8002710:	20000a7c 	.word	0x20000a7c
 8002714:	20000afc 	.word	0x20000afc
 8002718:	200007bc 	.word	0x200007bc
 800271c:	2000076c 	.word	0x2000076c
 8002720:	200008c8 	.word	0x200008c8
 8002724:	20000b10 	.word	0x20000b10
 8002728:	200009e8 	.word	0x200009e8
 800272c:	200009f0 	.word	0x200009f0
 8002730:	20000a78 	.word	0x20000a78
 8002734:	20000a68 	.word	0x20000a68
 8002738:	20000aac 	.word	0x20000aac
 800273c:	200009ec 	.word	0x200009ec
 8002740:	20000788 	.word	0x20000788
 8002744:	200008e4 	.word	0x200008e4
 8002748:	200008fc 	.word	0x200008fc
 800274c:	20000ad4 	.word	0x20000ad4
 8002750:	20000a44 	.word	0x20000a44
 8002754:	20000774 	.word	0x20000774
 8002758:	2000077c 	.word	0x2000077c
 800275c:	20000790 	.word	0x20000790
 8002760:	20000adc 	.word	0x20000adc
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <Constant_Current+0x12e2>
 800276a:	4b8f      	ldr	r3, [pc, #572]	; (80029a8 <Constant_Current+0x1518>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a8f      	ldr	r2, [pc, #572]	; (80029ac <Constant_Current+0x151c>)
 8002770:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 8002772:	4b8f      	ldr	r3, [pc, #572]	; (80029b0 <Constant_Current+0x1520>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a8f      	ldr	r2, [pc, #572]	; (80029b4 <Constant_Current+0x1524>)
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	4b8f      	ldr	r3, [pc, #572]	; (80029b8 <Constant_Current+0x1528>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b8c      	ldr	r3, [pc, #560]	; (80029b0 <Constant_Current+0x1520>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7fe fcb7 	bl	80010f8 <__aeabi_fcmplt>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <Constant_Current+0x1308>
 8002790:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <Constant_Current+0x1528>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a87      	ldr	r2, [pc, #540]	; (80029b4 <Constant_Current+0x1524>)
 8002796:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 8002798:	4b85      	ldr	r3, [pc, #532]	; (80029b0 <Constant_Current+0x1520>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a87      	ldr	r2, [pc, #540]	; (80029bc <Constant_Current+0x152c>)
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	4b87      	ldr	r3, [pc, #540]	; (80029c0 <Constant_Current+0x1530>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b82      	ldr	r3, [pc, #520]	; (80029b0 <Constant_Current+0x1520>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7fe fca4 	bl	80010f8 <__aeabi_fcmplt>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <Constant_Current+0x132e>
 80027b6:	4b82      	ldr	r3, [pc, #520]	; (80029c0 <Constant_Current+0x1530>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a80      	ldr	r2, [pc, #512]	; (80029bc <Constant_Current+0x152c>)
 80027bc:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 80027be:	4b7c      	ldr	r3, [pc, #496]	; (80029b0 <Constant_Current+0x1520>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a80      	ldr	r2, [pc, #512]	; (80029c4 <Constant_Current+0x1534>)
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	4b80      	ldr	r3, [pc, #512]	; (80029c8 <Constant_Current+0x1538>)
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4b79      	ldr	r3, [pc, #484]	; (80029b0 <Constant_Current+0x1520>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	4610      	mov	r0, r2
 80027d2:	f7fe fc91 	bl	80010f8 <__aeabi_fcmplt>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <Constant_Current+0x1354>
 80027dc:	4b7a      	ldr	r3, [pc, #488]	; (80029c8 <Constant_Current+0x1538>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a78      	ldr	r2, [pc, #480]	; (80029c4 <Constant_Current+0x1534>)
 80027e2:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 80027e4:	4b72      	ldr	r3, [pc, #456]	; (80029b0 <Constant_Current+0x1520>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a78      	ldr	r2, [pc, #480]	; (80029cc <Constant_Current+0x153c>)
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b78      	ldr	r3, [pc, #480]	; (80029d0 <Constant_Current+0x1540>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b6f      	ldr	r3, [pc, #444]	; (80029b0 <Constant_Current+0x1520>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4619      	mov	r1, r3
 80027f6:	4610      	mov	r0, r2
 80027f8:	f7fe fc7e 	bl	80010f8 <__aeabi_fcmplt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <Constant_Current+0x137a>
 8002802:	4b73      	ldr	r3, [pc, #460]	; (80029d0 <Constant_Current+0x1540>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a71      	ldr	r2, [pc, #452]	; (80029cc <Constant_Current+0x153c>)
 8002808:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 800280a:	4b69      	ldr	r3, [pc, #420]	; (80029b0 <Constant_Current+0x1520>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a71      	ldr	r2, [pc, #452]	; (80029d4 <Constant_Current+0x1544>)
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <Constant_Current+0x1548>)
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	4b66      	ldr	r3, [pc, #408]	; (80029b0 <Constant_Current+0x1520>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4619      	mov	r1, r3
 800281c:	4610      	mov	r0, r2
 800281e:	f7fe fc6b 	bl	80010f8 <__aeabi_fcmplt>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <Constant_Current+0x13a0>
 8002828:	4b6b      	ldr	r3, [pc, #428]	; (80029d8 <Constant_Current+0x1548>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <Constant_Current+0x1544>)
 800282e:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8002830:	4b5f      	ldr	r3, [pc, #380]	; (80029b0 <Constant_Current+0x1520>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a69      	ldr	r2, [pc, #420]	; (80029dc <Constant_Current+0x154c>)
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <Constant_Current+0x1550>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b5c      	ldr	r3, [pc, #368]	; (80029b0 <Constant_Current+0x1520>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f7fe fc58 	bl	80010f8 <__aeabi_fcmplt>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <Constant_Current+0x13c6>
 800284e:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <Constant_Current+0x1550>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a62      	ldr	r2, [pc, #392]	; (80029dc <Constant_Current+0x154c>)
 8002854:	6013      	str	r3, [r2, #0]

	///////////////////////////////DEFUZZIFIKASI///////////////////////////////////

	A=(r1*outZ)+(r2*outPS)+(r3*outPM)+(r4*outPB)+(r5*outPH)+(r6*outPH)+(r7*outPH);
 8002856:	4b63      	ldr	r3, [pc, #396]	; (80029e4 <Constant_Current+0x1554>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <Constant_Current+0x1558>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe faab 	bl	8000dbc <__aeabi_fmul>
 8002866:	4603      	mov	r3, r0
 8002868:	461c      	mov	r4, r3
 800286a:	4b60      	ldr	r3, [pc, #384]	; (80029ec <Constant_Current+0x155c>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <Constant_Current+0x1560>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4619      	mov	r1, r3
 8002874:	4610      	mov	r0, r2
 8002876:	f7fe faa1 	bl	8000dbc <__aeabi_fmul>
 800287a:	4603      	mov	r3, r0
 800287c:	4619      	mov	r1, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f7fe f994 	bl	8000bac <__addsf3>
 8002884:	4603      	mov	r3, r0
 8002886:	461c      	mov	r4, r3
 8002888:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <Constant_Current+0x1564>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <Constant_Current+0x1568>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7fe fa92 	bl	8000dbc <__aeabi_fmul>
 8002898:	4603      	mov	r3, r0
 800289a:	4619      	mov	r1, r3
 800289c:	4620      	mov	r0, r4
 800289e:	f7fe f985 	bl	8000bac <__addsf3>
 80028a2:	4603      	mov	r3, r0
 80028a4:	461c      	mov	r4, r3
 80028a6:	4b55      	ldr	r3, [pc, #340]	; (80029fc <Constant_Current+0x156c>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <Constant_Current+0x1570>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f7fe fa83 	bl	8000dbc <__aeabi_fmul>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4619      	mov	r1, r3
 80028ba:	4620      	mov	r0, r4
 80028bc:	f7fe f976 	bl	8000bac <__addsf3>
 80028c0:	4603      	mov	r3, r0
 80028c2:	461c      	mov	r4, r3
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <Constant_Current+0x1574>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b4f      	ldr	r3, [pc, #316]	; (8002a08 <Constant_Current+0x1578>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4619      	mov	r1, r3
 80028ce:	4610      	mov	r0, r2
 80028d0:	f7fe fa74 	bl	8000dbc <__aeabi_fmul>
 80028d4:	4603      	mov	r3, r0
 80028d6:	4619      	mov	r1, r3
 80028d8:	4620      	mov	r0, r4
 80028da:	f7fe f967 	bl	8000bac <__addsf3>
 80028de:	4603      	mov	r3, r0
 80028e0:	461c      	mov	r4, r3
 80028e2:	4b4a      	ldr	r3, [pc, #296]	; (8002a0c <Constant_Current+0x157c>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b48      	ldr	r3, [pc, #288]	; (8002a08 <Constant_Current+0x1578>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4619      	mov	r1, r3
 80028ec:	4610      	mov	r0, r2
 80028ee:	f7fe fa65 	bl	8000dbc <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe f958 	bl	8000bac <__addsf3>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461c      	mov	r4, r3
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <Constant_Current+0x1580>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <Constant_Current+0x1578>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f7fe fa56 	bl	8000dbc <__aeabi_fmul>
 8002910:	4603      	mov	r3, r0
 8002912:	4619      	mov	r1, r3
 8002914:	4620      	mov	r0, r4
 8002916:	f7fe f949 	bl	8000bac <__addsf3>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <Constant_Current+0x1584>)
 8002920:	601a      	str	r2, [r3, #0]
	B=(r8*outNS)+(r9*outZ)+(r10*outPS)+(r11*outPM)+(r12*outPB)+(r13*outPH)+(r14*outPH);
 8002922:	4b3d      	ldr	r3, [pc, #244]	; (8002a18 <Constant_Current+0x1588>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	4b3d      	ldr	r3, [pc, #244]	; (8002a1c <Constant_Current+0x158c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4610      	mov	r0, r2
 800292e:	f7fe fa45 	bl	8000dbc <__aeabi_fmul>
 8002932:	4603      	mov	r3, r0
 8002934:	461c      	mov	r4, r3
 8002936:	4b3a      	ldr	r3, [pc, #232]	; (8002a20 <Constant_Current+0x1590>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <Constant_Current+0x1558>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4619      	mov	r1, r3
 8002940:	4610      	mov	r0, r2
 8002942:	f7fe fa3b 	bl	8000dbc <__aeabi_fmul>
 8002946:	4603      	mov	r3, r0
 8002948:	4619      	mov	r1, r3
 800294a:	4620      	mov	r0, r4
 800294c:	f7fe f92e 	bl	8000bac <__addsf3>
 8002950:	4603      	mov	r3, r0
 8002952:	461c      	mov	r4, r3
 8002954:	4b33      	ldr	r3, [pc, #204]	; (8002a24 <Constant_Current+0x1594>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <Constant_Current+0x1560>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	f7fe fa2c 	bl	8000dbc <__aeabi_fmul>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	4620      	mov	r0, r4
 800296a:	f7fe f91f 	bl	8000bac <__addsf3>
 800296e:	4603      	mov	r3, r0
 8002970:	461c      	mov	r4, r3
 8002972:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <Constant_Current+0x1598>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <Constant_Current+0x1568>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4619      	mov	r1, r3
 800297c:	4610      	mov	r0, r2
 800297e:	f7fe fa1d 	bl	8000dbc <__aeabi_fmul>
 8002982:	4603      	mov	r3, r0
 8002984:	4619      	mov	r1, r3
 8002986:	4620      	mov	r0, r4
 8002988:	f7fe f910 	bl	8000bac <__addsf3>
 800298c:	4603      	mov	r3, r0
 800298e:	461c      	mov	r4, r3
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <Constant_Current+0x159c>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <Constant_Current+0x1570>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	4610      	mov	r0, r2
 800299c:	f7fe fa0e 	bl	8000dbc <__aeabi_fmul>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4619      	mov	r1, r3
 80029a4:	4620      	mov	r0, r4
 80029a6:	e043      	b.n	8002a30 <Constant_Current+0x15a0>
 80029a8:	20000ac8 	.word	0x20000ac8
 80029ac:	20000adc 	.word	0x20000adc
 80029b0:	20000790 	.word	0x20000790
 80029b4:	200008d0 	.word	0x200008d0
 80029b8:	20000afc 	.word	0x20000afc
 80029bc:	200008c0 	.word	0x200008c0
 80029c0:	2000076c 	.word	0x2000076c
 80029c4:	200007a4 	.word	0x200007a4
 80029c8:	20000b10 	.word	0x20000b10
 80029cc:	20000ad0 	.word	0x20000ad0
 80029d0:	200009f0 	.word	0x200009f0
 80029d4:	20000a50 	.word	0x20000a50
 80029d8:	20000a68 	.word	0x20000a68
 80029dc:	200009e4 	.word	0x200009e4
 80029e0:	200008f8 	.word	0x200008f8
 80029e4:	20000b14 	.word	0x20000b14
 80029e8:	20000254 	.word	0x20000254
 80029ec:	20000a90 	.word	0x20000a90
 80029f0:	20000010 	.word	0x20000010
 80029f4:	20000784 	.word	0x20000784
 80029f8:	20000014 	.word	0x20000014
 80029fc:	200007d0 	.word	0x200007d0
 8002a00:	20000018 	.word	0x20000018
 8002a04:	20000b04 	.word	0x20000b04
 8002a08:	2000001c 	.word	0x2000001c
 8002a0c:	200007c4 	.word	0x200007c4
 8002a10:	20000a4c 	.word	0x20000a4c
 8002a14:	2000079c 	.word	0x2000079c
 8002a18:	20000908 	.word	0x20000908
 8002a1c:	2000000c 	.word	0x2000000c
 8002a20:	200007a0 	.word	0x200007a0
 8002a24:	200008ec 	.word	0x200008ec
 8002a28:	20000a8c 	.word	0x20000a8c
 8002a2c:	20000ae4 	.word	0x20000ae4
 8002a30:	f7fe f8bc 	bl	8000bac <__addsf3>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461c      	mov	r4, r3
 8002a38:	4b91      	ldr	r3, [pc, #580]	; (8002c80 <Constant_Current+0x17f0>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b91      	ldr	r3, [pc, #580]	; (8002c84 <Constant_Current+0x17f4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f7fe f9ba 	bl	8000dbc <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe f8ad 	bl	8000bac <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	461c      	mov	r4, r3
 8002a56:	4b8c      	ldr	r3, [pc, #560]	; (8002c88 <Constant_Current+0x17f8>)
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4b8a      	ldr	r3, [pc, #552]	; (8002c84 <Constant_Current+0x17f4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f7fe f9ab 	bl	8000dbc <__aeabi_fmul>
 8002a66:	4603      	mov	r3, r0
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7fe f89e 	bl	8000bac <__addsf3>
 8002a70:	4603      	mov	r3, r0
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b85      	ldr	r3, [pc, #532]	; (8002c8c <Constant_Current+0x17fc>)
 8002a76:	601a      	str	r2, [r3, #0]
	C=(r15*outNM)+(r16*outNS)+(r17*outZ)+(r18*outPS)+(r19*outPM)+(r20*outPB)+(r21*outPH);
 8002a78:	4b85      	ldr	r3, [pc, #532]	; (8002c90 <Constant_Current+0x1800>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b85      	ldr	r3, [pc, #532]	; (8002c94 <Constant_Current+0x1804>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f7fe f99a 	bl	8000dbc <__aeabi_fmul>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	461c      	mov	r4, r3
 8002a8c:	4b82      	ldr	r3, [pc, #520]	; (8002c98 <Constant_Current+0x1808>)
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4b82      	ldr	r3, [pc, #520]	; (8002c9c <Constant_Current+0x180c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f7fe f990 	bl	8000dbc <__aeabi_fmul>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7fe f883 	bl	8000bac <__addsf3>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	461c      	mov	r4, r3
 8002aaa:	4b7d      	ldr	r3, [pc, #500]	; (8002ca0 <Constant_Current+0x1810>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <Constant_Current+0x1814>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4610      	mov	r0, r2
 8002ab6:	f7fe f981 	bl	8000dbc <__aeabi_fmul>
 8002aba:	4603      	mov	r3, r0
 8002abc:	4619      	mov	r1, r3
 8002abe:	4620      	mov	r0, r4
 8002ac0:	f7fe f874 	bl	8000bac <__addsf3>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	461c      	mov	r4, r3
 8002ac8:	4b77      	ldr	r3, [pc, #476]	; (8002ca8 <Constant_Current+0x1818>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b77      	ldr	r3, [pc, #476]	; (8002cac <Constant_Current+0x181c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4610      	mov	r0, r2
 8002ad4:	f7fe f972 	bl	8000dbc <__aeabi_fmul>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4619      	mov	r1, r3
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7fe f865 	bl	8000bac <__addsf3>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	461c      	mov	r4, r3
 8002ae6:	4b72      	ldr	r3, [pc, #456]	; (8002cb0 <Constant_Current+0x1820>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b72      	ldr	r3, [pc, #456]	; (8002cb4 <Constant_Current+0x1824>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4619      	mov	r1, r3
 8002af0:	4610      	mov	r0, r2
 8002af2:	f7fe f963 	bl	8000dbc <__aeabi_fmul>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4619      	mov	r1, r3
 8002afa:	4620      	mov	r0, r4
 8002afc:	f7fe f856 	bl	8000bac <__addsf3>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461c      	mov	r4, r3
 8002b04:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <Constant_Current+0x1828>)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <Constant_Current+0x182c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4610      	mov	r0, r2
 8002b10:	f7fe f954 	bl	8000dbc <__aeabi_fmul>
 8002b14:	4603      	mov	r3, r0
 8002b16:	4619      	mov	r1, r3
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7fe f847 	bl	8000bac <__addsf3>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	461c      	mov	r4, r3
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <Constant_Current+0x1830>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b57      	ldr	r3, [pc, #348]	; (8002c84 <Constant_Current+0x17f4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fe f945 	bl	8000dbc <__aeabi_fmul>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4619      	mov	r1, r3
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7fe f838 	bl	8000bac <__addsf3>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <Constant_Current+0x1834>)
 8002b42:	601a      	str	r2, [r3, #0]
	D=(r22*outNB)+(r23*outNM)+(r24*outNS)+(r25*outZ)+(r26*outPS)+(r27*outPM)+(r28*outPB);
 8002b44:	4b60      	ldr	r3, [pc, #384]	; (8002cc8 <Constant_Current+0x1838>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b60      	ldr	r3, [pc, #384]	; (8002ccc <Constant_Current+0x183c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7fe f934 	bl	8000dbc <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461c      	mov	r4, r3
 8002b58:	4b5d      	ldr	r3, [pc, #372]	; (8002cd0 <Constant_Current+0x1840>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b4d      	ldr	r3, [pc, #308]	; (8002c94 <Constant_Current+0x1804>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7fe f92a 	bl	8000dbc <__aeabi_fmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7fe f81d 	bl	8000bac <__addsf3>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461c      	mov	r4, r3
 8002b76:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <Constant_Current+0x1844>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b48      	ldr	r3, [pc, #288]	; (8002c9c <Constant_Current+0x180c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7fe f91b 	bl	8000dbc <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7fe f80e 	bl	8000bac <__addsf3>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461c      	mov	r4, r3
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <Constant_Current+0x1848>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <Constant_Current+0x1814>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe f90c 	bl	8000dbc <__aeabi_fmul>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7fd ffff 	bl	8000bac <__addsf3>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	461c      	mov	r4, r3
 8002bb2:	4b4a      	ldr	r3, [pc, #296]	; (8002cdc <Constant_Current+0x184c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b3d      	ldr	r3, [pc, #244]	; (8002cac <Constant_Current+0x181c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	f7fe f8fd 	bl	8000dbc <__aeabi_fmul>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	f7fd fff0 	bl	8000bac <__addsf3>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	461c      	mov	r4, r3
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <Constant_Current+0x1850>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <Constant_Current+0x1824>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f7fe f8ee 	bl	8000dbc <__aeabi_fmul>
 8002be0:	4603      	mov	r3, r0
 8002be2:	4619      	mov	r1, r3
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7fd ffe1 	bl	8000bac <__addsf3>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461c      	mov	r4, r3
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <Constant_Current+0x1854>)
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <Constant_Current+0x182c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7fe f8df 	bl	8000dbc <__aeabi_fmul>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4619      	mov	r1, r3
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7fd ffd2 	bl	8000bac <__addsf3>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <Constant_Current+0x1858>)
 8002c0e:	601a      	str	r2, [r3, #0]
	E=(r29*outNH)+(r30*outNB)+(r31*outNM)+(r32*outNS)+(r33*outZ)+(r34*outPS)+(r35*outPM);
 8002c10:	4b36      	ldr	r3, [pc, #216]	; (8002cec <Constant_Current+0x185c>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <Constant_Current+0x1860>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	f7fe f8ce 	bl	8000dbc <__aeabi_fmul>
 8002c20:	4603      	mov	r3, r0
 8002c22:	461c      	mov	r4, r3
 8002c24:	4b33      	ldr	r3, [pc, #204]	; (8002cf4 <Constant_Current+0x1864>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <Constant_Current+0x183c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4610      	mov	r0, r2
 8002c30:	f7fe f8c4 	bl	8000dbc <__aeabi_fmul>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4619      	mov	r1, r3
 8002c38:	4620      	mov	r0, r4
 8002c3a:	f7fd ffb7 	bl	8000bac <__addsf3>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	461c      	mov	r4, r3
 8002c42:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <Constant_Current+0x1868>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <Constant_Current+0x1804>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f7fe f8b5 	bl	8000dbc <__aeabi_fmul>
 8002c52:	4603      	mov	r3, r0
 8002c54:	4619      	mov	r1, r3
 8002c56:	4620      	mov	r0, r4
 8002c58:	f7fd ffa8 	bl	8000bac <__addsf3>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461c      	mov	r4, r3
 8002c60:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <Constant_Current+0x186c>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <Constant_Current+0x180c>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	f7fe f8a6 	bl	8000dbc <__aeabi_fmul>
 8002c70:	4603      	mov	r3, r0
 8002c72:	4619      	mov	r1, r3
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7fd ff99 	bl	8000bac <__addsf3>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	e040      	b.n	8002d00 <Constant_Current+0x1870>
 8002c7e:	bf00      	nop
 8002c80:	20000b18 	.word	0x20000b18
 8002c84:	2000001c 	.word	0x2000001c
 8002c88:	20000678 	.word	0x20000678
 8002c8c:	200008cc 	.word	0x200008cc
 8002c90:	20000ae8 	.word	0x20000ae8
 8002c94:	20000008 	.word	0x20000008
 8002c98:	20000a64 	.word	0x20000a64
 8002c9c:	2000000c 	.word	0x2000000c
 8002ca0:	200007b8 	.word	0x200007b8
 8002ca4:	20000254 	.word	0x20000254
 8002ca8:	200009f4 	.word	0x200009f4
 8002cac:	20000010 	.word	0x20000010
 8002cb0:	20000ae0 	.word	0x20000ae0
 8002cb4:	20000014 	.word	0x20000014
 8002cb8:	20000900 	.word	0x20000900
 8002cbc:	20000018 	.word	0x20000018
 8002cc0:	200007cc 	.word	0x200007cc
 8002cc4:	200008e8 	.word	0x200008e8
 8002cc8:	20000ab0 	.word	0x20000ab0
 8002ccc:	20000004 	.word	0x20000004
 8002cd0:	20000af8 	.word	0x20000af8
 8002cd4:	20000b0c 	.word	0x20000b0c
 8002cd8:	20000768 	.word	0x20000768
 8002cdc:	200007ac 	.word	0x200007ac
 8002ce0:	20000914 	.word	0x20000914
 8002ce4:	2000067c 	.word	0x2000067c
 8002ce8:	20000674 	.word	0x20000674
 8002cec:	2000075c 	.word	0x2000075c
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000a7c 	.word	0x20000a7c
 8002cf8:	200007bc 	.word	0x200007bc
 8002cfc:	200008c8 	.word	0x200008c8
 8002d00:	461c      	mov	r4, r3
 8002d02:	4b91      	ldr	r3, [pc, #580]	; (8002f48 <Constant_Current+0x1ab8>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	4b91      	ldr	r3, [pc, #580]	; (8002f4c <Constant_Current+0x1abc>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	f7fe f855 	bl	8000dbc <__aeabi_fmul>
 8002d12:	4603      	mov	r3, r0
 8002d14:	4619      	mov	r1, r3
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7fd ff48 	bl	8000bac <__addsf3>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461c      	mov	r4, r3
 8002d20:	4b8b      	ldr	r3, [pc, #556]	; (8002f50 <Constant_Current+0x1ac0>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b8b      	ldr	r3, [pc, #556]	; (8002f54 <Constant_Current+0x1ac4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	f7fe f846 	bl	8000dbc <__aeabi_fmul>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fd ff39 	bl	8000bac <__addsf3>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461c      	mov	r4, r3
 8002d3e:	4b86      	ldr	r3, [pc, #536]	; (8002f58 <Constant_Current+0x1ac8>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b86      	ldr	r3, [pc, #536]	; (8002f5c <Constant_Current+0x1acc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4619      	mov	r1, r3
 8002d48:	4610      	mov	r0, r2
 8002d4a:	f7fe f837 	bl	8000dbc <__aeabi_fmul>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4619      	mov	r1, r3
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7fd ff2a 	bl	8000bac <__addsf3>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b80      	ldr	r3, [pc, #512]	; (8002f60 <Constant_Current+0x1ad0>)
 8002d5e:	601a      	str	r2, [r3, #0]
	F=(r36*outNH)+(r37*outNH)+(r38*outNB)+(r39*outNM)+(r40*outNS)+(r41*outZ)+(r42*outPS);
 8002d60:	4b80      	ldr	r3, [pc, #512]	; (8002f64 <Constant_Current+0x1ad4>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <Constant_Current+0x1ad8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	f7fe f826 	bl	8000dbc <__aeabi_fmul>
 8002d70:	4603      	mov	r3, r0
 8002d72:	461c      	mov	r4, r3
 8002d74:	4b7d      	ldr	r3, [pc, #500]	; (8002f6c <Constant_Current+0x1adc>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b7b      	ldr	r3, [pc, #492]	; (8002f68 <Constant_Current+0x1ad8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4610      	mov	r0, r2
 8002d80:	f7fe f81c 	bl	8000dbc <__aeabi_fmul>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7fd ff0f 	bl	8000bac <__addsf3>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461c      	mov	r4, r3
 8002d92:	4b77      	ldr	r3, [pc, #476]	; (8002f70 <Constant_Current+0x1ae0>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b77      	ldr	r3, [pc, #476]	; (8002f74 <Constant_Current+0x1ae4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	f7fe f80d 	bl	8000dbc <__aeabi_fmul>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4619      	mov	r1, r3
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7fd ff00 	bl	8000bac <__addsf3>
 8002dac:	4603      	mov	r3, r0
 8002dae:	461c      	mov	r4, r3
 8002db0:	4b71      	ldr	r3, [pc, #452]	; (8002f78 <Constant_Current+0x1ae8>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <Constant_Current+0x1aec>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4619      	mov	r1, r3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	f7fd fffe 	bl	8000dbc <__aeabi_fmul>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4620      	mov	r0, r4
 8002dc6:	f7fd fef1 	bl	8000bac <__addsf3>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461c      	mov	r4, r3
 8002dce:	4b6c      	ldr	r3, [pc, #432]	; (8002f80 <Constant_Current+0x1af0>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <Constant_Current+0x1af4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f7fd ffef 	bl	8000dbc <__aeabi_fmul>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4619      	mov	r1, r3
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7fd fee2 	bl	8000bac <__addsf3>
 8002de8:	4603      	mov	r3, r0
 8002dea:	461c      	mov	r4, r3
 8002dec:	4b66      	ldr	r3, [pc, #408]	; (8002f88 <Constant_Current+0x1af8>)
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	4b56      	ldr	r3, [pc, #344]	; (8002f4c <Constant_Current+0x1abc>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fd ffe0 	bl	8000dbc <__aeabi_fmul>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4620      	mov	r0, r4
 8002e02:	f7fd fed3 	bl	8000bac <__addsf3>
 8002e06:	4603      	mov	r3, r0
 8002e08:	461c      	mov	r4, r3
 8002e0a:	4b60      	ldr	r3, [pc, #384]	; (8002f8c <Constant_Current+0x1afc>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	4b51      	ldr	r3, [pc, #324]	; (8002f54 <Constant_Current+0x1ac4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7fd ffd1 	bl	8000dbc <__aeabi_fmul>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4620      	mov	r0, r4
 8002e20:	f7fd fec4 	bl	8000bac <__addsf3>
 8002e24:	4603      	mov	r3, r0
 8002e26:	461a      	mov	r2, r3
 8002e28:	4b59      	ldr	r3, [pc, #356]	; (8002f90 <Constant_Current+0x1b00>)
 8002e2a:	601a      	str	r2, [r3, #0]
	G=(r43*outNH)+(r44*outNH)+(r45*outNH)+(r46*outNB)+(r47*outNM)+(r48*outNS)+(r49*outZ);
 8002e2c:	4b59      	ldr	r3, [pc, #356]	; (8002f94 <Constant_Current+0x1b04>)
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	4b4d      	ldr	r3, [pc, #308]	; (8002f68 <Constant_Current+0x1ad8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4619      	mov	r1, r3
 8002e36:	4610      	mov	r0, r2
 8002e38:	f7fd ffc0 	bl	8000dbc <__aeabi_fmul>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461c      	mov	r4, r3
 8002e40:	4b55      	ldr	r3, [pc, #340]	; (8002f98 <Constant_Current+0x1b08>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	4b48      	ldr	r3, [pc, #288]	; (8002f68 <Constant_Current+0x1ad8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	f7fd ffb6 	bl	8000dbc <__aeabi_fmul>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7fd fea9 	bl	8000bac <__addsf3>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	461c      	mov	r4, r3
 8002e5e:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <Constant_Current+0x1b0c>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <Constant_Current+0x1ad8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	4610      	mov	r0, r2
 8002e6a:	f7fd ffa7 	bl	8000dbc <__aeabi_fmul>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4619      	mov	r1, r3
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7fd fe9a 	bl	8000bac <__addsf3>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	461c      	mov	r4, r3
 8002e7c:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <Constant_Current+0x1b10>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b3c      	ldr	r3, [pc, #240]	; (8002f74 <Constant_Current+0x1ae4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f7fd ff98 	bl	8000dbc <__aeabi_fmul>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7fd fe8b 	bl	8000bac <__addsf3>
 8002e96:	4603      	mov	r3, r0
 8002e98:	461c      	mov	r4, r3
 8002e9a:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <Constant_Current+0x1b14>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	4b37      	ldr	r3, [pc, #220]	; (8002f7c <Constant_Current+0x1aec>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	f7fd ff89 	bl	8000dbc <__aeabi_fmul>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4619      	mov	r1, r3
 8002eae:	4620      	mov	r0, r4
 8002eb0:	f7fd fe7c 	bl	8000bac <__addsf3>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	461c      	mov	r4, r3
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <Constant_Current+0x1b18>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <Constant_Current+0x1af4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	4610      	mov	r0, r2
 8002ec4:	f7fd ff7a 	bl	8000dbc <__aeabi_fmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f7fd fe6d 	bl	8000bac <__addsf3>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	461c      	mov	r4, r3
 8002ed6:	4b35      	ldr	r3, [pc, #212]	; (8002fac <Constant_Current+0x1b1c>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4b1c      	ldr	r3, [pc, #112]	; (8002f4c <Constant_Current+0x1abc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	f7fd ff6b 	bl	8000dbc <__aeabi_fmul>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7fd fe5e 	bl	8000bac <__addsf3>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <Constant_Current+0x1b20>)
 8002ef6:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <Constant_Current+0x1b24>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b2e      	ldr	r3, [pc, #184]	; (8002fb8 <Constant_Current+0x1b28>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7fd fe52 	bl	8000bac <__addsf3>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b2b      	ldr	r3, [pc, #172]	; (8002fbc <Constant_Current+0x1b2c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	f7fd fe4a 	bl	8000bac <__addsf3>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <Constant_Current+0x1b30>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7fd fe42 	bl	8000bac <__addsf3>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4b25      	ldr	r3, [pc, #148]	; (8002fc4 <Constant_Current+0x1b34>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4619      	mov	r1, r3
 8002f32:	4610      	mov	r0, r2
 8002f34:	f7fd fe3a 	bl	8000bac <__addsf3>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b22      	ldr	r3, [pc, #136]	; (8002fc8 <Constant_Current+0x1b38>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	4610      	mov	r0, r2
 8002f44:	e042      	b.n	8002fcc <Constant_Current+0x1b3c>
 8002f46:	bf00      	nop
 8002f48:	200009e8 	.word	0x200009e8
 8002f4c:	20000254 	.word	0x20000254
 8002f50:	20000a78 	.word	0x20000a78
 8002f54:	20000010 	.word	0x20000010
 8002f58:	20000aac 	.word	0x20000aac
 8002f5c:	20000014 	.word	0x20000014
 8002f60:	20000a9c 	.word	0x20000a9c
 8002f64:	20000788 	.word	0x20000788
 8002f68:	20000000 	.word	0x20000000
 8002f6c:	200008e4 	.word	0x200008e4
 8002f70:	200008fc 	.word	0x200008fc
 8002f74:	20000004 	.word	0x20000004
 8002f78:	20000ad4 	.word	0x20000ad4
 8002f7c:	20000008 	.word	0x20000008
 8002f80:	20000a44 	.word	0x20000a44
 8002f84:	2000000c 	.word	0x2000000c
 8002f88:	20000774 	.word	0x20000774
 8002f8c:	2000077c 	.word	0x2000077c
 8002f90:	20000b00 	.word	0x20000b00
 8002f94:	20000adc 	.word	0x20000adc
 8002f98:	200008d0 	.word	0x200008d0
 8002f9c:	200008c0 	.word	0x200008c0
 8002fa0:	200007a4 	.word	0x200007a4
 8002fa4:	20000ad0 	.word	0x20000ad0
 8002fa8:	20000a50 	.word	0x20000a50
 8002fac:	200009e4 	.word	0x200009e4
 8002fb0:	2000090c 	.word	0x2000090c
 8002fb4:	20000b14 	.word	0x20000b14
 8002fb8:	20000a90 	.word	0x20000a90
 8002fbc:	20000784 	.word	0x20000784
 8002fc0:	200007d0 	.word	0x200007d0
 8002fc4:	20000b04 	.word	0x20000b04
 8002fc8:	200007c4 	.word	0x200007c4
 8002fcc:	f7fd fdee 	bl	8000bac <__addsf3>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b90      	ldr	r3, [pc, #576]	; (8003218 <Constant_Current+0x1d88>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fd fde6 	bl	8000bac <__addsf3>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b8d      	ldr	r3, [pc, #564]	; (800321c <Constant_Current+0x1d8c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7fd fdde 	bl	8000bac <__addsf3>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b8a      	ldr	r3, [pc, #552]	; (8003220 <Constant_Current+0x1d90>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7fd fdd6 	bl	8000bac <__addsf3>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b87      	ldr	r3, [pc, #540]	; (8003224 <Constant_Current+0x1d94>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fdce 	bl	8000bac <__addsf3>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b84      	ldr	r3, [pc, #528]	; (8003228 <Constant_Current+0x1d98>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7fd fdc6 	bl	8000bac <__addsf3>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	4b81      	ldr	r3, [pc, #516]	; (800322c <Constant_Current+0x1d9c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7fd fdbe 	bl	8000bac <__addsf3>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b7e      	ldr	r3, [pc, #504]	; (8003230 <Constant_Current+0x1da0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fd fdb6 	bl	8000bac <__addsf3>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	4b7b      	ldr	r3, [pc, #492]	; (8003234 <Constant_Current+0x1da4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7fd fdae 	bl	8000bac <__addsf3>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b78      	ldr	r3, [pc, #480]	; (8003238 <Constant_Current+0x1da8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f7fd fda6 	bl	8000bac <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b75      	ldr	r3, [pc, #468]	; (800323c <Constant_Current+0x1dac>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7fd fd9e 	bl	8000bac <__addsf3>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	4b72      	ldr	r3, [pc, #456]	; (8003240 <Constant_Current+0x1db0>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7fd fd96 	bl	8000bac <__addsf3>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	4b6f      	ldr	r3, [pc, #444]	; (8003244 <Constant_Current+0x1db4>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fd fd8e 	bl	8000bac <__addsf3>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	4b6c      	ldr	r3, [pc, #432]	; (8003248 <Constant_Current+0x1db8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fd fd86 	bl	8000bac <__addsf3>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b69      	ldr	r3, [pc, #420]	; (800324c <Constant_Current+0x1dbc>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f7fd fd7e 	bl	8000bac <__addsf3>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b66      	ldr	r3, [pc, #408]	; (8003250 <Constant_Current+0x1dc0>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7fd fd76 	bl	8000bac <__addsf3>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <Constant_Current+0x1dc4>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7fd fd6e 	bl	8000bac <__addsf3>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b60      	ldr	r3, [pc, #384]	; (8003258 <Constant_Current+0x1dc8>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7fd fd66 	bl	8000bac <__addsf3>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b5d      	ldr	r3, [pc, #372]	; (800325c <Constant_Current+0x1dcc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fd5e 	bl	8000bac <__addsf3>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b5a      	ldr	r3, [pc, #360]	; (8003260 <Constant_Current+0x1dd0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f7fd fd56 	bl	8000bac <__addsf3>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b57      	ldr	r3, [pc, #348]	; (8003264 <Constant_Current+0x1dd4>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f7fd fd4e 	bl	8000bac <__addsf3>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	4b54      	ldr	r3, [pc, #336]	; (8003268 <Constant_Current+0x1dd8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7fd fd46 	bl	8000bac <__addsf3>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4b51      	ldr	r3, [pc, #324]	; (800326c <Constant_Current+0x1ddc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f7fd fd3e 	bl	8000bac <__addsf3>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <Constant_Current+0x1de0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f7fd fd36 	bl	8000bac <__addsf3>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <Constant_Current+0x1de4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fd fd2e 	bl	8000bac <__addsf3>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	4b48      	ldr	r3, [pc, #288]	; (8003278 <Constant_Current+0x1de8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fd fd26 	bl	8000bac <__addsf3>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	4b45      	ldr	r3, [pc, #276]	; (800327c <Constant_Current+0x1dec>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f7fd fd1e 	bl	8000bac <__addsf3>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	4b42      	ldr	r3, [pc, #264]	; (8003280 <Constant_Current+0x1df0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fd fd16 	bl	8000bac <__addsf3>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <Constant_Current+0x1df4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7fd fd0e 	bl	8000bac <__addsf3>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	4b3c      	ldr	r3, [pc, #240]	; (8003288 <Constant_Current+0x1df8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f7fd fd06 	bl	8000bac <__addsf3>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <Constant_Current+0x1dfc>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fd fcfe 	bl	8000bac <__addsf3>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b36      	ldr	r3, [pc, #216]	; (8003290 <Constant_Current+0x1e00>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7fd fcf6 	bl	8000bac <__addsf3>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b33      	ldr	r3, [pc, #204]	; (8003294 <Constant_Current+0x1e04>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f7fd fcee 	bl	8000bac <__addsf3>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b30      	ldr	r3, [pc, #192]	; (8003298 <Constant_Current+0x1e08>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f7fd fce6 	bl	8000bac <__addsf3>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b2d      	ldr	r3, [pc, #180]	; (800329c <Constant_Current+0x1e0c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f7fd fcde 	bl	8000bac <__addsf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	461a      	mov	r2, r3
 80031f4:	4b2a      	ldr	r3, [pc, #168]	; (80032a0 <Constant_Current+0x1e10>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4619      	mov	r1, r3
 80031fa:	4610      	mov	r0, r2
 80031fc:	f7fd fcd6 	bl	8000bac <__addsf3>
 8003200:	4603      	mov	r3, r0
 8003202:	461a      	mov	r2, r3
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <Constant_Current+0x1e14>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f7fd fcce 	bl	8000bac <__addsf3>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	e048      	b.n	80032a8 <Constant_Current+0x1e18>
 8003216:	bf00      	nop
 8003218:	20000a4c 	.word	0x20000a4c
 800321c:	20000908 	.word	0x20000908
 8003220:	200007a0 	.word	0x200007a0
 8003224:	200008ec 	.word	0x200008ec
 8003228:	20000a8c 	.word	0x20000a8c
 800322c:	20000ae4 	.word	0x20000ae4
 8003230:	20000b18 	.word	0x20000b18
 8003234:	20000678 	.word	0x20000678
 8003238:	20000ae8 	.word	0x20000ae8
 800323c:	20000a64 	.word	0x20000a64
 8003240:	200007b8 	.word	0x200007b8
 8003244:	200009f4 	.word	0x200009f4
 8003248:	20000ae0 	.word	0x20000ae0
 800324c:	20000900 	.word	0x20000900
 8003250:	200007cc 	.word	0x200007cc
 8003254:	20000ab0 	.word	0x20000ab0
 8003258:	20000af8 	.word	0x20000af8
 800325c:	20000b0c 	.word	0x20000b0c
 8003260:	20000768 	.word	0x20000768
 8003264:	200007ac 	.word	0x200007ac
 8003268:	20000914 	.word	0x20000914
 800326c:	2000067c 	.word	0x2000067c
 8003270:	2000075c 	.word	0x2000075c
 8003274:	20000a7c 	.word	0x20000a7c
 8003278:	200007bc 	.word	0x200007bc
 800327c:	200008c8 	.word	0x200008c8
 8003280:	200009e8 	.word	0x200009e8
 8003284:	20000a78 	.word	0x20000a78
 8003288:	20000aac 	.word	0x20000aac
 800328c:	20000788 	.word	0x20000788
 8003290:	200008e4 	.word	0x200008e4
 8003294:	200008fc 	.word	0x200008fc
 8003298:	20000ad4 	.word	0x20000ad4
 800329c:	20000a44 	.word	0x20000a44
 80032a0:	20000774 	.word	0x20000774
 80032a4:	2000077c 	.word	0x2000077c
 80032a8:	4b76      	ldr	r3, [pc, #472]	; (8003484 <Constant_Current+0x1ff4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fd fc7c 	bl	8000bac <__addsf3>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <Constant_Current+0x1ff8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fd fc74 	bl	8000bac <__addsf3>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b70      	ldr	r3, [pc, #448]	; (800348c <Constant_Current+0x1ffc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7fd fc6c 	bl	8000bac <__addsf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <Constant_Current+0x2000>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fd fc64 	bl	8000bac <__addsf3>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <Constant_Current+0x2004>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4619      	mov	r1, r3
 80032ee:	4610      	mov	r0, r2
 80032f0:	f7fd fc5c 	bl	8000bac <__addsf3>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b67      	ldr	r3, [pc, #412]	; (8003498 <Constant_Current+0x2008>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4619      	mov	r1, r3
 80032fe:	4610      	mov	r0, r2
 8003300:	f7fd fc54 	bl	8000bac <__addsf3>
 8003304:	4603      	mov	r3, r0
 8003306:	461a      	mov	r2, r3
 8003308:	4b64      	ldr	r3, [pc, #400]	; (800349c <Constant_Current+0x200c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f7fd fc4c 	bl	8000bac <__addsf3>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	4b61      	ldr	r3, [pc, #388]	; (80034a0 <Constant_Current+0x2010>)
 800331a:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 800331c:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <Constant_Current+0x2014>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b61      	ldr	r3, [pc, #388]	; (80034a8 <Constant_Current+0x2018>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fd fc40 	bl	8000bac <__addsf3>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b5e      	ldr	r3, [pc, #376]	; (80034ac <Constant_Current+0x201c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f7fd fc38 	bl	8000bac <__addsf3>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	4b5b      	ldr	r3, [pc, #364]	; (80034b0 <Constant_Current+0x2020>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f7fd fc30 	bl	8000bac <__addsf3>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	4b58      	ldr	r3, [pc, #352]	; (80034b4 <Constant_Current+0x2024>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7fd fc28 	bl	8000bac <__addsf3>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	4b55      	ldr	r3, [pc, #340]	; (80034b8 <Constant_Current+0x2028>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f7fd fc20 	bl	8000bac <__addsf3>
 800336c:	4603      	mov	r3, r0
 800336e:	461a      	mov	r2, r3
 8003370:	4b52      	ldr	r3, [pc, #328]	; (80034bc <Constant_Current+0x202c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4619      	mov	r1, r3
 8003376:	4610      	mov	r0, r2
 8003378:	f7fd fc18 	bl	8000bac <__addsf3>
 800337c:	4603      	mov	r3, r0
 800337e:	461a      	mov	r2, r3
 8003380:	4b47      	ldr	r3, [pc, #284]	; (80034a0 <Constant_Current+0x2010>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f7fd fdcc 	bl	8000f24 <__aeabi_fdiv>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <Constant_Current+0x2030>)
 8003392:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 8003394:	4b4b      	ldr	r3, [pc, #300]	; (80034c4 <Constant_Current+0x2034>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <Constant_Current+0x2030>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	4610      	mov	r0, r2
 80033a0:	f7fd fc04 	bl	8000bac <__addsf3>
 80033a4:	4603      	mov	r3, r0
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <Constant_Current+0x2034>)
 80033aa:	601a      	str	r2, [r3, #0]

	if(dc>=90)
 80033ac:	4b45      	ldr	r3, [pc, #276]	; (80034c4 <Constant_Current+0x2034>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4945      	ldr	r1, [pc, #276]	; (80034c8 <Constant_Current+0x2038>)
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd feb4 	bl	8001120 <__aeabi_fcmpge>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <Constant_Current+0x1f34>
		dc=90;
 80033be:	4b41      	ldr	r3, [pc, #260]	; (80034c4 <Constant_Current+0x2034>)
 80033c0:	4a41      	ldr	r2, [pc, #260]	; (80034c8 <Constant_Current+0x2038>)
 80033c2:	601a      	str	r2, [r3, #0]
	if(dc<=0)
 80033c4:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <Constant_Current+0x2034>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fe9d 	bl	800110c <__aeabi_fcmple>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <Constant_Current+0x1f50>
		dc=0;
 80033d8:	4b3a      	ldr	r3, [pc, #232]	; (80034c4 <Constant_Current+0x2034>)
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 80033e0:	4b38      	ldr	r3, [pc, #224]	; (80034c4 <Constant_Current+0x2034>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4939      	ldr	r1, [pc, #228]	; (80034cc <Constant_Current+0x203c>)
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd fd9c 	bl	8000f24 <__aeabi_fdiv>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <Constant_Current+0x2040>)
 80033f2:	601a      	str	r2, [r3, #0]

	if(	flag_trip_overvoltage == 1		||
 80033f4:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <Constant_Current+0x2044>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d027      	beq.n	800344c <Constant_Current+0x1fbc>
		flag_trip_overtemperature == 1	||
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <Constant_Current+0x2048>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8003400:	2b01      	cmp	r3, #1
 8003402:	d023      	beq.n	800344c <Constant_Current+0x1fbc>
		flag_trip_undertemperature == 1	||
 8003404:	4b35      	ldr	r3, [pc, #212]	; (80034dc <Constant_Current+0x204c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 8003408:	2b01      	cmp	r3, #1
 800340a:	d01f      	beq.n	800344c <Constant_Current+0x1fbc>
		flag_trip_overcurrentcharge == 1||
 800340c:	4b34      	ldr	r3, [pc, #208]	; (80034e0 <Constant_Current+0x2050>)
 800340e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8003410:	2b01      	cmp	r3, #1
 8003412:	d01b      	beq.n	800344c <Constant_Current+0x1fbc>
		flag_trip_SOCOverCharge == 1	||
 8003414:	4b33      	ldr	r3, [pc, #204]	; (80034e4 <Constant_Current+0x2054>)
 8003416:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 8003418:	2b01      	cmp	r3, #1
 800341a:	d017      	beq.n	800344c <Constant_Current+0x1fbc>
		flag_trip_shortcircuit == 1		||
 800341c:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <Constant_Current+0x2058>)
 800341e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8003420:	2b01      	cmp	r3, #1
 8003422:	d013      	beq.n	800344c <Constant_Current+0x1fbc>
		flag_trip_systemfailure == 1	||
 8003424:	4b31      	ldr	r3, [pc, #196]	; (80034ec <Constant_Current+0x205c>)
 8003426:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 8003428:	2b01      	cmp	r3, #1
 800342a:	d00f      	beq.n	800344c <Constant_Current+0x1fbc>
		Flag_ChargerShortCircuit == 1	||
 800342c:	4b30      	ldr	r3, [pc, #192]	; (80034f0 <Constant_Current+0x2060>)
 800342e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8003430:	2b01      	cmp	r3, #1
 8003432:	d00b      	beq.n	800344c <Constant_Current+0x1fbc>
		Flag_ChargerOverCurrent == 1	||
 8003434:	4b2f      	ldr	r3, [pc, #188]	; (80034f4 <Constant_Current+0x2064>)
 8003436:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 8003438:	2b01      	cmp	r3, #1
 800343a:	d007      	beq.n	800344c <Constant_Current+0x1fbc>
		Flag_ChargerOverTemperature == 1||
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <Constant_Current+0x2068>)
 800343e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8003440:	2b01      	cmp	r3, #1
 8003442:	d003      	beq.n	800344c <Constant_Current+0x1fbc>
		Flag_ChargerOverVoltage == 1	)
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <Constant_Current+0x206c>)
 8003446:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 8003448:	2b01      	cmp	r3, #1
 800344a:	d106      	bne.n	800345a <Constant_Current+0x1fca>
		{
			duty=0;
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <Constant_Current+0x2040>)
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 8003454:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <Constant_Current+0x2070>)
 8003456:	2202      	movs	r2, #2
 8003458:	701a      	strb	r2, [r3, #0]
		}

	TIM1->CCR1=duty*TIM1->ARR;
 800345a:	4b2a      	ldr	r3, [pc, #168]	; (8003504 <Constant_Current+0x2074>)
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd fc54 	bl	8000d0c <__aeabi_ui2f>
 8003464:	4602      	mov	r2, r0
 8003466:	4b1a      	ldr	r3, [pc, #104]	; (80034d0 <Constant_Current+0x2040>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7fd fca5 	bl	8000dbc <__aeabi_fmul>
 8003472:	4603      	mov	r3, r0
 8003474:	4c23      	ldr	r4, [pc, #140]	; (8003504 <Constant_Current+0x2074>)
 8003476:	4618      	mov	r0, r3
 8003478:	f7fd fe66 	bl	8001148 <__aeabi_f2uiz>
 800347c:	4603      	mov	r3, r0
 800347e:	6363      	str	r3, [r4, #52]	; 0x34

}
 8003480:	bf00      	nop
 8003482:	bd98      	pop	{r3, r4, r7, pc}
 8003484:	20000adc 	.word	0x20000adc
 8003488:	200008d0 	.word	0x200008d0
 800348c:	200008c0 	.word	0x200008c0
 8003490:	200007a4 	.word	0x200007a4
 8003494:	20000ad0 	.word	0x20000ad0
 8003498:	20000a50 	.word	0x20000a50
 800349c:	200009e4 	.word	0x200009e4
 80034a0:	20000a40 	.word	0x20000a40
 80034a4:	2000079c 	.word	0x2000079c
 80034a8:	200008cc 	.word	0x200008cc
 80034ac:	200008e8 	.word	0x200008e8
 80034b0:	20000674 	.word	0x20000674
 80034b4:	20000a9c 	.word	0x20000a9c
 80034b8:	20000b00 	.word	0x20000b00
 80034bc:	2000090c 	.word	0x2000090c
 80034c0:	20000a98 	.word	0x20000a98
 80034c4:	20000770 	.word	0x20000770
 80034c8:	42b40000 	.word	0x42b40000
 80034cc:	42c80000 	.word	0x42c80000
 80034d0:	20000abc 	.word	0x20000abc
 80034d4:	20000aec 	.word	0x20000aec
 80034d8:	200007a9 	.word	0x200007a9
 80034dc:	200008dc 	.word	0x200008dc
 80034e0:	20000a54 	.word	0x20000a54
 80034e4:	20000682 	.word	0x20000682
 80034e8:	20000760 	.word	0x20000760
 80034ec:	20000780 	.word	0x20000780
 80034f0:	2000089c 	.word	0x2000089c
 80034f4:	200007c0 	.word	0x200007c0
 80034f8:	20000795 	.word	0x20000795
 80034fc:	200008ac 	.word	0x200008ac
 8003500:	200007a8 	.word	0x200007a8
 8003504:	40010000 	.word	0x40010000

08003508 <Constant_Voltage>:
float oNH=-0.05, oNB=-0.025, oNM=-0.01, oNS=-0.0075, oZ=0, oPS=0.0075, oPM=0.01, oPB=0.025, oPH=0.05;
float SetPoint_CV = 25;
extern float Voltage_Charger;

void Constant_Voltage(void)
{
 8003508:	b598      	push	{r3, r4, r7, lr}
 800350a:	af00      	add	r7, sp, #0

	sp=SetPoint_CV;
 800350c:	4b71      	ldr	r3, [pc, #452]	; (80036d4 <Constant_Voltage+0x1cc>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a71      	ldr	r2, [pc, #452]	; (80036d8 <Constant_Voltage+0x1d0>)
 8003512:	6013      	str	r3, [r2, #0]
	pv=Voltage_Charger;
 8003514:	4b71      	ldr	r3, [pc, #452]	; (80036dc <Constant_Voltage+0x1d4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a71      	ldr	r2, [pc, #452]	; (80036e0 <Constant_Voltage+0x1d8>)
 800351a:	6013      	str	r3, [r2, #0]
	e=sp-pv;
 800351c:	4b6e      	ldr	r3, [pc, #440]	; (80036d8 <Constant_Voltage+0x1d0>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b6f      	ldr	r3, [pc, #444]	; (80036e0 <Constant_Voltage+0x1d8>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4619      	mov	r1, r3
 8003526:	4610      	mov	r0, r2
 8003528:	f7fd fb3e 	bl	8000ba8 <__aeabi_fsub>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	4b6c      	ldr	r3, [pc, #432]	; (80036e4 <Constant_Voltage+0x1dc>)
 8003532:	601a      	str	r2, [r3, #0]
	d=e-esblm;
 8003534:	4b6b      	ldr	r3, [pc, #428]	; (80036e4 <Constant_Voltage+0x1dc>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b6b      	ldr	r3, [pc, #428]	; (80036e8 <Constant_Voltage+0x1e0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f7fd fb32 	bl	8000ba8 <__aeabi_fsub>
 8003544:	4603      	mov	r3, r0
 8003546:	461a      	mov	r2, r3
 8003548:	4b68      	ldr	r3, [pc, #416]	; (80036ec <Constant_Voltage+0x1e4>)
 800354a:	601a      	str	r2, [r3, #0]
	esblm=e;
 800354c:	4b65      	ldr	r3, [pc, #404]	; (80036e4 <Constant_Voltage+0x1dc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <Constant_Voltage+0x1e0>)
 8003552:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-75)
 8003554:	4b63      	ldr	r3, [pc, #396]	; (80036e4 <Constant_Voltage+0x1dc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4965      	ldr	r1, [pc, #404]	; (80036f0 <Constant_Voltage+0x1e8>)
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fdd6 	bl	800110c <__aeabi_fcmple>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01b      	beq.n	800359e <Constant_Voltage+0x96>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 8003566:	4b63      	ldr	r3, [pc, #396]	; (80036f4 <Constant_Voltage+0x1ec>)
 8003568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	4b62      	ldr	r3, [pc, #392]	; (80036f8 <Constant_Voltage+0x1f0>)
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	4b60      	ldr	r3, [pc, #384]	; (80036f8 <Constant_Voltage+0x1f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a60      	ldr	r2, [pc, #384]	; (80036fc <Constant_Voltage+0x1f4>)
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b5f      	ldr	r3, [pc, #380]	; (80036fc <Constant_Voltage+0x1f4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a5f      	ldr	r2, [pc, #380]	; (8003700 <Constant_Voltage+0x1f8>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <Constant_Voltage+0x1f8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a5e      	ldr	r2, [pc, #376]	; (8003704 <Constant_Voltage+0x1fc>)
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <Constant_Voltage+0x1fc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a5d      	ldr	r2, [pc, #372]	; (8003708 <Constant_Voltage+0x200>)
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <Constant_Voltage+0x200>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a5c      	ldr	r2, [pc, #368]	; (800370c <Constant_Voltage+0x204>)
 800359c:	6013      	str	r3, [r2, #0]

	if(e>=-75&&e<=-50)
 800359e:	4b51      	ldr	r3, [pc, #324]	; (80036e4 <Constant_Voltage+0x1dc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4953      	ldr	r1, [pc, #332]	; (80036f0 <Constant_Voltage+0x1e8>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fdbb 	bl	8001120 <__aeabi_fcmpge>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d043      	beq.n	8003638 <Constant_Voltage+0x130>
 80035b0:	4b4c      	ldr	r3, [pc, #304]	; (80036e4 <Constant_Voltage+0x1dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4956      	ldr	r1, [pc, #344]	; (8003710 <Constant_Voltage+0x208>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fda8 	bl	800110c <__aeabi_fcmple>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d03a      	beq.n	8003638 <Constant_Voltage+0x130>
	{ eNB=(-(e+75)/25)+1;
 80035c2:	4b48      	ldr	r3, [pc, #288]	; (80036e4 <Constant_Voltage+0x1dc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4953      	ldr	r1, [pc, #332]	; (8003714 <Constant_Voltage+0x20c>)
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7fd faef 	bl	8000bac <__addsf3>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035d4:	4950      	ldr	r1, [pc, #320]	; (8003718 <Constant_Voltage+0x210>)
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fd fca4 	bl	8000f24 <__aeabi_fdiv>
 80035dc:	4603      	mov	r3, r0
 80035de:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fae2 	bl	8000bac <__addsf3>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b41      	ldr	r3, [pc, #260]	; (80036f4 <Constant_Voltage+0x1ec>)
 80035ee:	601a      	str	r2, [r3, #0]
	   eNM=(e+75)/25;
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <Constant_Voltage+0x1dc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4947      	ldr	r1, [pc, #284]	; (8003714 <Constant_Voltage+0x20c>)
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fd fad8 	bl	8000bac <__addsf3>
 80035fc:	4603      	mov	r3, r0
 80035fe:	4946      	ldr	r1, [pc, #280]	; (8003718 <Constant_Voltage+0x210>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fc8f 	bl	8000f24 <__aeabi_fdiv>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	4b40      	ldr	r3, [pc, #256]	; (800370c <Constant_Voltage+0x204>)
 800360c:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <Constant_Voltage+0x1f0>)
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	4b38      	ldr	r3, [pc, #224]	; (80036f8 <Constant_Voltage+0x1f0>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a38      	ldr	r2, [pc, #224]	; (80036fc <Constant_Voltage+0x1f4>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <Constant_Voltage+0x1f4>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a37      	ldr	r2, [pc, #220]	; (8003700 <Constant_Voltage+0x1f8>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <Constant_Voltage+0x1f8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a36      	ldr	r2, [pc, #216]	; (8003704 <Constant_Voltage+0x1fc>)
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b35      	ldr	r3, [pc, #212]	; (8003704 <Constant_Voltage+0x1fc>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a35      	ldr	r2, [pc, #212]	; (8003708 <Constant_Voltage+0x200>)
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e1de      	b.n	80039f6 <Constant_Voltage+0x4ee>
	}

	else if(e>=-50&&e<=-25)
 8003638:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <Constant_Voltage+0x1dc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4934      	ldr	r1, [pc, #208]	; (8003710 <Constant_Voltage+0x208>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fd6e 	bl	8001120 <__aeabi_fcmpge>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d06c      	beq.n	8003724 <Constant_Voltage+0x21c>
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <Constant_Voltage+0x1dc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4933      	ldr	r1, [pc, #204]	; (800371c <Constant_Voltage+0x214>)
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fd5b 	bl	800110c <__aeabi_fcmple>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d063      	beq.n	8003724 <Constant_Voltage+0x21c>
	{ eNM=(-(e+50)/25)+1;
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <Constant_Voltage+0x1dc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	492f      	ldr	r1, [pc, #188]	; (8003720 <Constant_Voltage+0x218>)
 8003662:	4618      	mov	r0, r3
 8003664:	f7fd faa2 	bl	8000bac <__addsf3>
 8003668:	4603      	mov	r3, r0
 800366a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800366e:	492a      	ldr	r1, [pc, #168]	; (8003718 <Constant_Voltage+0x210>)
 8003670:	4618      	mov	r0, r3
 8003672:	f7fd fc57 	bl	8000f24 <__aeabi_fdiv>
 8003676:	4603      	mov	r3, r0
 8003678:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800367c:	4618      	mov	r0, r3
 800367e:	f7fd fa95 	bl	8000bac <__addsf3>
 8003682:	4603      	mov	r3, r0
 8003684:	461a      	mov	r2, r3
 8003686:	4b21      	ldr	r3, [pc, #132]	; (800370c <Constant_Voltage+0x204>)
 8003688:	601a      	str	r2, [r3, #0]
	   eNS=(e+50)/25;
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <Constant_Voltage+0x1dc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4924      	ldr	r1, [pc, #144]	; (8003720 <Constant_Voltage+0x218>)
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fa8b 	bl	8000bac <__addsf3>
 8003696:	4603      	mov	r3, r0
 8003698:	491f      	ldr	r1, [pc, #124]	; (8003718 <Constant_Voltage+0x210>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fc42 	bl	8000f24 <__aeabi_fdiv>
 80036a0:	4603      	mov	r3, r0
 80036a2:	461a      	mov	r2, r3
 80036a4:	4b18      	ldr	r3, [pc, #96]	; (8003708 <Constant_Voltage+0x200>)
 80036a6:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 80036a8:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <Constant_Voltage+0x1f0>)
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <Constant_Voltage+0x1f0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a11      	ldr	r2, [pc, #68]	; (80036fc <Constant_Voltage+0x1f4>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	4b10      	ldr	r3, [pc, #64]	; (80036fc <Constant_Voltage+0x1f4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a10      	ldr	r2, [pc, #64]	; (8003700 <Constant_Voltage+0x1f8>)
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <Constant_Voltage+0x1f8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0f      	ldr	r2, [pc, #60]	; (8003704 <Constant_Voltage+0x1fc>)
 80036c6:	6013      	str	r3, [r2, #0]
 80036c8:	4b0e      	ldr	r3, [pc, #56]	; (8003704 <Constant_Voltage+0x1fc>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <Constant_Voltage+0x1ec>)
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	e191      	b.n	80039f6 <Constant_Voltage+0x4ee>
 80036d2:	bf00      	nop
 80036d4:	20000044 	.word	0x20000044
 80036d8:	20000a88 	.word	0x20000a88
 80036dc:	20000a80 	.word	0x20000a80
 80036e0:	20000aa8 	.word	0x20000aa8
 80036e4:	20000ac0 	.word	0x20000ac0
 80036e8:	20000ac4 	.word	0x20000ac4
 80036ec:	20000a5c 	.word	0x20000a5c
 80036f0:	c2960000 	.word	0xc2960000
 80036f4:	20000ac8 	.word	0x20000ac8
 80036f8:	200008f8 	.word	0x200008f8
 80036fc:	20000a68 	.word	0x20000a68
 8003700:	200009f0 	.word	0x200009f0
 8003704:	20000b10 	.word	0x20000b10
 8003708:	2000076c 	.word	0x2000076c
 800370c:	20000afc 	.word	0x20000afc
 8003710:	c2480000 	.word	0xc2480000
 8003714:	42960000 	.word	0x42960000
 8003718:	41c80000 	.word	0x41c80000
 800371c:	c1c80000 	.word	0xc1c80000
 8003720:	42480000 	.word	0x42480000
	}

	else if(e>=-25&&e<=0)
 8003724:	4b95      	ldr	r3, [pc, #596]	; (800397c <Constant_Voltage+0x474>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4995      	ldr	r1, [pc, #596]	; (8003980 <Constant_Voltage+0x478>)
 800372a:	4618      	mov	r0, r3
 800372c:	f7fd fcf8 	bl	8001120 <__aeabi_fcmpge>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d045      	beq.n	80037c2 <Constant_Voltage+0x2ba>
 8003736:	4b91      	ldr	r3, [pc, #580]	; (800397c <Constant_Voltage+0x474>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f04f 0100 	mov.w	r1, #0
 800373e:	4618      	mov	r0, r3
 8003740:	f7fd fce4 	bl	800110c <__aeabi_fcmple>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d03b      	beq.n	80037c2 <Constant_Voltage+0x2ba>
	{ eNS=(-(e+25)/25)+1;
 800374a:	4b8c      	ldr	r3, [pc, #560]	; (800397c <Constant_Voltage+0x474>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	498d      	ldr	r1, [pc, #564]	; (8003984 <Constant_Voltage+0x47c>)
 8003750:	4618      	mov	r0, r3
 8003752:	f7fd fa2b 	bl	8000bac <__addsf3>
 8003756:	4603      	mov	r3, r0
 8003758:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800375c:	4989      	ldr	r1, [pc, #548]	; (8003984 <Constant_Voltage+0x47c>)
 800375e:	4618      	mov	r0, r3
 8003760:	f7fd fbe0 	bl	8000f24 <__aeabi_fdiv>
 8003764:	4603      	mov	r3, r0
 8003766:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800376a:	4618      	mov	r0, r3
 800376c:	f7fd fa1e 	bl	8000bac <__addsf3>
 8003770:	4603      	mov	r3, r0
 8003772:	461a      	mov	r2, r3
 8003774:	4b84      	ldr	r3, [pc, #528]	; (8003988 <Constant_Voltage+0x480>)
 8003776:	601a      	str	r2, [r3, #0]
	   eZ=(e/25)+1;
 8003778:	4b80      	ldr	r3, [pc, #512]	; (800397c <Constant_Voltage+0x474>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4981      	ldr	r1, [pc, #516]	; (8003984 <Constant_Voltage+0x47c>)
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fbd0 	bl	8000f24 <__aeabi_fdiv>
 8003784:	4603      	mov	r3, r0
 8003786:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fa0e 	bl	8000bac <__addsf3>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	4b7d      	ldr	r3, [pc, #500]	; (800398c <Constant_Voltage+0x484>)
 8003796:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 8003798:	4b7d      	ldr	r3, [pc, #500]	; (8003990 <Constant_Voltage+0x488>)
 800379a:	f04f 0200 	mov.w	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	4b7b      	ldr	r3, [pc, #492]	; (8003990 <Constant_Voltage+0x488>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a7b      	ldr	r2, [pc, #492]	; (8003994 <Constant_Voltage+0x48c>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b7a      	ldr	r3, [pc, #488]	; (8003994 <Constant_Voltage+0x48c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <Constant_Voltage+0x490>)
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b79      	ldr	r3, [pc, #484]	; (8003998 <Constant_Voltage+0x490>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a79      	ldr	r2, [pc, #484]	; (800399c <Constant_Voltage+0x494>)
 80037b6:	6013      	str	r3, [r2, #0]
 80037b8:	4b78      	ldr	r3, [pc, #480]	; (800399c <Constant_Voltage+0x494>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a78      	ldr	r2, [pc, #480]	; (80039a0 <Constant_Voltage+0x498>)
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	e119      	b.n	80039f6 <Constant_Voltage+0x4ee>
	}

	else if(e>=0&&e<=25)
 80037c2:	4b6e      	ldr	r3, [pc, #440]	; (800397c <Constant_Voltage+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f04f 0100 	mov.w	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fca8 	bl	8001120 <__aeabi_fcmpge>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d037      	beq.n	8003846 <Constant_Voltage+0x33e>
 80037d6:	4b69      	ldr	r3, [pc, #420]	; (800397c <Constant_Voltage+0x474>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	496a      	ldr	r1, [pc, #424]	; (8003984 <Constant_Voltage+0x47c>)
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fc95 	bl	800110c <__aeabi_fcmple>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d02e      	beq.n	8003846 <Constant_Voltage+0x33e>
	{ eZ=-(e/25)+1;
 80037e8:	4b64      	ldr	r3, [pc, #400]	; (800397c <Constant_Voltage+0x474>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4965      	ldr	r1, [pc, #404]	; (8003984 <Constant_Voltage+0x47c>)
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fd fb98 	bl	8000f24 <__aeabi_fdiv>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4619      	mov	r1, r3
 80037f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80037fc:	f7fd f9d4 	bl	8000ba8 <__aeabi_fsub>
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	4b61      	ldr	r3, [pc, #388]	; (800398c <Constant_Voltage+0x484>)
 8003806:	601a      	str	r2, [r3, #0]
	   ePS=e/25;
 8003808:	4b5c      	ldr	r3, [pc, #368]	; (800397c <Constant_Voltage+0x474>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	495d      	ldr	r1, [pc, #372]	; (8003984 <Constant_Voltage+0x47c>)
 800380e:	4618      	mov	r0, r3
 8003810:	f7fd fb88 	bl	8000f24 <__aeabi_fdiv>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b5f      	ldr	r3, [pc, #380]	; (8003998 <Constant_Voltage+0x490>)
 800381a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 800381c:	4b5c      	ldr	r3, [pc, #368]	; (8003990 <Constant_Voltage+0x488>)
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	4b5a      	ldr	r3, [pc, #360]	; (8003990 <Constant_Voltage+0x488>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5a      	ldr	r2, [pc, #360]	; (8003994 <Constant_Voltage+0x48c>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b59      	ldr	r3, [pc, #356]	; (8003994 <Constant_Voltage+0x48c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a55      	ldr	r2, [pc, #340]	; (8003988 <Constant_Voltage+0x480>)
 8003832:	6013      	str	r3, [r2, #0]
 8003834:	4b54      	ldr	r3, [pc, #336]	; (8003988 <Constant_Voltage+0x480>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a58      	ldr	r2, [pc, #352]	; (800399c <Constant_Voltage+0x494>)
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <Constant_Voltage+0x494>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <Constant_Voltage+0x498>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	e0d7      	b.n	80039f6 <Constant_Voltage+0x4ee>
	}

	else if(e>=25&&e<=50)
 8003846:	4b4d      	ldr	r3, [pc, #308]	; (800397c <Constant_Voltage+0x474>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	494e      	ldr	r1, [pc, #312]	; (8003984 <Constant_Voltage+0x47c>)
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd fc67 	bl	8001120 <__aeabi_fcmpge>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d043      	beq.n	80038e0 <Constant_Voltage+0x3d8>
 8003858:	4b48      	ldr	r3, [pc, #288]	; (800397c <Constant_Voltage+0x474>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4951      	ldr	r1, [pc, #324]	; (80039a4 <Constant_Voltage+0x49c>)
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fc54 	bl	800110c <__aeabi_fcmple>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d03a      	beq.n	80038e0 <Constant_Voltage+0x3d8>
	{ ePS=(-(e-25)/25)+1;
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <Constant_Voltage+0x474>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4945      	ldr	r1, [pc, #276]	; (8003984 <Constant_Voltage+0x47c>)
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd f999 	bl	8000ba8 <__aeabi_fsub>
 8003876:	4603      	mov	r3, r0
 8003878:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800387c:	4941      	ldr	r1, [pc, #260]	; (8003984 <Constant_Voltage+0x47c>)
 800387e:	4618      	mov	r0, r3
 8003880:	f7fd fb50 	bl	8000f24 <__aeabi_fdiv>
 8003884:	4603      	mov	r3, r0
 8003886:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd f98e 	bl	8000bac <__addsf3>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	4b40      	ldr	r3, [pc, #256]	; (8003998 <Constant_Voltage+0x490>)
 8003896:	601a      	str	r2, [r3, #0]
	   ePM=(e-25)/25;
 8003898:	4b38      	ldr	r3, [pc, #224]	; (800397c <Constant_Voltage+0x474>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4939      	ldr	r1, [pc, #228]	; (8003984 <Constant_Voltage+0x47c>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd f982 	bl	8000ba8 <__aeabi_fsub>
 80038a4:	4603      	mov	r3, r0
 80038a6:	4937      	ldr	r1, [pc, #220]	; (8003984 <Constant_Voltage+0x47c>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fb3b 	bl	8000f24 <__aeabi_fdiv>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b38      	ldr	r3, [pc, #224]	; (8003994 <Constant_Voltage+0x48c>)
 80038b4:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 80038b6:	4b36      	ldr	r3, [pc, #216]	; (8003990 <Constant_Voltage+0x488>)
 80038b8:	f04f 0200 	mov.w	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	4b34      	ldr	r3, [pc, #208]	; (8003990 <Constant_Voltage+0x488>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a32      	ldr	r2, [pc, #200]	; (800398c <Constant_Voltage+0x484>)
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4b31      	ldr	r3, [pc, #196]	; (800398c <Constant_Voltage+0x484>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <Constant_Voltage+0x480>)
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <Constant_Voltage+0x480>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a32      	ldr	r2, [pc, #200]	; (800399c <Constant_Voltage+0x494>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <Constant_Voltage+0x494>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <Constant_Voltage+0x498>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e08a      	b.n	80039f6 <Constant_Voltage+0x4ee>
	}

	else if(e>=50&&e<=75)
 80038e0:	4b26      	ldr	r3, [pc, #152]	; (800397c <Constant_Voltage+0x474>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	492f      	ldr	r1, [pc, #188]	; (80039a4 <Constant_Voltage+0x49c>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd fc1a 	bl	8001120 <__aeabi_fcmpge>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d05c      	beq.n	80039ac <Constant_Voltage+0x4a4>
 80038f2:	4b22      	ldr	r3, [pc, #136]	; (800397c <Constant_Voltage+0x474>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	492c      	ldr	r1, [pc, #176]	; (80039a8 <Constant_Voltage+0x4a0>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7fd fc07 	bl	800110c <__aeabi_fcmple>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d053      	beq.n	80039ac <Constant_Voltage+0x4a4>
	{ ePM=(-(e-50)/25)+1;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <Constant_Voltage+0x474>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4926      	ldr	r1, [pc, #152]	; (80039a4 <Constant_Voltage+0x49c>)
 800390a:	4618      	mov	r0, r3
 800390c:	f7fd f94c 	bl	8000ba8 <__aeabi_fsub>
 8003910:	4603      	mov	r3, r0
 8003912:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003916:	491b      	ldr	r1, [pc, #108]	; (8003984 <Constant_Voltage+0x47c>)
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fb03 	bl	8000f24 <__aeabi_fdiv>
 800391e:	4603      	mov	r3, r0
 8003920:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003924:	4618      	mov	r0, r3
 8003926:	f7fd f941 	bl	8000bac <__addsf3>
 800392a:	4603      	mov	r3, r0
 800392c:	461a      	mov	r2, r3
 800392e:	4b19      	ldr	r3, [pc, #100]	; (8003994 <Constant_Voltage+0x48c>)
 8003930:	601a      	str	r2, [r3, #0]
	   ePB=(e-50)/25;
 8003932:	4b12      	ldr	r3, [pc, #72]	; (800397c <Constant_Voltage+0x474>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	491b      	ldr	r1, [pc, #108]	; (80039a4 <Constant_Voltage+0x49c>)
 8003938:	4618      	mov	r0, r3
 800393a:	f7fd f935 	bl	8000ba8 <__aeabi_fsub>
 800393e:	4603      	mov	r3, r0
 8003940:	4910      	ldr	r1, [pc, #64]	; (8003984 <Constant_Voltage+0x47c>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd faee 	bl	8000f24 <__aeabi_fdiv>
 8003948:	4603      	mov	r3, r0
 800394a:	461a      	mov	r2, r3
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <Constant_Voltage+0x488>)
 800394e:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <Constant_Voltage+0x490>)
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <Constant_Voltage+0x490>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a0b      	ldr	r2, [pc, #44]	; (800398c <Constant_Voltage+0x484>)
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4b0a      	ldr	r3, [pc, #40]	; (800398c <Constant_Voltage+0x484>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a08      	ldr	r2, [pc, #32]	; (8003988 <Constant_Voltage+0x480>)
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b07      	ldr	r3, [pc, #28]	; (8003988 <Constant_Voltage+0x480>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a0b      	ldr	r2, [pc, #44]	; (800399c <Constant_Voltage+0x494>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	4b0a      	ldr	r3, [pc, #40]	; (800399c <Constant_Voltage+0x494>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0a      	ldr	r2, [pc, #40]	; (80039a0 <Constant_Voltage+0x498>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	e03d      	b.n	80039f6 <Constant_Voltage+0x4ee>
 800397a:	bf00      	nop
 800397c:	20000ac0 	.word	0x20000ac0
 8003980:	c1c80000 	.word	0xc1c80000
 8003984:	41c80000 	.word	0x41c80000
 8003988:	2000076c 	.word	0x2000076c
 800398c:	20000b10 	.word	0x20000b10
 8003990:	200008f8 	.word	0x200008f8
 8003994:	20000a68 	.word	0x20000a68
 8003998:	200009f0 	.word	0x200009f0
 800399c:	20000afc 	.word	0x20000afc
 80039a0:	20000ac8 	.word	0x20000ac8
 80039a4:	42480000 	.word	0x42480000
 80039a8:	42960000 	.word	0x42960000
	}

	else if(e>=75)
 80039ac:	4b71      	ldr	r3, [pc, #452]	; (8003b74 <Constant_Voltage+0x66c>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4971      	ldr	r1, [pc, #452]	; (8003b78 <Constant_Voltage+0x670>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fd fbb4 	bl	8001120 <__aeabi_fcmpge>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01b      	beq.n	80039f6 <Constant_Voltage+0x4ee>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 80039be:	4b6f      	ldr	r3, [pc, #444]	; (8003b7c <Constant_Voltage+0x674>)
 80039c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	4b6e      	ldr	r3, [pc, #440]	; (8003b80 <Constant_Voltage+0x678>)
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	4b6c      	ldr	r3, [pc, #432]	; (8003b80 <Constant_Voltage+0x678>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6c      	ldr	r2, [pc, #432]	; (8003b84 <Constant_Voltage+0x67c>)
 80039d4:	6013      	str	r3, [r2, #0]
 80039d6:	4b6b      	ldr	r3, [pc, #428]	; (8003b84 <Constant_Voltage+0x67c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a6b      	ldr	r2, [pc, #428]	; (8003b88 <Constant_Voltage+0x680>)
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <Constant_Voltage+0x680>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6a      	ldr	r2, [pc, #424]	; (8003b8c <Constant_Voltage+0x684>)
 80039e4:	6013      	str	r3, [r2, #0]
 80039e6:	4b69      	ldr	r3, [pc, #420]	; (8003b8c <Constant_Voltage+0x684>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a69      	ldr	r2, [pc, #420]	; (8003b90 <Constant_Voltage+0x688>)
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	4b68      	ldr	r3, [pc, #416]	; (8003b90 <Constant_Voltage+0x688>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a68      	ldr	r2, [pc, #416]	; (8003b94 <Constant_Voltage+0x68c>)
 80039f4:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-30)
 80039f6:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <Constant_Voltage+0x690>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4968      	ldr	r1, [pc, #416]	; (8003b9c <Constant_Voltage+0x694>)
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fb85 	bl	800110c <__aeabi_fcmple>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01b      	beq.n	8003a40 <Constant_Voltage+0x538>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8003a08:	4b65      	ldr	r3, [pc, #404]	; (8003ba0 <Constant_Voltage+0x698>)
 8003a0a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	4b64      	ldr	r3, [pc, #400]	; (8003ba4 <Constant_Voltage+0x69c>)
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <Constant_Voltage+0x69c>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a62      	ldr	r2, [pc, #392]	; (8003ba8 <Constant_Voltage+0x6a0>)
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b61      	ldr	r3, [pc, #388]	; (8003ba8 <Constant_Voltage+0x6a0>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a61      	ldr	r2, [pc, #388]	; (8003bac <Constant_Voltage+0x6a4>)
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	4b60      	ldr	r3, [pc, #384]	; (8003bac <Constant_Voltage+0x6a4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <Constant_Voltage+0x6a8>)
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <Constant_Voltage+0x6a8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5f      	ldr	r2, [pc, #380]	; (8003bb4 <Constant_Voltage+0x6ac>)
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b5e      	ldr	r3, [pc, #376]	; (8003bb4 <Constant_Voltage+0x6ac>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a5e      	ldr	r2, [pc, #376]	; (8003bb8 <Constant_Voltage+0x6b0>)
 8003a3e:	6013      	str	r3, [r2, #0]

	if(d>=-30&&d<=-20)
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <Constant_Voltage+0x690>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4955      	ldr	r1, [pc, #340]	; (8003b9c <Constant_Voltage+0x694>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fb6a 	bl	8001120 <__aeabi_fcmpge>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d043      	beq.n	8003ada <Constant_Voltage+0x5d2>
 8003a52:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <Constant_Voltage+0x690>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4959      	ldr	r1, [pc, #356]	; (8003bbc <Constant_Voltage+0x6b4>)
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd fb57 	bl	800110c <__aeabi_fcmple>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d03a      	beq.n	8003ada <Constant_Voltage+0x5d2>
	{ dNB=(-(d+30)/10)+1;
 8003a64:	4b4c      	ldr	r3, [pc, #304]	; (8003b98 <Constant_Voltage+0x690>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4955      	ldr	r1, [pc, #340]	; (8003bc0 <Constant_Voltage+0x6b8>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd f89e 	bl	8000bac <__addsf3>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a76:	4953      	ldr	r1, [pc, #332]	; (8003bc4 <Constant_Voltage+0x6bc>)
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fd fa53 	bl	8000f24 <__aeabi_fdiv>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fd f891 	bl	8000bac <__addsf3>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <Constant_Voltage+0x698>)
 8003a90:	601a      	str	r2, [r3, #0]
	   dNM=(d+30)/10;
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <Constant_Voltage+0x690>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	494a      	ldr	r1, [pc, #296]	; (8003bc0 <Constant_Voltage+0x6b8>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd f887 	bl	8000bac <__addsf3>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4948      	ldr	r1, [pc, #288]	; (8003bc4 <Constant_Voltage+0x6bc>)
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fa3e 	bl	8000f24 <__aeabi_fdiv>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	461a      	mov	r2, r3
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <Constant_Voltage+0x6b0>)
 8003aae:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8003ab0:	4b3c      	ldr	r3, [pc, #240]	; (8003ba4 <Constant_Voltage+0x69c>)
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	4b3a      	ldr	r3, [pc, #232]	; (8003ba4 <Constant_Voltage+0x69c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a3a      	ldr	r2, [pc, #232]	; (8003ba8 <Constant_Voltage+0x6a0>)
 8003abe:	6013      	str	r3, [r2, #0]
 8003ac0:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <Constant_Voltage+0x6a0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a39      	ldr	r2, [pc, #228]	; (8003bac <Constant_Voltage+0x6a4>)
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b38      	ldr	r3, [pc, #224]	; (8003bac <Constant_Voltage+0x6a4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a38      	ldr	r2, [pc, #224]	; (8003bb0 <Constant_Voltage+0x6a8>)
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b37      	ldr	r3, [pc, #220]	; (8003bb0 <Constant_Voltage+0x6a8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a37      	ldr	r2, [pc, #220]	; (8003bb4 <Constant_Voltage+0x6ac>)
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e1e1      	b.n	8003e9e <Constant_Voltage+0x996>
	}

	else if(d>=-20&&d<=-10)
 8003ada:	4b2f      	ldr	r3, [pc, #188]	; (8003b98 <Constant_Voltage+0x690>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4937      	ldr	r1, [pc, #220]	; (8003bbc <Constant_Voltage+0x6b4>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd fb1d 	bl	8001120 <__aeabi_fcmpge>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d071      	beq.n	8003bd0 <Constant_Voltage+0x6c8>
 8003aec:	4b2a      	ldr	r3, [pc, #168]	; (8003b98 <Constant_Voltage+0x690>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4935      	ldr	r1, [pc, #212]	; (8003bc8 <Constant_Voltage+0x6c0>)
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fb0a 	bl	800110c <__aeabi_fcmple>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d068      	beq.n	8003bd0 <Constant_Voltage+0x6c8>
	{ dNM=(-(d+20)/10)+1;
 8003afe:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <Constant_Voltage+0x690>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4932      	ldr	r1, [pc, #200]	; (8003bcc <Constant_Voltage+0x6c4>)
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7fd f851 	bl	8000bac <__addsf3>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b10:	492c      	ldr	r1, [pc, #176]	; (8003bc4 <Constant_Voltage+0x6bc>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fa06 	bl	8000f24 <__aeabi_fdiv>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd f844 	bl	8000bac <__addsf3>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <Constant_Voltage+0x6b0>)
 8003b2a:	601a      	str	r2, [r3, #0]
	   dNS=(d+20)/10;
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <Constant_Voltage+0x690>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4926      	ldr	r1, [pc, #152]	; (8003bcc <Constant_Voltage+0x6c4>)
 8003b32:	4618      	mov	r0, r3
 8003b34:	f7fd f83a 	bl	8000bac <__addsf3>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4922      	ldr	r1, [pc, #136]	; (8003bc4 <Constant_Voltage+0x6bc>)
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd f9f1 	bl	8000f24 <__aeabi_fdiv>
 8003b42:	4603      	mov	r3, r0
 8003b44:	461a      	mov	r2, r3
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <Constant_Voltage+0x6ac>)
 8003b48:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8003b4a:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <Constant_Voltage+0x69c>)
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <Constant_Voltage+0x69c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <Constant_Voltage+0x6a0>)
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <Constant_Voltage+0x6a0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <Constant_Voltage+0x6a4>)
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b12      	ldr	r3, [pc, #72]	; (8003bac <Constant_Voltage+0x6a4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <Constant_Voltage+0x6a8>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <Constant_Voltage+0x6a8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <Constant_Voltage+0x698>)
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e194      	b.n	8003e9e <Constant_Voltage+0x996>
 8003b74:	20000ac0 	.word	0x20000ac0
 8003b78:	42960000 	.word	0x42960000
 8003b7c:	200008f8 	.word	0x200008f8
 8003b80:	20000a68 	.word	0x20000a68
 8003b84:	200009f0 	.word	0x200009f0
 8003b88:	20000b10 	.word	0x20000b10
 8003b8c:	2000076c 	.word	0x2000076c
 8003b90:	20000afc 	.word	0x20000afc
 8003b94:	20000ac8 	.word	0x20000ac8
 8003b98:	20000a5c 	.word	0x20000a5c
 8003b9c:	c1f00000 	.word	0xc1f00000
 8003ba0:	20000790 	.word	0x20000790
 8003ba4:	20000a70 	.word	0x20000a70
 8003ba8:	20000798 	.word	0x20000798
 8003bac:	20000ad8 	.word	0x20000ad8
 8003bb0:	20000af0 	.word	0x20000af0
 8003bb4:	200008c4 	.word	0x200008c4
 8003bb8:	200009ec 	.word	0x200009ec
 8003bbc:	c1a00000 	.word	0xc1a00000
 8003bc0:	41f00000 	.word	0x41f00000
 8003bc4:	41200000 	.word	0x41200000
 8003bc8:	c1200000 	.word	0xc1200000
 8003bcc:	41a00000 	.word	0x41a00000
	}

	else if(d>=-10&&d<=0)
 8003bd0:	4b94      	ldr	r3, [pc, #592]	; (8003e24 <Constant_Voltage+0x91c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4994      	ldr	r1, [pc, #592]	; (8003e28 <Constant_Voltage+0x920>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fd faa2 	bl	8001120 <__aeabi_fcmpge>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d044      	beq.n	8003c6c <Constant_Voltage+0x764>
 8003be2:	4b90      	ldr	r3, [pc, #576]	; (8003e24 <Constant_Voltage+0x91c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f04f 0100 	mov.w	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7fd fa8e 	bl	800110c <__aeabi_fcmple>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d03a      	beq.n	8003c6c <Constant_Voltage+0x764>
	{ dNS=(-(d+10)/10)+1;
 8003bf6:	4b8b      	ldr	r3, [pc, #556]	; (8003e24 <Constant_Voltage+0x91c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	498c      	ldr	r1, [pc, #560]	; (8003e2c <Constant_Voltage+0x924>)
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc ffd5 	bl	8000bac <__addsf3>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c08:	4988      	ldr	r1, [pc, #544]	; (8003e2c <Constant_Voltage+0x924>)
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd f98a 	bl	8000f24 <__aeabi_fdiv>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc ffc8 	bl	8000bac <__addsf3>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	461a      	mov	r2, r3
 8003c20:	4b83      	ldr	r3, [pc, #524]	; (8003e30 <Constant_Voltage+0x928>)
 8003c22:	601a      	str	r2, [r3, #0]
	   dZ=(d+10)/10;
 8003c24:	4b7f      	ldr	r3, [pc, #508]	; (8003e24 <Constant_Voltage+0x91c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4980      	ldr	r1, [pc, #512]	; (8003e2c <Constant_Voltage+0x924>)
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc ffbe 	bl	8000bac <__addsf3>
 8003c30:	4603      	mov	r3, r0
 8003c32:	497e      	ldr	r1, [pc, #504]	; (8003e2c <Constant_Voltage+0x924>)
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fd f975 	bl	8000f24 <__aeabi_fdiv>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4b7d      	ldr	r3, [pc, #500]	; (8003e34 <Constant_Voltage+0x92c>)
 8003c40:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8003c42:	4b7d      	ldr	r3, [pc, #500]	; (8003e38 <Constant_Voltage+0x930>)
 8003c44:	f04f 0200 	mov.w	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	4b7b      	ldr	r3, [pc, #492]	; (8003e38 <Constant_Voltage+0x930>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a7b      	ldr	r2, [pc, #492]	; (8003e3c <Constant_Voltage+0x934>)
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b7a      	ldr	r3, [pc, #488]	; (8003e3c <Constant_Voltage+0x934>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a7a      	ldr	r2, [pc, #488]	; (8003e40 <Constant_Voltage+0x938>)
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <Constant_Voltage+0x938>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a79      	ldr	r2, [pc, #484]	; (8003e44 <Constant_Voltage+0x93c>)
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b78      	ldr	r3, [pc, #480]	; (8003e44 <Constant_Voltage+0x93c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a78      	ldr	r2, [pc, #480]	; (8003e48 <Constant_Voltage+0x940>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e118      	b.n	8003e9e <Constant_Voltage+0x996>
	}

	else if(d>=0&&d<=10)
 8003c6c:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <Constant_Voltage+0x91c>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fa53 	bl	8001120 <__aeabi_fcmpge>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d037      	beq.n	8003cf0 <Constant_Voltage+0x7e8>
 8003c80:	4b68      	ldr	r3, [pc, #416]	; (8003e24 <Constant_Voltage+0x91c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4969      	ldr	r1, [pc, #420]	; (8003e2c <Constant_Voltage+0x924>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fd fa40 	bl	800110c <__aeabi_fcmple>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d02e      	beq.n	8003cf0 <Constant_Voltage+0x7e8>
	{ dZ=-(d/10)+1;
 8003c92:	4b64      	ldr	r3, [pc, #400]	; (8003e24 <Constant_Voltage+0x91c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4965      	ldr	r1, [pc, #404]	; (8003e2c <Constant_Voltage+0x924>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fd f943 	bl	8000f24 <__aeabi_fdiv>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003ca6:	f7fc ff7f 	bl	8000ba8 <__aeabi_fsub>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b61      	ldr	r3, [pc, #388]	; (8003e34 <Constant_Voltage+0x92c>)
 8003cb0:	601a      	str	r2, [r3, #0]
	   dPS=d/10;
 8003cb2:	4b5c      	ldr	r3, [pc, #368]	; (8003e24 <Constant_Voltage+0x91c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	495d      	ldr	r1, [pc, #372]	; (8003e2c <Constant_Voltage+0x924>)
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd f933 	bl	8000f24 <__aeabi_fdiv>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b5f      	ldr	r3, [pc, #380]	; (8003e40 <Constant_Voltage+0x938>)
 8003cc4:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	; (8003e38 <Constant_Voltage+0x930>)
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	4b5a      	ldr	r3, [pc, #360]	; (8003e38 <Constant_Voltage+0x930>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a5a      	ldr	r2, [pc, #360]	; (8003e3c <Constant_Voltage+0x934>)
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <Constant_Voltage+0x934>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a55      	ldr	r2, [pc, #340]	; (8003e30 <Constant_Voltage+0x928>)
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <Constant_Voltage+0x928>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <Constant_Voltage+0x93c>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b57      	ldr	r3, [pc, #348]	; (8003e44 <Constant_Voltage+0x93c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a57      	ldr	r2, [pc, #348]	; (8003e48 <Constant_Voltage+0x940>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e0d6      	b.n	8003e9e <Constant_Voltage+0x996>
	}

	else if(d>=10&&d<=20)
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	; (8003e24 <Constant_Voltage+0x91c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	494d      	ldr	r1, [pc, #308]	; (8003e2c <Constant_Voltage+0x924>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fd fa12 	bl	8001120 <__aeabi_fcmpge>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d043      	beq.n	8003d8a <Constant_Voltage+0x882>
 8003d02:	4b48      	ldr	r3, [pc, #288]	; (8003e24 <Constant_Voltage+0x91c>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4951      	ldr	r1, [pc, #324]	; (8003e4c <Constant_Voltage+0x944>)
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd f9ff 	bl	800110c <__aeabi_fcmple>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03a      	beq.n	8003d8a <Constant_Voltage+0x882>
	{ dPS=(-(d-10)/10)+1;
 8003d14:	4b43      	ldr	r3, [pc, #268]	; (8003e24 <Constant_Voltage+0x91c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4944      	ldr	r1, [pc, #272]	; (8003e2c <Constant_Voltage+0x924>)
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fc ff44 	bl	8000ba8 <__aeabi_fsub>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d26:	4941      	ldr	r1, [pc, #260]	; (8003e2c <Constant_Voltage+0x924>)
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fd f8fb 	bl	8000f24 <__aeabi_fdiv>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc ff39 	bl	8000bac <__addsf3>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b40      	ldr	r3, [pc, #256]	; (8003e40 <Constant_Voltage+0x938>)
 8003d40:	601a      	str	r2, [r3, #0]
	   dPM=(d-10)/10;
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <Constant_Voltage+0x91c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4939      	ldr	r1, [pc, #228]	; (8003e2c <Constant_Voltage+0x924>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7fc ff2d 	bl	8000ba8 <__aeabi_fsub>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4936      	ldr	r1, [pc, #216]	; (8003e2c <Constant_Voltage+0x924>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd f8e6 	bl	8000f24 <__aeabi_fdiv>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <Constant_Voltage+0x934>)
 8003d5e:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8003d60:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <Constant_Voltage+0x930>)
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	601a      	str	r2, [r3, #0]
 8003d68:	4b33      	ldr	r3, [pc, #204]	; (8003e38 <Constant_Voltage+0x930>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a31      	ldr	r2, [pc, #196]	; (8003e34 <Constant_Voltage+0x92c>)
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <Constant_Voltage+0x92c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a2e      	ldr	r2, [pc, #184]	; (8003e30 <Constant_Voltage+0x928>)
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <Constant_Voltage+0x928>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a31      	ldr	r2, [pc, #196]	; (8003e44 <Constant_Voltage+0x93c>)
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <Constant_Voltage+0x93c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a30      	ldr	r2, [pc, #192]	; (8003e48 <Constant_Voltage+0x940>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e089      	b.n	8003e9e <Constant_Voltage+0x996>
	}

	else if(d>=20&&d<=30)
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <Constant_Voltage+0x91c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	492f      	ldr	r1, [pc, #188]	; (8003e4c <Constant_Voltage+0x944>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fd f9c5 	bl	8001120 <__aeabi_fcmpge>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05b      	beq.n	8003e54 <Constant_Voltage+0x94c>
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <Constant_Voltage+0x91c>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	492b      	ldr	r1, [pc, #172]	; (8003e50 <Constant_Voltage+0x948>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f9b2 	bl	800110c <__aeabi_fcmple>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d052      	beq.n	8003e54 <Constant_Voltage+0x94c>
	{ dPM=(-(d-20)/10)+1;
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <Constant_Voltage+0x91c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4926      	ldr	r1, [pc, #152]	; (8003e4c <Constant_Voltage+0x944>)
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fef7 	bl	8000ba8 <__aeabi_fsub>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003dc0:	491a      	ldr	r1, [pc, #104]	; (8003e2c <Constant_Voltage+0x924>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fd f8ae 	bl	8000f24 <__aeabi_fdiv>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7fc feec 	bl	8000bac <__addsf3>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	4b18      	ldr	r3, [pc, #96]	; (8003e3c <Constant_Voltage+0x934>)
 8003dda:	601a      	str	r2, [r3, #0]
	   dPB=(d-20)/10;
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <Constant_Voltage+0x91c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	491a      	ldr	r1, [pc, #104]	; (8003e4c <Constant_Voltage+0x944>)
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc fee0 	bl	8000ba8 <__aeabi_fsub>
 8003de8:	4603      	mov	r3, r0
 8003dea:	4910      	ldr	r1, [pc, #64]	; (8003e2c <Constant_Voltage+0x924>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f899 	bl	8000f24 <__aeabi_fdiv>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <Constant_Voltage+0x930>)
 8003df8:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8003dfa:	4b11      	ldr	r3, [pc, #68]	; (8003e40 <Constant_Voltage+0x938>)
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <Constant_Voltage+0x938>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a0b      	ldr	r2, [pc, #44]	; (8003e34 <Constant_Voltage+0x92c>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <Constant_Voltage+0x92c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <Constant_Voltage+0x928>)
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	4b07      	ldr	r3, [pc, #28]	; (8003e30 <Constant_Voltage+0x928>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a0b      	ldr	r2, [pc, #44]	; (8003e44 <Constant_Voltage+0x93c>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <Constant_Voltage+0x93c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <Constant_Voltage+0x940>)
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e03c      	b.n	8003e9e <Constant_Voltage+0x996>
 8003e24:	20000a5c 	.word	0x20000a5c
 8003e28:	c1200000 	.word	0xc1200000
 8003e2c:	41200000 	.word	0x41200000
 8003e30:	200008c4 	.word	0x200008c4
 8003e34:	20000af0 	.word	0x20000af0
 8003e38:	20000a70 	.word	0x20000a70
 8003e3c:	20000798 	.word	0x20000798
 8003e40:	20000ad8 	.word	0x20000ad8
 8003e44:	200009ec 	.word	0x200009ec
 8003e48:	20000790 	.word	0x20000790
 8003e4c:	41a00000 	.word	0x41a00000
 8003e50:	41f00000 	.word	0x41f00000
	}

	else if(d>=30)
 8003e54:	4b8e      	ldr	r3, [pc, #568]	; (8004090 <Constant_Voltage+0xb88>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	498e      	ldr	r1, [pc, #568]	; (8004094 <Constant_Voltage+0xb8c>)
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fd f960 	bl	8001120 <__aeabi_fcmpge>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01b      	beq.n	8003e9e <Constant_Voltage+0x996>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <Constant_Voltage+0xb90>)
 8003e68:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	4b8b      	ldr	r3, [pc, #556]	; (800409c <Constant_Voltage+0xb94>)
 8003e70:	f04f 0200 	mov.w	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	4b89      	ldr	r3, [pc, #548]	; (800409c <Constant_Voltage+0xb94>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a89      	ldr	r2, [pc, #548]	; (80040a0 <Constant_Voltage+0xb98>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	4b88      	ldr	r3, [pc, #544]	; (80040a0 <Constant_Voltage+0xb98>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a88      	ldr	r2, [pc, #544]	; (80040a4 <Constant_Voltage+0xb9c>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b87      	ldr	r3, [pc, #540]	; (80040a4 <Constant_Voltage+0xb9c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a87      	ldr	r2, [pc, #540]	; (80040a8 <Constant_Voltage+0xba0>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	4b86      	ldr	r3, [pc, #536]	; (80040a8 <Constant_Voltage+0xba0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a86      	ldr	r2, [pc, #536]	; (80040ac <Constant_Voltage+0xba4>)
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b85      	ldr	r3, [pc, #532]	; (80040ac <Constant_Voltage+0xba4>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a85      	ldr	r2, [pc, #532]	; (80040b0 <Constant_Voltage+0xba8>)
 8003e9c:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8003e9e:	4b7e      	ldr	r3, [pc, #504]	; (8004098 <Constant_Voltage+0xb90>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a84      	ldr	r2, [pc, #528]	; (80040b4 <Constant_Voltage+0xbac>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b84      	ldr	r3, [pc, #528]	; (80040b8 <Constant_Voltage+0xbb0>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	4b7b      	ldr	r3, [pc, #492]	; (8004098 <Constant_Voltage+0xb90>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	f7fd f921 	bl	80010f8 <__aeabi_fcmplt>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <Constant_Voltage+0x9bc>
 8003ebc:	4b7e      	ldr	r3, [pc, #504]	; (80040b8 <Constant_Voltage+0xbb0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a7c      	ldr	r2, [pc, #496]	; (80040b4 <Constant_Voltage+0xbac>)
 8003ec2:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8003ec4:	4b74      	ldr	r3, [pc, #464]	; (8004098 <Constant_Voltage+0xb90>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <Constant_Voltage+0xbb4>)
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b7c      	ldr	r3, [pc, #496]	; (80040c0 <Constant_Voltage+0xbb8>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b71      	ldr	r3, [pc, #452]	; (8004098 <Constant_Voltage+0xb90>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fd f90e 	bl	80010f8 <__aeabi_fcmplt>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <Constant_Voltage+0x9e2>
 8003ee2:	4b77      	ldr	r3, [pc, #476]	; (80040c0 <Constant_Voltage+0xbb8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a75      	ldr	r2, [pc, #468]	; (80040bc <Constant_Voltage+0xbb4>)
 8003ee8:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8003eea:	4b6b      	ldr	r3, [pc, #428]	; (8004098 <Constant_Voltage+0xb90>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a75      	ldr	r2, [pc, #468]	; (80040c4 <Constant_Voltage+0xbbc>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <Constant_Voltage+0xbc0>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b68      	ldr	r3, [pc, #416]	; (8004098 <Constant_Voltage+0xb90>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4619      	mov	r1, r3
 8003efc:	4610      	mov	r0, r2
 8003efe:	f7fd f8fb 	bl	80010f8 <__aeabi_fcmplt>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <Constant_Voltage+0xa08>
 8003f08:	4b6f      	ldr	r3, [pc, #444]	; (80040c8 <Constant_Voltage+0xbc0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a6d      	ldr	r2, [pc, #436]	; (80040c4 <Constant_Voltage+0xbbc>)
 8003f0e:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8003f10:	4b61      	ldr	r3, [pc, #388]	; (8004098 <Constant_Voltage+0xb90>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6d      	ldr	r2, [pc, #436]	; (80040cc <Constant_Voltage+0xbc4>)
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b6d      	ldr	r3, [pc, #436]	; (80040d0 <Constant_Voltage+0xbc8>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <Constant_Voltage+0xb90>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4619      	mov	r1, r3
 8003f22:	4610      	mov	r0, r2
 8003f24:	f7fd f8e8 	bl	80010f8 <__aeabi_fcmplt>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <Constant_Voltage+0xa2e>
 8003f2e:	4b68      	ldr	r3, [pc, #416]	; (80040d0 <Constant_Voltage+0xbc8>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a66      	ldr	r2, [pc, #408]	; (80040cc <Constant_Voltage+0xbc4>)
 8003f34:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 8003f36:	4b58      	ldr	r3, [pc, #352]	; (8004098 <Constant_Voltage+0xb90>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a66      	ldr	r2, [pc, #408]	; (80040d4 <Constant_Voltage+0xbcc>)
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b66      	ldr	r3, [pc, #408]	; (80040d8 <Constant_Voltage+0xbd0>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b55      	ldr	r3, [pc, #340]	; (8004098 <Constant_Voltage+0xb90>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fd f8d5 	bl	80010f8 <__aeabi_fcmplt>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <Constant_Voltage+0xa54>
 8003f54:	4b60      	ldr	r3, [pc, #384]	; (80040d8 <Constant_Voltage+0xbd0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5e      	ldr	r2, [pc, #376]	; (80040d4 <Constant_Voltage+0xbcc>)
 8003f5a:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8003f5c:	4b4e      	ldr	r3, [pc, #312]	; (8004098 <Constant_Voltage+0xb90>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a5e      	ldr	r2, [pc, #376]	; (80040dc <Constant_Voltage+0xbd4>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4b5e      	ldr	r3, [pc, #376]	; (80040e0 <Constant_Voltage+0xbd8>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4b4b      	ldr	r3, [pc, #300]	; (8004098 <Constant_Voltage+0xb90>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f7fd f8c2 	bl	80010f8 <__aeabi_fcmplt>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <Constant_Voltage+0xa7a>
 8003f7a:	4b59      	ldr	r3, [pc, #356]	; (80040e0 <Constant_Voltage+0xbd8>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a57      	ldr	r2, [pc, #348]	; (80040dc <Constant_Voltage+0xbd4>)
 8003f80:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 8003f82:	4b45      	ldr	r3, [pc, #276]	; (8004098 <Constant_Voltage+0xb90>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a57      	ldr	r2, [pc, #348]	; (80040e4 <Constant_Voltage+0xbdc>)
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b57      	ldr	r3, [pc, #348]	; (80040e8 <Constant_Voltage+0xbe0>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b42      	ldr	r3, [pc, #264]	; (8004098 <Constant_Voltage+0xb90>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	4610      	mov	r0, r2
 8003f96:	f7fd f8af 	bl	80010f8 <__aeabi_fcmplt>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <Constant_Voltage+0xaa0>
 8003fa0:	4b51      	ldr	r3, [pc, #324]	; (80040e8 <Constant_Voltage+0xbe0>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a4f      	ldr	r2, [pc, #316]	; (80040e4 <Constant_Voltage+0xbdc>)
 8003fa6:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8003fa8:	4b3c      	ldr	r3, [pc, #240]	; (800409c <Constant_Voltage+0xb94>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a4f      	ldr	r2, [pc, #316]	; (80040ec <Constant_Voltage+0xbe4>)
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <Constant_Voltage+0xbb0>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <Constant_Voltage+0xb94>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4610      	mov	r0, r2
 8003fbc:	f7fd f89c 	bl	80010f8 <__aeabi_fcmplt>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <Constant_Voltage+0xac6>
 8003fc6:	4b3c      	ldr	r3, [pc, #240]	; (80040b8 <Constant_Voltage+0xbb0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a48      	ldr	r2, [pc, #288]	; (80040ec <Constant_Voltage+0xbe4>)
 8003fcc:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8003fce:	4b33      	ldr	r3, [pc, #204]	; (800409c <Constant_Voltage+0xb94>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a47      	ldr	r2, [pc, #284]	; (80040f0 <Constant_Voltage+0xbe8>)
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	; (80040c0 <Constant_Voltage+0xbb8>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b30      	ldr	r3, [pc, #192]	; (800409c <Constant_Voltage+0xb94>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f7fd f889 	bl	80010f8 <__aeabi_fcmplt>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <Constant_Voltage+0xaec>
 8003fec:	4b34      	ldr	r3, [pc, #208]	; (80040c0 <Constant_Voltage+0xbb8>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a3f      	ldr	r2, [pc, #252]	; (80040f0 <Constant_Voltage+0xbe8>)
 8003ff2:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 8003ff4:	4b29      	ldr	r3, [pc, #164]	; (800409c <Constant_Voltage+0xb94>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a3e      	ldr	r2, [pc, #248]	; (80040f4 <Constant_Voltage+0xbec>)
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b32      	ldr	r3, [pc, #200]	; (80040c8 <Constant_Voltage+0xbc0>)
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	4b26      	ldr	r3, [pc, #152]	; (800409c <Constant_Voltage+0xb94>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fd f876 	bl	80010f8 <__aeabi_fcmplt>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <Constant_Voltage+0xb12>
 8004012:	4b2d      	ldr	r3, [pc, #180]	; (80040c8 <Constant_Voltage+0xbc0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a37      	ldr	r2, [pc, #220]	; (80040f4 <Constant_Voltage+0xbec>)
 8004018:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 800401a:	4b20      	ldr	r3, [pc, #128]	; (800409c <Constant_Voltage+0xb94>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a36      	ldr	r2, [pc, #216]	; (80040f8 <Constant_Voltage+0xbf0>)
 8004020:	6013      	str	r3, [r2, #0]
 8004022:	4b2b      	ldr	r3, [pc, #172]	; (80040d0 <Constant_Voltage+0xbc8>)
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	4b1d      	ldr	r3, [pc, #116]	; (800409c <Constant_Voltage+0xb94>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4619      	mov	r1, r3
 800402c:	4610      	mov	r0, r2
 800402e:	f7fd f863 	bl	80010f8 <__aeabi_fcmplt>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <Constant_Voltage+0xb38>
 8004038:	4b25      	ldr	r3, [pc, #148]	; (80040d0 <Constant_Voltage+0xbc8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <Constant_Voltage+0xbf0>)
 800403e:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <Constant_Voltage+0xb94>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a2d      	ldr	r2, [pc, #180]	; (80040fc <Constant_Voltage+0xbf4>)
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <Constant_Voltage+0xbd0>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <Constant_Voltage+0xb94>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f7fd f850 	bl	80010f8 <__aeabi_fcmplt>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <Constant_Voltage+0xb5e>
 800405e:	4b1e      	ldr	r3, [pc, #120]	; (80040d8 <Constant_Voltage+0xbd0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a26      	ldr	r2, [pc, #152]	; (80040fc <Constant_Voltage+0xbf4>)
 8004064:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <Constant_Voltage+0xb94>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a25      	ldr	r2, [pc, #148]	; (8004100 <Constant_Voltage+0xbf8>)
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <Constant_Voltage+0xbd8>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <Constant_Voltage+0xb94>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4619      	mov	r1, r3
 8004078:	4610      	mov	r0, r2
 800407a:	f7fd f83d 	bl	80010f8 <__aeabi_fcmplt>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d03f      	beq.n	8004104 <Constant_Voltage+0xbfc>
 8004084:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <Constant_Voltage+0xbd8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a1d      	ldr	r2, [pc, #116]	; (8004100 <Constant_Voltage+0xbf8>)
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	e03a      	b.n	8004104 <Constant_Voltage+0xbfc>
 800408e:	bf00      	nop
 8004090:	20000a5c 	.word	0x20000a5c
 8004094:	41f00000 	.word	0x41f00000
 8004098:	20000a70 	.word	0x20000a70
 800409c:	20000798 	.word	0x20000798
 80040a0:	20000ad8 	.word	0x20000ad8
 80040a4:	20000af0 	.word	0x20000af0
 80040a8:	200008c4 	.word	0x200008c4
 80040ac:	200009ec 	.word	0x200009ec
 80040b0:	20000790 	.word	0x20000790
 80040b4:	20000b14 	.word	0x20000b14
 80040b8:	20000ac8 	.word	0x20000ac8
 80040bc:	20000a90 	.word	0x20000a90
 80040c0:	20000afc 	.word	0x20000afc
 80040c4:	20000784 	.word	0x20000784
 80040c8:	2000076c 	.word	0x2000076c
 80040cc:	200007d0 	.word	0x200007d0
 80040d0:	20000b10 	.word	0x20000b10
 80040d4:	20000b04 	.word	0x20000b04
 80040d8:	200009f0 	.word	0x200009f0
 80040dc:	200007c4 	.word	0x200007c4
 80040e0:	20000a68 	.word	0x20000a68
 80040e4:	20000a4c 	.word	0x20000a4c
 80040e8:	200008f8 	.word	0x200008f8
 80040ec:	20000908 	.word	0x20000908
 80040f0:	200007a0 	.word	0x200007a0
 80040f4:	200008ec 	.word	0x200008ec
 80040f8:	20000a8c 	.word	0x20000a8c
 80040fc:	20000ae4 	.word	0x20000ae4
 8004100:	20000b18 	.word	0x20000b18
	r14=dPM; if(ePB<dPM) r14=ePB;		//r14=max(dPM,ePB);
 8004104:	4b8d      	ldr	r3, [pc, #564]	; (800433c <Constant_Voltage+0xe34>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a8d      	ldr	r2, [pc, #564]	; (8004340 <Constant_Voltage+0xe38>)
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b8d      	ldr	r3, [pc, #564]	; (8004344 <Constant_Voltage+0xe3c>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b8a      	ldr	r3, [pc, #552]	; (800433c <Constant_Voltage+0xe34>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4619      	mov	r1, r3
 8004116:	4610      	mov	r0, r2
 8004118:	f7fc ffee 	bl	80010f8 <__aeabi_fcmplt>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <Constant_Voltage+0xc22>
 8004122:	4b88      	ldr	r3, [pc, #544]	; (8004344 <Constant_Voltage+0xe3c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a86      	ldr	r2, [pc, #536]	; (8004340 <Constant_Voltage+0xe38>)
 8004128:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 800412a:	4b87      	ldr	r3, [pc, #540]	; (8004348 <Constant_Voltage+0xe40>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a87      	ldr	r2, [pc, #540]	; (800434c <Constant_Voltage+0xe44>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	4b87      	ldr	r3, [pc, #540]	; (8004350 <Constant_Voltage+0xe48>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b84      	ldr	r3, [pc, #528]	; (8004348 <Constant_Voltage+0xe40>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7fc ffdb 	bl	80010f8 <__aeabi_fcmplt>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <Constant_Voltage+0xc48>
 8004148:	4b81      	ldr	r3, [pc, #516]	; (8004350 <Constant_Voltage+0xe48>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a7f      	ldr	r2, [pc, #508]	; (800434c <Constant_Voltage+0xe44>)
 800414e:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 8004150:	4b7d      	ldr	r3, [pc, #500]	; (8004348 <Constant_Voltage+0xe40>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a7f      	ldr	r2, [pc, #508]	; (8004354 <Constant_Voltage+0xe4c>)
 8004156:	6013      	str	r3, [r2, #0]
 8004158:	4b7f      	ldr	r3, [pc, #508]	; (8004358 <Constant_Voltage+0xe50>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b7a      	ldr	r3, [pc, #488]	; (8004348 <Constant_Voltage+0xe40>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4619      	mov	r1, r3
 8004162:	4610      	mov	r0, r2
 8004164:	f7fc ffc8 	bl	80010f8 <__aeabi_fcmplt>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <Constant_Voltage+0xc6e>
 800416e:	4b7a      	ldr	r3, [pc, #488]	; (8004358 <Constant_Voltage+0xe50>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a78      	ldr	r2, [pc, #480]	; (8004354 <Constant_Voltage+0xe4c>)
 8004174:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 8004176:	4b74      	ldr	r3, [pc, #464]	; (8004348 <Constant_Voltage+0xe40>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a78      	ldr	r2, [pc, #480]	; (800435c <Constant_Voltage+0xe54>)
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b78      	ldr	r3, [pc, #480]	; (8004360 <Constant_Voltage+0xe58>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	4b71      	ldr	r3, [pc, #452]	; (8004348 <Constant_Voltage+0xe40>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f7fc ffb5 	bl	80010f8 <__aeabi_fcmplt>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <Constant_Voltage+0xc94>
 8004194:	4b72      	ldr	r3, [pc, #456]	; (8004360 <Constant_Voltage+0xe58>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a70      	ldr	r2, [pc, #448]	; (800435c <Constant_Voltage+0xe54>)
 800419a:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 800419c:	4b6a      	ldr	r3, [pc, #424]	; (8004348 <Constant_Voltage+0xe40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a70      	ldr	r2, [pc, #448]	; (8004364 <Constant_Voltage+0xe5c>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b70      	ldr	r3, [pc, #448]	; (8004368 <Constant_Voltage+0xe60>)
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b67      	ldr	r3, [pc, #412]	; (8004348 <Constant_Voltage+0xe40>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f7fc ffa2 	bl	80010f8 <__aeabi_fcmplt>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d003      	beq.n	80041c2 <Constant_Voltage+0xcba>
 80041ba:	4b6b      	ldr	r3, [pc, #428]	; (8004368 <Constant_Voltage+0xe60>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a69      	ldr	r2, [pc, #420]	; (8004364 <Constant_Voltage+0xe5c>)
 80041c0:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 80041c2:	4b61      	ldr	r3, [pc, #388]	; (8004348 <Constant_Voltage+0xe40>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <Constant_Voltage+0xe64>)
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b69      	ldr	r3, [pc, #420]	; (8004370 <Constant_Voltage+0xe68>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b5e      	ldr	r3, [pc, #376]	; (8004348 <Constant_Voltage+0xe40>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4619      	mov	r1, r3
 80041d4:	4610      	mov	r0, r2
 80041d6:	f7fc ff8f 	bl	80010f8 <__aeabi_fcmplt>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <Constant_Voltage+0xce0>
 80041e0:	4b63      	ldr	r3, [pc, #396]	; (8004370 <Constant_Voltage+0xe68>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a61      	ldr	r2, [pc, #388]	; (800436c <Constant_Voltage+0xe64>)
 80041e6:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 80041e8:	4b57      	ldr	r3, [pc, #348]	; (8004348 <Constant_Voltage+0xe40>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a61      	ldr	r2, [pc, #388]	; (8004374 <Constant_Voltage+0xe6c>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b61      	ldr	r3, [pc, #388]	; (8004378 <Constant_Voltage+0xe70>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	4b54      	ldr	r3, [pc, #336]	; (8004348 <Constant_Voltage+0xe40>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f7fc ff7c 	bl	80010f8 <__aeabi_fcmplt>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <Constant_Voltage+0xd06>
 8004206:	4b5c      	ldr	r3, [pc, #368]	; (8004378 <Constant_Voltage+0xe70>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a5a      	ldr	r2, [pc, #360]	; (8004374 <Constant_Voltage+0xe6c>)
 800420c:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 800420e:	4b4e      	ldr	r3, [pc, #312]	; (8004348 <Constant_Voltage+0xe40>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5a      	ldr	r2, [pc, #360]	; (800437c <Constant_Voltage+0xe74>)
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b4b      	ldr	r3, [pc, #300]	; (8004344 <Constant_Voltage+0xe3c>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b4b      	ldr	r3, [pc, #300]	; (8004348 <Constant_Voltage+0xe40>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4619      	mov	r1, r3
 8004220:	4610      	mov	r0, r2
 8004222:	f7fc ff69 	bl	80010f8 <__aeabi_fcmplt>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <Constant_Voltage+0xd2c>
 800422c:	4b45      	ldr	r3, [pc, #276]	; (8004344 <Constant_Voltage+0xe3c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <Constant_Voltage+0xe74>)
 8004232:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 8004234:	4b52      	ldr	r3, [pc, #328]	; (8004380 <Constant_Voltage+0xe78>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a52      	ldr	r2, [pc, #328]	; (8004384 <Constant_Voltage+0xe7c>)
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	4b44      	ldr	r3, [pc, #272]	; (8004350 <Constant_Voltage+0xe48>)
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b4f      	ldr	r3, [pc, #316]	; (8004380 <Constant_Voltage+0xe78>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4619      	mov	r1, r3
 8004246:	4610      	mov	r0, r2
 8004248:	f7fc ff56 	bl	80010f8 <__aeabi_fcmplt>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <Constant_Voltage+0xd52>
 8004252:	4b3f      	ldr	r3, [pc, #252]	; (8004350 <Constant_Voltage+0xe48>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a4b      	ldr	r2, [pc, #300]	; (8004384 <Constant_Voltage+0xe7c>)
 8004258:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 800425a:	4b49      	ldr	r3, [pc, #292]	; (8004380 <Constant_Voltage+0xe78>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a4a      	ldr	r2, [pc, #296]	; (8004388 <Constant_Voltage+0xe80>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <Constant_Voltage+0xe50>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b46      	ldr	r3, [pc, #280]	; (8004380 <Constant_Voltage+0xe78>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	4610      	mov	r0, r2
 800426e:	f7fc ff43 	bl	80010f8 <__aeabi_fcmplt>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <Constant_Voltage+0xd78>
 8004278:	4b37      	ldr	r3, [pc, #220]	; (8004358 <Constant_Voltage+0xe50>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a42      	ldr	r2, [pc, #264]	; (8004388 <Constant_Voltage+0xe80>)
 800427e:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <Constant_Voltage+0xe78>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a41      	ldr	r2, [pc, #260]	; (800438c <Constant_Voltage+0xe84>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <Constant_Voltage+0xe58>)
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b3c      	ldr	r3, [pc, #240]	; (8004380 <Constant_Voltage+0xe78>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fc ff30 	bl	80010f8 <__aeabi_fcmplt>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <Constant_Voltage+0xd9e>
 800429e:	4b30      	ldr	r3, [pc, #192]	; (8004360 <Constant_Voltage+0xe58>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a3a      	ldr	r2, [pc, #232]	; (800438c <Constant_Voltage+0xe84>)
 80042a4:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 80042a6:	4b36      	ldr	r3, [pc, #216]	; (8004380 <Constant_Voltage+0xe78>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a39      	ldr	r2, [pc, #228]	; (8004390 <Constant_Voltage+0xe88>)
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <Constant_Voltage+0xe60>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	4b33      	ldr	r3, [pc, #204]	; (8004380 <Constant_Voltage+0xe78>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7fc ff1d 	bl	80010f8 <__aeabi_fcmplt>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <Constant_Voltage+0xdc4>
 80042c4:	4b28      	ldr	r3, [pc, #160]	; (8004368 <Constant_Voltage+0xe60>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a31      	ldr	r2, [pc, #196]	; (8004390 <Constant_Voltage+0xe88>)
 80042ca:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 80042cc:	4b2c      	ldr	r3, [pc, #176]	; (8004380 <Constant_Voltage+0xe78>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a30      	ldr	r2, [pc, #192]	; (8004394 <Constant_Voltage+0xe8c>)
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b26      	ldr	r3, [pc, #152]	; (8004370 <Constant_Voltage+0xe68>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <Constant_Voltage+0xe78>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f7fc ff0a 	bl	80010f8 <__aeabi_fcmplt>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <Constant_Voltage+0xdea>
 80042ea:	4b21      	ldr	r3, [pc, #132]	; (8004370 <Constant_Voltage+0xe68>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a29      	ldr	r2, [pc, #164]	; (8004394 <Constant_Voltage+0xe8c>)
 80042f0:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 80042f2:	4b23      	ldr	r3, [pc, #140]	; (8004380 <Constant_Voltage+0xe78>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a28      	ldr	r2, [pc, #160]	; (8004398 <Constant_Voltage+0xe90>)
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <Constant_Voltage+0xe70>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4b20      	ldr	r3, [pc, #128]	; (8004380 <Constant_Voltage+0xe78>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f7fc fef7 	bl	80010f8 <__aeabi_fcmplt>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d003      	beq.n	8004318 <Constant_Voltage+0xe10>
 8004310:	4b19      	ldr	r3, [pc, #100]	; (8004378 <Constant_Voltage+0xe70>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a20      	ldr	r2, [pc, #128]	; (8004398 <Constant_Voltage+0xe90>)
 8004316:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <Constant_Voltage+0xe78>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a1f      	ldr	r2, [pc, #124]	; (800439c <Constant_Voltage+0xe94>)
 800431e:	6013      	str	r3, [r2, #0]
 8004320:	4b08      	ldr	r3, [pc, #32]	; (8004344 <Constant_Voltage+0xe3c>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4b16      	ldr	r3, [pc, #88]	; (8004380 <Constant_Voltage+0xe78>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4619      	mov	r1, r3
 800432a:	4610      	mov	r0, r2
 800432c:	f7fc fee4 	bl	80010f8 <__aeabi_fcmplt>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d036      	beq.n	80043a4 <Constant_Voltage+0xe9c>
 8004336:	4b03      	ldr	r3, [pc, #12]	; (8004344 <Constant_Voltage+0xe3c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	e031      	b.n	80043a0 <Constant_Voltage+0xe98>
 800433c:	20000798 	.word	0x20000798
 8004340:	20000678 	.word	0x20000678
 8004344:	200008f8 	.word	0x200008f8
 8004348:	20000ad8 	.word	0x20000ad8
 800434c:	20000ae8 	.word	0x20000ae8
 8004350:	20000ac8 	.word	0x20000ac8
 8004354:	20000a64 	.word	0x20000a64
 8004358:	20000afc 	.word	0x20000afc
 800435c:	200007b8 	.word	0x200007b8
 8004360:	2000076c 	.word	0x2000076c
 8004364:	200009f4 	.word	0x200009f4
 8004368:	20000b10 	.word	0x20000b10
 800436c:	20000ae0 	.word	0x20000ae0
 8004370:	200009f0 	.word	0x200009f0
 8004374:	20000900 	.word	0x20000900
 8004378:	20000a68 	.word	0x20000a68
 800437c:	200007cc 	.word	0x200007cc
 8004380:	20000af0 	.word	0x20000af0
 8004384:	20000ab0 	.word	0x20000ab0
 8004388:	20000af8 	.word	0x20000af8
 800438c:	20000b0c 	.word	0x20000b0c
 8004390:	20000768 	.word	0x20000768
 8004394:	200007ac 	.word	0x200007ac
 8004398:	20000914 	.word	0x20000914
 800439c:	2000067c 	.word	0x2000067c
 80043a0:	4a8d      	ldr	r2, [pc, #564]	; (80045d8 <Constant_Voltage+0x10d0>)
 80043a2:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 80043a4:	4b8d      	ldr	r3, [pc, #564]	; (80045dc <Constant_Voltage+0x10d4>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a8d      	ldr	r2, [pc, #564]	; (80045e0 <Constant_Voltage+0x10d8>)
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b8d      	ldr	r3, [pc, #564]	; (80045e4 <Constant_Voltage+0x10dc>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b8a      	ldr	r3, [pc, #552]	; (80045dc <Constant_Voltage+0x10d4>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	4610      	mov	r0, r2
 80043b8:	f7fc fe9e 	bl	80010f8 <__aeabi_fcmplt>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <Constant_Voltage+0xec2>
 80043c2:	4b88      	ldr	r3, [pc, #544]	; (80045e4 <Constant_Voltage+0x10dc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a86      	ldr	r2, [pc, #536]	; (80045e0 <Constant_Voltage+0x10d8>)
 80043c8:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 80043ca:	4b84      	ldr	r3, [pc, #528]	; (80045dc <Constant_Voltage+0x10d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a86      	ldr	r2, [pc, #536]	; (80045e8 <Constant_Voltage+0x10e0>)
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	4b86      	ldr	r3, [pc, #536]	; (80045ec <Constant_Voltage+0x10e4>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4b81      	ldr	r3, [pc, #516]	; (80045dc <Constant_Voltage+0x10d4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4619      	mov	r1, r3
 80043dc:	4610      	mov	r0, r2
 80043de:	f7fc fe8b 	bl	80010f8 <__aeabi_fcmplt>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <Constant_Voltage+0xee8>
 80043e8:	4b80      	ldr	r3, [pc, #512]	; (80045ec <Constant_Voltage+0x10e4>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a7e      	ldr	r2, [pc, #504]	; (80045e8 <Constant_Voltage+0x10e0>)
 80043ee:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 80043f0:	4b7a      	ldr	r3, [pc, #488]	; (80045dc <Constant_Voltage+0x10d4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <Constant_Voltage+0x10e8>)
 80043f6:	6013      	str	r3, [r2, #0]
 80043f8:	4b7e      	ldr	r3, [pc, #504]	; (80045f4 <Constant_Voltage+0x10ec>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b77      	ldr	r3, [pc, #476]	; (80045dc <Constant_Voltage+0x10d4>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4619      	mov	r1, r3
 8004402:	4610      	mov	r0, r2
 8004404:	f7fc fe78 	bl	80010f8 <__aeabi_fcmplt>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <Constant_Voltage+0xf0e>
 800440e:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <Constant_Voltage+0x10ec>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a77      	ldr	r2, [pc, #476]	; (80045f0 <Constant_Voltage+0x10e8>)
 8004414:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 8004416:	4b71      	ldr	r3, [pc, #452]	; (80045dc <Constant_Voltage+0x10d4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <Constant_Voltage+0x10f0>)
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b77      	ldr	r3, [pc, #476]	; (80045fc <Constant_Voltage+0x10f4>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b6e      	ldr	r3, [pc, #440]	; (80045dc <Constant_Voltage+0x10d4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7fc fe65 	bl	80010f8 <__aeabi_fcmplt>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <Constant_Voltage+0xf34>
 8004434:	4b71      	ldr	r3, [pc, #452]	; (80045fc <Constant_Voltage+0x10f4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a6f      	ldr	r2, [pc, #444]	; (80045f8 <Constant_Voltage+0x10f0>)
 800443a:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 800443c:	4b67      	ldr	r3, [pc, #412]	; (80045dc <Constant_Voltage+0x10d4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a6f      	ldr	r2, [pc, #444]	; (8004600 <Constant_Voltage+0x10f8>)
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <Constant_Voltage+0x10fc>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b64      	ldr	r3, [pc, #400]	; (80045dc <Constant_Voltage+0x10d4>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7fc fe52 	bl	80010f8 <__aeabi_fcmplt>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <Constant_Voltage+0xf5a>
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <Constant_Voltage+0x10fc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a68      	ldr	r2, [pc, #416]	; (8004600 <Constant_Voltage+0x10f8>)
 8004460:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 8004462:	4b5e      	ldr	r3, [pc, #376]	; (80045dc <Constant_Voltage+0x10d4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a68      	ldr	r2, [pc, #416]	; (8004608 <Constant_Voltage+0x1100>)
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b68      	ldr	r3, [pc, #416]	; (800460c <Constant_Voltage+0x1104>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b5b      	ldr	r3, [pc, #364]	; (80045dc <Constant_Voltage+0x10d4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4619      	mov	r1, r3
 8004474:	4610      	mov	r0, r2
 8004476:	f7fc fe3f 	bl	80010f8 <__aeabi_fcmplt>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <Constant_Voltage+0xf80>
 8004480:	4b62      	ldr	r3, [pc, #392]	; (800460c <Constant_Voltage+0x1104>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a60      	ldr	r2, [pc, #384]	; (8004608 <Constant_Voltage+0x1100>)
 8004486:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 8004488:	4b54      	ldr	r3, [pc, #336]	; (80045dc <Constant_Voltage+0x10d4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a60      	ldr	r2, [pc, #384]	; (8004610 <Constant_Voltage+0x1108>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	4b60      	ldr	r3, [pc, #384]	; (8004614 <Constant_Voltage+0x110c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	4b51      	ldr	r3, [pc, #324]	; (80045dc <Constant_Voltage+0x10d4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4619      	mov	r1, r3
 800449a:	4610      	mov	r0, r2
 800449c:	f7fc fe2c 	bl	80010f8 <__aeabi_fcmplt>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <Constant_Voltage+0xfa6>
 80044a6:	4b5b      	ldr	r3, [pc, #364]	; (8004614 <Constant_Voltage+0x110c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a59      	ldr	r2, [pc, #356]	; (8004610 <Constant_Voltage+0x1108>)
 80044ac:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 80044ae:	4b5a      	ldr	r3, [pc, #360]	; (8004618 <Constant_Voltage+0x1110>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a5a      	ldr	r2, [pc, #360]	; (800461c <Constant_Voltage+0x1114>)
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b4b      	ldr	r3, [pc, #300]	; (80045e4 <Constant_Voltage+0x10dc>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4b57      	ldr	r3, [pc, #348]	; (8004618 <Constant_Voltage+0x1110>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4619      	mov	r1, r3
 80044c0:	4610      	mov	r0, r2
 80044c2:	f7fc fe19 	bl	80010f8 <__aeabi_fcmplt>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <Constant_Voltage+0xfcc>
 80044cc:	4b45      	ldr	r3, [pc, #276]	; (80045e4 <Constant_Voltage+0x10dc>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a52      	ldr	r2, [pc, #328]	; (800461c <Constant_Voltage+0x1114>)
 80044d2:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 80044d4:	4b50      	ldr	r3, [pc, #320]	; (8004618 <Constant_Voltage+0x1110>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a51      	ldr	r2, [pc, #324]	; (8004620 <Constant_Voltage+0x1118>)
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b43      	ldr	r3, [pc, #268]	; (80045ec <Constant_Voltage+0x10e4>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b4d      	ldr	r3, [pc, #308]	; (8004618 <Constant_Voltage+0x1110>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7fc fe06 	bl	80010f8 <__aeabi_fcmplt>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <Constant_Voltage+0xff2>
 80044f2:	4b3e      	ldr	r3, [pc, #248]	; (80045ec <Constant_Voltage+0x10e4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a4a      	ldr	r2, [pc, #296]	; (8004620 <Constant_Voltage+0x1118>)
 80044f8:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <Constant_Voltage+0x1110>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a49      	ldr	r2, [pc, #292]	; (8004624 <Constant_Voltage+0x111c>)
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	4b3c      	ldr	r3, [pc, #240]	; (80045f4 <Constant_Voltage+0x10ec>)
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	4b44      	ldr	r3, [pc, #272]	; (8004618 <Constant_Voltage+0x1110>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7fc fdf3 	bl	80010f8 <__aeabi_fcmplt>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d003      	beq.n	8004520 <Constant_Voltage+0x1018>
 8004518:	4b36      	ldr	r3, [pc, #216]	; (80045f4 <Constant_Voltage+0x10ec>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a41      	ldr	r2, [pc, #260]	; (8004624 <Constant_Voltage+0x111c>)
 800451e:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 8004520:	4b3d      	ldr	r3, [pc, #244]	; (8004618 <Constant_Voltage+0x1110>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a40      	ldr	r2, [pc, #256]	; (8004628 <Constant_Voltage+0x1120>)
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	4b34      	ldr	r3, [pc, #208]	; (80045fc <Constant_Voltage+0x10f4>)
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b3a      	ldr	r3, [pc, #232]	; (8004618 <Constant_Voltage+0x1110>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4619      	mov	r1, r3
 8004532:	4610      	mov	r0, r2
 8004534:	f7fc fde0 	bl	80010f8 <__aeabi_fcmplt>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <Constant_Voltage+0x103e>
 800453e:	4b2f      	ldr	r3, [pc, #188]	; (80045fc <Constant_Voltage+0x10f4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a39      	ldr	r2, [pc, #228]	; (8004628 <Constant_Voltage+0x1120>)
 8004544:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 8004546:	4b34      	ldr	r3, [pc, #208]	; (8004618 <Constant_Voltage+0x1110>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <Constant_Voltage+0x1124>)
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	4b2d      	ldr	r3, [pc, #180]	; (8004604 <Constant_Voltage+0x10fc>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b31      	ldr	r3, [pc, #196]	; (8004618 <Constant_Voltage+0x1110>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4619      	mov	r1, r3
 8004558:	4610      	mov	r0, r2
 800455a:	f7fc fdcd 	bl	80010f8 <__aeabi_fcmplt>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <Constant_Voltage+0x1064>
 8004564:	4b27      	ldr	r3, [pc, #156]	; (8004604 <Constant_Voltage+0x10fc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a30      	ldr	r2, [pc, #192]	; (800462c <Constant_Voltage+0x1124>)
 800456a:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <Constant_Voltage+0x1110>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <Constant_Voltage+0x1128>)
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	4b25      	ldr	r3, [pc, #148]	; (800460c <Constant_Voltage+0x1104>)
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	4b27      	ldr	r3, [pc, #156]	; (8004618 <Constant_Voltage+0x1110>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4619      	mov	r1, r3
 800457e:	4610      	mov	r0, r2
 8004580:	f7fc fdba 	bl	80010f8 <__aeabi_fcmplt>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <Constant_Voltage+0x108a>
 800458a:	4b20      	ldr	r3, [pc, #128]	; (800460c <Constant_Voltage+0x1104>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a28      	ldr	r2, [pc, #160]	; (8004630 <Constant_Voltage+0x1128>)
 8004590:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <Constant_Voltage+0x1110>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a27      	ldr	r2, [pc, #156]	; (8004634 <Constant_Voltage+0x112c>)
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	4b1e      	ldr	r3, [pc, #120]	; (8004614 <Constant_Voltage+0x110c>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <Constant_Voltage+0x1110>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f7fc fda7 	bl	80010f8 <__aeabi_fcmplt>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d003      	beq.n	80045b8 <Constant_Voltage+0x10b0>
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <Constant_Voltage+0x110c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <Constant_Voltage+0x112c>)
 80045b6:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 80045b8:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <Constant_Voltage+0x1130>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1f      	ldr	r2, [pc, #124]	; (800463c <Constant_Voltage+0x1134>)
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <Constant_Voltage+0x10dc>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b1c      	ldr	r3, [pc, #112]	; (8004638 <Constant_Voltage+0x1130>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fc fd94 	bl	80010f8 <__aeabi_fcmplt>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d038      	beq.n	8004648 <Constant_Voltage+0x1140>
 80045d6:	e033      	b.n	8004640 <Constant_Voltage+0x1138>
 80045d8:	2000067c 	.word	0x2000067c
 80045dc:	200008c4 	.word	0x200008c4
 80045e0:	2000075c 	.word	0x2000075c
 80045e4:	20000ac8 	.word	0x20000ac8
 80045e8:	20000a7c 	.word	0x20000a7c
 80045ec:	20000afc 	.word	0x20000afc
 80045f0:	200007bc 	.word	0x200007bc
 80045f4:	2000076c 	.word	0x2000076c
 80045f8:	200008c8 	.word	0x200008c8
 80045fc:	20000b10 	.word	0x20000b10
 8004600:	200009e8 	.word	0x200009e8
 8004604:	200009f0 	.word	0x200009f0
 8004608:	20000a78 	.word	0x20000a78
 800460c:	20000a68 	.word	0x20000a68
 8004610:	20000aac 	.word	0x20000aac
 8004614:	200008f8 	.word	0x200008f8
 8004618:	200009ec 	.word	0x200009ec
 800461c:	20000788 	.word	0x20000788
 8004620:	200008e4 	.word	0x200008e4
 8004624:	200008fc 	.word	0x200008fc
 8004628:	20000ad4 	.word	0x20000ad4
 800462c:	20000a44 	.word	0x20000a44
 8004630:	20000774 	.word	0x20000774
 8004634:	2000077c 	.word	0x2000077c
 8004638:	20000790 	.word	0x20000790
 800463c:	20000adc 	.word	0x20000adc
 8004640:	4b90      	ldr	r3, [pc, #576]	; (8004884 <Constant_Voltage+0x137c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a90      	ldr	r2, [pc, #576]	; (8004888 <Constant_Voltage+0x1380>)
 8004646:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 8004648:	4b90      	ldr	r3, [pc, #576]	; (800488c <Constant_Voltage+0x1384>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a90      	ldr	r2, [pc, #576]	; (8004890 <Constant_Voltage+0x1388>)
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b90      	ldr	r3, [pc, #576]	; (8004894 <Constant_Voltage+0x138c>)
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	4b8d      	ldr	r3, [pc, #564]	; (800488c <Constant_Voltage+0x1384>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fc fd4c 	bl	80010f8 <__aeabi_fcmplt>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <Constant_Voltage+0x1166>
 8004666:	4b8b      	ldr	r3, [pc, #556]	; (8004894 <Constant_Voltage+0x138c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a89      	ldr	r2, [pc, #548]	; (8004890 <Constant_Voltage+0x1388>)
 800466c:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 800466e:	4b87      	ldr	r3, [pc, #540]	; (800488c <Constant_Voltage+0x1384>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a89      	ldr	r2, [pc, #548]	; (8004898 <Constant_Voltage+0x1390>)
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	4b89      	ldr	r3, [pc, #548]	; (800489c <Constant_Voltage+0x1394>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4b84      	ldr	r3, [pc, #528]	; (800488c <Constant_Voltage+0x1384>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4619      	mov	r1, r3
 8004680:	4610      	mov	r0, r2
 8004682:	f7fc fd39 	bl	80010f8 <__aeabi_fcmplt>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <Constant_Voltage+0x118c>
 800468c:	4b83      	ldr	r3, [pc, #524]	; (800489c <Constant_Voltage+0x1394>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a81      	ldr	r2, [pc, #516]	; (8004898 <Constant_Voltage+0x1390>)
 8004692:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 8004694:	4b7d      	ldr	r3, [pc, #500]	; (800488c <Constant_Voltage+0x1384>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a81      	ldr	r2, [pc, #516]	; (80048a0 <Constant_Voltage+0x1398>)
 800469a:	6013      	str	r3, [r2, #0]
 800469c:	4b81      	ldr	r3, [pc, #516]	; (80048a4 <Constant_Voltage+0x139c>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b7a      	ldr	r3, [pc, #488]	; (800488c <Constant_Voltage+0x1384>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4619      	mov	r1, r3
 80046a6:	4610      	mov	r0, r2
 80046a8:	f7fc fd26 	bl	80010f8 <__aeabi_fcmplt>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <Constant_Voltage+0x11b2>
 80046b2:	4b7c      	ldr	r3, [pc, #496]	; (80048a4 <Constant_Voltage+0x139c>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a7a      	ldr	r2, [pc, #488]	; (80048a0 <Constant_Voltage+0x1398>)
 80046b8:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 80046ba:	4b74      	ldr	r3, [pc, #464]	; (800488c <Constant_Voltage+0x1384>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7a      	ldr	r2, [pc, #488]	; (80048a8 <Constant_Voltage+0x13a0>)
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	4b7a      	ldr	r3, [pc, #488]	; (80048ac <Constant_Voltage+0x13a4>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b71      	ldr	r3, [pc, #452]	; (800488c <Constant_Voltage+0x1384>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f7fc fd13 	bl	80010f8 <__aeabi_fcmplt>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d003      	beq.n	80046e0 <Constant_Voltage+0x11d8>
 80046d8:	4b74      	ldr	r3, [pc, #464]	; (80048ac <Constant_Voltage+0x13a4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a72      	ldr	r2, [pc, #456]	; (80048a8 <Constant_Voltage+0x13a0>)
 80046de:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 80046e0:	4b6a      	ldr	r3, [pc, #424]	; (800488c <Constant_Voltage+0x1384>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a72      	ldr	r2, [pc, #456]	; (80048b0 <Constant_Voltage+0x13a8>)
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4b72      	ldr	r3, [pc, #456]	; (80048b4 <Constant_Voltage+0x13ac>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b67      	ldr	r3, [pc, #412]	; (800488c <Constant_Voltage+0x1384>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fc fd00 	bl	80010f8 <__aeabi_fcmplt>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <Constant_Voltage+0x11fe>
 80046fe:	4b6d      	ldr	r3, [pc, #436]	; (80048b4 <Constant_Voltage+0x13ac>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a6b      	ldr	r2, [pc, #428]	; (80048b0 <Constant_Voltage+0x13a8>)
 8004704:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8004706:	4b61      	ldr	r3, [pc, #388]	; (800488c <Constant_Voltage+0x1384>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a6b      	ldr	r2, [pc, #428]	; (80048b8 <Constant_Voltage+0x13b0>)
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	4b6b      	ldr	r3, [pc, #428]	; (80048bc <Constant_Voltage+0x13b4>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	4b5e      	ldr	r3, [pc, #376]	; (800488c <Constant_Voltage+0x1384>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fc fced 	bl	80010f8 <__aeabi_fcmplt>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <Constant_Voltage+0x1224>
 8004724:	4b65      	ldr	r3, [pc, #404]	; (80048bc <Constant_Voltage+0x13b4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a63      	ldr	r2, [pc, #396]	; (80048b8 <Constant_Voltage+0x13b0>)
 800472a:	6013      	str	r3, [r2, #0]

	///////////////////////////DEFUZZIFIKASI///////////////////////

	A=(r1*oZ)+(r2*oPS)+(r3*oPM)+(r4*oPB)+(r5*oPH)+(r6*oPH)+(r7*oPH);
 800472c:	4b64      	ldr	r3, [pc, #400]	; (80048c0 <Constant_Voltage+0x13b8>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b64      	ldr	r3, [pc, #400]	; (80048c4 <Constant_Voltage+0x13bc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f7fc fb40 	bl	8000dbc <__aeabi_fmul>
 800473c:	4603      	mov	r3, r0
 800473e:	461c      	mov	r4, r3
 8004740:	4b61      	ldr	r3, [pc, #388]	; (80048c8 <Constant_Voltage+0x13c0>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b61      	ldr	r3, [pc, #388]	; (80048cc <Constant_Voltage+0x13c4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fc fb36 	bl	8000dbc <__aeabi_fmul>
 8004750:	4603      	mov	r3, r0
 8004752:	4619      	mov	r1, r3
 8004754:	4620      	mov	r0, r4
 8004756:	f7fc fa29 	bl	8000bac <__addsf3>
 800475a:	4603      	mov	r3, r0
 800475c:	461c      	mov	r4, r3
 800475e:	4b5c      	ldr	r3, [pc, #368]	; (80048d0 <Constant_Voltage+0x13c8>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b5c      	ldr	r3, [pc, #368]	; (80048d4 <Constant_Voltage+0x13cc>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f7fc fb27 	bl	8000dbc <__aeabi_fmul>
 800476e:	4603      	mov	r3, r0
 8004770:	4619      	mov	r1, r3
 8004772:	4620      	mov	r0, r4
 8004774:	f7fc fa1a 	bl	8000bac <__addsf3>
 8004778:	4603      	mov	r3, r0
 800477a:	461c      	mov	r4, r3
 800477c:	4b56      	ldr	r3, [pc, #344]	; (80048d8 <Constant_Voltage+0x13d0>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b56      	ldr	r3, [pc, #344]	; (80048dc <Constant_Voltage+0x13d4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fc fb18 	bl	8000dbc <__aeabi_fmul>
 800478c:	4603      	mov	r3, r0
 800478e:	4619      	mov	r1, r3
 8004790:	4620      	mov	r0, r4
 8004792:	f7fc fa0b 	bl	8000bac <__addsf3>
 8004796:	4603      	mov	r3, r0
 8004798:	461c      	mov	r4, r3
 800479a:	4b51      	ldr	r3, [pc, #324]	; (80048e0 <Constant_Voltage+0x13d8>)
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <Constant_Voltage+0x13dc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fc fb09 	bl	8000dbc <__aeabi_fmul>
 80047aa:	4603      	mov	r3, r0
 80047ac:	4619      	mov	r1, r3
 80047ae:	4620      	mov	r0, r4
 80047b0:	f7fc f9fc 	bl	8000bac <__addsf3>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461c      	mov	r4, r3
 80047b8:	4b4b      	ldr	r3, [pc, #300]	; (80048e8 <Constant_Voltage+0x13e0>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4b49      	ldr	r3, [pc, #292]	; (80048e4 <Constant_Voltage+0x13dc>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f7fc fafa 	bl	8000dbc <__aeabi_fmul>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4619      	mov	r1, r3
 80047cc:	4620      	mov	r0, r4
 80047ce:	f7fc f9ed 	bl	8000bac <__addsf3>
 80047d2:	4603      	mov	r3, r0
 80047d4:	461c      	mov	r4, r3
 80047d6:	4b45      	ldr	r3, [pc, #276]	; (80048ec <Constant_Voltage+0x13e4>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <Constant_Voltage+0x13dc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7fc faeb 	bl	8000dbc <__aeabi_fmul>
 80047e6:	4603      	mov	r3, r0
 80047e8:	4619      	mov	r1, r3
 80047ea:	4620      	mov	r0, r4
 80047ec:	f7fc f9de 	bl	8000bac <__addsf3>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4b3e      	ldr	r3, [pc, #248]	; (80048f0 <Constant_Voltage+0x13e8>)
 80047f6:	601a      	str	r2, [r3, #0]
	B=(r8*oNS)+(r9*oZ)+(r10*oPS)+(r11*oPM)+(r12*oPB)+(r13*oPH)+(r14*oPH);
 80047f8:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <Constant_Voltage+0x13ec>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <Constant_Voltage+0x13f0>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f7fc fada 	bl	8000dbc <__aeabi_fmul>
 8004808:	4603      	mov	r3, r0
 800480a:	461c      	mov	r4, r3
 800480c:	4b3b      	ldr	r3, [pc, #236]	; (80048fc <Constant_Voltage+0x13f4>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <Constant_Voltage+0x13bc>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7fc fad0 	bl	8000dbc <__aeabi_fmul>
 800481c:	4603      	mov	r3, r0
 800481e:	4619      	mov	r1, r3
 8004820:	4620      	mov	r0, r4
 8004822:	f7fc f9c3 	bl	8000bac <__addsf3>
 8004826:	4603      	mov	r3, r0
 8004828:	461c      	mov	r4, r3
 800482a:	4b35      	ldr	r3, [pc, #212]	; (8004900 <Constant_Voltage+0x13f8>)
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	4b27      	ldr	r3, [pc, #156]	; (80048cc <Constant_Voltage+0x13c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f7fc fac1 	bl	8000dbc <__aeabi_fmul>
 800483a:	4603      	mov	r3, r0
 800483c:	4619      	mov	r1, r3
 800483e:	4620      	mov	r0, r4
 8004840:	f7fc f9b4 	bl	8000bac <__addsf3>
 8004844:	4603      	mov	r3, r0
 8004846:	461c      	mov	r4, r3
 8004848:	4b2e      	ldr	r3, [pc, #184]	; (8004904 <Constant_Voltage+0x13fc>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <Constant_Voltage+0x13cc>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	4610      	mov	r0, r2
 8004854:	f7fc fab2 	bl	8000dbc <__aeabi_fmul>
 8004858:	4603      	mov	r3, r0
 800485a:	4619      	mov	r1, r3
 800485c:	4620      	mov	r0, r4
 800485e:	f7fc f9a5 	bl	8000bac <__addsf3>
 8004862:	4603      	mov	r3, r0
 8004864:	461c      	mov	r4, r3
 8004866:	4b28      	ldr	r3, [pc, #160]	; (8004908 <Constant_Voltage+0x1400>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <Constant_Voltage+0x13d4>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f7fc faa3 	bl	8000dbc <__aeabi_fmul>
 8004876:	4603      	mov	r3, r0
 8004878:	4619      	mov	r1, r3
 800487a:	4620      	mov	r0, r4
 800487c:	f7fc f996 	bl	8000bac <__addsf3>
 8004880:	e044      	b.n	800490c <Constant_Voltage+0x1404>
 8004882:	bf00      	nop
 8004884:	20000ac8 	.word	0x20000ac8
 8004888:	20000adc 	.word	0x20000adc
 800488c:	20000790 	.word	0x20000790
 8004890:	200008d0 	.word	0x200008d0
 8004894:	20000afc 	.word	0x20000afc
 8004898:	200008c0 	.word	0x200008c0
 800489c:	2000076c 	.word	0x2000076c
 80048a0:	200007a4 	.word	0x200007a4
 80048a4:	20000b10 	.word	0x20000b10
 80048a8:	20000ad0 	.word	0x20000ad0
 80048ac:	200009f0 	.word	0x200009f0
 80048b0:	20000a50 	.word	0x20000a50
 80048b4:	20000a68 	.word	0x20000a68
 80048b8:	200009e4 	.word	0x200009e4
 80048bc:	200008f8 	.word	0x200008f8
 80048c0:	20000b14 	.word	0x20000b14
 80048c4:	20000258 	.word	0x20000258
 80048c8:	20000a90 	.word	0x20000a90
 80048cc:	20000034 	.word	0x20000034
 80048d0:	20000784 	.word	0x20000784
 80048d4:	20000038 	.word	0x20000038
 80048d8:	200007d0 	.word	0x200007d0
 80048dc:	2000003c 	.word	0x2000003c
 80048e0:	20000b04 	.word	0x20000b04
 80048e4:	20000040 	.word	0x20000040
 80048e8:	200007c4 	.word	0x200007c4
 80048ec:	20000a4c 	.word	0x20000a4c
 80048f0:	2000079c 	.word	0x2000079c
 80048f4:	20000908 	.word	0x20000908
 80048f8:	20000030 	.word	0x20000030
 80048fc:	200007a0 	.word	0x200007a0
 8004900:	200008ec 	.word	0x200008ec
 8004904:	20000a8c 	.word	0x20000a8c
 8004908:	20000ae4 	.word	0x20000ae4
 800490c:	4603      	mov	r3, r0
 800490e:	461c      	mov	r4, r3
 8004910:	4b91      	ldr	r3, [pc, #580]	; (8004b58 <Constant_Voltage+0x1650>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4b91      	ldr	r3, [pc, #580]	; (8004b5c <Constant_Voltage+0x1654>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f7fc fa4e 	bl	8000dbc <__aeabi_fmul>
 8004920:	4603      	mov	r3, r0
 8004922:	4619      	mov	r1, r3
 8004924:	4620      	mov	r0, r4
 8004926:	f7fc f941 	bl	8000bac <__addsf3>
 800492a:	4603      	mov	r3, r0
 800492c:	461c      	mov	r4, r3
 800492e:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <Constant_Voltage+0x1658>)
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	4b8a      	ldr	r3, [pc, #552]	; (8004b5c <Constant_Voltage+0x1654>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7fc fa3f 	bl	8000dbc <__aeabi_fmul>
 800493e:	4603      	mov	r3, r0
 8004940:	4619      	mov	r1, r3
 8004942:	4620      	mov	r0, r4
 8004944:	f7fc f932 	bl	8000bac <__addsf3>
 8004948:	4603      	mov	r3, r0
 800494a:	461a      	mov	r2, r3
 800494c:	4b85      	ldr	r3, [pc, #532]	; (8004b64 <Constant_Voltage+0x165c>)
 800494e:	601a      	str	r2, [r3, #0]
	C=(r15*oNM)+(r16*oNS)+(r17*oZ)+(r18*oPS)+(r19*oPM)+(r20*oPB)+(r21*oPH);
 8004950:	4b85      	ldr	r3, [pc, #532]	; (8004b68 <Constant_Voltage+0x1660>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	4b85      	ldr	r3, [pc, #532]	; (8004b6c <Constant_Voltage+0x1664>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f7fc fa2e 	bl	8000dbc <__aeabi_fmul>
 8004960:	4603      	mov	r3, r0
 8004962:	461c      	mov	r4, r3
 8004964:	4b82      	ldr	r3, [pc, #520]	; (8004b70 <Constant_Voltage+0x1668>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b82      	ldr	r3, [pc, #520]	; (8004b74 <Constant_Voltage+0x166c>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f7fc fa24 	bl	8000dbc <__aeabi_fmul>
 8004974:	4603      	mov	r3, r0
 8004976:	4619      	mov	r1, r3
 8004978:	4620      	mov	r0, r4
 800497a:	f7fc f917 	bl	8000bac <__addsf3>
 800497e:	4603      	mov	r3, r0
 8004980:	461c      	mov	r4, r3
 8004982:	4b7d      	ldr	r3, [pc, #500]	; (8004b78 <Constant_Voltage+0x1670>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b7d      	ldr	r3, [pc, #500]	; (8004b7c <Constant_Voltage+0x1674>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fc fa15 	bl	8000dbc <__aeabi_fmul>
 8004992:	4603      	mov	r3, r0
 8004994:	4619      	mov	r1, r3
 8004996:	4620      	mov	r0, r4
 8004998:	f7fc f908 	bl	8000bac <__addsf3>
 800499c:	4603      	mov	r3, r0
 800499e:	461c      	mov	r4, r3
 80049a0:	4b77      	ldr	r3, [pc, #476]	; (8004b80 <Constant_Voltage+0x1678>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	4b77      	ldr	r3, [pc, #476]	; (8004b84 <Constant_Voltage+0x167c>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fc fa06 	bl	8000dbc <__aeabi_fmul>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4619      	mov	r1, r3
 80049b4:	4620      	mov	r0, r4
 80049b6:	f7fc f8f9 	bl	8000bac <__addsf3>
 80049ba:	4603      	mov	r3, r0
 80049bc:	461c      	mov	r4, r3
 80049be:	4b72      	ldr	r3, [pc, #456]	; (8004b88 <Constant_Voltage+0x1680>)
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b72      	ldr	r3, [pc, #456]	; (8004b8c <Constant_Voltage+0x1684>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7fc f9f7 	bl	8000dbc <__aeabi_fmul>
 80049ce:	4603      	mov	r3, r0
 80049d0:	4619      	mov	r1, r3
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7fc f8ea 	bl	8000bac <__addsf3>
 80049d8:	4603      	mov	r3, r0
 80049da:	461c      	mov	r4, r3
 80049dc:	4b6c      	ldr	r3, [pc, #432]	; (8004b90 <Constant_Voltage+0x1688>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b6c      	ldr	r3, [pc, #432]	; (8004b94 <Constant_Voltage+0x168c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fc f9e8 	bl	8000dbc <__aeabi_fmul>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4619      	mov	r1, r3
 80049f0:	4620      	mov	r0, r4
 80049f2:	f7fc f8db 	bl	8000bac <__addsf3>
 80049f6:	4603      	mov	r3, r0
 80049f8:	461c      	mov	r4, r3
 80049fa:	4b67      	ldr	r3, [pc, #412]	; (8004b98 <Constant_Voltage+0x1690>)
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	4b57      	ldr	r3, [pc, #348]	; (8004b5c <Constant_Voltage+0x1654>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f7fc f9d9 	bl	8000dbc <__aeabi_fmul>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4620      	mov	r0, r4
 8004a10:	f7fc f8cc 	bl	8000bac <__addsf3>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b60      	ldr	r3, [pc, #384]	; (8004b9c <Constant_Voltage+0x1694>)
 8004a1a:	601a      	str	r2, [r3, #0]
	D=(r22*oNB)+(r23*oNM)+(r24*oNS)+(r25*oZ)+(r26*oPS)+(r27*oPM)+(r28*oPB);
 8004a1c:	4b60      	ldr	r3, [pc, #384]	; (8004ba0 <Constant_Voltage+0x1698>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	4b60      	ldr	r3, [pc, #384]	; (8004ba4 <Constant_Voltage+0x169c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fc f9c8 	bl	8000dbc <__aeabi_fmul>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	461c      	mov	r4, r3
 8004a30:	4b5d      	ldr	r3, [pc, #372]	; (8004ba8 <Constant_Voltage+0x16a0>)
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b4d      	ldr	r3, [pc, #308]	; (8004b6c <Constant_Voltage+0x1664>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4619      	mov	r1, r3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	f7fc f9be 	bl	8000dbc <__aeabi_fmul>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4619      	mov	r1, r3
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7fc f8b1 	bl	8000bac <__addsf3>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	461c      	mov	r4, r3
 8004a4e:	4b57      	ldr	r3, [pc, #348]	; (8004bac <Constant_Voltage+0x16a4>)
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	4b48      	ldr	r3, [pc, #288]	; (8004b74 <Constant_Voltage+0x166c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f7fc f9af 	bl	8000dbc <__aeabi_fmul>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4619      	mov	r1, r3
 8004a62:	4620      	mov	r0, r4
 8004a64:	f7fc f8a2 	bl	8000bac <__addsf3>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	461c      	mov	r4, r3
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <Constant_Voltage+0x16a8>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <Constant_Voltage+0x1674>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4619      	mov	r1, r3
 8004a76:	4610      	mov	r0, r2
 8004a78:	f7fc f9a0 	bl	8000dbc <__aeabi_fmul>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4620      	mov	r0, r4
 8004a82:	f7fc f893 	bl	8000bac <__addsf3>
 8004a86:	4603      	mov	r3, r0
 8004a88:	461c      	mov	r4, r3
 8004a8a:	4b4a      	ldr	r3, [pc, #296]	; (8004bb4 <Constant_Voltage+0x16ac>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	; (8004b84 <Constant_Voltage+0x167c>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7fc f991 	bl	8000dbc <__aeabi_fmul>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7fc f884 	bl	8000bac <__addsf3>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461c      	mov	r4, r3
 8004aa8:	4b43      	ldr	r3, [pc, #268]	; (8004bb8 <Constant_Voltage+0x16b0>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <Constant_Voltage+0x1684>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f7fc f982 	bl	8000dbc <__aeabi_fmul>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4619      	mov	r1, r3
 8004abc:	4620      	mov	r0, r4
 8004abe:	f7fc f875 	bl	8000bac <__addsf3>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461c      	mov	r4, r3
 8004ac6:	4b3d      	ldr	r3, [pc, #244]	; (8004bbc <Constant_Voltage+0x16b4>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b32      	ldr	r3, [pc, #200]	; (8004b94 <Constant_Voltage+0x168c>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4610      	mov	r0, r2
 8004ad2:	f7fc f973 	bl	8000dbc <__aeabi_fmul>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4620      	mov	r0, r4
 8004adc:	f7fc f866 	bl	8000bac <__addsf3>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	4b36      	ldr	r3, [pc, #216]	; (8004bc0 <Constant_Voltage+0x16b8>)
 8004ae6:	601a      	str	r2, [r3, #0]
	E=(r29*oNH)+(r30*oNB)+(r31*oNM)+(r32*oNS)+(r33*oZ)+(r34*oPS)+(r35*oPM);
 8004ae8:	4b36      	ldr	r3, [pc, #216]	; (8004bc4 <Constant_Voltage+0x16bc>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <Constant_Voltage+0x16c0>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7fc f962 	bl	8000dbc <__aeabi_fmul>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461c      	mov	r4, r3
 8004afc:	4b33      	ldr	r3, [pc, #204]	; (8004bcc <Constant_Voltage+0x16c4>)
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	4b28      	ldr	r3, [pc, #160]	; (8004ba4 <Constant_Voltage+0x169c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f7fc f958 	bl	8000dbc <__aeabi_fmul>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	4619      	mov	r1, r3
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7fc f84b 	bl	8000bac <__addsf3>
 8004b16:	4603      	mov	r3, r0
 8004b18:	461c      	mov	r4, r3
 8004b1a:	4b2d      	ldr	r3, [pc, #180]	; (8004bd0 <Constant_Voltage+0x16c8>)
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <Constant_Voltage+0x1664>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	4610      	mov	r0, r2
 8004b26:	f7fc f949 	bl	8000dbc <__aeabi_fmul>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7fc f83c 	bl	8000bac <__addsf3>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461c      	mov	r4, r3
 8004b38:	4b26      	ldr	r3, [pc, #152]	; (8004bd4 <Constant_Voltage+0x16cc>)
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	4b0d      	ldr	r3, [pc, #52]	; (8004b74 <Constant_Voltage+0x166c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4619      	mov	r1, r3
 8004b42:	4610      	mov	r0, r2
 8004b44:	f7fc f93a 	bl	8000dbc <__aeabi_fmul>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7fc f82d 	bl	8000bac <__addsf3>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461c      	mov	r4, r3
 8004b56:	e03f      	b.n	8004bd8 <Constant_Voltage+0x16d0>
 8004b58:	20000b18 	.word	0x20000b18
 8004b5c:	20000040 	.word	0x20000040
 8004b60:	20000678 	.word	0x20000678
 8004b64:	200008cc 	.word	0x200008cc
 8004b68:	20000ae8 	.word	0x20000ae8
 8004b6c:	2000002c 	.word	0x2000002c
 8004b70:	20000a64 	.word	0x20000a64
 8004b74:	20000030 	.word	0x20000030
 8004b78:	200007b8 	.word	0x200007b8
 8004b7c:	20000258 	.word	0x20000258
 8004b80:	200009f4 	.word	0x200009f4
 8004b84:	20000034 	.word	0x20000034
 8004b88:	20000ae0 	.word	0x20000ae0
 8004b8c:	20000038 	.word	0x20000038
 8004b90:	20000900 	.word	0x20000900
 8004b94:	2000003c 	.word	0x2000003c
 8004b98:	200007cc 	.word	0x200007cc
 8004b9c:	200008e8 	.word	0x200008e8
 8004ba0:	20000ab0 	.word	0x20000ab0
 8004ba4:	20000028 	.word	0x20000028
 8004ba8:	20000af8 	.word	0x20000af8
 8004bac:	20000b0c 	.word	0x20000b0c
 8004bb0:	20000768 	.word	0x20000768
 8004bb4:	200007ac 	.word	0x200007ac
 8004bb8:	20000914 	.word	0x20000914
 8004bbc:	2000067c 	.word	0x2000067c
 8004bc0:	20000674 	.word	0x20000674
 8004bc4:	2000075c 	.word	0x2000075c
 8004bc8:	20000024 	.word	0x20000024
 8004bcc:	20000a7c 	.word	0x20000a7c
 8004bd0:	200007bc 	.word	0x200007bc
 8004bd4:	200008c8 	.word	0x200008c8
 8004bd8:	4b91      	ldr	r3, [pc, #580]	; (8004e20 <Constant_Voltage+0x1918>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	4b91      	ldr	r3, [pc, #580]	; (8004e24 <Constant_Voltage+0x191c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7fc f8ea 	bl	8000dbc <__aeabi_fmul>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4619      	mov	r1, r3
 8004bec:	4620      	mov	r0, r4
 8004bee:	f7fb ffdd 	bl	8000bac <__addsf3>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461c      	mov	r4, r3
 8004bf6:	4b8c      	ldr	r3, [pc, #560]	; (8004e28 <Constant_Voltage+0x1920>)
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	4b8c      	ldr	r3, [pc, #560]	; (8004e2c <Constant_Voltage+0x1924>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	4610      	mov	r0, r2
 8004c02:	f7fc f8db 	bl	8000dbc <__aeabi_fmul>
 8004c06:	4603      	mov	r3, r0
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7fb ffce 	bl	8000bac <__addsf3>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461c      	mov	r4, r3
 8004c14:	4b86      	ldr	r3, [pc, #536]	; (8004e30 <Constant_Voltage+0x1928>)
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	4b86      	ldr	r3, [pc, #536]	; (8004e34 <Constant_Voltage+0x192c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	f7fc f8cc 	bl	8000dbc <__aeabi_fmul>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4619      	mov	r1, r3
 8004c28:	4620      	mov	r0, r4
 8004c2a:	f7fb ffbf 	bl	8000bac <__addsf3>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	4b81      	ldr	r3, [pc, #516]	; (8004e38 <Constant_Voltage+0x1930>)
 8004c34:	601a      	str	r2, [r3, #0]
	F=(r36*oNH)+(r37*oNH)+(r38*oNB)+(r39*oNM)+(r40*oNS)+(r41*oZ)+(r42*oPS);
 8004c36:	4b81      	ldr	r3, [pc, #516]	; (8004e3c <Constant_Voltage+0x1934>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <Constant_Voltage+0x1938>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fc f8bb 	bl	8000dbc <__aeabi_fmul>
 8004c46:	4603      	mov	r3, r0
 8004c48:	461c      	mov	r4, r3
 8004c4a:	4b7e      	ldr	r3, [pc, #504]	; (8004e44 <Constant_Voltage+0x193c>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	4b7c      	ldr	r3, [pc, #496]	; (8004e40 <Constant_Voltage+0x1938>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4619      	mov	r1, r3
 8004c54:	4610      	mov	r0, r2
 8004c56:	f7fc f8b1 	bl	8000dbc <__aeabi_fmul>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7fb ffa4 	bl	8000bac <__addsf3>
 8004c64:	4603      	mov	r3, r0
 8004c66:	461c      	mov	r4, r3
 8004c68:	4b77      	ldr	r3, [pc, #476]	; (8004e48 <Constant_Voltage+0x1940>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b77      	ldr	r3, [pc, #476]	; (8004e4c <Constant_Voltage+0x1944>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4619      	mov	r1, r3
 8004c72:	4610      	mov	r0, r2
 8004c74:	f7fc f8a2 	bl	8000dbc <__aeabi_fmul>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7fb ff95 	bl	8000bac <__addsf3>
 8004c82:	4603      	mov	r3, r0
 8004c84:	461c      	mov	r4, r3
 8004c86:	4b72      	ldr	r3, [pc, #456]	; (8004e50 <Constant_Voltage+0x1948>)
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b72      	ldr	r3, [pc, #456]	; (8004e54 <Constant_Voltage+0x194c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7fc f893 	bl	8000dbc <__aeabi_fmul>
 8004c96:	4603      	mov	r3, r0
 8004c98:	4619      	mov	r1, r3
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	f7fb ff86 	bl	8000bac <__addsf3>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	461c      	mov	r4, r3
 8004ca4:	4b6c      	ldr	r3, [pc, #432]	; (8004e58 <Constant_Voltage+0x1950>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b6c      	ldr	r3, [pc, #432]	; (8004e5c <Constant_Voltage+0x1954>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4619      	mov	r1, r3
 8004cae:	4610      	mov	r0, r2
 8004cb0:	f7fc f884 	bl	8000dbc <__aeabi_fmul>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7fb ff77 	bl	8000bac <__addsf3>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	461c      	mov	r4, r3
 8004cc2:	4b67      	ldr	r3, [pc, #412]	; (8004e60 <Constant_Voltage+0x1958>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b57      	ldr	r3, [pc, #348]	; (8004e24 <Constant_Voltage+0x191c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4610      	mov	r0, r2
 8004cce:	f7fc f875 	bl	8000dbc <__aeabi_fmul>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f7fb ff68 	bl	8000bac <__addsf3>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461c      	mov	r4, r3
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <Constant_Voltage+0x195c>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b51      	ldr	r3, [pc, #324]	; (8004e2c <Constant_Voltage+0x1924>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f7fc f866 	bl	8000dbc <__aeabi_fmul>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f7fb ff59 	bl	8000bac <__addsf3>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4b5a      	ldr	r3, [pc, #360]	; (8004e68 <Constant_Voltage+0x1960>)
 8004d00:	601a      	str	r2, [r3, #0]
	G=(r43*oNH)+(r44*oNH)+(r45*oNH)+(r46*oNB)+(r47*oNM)+(r48*oNS)+(r49*oZ);
 8004d02:	4b5a      	ldr	r3, [pc, #360]	; (8004e6c <Constant_Voltage+0x1964>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b4e      	ldr	r3, [pc, #312]	; (8004e40 <Constant_Voltage+0x1938>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	f7fc f855 	bl	8000dbc <__aeabi_fmul>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461c      	mov	r4, r3
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <Constant_Voltage+0x1968>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b49      	ldr	r3, [pc, #292]	; (8004e40 <Constant_Voltage+0x1938>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fc f84b 	bl	8000dbc <__aeabi_fmul>
 8004d26:	4603      	mov	r3, r0
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	f7fb ff3e 	bl	8000bac <__addsf3>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461c      	mov	r4, r3
 8004d34:	4b4f      	ldr	r3, [pc, #316]	; (8004e74 <Constant_Voltage+0x196c>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <Constant_Voltage+0x1938>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7fc f83c 	bl	8000dbc <__aeabi_fmul>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4619      	mov	r1, r3
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7fb ff2f 	bl	8000bac <__addsf3>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461c      	mov	r4, r3
 8004d52:	4b49      	ldr	r3, [pc, #292]	; (8004e78 <Constant_Voltage+0x1970>)
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <Constant_Voltage+0x1944>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	f7fc f82d 	bl	8000dbc <__aeabi_fmul>
 8004d62:	4603      	mov	r3, r0
 8004d64:	4619      	mov	r1, r3
 8004d66:	4620      	mov	r0, r4
 8004d68:	f7fb ff20 	bl	8000bac <__addsf3>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461c      	mov	r4, r3
 8004d70:	4b42      	ldr	r3, [pc, #264]	; (8004e7c <Constant_Voltage+0x1974>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <Constant_Voltage+0x194c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7fc f81e 	bl	8000dbc <__aeabi_fmul>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4619      	mov	r1, r3
 8004d84:	4620      	mov	r0, r4
 8004d86:	f7fb ff11 	bl	8000bac <__addsf3>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	461c      	mov	r4, r3
 8004d8e:	4b3c      	ldr	r3, [pc, #240]	; (8004e80 <Constant_Voltage+0x1978>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	4b32      	ldr	r3, [pc, #200]	; (8004e5c <Constant_Voltage+0x1954>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fc f80f 	bl	8000dbc <__aeabi_fmul>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4619      	mov	r1, r3
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7fb ff02 	bl	8000bac <__addsf3>
 8004da8:	4603      	mov	r3, r0
 8004daa:	461c      	mov	r4, r3
 8004dac:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <Constant_Voltage+0x197c>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <Constant_Voltage+0x191c>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7fc f800 	bl	8000dbc <__aeabi_fmul>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f7fb fef3 	bl	8000bac <__addsf3>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <Constant_Voltage+0x1980>)
 8004dcc:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8004dce:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <Constant_Voltage+0x1984>)
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <Constant_Voltage+0x1988>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fb fee7 	bl	8000bac <__addsf3>
 8004dde:	4603      	mov	r3, r0
 8004de0:	461a      	mov	r2, r3
 8004de2:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <Constant_Voltage+0x198c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f7fb fedf 	bl	8000bac <__addsf3>
 8004dee:	4603      	mov	r3, r0
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b29      	ldr	r3, [pc, #164]	; (8004e98 <Constant_Voltage+0x1990>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4619      	mov	r1, r3
 8004df8:	4610      	mov	r0, r2
 8004dfa:	f7fb fed7 	bl	8000bac <__addsf3>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	461a      	mov	r2, r3
 8004e02:	4b26      	ldr	r3, [pc, #152]	; (8004e9c <Constant_Voltage+0x1994>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4619      	mov	r1, r3
 8004e08:	4610      	mov	r0, r2
 8004e0a:	f7fb fecf 	bl	8000bac <__addsf3>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	461a      	mov	r2, r3
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <Constant_Voltage+0x1998>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4619      	mov	r1, r3
 8004e18:	4610      	mov	r0, r2
 8004e1a:	f7fb fec7 	bl	8000bac <__addsf3>
 8004e1e:	e041      	b.n	8004ea4 <Constant_Voltage+0x199c>
 8004e20:	200009e8 	.word	0x200009e8
 8004e24:	20000258 	.word	0x20000258
 8004e28:	20000a78 	.word	0x20000a78
 8004e2c:	20000034 	.word	0x20000034
 8004e30:	20000aac 	.word	0x20000aac
 8004e34:	20000038 	.word	0x20000038
 8004e38:	20000a9c 	.word	0x20000a9c
 8004e3c:	20000788 	.word	0x20000788
 8004e40:	20000024 	.word	0x20000024
 8004e44:	200008e4 	.word	0x200008e4
 8004e48:	200008fc 	.word	0x200008fc
 8004e4c:	20000028 	.word	0x20000028
 8004e50:	20000ad4 	.word	0x20000ad4
 8004e54:	2000002c 	.word	0x2000002c
 8004e58:	20000a44 	.word	0x20000a44
 8004e5c:	20000030 	.word	0x20000030
 8004e60:	20000774 	.word	0x20000774
 8004e64:	2000077c 	.word	0x2000077c
 8004e68:	20000b00 	.word	0x20000b00
 8004e6c:	20000adc 	.word	0x20000adc
 8004e70:	200008d0 	.word	0x200008d0
 8004e74:	200008c0 	.word	0x200008c0
 8004e78:	200007a4 	.word	0x200007a4
 8004e7c:	20000ad0 	.word	0x20000ad0
 8004e80:	20000a50 	.word	0x20000a50
 8004e84:	200009e4 	.word	0x200009e4
 8004e88:	2000090c 	.word	0x2000090c
 8004e8c:	20000b14 	.word	0x20000b14
 8004e90:	20000a90 	.word	0x20000a90
 8004e94:	20000784 	.word	0x20000784
 8004e98:	200007d0 	.word	0x200007d0
 8004e9c:	20000b04 	.word	0x20000b04
 8004ea0:	200007c4 	.word	0x200007c4
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4b91      	ldr	r3, [pc, #580]	; (80050f0 <Constant_Voltage+0x1be8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	4610      	mov	r0, r2
 8004eb0:	f7fb fe7c 	bl	8000bac <__addsf3>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4b8e      	ldr	r3, [pc, #568]	; (80050f4 <Constant_Voltage+0x1bec>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7fb fe74 	bl	8000bac <__addsf3>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4b8b      	ldr	r3, [pc, #556]	; (80050f8 <Constant_Voltage+0x1bf0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fb fe6c 	bl	8000bac <__addsf3>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b88      	ldr	r3, [pc, #544]	; (80050fc <Constant_Voltage+0x1bf4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f7fb fe64 	bl	8000bac <__addsf3>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4b85      	ldr	r3, [pc, #532]	; (8005100 <Constant_Voltage+0x1bf8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4619      	mov	r1, r3
 8004eee:	4610      	mov	r0, r2
 8004ef0:	f7fb fe5c 	bl	8000bac <__addsf3>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	4b82      	ldr	r3, [pc, #520]	; (8005104 <Constant_Voltage+0x1bfc>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f7fb fe54 	bl	8000bac <__addsf3>
 8004f04:	4603      	mov	r3, r0
 8004f06:	461a      	mov	r2, r3
 8004f08:	4b7f      	ldr	r3, [pc, #508]	; (8005108 <Constant_Voltage+0x1c00>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4610      	mov	r0, r2
 8004f10:	f7fb fe4c 	bl	8000bac <__addsf3>
 8004f14:	4603      	mov	r3, r0
 8004f16:	461a      	mov	r2, r3
 8004f18:	4b7c      	ldr	r3, [pc, #496]	; (800510c <Constant_Voltage+0x1c04>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7fb fe44 	bl	8000bac <__addsf3>
 8004f24:	4603      	mov	r3, r0
 8004f26:	461a      	mov	r2, r3
 8004f28:	4b79      	ldr	r3, [pc, #484]	; (8005110 <Constant_Voltage+0x1c08>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7fb fe3c 	bl	8000bac <__addsf3>
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	4b76      	ldr	r3, [pc, #472]	; (8005114 <Constant_Voltage+0x1c0c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f7fb fe34 	bl	8000bac <__addsf3>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b73      	ldr	r3, [pc, #460]	; (8005118 <Constant_Voltage+0x1c10>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fb fe2c 	bl	8000bac <__addsf3>
 8004f54:	4603      	mov	r3, r0
 8004f56:	461a      	mov	r2, r3
 8004f58:	4b70      	ldr	r3, [pc, #448]	; (800511c <Constant_Voltage+0x1c14>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f7fb fe24 	bl	8000bac <__addsf3>
 8004f64:	4603      	mov	r3, r0
 8004f66:	461a      	mov	r2, r3
 8004f68:	4b6d      	ldr	r3, [pc, #436]	; (8005120 <Constant_Voltage+0x1c18>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4610      	mov	r0, r2
 8004f70:	f7fb fe1c 	bl	8000bac <__addsf3>
 8004f74:	4603      	mov	r3, r0
 8004f76:	461a      	mov	r2, r3
 8004f78:	4b6a      	ldr	r3, [pc, #424]	; (8005124 <Constant_Voltage+0x1c1c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	f7fb fe14 	bl	8000bac <__addsf3>
 8004f84:	4603      	mov	r3, r0
 8004f86:	461a      	mov	r2, r3
 8004f88:	4b67      	ldr	r3, [pc, #412]	; (8005128 <Constant_Voltage+0x1c20>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7fb fe0c 	bl	8000bac <__addsf3>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b64      	ldr	r3, [pc, #400]	; (800512c <Constant_Voltage+0x1c24>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f7fb fe04 	bl	8000bac <__addsf3>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4b61      	ldr	r3, [pc, #388]	; (8005130 <Constant_Voltage+0x1c28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	f7fb fdfc 	bl	8000bac <__addsf3>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b5e      	ldr	r3, [pc, #376]	; (8005134 <Constant_Voltage+0x1c2c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f7fb fdf4 	bl	8000bac <__addsf3>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <Constant_Voltage+0x1c30>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f7fb fdec 	bl	8000bac <__addsf3>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b58      	ldr	r3, [pc, #352]	; (800513c <Constant_Voltage+0x1c34>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	f7fb fde4 	bl	8000bac <__addsf3>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4b55      	ldr	r3, [pc, #340]	; (8005140 <Constant_Voltage+0x1c38>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4619      	mov	r1, r3
 8004fee:	4610      	mov	r0, r2
 8004ff0:	f7fb fddc 	bl	8000bac <__addsf3>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	4b52      	ldr	r3, [pc, #328]	; (8005144 <Constant_Voltage+0x1c3c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f7fb fdd4 	bl	8000bac <__addsf3>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <Constant_Voltage+0x1c40>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7fb fdcc 	bl	8000bac <__addsf3>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	4b4c      	ldr	r3, [pc, #304]	; (800514c <Constant_Voltage+0x1c44>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fb fdc4 	bl	8000bac <__addsf3>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	4b49      	ldr	r3, [pc, #292]	; (8005150 <Constant_Voltage+0x1c48>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4619      	mov	r1, r3
 800502e:	4610      	mov	r0, r2
 8005030:	f7fb fdbc 	bl	8000bac <__addsf3>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <Constant_Voltage+0x1c4c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4619      	mov	r1, r3
 800503e:	4610      	mov	r0, r2
 8005040:	f7fb fdb4 	bl	8000bac <__addsf3>
 8005044:	4603      	mov	r3, r0
 8005046:	461a      	mov	r2, r3
 8005048:	4b43      	ldr	r3, [pc, #268]	; (8005158 <Constant_Voltage+0x1c50>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f7fb fdac 	bl	8000bac <__addsf3>
 8005054:	4603      	mov	r3, r0
 8005056:	461a      	mov	r2, r3
 8005058:	4b40      	ldr	r3, [pc, #256]	; (800515c <Constant_Voltage+0x1c54>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fb fda4 	bl	8000bac <__addsf3>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	4b3d      	ldr	r3, [pc, #244]	; (8005160 <Constant_Voltage+0x1c58>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7fb fd9c 	bl	8000bac <__addsf3>
 8005074:	4603      	mov	r3, r0
 8005076:	461a      	mov	r2, r3
 8005078:	4b3a      	ldr	r3, [pc, #232]	; (8005164 <Constant_Voltage+0x1c5c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	4610      	mov	r0, r2
 8005080:	f7fb fd94 	bl	8000bac <__addsf3>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <Constant_Voltage+0x1c60>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fb fd8c 	bl	8000bac <__addsf3>
 8005094:	4603      	mov	r3, r0
 8005096:	461a      	mov	r2, r3
 8005098:	4b34      	ldr	r3, [pc, #208]	; (800516c <Constant_Voltage+0x1c64>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4619      	mov	r1, r3
 800509e:	4610      	mov	r0, r2
 80050a0:	f7fb fd84 	bl	8000bac <__addsf3>
 80050a4:	4603      	mov	r3, r0
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b31      	ldr	r3, [pc, #196]	; (8005170 <Constant_Voltage+0x1c68>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fb fd7c 	bl	8000bac <__addsf3>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b2e      	ldr	r3, [pc, #184]	; (8005174 <Constant_Voltage+0x1c6c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fb fd74 	bl	8000bac <__addsf3>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <Constant_Voltage+0x1c70>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4619      	mov	r1, r3
 80050ce:	4610      	mov	r0, r2
 80050d0:	f7fb fd6c 	bl	8000bac <__addsf3>
 80050d4:	4603      	mov	r3, r0
 80050d6:	461a      	mov	r2, r3
 80050d8:	4b28      	ldr	r3, [pc, #160]	; (800517c <Constant_Voltage+0x1c74>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fb fd64 	bl	8000bac <__addsf3>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <Constant_Voltage+0x1c78>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	e04a      	b.n	8005184 <Constant_Voltage+0x1c7c>
 80050ee:	bf00      	nop
 80050f0:	20000a4c 	.word	0x20000a4c
 80050f4:	20000908 	.word	0x20000908
 80050f8:	200007a0 	.word	0x200007a0
 80050fc:	200008ec 	.word	0x200008ec
 8005100:	20000a8c 	.word	0x20000a8c
 8005104:	20000ae4 	.word	0x20000ae4
 8005108:	20000b18 	.word	0x20000b18
 800510c:	20000678 	.word	0x20000678
 8005110:	20000ae8 	.word	0x20000ae8
 8005114:	20000a64 	.word	0x20000a64
 8005118:	200007b8 	.word	0x200007b8
 800511c:	200009f4 	.word	0x200009f4
 8005120:	20000ae0 	.word	0x20000ae0
 8005124:	20000900 	.word	0x20000900
 8005128:	200007cc 	.word	0x200007cc
 800512c:	20000ab0 	.word	0x20000ab0
 8005130:	20000af8 	.word	0x20000af8
 8005134:	20000b0c 	.word	0x20000b0c
 8005138:	20000768 	.word	0x20000768
 800513c:	200007ac 	.word	0x200007ac
 8005140:	20000914 	.word	0x20000914
 8005144:	2000067c 	.word	0x2000067c
 8005148:	2000075c 	.word	0x2000075c
 800514c:	20000a7c 	.word	0x20000a7c
 8005150:	200007bc 	.word	0x200007bc
 8005154:	200008c8 	.word	0x200008c8
 8005158:	200009e8 	.word	0x200009e8
 800515c:	20000a78 	.word	0x20000a78
 8005160:	20000aac 	.word	0x20000aac
 8005164:	20000788 	.word	0x20000788
 8005168:	200008e4 	.word	0x200008e4
 800516c:	200008fc 	.word	0x200008fc
 8005170:	20000ad4 	.word	0x20000ad4
 8005174:	20000a44 	.word	0x20000a44
 8005178:	20000774 	.word	0x20000774
 800517c:	2000077c 	.word	0x2000077c
 8005180:	20000adc 	.word	0x20000adc
 8005184:	4619      	mov	r1, r3
 8005186:	4610      	mov	r0, r2
 8005188:	f7fb fd10 	bl	8000bac <__addsf3>
 800518c:	4603      	mov	r3, r0
 800518e:	461a      	mov	r2, r3
 8005190:	4b72      	ldr	r3, [pc, #456]	; (800535c <Constant_Voltage+0x1e54>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f7fb fd08 	bl	8000bac <__addsf3>
 800519c:	4603      	mov	r3, r0
 800519e:	461a      	mov	r2, r3
 80051a0:	4b6f      	ldr	r3, [pc, #444]	; (8005360 <Constant_Voltage+0x1e58>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4619      	mov	r1, r3
 80051a6:	4610      	mov	r0, r2
 80051a8:	f7fb fd00 	bl	8000bac <__addsf3>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b6c      	ldr	r3, [pc, #432]	; (8005364 <Constant_Voltage+0x1e5c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7fb fcf8 	bl	8000bac <__addsf3>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	4b69      	ldr	r3, [pc, #420]	; (8005368 <Constant_Voltage+0x1e60>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f7fb fcf0 	bl	8000bac <__addsf3>
 80051cc:	4603      	mov	r3, r0
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b66      	ldr	r3, [pc, #408]	; (800536c <Constant_Voltage+0x1e64>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f7fb fce8 	bl	8000bac <__addsf3>
 80051dc:	4603      	mov	r3, r0
 80051de:	461a      	mov	r2, r3
 80051e0:	4b63      	ldr	r3, [pc, #396]	; (8005370 <Constant_Voltage+0x1e68>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7fb fce0 	bl	8000bac <__addsf3>
 80051ec:	4603      	mov	r3, r0
 80051ee:	461a      	mov	r2, r3
 80051f0:	4b60      	ldr	r3, [pc, #384]	; (8005374 <Constant_Voltage+0x1e6c>)
 80051f2:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 80051f4:	4b60      	ldr	r3, [pc, #384]	; (8005378 <Constant_Voltage+0x1e70>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b60      	ldr	r3, [pc, #384]	; (800537c <Constant_Voltage+0x1e74>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fb fcd4 	bl	8000bac <__addsf3>
 8005204:	4603      	mov	r3, r0
 8005206:	461a      	mov	r2, r3
 8005208:	4b5d      	ldr	r3, [pc, #372]	; (8005380 <Constant_Voltage+0x1e78>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fb fccc 	bl	8000bac <__addsf3>
 8005214:	4603      	mov	r3, r0
 8005216:	461a      	mov	r2, r3
 8005218:	4b5a      	ldr	r3, [pc, #360]	; (8005384 <Constant_Voltage+0x1e7c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7fb fcc4 	bl	8000bac <__addsf3>
 8005224:	4603      	mov	r3, r0
 8005226:	461a      	mov	r2, r3
 8005228:	4b57      	ldr	r3, [pc, #348]	; (8005388 <Constant_Voltage+0x1e80>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f7fb fcbc 	bl	8000bac <__addsf3>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	4b54      	ldr	r3, [pc, #336]	; (800538c <Constant_Voltage+0x1e84>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4619      	mov	r1, r3
 800523e:	4610      	mov	r0, r2
 8005240:	f7fb fcb4 	bl	8000bac <__addsf3>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b51      	ldr	r3, [pc, #324]	; (8005390 <Constant_Voltage+0x1e88>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7fb fcac 	bl	8000bac <__addsf3>
 8005254:	4603      	mov	r3, r0
 8005256:	461a      	mov	r2, r3
 8005258:	4b46      	ldr	r3, [pc, #280]	; (8005374 <Constant_Voltage+0x1e6c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f7fb fe60 	bl	8000f24 <__aeabi_fdiv>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	4b4a      	ldr	r3, [pc, #296]	; (8005394 <Constant_Voltage+0x1e8c>)
 800526a:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 800526c:	4b4a      	ldr	r3, [pc, #296]	; (8005398 <Constant_Voltage+0x1e90>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	4b48      	ldr	r3, [pc, #288]	; (8005394 <Constant_Voltage+0x1e8c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fb fc98 	bl	8000bac <__addsf3>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	4b45      	ldr	r3, [pc, #276]	; (8005398 <Constant_Voltage+0x1e90>)
 8005282:	601a      	str	r2, [r3, #0]

	if(dc>=80)	dc=80;
 8005284:	4b44      	ldr	r3, [pc, #272]	; (8005398 <Constant_Voltage+0x1e90>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4944      	ldr	r1, [pc, #272]	; (800539c <Constant_Voltage+0x1e94>)
 800528a:	4618      	mov	r0, r3
 800528c:	f7fb ff48 	bl	8001120 <__aeabi_fcmpge>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d002      	beq.n	800529c <Constant_Voltage+0x1d94>
 8005296:	4b40      	ldr	r3, [pc, #256]	; (8005398 <Constant_Voltage+0x1e90>)
 8005298:	4a40      	ldr	r2, [pc, #256]	; (800539c <Constant_Voltage+0x1e94>)
 800529a:	601a      	str	r2, [r3, #0]
	if(dc<=0)	dc=0;
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <Constant_Voltage+0x1e90>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fb ff31 	bl	800110c <__aeabi_fcmple>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <Constant_Voltage+0x1db0>
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <Constant_Voltage+0x1e90>)
 80052b2:	f04f 0200 	mov.w	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 80052b8:	4b37      	ldr	r3, [pc, #220]	; (8005398 <Constant_Voltage+0x1e90>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4938      	ldr	r1, [pc, #224]	; (80053a0 <Constant_Voltage+0x1e98>)
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb fe30 	bl	8000f24 <__aeabi_fdiv>
 80052c4:	4603      	mov	r3, r0
 80052c6:	461a      	mov	r2, r3
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <Constant_Voltage+0x1e9c>)
 80052ca:	601a      	str	r2, [r3, #0]
	//	  uint32_t p = 1500000;
	//	  	while(p>0)
	//	  		p--;
	//	  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
	//}
	if(	flag_trip_overvoltage == 1		||
 80052cc:	4b36      	ldr	r3, [pc, #216]	; (80053a8 <Constant_Voltage+0x1ea0>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d027      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		flag_trip_overtemperature == 1	||
 80052d4:	4b35      	ldr	r3, [pc, #212]	; (80053ac <Constant_Voltage+0x1ea4>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d023      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		flag_trip_undertemperature == 1	||
 80052dc:	4b34      	ldr	r3, [pc, #208]	; (80053b0 <Constant_Voltage+0x1ea8>)
 80052de:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d01f      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		flag_trip_overcurrentcharge == 1||
 80052e4:	4b33      	ldr	r3, [pc, #204]	; (80053b4 <Constant_Voltage+0x1eac>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d01b      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		flag_trip_SOCOverCharge == 1	||
 80052ec:	4b32      	ldr	r3, [pc, #200]	; (80053b8 <Constant_Voltage+0x1eb0>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d017      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		flag_trip_shortcircuit == 1		||
 80052f4:	4b31      	ldr	r3, [pc, #196]	; (80053bc <Constant_Voltage+0x1eb4>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d013      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		flag_trip_systemfailure == 1	||
 80052fc:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <Constant_Voltage+0x1eb8>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 8005300:	2b01      	cmp	r3, #1
 8005302:	d00f      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		Flag_ChargerShortCircuit == 1	||
 8005304:	4b2f      	ldr	r3, [pc, #188]	; (80053c4 <Constant_Voltage+0x1ebc>)
 8005306:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8005308:	2b01      	cmp	r3, #1
 800530a:	d00b      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverCurrent == 1	||
 800530c:	4b2e      	ldr	r3, [pc, #184]	; (80053c8 <Constant_Voltage+0x1ec0>)
 800530e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 8005310:	2b01      	cmp	r3, #1
 8005312:	d007      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverTemperature == 1||
 8005314:	4b2d      	ldr	r3, [pc, #180]	; (80053cc <Constant_Voltage+0x1ec4>)
 8005316:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8005318:	2b01      	cmp	r3, #1
 800531a:	d003      	beq.n	8005324 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverVoltage == 1	)
 800531c:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <Constant_Voltage+0x1ec8>)
 800531e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 8005320:	2b01      	cmp	r3, #1
 8005322:	d106      	bne.n	8005332 <Constant_Voltage+0x1e2a>
		{
			duty=0;
 8005324:	4b1f      	ldr	r3, [pc, #124]	; (80053a4 <Constant_Voltage+0x1e9c>)
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 800532c:	4b29      	ldr	r3, [pc, #164]	; (80053d4 <Constant_Voltage+0x1ecc>)
 800532e:	2202      	movs	r2, #2
 8005330:	701a      	strb	r2, [r3, #0]
		}
	TIM1->CCR1=duty*TIM1->ARR;
 8005332:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <Constant_Voltage+0x1ed0>)
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	4618      	mov	r0, r3
 8005338:	f7fb fce8 	bl	8000d0c <__aeabi_ui2f>
 800533c:	4602      	mov	r2, r0
 800533e:	4b19      	ldr	r3, [pc, #100]	; (80053a4 <Constant_Voltage+0x1e9c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f7fb fd39 	bl	8000dbc <__aeabi_fmul>
 800534a:	4603      	mov	r3, r0
 800534c:	4c22      	ldr	r4, [pc, #136]	; (80053d8 <Constant_Voltage+0x1ed0>)
 800534e:	4618      	mov	r0, r3
 8005350:	f7fb fefa 	bl	8001148 <__aeabi_f2uiz>
 8005354:	4603      	mov	r3, r0
 8005356:	6363      	str	r3, [r4, #52]	; 0x34
}
 8005358:	bf00      	nop
 800535a:	bd98      	pop	{r3, r4, r7, pc}
 800535c:	200008d0 	.word	0x200008d0
 8005360:	200008c0 	.word	0x200008c0
 8005364:	200007a4 	.word	0x200007a4
 8005368:	20000ad0 	.word	0x20000ad0
 800536c:	20000a50 	.word	0x20000a50
 8005370:	200009e4 	.word	0x200009e4
 8005374:	20000a40 	.word	0x20000a40
 8005378:	2000079c 	.word	0x2000079c
 800537c:	200008cc 	.word	0x200008cc
 8005380:	200008e8 	.word	0x200008e8
 8005384:	20000674 	.word	0x20000674
 8005388:	20000a9c 	.word	0x20000a9c
 800538c:	20000b00 	.word	0x20000b00
 8005390:	2000090c 	.word	0x2000090c
 8005394:	20000a98 	.word	0x20000a98
 8005398:	20000770 	.word	0x20000770
 800539c:	42a00000 	.word	0x42a00000
 80053a0:	42c80000 	.word	0x42c80000
 80053a4:	20000abc 	.word	0x20000abc
 80053a8:	20000aec 	.word	0x20000aec
 80053ac:	200007a9 	.word	0x200007a9
 80053b0:	200008dc 	.word	0x200008dc
 80053b4:	20000a54 	.word	0x20000a54
 80053b8:	20000682 	.word	0x20000682
 80053bc:	20000760 	.word	0x20000760
 80053c0:	20000780 	.word	0x20000780
 80053c4:	2000089c 	.word	0x2000089c
 80053c8:	200007c0 	.word	0x200007c0
 80053cc:	20000795 	.word	0x20000795
 80053d0:	200008ac 	.word	0x200008ac
 80053d4:	200007a8 	.word	0x200007a8
 80053d8:	40010000 	.word	0x40010000

080053dc <EEPROM_WriteData>:
		}
	}
}

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af04      	add	r7, sp, #16
 80053e2:	4603      	mov	r3, r0
 80053e4:	460a      	mov	r2, r1
 80053e6:	80fb      	strh	r3, [r7, #6]
 80053e8:	4613      	mov	r3, r2
 80053ea:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADDRESS,addr,64,&data,1,10);
 80053ec:	88fa      	ldrh	r2, [r7, #6]
 80053ee:	230a      	movs	r3, #10
 80053f0:	9302      	str	r3, [sp, #8]
 80053f2:	2301      	movs	r3, #1
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	1d7b      	adds	r3, r7, #5
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	21a0      	movs	r1, #160	; 0xa0
 80053fe:	4805      	ldr	r0, [pc, #20]	; (8005414 <EEPROM_WriteData+0x38>)
 8005400:	f005 f820 	bl	800a444 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8005404:	2064      	movs	r0, #100	; 0x64
 8005406:	f002 fd43 	bl	8007e90 <HAL_Delay>
}
 800540a:	bf00      	nop
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000c04 	.word	0x20000c04

08005418 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800541e:	463b      	mov	r3, r7
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800542a:	4b3c      	ldr	r3, [pc, #240]	; (800551c <MX_ADC1_Init+0x104>)
 800542c:	4a3c      	ldr	r2, [pc, #240]	; (8005520 <MX_ADC1_Init+0x108>)
 800542e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <MX_ADC1_Init+0x104>)
 8005432:	2200      	movs	r2, #0
 8005434:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005436:	4b39      	ldr	r3, [pc, #228]	; (800551c <MX_ADC1_Init+0x104>)
 8005438:	2200      	movs	r2, #0
 800543a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800543c:	4b37      	ldr	r3, [pc, #220]	; (800551c <MX_ADC1_Init+0x104>)
 800543e:	2201      	movs	r2, #1
 8005440:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005442:	4b36      	ldr	r3, [pc, #216]	; (800551c <MX_ADC1_Init+0x104>)
 8005444:	2201      	movs	r2, #1
 8005446:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005448:	4b34      	ldr	r3, [pc, #208]	; (800551c <MX_ADC1_Init+0x104>)
 800544a:	2200      	movs	r2, #0
 800544c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800544e:	4b33      	ldr	r3, [pc, #204]	; (800551c <MX_ADC1_Init+0x104>)
 8005450:	2200      	movs	r2, #0
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005454:	4b31      	ldr	r3, [pc, #196]	; (800551c <MX_ADC1_Init+0x104>)
 8005456:	4a33      	ldr	r2, [pc, #204]	; (8005524 <MX_ADC1_Init+0x10c>)
 8005458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800545a:	4b30      	ldr	r3, [pc, #192]	; (800551c <MX_ADC1_Init+0x104>)
 800545c:	2200      	movs	r2, #0
 800545e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8005460:	4b2e      	ldr	r3, [pc, #184]	; (800551c <MX_ADC1_Init+0x104>)
 8005462:	2205      	movs	r2, #5
 8005464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005466:	4b2d      	ldr	r3, [pc, #180]	; (800551c <MX_ADC1_Init+0x104>)
 8005468:	2201      	movs	r2, #1
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800546c:	4b2b      	ldr	r3, [pc, #172]	; (800551c <MX_ADC1_Init+0x104>)
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005472:	482a      	ldr	r0, [pc, #168]	; (800551c <MX_ADC1_Init+0x104>)
 8005474:	f002 fd2e 	bl	8007ed4 <HAL_ADC_Init>
 8005478:	4603      	mov	r3, r0
 800547a:	2b00      	cmp	r3, #0
 800547c:	d001      	beq.n	8005482 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800547e:	f001 f809 	bl	8006494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005482:	2301      	movs	r3, #1
 8005484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005486:	2301      	movs	r3, #1
 8005488:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800548a:	2306      	movs	r3, #6
 800548c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800548e:	463b      	mov	r3, r7
 8005490:	4619      	mov	r1, r3
 8005492:	4822      	ldr	r0, [pc, #136]	; (800551c <MX_ADC1_Init+0x104>)
 8005494:	f002 fe46 	bl	8008124 <HAL_ADC_ConfigChannel>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800549e:	f000 fff9 	bl	8006494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80054a2:	2302      	movs	r3, #2
 80054a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80054a6:	2302      	movs	r3, #2
 80054a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054aa:	463b      	mov	r3, r7
 80054ac:	4619      	mov	r1, r3
 80054ae:	481b      	ldr	r0, [pc, #108]	; (800551c <MX_ADC1_Init+0x104>)
 80054b0:	f002 fe38 	bl	8008124 <HAL_ADC_ConfigChannel>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d001      	beq.n	80054be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80054ba:	f000 ffeb 	bl	8006494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80054be:	2303      	movs	r3, #3
 80054c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80054c2:	2303      	movs	r3, #3
 80054c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054c6:	463b      	mov	r3, r7
 80054c8:	4619      	mov	r1, r3
 80054ca:	4814      	ldr	r0, [pc, #80]	; (800551c <MX_ADC1_Init+0x104>)
 80054cc:	f002 fe2a 	bl	8008124 <HAL_ADC_ConfigChannel>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80054d6:	f000 ffdd 	bl	8006494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80054da:	230e      	movs	r3, #14
 80054dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80054de:	2304      	movs	r3, #4
 80054e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054e2:	463b      	mov	r3, r7
 80054e4:	4619      	mov	r1, r3
 80054e6:	480d      	ldr	r0, [pc, #52]	; (800551c <MX_ADC1_Init+0x104>)
 80054e8:	f002 fe1c 	bl	8008124 <HAL_ADC_ConfigChannel>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80054f2:	f000 ffcf 	bl	8006494 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80054f6:	230f      	movs	r3, #15
 80054f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80054fa:	2305      	movs	r3, #5
 80054fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054fe:	463b      	mov	r3, r7
 8005500:	4619      	mov	r1, r3
 8005502:	4806      	ldr	r0, [pc, #24]	; (800551c <MX_ADC1_Init+0x104>)
 8005504:	f002 fe0e 	bl	8008124 <HAL_ADC_ConfigChannel>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800550e:	f000 ffc1 	bl	8006494 <Error_Handler>
  }

}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000b20 	.word	0x20000b20
 8005520:	40012000 	.word	0x40012000
 8005524:	0f000001 	.word	0x0f000001

08005528 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005530:	f107 0314 	add.w	r3, r7, #20
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a3c      	ldr	r2, [pc, #240]	; (8005638 <HAL_ADC_MspInit+0x110>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d172      	bne.n	8005630 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800554a:	2300      	movs	r3, #0
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	4b3b      	ldr	r3, [pc, #236]	; (800563c <HAL_ADC_MspInit+0x114>)
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	4a3a      	ldr	r2, [pc, #232]	; (800563c <HAL_ADC_MspInit+0x114>)
 8005554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005558:	6453      	str	r3, [r2, #68]	; 0x44
 800555a:	4b38      	ldr	r3, [pc, #224]	; (800563c <HAL_ADC_MspInit+0x114>)
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005562:	613b      	str	r3, [r7, #16]
 8005564:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	4b34      	ldr	r3, [pc, #208]	; (800563c <HAL_ADC_MspInit+0x114>)
 800556c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556e:	4a33      	ldr	r2, [pc, #204]	; (800563c <HAL_ADC_MspInit+0x114>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6313      	str	r3, [r2, #48]	; 0x30
 8005576:	4b31      	ldr	r3, [pc, #196]	; (800563c <HAL_ADC_MspInit+0x114>)
 8005578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <HAL_ADC_MspInit+0x114>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	4a2c      	ldr	r2, [pc, #176]	; (800563c <HAL_ADC_MspInit+0x114>)
 800558c:	f043 0304 	orr.w	r3, r3, #4
 8005590:	6313      	str	r3, [r2, #48]	; 0x30
 8005592:	4b2a      	ldr	r3, [pc, #168]	; (800563c <HAL_ADC_MspInit+0x114>)
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	60bb      	str	r3, [r7, #8]
 800559c:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800559e:	230e      	movs	r3, #14
 80055a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055a2:	2303      	movs	r3, #3
 80055a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055aa:	f107 0314 	add.w	r3, r7, #20
 80055ae:	4619      	mov	r1, r3
 80055b0:	4823      	ldr	r0, [pc, #140]	; (8005640 <HAL_ADC_MspInit+0x118>)
 80055b2:	f004 fb2b 	bl	8009c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80055b6:	2330      	movs	r3, #48	; 0x30
 80055b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80055ba:	2303      	movs	r3, #3
 80055bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055c2:	f107 0314 	add.w	r3, r7, #20
 80055c6:	4619      	mov	r1, r3
 80055c8:	481e      	ldr	r0, [pc, #120]	; (8005644 <HAL_ADC_MspInit+0x11c>)
 80055ca:	f004 fb1f 	bl	8009c0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80055ce:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055d0:	4a1e      	ldr	r2, [pc, #120]	; (800564c <HAL_ADC_MspInit+0x124>)
 80055d2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055da:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055dc:	2200      	movs	r2, #0
 80055de:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80055e0:	4b19      	ldr	r3, [pc, #100]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80055e6:	4b18      	ldr	r3, [pc, #96]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <HAL_ADC_MspInit+0x120>)
 80055f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80055fe:	4b12      	ldr	r3, [pc, #72]	; (8005648 <HAL_ADC_MspInit+0x120>)
 8005600:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005604:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005606:	4b10      	ldr	r3, [pc, #64]	; (8005648 <HAL_ADC_MspInit+0x120>)
 8005608:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800560c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <HAL_ADC_MspInit+0x120>)
 8005610:	2200      	movs	r2, #0
 8005612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005614:	480c      	ldr	r0, [pc, #48]	; (8005648 <HAL_ADC_MspInit+0x120>)
 8005616:	f003 ff6b 	bl	80094f0 <HAL_DMA_Init>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8005620:	f000 ff38 	bl	8006494 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a08      	ldr	r2, [pc, #32]	; (8005648 <HAL_ADC_MspInit+0x120>)
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
 800562a:	4a07      	ldr	r2, [pc, #28]	; (8005648 <HAL_ADC_MspInit+0x120>)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005630:	bf00      	nop
 8005632:	3728      	adds	r7, #40	; 0x28
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40012000 	.word	0x40012000
 800563c:	40023800 	.word	0x40023800
 8005640:	40020000 	.word	0x40020000
 8005644:	40020800 	.word	0x40020800
 8005648:	20000b68 	.word	0x20000b68
 800564c:	40026410 	.word	0x40026410

08005650 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8005654:	4b17      	ldr	r3, [pc, #92]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <MX_CAN1_Init+0x68>)
 8005658:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800565a:	4b16      	ldr	r3, [pc, #88]	; (80056b4 <MX_CAN1_Init+0x64>)
 800565c:	2204      	movs	r2, #4
 800565e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005660:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005662:	2200      	movs	r2, #0
 8005664:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8005666:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005668:	2200      	movs	r2, #0
 800566a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 800566c:	4b11      	ldr	r3, [pc, #68]	; (80056b4 <MX_CAN1_Init+0x64>)
 800566e:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8005672:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8005674:	4b0f      	ldr	r3, [pc, #60]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005676:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800567a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <MX_CAN1_Init+0x64>)
 800567e:	2200      	movs	r2, #0
 8005680:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8005682:	4b0c      	ldr	r3, [pc, #48]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005684:	2200      	movs	r2, #0
 8005686:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005688:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <MX_CAN1_Init+0x64>)
 800568a:	2200      	movs	r2, #0
 800568c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800568e:	4b09      	ldr	r3, [pc, #36]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005690:	2200      	movs	r2, #0
 8005692:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8005694:	4b07      	ldr	r3, [pc, #28]	; (80056b4 <MX_CAN1_Init+0x64>)
 8005696:	2200      	movs	r2, #0
 8005698:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800569a:	4b06      	ldr	r3, [pc, #24]	; (80056b4 <MX_CAN1_Init+0x64>)
 800569c:	2200      	movs	r2, #0
 800569e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80056a0:	4804      	ldr	r0, [pc, #16]	; (80056b4 <MX_CAN1_Init+0x64>)
 80056a2:	f002 ffe5 	bl	8008670 <HAL_CAN_Init>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80056ac:	f000 fef2 	bl	8006494 <Error_Handler>
  }

}
 80056b0:	bf00      	nop
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000bdc 	.word	0x20000bdc
 80056b8:	40006400 	.word	0x40006400

080056bc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08a      	sub	sp, #40	; 0x28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	f107 0314 	add.w	r3, r7, #20
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a21      	ldr	r2, [pc, #132]	; (8005760 <HAL_CAN_MspInit+0xa4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d13c      	bne.n	8005758 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_CAN_MspInit+0xa8>)
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <HAL_CAN_MspInit+0xa8>)
 80056e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056ec:	6413      	str	r3, [r2, #64]	; 0x40
 80056ee:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <HAL_CAN_MspInit+0xa8>)
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60fb      	str	r3, [r7, #12]
 80056fe:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_CAN_MspInit+0xa8>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_CAN_MspInit+0xa8>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b16      	ldr	r3, [pc, #88]	; (8005764 <HAL_CAN_MspInit+0xa8>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005716:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800571a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005724:	2303      	movs	r3, #3
 8005726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005728:	2309      	movs	r3, #9
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	4619      	mov	r1, r3
 8005732:	480d      	ldr	r0, [pc, #52]	; (8005768 <HAL_CAN_MspInit+0xac>)
 8005734:	f004 fa6a 	bl	8009c0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8005738:	2200      	movs	r2, #0
 800573a:	2100      	movs	r1, #0
 800573c:	2015      	movs	r0, #21
 800573e:	f003 fea0 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8005742:	2015      	movs	r0, #21
 8005744:	f003 feb9 	bl	80094ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8005748:	2200      	movs	r2, #0
 800574a:	2100      	movs	r1, #0
 800574c:	2016      	movs	r0, #22
 800574e:	f003 fe98 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8005752:	2016      	movs	r0, #22
 8005754:	f003 feb1 	bl	80094ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005758:	bf00      	nop
 800575a:	3728      	adds	r7, #40	; 0x28
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40006400 	.word	0x40006400
 8005764:	40023800 	.word	0x40023800
 8005768:	40020000 	.word	0x40020000

0800576c <CAN_Setting>:
  }
} 

/* USER CODE BEGIN 1 */
void CAN_Setting(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8005776:	2300      	movs	r3, #0
 8005778:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800577a:	2301      	movs	r3, #1
 800577c:	61fb      	str	r3, [r7, #28]
	//sFilterConfig.FilterIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 800577e:	2300      	movs	r3, #0
 8005780:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8005782:	2300      	movs	r3, #0
 8005784:	607b      	str	r3, [r7, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 8005786:	2300      	movs	r3, #0
 8005788:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8005792:	2301      	movs	r3, #1
 8005794:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8005796:	230e      	movs	r3, #14
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 800579a:	463b      	mov	r3, r7
 800579c:	4619      	mov	r1, r3
 800579e:	480e      	ldr	r0, [pc, #56]	; (80057d8 <CAN_Setting+0x6c>)
 80057a0:	f003 f862 	bl	8008868 <HAL_CAN_ConfigFilter>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <CAN_Setting+0x42>
 80057aa:	f000 fe73 	bl	8006494 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 80057ae:	480a      	ldr	r0, [pc, #40]	; (80057d8 <CAN_Setting+0x6c>)
 80057b0:	f003 f93a 	bl	8008a28 <HAL_CAN_Start>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <CAN_Setting+0x52>
 80057ba:	f000 fe6b 	bl	8006494 <Error_Handler>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 80057be:	4b07      	ldr	r3, [pc, #28]	; (80057dc <CAN_Setting+0x70>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <CAN_Setting+0x70>)
 80057c6:	2200      	movs	r2, #0
 80057c8:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 80057ca:	4b04      	ldr	r3, [pc, #16]	; (80057dc <CAN_Setting+0x70>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	609a      	str	r2, [r3, #8]

//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
}
 80057d0:	bf00      	nop
 80057d2:	3728      	adds	r7, #40	; 0x28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	20000bdc 	.word	0x20000bdc
 80057dc:	20000da0 	.word	0x20000da0

080057e0 <CAN_Rx_Process>:
  Tx_Header.DLC = 8;
  if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
}

void CAN_Rx_Process(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <CAN_Rx_Process+0xe8>)
 80057e8:	4a38      	ldr	r2, [pc, #224]	; (80058cc <CAN_Rx_Process+0xec>)
 80057ea:	2100      	movs	r1, #0
 80057ec:	4838      	ldr	r0, [pc, #224]	; (80058d0 <CAN_Rx_Process+0xf0>)
 80057ee:	f003 fa39 	bl	8008c64 <HAL_CAN_GetRxMessage>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f040 823b 	bne.w	8005c70 <CAN_Rx_Process+0x490>
		HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 80057fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057fe:	4835      	ldr	r0, [pc, #212]	; (80058d4 <CAN_Rx_Process+0xf4>)
 8005800:	f004 fbd1 	bl	8009fa6 <HAL_GPIO_TogglePin>

		if(Handshaking==0){
 8005804:	4b34      	ldr	r3, [pc, #208]	; (80058d8 <CAN_Rx_Process+0xf8>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 80ac 	bne.w	8005966 <CAN_Rx_Process+0x186>
			// CAN ID receive (Handshaking)
			if(Rx_Header.ExtId>>20==0x0E0){
 800580e:	4b2f      	ldr	r3, [pc, #188]	; (80058cc <CAN_Rx_Process+0xec>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	0d1b      	lsrs	r3, r3, #20
 8005814:	2be0      	cmp	r3, #224	; 0xe0
 8005816:	f040 80a6 	bne.w	8005966 <CAN_Rx_Process+0x186>
				if(Rx_data[6]==0x55 && identified==0){
 800581a:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <CAN_Rx_Process+0xe8>)
 800581c:	799b      	ldrb	r3, [r3, #6]
 800581e:	2b55      	cmp	r3, #85	; 0x55
 8005820:	d12f      	bne.n	8005882 <CAN_Rx_Process+0xa2>
 8005822:	4b2e      	ldr	r3, [pc, #184]	; (80058dc <CAN_Rx_Process+0xfc>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d12b      	bne.n	8005882 <CAN_Rx_Process+0xa2>
					Tx_Header.StdId = 0x0E2;
 800582a:	4b2d      	ldr	r3, [pc, #180]	; (80058e0 <CAN_Rx_Process+0x100>)
 800582c:	22e2      	movs	r2, #226	; 0xe2
 800582e:	601a      	str	r2, [r3, #0]
					Tx_data[0] = 1;
 8005830:	4b2c      	ldr	r3, [pc, #176]	; (80058e4 <CAN_Rx_Process+0x104>)
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = 2;
 8005836:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <CAN_Rx_Process+0x104>)
 8005838:	2202      	movs	r2, #2
 800583a:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = 3;
 800583c:	4b29      	ldr	r3, [pc, #164]	; (80058e4 <CAN_Rx_Process+0x104>)
 800583e:	2203      	movs	r2, #3
 8005840:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 4;
 8005842:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <CAN_Rx_Process+0x104>)
 8005844:	2204      	movs	r2, #4
 8005846:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 5;
 8005848:	4b26      	ldr	r3, [pc, #152]	; (80058e4 <CAN_Rx_Process+0x104>)
 800584a:	2205      	movs	r2, #5
 800584c:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 6;
 800584e:	4b25      	ldr	r3, [pc, #148]	; (80058e4 <CAN_Rx_Process+0x104>)
 8005850:	2206      	movs	r2, #6
 8005852:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0x55;
 8005854:	4b23      	ldr	r3, [pc, #140]	; (80058e4 <CAN_Rx_Process+0x104>)
 8005856:	2255      	movs	r2, #85	; 0x55
 8005858:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 8;
 800585a:	4b22      	ldr	r3, [pc, #136]	; (80058e4 <CAN_Rx_Process+0x104>)
 800585c:	2208      	movs	r2, #8
 800585e:	71da      	strb	r2, [r3, #7]

					Tx_Header.DLC = 8;
 8005860:	4b1f      	ldr	r3, [pc, #124]	; (80058e0 <CAN_Rx_Process+0x100>)
 8005862:	2208      	movs	r2, #8
 8005864:	611a      	str	r2, [r3, #16]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005866:	4b20      	ldr	r3, [pc, #128]	; (80058e8 <CAN_Rx_Process+0x108>)
 8005868:	4a1e      	ldr	r2, [pc, #120]	; (80058e4 <CAN_Rx_Process+0x104>)
 800586a:	491d      	ldr	r1, [pc, #116]	; (80058e0 <CAN_Rx_Process+0x100>)
 800586c:	4818      	ldr	r0, [pc, #96]	; (80058d0 <CAN_Rx_Process+0xf0>)
 800586e:	f003 f91f 	bl	8008ab0 <HAL_CAN_AddTxMessage>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d001      	beq.n	800587c <CAN_Rx_Process+0x9c>
 8005878:	f000 fe0c 	bl	8006494 <Error_Handler>
					identified = 1;
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <CAN_Rx_Process+0xfc>)
 800587e:	2201      	movs	r2, #1
 8005880:	701a      	strb	r2, [r3, #0]
				}

				if(Rx_data[6]==0xAA && identified==1){
 8005882:	4b11      	ldr	r3, [pc, #68]	; (80058c8 <CAN_Rx_Process+0xe8>)
 8005884:	799b      	ldrb	r3, [r3, #6]
 8005886:	2baa      	cmp	r3, #170	; 0xaa
 8005888:	d16d      	bne.n	8005966 <CAN_Rx_Process+0x186>
 800588a:	4b14      	ldr	r3, [pc, #80]	; (80058dc <CAN_Rx_Process+0xfc>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d169      	bne.n	8005966 <CAN_Rx_Process+0x186>
					Tx_data[6] = 0xAA;
 8005892:	4b14      	ldr	r3, [pc, #80]	; (80058e4 <CAN_Rx_Process+0x104>)
 8005894:	22aa      	movs	r2, #170	; 0xaa
 8005896:	719a      	strb	r2, [r3, #6]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005898:	4b13      	ldr	r3, [pc, #76]	; (80058e8 <CAN_Rx_Process+0x108>)
 800589a:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <CAN_Rx_Process+0x104>)
 800589c:	4910      	ldr	r1, [pc, #64]	; (80058e0 <CAN_Rx_Process+0x100>)
 800589e:	480c      	ldr	r0, [pc, #48]	; (80058d0 <CAN_Rx_Process+0xf0>)
 80058a0:	f003 f906 	bl	8008ab0 <HAL_CAN_AddTxMessage>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <CAN_Rx_Process+0xce>
 80058aa:	f000 fdf3 	bl	8006494 <Error_Handler>
					UNIQUE_Code = Rx_Header.ExtId & 0x000FFFFF;
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <CAN_Rx_Process+0xec>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058b6:	4a0d      	ldr	r2, [pc, #52]	; (80058ec <CAN_Rx_Process+0x10c>)
 80058b8:	6013      	str	r3, [r2, #0]
					Handshaking=1;
 80058ba:	4b07      	ldr	r3, [pc, #28]	; (80058d8 <CAN_Rx_Process+0xf8>)
 80058bc:	2201      	movs	r2, #1
 80058be:	701a      	strb	r2, [r3, #0]

					uint32_t Delay_Charger = 20000000;
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <CAN_Rx_Process+0x110>)
 80058c2:	607b      	str	r3, [r7, #4]
					while(Delay_Charger>0)
 80058c4:	e019      	b.n	80058fa <CAN_Rx_Process+0x11a>
 80058c6:	bf00      	nop
 80058c8:	20000bd0 	.word	0x20000bd0
 80058cc:	20000d84 	.word	0x20000d84
 80058d0:	20000bdc 	.word	0x20000bdc
 80058d4:	40020400 	.word	0x40020400
 80058d8:	2000025c 	.word	0x2000025c
 80058dc:	2000025d 	.word	0x2000025d
 80058e0:	20000da0 	.word	0x20000da0
 80058e4:	20000bc8 	.word	0x20000bc8
 80058e8:	20000bd8 	.word	0x20000bd8
 80058ec:	20000a58 	.word	0x20000a58
 80058f0:	01312d00 	.word	0x01312d00
					Delay_Charger--;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3b01      	subs	r3, #1
 80058f8:	607b      	str	r3, [r7, #4]
					while(Delay_Charger>0)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1f9      	bne.n	80058f4 <CAN_Rx_Process+0x114>
					Charger_Mode=1;
 8005900:	4b9c      	ldr	r3, [pc, #624]	; (8005b74 <CAN_Rx_Process+0x394>)
 8005902:	2201      	movs	r2, #1
 8005904:	701a      	strb	r2, [r3, #0]

					Tx_Header.StdId = 0x0C1;
 8005906:	4b9c      	ldr	r3, [pc, #624]	; (8005b78 <CAN_Rx_Process+0x398>)
 8005908:	22c1      	movs	r2, #193	; 0xc1
 800590a:	601a      	str	r2, [r3, #0]
					Tx_data[0] = UNIQUE_Code >> 12;
 800590c:	4b9b      	ldr	r3, [pc, #620]	; (8005b7c <CAN_Rx_Process+0x39c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	0b1b      	lsrs	r3, r3, #12
 8005912:	b2da      	uxtb	r2, r3
 8005914:	4b9a      	ldr	r3, [pc, #616]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005916:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = UNIQUE_Code >> 4;
 8005918:	4b98      	ldr	r3, [pc, #608]	; (8005b7c <CAN_Rx_Process+0x39c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	091b      	lsrs	r3, r3, #4
 800591e:	b2da      	uxtb	r2, r3
 8005920:	4b97      	ldr	r3, [pc, #604]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005922:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = UNIQUE_Code << 4;
 8005924:	4b95      	ldr	r3, [pc, #596]	; (8005b7c <CAN_Rx_Process+0x39c>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b94      	ldr	r3, [pc, #592]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005930:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 0;
 8005932:	4b93      	ldr	r3, [pc, #588]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005934:	2200      	movs	r2, #0
 8005936:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 0;
 8005938:	4b91      	ldr	r3, [pc, #580]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 800593a:	2200      	movs	r2, #0
 800593c:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 0;
 800593e:	4b90      	ldr	r3, [pc, #576]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005940:	2200      	movs	r2, #0
 8005942:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0;
 8005944:	4b8e      	ldr	r3, [pc, #568]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005946:	2200      	movs	r2, #0
 8005948:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 0;
 800594a:	4b8d      	ldr	r3, [pc, #564]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 800594c:	2200      	movs	r2, #0
 800594e:	71da      	strb	r2, [r3, #7]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005950:	4b8c      	ldr	r3, [pc, #560]	; (8005b84 <CAN_Rx_Process+0x3a4>)
 8005952:	4a8b      	ldr	r2, [pc, #556]	; (8005b80 <CAN_Rx_Process+0x3a0>)
 8005954:	4988      	ldr	r1, [pc, #544]	; (8005b78 <CAN_Rx_Process+0x398>)
 8005956:	488c      	ldr	r0, [pc, #560]	; (8005b88 <CAN_Rx_Process+0x3a8>)
 8005958:	f003 f8aa 	bl	8008ab0 <HAL_CAN_AddTxMessage>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <CAN_Rx_Process+0x186>
 8005962:	f000 fd97 	bl	8006494 <Error_Handler>
				}
			}
		}

		if(Handshaking==1){
 8005966:	4b89      	ldr	r3, [pc, #548]	; (8005b8c <CAN_Rx_Process+0x3ac>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b01      	cmp	r3, #1
 800596c:	f040 8180 	bne.w	8005c70 <CAN_Rx_Process+0x490>
		// CAN ID receive #1 (0x7b1)
		if(Rx_Header.ExtId == (0x0B0<<20|UNIQUE_Code)){
 8005970:	4b87      	ldr	r3, [pc, #540]	; (8005b90 <CAN_Rx_Process+0x3b0>)
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4b81      	ldr	r3, [pc, #516]	; (8005b7c <CAN_Rx_Process+0x39c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 800597c:	429a      	cmp	r2, r3
 800597e:	d11f      	bne.n	80059c0 <CAN_Rx_Process+0x1e0>
			Batt_voltage.m_bytes[1] = Rx_data[0];
 8005980:	4b84      	ldr	r3, [pc, #528]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	4b84      	ldr	r3, [pc, #528]	; (8005b98 <CAN_Rx_Process+0x3b8>)
 8005986:	705a      	strb	r2, [r3, #1]
			Batt_voltage.m_bytes[0] = Rx_data[1];
 8005988:	4b82      	ldr	r3, [pc, #520]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 800598a:	785a      	ldrb	r2, [r3, #1]
 800598c:	4b82      	ldr	r3, [pc, #520]	; (8005b98 <CAN_Rx_Process+0x3b8>)
 800598e:	701a      	strb	r2, [r3, #0]
			Batt_current.m_bytes[1] = Rx_data[2];
 8005990:	4b80      	ldr	r3, [pc, #512]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005992:	789a      	ldrb	r2, [r3, #2]
 8005994:	4b81      	ldr	r3, [pc, #516]	; (8005b9c <CAN_Rx_Process+0x3bc>)
 8005996:	705a      	strb	r2, [r3, #1]
			Batt_current.m_bytes[0] = Rx_data[3];
 8005998:	4b7e      	ldr	r3, [pc, #504]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 800599a:	78da      	ldrb	r2, [r3, #3]
 800599c:	4b7f      	ldr	r3, [pc, #508]	; (8005b9c <CAN_Rx_Process+0x3bc>)
 800599e:	701a      	strb	r2, [r3, #0]
			Batt_SOC.m_bytes[1] = Rx_data[4];
 80059a0:	4b7c      	ldr	r3, [pc, #496]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059a2:	791a      	ldrb	r2, [r3, #4]
 80059a4:	4b7e      	ldr	r3, [pc, #504]	; (8005ba0 <CAN_Rx_Process+0x3c0>)
 80059a6:	705a      	strb	r2, [r3, #1]
			Batt_SOC.m_bytes[0] = Rx_data[5];
 80059a8:	4b7a      	ldr	r3, [pc, #488]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059aa:	795a      	ldrb	r2, [r3, #5]
 80059ac:	4b7c      	ldr	r3, [pc, #496]	; (8005ba0 <CAN_Rx_Process+0x3c0>)
 80059ae:	701a      	strb	r2, [r3, #0]
			Batt_temp.m_bytes[1] = Rx_data[6];
 80059b0:	4b78      	ldr	r3, [pc, #480]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059b2:	799a      	ldrb	r2, [r3, #6]
 80059b4:	4b7b      	ldr	r3, [pc, #492]	; (8005ba4 <CAN_Rx_Process+0x3c4>)
 80059b6:	705a      	strb	r2, [r3, #1]
			Batt_temp.m_bytes[0] = Rx_data[7];
 80059b8:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059ba:	79da      	ldrb	r2, [r3, #7]
 80059bc:	4b79      	ldr	r3, [pc, #484]	; (8005ba4 <CAN_Rx_Process+0x3c4>)
 80059be:	701a      	strb	r2, [r3, #0]
		}

		// CAN ID receive #2 (0x7b2)
		if(Rx_Header.ExtId == (0x0B1<<20|UNIQUE_Code)){
 80059c0:	4b73      	ldr	r3, [pc, #460]	; (8005b90 <CAN_Rx_Process+0x3b0>)
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	4b6d      	ldr	r3, [pc, #436]	; (8005b7c <CAN_Rx_Process+0x39c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f043 6331 	orr.w	r3, r3, #185597952	; 0xb100000
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d161      	bne.n	8005a94 <CAN_Rx_Process+0x2b4>
			Batt_capacity.m_bytes[1] = Rx_data[0];
 80059d0:	4b70      	ldr	r3, [pc, #448]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059d2:	781a      	ldrb	r2, [r3, #0]
 80059d4:	4b74      	ldr	r3, [pc, #464]	; (8005ba8 <CAN_Rx_Process+0x3c8>)
 80059d6:	705a      	strb	r2, [r3, #1]
			Batt_capacity.m_bytes[0] = Rx_data[1];
 80059d8:	4b6e      	ldr	r3, [pc, #440]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059da:	785a      	ldrb	r2, [r3, #1]
 80059dc:	4b72      	ldr	r3, [pc, #456]	; (8005ba8 <CAN_Rx_Process+0x3c8>)
 80059de:	701a      	strb	r2, [r3, #0]
			Batt_SOH.m_bytes[1] = Rx_data[2];
 80059e0:	4b6c      	ldr	r3, [pc, #432]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059e2:	789a      	ldrb	r2, [r3, #2]
 80059e4:	4b71      	ldr	r3, [pc, #452]	; (8005bac <CAN_Rx_Process+0x3cc>)
 80059e6:	705a      	strb	r2, [r3, #1]
			Batt_SOH.m_bytes[0] = Rx_data[3];
 80059e8:	4b6a      	ldr	r3, [pc, #424]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059ea:	78da      	ldrb	r2, [r3, #3]
 80059ec:	4b6f      	ldr	r3, [pc, #444]	; (8005bac <CAN_Rx_Process+0x3cc>)
 80059ee:	701a      	strb	r2, [r3, #0]
			Batt_cycle.m_bytes[1] = Rx_data[4];
 80059f0:	4b68      	ldr	r3, [pc, #416]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059f2:	791a      	ldrb	r2, [r3, #4]
 80059f4:	4b6e      	ldr	r3, [pc, #440]	; (8005bb0 <CAN_Rx_Process+0x3d0>)
 80059f6:	705a      	strb	r2, [r3, #1]
			Batt_cycle.m_bytes[0] = Rx_data[5];
 80059f8:	4b66      	ldr	r3, [pc, #408]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 80059fa:	795a      	ldrb	r2, [r3, #5]
 80059fc:	4b6c      	ldr	r3, [pc, #432]	; (8005bb0 <CAN_Rx_Process+0x3d0>)
 80059fe:	701a      	strb	r2, [r3, #0]

			flag_trip_shortcircuit = Rx_data[6]&0x01;
 8005a00:	4b64      	ldr	r3, [pc, #400]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a02:	799b      	ldrb	r3, [r3, #6]
 8005a04:	f003 0301 	and.w	r3, r3, #1
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	4b6a      	ldr	r3, [pc, #424]	; (8005bb4 <CAN_Rx_Process+0x3d4>)
 8005a0c:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentdischarge = (Rx_data[6]>>1)&0x01;
 8005a0e:	4b61      	ldr	r3, [pc, #388]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a10:	799b      	ldrb	r3, [r3, #6]
 8005a12:	085b      	lsrs	r3, r3, #1
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	b2da      	uxtb	r2, r3
 8005a1c:	4b66      	ldr	r3, [pc, #408]	; (8005bb8 <CAN_Rx_Process+0x3d8>)
 8005a1e:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentcharge = (Rx_data[6]>>2)&0x01;
 8005a20:	4b5c      	ldr	r3, [pc, #368]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a22:	799b      	ldrb	r3, [r3, #6]
 8005a24:	089b      	lsrs	r3, r3, #2
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	b2da      	uxtb	r2, r3
 8005a2e:	4b63      	ldr	r3, [pc, #396]	; (8005bbc <CAN_Rx_Process+0x3dc>)
 8005a30:	701a      	strb	r2, [r3, #0]
			flag_trip_overtemperature = (Rx_data[6]>>3)&0x01;
 8005a32:	4b58      	ldr	r3, [pc, #352]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a34:	799b      	ldrb	r3, [r3, #6]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0301 	and.w	r3, r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	4b5f      	ldr	r3, [pc, #380]	; (8005bc0 <CAN_Rx_Process+0x3e0>)
 8005a42:	701a      	strb	r2, [r3, #0]
			flag_trip_undertemperature = (Rx_data[6]>>4)&0x01;
 8005a44:	4b53      	ldr	r3, [pc, #332]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a46:	799b      	ldrb	r3, [r3, #6]
 8005a48:	091b      	lsrs	r3, r3, #4
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4b5c      	ldr	r3, [pc, #368]	; (8005bc4 <CAN_Rx_Process+0x3e4>)
 8005a54:	701a      	strb	r2, [r3, #0]
//			flag_trip_overtemperature = (Rx_data[6]>>5)&0x01;
//			flag_trip_undertemperature = (Rx_data[6]>>6)&0x01;
			flag_trip_unbalance = (Rx_data[6]>>7)&0x01;
 8005a56:	4b4f      	ldr	r3, [pc, #316]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a58:	799b      	ldrb	r3, [r3, #6]
 8005a5a:	09db      	lsrs	r3, r3, #7
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4b5a      	ldr	r3, [pc, #360]	; (8005bc8 <CAN_Rx_Process+0x3e8>)
 8005a60:	701a      	strb	r2, [r3, #0]

			flag_trip_undervoltage = Rx_data[7]&0x01;
 8005a62:	4b4c      	ldr	r3, [pc, #304]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005a64:	79db      	ldrb	r3, [r3, #7]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b57      	ldr	r3, [pc, #348]	; (8005bcc <CAN_Rx_Process+0x3ec>)
 8005a6e:	701a      	strb	r2, [r3, #0]
			flag_trip_overvoltage = (Rx_data[7]<<1)&0x01;
 8005a70:	4b57      	ldr	r3, [pc, #348]	; (8005bd0 <CAN_Rx_Process+0x3f0>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
			flag_trip_SOCOverDischarge = (Rx_data[7]<<2)&0x01;
 8005a76:	4b57      	ldr	r3, [pc, #348]	; (8005bd4 <CAN_Rx_Process+0x3f4>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	701a      	strb	r2, [r3, #0]
			flag_trip_systemfailure = (Rx_data[7]<<3)&0x01;
 8005a7c:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <CAN_Rx_Process+0x3f8>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	701a      	strb	r2, [r3, #0]
			charge_state = (Rx_data[7]<<4)&0x01;
 8005a82:	4b56      	ldr	r3, [pc, #344]	; (8005bdc <CAN_Rx_Process+0x3fc>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	701a      	strb	r2, [r3, #0]
			discharge_state = (Rx_data[7]<<5)&0x01;
 8005a88:	4b55      	ldr	r3, [pc, #340]	; (8005be0 <CAN_Rx_Process+0x400>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
			sleep_state = (Rx_data[7]<<6)&0x01;
 8005a8e:	4b55      	ldr	r3, [pc, #340]	; (8005be4 <CAN_Rx_Process+0x404>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	701a      	strb	r2, [r3, #0]
		}


		// *********************** Start Cell  Voltage Data Send ******************************
		if(Rx_Header.ExtId == (0x0B4<<20|UNIQUE_Code)){
 8005a94:	4b3e      	ldr	r3, [pc, #248]	; (8005b90 <CAN_Rx_Process+0x3b0>)
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	4b38      	ldr	r3, [pc, #224]	; (8005b7c <CAN_Rx_Process+0x39c>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f043 6334 	orr.w	r3, r3, #188743680	; 0xb400000
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d11f      	bne.n	8005ae4 <CAN_Rx_Process+0x304>
			vcell_15databyte[0].m_bytes[1] = Rx_data[0];
 8005aa4:	4b3b      	ldr	r3, [pc, #236]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005aaa:	705a      	strb	r2, [r3, #1]
			vcell_15databyte[0].m_bytes[0] = Rx_data[1];
 8005aac:	4b39      	ldr	r3, [pc, #228]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005aae:	785a      	ldrb	r2, [r3, #1]
 8005ab0:	4b4d      	ldr	r3, [pc, #308]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005ab2:	701a      	strb	r2, [r3, #0]
			vcell_15databyte[1].m_bytes[1] = Rx_data[2];
 8005ab4:	4b37      	ldr	r3, [pc, #220]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005ab6:	789a      	ldrb	r2, [r3, #2]
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005aba:	715a      	strb	r2, [r3, #5]
			vcell_15databyte[1].m_bytes[0] = Rx_data[3];
 8005abc:	4b35      	ldr	r3, [pc, #212]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005abe:	78da      	ldrb	r2, [r3, #3]
 8005ac0:	4b49      	ldr	r3, [pc, #292]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005ac2:	711a      	strb	r2, [r3, #4]
			vcell_15databyte[2].m_bytes[1] = Rx_data[4];
 8005ac4:	4b33      	ldr	r3, [pc, #204]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005ac6:	791a      	ldrb	r2, [r3, #4]
 8005ac8:	4b47      	ldr	r3, [pc, #284]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005aca:	725a      	strb	r2, [r3, #9]
			vcell_15databyte[2].m_bytes[0] = Rx_data[5];
 8005acc:	4b31      	ldr	r3, [pc, #196]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005ace:	795a      	ldrb	r2, [r3, #5]
 8005ad0:	4b45      	ldr	r3, [pc, #276]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005ad2:	721a      	strb	r2, [r3, #8]
			vcell_15databyte[3].m_bytes[1] = Rx_data[6];
 8005ad4:	4b2f      	ldr	r3, [pc, #188]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005ad6:	799a      	ldrb	r2, [r3, #6]
 8005ad8:	4b43      	ldr	r3, [pc, #268]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005ada:	735a      	strb	r2, [r3, #13]
			vcell_15databyte[3].m_bytes[0] = Rx_data[7];
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005ade:	79da      	ldrb	r2, [r3, #7]
 8005ae0:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005ae2:	731a      	strb	r2, [r3, #12]
		}

		if(Rx_Header.ExtId == (0x0B5<<20|UNIQUE_Code)){
 8005ae4:	4b2a      	ldr	r3, [pc, #168]	; (8005b90 <CAN_Rx_Process+0x3b0>)
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	4b24      	ldr	r3, [pc, #144]	; (8005b7c <CAN_Rx_Process+0x39c>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f043 6335 	orr.w	r3, r3, #189792256	; 0xb500000
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d11f      	bne.n	8005b34 <CAN_Rx_Process+0x354>
			vcell_15databyte[4].m_bytes[1] = Rx_data[0];
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	4b3b      	ldr	r3, [pc, #236]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005afa:	745a      	strb	r2, [r3, #17]
			vcell_15databyte[4].m_bytes[0] = Rx_data[1];
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005afe:	785a      	ldrb	r2, [r3, #1]
 8005b00:	4b39      	ldr	r3, [pc, #228]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b02:	741a      	strb	r2, [r3, #16]
			vcell_15databyte[5].m_bytes[1] = Rx_data[2];
 8005b04:	4b23      	ldr	r3, [pc, #140]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b06:	789a      	ldrb	r2, [r3, #2]
 8005b08:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b0a:	755a      	strb	r2, [r3, #21]
			vcell_15databyte[5].m_bytes[0] = Rx_data[3];
 8005b0c:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b0e:	78da      	ldrb	r2, [r3, #3]
 8005b10:	4b35      	ldr	r3, [pc, #212]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b12:	751a      	strb	r2, [r3, #20]
			vcell_15databyte[6].m_bytes[1] = Rx_data[4];
 8005b14:	4b1f      	ldr	r3, [pc, #124]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b16:	791a      	ldrb	r2, [r3, #4]
 8005b18:	4b33      	ldr	r3, [pc, #204]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b1a:	765a      	strb	r2, [r3, #25]
			vcell_15databyte[6].m_bytes[0] = Rx_data[5];
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b1e:	795a      	ldrb	r2, [r3, #5]
 8005b20:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b22:	761a      	strb	r2, [r3, #24]
			vcell_15databyte[7].m_bytes[1] = Rx_data[6];
 8005b24:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b26:	799a      	ldrb	r2, [r3, #6]
 8005b28:	4b2f      	ldr	r3, [pc, #188]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b2a:	775a      	strb	r2, [r3, #29]
			vcell_15databyte[7].m_bytes[0] = Rx_data[7];
 8005b2c:	4b19      	ldr	r3, [pc, #100]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b2e:	79da      	ldrb	r2, [r3, #7]
 8005b30:	4b2d      	ldr	r3, [pc, #180]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b32:	771a      	strb	r2, [r3, #28]
		}

		if(Rx_Header.ExtId == (0x0B6<<20|UNIQUE_Code)){
 8005b34:	4b16      	ldr	r3, [pc, #88]	; (8005b90 <CAN_Rx_Process+0x3b0>)
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	4b10      	ldr	r3, [pc, #64]	; (8005b7c <CAN_Rx_Process+0x39c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f043 6336 	orr.w	r3, r3, #190840832	; 0xb600000
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d165      	bne.n	8005c10 <CAN_Rx_Process+0x430>
			vcell_15databyte[8].m_bytes[1] = Rx_data[0];
 8005b44:	4b13      	ldr	r3, [pc, #76]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			vcell_15databyte[8].m_bytes[0] = Rx_data[1];
 8005b4e:	4b11      	ldr	r3, [pc, #68]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b50:	785a      	ldrb	r2, [r3, #1]
 8005b52:	4b25      	ldr	r3, [pc, #148]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b54:	f883 2020 	strb.w	r2, [r3, #32]
			vcell_15databyte[9].m_bytes[1] = Rx_data[2];
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b5a:	789a      	ldrb	r2, [r3, #2]
 8005b5c:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			vcell_15databyte[9].m_bytes[0] = Rx_data[3];
 8005b62:	4b0c      	ldr	r3, [pc, #48]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b64:	78da      	ldrb	r2, [r3, #3]
 8005b66:	4b20      	ldr	r3, [pc, #128]	; (8005be8 <CAN_Rx_Process+0x408>)
 8005b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			vcell_15databyte[10].m_bytes[1] = Rx_data[4];
 8005b6c:	4b09      	ldr	r3, [pc, #36]	; (8005b94 <CAN_Rx_Process+0x3b4>)
 8005b6e:	791a      	ldrb	r2, [r3, #4]
 8005b70:	e03c      	b.n	8005bec <CAN_Rx_Process+0x40c>
 8005b72:	bf00      	nop
 8005b74:	200007a8 	.word	0x200007a8
 8005b78:	20000da0 	.word	0x20000da0
 8005b7c:	20000a58 	.word	0x20000a58
 8005b80:	20000bc8 	.word	0x20000bc8
 8005b84:	20000bd8 	.word	0x20000bd8
 8005b88:	20000bdc 	.word	0x20000bdc
 8005b8c:	2000025c 	.word	0x2000025c
 8005b90:	20000d84 	.word	0x20000d84
 8005b94:	20000bd0 	.word	0x20000bd0
 8005b98:	20000b1c 	.word	0x20000b1c
 8005b9c:	20000910 	.word	0x20000910
 8005ba0:	20000a00 	.word	0x20000a00
 8005ba4:	20000a48 	.word	0x20000a48
 8005ba8:	20000acc 	.word	0x20000acc
 8005bac:	20000754 	.word	0x20000754
 8005bb0:	200008f0 	.word	0x200008f0
 8005bb4:	20000760 	.word	0x20000760
 8005bb8:	20000904 	.word	0x20000904
 8005bbc:	20000a54 	.word	0x20000a54
 8005bc0:	200007a9 	.word	0x200007a9
 8005bc4:	200008dc 	.word	0x200008dc
 8005bc8:	20000681 	.word	0x20000681
 8005bcc:	200008e0 	.word	0x200008e0
 8005bd0:	20000aec 	.word	0x20000aec
 8005bd4:	20000a6c 	.word	0x20000a6c
 8005bd8:	20000780 	.word	0x20000780
 8005bdc:	20000a84 	.word	0x20000a84
 8005be0:	200007c8 	.word	0x200007c8
 8005be4:	20000af4 	.word	0x20000af4
 8005be8:	20000a04 	.word	0x20000a04
 8005bec:	4b22      	ldr	r3, [pc, #136]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005bee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			vcell_15databyte[10].m_bytes[0] = Rx_data[5];
 8005bf2:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005bf4:	795a      	ldrb	r2, [r3, #5]
 8005bf6:	4b20      	ldr	r3, [pc, #128]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005bf8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			vcell_15databyte[11].m_bytes[1] = Rx_data[6];
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005bfe:	799a      	ldrb	r2, [r3, #6]
 8005c00:	4b1d      	ldr	r3, [pc, #116]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			vcell_15databyte[11].m_bytes[0] = Rx_data[7];
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c08:	79da      	ldrb	r2, [r3, #7]
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c0c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}

		if(Rx_Header.ExtId == (0x0B7<<20|UNIQUE_Code)){
 8005c10:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <CAN_Rx_Process+0x4a0>)
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <CAN_Rx_Process+0x4a4>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f043 6337 	orr.w	r3, r3, #191889408	; 0xb700000
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d127      	bne.n	8005c70 <CAN_Rx_Process+0x490>
			vcell_15databyte[12].m_bytes[1] = Rx_data[0];
 8005c20:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c22:	781a      	ldrb	r2, [r3, #0]
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			vcell_15databyte[12].m_bytes[0] = Rx_data[1];
 8005c2a:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c2c:	785a      	ldrb	r2, [r3, #1]
 8005c2e:	4b12      	ldr	r3, [pc, #72]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			vcell_15databyte[13].m_bytes[1] = Rx_data[2];
 8005c34:	4b11      	ldr	r3, [pc, #68]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c36:	789a      	ldrb	r2, [r3, #2]
 8005c38:	4b0f      	ldr	r3, [pc, #60]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			vcell_15databyte[13].m_bytes[0] = Rx_data[3];
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c40:	78da      	ldrb	r2, [r3, #3]
 8005c42:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			vcell_15databyte[14].m_bytes[1] = Rx_data[4];
 8005c48:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c4a:	791a      	ldrb	r2, [r3, #4]
 8005c4c:	4b0a      	ldr	r3, [pc, #40]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			vcell_15databyte[14].m_bytes[0] = Rx_data[5];
 8005c52:	4b0a      	ldr	r3, [pc, #40]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c54:	795a      	ldrb	r2, [r3, #5]
 8005c56:	4b08      	ldr	r3, [pc, #32]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			vcell_15databyte[15].m_bytes[1] = Rx_data[6];
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c5e:	799a      	ldrb	r2, [r3, #6]
 8005c60:	4b05      	ldr	r3, [pc, #20]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			vcell_15databyte[15].m_bytes[0] = Rx_data[7];
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <CAN_Rx_Process+0x49c>)
 8005c68:	79da      	ldrb	r2, [r3, #7]
 8005c6a:	4b03      	ldr	r3, [pc, #12]	; (8005c78 <CAN_Rx_Process+0x498>)
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
		}
		// ******************************End Cell  Voltage Data Send**************************************
	}
}
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20000a04 	.word	0x20000a04
 8005c7c:	20000bd0 	.word	0x20000bd0
 8005c80:	20000d84 	.word	0x20000d84
 8005c84:	20000a58 	.word	0x20000a58

08005c88 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	4b0c      	ldr	r3, [pc, #48]	; (8005cc4 <MX_DMA_Init+0x3c>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c96:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <MX_DMA_Init+0x3c>)
 8005c98:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <MX_DMA_Init+0x3c>)
 8005ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005caa:	2200      	movs	r2, #0
 8005cac:	2100      	movs	r1, #0
 8005cae:	2038      	movs	r0, #56	; 0x38
 8005cb0:	f003 fbe7 	bl	8009482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005cb4:	2038      	movs	r0, #56	; 0x38
 8005cb6:	f003 fc00 	bl	80094ba <HAL_NVIC_EnableIRQ>

}
 8005cba:	bf00      	nop
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	40023800 	.word	0x40023800

08005cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cce:	f107 030c 	add.w	r3, r7, #12
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	605a      	str	r2, [r3, #4]
 8005cd8:	609a      	str	r2, [r3, #8]
 8005cda:	60da      	str	r2, [r3, #12]
 8005cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60bb      	str	r3, [r7, #8]
 8005ce2:	4b31      	ldr	r3, [pc, #196]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce6:	4a30      	ldr	r2, [pc, #192]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005ce8:	f043 0304 	orr.w	r3, r3, #4
 8005cec:	6313      	str	r3, [r2, #48]	; 0x30
 8005cee:	4b2e      	ldr	r3, [pc, #184]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	607b      	str	r3, [r7, #4]
 8005cfe:	4b2a      	ldr	r3, [pc, #168]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005d04:	f043 0301 	orr.w	r3, r3, #1
 8005d08:	6313      	str	r3, [r2, #48]	; 0x30
 8005d0a:	4b27      	ldr	r3, [pc, #156]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	607b      	str	r3, [r7, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d16:	2300      	movs	r3, #0
 8005d18:	603b      	str	r3, [r7, #0]
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	4a22      	ldr	r2, [pc, #136]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005d20:	f043 0302 	orr.w	r3, r3, #2
 8005d24:	6313      	str	r3, [r2, #48]	; 0x30
 8005d26:	4b20      	ldr	r3, [pc, #128]	; (8005da8 <MX_GPIO_Init+0xe0>)
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	f003 0302 	and.w	r3, r3, #2
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin|Led3_Pin, GPIO_PIN_RESET);
 8005d32:	2200      	movs	r2, #0
 8005d34:	f248 0140 	movw	r1, #32832	; 0x8040
 8005d38:	481c      	ldr	r0, [pc, #112]	; (8005dac <MX_GPIO_Init+0xe4>)
 8005d3a:	f004 f91c 	bl	8009f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005d44:	481a      	ldr	r0, [pc, #104]	; (8005db0 <MX_GPIO_Init+0xe8>)
 8005d46:	f004 f916 	bl	8009f76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Buzzer_Pin|Led3_Pin;
 8005d4a:	f248 0340 	movw	r3, #32832	; 0x8040
 8005d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d50:	2301      	movs	r3, #1
 8005d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d5c:	f107 030c 	add.w	r3, r7, #12
 8005d60:	4619      	mov	r1, r3
 8005d62:	4812      	ldr	r0, [pc, #72]	; (8005dac <MX_GPIO_Init+0xe4>)
 8005d64:	f003 ff52 	bl	8009c0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 8005d68:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005d6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7a:	f107 030c 	add.w	r3, r7, #12
 8005d7e:	4619      	mov	r1, r3
 8005d80:	480b      	ldr	r0, [pc, #44]	; (8005db0 <MX_GPIO_Init+0xe8>)
 8005d82:	f003 ff43 	bl	8009c0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8005d86:	2380      	movs	r3, #128	; 0x80
 8005d88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8005d92:	f107 030c 	add.w	r3, r7, #12
 8005d96:	4619      	mov	r1, r3
 8005d98:	4804      	ldr	r0, [pc, #16]	; (8005dac <MX_GPIO_Init+0xe4>)
 8005d9a:	f003 ff37 	bl	8009c0c <HAL_GPIO_Init>

}
 8005d9e:	bf00      	nop
 8005da0:	3720      	adds	r7, #32
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800
 8005dac:	40020800 	.word	0x40020800
 8005db0:	40020400 	.word	0x40020400

08005db4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005db8:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <MX_I2C1_Init+0x54>)
 8005dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dc0:	4a12      	ldr	r2, [pc, #72]	; (8005e0c <MX_I2C1_Init+0x58>)
 8005dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005dca:	4b0e      	ldr	r3, [pc, #56]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005dd8:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005dde:	4b09      	ldr	r3, [pc, #36]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005dea:	4b06      	ldr	r3, [pc, #24]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005df0:	4804      	ldr	r0, [pc, #16]	; (8005e04 <MX_I2C1_Init+0x50>)
 8005df2:	f004 f8f1 	bl	8009fd8 <HAL_I2C_Init>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005dfc:	f000 fb4a 	bl	8006494 <Error_Handler>
  }

}
 8005e00:	bf00      	nop
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	20000c04 	.word	0x20000c04
 8005e08:	40005400 	.word	0x40005400
 8005e0c:	000186a0 	.word	0x000186a0

08005e10 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005e14:	4b12      	ldr	r3, [pc, #72]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e16:	4a13      	ldr	r2, [pc, #76]	; (8005e64 <MX_I2C2_Init+0x54>)
 8005e18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005e1a:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e1c:	4a12      	ldr	r2, [pc, #72]	; (8005e68 <MX_I2C2_Init+0x58>)
 8005e1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005e20:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005e26:	4b0e      	ldr	r3, [pc, #56]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005e2c:	4b0c      	ldr	r3, [pc, #48]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005e32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005e34:	4b0a      	ldr	r3, [pc, #40]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005e3a:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005e40:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005e46:	4b06      	ldr	r3, [pc, #24]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005e4c:	4804      	ldr	r0, [pc, #16]	; (8005e60 <MX_I2C2_Init+0x50>)
 8005e4e:	f004 f8c3 	bl	8009fd8 <HAL_I2C_Init>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005e58:	f000 fb1c 	bl	8006494 <Error_Handler>
  }

}
 8005e5c:	bf00      	nop
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000c58 	.word	0x20000c58
 8005e64:	40005800 	.word	0x40005800
 8005e68:	00061a80 	.word	0x00061a80

08005e6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	; 0x30
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e74:	f107 031c 	add.w	r3, r7, #28
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
 8005e7c:	605a      	str	r2, [r3, #4]
 8005e7e:	609a      	str	r2, [r3, #8]
 8005e80:	60da      	str	r2, [r3, #12]
 8005e82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <HAL_I2C_MspInit+0xec>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d12d      	bne.n	8005eea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	4b32      	ldr	r3, [pc, #200]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4a31      	ldr	r2, [pc, #196]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005e98:	f043 0302 	orr.w	r3, r3, #2
 8005e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9e:	4b2f      	ldr	r3, [pc, #188]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005eaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005eb0:	2312      	movs	r3, #18
 8005eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ec0:	f107 031c 	add.w	r3, r7, #28
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	4826      	ldr	r0, [pc, #152]	; (8005f60 <HAL_I2C_MspInit+0xf4>)
 8005ec8:	f003 fea0 	bl	8009c0c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	4b22      	ldr	r3, [pc, #136]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005ed6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005eda:	6413      	str	r3, [r2, #64]	; 0x40
 8005edc:	4b1f      	ldr	r3, [pc, #124]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005ee8:	e031      	b.n	8005f4e <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1d      	ldr	r2, [pc, #116]	; (8005f64 <HAL_I2C_MspInit+0xf8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d12c      	bne.n	8005f4e <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	4a17      	ldr	r2, [pc, #92]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005efe:	f043 0302 	orr.w	r3, r3, #2
 8005f02:	6313      	str	r3, [r2, #48]	; 0x30
 8005f04:	4b15      	ldr	r3, [pc, #84]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f16:	2312      	movs	r3, #18
 8005f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005f22:	2304      	movs	r3, #4
 8005f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f26:	f107 031c 	add.w	r3, r7, #28
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	480c      	ldr	r0, [pc, #48]	; (8005f60 <HAL_I2C_MspInit+0xf4>)
 8005f2e:	f003 fe6d 	bl	8009c0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	4a08      	ldr	r2, [pc, #32]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005f3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f40:	6413      	str	r3, [r2, #64]	; 0x40
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_I2C_MspInit+0xf0>)
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
}
 8005f4e:	bf00      	nop
 8005f50:	3730      	adds	r7, #48	; 0x30
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	40005400 	.word	0x40005400
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	40020400 	.word	0x40020400
 8005f64:	40005800 	.word	0x40005800

08005f68 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <MX_IWDG_Init+0x2c>)
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <MX_IWDG_Init+0x30>)
 8005f70:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8005f72:	4b08      	ldr	r3, [pc, #32]	; (8005f94 <MX_IWDG_Init+0x2c>)
 8005f74:	2204      	movs	r2, #4
 8005f76:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8005f78:	4b06      	ldr	r3, [pc, #24]	; (8005f94 <MX_IWDG_Init+0x2c>)
 8005f7a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005f7e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005f80:	4804      	ldr	r0, [pc, #16]	; (8005f94 <MX_IWDG_Init+0x2c>)
 8005f82:	f004 ff23 	bl	800adcc <HAL_IWDG_Init>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8005f8c:	f000 fa82 	bl	8006494 <Error_Handler>
  }

}
 8005f90:	bf00      	nop
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	20000cac 	.word	0x20000cac
 8005f98:	40003000 	.word	0x40003000

08005f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005fa0:	f001 ff08 	bl	8007db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fa4:	f000 f840 	bl	8006028 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005fa8:	f7ff fe8e 	bl	8005cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005fac:	f7ff fe6c 	bl	8005c88 <MX_DMA_Init>
  MX_I2C2_Init();
 8005fb0:	f7ff ff2e 	bl	8005e10 <MX_I2C2_Init>
  MX_TIM1_Init();
 8005fb4:	f001 fbba 	bl	800772c <MX_TIM1_Init>
  MX_CAN1_Init();
 8005fb8:	f7ff fb4a 	bl	8005650 <MX_CAN1_Init>
  MX_I2C1_Init();
 8005fbc:	f7ff fefa 	bl	8005db4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8005fc0:	f001 fe16 	bl	8007bf0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8005fc4:	f7ff fa28 	bl	8005418 <MX_ADC1_Init>
  MX_TIM2_Init();
 8005fc8:	f001 fc50 	bl	800786c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8005fcc:	f001 fde6 	bl	8007b9c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8005fd0:	f001 fc98 	bl	8007904 <MX_TIM3_Init>
  MX_IWDG_Init();
 8005fd4:	f7ff ffc8 	bl	8005f68 <MX_IWDG_Init>
  MX_TIM4_Init();
 8005fd8:	f001 fce2 	bl	80079a0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  Charger_Mode = 0;
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <main+0x80>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	701a      	strb	r2, [r3, #0]
  Eror_Code = 0;
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <main+0x84>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
  CHARGER_ON_Init();
 8005fe8:	f000 f898 	bl	800611c <CHARGER_ON_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  EEPROM_isDeviceReady(0XA0);
  EEPROM_WriteData(10, 15);
 8005fec:	210f      	movs	r1, #15
 8005fee:	200a      	movs	r0, #10
 8005ff0:	f7ff f9f4 	bl	80053dc <EEPROM_WriteData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Charger_Mode==1) 		Display_ChargeMode();
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <main+0x80>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d102      	bne.n	8006002 <main+0x66>
 8005ffc:	f000 f950 	bl	80062a0 <Display_ChargeMode>
 8006000:	e008      	b.n	8006014 <main+0x78>
	  else if (Charger_Mode==2)	Display_ProtectionMode();
 8006002:	4b06      	ldr	r3, [pc, #24]	; (800601c <main+0x80>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d102      	bne.n	8006010 <main+0x74>
 800600a:	f000 f91d 	bl	8006248 <Display_ProtectionMode>
 800600e:	e001      	b.n	8006014 <main+0x78>
	  else						Display_StanbyMode();
 8006010:	f000 f904 	bl	800621c <Display_StanbyMode>

	  HAL_IWDG_Refresh(&hiwdg);
 8006014:	4803      	ldr	r0, [pc, #12]	; (8006024 <main+0x88>)
 8006016:	f004 ff12 	bl	800ae3e <HAL_IWDG_Refresh>
	  if(Charger_Mode==1) 		Display_ChargeMode();
 800601a:	e7eb      	b.n	8005ff4 <main+0x58>
 800601c:	200007a8 	.word	0x200007a8
 8006020:	20000680 	.word	0x20000680
 8006024:	20000cac 	.word	0x20000cac

08006028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b092      	sub	sp, #72	; 0x48
 800602c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800602e:	f107 0318 	add.w	r3, r7, #24
 8006032:	2230      	movs	r2, #48	; 0x30
 8006034:	2100      	movs	r1, #0
 8006036:	4618      	mov	r0, r3
 8006038:	f006 ff30 	bl	800ce9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800603c:	1d3b      	adds	r3, r7, #4
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	609a      	str	r2, [r3, #8]
 8006046:	60da      	str	r2, [r3, #12]
 8006048:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800604a:	230a      	movs	r3, #10
 800604c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800604e:	2301      	movs	r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006052:	2310      	movs	r3, #16
 8006054:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006056:	2301      	movs	r3, #1
 8006058:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800605a:	2302      	movs	r3, #2
 800605c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8006062:	230d      	movs	r3, #13
 8006064:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8006066:	23c3      	movs	r3, #195	; 0xc3
 8006068:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800606a:	2302      	movs	r3, #2
 800606c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800606e:	2304      	movs	r3, #4
 8006070:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006072:	f107 0318 	add.w	r3, r7, #24
 8006076:	4618      	mov	r0, r3
 8006078:	f004 fef0 	bl	800ae5c <HAL_RCC_OscConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8006082:	f000 fa07 	bl	8006494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006086:	230f      	movs	r3, #15
 8006088:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800608a:	2302      	movs	r3, #2
 800608c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800608e:	2300      	movs	r3, #0
 8006090:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006092:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006098:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800609c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800609e:	1d3b      	adds	r3, r7, #4
 80060a0:	2103      	movs	r1, #3
 80060a2:	4618      	mov	r0, r3
 80060a4:	f005 f944 	bl	800b330 <HAL_RCC_ClockConfig>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80060ae:	f000 f9f1 	bl	8006494 <Error_Handler>
  }
}
 80060b2:	bf00      	nop
 80060b4:	3748      	adds	r7, #72	; 0x48
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
	...

080060bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a0d      	ldr	r2, [pc, #52]	; (8006100 <HAL_ADC_ConvCpltCallback+0x44>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d113      	bne.n	80060f6 <HAL_ADC_ConvCpltCallback+0x3a>
	{
		ADC_voltagen = ADC_value[0];
 80060ce:	4b0d      	ldr	r3, [pc, #52]	; (8006104 <HAL_ADC_ConvCpltCallback+0x48>)
 80060d0:	881a      	ldrh	r2, [r3, #0]
 80060d2:	4b0d      	ldr	r3, [pc, #52]	; (8006108 <HAL_ADC_ConvCpltCallback+0x4c>)
 80060d4:	801a      	strh	r2, [r3, #0]
		ADC_voltagep = ADC_value[1];
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_ADC_ConvCpltCallback+0x48>)
 80060d8:	885a      	ldrh	r2, [r3, #2]
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_ADC_ConvCpltCallback+0x50>)
 80060dc:	801a      	strh	r2, [r3, #0]
		ADC_current = ADC_value[2];
 80060de:	4b09      	ldr	r3, [pc, #36]	; (8006104 <HAL_ADC_ConvCpltCallback+0x48>)
 80060e0:	889a      	ldrh	r2, [r3, #4]
 80060e2:	4b0b      	ldr	r3, [pc, #44]	; (8006110 <HAL_ADC_ConvCpltCallback+0x54>)
 80060e4:	801a      	strh	r2, [r3, #0]
		ADC_temp1 = ADC_value[3];
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <HAL_ADC_ConvCpltCallback+0x48>)
 80060e8:	88da      	ldrh	r2, [r3, #6]
 80060ea:	4b0a      	ldr	r3, [pc, #40]	; (8006114 <HAL_ADC_ConvCpltCallback+0x58>)
 80060ec:	801a      	strh	r2, [r3, #0]
		ADC_temp2 = ADC_value[4];
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <HAL_ADC_ConvCpltCallback+0x48>)
 80060f0:	891a      	ldrh	r2, [r3, #8]
 80060f2:	4b09      	ldr	r3, [pc, #36]	; (8006118 <HAL_ADC_ConvCpltCallback+0x5c>)
 80060f4:	801a      	strh	r2, [r3, #0]
	}
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr
 8006100:	40012000 	.word	0x40012000
 8006104:	200008b4 	.word	0x200008b4
 8006108:	200008de 	.word	0x200008de
 800610c:	20000a60 	.word	0x20000a60
 8006110:	20000a86 	.word	0x20000a86
 8006114:	200008a4 	.word	0x200008a4
 8006118:	2000074c 	.word	0x2000074c

0800611c <CHARGER_ON_Init>:

void CHARGER_ON_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8006120:	f000 f9be 	bl	80064a0 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006124:	2000      	movs	r0, #0
 8006126:	f000 faa9 	bl	800667c <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800612a:	f000 fa79 	bl	8006620 <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 800612e:	2201      	movs	r2, #1
 8006130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006134:	4830      	ldr	r0, [pc, #192]	; (80061f8 <CHARGER_ON_Init+0xdc>)
 8006136:	f003 ff1e 	bl	8009f76 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800613a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800613e:	f001 fea7 	bl	8007e90 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006146:	482c      	ldr	r0, [pc, #176]	; (80061f8 <CHARGER_ON_Init+0xdc>)
 8006148:	f003 ff2d 	bl	8009fa6 <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 800614c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006150:	f001 fe9e 	bl	8007e90 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006154:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006158:	4827      	ldr	r0, [pc, #156]	; (80061f8 <CHARGER_ON_Init+0xdc>)
 800615a:	f003 ff24 	bl	8009fa6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800615e:	2064      	movs	r0, #100	; 0x64
 8006160:	f001 fe96 	bl	8007e90 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006168:	4823      	ldr	r0, [pc, #140]	; (80061f8 <CHARGER_ON_Init+0xdc>)
 800616a:	f003 ff1c 	bl	8009fa6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800616e:	2064      	movs	r0, #100	; 0x64
 8006170:	f001 fe8e 	bl	8007e90 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006174:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006178:	481f      	ldr	r0, [pc, #124]	; (80061f8 <CHARGER_ON_Init+0xdc>)
 800617a:	f003 ff14 	bl	8009fa6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800617e:	2064      	movs	r0, #100	; 0x64
 8006180:	f001 fe86 	bl	8007e90 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006188:	481b      	ldr	r0, [pc, #108]	; (80061f8 <CHARGER_ON_Init+0xdc>)
 800618a:	f003 ff0c 	bl	8009fa6 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800618e:	2064      	movs	r0, #100	; 0x64
 8006190:	f001 fe7e 	bl	8007e90 <HAL_Delay>

	CAN_Setting();
 8006194:	f7ff faea 	bl	800576c <CAN_Setting>

	SSD1306_GotoXY (15,10);
 8006198:	210a      	movs	r1, #10
 800619a:	200f      	movs	r0, #15
 800619c:	f000 fae4 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I Charger", &Font_7x10, 1);
 80061a0:	2201      	movs	r2, #1
 80061a2:	4916      	ldr	r1, [pc, #88]	; (80061fc <CHARGER_ON_Init+0xe0>)
 80061a4:	4816      	ldr	r0, [pc, #88]	; (8006200 <CHARGER_ON_Init+0xe4>)
 80061a6:	f000 fb75 	bl	8006894 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 80061aa:	211e      	movs	r1, #30
 80061ac:	2032      	movs	r0, #50	; 0x32
 80061ae:	f000 fadb 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts ("V1.0", &Font_7x10, 1);
 80061b2:	2201      	movs	r2, #1
 80061b4:	4911      	ldr	r1, [pc, #68]	; (80061fc <CHARGER_ON_Init+0xe0>)
 80061b6:	4813      	ldr	r0, [pc, #76]	; (8006204 <CHARGER_ON_Init+0xe8>)
 80061b8:	f000 fb6c 	bl	8006894 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80061bc:	f000 fa30 	bl	8006620 <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 80061c0:	2000      	movs	r0, #0
 80061c2:	f000 fa5b 	bl	800667c <SSD1306_Fill>

	HAL_TIM_Base_Start(&htim1);
 80061c6:	4810      	ldr	r0, [pc, #64]	; (8006208 <CHARGER_ON_Init+0xec>)
 80061c8:	f005 fac9 	bl	800b75e <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80061cc:	2100      	movs	r1, #0
 80061ce:	480e      	ldr	r0, [pc, #56]	; (8006208 <CHARGER_ON_Init+0xec>)
 80061d0:	f005 fb40 	bl	800b854 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80061d4:	480d      	ldr	r0, [pc, #52]	; (800620c <CHARGER_ON_Init+0xf0>)
 80061d6:	f005 fae5 	bl	800b7a4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80061da:	480d      	ldr	r0, [pc, #52]	; (8006210 <CHARGER_ON_Init+0xf4>)
 80061dc:	f005 fae2 	bl	800b7a4 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_value, 5);
 80061e0:	2205      	movs	r2, #5
 80061e2:	490c      	ldr	r1, [pc, #48]	; (8006214 <CHARGER_ON_Init+0xf8>)
 80061e4:	480c      	ldr	r0, [pc, #48]	; (8006218 <CHARGER_ON_Init+0xfc>)
 80061e6:	f001 feb9 	bl	8007f5c <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 80061ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061ee:	f001 fe4f 	bl	8007e90 <HAL_Delay>
//	Charger_Mode=1;
}
 80061f2:	bf00      	nop
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40020800 	.word	0x40020800
 80061fc:	20000048 	.word	0x20000048
 8006200:	0800f3a8 	.word	0x0800f3a8
 8006204:	0800f3b8 	.word	0x0800f3b8
 8006208:	20000e4c 	.word	0x20000e4c
 800620c:	20000e8c 	.word	0x20000e8c
 8006210:	20000dcc 	.word	0x20000dcc
 8006214:	200008b4 	.word	0x200008b4
 8006218:	20000b20 	.word	0x20000b20

0800621c <Display_StanbyMode>:

void Display_StanbyMode(void){
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006220:	2000      	movs	r0, #0
 8006222:	f000 fa2b 	bl	800667c <SSD1306_Fill>
	SSD1306_GotoXY (20,30);
 8006226:	211e      	movs	r1, #30
 8006228:	2014      	movs	r0, #20
 800622a:	f000 fa9d 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts ("STANBY-Mode", &Font_7x10, 1);
 800622e:	2201      	movs	r2, #1
 8006230:	4903      	ldr	r1, [pc, #12]	; (8006240 <Display_StanbyMode+0x24>)
 8006232:	4804      	ldr	r0, [pc, #16]	; (8006244 <Display_StanbyMode+0x28>)
 8006234:	f000 fb2e 	bl	8006894 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8006238:	f000 f9f2 	bl	8006620 <SSD1306_UpdateScreen>
}
 800623c:	bf00      	nop
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000048 	.word	0x20000048
 8006244:	0800f3c0 	.word	0x0800f3c0

08006248 <Display_ProtectionMode>:

void Display_ProtectionMode(void){
 8006248:	b580      	push	{r7, lr}
 800624a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800624c:	2000      	movs	r0, #0
 800624e:	f000 fa15 	bl	800667c <SSD1306_Fill>
	SSD1306_GotoXY (20,10);
 8006252:	210a      	movs	r1, #10
 8006254:	2014      	movs	r0, #20
 8006256:	f000 fa87 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts ("FAULT Protect", &Font_7x10, 1);
 800625a:	2201      	movs	r2, #1
 800625c:	490b      	ldr	r1, [pc, #44]	; (800628c <Display_ProtectionMode+0x44>)
 800625e:	480c      	ldr	r0, [pc, #48]	; (8006290 <Display_ProtectionMode+0x48>)
 8006260:	f000 fb18 	bl	8006894 <SSD1306_Puts>

	sprintf(buffer_i2c, "Eror =%2d", Eror_Code);
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <Display_ProtectionMode+0x4c>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	461a      	mov	r2, r3
 800626a:	490b      	ldr	r1, [pc, #44]	; (8006298 <Display_ProtectionMode+0x50>)
 800626c:	480b      	ldr	r0, [pc, #44]	; (800629c <Display_ProtectionMode+0x54>)
 800626e:	f007 fa6d 	bl	800d74c <siprintf>
	SSD1306_GotoXY (20,30);
 8006272:	211e      	movs	r1, #30
 8006274:	2014      	movs	r0, #20
 8006276:	f000 fa77 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800627a:	2201      	movs	r2, #1
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <Display_ProtectionMode+0x44>)
 800627e:	4807      	ldr	r0, [pc, #28]	; (800629c <Display_ProtectionMode+0x54>)
 8006280:	f000 fb08 	bl	8006894 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006284:	f000 f9cc 	bl	8006620 <SSD1306_UpdateScreen>
}
 8006288:	bf00      	nop
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000048 	.word	0x20000048
 8006290:	0800f3cc 	.word	0x0800f3cc
 8006294:	20000680 	.word	0x20000680
 8006298:	0800f3dc 	.word	0x0800f3dc
 800629c:	20000cb8 	.word	0x20000cb8

080062a0 <Display_ChargeMode>:

void Display_ChargeMode(void){
 80062a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af02      	add	r7, sp, #8
	SSD1306_Fill (0);
 80062a6:	2000      	movs	r0, #0
 80062a8:	f000 f9e8 	bl	800667c <SSD1306_Fill>

	sprintf(buffer_i2c, "Charger - RUN");
 80062ac:	4a63      	ldr	r2, [pc, #396]	; (800643c <Display_ChargeMode+0x19c>)
 80062ae:	4b64      	ldr	r3, [pc, #400]	; (8006440 <Display_ChargeMode+0x1a0>)
 80062b0:	4614      	mov	r4, r2
 80062b2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80062b4:	6020      	str	r0, [r4, #0]
 80062b6:	6061      	str	r1, [r4, #4]
 80062b8:	60a2      	str	r2, [r4, #8]
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY (12,0);
 80062be:	2100      	movs	r1, #0
 80062c0:	200c      	movs	r0, #12
 80062c2:	f000 fa51 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80062c6:	2201      	movs	r2, #1
 80062c8:	495e      	ldr	r1, [pc, #376]	; (8006444 <Display_ChargeMode+0x1a4>)
 80062ca:	485c      	ldr	r0, [pc, #368]	; (800643c <Display_ChargeMode+0x19c>)
 80062cc:	f000 fae2 	bl	8006894 <SSD1306_Puts>

	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", dc, Batt_SOC.m_uint16t);
 80062d0:	4b5d      	ldr	r3, [pc, #372]	; (8006448 <Display_ChargeMode+0x1a8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fa f8e3 	bl	80004a0 <__aeabi_f2d>
 80062da:	460a      	mov	r2, r1
 80062dc:	4601      	mov	r1, r0
 80062de:	4b5b      	ldr	r3, [pc, #364]	; (800644c <Display_ChargeMode+0x1ac>)
 80062e0:	881b      	ldrh	r3, [r3, #0]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4613      	mov	r3, r2
 80062e6:	460a      	mov	r2, r1
 80062e8:	4959      	ldr	r1, [pc, #356]	; (8006450 <Display_ChargeMode+0x1b0>)
 80062ea:	4854      	ldr	r0, [pc, #336]	; (800643c <Display_ChargeMode+0x19c>)
 80062ec:	f007 fa2e 	bl	800d74c <siprintf>
	SSD1306_GotoXY (5,13);
 80062f0:	210d      	movs	r1, #13
 80062f2:	2005      	movs	r0, #5
 80062f4:	f000 fa38 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80062f8:	2201      	movs	r2, #1
 80062fa:	4952      	ldr	r1, [pc, #328]	; (8006444 <Display_ChargeMode+0x1a4>)
 80062fc:	484f      	ldr	r0, [pc, #316]	; (800643c <Display_ChargeMode+0x19c>)
 80062fe:	f000 fac9 	bl	8006894 <SSD1306_Puts>

	//sprintf(usart_Tx_buffer,"Test USART %d\r\n",(unsigned int)i);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006302:	484e      	ldr	r0, [pc, #312]	; (800643c <Display_ChargeMode+0x19c>)
 8006304:	f7f9 ff60 	bl	80001c8 <strlen>
 8006308:	4603      	mov	r3, r0
 800630a:	b29b      	uxth	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	494b      	ldr	r1, [pc, #300]	; (800643c <Display_ChargeMode+0x19c>)
 8006310:	4850      	ldr	r0, [pc, #320]	; (8006454 <Display_ChargeMode+0x1b4>)
 8006312:	f006 f987 	bl	800c624 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006316:	4849      	ldr	r0, [pc, #292]	; (800643c <Display_ChargeMode+0x19c>)
 8006318:	f7f9 ff56 	bl	80001c8 <strlen>
 800631c:	4603      	mov	r3, r0
 800631e:	b29b      	uxth	r3, r3
 8006320:	461a      	mov	r2, r3
 8006322:	4946      	ldr	r1, [pc, #280]	; (800643c <Display_ChargeMode+0x19c>)
 8006324:	484c      	ldr	r0, [pc, #304]	; (8006458 <Display_ChargeMode+0x1b8>)
 8006326:	f006 f97d 	bl	800c624 <HAL_UART_Transmit_IT>

	HAL_Delay(10);
 800632a:	200a      	movs	r0, #10
 800632c:	f001 fdb0 	bl	8007e90 <HAL_Delay>

	sprintf(buffer_i2c, "T = %4.1f | %4.1f", Temp_T1, Temp_T2);
 8006330:	4b4a      	ldr	r3, [pc, #296]	; (800645c <Display_ChargeMode+0x1bc>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7fa f8b3 	bl	80004a0 <__aeabi_f2d>
 800633a:	4605      	mov	r5, r0
 800633c:	460e      	mov	r6, r1
 800633e:	4b48      	ldr	r3, [pc, #288]	; (8006460 <Display_ChargeMode+0x1c0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4618      	mov	r0, r3
 8006344:	f7fa f8ac 	bl	80004a0 <__aeabi_f2d>
 8006348:	4603      	mov	r3, r0
 800634a:	460c      	mov	r4, r1
 800634c:	e9cd 3400 	strd	r3, r4, [sp]
 8006350:	462a      	mov	r2, r5
 8006352:	4633      	mov	r3, r6
 8006354:	4943      	ldr	r1, [pc, #268]	; (8006464 <Display_ChargeMode+0x1c4>)
 8006356:	4839      	ldr	r0, [pc, #228]	; (800643c <Display_ChargeMode+0x19c>)
 8006358:	f007 f9f8 	bl	800d74c <siprintf>
	SSD1306_GotoXY (5,23);
 800635c:	2117      	movs	r1, #23
 800635e:	2005      	movs	r0, #5
 8006360:	f000 fa02 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006364:	2201      	movs	r2, #1
 8006366:	4937      	ldr	r1, [pc, #220]	; (8006444 <Display_ChargeMode+0x1a4>)
 8006368:	4834      	ldr	r0, [pc, #208]	; (800643c <Display_ChargeMode+0x19c>)
 800636a:	f000 fa93 	bl	8006894 <SSD1306_Puts>

	sprintf(buffer_i2c, "V = %4.0f | %4.2f", ADC_VoltageResult, Voltage_Charger);
 800636e:	4b3e      	ldr	r3, [pc, #248]	; (8006468 <Display_ChargeMode+0x1c8>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f7fa f894 	bl	80004a0 <__aeabi_f2d>
 8006378:	4605      	mov	r5, r0
 800637a:	460e      	mov	r6, r1
 800637c:	4b3b      	ldr	r3, [pc, #236]	; (800646c <Display_ChargeMode+0x1cc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f7fa f88d 	bl	80004a0 <__aeabi_f2d>
 8006386:	4603      	mov	r3, r0
 8006388:	460c      	mov	r4, r1
 800638a:	e9cd 3400 	strd	r3, r4, [sp]
 800638e:	462a      	mov	r2, r5
 8006390:	4633      	mov	r3, r6
 8006392:	4937      	ldr	r1, [pc, #220]	; (8006470 <Display_ChargeMode+0x1d0>)
 8006394:	4829      	ldr	r0, [pc, #164]	; (800643c <Display_ChargeMode+0x19c>)
 8006396:	f007 f9d9 	bl	800d74c <siprintf>
	SSD1306_GotoXY (5,33);
 800639a:	2121      	movs	r1, #33	; 0x21
 800639c:	2005      	movs	r0, #5
 800639e:	f000 f9e3 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80063a2:	2201      	movs	r2, #1
 80063a4:	4927      	ldr	r1, [pc, #156]	; (8006444 <Display_ChargeMode+0x1a4>)
 80063a6:	4825      	ldr	r0, [pc, #148]	; (800643c <Display_ChargeMode+0x19c>)
 80063a8:	f000 fa74 	bl	8006894 <SSD1306_Puts>

	sprintf(buffer_i2c, "A = %4.0f | %4.2f", ADC_Average_I, Current_Charger);
 80063ac:	4b31      	ldr	r3, [pc, #196]	; (8006474 <Display_ChargeMode+0x1d4>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4618      	mov	r0, r3
 80063b2:	f7fa f875 	bl	80004a0 <__aeabi_f2d>
 80063b6:	4605      	mov	r5, r0
 80063b8:	460e      	mov	r6, r1
 80063ba:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <Display_ChargeMode+0x1d8>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fa f86e 	bl	80004a0 <__aeabi_f2d>
 80063c4:	4603      	mov	r3, r0
 80063c6:	460c      	mov	r4, r1
 80063c8:	e9cd 3400 	strd	r3, r4, [sp]
 80063cc:	462a      	mov	r2, r5
 80063ce:	4633      	mov	r3, r6
 80063d0:	492a      	ldr	r1, [pc, #168]	; (800647c <Display_ChargeMode+0x1dc>)
 80063d2:	481a      	ldr	r0, [pc, #104]	; (800643c <Display_ChargeMode+0x19c>)
 80063d4:	f007 f9ba 	bl	800d74c <siprintf>
	//(float)Batt_current.m_uint16t/100);
	SSD1306_GotoXY (5,43);
 80063d8:	212b      	movs	r1, #43	; 0x2b
 80063da:	2005      	movs	r0, #5
 80063dc:	f000 f9c4 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80063e0:	2201      	movs	r2, #1
 80063e2:	4918      	ldr	r1, [pc, #96]	; (8006444 <Display_ChargeMode+0x1a4>)
 80063e4:	4815      	ldr	r0, [pc, #84]	; (800643c <Display_ChargeMode+0x19c>)
 80063e6:	f000 fa55 	bl	8006894 <SSD1306_Puts>

	sprintf(buffer_i2c, "E =%2d--%2d ", Eror_Code, LastEror_code);
 80063ea:	4b25      	ldr	r3, [pc, #148]	; (8006480 <Display_ChargeMode+0x1e0>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	4b24      	ldr	r3, [pc, #144]	; (8006484 <Display_ChargeMode+0x1e4>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	4924      	ldr	r1, [pc, #144]	; (8006488 <Display_ChargeMode+0x1e8>)
 80063f6:	4811      	ldr	r0, [pc, #68]	; (800643c <Display_ChargeMode+0x19c>)
 80063f8:	f007 f9a8 	bl	800d74c <siprintf>
	SSD1306_GotoXY (5,53);
 80063fc:	2135      	movs	r1, #53	; 0x35
 80063fe:	2005      	movs	r0, #5
 8006400:	f000 f9b2 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006404:	2201      	movs	r2, #1
 8006406:	490f      	ldr	r1, [pc, #60]	; (8006444 <Display_ChargeMode+0x1a4>)
 8006408:	480c      	ldr	r0, [pc, #48]	; (800643c <Display_ChargeMode+0x19c>)
 800640a:	f000 fa43 	bl	8006894 <SSD1306_Puts>

	sprintf(buffer_i2c, "| %lx", UNIQUE_Code);
 800640e:	4b1f      	ldr	r3, [pc, #124]	; (800648c <Display_ChargeMode+0x1ec>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	491e      	ldr	r1, [pc, #120]	; (8006490 <Display_ChargeMode+0x1f0>)
 8006416:	4809      	ldr	r0, [pc, #36]	; (800643c <Display_ChargeMode+0x19c>)
 8006418:	f007 f998 	bl	800d74c <siprintf>
	SSD1306_GotoXY (68,53);
 800641c:	2135      	movs	r1, #53	; 0x35
 800641e:	2044      	movs	r0, #68	; 0x44
 8006420:	f000 f9a2 	bl	8006768 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006424:	2201      	movs	r2, #1
 8006426:	4907      	ldr	r1, [pc, #28]	; (8006444 <Display_ChargeMode+0x1a4>)
 8006428:	4804      	ldr	r0, [pc, #16]	; (800643c <Display_ChargeMode+0x19c>)
 800642a:	f000 fa33 	bl	8006894 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 800642e:	f000 f8f7 	bl	8006620 <SSD1306_UpdateScreen>
}
 8006432:	bf00      	nop
 8006434:	3704      	adds	r7, #4
 8006436:	46bd      	mov	sp, r7
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	bf00      	nop
 800643c:	20000cb8 	.word	0x20000cb8
 8006440:	0800f3e8 	.word	0x0800f3e8
 8006444:	20000048 	.word	0x20000048
 8006448:	20000770 	.word	0x20000770
 800644c:	20000a00 	.word	0x20000a00
 8006450:	0800f3f8 	.word	0x0800f3f8
 8006454:	20000ecc 	.word	0x20000ecc
 8006458:	20000f0c 	.word	0x20000f0c
 800645c:	200009f8 	.word	0x200009f8
 8006460:	20000750 	.word	0x20000750
 8006464:	0800f410 	.word	0x0800f410
 8006468:	200009fc 	.word	0x200009fc
 800646c:	20000a80 	.word	0x20000a80
 8006470:	0800f424 	.word	0x0800f424
 8006474:	200008d4 	.word	0x200008d4
 8006478:	20000ab4 	.word	0x20000ab4
 800647c:	0800f438 	.word	0x0800f438
 8006480:	20000680 	.word	0x20000680
 8006484:	20000794 	.word	0x20000794
 8006488:	0800f44c 	.word	0x0800f44c
 800648c:	20000a58 	.word	0x20000a58
 8006490:	0800f45c 	.word	0x0800f45c

08006494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006494:	b480      	push	{r7}
 8006496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr

080064a0 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80064a6:	f000 fa1b 	bl	80068e0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80064aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80064ae:	2201      	movs	r2, #1
 80064b0:	2178      	movs	r1, #120	; 0x78
 80064b2:	4858      	ldr	r0, [pc, #352]	; (8006614 <SSD1306_Init+0x174>)
 80064b4:	f004 f8c0 	bl	800a638 <HAL_I2C_IsDeviceReady>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80064be:	2300      	movs	r3, #0
 80064c0:	e0a3      	b.n	800660a <SSD1306_Init+0x16a>
	}
	
	/* A little delay */
	uint32_t p = 250000;
 80064c2:	4b55      	ldr	r3, [pc, #340]	; (8006618 <SSD1306_Init+0x178>)
 80064c4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80064c6:	e002      	b.n	80064ce <SSD1306_Init+0x2e>
		p--;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1f9      	bne.n	80064c8 <SSD1306_Init+0x28>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80064d4:	22ae      	movs	r2, #174	; 0xae
 80064d6:	2100      	movs	r1, #0
 80064d8:	2078      	movs	r0, #120	; 0x78
 80064da:	f000 fa6f 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80064de:	2220      	movs	r2, #32
 80064e0:	2100      	movs	r1, #0
 80064e2:	2078      	movs	r0, #120	; 0x78
 80064e4:	f000 fa6a 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80064e8:	2210      	movs	r2, #16
 80064ea:	2100      	movs	r1, #0
 80064ec:	2078      	movs	r0, #120	; 0x78
 80064ee:	f000 fa65 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80064f2:	22b0      	movs	r2, #176	; 0xb0
 80064f4:	2100      	movs	r1, #0
 80064f6:	2078      	movs	r0, #120	; 0x78
 80064f8:	f000 fa60 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80064fc:	22c8      	movs	r2, #200	; 0xc8
 80064fe:	2100      	movs	r1, #0
 8006500:	2078      	movs	r0, #120	; 0x78
 8006502:	f000 fa5b 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	2078      	movs	r0, #120	; 0x78
 800650c:	f000 fa56 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006510:	2210      	movs	r2, #16
 8006512:	2100      	movs	r1, #0
 8006514:	2078      	movs	r0, #120	; 0x78
 8006516:	f000 fa51 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800651a:	2240      	movs	r2, #64	; 0x40
 800651c:	2100      	movs	r1, #0
 800651e:	2078      	movs	r0, #120	; 0x78
 8006520:	f000 fa4c 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006524:	2281      	movs	r2, #129	; 0x81
 8006526:	2100      	movs	r1, #0
 8006528:	2078      	movs	r0, #120	; 0x78
 800652a:	f000 fa47 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800652e:	22ff      	movs	r2, #255	; 0xff
 8006530:	2100      	movs	r1, #0
 8006532:	2078      	movs	r0, #120	; 0x78
 8006534:	f000 fa42 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006538:	22a1      	movs	r2, #161	; 0xa1
 800653a:	2100      	movs	r1, #0
 800653c:	2078      	movs	r0, #120	; 0x78
 800653e:	f000 fa3d 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006542:	22a6      	movs	r2, #166	; 0xa6
 8006544:	2100      	movs	r1, #0
 8006546:	2078      	movs	r0, #120	; 0x78
 8006548:	f000 fa38 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800654c:	22a8      	movs	r2, #168	; 0xa8
 800654e:	2100      	movs	r1, #0
 8006550:	2078      	movs	r0, #120	; 0x78
 8006552:	f000 fa33 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006556:	223f      	movs	r2, #63	; 0x3f
 8006558:	2100      	movs	r1, #0
 800655a:	2078      	movs	r0, #120	; 0x78
 800655c:	f000 fa2e 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006560:	22a4      	movs	r2, #164	; 0xa4
 8006562:	2100      	movs	r1, #0
 8006564:	2078      	movs	r0, #120	; 0x78
 8006566:	f000 fa29 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800656a:	22d3      	movs	r2, #211	; 0xd3
 800656c:	2100      	movs	r1, #0
 800656e:	2078      	movs	r0, #120	; 0x78
 8006570:	f000 fa24 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006574:	2200      	movs	r2, #0
 8006576:	2100      	movs	r1, #0
 8006578:	2078      	movs	r0, #120	; 0x78
 800657a:	f000 fa1f 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800657e:	22d5      	movs	r2, #213	; 0xd5
 8006580:	2100      	movs	r1, #0
 8006582:	2078      	movs	r0, #120	; 0x78
 8006584:	f000 fa1a 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006588:	22f0      	movs	r2, #240	; 0xf0
 800658a:	2100      	movs	r1, #0
 800658c:	2078      	movs	r0, #120	; 0x78
 800658e:	f000 fa15 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006592:	22d9      	movs	r2, #217	; 0xd9
 8006594:	2100      	movs	r1, #0
 8006596:	2078      	movs	r0, #120	; 0x78
 8006598:	f000 fa10 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800659c:	2222      	movs	r2, #34	; 0x22
 800659e:	2100      	movs	r1, #0
 80065a0:	2078      	movs	r0, #120	; 0x78
 80065a2:	f000 fa0b 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80065a6:	22da      	movs	r2, #218	; 0xda
 80065a8:	2100      	movs	r1, #0
 80065aa:	2078      	movs	r0, #120	; 0x78
 80065ac:	f000 fa06 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80065b0:	2212      	movs	r2, #18
 80065b2:	2100      	movs	r1, #0
 80065b4:	2078      	movs	r0, #120	; 0x78
 80065b6:	f000 fa01 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80065ba:	22db      	movs	r2, #219	; 0xdb
 80065bc:	2100      	movs	r1, #0
 80065be:	2078      	movs	r0, #120	; 0x78
 80065c0:	f000 f9fc 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80065c4:	2220      	movs	r2, #32
 80065c6:	2100      	movs	r1, #0
 80065c8:	2078      	movs	r0, #120	; 0x78
 80065ca:	f000 f9f7 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80065ce:	228d      	movs	r2, #141	; 0x8d
 80065d0:	2100      	movs	r1, #0
 80065d2:	2078      	movs	r0, #120	; 0x78
 80065d4:	f000 f9f2 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80065d8:	2214      	movs	r2, #20
 80065da:	2100      	movs	r1, #0
 80065dc:	2078      	movs	r0, #120	; 0x78
 80065de:	f000 f9ed 	bl	80069bc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80065e2:	22af      	movs	r2, #175	; 0xaf
 80065e4:	2100      	movs	r1, #0
 80065e6:	2078      	movs	r0, #120	; 0x78
 80065e8:	f000 f9e8 	bl	80069bc <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80065ec:	2000      	movs	r0, #0
 80065ee:	f000 f845 	bl	800667c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80065f2:	f000 f815 	bl	8006620 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <SSD1306_Init+0x17c>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80065fc:	4b07      	ldr	r3, [pc, #28]	; (800661c <SSD1306_Init+0x17c>)
 80065fe:	2200      	movs	r2, #0
 8006600:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <SSD1306_Init+0x17c>)
 8006604:	2201      	movs	r2, #1
 8006606:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006608:	2301      	movs	r3, #1
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000c58 	.word	0x20000c58
 8006618:	0003d090 	.word	0x0003d090
 800661c:	20000660 	.word	0x20000660

08006620 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006626:	2300      	movs	r3, #0
 8006628:	71fb      	strb	r3, [r7, #7]
 800662a:	e01d      	b.n	8006668 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800662c:	79fb      	ldrb	r3, [r7, #7]
 800662e:	3b50      	subs	r3, #80	; 0x50
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	2100      	movs	r1, #0
 8006636:	2078      	movs	r0, #120	; 0x78
 8006638:	f000 f9c0 	bl	80069bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800663c:	2200      	movs	r2, #0
 800663e:	2100      	movs	r1, #0
 8006640:	2078      	movs	r0, #120	; 0x78
 8006642:	f000 f9bb 	bl	80069bc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006646:	2210      	movs	r2, #16
 8006648:	2100      	movs	r1, #0
 800664a:	2078      	movs	r0, #120	; 0x78
 800664c:	f000 f9b6 	bl	80069bc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	01db      	lsls	r3, r3, #7
 8006654:	4a08      	ldr	r2, [pc, #32]	; (8006678 <SSD1306_UpdateScreen+0x58>)
 8006656:	441a      	add	r2, r3
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	2078      	movs	r0, #120	; 0x78
 800665e:	f000 f953 	bl	8006908 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006662:	79fb      	ldrb	r3, [r7, #7]
 8006664:	3301      	adds	r3, #1
 8006666:	71fb      	strb	r3, [r7, #7]
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b07      	cmp	r3, #7
 800666c:	d9de      	bls.n	800662c <SSD1306_UpdateScreen+0xc>
	}
}
 800666e:	bf00      	nop
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000260 	.word	0x20000260

0800667c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
 8006682:	4603      	mov	r3, r0
 8006684:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <SSD1306_Fill+0x14>
 800668c:	2300      	movs	r3, #0
 800668e:	e001      	b.n	8006694 <SSD1306_Fill+0x18>
 8006690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006698:	4619      	mov	r1, r3
 800669a:	4803      	ldr	r0, [pc, #12]	; (80066a8 <SSD1306_Fill+0x2c>)
 800669c:	f006 fbfe 	bl	800ce9c <memset>
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000260 	.word	0x20000260

080066ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	4603      	mov	r3, r0
 80066b4:	80fb      	strh	r3, [r7, #6]
 80066b6:	460b      	mov	r3, r1
 80066b8:	80bb      	strh	r3, [r7, #4]
 80066ba:	4613      	mov	r3, r2
 80066bc:	70fb      	strb	r3, [r7, #3]
	if (
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b7f      	cmp	r3, #127	; 0x7f
 80066c2:	d848      	bhi.n	8006756 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80066c4:	88bb      	ldrh	r3, [r7, #4]
 80066c6:	2b3f      	cmp	r3, #63	; 0x3f
 80066c8:	d845      	bhi.n	8006756 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80066ca:	4b25      	ldr	r3, [pc, #148]	; (8006760 <SSD1306_DrawPixel+0xb4>)
 80066cc:	791b      	ldrb	r3, [r3, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d006      	beq.n	80066e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
 80066de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d11a      	bne.n	800671c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80066e6:	88fa      	ldrh	r2, [r7, #6]
 80066e8:	88bb      	ldrh	r3, [r7, #4]
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	b298      	uxth	r0, r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	01db      	lsls	r3, r3, #7
 80066f2:	4413      	add	r3, r2
 80066f4:	4a1b      	ldr	r2, [pc, #108]	; (8006764 <SSD1306_DrawPixel+0xb8>)
 80066f6:	5cd3      	ldrb	r3, [r2, r3]
 80066f8:	b25a      	sxtb	r2, r3
 80066fa:	88bb      	ldrh	r3, [r7, #4]
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	2101      	movs	r1, #1
 8006702:	fa01 f303 	lsl.w	r3, r1, r3
 8006706:	b25b      	sxtb	r3, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	b259      	sxtb	r1, r3
 800670c:	88fa      	ldrh	r2, [r7, #6]
 800670e:	4603      	mov	r3, r0
 8006710:	01db      	lsls	r3, r3, #7
 8006712:	4413      	add	r3, r2
 8006714:	b2c9      	uxtb	r1, r1
 8006716:	4a13      	ldr	r2, [pc, #76]	; (8006764 <SSD1306_DrawPixel+0xb8>)
 8006718:	54d1      	strb	r1, [r2, r3]
 800671a:	e01d      	b.n	8006758 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	88bb      	ldrh	r3, [r7, #4]
 8006720:	08db      	lsrs	r3, r3, #3
 8006722:	b298      	uxth	r0, r3
 8006724:	4603      	mov	r3, r0
 8006726:	01db      	lsls	r3, r3, #7
 8006728:	4413      	add	r3, r2
 800672a:	4a0e      	ldr	r2, [pc, #56]	; (8006764 <SSD1306_DrawPixel+0xb8>)
 800672c:	5cd3      	ldrb	r3, [r2, r3]
 800672e:	b25a      	sxtb	r2, r3
 8006730:	88bb      	ldrh	r3, [r7, #4]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	2101      	movs	r1, #1
 8006738:	fa01 f303 	lsl.w	r3, r1, r3
 800673c:	b25b      	sxtb	r3, r3
 800673e:	43db      	mvns	r3, r3
 8006740:	b25b      	sxtb	r3, r3
 8006742:	4013      	ands	r3, r2
 8006744:	b259      	sxtb	r1, r3
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	4603      	mov	r3, r0
 800674a:	01db      	lsls	r3, r3, #7
 800674c:	4413      	add	r3, r2
 800674e:	b2c9      	uxtb	r1, r1
 8006750:	4a04      	ldr	r2, [pc, #16]	; (8006764 <SSD1306_DrawPixel+0xb8>)
 8006752:	54d1      	strb	r1, [r2, r3]
 8006754:	e000      	b.n	8006758 <SSD1306_DrawPixel+0xac>
		return;
 8006756:	bf00      	nop
	}
}
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	bc80      	pop	{r7}
 800675e:	4770      	bx	lr
 8006760:	20000660 	.word	0x20000660
 8006764:	20000260 	.word	0x20000260

08006768 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	4603      	mov	r3, r0
 8006770:	460a      	mov	r2, r1
 8006772:	80fb      	strh	r3, [r7, #6]
 8006774:	4613      	mov	r3, r2
 8006776:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006778:	4a05      	ldr	r2, [pc, #20]	; (8006790 <SSD1306_GotoXY+0x28>)
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800677e:	4a04      	ldr	r2, [pc, #16]	; (8006790 <SSD1306_GotoXY+0x28>)
 8006780:	88bb      	ldrh	r3, [r7, #4]
 8006782:	8053      	strh	r3, [r2, #2]
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	bc80      	pop	{r7}
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000660 	.word	0x20000660

08006794 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	6039      	str	r1, [r7, #0]
 800679e:	71fb      	strb	r3, [r7, #7]
 80067a0:	4613      	mov	r3, r2
 80067a2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80067a4:	4b3a      	ldr	r3, [pc, #232]	; (8006890 <SSD1306_Putc+0xfc>)
 80067a6:	881b      	ldrh	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	4413      	add	r3, r2
	if (
 80067b0:	2b7f      	cmp	r3, #127	; 0x7f
 80067b2:	dc07      	bgt.n	80067c4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80067b4:	4b36      	ldr	r3, [pc, #216]	; (8006890 <SSD1306_Putc+0xfc>)
 80067b6:	885b      	ldrh	r3, [r3, #2]
 80067b8:	461a      	mov	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80067c0:	2b3f      	cmp	r3, #63	; 0x3f
 80067c2:	dd01      	ble.n	80067c8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e05e      	b.n	8006886 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e04b      	b.n	8006866 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	79fb      	ldrb	r3, [r7, #7]
 80067d4:	3b20      	subs	r3, #32
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	7849      	ldrb	r1, [r1, #1]
 80067da:	fb01 f303 	mul.w	r3, r1, r3
 80067de:	4619      	mov	r1, r3
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	440b      	add	r3, r1
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	4413      	add	r3, r2
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	e030      	b.n	8006854 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	fa02 f303 	lsl.w	r3, r2, r3
 80067fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d010      	beq.n	8006824 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006802:	4b23      	ldr	r3, [pc, #140]	; (8006890 <SSD1306_Putc+0xfc>)
 8006804:	881a      	ldrh	r2, [r3, #0]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	b29b      	uxth	r3, r3
 800680a:	4413      	add	r3, r2
 800680c:	b298      	uxth	r0, r3
 800680e:	4b20      	ldr	r3, [pc, #128]	; (8006890 <SSD1306_Putc+0xfc>)
 8006810:	885a      	ldrh	r2, [r3, #2]
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	b29b      	uxth	r3, r3
 8006816:	4413      	add	r3, r2
 8006818:	b29b      	uxth	r3, r3
 800681a:	79ba      	ldrb	r2, [r7, #6]
 800681c:	4619      	mov	r1, r3
 800681e:	f7ff ff45 	bl	80066ac <SSD1306_DrawPixel>
 8006822:	e014      	b.n	800684e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006824:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <SSD1306_Putc+0xfc>)
 8006826:	881a      	ldrh	r2, [r3, #0]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	b29b      	uxth	r3, r3
 800682c:	4413      	add	r3, r2
 800682e:	b298      	uxth	r0, r3
 8006830:	4b17      	ldr	r3, [pc, #92]	; (8006890 <SSD1306_Putc+0xfc>)
 8006832:	885a      	ldrh	r2, [r3, #2]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	b29b      	uxth	r3, r3
 8006838:	4413      	add	r3, r2
 800683a:	b299      	uxth	r1, r3
 800683c:	79bb      	ldrb	r3, [r7, #6]
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf0c      	ite	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	2300      	movne	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	f7ff ff2f 	bl	80066ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	3301      	adds	r3, #1
 8006852:	613b      	str	r3, [r7, #16]
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	461a      	mov	r2, r3
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	4293      	cmp	r3, r2
 800685e:	d3c8      	bcc.n	80067f2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	3301      	adds	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	461a      	mov	r2, r3
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	4293      	cmp	r3, r2
 8006870:	d3ad      	bcc.n	80067ce <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <SSD1306_Putc+0xfc>)
 8006874:	881a      	ldrh	r2, [r3, #0]
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b29b      	uxth	r3, r3
 800687c:	4413      	add	r3, r2
 800687e:	b29a      	uxth	r2, r3
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <SSD1306_Putc+0xfc>)
 8006882:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8006884:	79fb      	ldrb	r3, [r7, #7]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000660 	.word	0x20000660

08006894 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80068a2:	e012      	b.n	80068ca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	79fa      	ldrb	r2, [r7, #7]
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff71 	bl	8006794 <SSD1306_Putc>
 80068b2:	4603      	mov	r3, r0
 80068b4:	461a      	mov	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d002      	beq.n	80068c4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	e008      	b.n	80068d6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1e8      	bne.n	80068a4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	781b      	ldrb	r3, [r3, #0]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 80068e6:	4b07      	ldr	r3, [pc, #28]	; (8006904 <ssd1306_I2C_Init+0x24>)
 80068e8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80068ea:	e002      	b.n	80068f2 <ssd1306_I2C_Init+0x12>
		p--;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1f9      	bne.n	80068ec <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bc80      	pop	{r7}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	00055730 	.word	0x00055730

08006908 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006908:	b5b0      	push	{r4, r5, r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af02      	add	r7, sp, #8
 800690e:	603a      	str	r2, [r7, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	4603      	mov	r3, r0
 8006914:	71fb      	strb	r3, [r7, #7]
 8006916:	460b      	mov	r3, r1
 8006918:	71bb      	strb	r3, [r7, #6]
 800691a:	4613      	mov	r3, r2
 800691c:	80bb      	strh	r3, [r7, #4]
 800691e:	466b      	mov	r3, sp
 8006920:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8006922:	88bb      	ldrh	r3, [r7, #4]
 8006924:	1c58      	adds	r0, r3, #1
 8006926:	1e43      	subs	r3, r0, #1
 8006928:	613b      	str	r3, [r7, #16]
 800692a:	4603      	mov	r3, r0
 800692c:	4619      	mov	r1, r3
 800692e:	f04f 0200 	mov.w	r2, #0
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	f04f 0400 	mov.w	r4, #0
 800693a:	00d4      	lsls	r4, r2, #3
 800693c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006940:	00cb      	lsls	r3, r1, #3
 8006942:	4603      	mov	r3, r0
 8006944:	4619      	mov	r1, r3
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	f04f 0400 	mov.w	r4, #0
 8006952:	00d4      	lsls	r4, r2, #3
 8006954:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006958:	00cb      	lsls	r3, r1, #3
 800695a:	4603      	mov	r3, r0
 800695c:	3307      	adds	r3, #7
 800695e:	08db      	lsrs	r3, r3, #3
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	ebad 0d03 	sub.w	sp, sp, r3
 8006966:	ab02      	add	r3, sp, #8
 8006968:	3300      	adds	r3, #0
 800696a:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	79ba      	ldrb	r2, [r7, #6]
 8006970:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
 8006976:	e00a      	b.n	800698e <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8006978:	7dfb      	ldrb	r3, [r7, #23]
 800697a:	3b01      	subs	r3, #1
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	441a      	add	r2, r3
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	7811      	ldrb	r1, [r2, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	3301      	adds	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
 800698e:	7dfb      	ldrb	r3, [r7, #23]
 8006990:	b29b      	uxth	r3, r3
 8006992:	88ba      	ldrh	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d2ef      	bcs.n	8006978 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	b299      	uxth	r1, r3
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	88b8      	ldrh	r0, [r7, #4]
 80069a0:	230a      	movs	r3, #10
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	4603      	mov	r3, r0
 80069a6:	4804      	ldr	r0, [pc, #16]	; (80069b8 <ssd1306_I2C_WriteMulti+0xb0>)
 80069a8:	f003 fc4e 	bl	800a248 <HAL_I2C_Master_Transmit>
 80069ac:	46ad      	mov	sp, r5
}
 80069ae:	bf00      	nop
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bdb0      	pop	{r4, r5, r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20000c58 	.word	0x20000c58

080069bc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af02      	add	r7, sp, #8
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
 80069c6:	460b      	mov	r3, r1
 80069c8:	71bb      	strb	r3, [r7, #6]
 80069ca:	4613      	mov	r3, r2
 80069cc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80069ce:	79bb      	ldrb	r3, [r7, #6]
 80069d0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80069d2:	797b      	ldrb	r3, [r7, #5]
 80069d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	b299      	uxth	r1, r3
 80069da:	f107 020c 	add.w	r2, r7, #12
 80069de:	230a      	movs	r3, #10
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	2302      	movs	r3, #2
 80069e4:	4803      	ldr	r0, [pc, #12]	; (80069f4 <ssd1306_I2C_Write+0x38>)
 80069e6:	f003 fc2f 	bl	800a248 <HAL_I2C_Master_Transmit>
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000c58 	.word	0x20000c58

080069f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	4b0f      	ldr	r3, [pc, #60]	; (8006a40 <HAL_MspInit+0x48>)
 8006a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a06:	4a0e      	ldr	r2, [pc, #56]	; (8006a40 <HAL_MspInit+0x48>)
 8006a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006a0e:	4b0c      	ldr	r3, [pc, #48]	; (8006a40 <HAL_MspInit+0x48>)
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a16:	607b      	str	r3, [r7, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	603b      	str	r3, [r7, #0]
 8006a1e:	4b08      	ldr	r3, [pc, #32]	; (8006a40 <HAL_MspInit+0x48>)
 8006a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a22:	4a07      	ldr	r2, [pc, #28]	; (8006a40 <HAL_MspInit+0x48>)
 8006a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a28:	6413      	str	r3, [r2, #64]	; 0x40
 8006a2a:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_MspInit+0x48>)
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a36:	bf00      	nop
 8006a38:	370c      	adds	r7, #12
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bc80      	pop	{r7}
 8006a3e:	4770      	bx	lr
 8006a40:	40023800 	.word	0x40023800

08006a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a54:	e7fe      	b.n	8006a54 <HardFault_Handler+0x4>

08006a56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a56:	b480      	push	{r7}
 8006a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a5a:	e7fe      	b.n	8006a5a <MemManage_Handler+0x4>

08006a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a60:	e7fe      	b.n	8006a60 <BusFault_Handler+0x4>

08006a62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a62:	b480      	push	{r7}
 8006a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a66:	e7fe      	b.n	8006a66 <UsageFault_Handler+0x4>

08006a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a74:	b480      	push	{r7}
 8006a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bc80      	pop	{r7}
 8006a7e:	4770      	bx	lr

08006a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006a84:	bf00      	nop
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr

08006a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a90:	f001 f9e2 	bl	8007e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a94:	bf00      	nop
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006a9c:	4802      	ldr	r0, [pc, #8]	; (8006aa8 <CAN1_RX1_IRQHandler+0x10>)
 8006a9e:	f002 f9f2 	bl	8008e86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006aa2:	bf00      	nop
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000bdc 	.word	0x20000bdc

08006aac <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006ab0:	4802      	ldr	r0, [pc, #8]	; (8006abc <CAN1_SCE_IRQHandler+0x10>)
 8006ab2:	f002 f9e8 	bl	8008e86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006ab6:	bf00      	nop
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	20000bdc 	.word	0x20000bdc

08006ac0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006ac0:	b5b0      	push	{r4, r5, r7, lr}
 8006ac2:	af00      	add	r7, sp, #0

//	CAN_Rx_Process();	//can receive handle

	// *********************** Sensing Process (ADC average) ******************************

	ADC_SUM_I = ADC_SUM_I - ADC_Array_I[i];		//delete old data
 8006ac4:	4bae      	ldr	r3, [pc, #696]	; (8006d80 <TIM2_IRQHandler+0x2c0>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4aae      	ldr	r2, [pc, #696]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006aca:	7812      	ldrb	r2, [r2, #0]
 8006acc:	4611      	mov	r1, r2
 8006ace:	4aae      	ldr	r2, [pc, #696]	; (8006d88 <TIM2_IRQHandler+0x2c8>)
 8006ad0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006ad4:	1a9b      	subs	r3, r3, r2
 8006ad6:	4aaa      	ldr	r2, [pc, #680]	; (8006d80 <TIM2_IRQHandler+0x2c0>)
 8006ad8:	6013      	str	r3, [r2, #0]
	ADC_SUM_Vn = ADC_SUM_Vn - ADC_Array_Vn[i];
 8006ada:	4bac      	ldr	r3, [pc, #688]	; (8006d8c <TIM2_IRQHandler+0x2cc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4aa9      	ldr	r2, [pc, #676]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006ae0:	7812      	ldrb	r2, [r2, #0]
 8006ae2:	4611      	mov	r1, r2
 8006ae4:	4aaa      	ldr	r2, [pc, #680]	; (8006d90 <TIM2_IRQHandler+0x2d0>)
 8006ae6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006aea:	1a9b      	subs	r3, r3, r2
 8006aec:	4aa7      	ldr	r2, [pc, #668]	; (8006d8c <TIM2_IRQHandler+0x2cc>)
 8006aee:	6013      	str	r3, [r2, #0]
	ADC_SUM_Vp = ADC_SUM_Vp - ADC_Array_Vp[i];
 8006af0:	4ba8      	ldr	r3, [pc, #672]	; (8006d94 <TIM2_IRQHandler+0x2d4>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4aa3      	ldr	r2, [pc, #652]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	4611      	mov	r1, r2
 8006afa:	4aa7      	ldr	r2, [pc, #668]	; (8006d98 <TIM2_IRQHandler+0x2d8>)
 8006afc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006b00:	1a9b      	subs	r3, r3, r2
 8006b02:	4aa4      	ldr	r2, [pc, #656]	; (8006d94 <TIM2_IRQHandler+0x2d4>)
 8006b04:	6013      	str	r3, [r2, #0]

	ADC_Array_I[i] = ADC_current;				//save data from ADC read
 8006b06:	4b9f      	ldr	r3, [pc, #636]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4ba3      	ldr	r3, [pc, #652]	; (8006d9c <TIM2_IRQHandler+0x2dc>)
 8006b0e:	8819      	ldrh	r1, [r3, #0]
 8006b10:	4b9d      	ldr	r3, [pc, #628]	; (8006d88 <TIM2_IRQHandler+0x2c8>)
 8006b12:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Vn[i] = ADC_voltagen;
 8006b16:	4b9b      	ldr	r3, [pc, #620]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4ba0      	ldr	r3, [pc, #640]	; (8006da0 <TIM2_IRQHandler+0x2e0>)
 8006b1e:	8819      	ldrh	r1, [r3, #0]
 8006b20:	4b9b      	ldr	r3, [pc, #620]	; (8006d90 <TIM2_IRQHandler+0x2d0>)
 8006b22:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Vp[i] = ADC_voltagep;
 8006b26:	4b97      	ldr	r3, [pc, #604]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	4b9d      	ldr	r3, [pc, #628]	; (8006da4 <TIM2_IRQHandler+0x2e4>)
 8006b2e:	8819      	ldrh	r1, [r3, #0]
 8006b30:	4b99      	ldr	r3, [pc, #612]	; (8006d98 <TIM2_IRQHandler+0x2d8>)
 8006b32:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	ADC_SUM_I = ADC_SUM_I + ADC_Array_I[i];		//summing data and add new data
 8006b36:	4b93      	ldr	r3, [pc, #588]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4b92      	ldr	r3, [pc, #584]	; (8006d88 <TIM2_IRQHandler+0x2c8>)
 8006b3e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b42:	461a      	mov	r2, r3
 8006b44:	4b8e      	ldr	r3, [pc, #568]	; (8006d80 <TIM2_IRQHandler+0x2c0>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4413      	add	r3, r2
 8006b4a:	4a8d      	ldr	r2, [pc, #564]	; (8006d80 <TIM2_IRQHandler+0x2c0>)
 8006b4c:	6013      	str	r3, [r2, #0]
	ADC_SUM_Vn = ADC_SUM_Vn + ADC_Array_Vn[i];
 8006b4e:	4b8d      	ldr	r3, [pc, #564]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	461a      	mov	r2, r3
 8006b54:	4b8e      	ldr	r3, [pc, #568]	; (8006d90 <TIM2_IRQHandler+0x2d0>)
 8006b56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	4b8b      	ldr	r3, [pc, #556]	; (8006d8c <TIM2_IRQHandler+0x2cc>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	4a8a      	ldr	r2, [pc, #552]	; (8006d8c <TIM2_IRQHandler+0x2cc>)
 8006b64:	6013      	str	r3, [r2, #0]
	ADC_SUM_Vp = ADC_SUM_Vp + ADC_Array_Vp[i];
 8006b66:	4b87      	ldr	r3, [pc, #540]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	4b8a      	ldr	r3, [pc, #552]	; (8006d98 <TIM2_IRQHandler+0x2d8>)
 8006b6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b87      	ldr	r3, [pc, #540]	; (8006d94 <TIM2_IRQHandler+0x2d4>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4413      	add	r3, r2
 8006b7a:	4a86      	ldr	r2, [pc, #536]	; (8006d94 <TIM2_IRQHandler+0x2d4>)
 8006b7c:	6013      	str	r3, [r2, #0]

	ADC_Average_I = (float) ADC_SUM_I / maxdata;	//calculate average data
 8006b7e:	4b80      	ldr	r3, [pc, #512]	; (8006d80 <TIM2_IRQHandler+0x2c0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7fa f8c6 	bl	8000d14 <__aeabi_i2f>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	4987      	ldr	r1, [pc, #540]	; (8006da8 <TIM2_IRQHandler+0x2e8>)
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7fa f9c9 	bl	8000f24 <__aeabi_fdiv>
 8006b92:	4603      	mov	r3, r0
 8006b94:	461a      	mov	r2, r3
 8006b96:	4b85      	ldr	r3, [pc, #532]	; (8006dac <TIM2_IRQHandler+0x2ec>)
 8006b98:	601a      	str	r2, [r3, #0]
	ADC_Average_Vn = (float) ADC_SUM_Vn / maxdata;
 8006b9a:	4b7c      	ldr	r3, [pc, #496]	; (8006d8c <TIM2_IRQHandler+0x2cc>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fa f8b8 	bl	8000d14 <__aeabi_i2f>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	4980      	ldr	r1, [pc, #512]	; (8006da8 <TIM2_IRQHandler+0x2e8>)
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7fa f9bb 	bl	8000f24 <__aeabi_fdiv>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4b7f      	ldr	r3, [pc, #508]	; (8006db0 <TIM2_IRQHandler+0x2f0>)
 8006bb4:	601a      	str	r2, [r3, #0]
	ADC_Average_Vp = (float) ADC_SUM_Vp / maxdata;
 8006bb6:	4b77      	ldr	r3, [pc, #476]	; (8006d94 <TIM2_IRQHandler+0x2d4>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fa f8aa 	bl	8000d14 <__aeabi_i2f>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	4979      	ldr	r1, [pc, #484]	; (8006da8 <TIM2_IRQHandler+0x2e8>)
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fa f9ad 	bl	8000f24 <__aeabi_fdiv>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	461a      	mov	r2, r3
 8006bce:	4b79      	ldr	r3, [pc, #484]	; (8006db4 <TIM2_IRQHandler+0x2f4>)
 8006bd0:	601a      	str	r2, [r3, #0]

	i++;
 8006bd2:	4b6c      	ldr	r3, [pc, #432]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	4b6a      	ldr	r3, [pc, #424]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006bdc:	701a      	strb	r2, [r3, #0]
	i = i % maxdata;
 8006bde:	4b69      	ldr	r3, [pc, #420]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	4a75      	ldr	r2, [pc, #468]	; (8006db8 <TIM2_IRQHandler+0x2f8>)
 8006be4:	fba2 1203 	umull	r1, r2, r2, r3
 8006be8:	0952      	lsrs	r2, r2, #5
 8006bea:	2164      	movs	r1, #100	; 0x64
 8006bec:	fb01 f202 	mul.w	r2, r1, r2
 8006bf0:	1a9b      	subs	r3, r3, r2
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	4b63      	ldr	r3, [pc, #396]	; (8006d84 <TIM2_IRQHandler+0x2c4>)
 8006bf6:	701a      	strb	r2, [r3, #0]

	//Current value calculation and calibration
	Current_Charger = 0.0125*ADC_Average_I - 24.845 - OFFSET_CurrentSense;
 8006bf8:	4b6c      	ldr	r3, [pc, #432]	; (8006dac <TIM2_IRQHandler+0x2ec>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7f9 fc4f 	bl	80004a0 <__aeabi_f2d>
 8006c02:	a357      	add	r3, pc, #348	; (adr r3, 8006d60 <TIM2_IRQHandler+0x2a0>)
 8006c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c08:	f7f9 fca2 	bl	8000550 <__aeabi_dmul>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	460c      	mov	r4, r1
 8006c10:	4618      	mov	r0, r3
 8006c12:	4621      	mov	r1, r4
 8006c14:	a354      	add	r3, pc, #336	; (adr r3, 8006d68 <TIM2_IRQHandler+0x2a8>)
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f7f9 fae1 	bl	80001e0 <__aeabi_dsub>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	460c      	mov	r4, r1
 8006c22:	4625      	mov	r5, r4
 8006c24:	461c      	mov	r4, r3
 8006c26:	4b65      	ldr	r3, [pc, #404]	; (8006dbc <TIM2_IRQHandler+0x2fc>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7f9 fc38 	bl	80004a0 <__aeabi_f2d>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4620      	mov	r0, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	f7f9 fad2 	bl	80001e0 <__aeabi_dsub>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	4618      	mov	r0, r3
 8006c42:	4621      	mov	r1, r4
 8006c44:	f7f9 ff5c 	bl	8000b00 <__aeabi_d2f>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	4b5d      	ldr	r3, [pc, #372]	; (8006dc0 <TIM2_IRQHandler+0x300>)
 8006c4c:	601a      	str	r2, [r3, #0]
	OFFSET_Calibration = 0.0125*ADC_Average_I - 24.845;
 8006c4e:	4b57      	ldr	r3, [pc, #348]	; (8006dac <TIM2_IRQHandler+0x2ec>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7f9 fc24 	bl	80004a0 <__aeabi_f2d>
 8006c58:	a341      	add	r3, pc, #260	; (adr r3, 8006d60 <TIM2_IRQHandler+0x2a0>)
 8006c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5e:	f7f9 fc77 	bl	8000550 <__aeabi_dmul>
 8006c62:	4603      	mov	r3, r0
 8006c64:	460c      	mov	r4, r1
 8006c66:	4618      	mov	r0, r3
 8006c68:	4621      	mov	r1, r4
 8006c6a:	a33f      	add	r3, pc, #252	; (adr r3, 8006d68 <TIM2_IRQHandler+0x2a8>)
 8006c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c70:	f7f9 fab6 	bl	80001e0 <__aeabi_dsub>
 8006c74:	4603      	mov	r3, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	4618      	mov	r0, r3
 8006c7a:	4621      	mov	r1, r4
 8006c7c:	f7f9 ff40 	bl	8000b00 <__aeabi_d2f>
 8006c80:	4602      	mov	r2, r0
 8006c82:	4b50      	ldr	r3, [pc, #320]	; (8006dc4 <TIM2_IRQHandler+0x304>)
 8006c84:	601a      	str	r2, [r3, #0]
	if (Current_Charger<=0)
 8006c86:	4b4e      	ldr	r3, [pc, #312]	; (8006dc0 <TIM2_IRQHandler+0x300>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f04f 0100 	mov.w	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fa fa3c 	bl	800110c <__aeabi_fcmple>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <TIM2_IRQHandler+0x1e2>
		Current_Charger = 0;
 8006c9a:	4b49      	ldr	r3, [pc, #292]	; (8006dc0 <TIM2_IRQHandler+0x300>)
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]

	//Voltage value calculation and calibration
	ADC_VoltageResult = fabs (ADC_Average_Vn - ADC_Average_Vp);
 8006ca2:	4b43      	ldr	r3, [pc, #268]	; (8006db0 <TIM2_IRQHandler+0x2f0>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b43      	ldr	r3, [pc, #268]	; (8006db4 <TIM2_IRQHandler+0x2f4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4619      	mov	r1, r3
 8006cac:	4610      	mov	r0, r2
 8006cae:	f7f9 ff7b 	bl	8000ba8 <__aeabi_fsub>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006cb8:	4a43      	ldr	r2, [pc, #268]	; (8006dc8 <TIM2_IRQHandler+0x308>)
 8006cba:	6013      	str	r3, [r2, #0]
	Voltage_Charger = ADC_VoltageResult*0.0275-0.018;
 8006cbc:	4b42      	ldr	r3, [pc, #264]	; (8006dc8 <TIM2_IRQHandler+0x308>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7f9 fbed 	bl	80004a0 <__aeabi_f2d>
 8006cc6:	a32a      	add	r3, pc, #168	; (adr r3, 8006d70 <TIM2_IRQHandler+0x2b0>)
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f7f9 fc40 	bl	8000550 <__aeabi_dmul>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	a327      	add	r3, pc, #156	; (adr r3, 8006d78 <TIM2_IRQHandler+0x2b8>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	f7f9 fa7f 	bl	80001e0 <__aeabi_dsub>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	460c      	mov	r4, r1
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	4621      	mov	r1, r4
 8006cea:	f7f9 ff09 	bl	8000b00 <__aeabi_d2f>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	4b36      	ldr	r3, [pc, #216]	; (8006dcc <TIM2_IRQHandler+0x30c>)
 8006cf2:	601a      	str	r2, [r3, #0]
	if(Voltage_Charger <= 0)
 8006cf4:	4b35      	ldr	r3, [pc, #212]	; (8006dcc <TIM2_IRQHandler+0x30c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fa fa05 	bl	800110c <__aeabi_fcmple>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <TIM2_IRQHandler+0x250>
		Voltage_Charger = 0;
 8006d08:	4b30      	ldr	r3, [pc, #192]	; (8006dcc <TIM2_IRQHandler+0x30c>)
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	601a      	str	r2, [r3, #0]

	Temp_delay_calc++;
 8006d10:	4b2f      	ldr	r3, [pc, #188]	; (8006dd0 <TIM2_IRQHandler+0x310>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	b2da      	uxtb	r2, r3
 8006d18:	4b2d      	ldr	r3, [pc, #180]	; (8006dd0 <TIM2_IRQHandler+0x310>)
 8006d1a:	701a      	strb	r2, [r3, #0]

	if(Temp_delay_calc >= 100)
 8006d1c:	4b2c      	ldr	r3, [pc, #176]	; (8006dd0 <TIM2_IRQHandler+0x310>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b63      	cmp	r3, #99	; 0x63
 8006d22:	f240 80b0 	bls.w	8006e86 <TIM2_IRQHandler+0x3c6>
	{
		Temp_delay_calc = 0;
 8006d26:	4b2a      	ldr	r3, [pc, #168]	; (8006dd0 <TIM2_IRQHandler+0x310>)
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
		Res_T1 = ADC_temp1*10000/(3900-ADC_temp1); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8006d2c:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <TIM2_IRQHandler+0x314>)
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	f242 7310 	movw	r3, #10000	; 0x2710
 8006d36:	fb03 f202 	mul.w	r2, r3, r2
 8006d3a:	4b26      	ldr	r3, [pc, #152]	; (8006dd4 <TIM2_IRQHandler+0x314>)
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8006d42:	330c      	adds	r3, #12
 8006d44:	fb92 f3f3 	sdiv	r3, r2, r3
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7f9 ffe3 	bl	8000d14 <__aeabi_i2f>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4b21      	ldr	r3, [pc, #132]	; (8006dd8 <TIM2_IRQHandler+0x318>)
 8006d52:	601a      	str	r2, [r3, #0]
		Temp_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8006d54:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <TIM2_IRQHandler+0x318>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	e03f      	b.n	8006ddc <TIM2_IRQHandler+0x31c>
 8006d5c:	f3af 8000 	nop.w
 8006d60:	9999999a 	.word	0x9999999a
 8006d64:	3f899999 	.word	0x3f899999
 8006d68:	eb851eb8 	.word	0xeb851eb8
 8006d6c:	4038d851 	.word	0x4038d851
 8006d70:	c28f5c29 	.word	0xc28f5c29
 8006d74:	3f9c28f5 	.word	0x3f9c28f5
 8006d78:	8d4fdf3b 	.word	0x8d4fdf3b
 8006d7c:	3f926e97 	.word	0x3f926e97
 8006d80:	200008a0 	.word	0x200008a0
 8006d84:	20000dbc 	.word	0x20000dbc
 8006d88:	20000684 	.word	0x20000684
 8006d8c:	20000764 	.word	0x20000764
 8006d90:	200007d4 	.word	0x200007d4
 8006d94:	200008a8 	.word	0x200008a8
 8006d98:	20000918 	.word	0x20000918
 8006d9c:	20000a86 	.word	0x20000a86
 8006da0:	200008de 	.word	0x200008de
 8006da4:	20000a60 	.word	0x20000a60
 8006da8:	42c80000 	.word	0x42c80000
 8006dac:	200008d4 	.word	0x200008d4
 8006db0:	20000ab8 	.word	0x20000ab8
 8006db4:	20000a94 	.word	0x20000a94
 8006db8:	51eb851f 	.word	0x51eb851f
 8006dbc:	200007b4 	.word	0x200007b4
 8006dc0:	20000ab4 	.word	0x20000ab4
 8006dc4:	2000078c 	.word	0x2000078c
 8006dc8:	200009fc 	.word	0x200009fc
 8006dcc:	20000a80 	.word	0x20000a80
 8006dd0:	20000dc4 	.word	0x20000dc4
 8006dd4:	200008a4 	.word	0x200008a4
 8006dd8:	200008b0 	.word	0x200008b0
 8006ddc:	f7f9 fb60 	bl	80004a0 <__aeabi_f2d>
 8006de0:	4603      	mov	r3, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	4618      	mov	r0, r3
 8006de6:	4621      	mov	r1, r4
 8006de8:	f008 f89c 	bl	800ef24 <log>
 8006dec:	a3a8      	add	r3, pc, #672	; (adr r3, 8007090 <TIM2_IRQHandler+0x5d0>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fbad 	bl	8000550 <__aeabi_dmul>
 8006df6:	4603      	mov	r3, r0
 8006df8:	460c      	mov	r4, r1
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	4621      	mov	r1, r4
 8006dfe:	a3a6      	add	r3, pc, #664	; (adr r3, 8007098 <TIM2_IRQHandler+0x5d8>)
 8006e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e04:	f7f9 f9ee 	bl	80001e4 <__adddf3>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	4621      	mov	r1, r4
 8006e10:	f7f9 fe76 	bl	8000b00 <__aeabi_d2f>
 8006e14:	4602      	mov	r2, r0
 8006e16:	4ba4      	ldr	r3, [pc, #656]	; (80070a8 <TIM2_IRQHandler+0x5e8>)
 8006e18:	601a      	str	r2, [r3, #0]
		Res_T2 = ADC_temp2*10000/(3900-ADC_temp2);
 8006e1a:	4ba4      	ldr	r3, [pc, #656]	; (80070ac <TIM2_IRQHandler+0x5ec>)
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f242 7310 	movw	r3, #10000	; 0x2710
 8006e24:	fb03 f202 	mul.w	r2, r3, r2
 8006e28:	4ba0      	ldr	r3, [pc, #640]	; (80070ac <TIM2_IRQHandler+0x5ec>)
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8006e30:	330c      	adds	r3, #12
 8006e32:	fb92 f3f3 	sdiv	r3, r2, r3
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7f9 ff6c 	bl	8000d14 <__aeabi_i2f>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b9c      	ldr	r3, [pc, #624]	; (80070b0 <TIM2_IRQHandler+0x5f0>)
 8006e40:	601a      	str	r2, [r3, #0]
		Temp_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8006e42:	4b9b      	ldr	r3, [pc, #620]	; (80070b0 <TIM2_IRQHandler+0x5f0>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7f9 fb2a 	bl	80004a0 <__aeabi_f2d>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	460c      	mov	r4, r1
 8006e50:	4618      	mov	r0, r3
 8006e52:	4621      	mov	r1, r4
 8006e54:	f008 f866 	bl	800ef24 <log>
 8006e58:	a38d      	add	r3, pc, #564	; (adr r3, 8007090 <TIM2_IRQHandler+0x5d0>)
 8006e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5e:	f7f9 fb77 	bl	8000550 <__aeabi_dmul>
 8006e62:	4603      	mov	r3, r0
 8006e64:	460c      	mov	r4, r1
 8006e66:	4618      	mov	r0, r3
 8006e68:	4621      	mov	r1, r4
 8006e6a:	a38b      	add	r3, pc, #556	; (adr r3, 8007098 <TIM2_IRQHandler+0x5d8>)
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	f7f9 f9b8 	bl	80001e4 <__adddf3>
 8006e74:	4603      	mov	r3, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	4618      	mov	r0, r3
 8006e7a:	4621      	mov	r1, r4
 8006e7c:	f7f9 fe40 	bl	8000b00 <__aeabi_d2f>
 8006e80:	4602      	mov	r2, r0
 8006e82:	4b8c      	ldr	r3, [pc, #560]	; (80070b4 <TIM2_IRQHandler+0x5f4>)
 8006e84:	601a      	str	r2, [r3, #0]
	// *********************** end of Sensing Process (ADC average) ******************************


	// ***********************Charge or standby State ******************************

	if (Charger_Mode == 1){	//charge mode
 8006e86:	4b8c      	ldr	r3, [pc, #560]	; (80070b8 <TIM2_IRQHandler+0x5f8>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	f040 80aa 	bne.w	8006fe4 <TIM2_IRQHandler+0x524>

		if(	flag_trip_overvoltage == 1		||
 8006e90:	4b8a      	ldr	r3, [pc, #552]	; (80070bc <TIM2_IRQHandler+0x5fc>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d027      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			flag_trip_overtemperature == 1	||
 8006e98:	4b89      	ldr	r3, [pc, #548]	; (80070c0 <TIM2_IRQHandler+0x600>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
		if(	flag_trip_overvoltage == 1		||
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d023      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			flag_trip_undertemperature == 1	||
 8006ea0:	4b88      	ldr	r3, [pc, #544]	; (80070c4 <TIM2_IRQHandler+0x604>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature == 1	||
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d01f      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			flag_trip_overcurrentcharge == 1||
 8006ea8:	4b87      	ldr	r3, [pc, #540]	; (80070c8 <TIM2_IRQHandler+0x608>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature == 1	||
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d01b      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			flag_trip_SOCOverCharge == 1	||
 8006eb0:	4b86      	ldr	r3, [pc, #536]	; (80070cc <TIM2_IRQHandler+0x60c>)
 8006eb2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge == 1||
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d017      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			flag_trip_shortcircuit == 1		||
 8006eb8:	4b85      	ldr	r3, [pc, #532]	; (80070d0 <TIM2_IRQHandler+0x610>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge == 1	||
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d013      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			flag_trip_systemfailure == 1	||
 8006ec0:	4b84      	ldr	r3, [pc, #528]	; (80070d4 <TIM2_IRQHandler+0x614>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit == 1		||
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d00f      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			Flag_ChargerShortCircuit == 1	||
 8006ec8:	4b83      	ldr	r3, [pc, #524]	; (80070d8 <TIM2_IRQHandler+0x618>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
			flag_trip_systemfailure == 1	||
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d00b      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			Flag_ChargerOverCurrent == 1	||
 8006ed0:	4b82      	ldr	r3, [pc, #520]	; (80070dc <TIM2_IRQHandler+0x61c>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerShortCircuit == 1	||
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d007      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			Flag_ChargerOverTemperature == 1||
 8006ed8:	4b81      	ldr	r3, [pc, #516]	; (80070e0 <TIM2_IRQHandler+0x620>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverCurrent == 1	||
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d003      	beq.n	8006ee8 <TIM2_IRQHandler+0x428>
			Flag_ChargerOverVoltage == 1	)
 8006ee0:	4b80      	ldr	r3, [pc, #512]	; (80070e4 <TIM2_IRQHandler+0x624>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverTemperature == 1||
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d11b      	bne.n	8006f20 <TIM2_IRQHandler+0x460>
			{
				duty=0;
 8006ee8:	4b7f      	ldr	r3, [pc, #508]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	601a      	str	r2, [r3, #0]
				htim1.Instance->CCR1=duty*TIM1->ARR;
 8006ef0:	4b7e      	ldr	r3, [pc, #504]	; (80070ec <TIM2_IRQHandler+0x62c>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7f9 ff09 	bl	8000d0c <__aeabi_ui2f>
 8006efa:	4602      	mov	r2, r0
 8006efc:	4b7a      	ldr	r3, [pc, #488]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7f9 ff5a 	bl	8000dbc <__aeabi_fmul>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	4b78      	ldr	r3, [pc, #480]	; (80070f0 <TIM2_IRQHandler+0x630>)
 8006f0e:	681c      	ldr	r4, [r3, #0]
 8006f10:	4610      	mov	r0, r2
 8006f12:	f7fa f919 	bl	8001148 <__aeabi_f2uiz>
 8006f16:	4603      	mov	r3, r0
 8006f18:	6363      	str	r3, [r4, #52]	; 0x34
				Charger_Mode = 2;
 8006f1a:	4b67      	ldr	r3, [pc, #412]	; (80070b8 <TIM2_IRQHandler+0x5f8>)
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	701a      	strb	r2, [r3, #0]
			}

		Fault_Check();
 8006f20:	f000 fa6e 	bl	8007400 <Fault_Check>
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8006f24:	4b71      	ldr	r3, [pc, #452]	; (80070ec <TIM2_IRQHandler+0x62c>)
 8006f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7f9 feef 	bl	8000d0c <__aeabi_ui2f>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	4b6d      	ldr	r3, [pc, #436]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4619      	mov	r1, r3
 8006f36:	4610      	mov	r0, r2
 8006f38:	f7f9 ff40 	bl	8000dbc <__aeabi_fmul>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	461a      	mov	r2, r3
 8006f40:	4b6b      	ldr	r3, [pc, #428]	; (80070f0 <TIM2_IRQHandler+0x630>)
 8006f42:	681c      	ldr	r4, [r3, #0]
 8006f44:	4610      	mov	r0, r2
 8006f46:	f7fa f8ff 	bl	8001148 <__aeabi_f2uiz>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	6363      	str	r3, [r4, #52]	; 0x34
		if(duty>=0.9)
 8006f4e:	4b66      	ldr	r3, [pc, #408]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7f9 faa4 	bl	80004a0 <__aeabi_f2d>
 8006f58:	a351      	add	r3, pc, #324	; (adr r3, 80070a0 <TIM2_IRQHandler+0x5e0>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 fd7d 	bl	8000a5c <__aeabi_dcmpge>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d003      	beq.n	8006f70 <TIM2_IRQHandler+0x4b0>
			duty=0;
 8006f68:	4b5f      	ldr	r3, [pc, #380]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]

		if(Batt_SOC.m_uint16t>70){
 8006f70:	4b60      	ldr	r3, [pc, #384]	; (80070f4 <TIM2_IRQHandler+0x634>)
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	2b46      	cmp	r3, #70	; 0x46
 8006f76:	d901      	bls.n	8006f7c <TIM2_IRQHandler+0x4bc>
			Constant_Voltage();
 8006f78:	f7fc fac6 	bl	8003508 <Constant_Voltage>
		}

		if(Batt_SOC.m_uint16t<=70){
 8006f7c:	4b5d      	ldr	r3, [pc, #372]	; (80070f4 <TIM2_IRQHandler+0x634>)
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	2b46      	cmp	r3, #70	; 0x46
 8006f82:	d801      	bhi.n	8006f88 <TIM2_IRQHandler+0x4c8>
			Constant_Current();
 8006f84:	f7fa fa84 	bl	8001490 <Constant_Current>
		}

		//Clearing Charger Decrease rating flag
		if (flag_Derating == 1 && Temp_T1<=(SetProtection_Temp1-15) && Temp_T2<=(SetProtection_Temp2-25)){
 8006f88:	4b5b      	ldr	r3, [pc, #364]	; (80070f8 <TIM2_IRQHandler+0x638>)
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d122      	bne.n	8006fd6 <TIM2_IRQHandler+0x516>
 8006f90:	4b5a      	ldr	r3, [pc, #360]	; (80070fc <TIM2_IRQHandler+0x63c>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	3b0f      	subs	r3, #15
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7f9 febc 	bl	8000d14 <__aeabi_i2f>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <TIM2_IRQHandler+0x5e8>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7fa f8bb 	bl	8001120 <__aeabi_fcmpge>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d012      	beq.n	8006fd6 <TIM2_IRQHandler+0x516>
 8006fb0:	4b53      	ldr	r3, [pc, #332]	; (8007100 <TIM2_IRQHandler+0x640>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	3b19      	subs	r3, #25
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7f9 feac 	bl	8000d14 <__aeabi_i2f>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	4b3d      	ldr	r3, [pc, #244]	; (80070b4 <TIM2_IRQHandler+0x5f4>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7fa f8ab 	bl	8001120 <__aeabi_fcmpge>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <TIM2_IRQHandler+0x516>
			flag_Derating = 0;
 8006fd0:	4b49      	ldr	r3, [pc, #292]	; (80070f8 <TIM2_IRQHandler+0x638>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	701a      	strb	r2, [r3, #0]
		}

		L=0; Tbuzz=999;
 8006fd6:	4b4b      	ldr	r3, [pc, #300]	; (8007104 <TIM2_IRQHandler+0x644>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	4b4a      	ldr	r3, [pc, #296]	; (8007108 <TIM2_IRQHandler+0x648>)
 8006fde:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006fe2:	801a      	strh	r2, [r3, #0]
	}

	if(Charger_Mode == 0){	//standby mode
 8006fe4:	4b34      	ldr	r3, [pc, #208]	; (80070b8 <TIM2_IRQHandler+0x5f8>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d121      	bne.n	8007030 <TIM2_IRQHandler+0x570>
		duty=0;
 8006fec:	4b3e      	ldr	r3, [pc, #248]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8006fee:	f04f 0200 	mov.w	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8006ff4:	4b3d      	ldr	r3, [pc, #244]	; (80070ec <TIM2_IRQHandler+0x62c>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7f9 fe87 	bl	8000d0c <__aeabi_ui2f>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4b39      	ldr	r3, [pc, #228]	; (80070e8 <TIM2_IRQHandler+0x628>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4619      	mov	r1, r3
 8007006:	4610      	mov	r0, r2
 8007008:	f7f9 fed8 	bl	8000dbc <__aeabi_fmul>
 800700c:	4603      	mov	r3, r0
 800700e:	461a      	mov	r2, r3
 8007010:	4b37      	ldr	r3, [pc, #220]	; (80070f0 <TIM2_IRQHandler+0x630>)
 8007012:	681c      	ldr	r4, [r3, #0]
 8007014:	4610      	mov	r0, r2
 8007016:	f7fa f897 	bl	8001148 <__aeabi_f2uiz>
 800701a:	4603      	mov	r3, r0
 800701c:	6363      	str	r3, [r4, #52]	; 0x34
		Clear_ProtectionFlag();
 800701e:	f000 f9b5 	bl	800738c <Clear_ProtectionFlag>
		Eror_Code = 0;
 8007022:	4b3a      	ldr	r3, [pc, #232]	; (800710c <TIM2_IRQHandler+0x64c>)
 8007024:	2200      	movs	r2, #0
 8007026:	701a      	strb	r2, [r3, #0]
		OFFSET_CurrentSense = OFFSET_Calibration;
 8007028:	4b39      	ldr	r3, [pc, #228]	; (8007110 <TIM2_IRQHandler+0x650>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a39      	ldr	r2, [pc, #228]	; (8007114 <TIM2_IRQHandler+0x654>)
 800702e:	6013      	str	r3, [r2, #0]
	}

	if(Charger_Mode == 2){	//Protection mode
 8007030:	4b21      	ldr	r3, [pc, #132]	; (80070b8 <TIM2_IRQHandler+0x5f8>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f040 80c7 	bne.w	80071c8 <TIM2_IRQHandler+0x708>
		Tbuzz=Tbuzz+1;
 800703a:	4b33      	ldr	r3, [pc, #204]	; (8007108 <TIM2_IRQHandler+0x648>)
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	3301      	adds	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	4b31      	ldr	r3, [pc, #196]	; (8007108 <TIM2_IRQHandler+0x648>)
 8007044:	801a      	strh	r2, [r3, #0]
		if (Tbuzz==1000 && L<=5){
 8007046:	4b30      	ldr	r3, [pc, #192]	; (8007108 <TIM2_IRQHandler+0x648>)
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800704e:	d116      	bne.n	800707e <TIM2_IRQHandler+0x5be>
 8007050:	4b2c      	ldr	r3, [pc, #176]	; (8007104 <TIM2_IRQHandler+0x644>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b05      	cmp	r3, #5
 8007056:	d812      	bhi.n	800707e <TIM2_IRQHandler+0x5be>
			HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8007058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800705c:	482e      	ldr	r0, [pc, #184]	; (8007118 <TIM2_IRQHandler+0x658>)
 800705e:	f002 ffa2 	bl	8009fa6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 8007062:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007066:	482d      	ldr	r0, [pc, #180]	; (800711c <TIM2_IRQHandler+0x65c>)
 8007068:	f002 ff9d 	bl	8009fa6 <HAL_GPIO_TogglePin>
			Tbuzz=0; L+=1;
 800706c:	4b26      	ldr	r3, [pc, #152]	; (8007108 <TIM2_IRQHandler+0x648>)
 800706e:	2200      	movs	r2, #0
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <TIM2_IRQHandler+0x644>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	3301      	adds	r3, #1
 8007078:	b2da      	uxtb	r2, r3
 800707a:	4b22      	ldr	r3, [pc, #136]	; (8007104 <TIM2_IRQHandler+0x644>)
 800707c:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1){
 800707e:	2180      	movs	r1, #128	; 0x80
 8007080:	4825      	ldr	r0, [pc, #148]	; (8007118 <TIM2_IRQHandler+0x658>)
 8007082:	f002 ff61 	bl	8009f48 <HAL_GPIO_ReadPin>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d15c      	bne.n	8007146 <TIM2_IRQHandler+0x686>
 800708c:	e048      	b.n	8007120 <TIM2_IRQHandler+0x660>
 800708e:	bf00      	nop
 8007090:	cccccccd 	.word	0xcccccccd
 8007094:	c0380ccc 	.word	0xc0380ccc
 8007098:	b851eb85 	.word	0xb851eb85
 800709c:	406ecd1e 	.word	0x406ecd1e
 80070a0:	cccccccd 	.word	0xcccccccd
 80070a4:	3feccccc 	.word	0x3feccccc
 80070a8:	200009f8 	.word	0x200009f8
 80070ac:	2000074c 	.word	0x2000074c
 80070b0:	20000a74 	.word	0x20000a74
 80070b4:	20000750 	.word	0x20000750
 80070b8:	200007a8 	.word	0x200007a8
 80070bc:	20000aec 	.word	0x20000aec
 80070c0:	200007a9 	.word	0x200007a9
 80070c4:	200008dc 	.word	0x200008dc
 80070c8:	20000a54 	.word	0x20000a54
 80070cc:	20000682 	.word	0x20000682
 80070d0:	20000760 	.word	0x20000760
 80070d4:	20000780 	.word	0x20000780
 80070d8:	2000089c 	.word	0x2000089c
 80070dc:	200007c0 	.word	0x200007c0
 80070e0:	20000795 	.word	0x20000795
 80070e4:	200008ac 	.word	0x200008ac
 80070e8:	20000abc 	.word	0x20000abc
 80070ec:	40010000 	.word	0x40010000
 80070f0:	20000e4c 	.word	0x20000e4c
 80070f4:	20000a00 	.word	0x20000a00
 80070f8:	20000aa4 	.word	0x20000aa4
 80070fc:	20000055 	.word	0x20000055
 8007100:	20000056 	.word	0x20000056
 8007104:	20000666 	.word	0x20000666
 8007108:	20000050 	.word	0x20000050
 800710c:	20000680 	.word	0x20000680
 8007110:	2000078c 	.word	0x2000078c
 8007114:	200007b4 	.word	0x200007b4
 8007118:	40020800 	.word	0x40020800
 800711c:	40020400 	.word	0x40020400
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 8007120:	2140      	movs	r1, #64	; 0x40
 8007122:	482d      	ldr	r0, [pc, #180]	; (80071d8 <TIM2_IRQHandler+0x718>)
 8007124:	f002 ff3f 	bl	8009fa6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8007128:	2200      	movs	r2, #0
 800712a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800712e:	482a      	ldr	r0, [pc, #168]	; (80071d8 <TIM2_IRQHandler+0x718>)
 8007130:	f002 ff21 	bl	8009f76 <HAL_GPIO_WritePin>
			Clear_ProtectionFlag();
 8007134:	f000 f92a 	bl	800738c <Clear_ProtectionFlag>
			dc=0; Charger_Mode =1;
 8007138:	4b28      	ldr	r3, [pc, #160]	; (80071dc <TIM2_IRQHandler+0x71c>)
 800713a:	f04f 0200 	mov.w	r2, #0
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <TIM2_IRQHandler+0x720>)
 8007142:	2201      	movs	r2, #1
 8007144:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Charger Over Temperature
		if (Flag_ChargerOverTemperature == 1 && Temp_T1<=(SetProtection_Temp1-10) && Temp_T2<=(SetProtection_Temp2-10) && L>5){
 8007146:	4b27      	ldr	r3, [pc, #156]	; (80071e4 <TIM2_IRQHandler+0x724>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d12d      	bne.n	80071aa <TIM2_IRQHandler+0x6ea>
 800714e:	4b26      	ldr	r3, [pc, #152]	; (80071e8 <TIM2_IRQHandler+0x728>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	3b0a      	subs	r3, #10
 8007154:	4618      	mov	r0, r3
 8007156:	f7f9 fddd 	bl	8000d14 <__aeabi_i2f>
 800715a:	4602      	mov	r2, r0
 800715c:	4b23      	ldr	r3, [pc, #140]	; (80071ec <TIM2_IRQHandler+0x72c>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4619      	mov	r1, r3
 8007162:	4610      	mov	r0, r2
 8007164:	f7f9 ffdc 	bl	8001120 <__aeabi_fcmpge>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d01d      	beq.n	80071aa <TIM2_IRQHandler+0x6ea>
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <TIM2_IRQHandler+0x730>)
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	3b0a      	subs	r3, #10
 8007174:	4618      	mov	r0, r3
 8007176:	f7f9 fdcd 	bl	8000d14 <__aeabi_i2f>
 800717a:	4602      	mov	r2, r0
 800717c:	4b1d      	ldr	r3, [pc, #116]	; (80071f4 <TIM2_IRQHandler+0x734>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4619      	mov	r1, r3
 8007182:	4610      	mov	r0, r2
 8007184:	f7f9 ffcc 	bl	8001120 <__aeabi_fcmpge>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <TIM2_IRQHandler+0x6ea>
 800718e:	4b1a      	ldr	r3, [pc, #104]	; (80071f8 <TIM2_IRQHandler+0x738>)
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b05      	cmp	r3, #5
 8007194:	d909      	bls.n	80071aa <TIM2_IRQHandler+0x6ea>
			Flag_ChargerOverTemperature = 0;
 8007196:	4b13      	ldr	r3, [pc, #76]	; (80071e4 <TIM2_IRQHandler+0x724>)
 8007198:	2200      	movs	r2, #0
 800719a:	701a      	strb	r2, [r3, #0]
			dc=0; Charger_Mode =1;
 800719c:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <TIM2_IRQHandler+0x71c>)
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	4b0e      	ldr	r3, [pc, #56]	; (80071e0 <TIM2_IRQHandler+0x720>)
 80071a6:	2201      	movs	r2, #1
 80071a8:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Battery Over Temperature
		if (flag_trip_overtemperature == 0 && LastFlag_OverTemperature == 1){
 80071aa:	4b14      	ldr	r3, [pc, #80]	; (80071fc <TIM2_IRQHandler+0x73c>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d10a      	bne.n	80071c8 <TIM2_IRQHandler+0x708>
 80071b2:	4b13      	ldr	r3, [pc, #76]	; (8007200 <TIM2_IRQHandler+0x740>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d106      	bne.n	80071c8 <TIM2_IRQHandler+0x708>
			dc=0; Charger_Mode =1;
 80071ba:	4b08      	ldr	r3, [pc, #32]	; (80071dc <TIM2_IRQHandler+0x71c>)
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]
 80071c2:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <TIM2_IRQHandler+0x720>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	701a      	strb	r2, [r3, #0]
		}
	}

	Eror_CodeCheck();
 80071c8:	f000 f852 	bl	8007270 <Eror_CodeCheck>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80071cc:	480d      	ldr	r0, [pc, #52]	; (8007204 <TIM2_IRQHandler+0x744>)
 80071ce:	f004 fb7f 	bl	800b8d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80071d2:	bf00      	nop
 80071d4:	bdb0      	pop	{r4, r5, r7, pc}
 80071d6:	bf00      	nop
 80071d8:	40020800 	.word	0x40020800
 80071dc:	20000770 	.word	0x20000770
 80071e0:	200007a8 	.word	0x200007a8
 80071e4:	20000795 	.word	0x20000795
 80071e8:	20000055 	.word	0x20000055
 80071ec:	200009f8 	.word	0x200009f8
 80071f0:	20000056 	.word	0x20000056
 80071f4:	20000750 	.word	0x20000750
 80071f8:	20000666 	.word	0x20000666
 80071fc:	200007a9 	.word	0x200007a9
 8007200:	200009e0 	.word	0x200009e0
 8007204:	20000e8c 	.word	0x20000e8c

08007208 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
//	CAN_Tx_Process();


  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800720c:	4802      	ldr	r0, [pc, #8]	; (8007218 <TIM3_IRQHandler+0x10>)
 800720e:	f004 fb5f 	bl	800b8d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007212:	bf00      	nop
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20000e0c 	.word	0x20000e0c

0800721c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	CAN_Rx_Process();	//can receive handle
 8007220:	f7fe fade 	bl	80057e0 <CAN_Rx_Process>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007224:	4802      	ldr	r0, [pc, #8]	; (8007230 <TIM4_IRQHandler+0x14>)
 8007226:	f004 fb53 	bl	800b8d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800722a:	bf00      	nop
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	20000dcc 	.word	0x20000dcc

08007234 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007238:	4802      	ldr	r0, [pc, #8]	; (8007244 <USART1_IRQHandler+0x10>)
 800723a:	f005 fa37 	bl	800c6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800723e:	bf00      	nop
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20000f0c 	.word	0x20000f0c

08007248 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800724c:	4802      	ldr	r0, [pc, #8]	; (8007258 <USART3_IRQHandler+0x10>)
 800724e:	f005 fa2d 	bl	800c6ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007252:	bf00      	nop
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	20000ecc 	.word	0x20000ecc

0800725c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007260:	4802      	ldr	r0, [pc, #8]	; (800726c <DMA2_Stream0_IRQHandler+0x10>)
 8007262:	f002 fa6d 	bl	8009740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007266:	bf00      	nop
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000b68 	.word	0x20000b68

08007270 <Eror_CodeCheck>:

/* USER CODE BEGIN 1 */

void Eror_CodeCheck(void)
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
	if (flag_trip_shortcircuit==1)
 8007274:	4b36      	ldr	r3, [pc, #216]	; (8007350 <Eror_CodeCheck+0xe0>)
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d103      	bne.n	8007284 <Eror_CodeCheck+0x14>
		Eror_Code=1;	//Battery Pack short circuit
 800727c:	4b35      	ldr	r3, [pc, #212]	; (8007354 <Eror_CodeCheck+0xe4>)
 800727e:	2201      	movs	r2, #1
 8007280:	701a      	strb	r2, [r3, #0]

	else if (Flag_ChargerOverVoltage==1)
		Eror_Code=18;	//Charger Over Current
//	else
//		Eror_Code=0;
}
 8007282:	e061      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_overcurrentcharge==1)
 8007284:	4b34      	ldr	r3, [pc, #208]	; (8007358 <Eror_CodeCheck+0xe8>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d103      	bne.n	8007294 <Eror_CodeCheck+0x24>
		Eror_Code=3;	//Battery Pack over current charge
 800728c:	4b31      	ldr	r3, [pc, #196]	; (8007354 <Eror_CodeCheck+0xe4>)
 800728e:	2203      	movs	r2, #3
 8007290:	701a      	strb	r2, [r3, #0]
}
 8007292:	e059      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_overtemperature==1){
 8007294:	4b31      	ldr	r3, [pc, #196]	; (800735c <Eror_CodeCheck+0xec>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d106      	bne.n	80072aa <Eror_CodeCheck+0x3a>
		Eror_Code=4;	//Battery Pack over temperature
 800729c:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <Eror_CodeCheck+0xe4>)
 800729e:	2204      	movs	r2, #4
 80072a0:	701a      	strb	r2, [r3, #0]
		LastFlag_OverTemperature = 1;
 80072a2:	4b2f      	ldr	r3, [pc, #188]	; (8007360 <Eror_CodeCheck+0xf0>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
}
 80072a8:	e04e      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_undertemperature==1)
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <Eror_CodeCheck+0xf4>)
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d103      	bne.n	80072ba <Eror_CodeCheck+0x4a>
		Eror_Code=5;	//Battery Pack under temperature
 80072b2:	4b28      	ldr	r3, [pc, #160]	; (8007354 <Eror_CodeCheck+0xe4>)
 80072b4:	2205      	movs	r2, #5
 80072b6:	701a      	strb	r2, [r3, #0]
}
 80072b8:	e046      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_unbalance==1)
 80072ba:	4b2b      	ldr	r3, [pc, #172]	; (8007368 <Eror_CodeCheck+0xf8>)
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d103      	bne.n	80072ca <Eror_CodeCheck+0x5a>
		Eror_Code=8;	//Battery Pack unbalance
 80072c2:	4b24      	ldr	r3, [pc, #144]	; (8007354 <Eror_CodeCheck+0xe4>)
 80072c4:	2208      	movs	r2, #8
 80072c6:	701a      	strb	r2, [r3, #0]
}
 80072c8:	e03e      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_undervoltage==1)
 80072ca:	4b28      	ldr	r3, [pc, #160]	; (800736c <Eror_CodeCheck+0xfc>)
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d103      	bne.n	80072da <Eror_CodeCheck+0x6a>
		Eror_Code=9;	//Battery Pack under voltage
 80072d2:	4b20      	ldr	r3, [pc, #128]	; (8007354 <Eror_CodeCheck+0xe4>)
 80072d4:	2209      	movs	r2, #9
 80072d6:	701a      	strb	r2, [r3, #0]
}
 80072d8:	e036      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_overvoltage==1)
 80072da:	4b25      	ldr	r3, [pc, #148]	; (8007370 <Eror_CodeCheck+0x100>)
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d103      	bne.n	80072ea <Eror_CodeCheck+0x7a>
		Eror_Code=10;	//Battery Pack over voltage
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <Eror_CodeCheck+0xe4>)
 80072e4:	220a      	movs	r2, #10
 80072e6:	701a      	strb	r2, [r3, #0]
}
 80072e8:	e02e      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (flag_trip_systemfailure==1)
 80072ea:	4b22      	ldr	r3, [pc, #136]	; (8007374 <Eror_CodeCheck+0x104>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d103      	bne.n	80072fa <Eror_CodeCheck+0x8a>
			Eror_Code=12;	//Battery Pack system failure
 80072f2:	4b18      	ldr	r3, [pc, #96]	; (8007354 <Eror_CodeCheck+0xe4>)
 80072f4:	220c      	movs	r2, #12
 80072f6:	701a      	strb	r2, [r3, #0]
}
 80072f8:	e026      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (Flag_ChargerUnderVoltage==1)
 80072fa:	4b1f      	ldr	r3, [pc, #124]	; (8007378 <Eror_CodeCheck+0x108>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d103      	bne.n	800730a <Eror_CodeCheck+0x9a>
		Eror_Code=13;	//Charger Under Voltage
 8007302:	4b14      	ldr	r3, [pc, #80]	; (8007354 <Eror_CodeCheck+0xe4>)
 8007304:	220d      	movs	r2, #13
 8007306:	701a      	strb	r2, [r3, #0]
}
 8007308:	e01e      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (Flag_ChargerUnderTemperature==1)
 800730a:	4b1c      	ldr	r3, [pc, #112]	; (800737c <Eror_CodeCheck+0x10c>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d103      	bne.n	800731a <Eror_CodeCheck+0xaa>
		Eror_Code=15;	//Charger Under Temperature
 8007312:	4b10      	ldr	r3, [pc, #64]	; (8007354 <Eror_CodeCheck+0xe4>)
 8007314:	220f      	movs	r2, #15
 8007316:	701a      	strb	r2, [r3, #0]
}
 8007318:	e016      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (Flag_ChargerShortCircuit==1)
 800731a:	4b19      	ldr	r3, [pc, #100]	; (8007380 <Eror_CodeCheck+0x110>)
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d103      	bne.n	800732a <Eror_CodeCheck+0xba>
		Eror_Code=16;	//Charger Short Circuit
 8007322:	4b0c      	ldr	r3, [pc, #48]	; (8007354 <Eror_CodeCheck+0xe4>)
 8007324:	2210      	movs	r2, #16
 8007326:	701a      	strb	r2, [r3, #0]
}
 8007328:	e00e      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (Flag_ChargerOverCurrent==1)
 800732a:	4b16      	ldr	r3, [pc, #88]	; (8007384 <Eror_CodeCheck+0x114>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d103      	bne.n	800733a <Eror_CodeCheck+0xca>
		Eror_Code=17;	//Charger Over Current
 8007332:	4b08      	ldr	r3, [pc, #32]	; (8007354 <Eror_CodeCheck+0xe4>)
 8007334:	2211      	movs	r2, #17
 8007336:	701a      	strb	r2, [r3, #0]
}
 8007338:	e006      	b.n	8007348 <Eror_CodeCheck+0xd8>
	else if (Flag_ChargerOverVoltage==1)
 800733a:	4b13      	ldr	r3, [pc, #76]	; (8007388 <Eror_CodeCheck+0x118>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d102      	bne.n	8007348 <Eror_CodeCheck+0xd8>
		Eror_Code=18;	//Charger Over Current
 8007342:	4b04      	ldr	r3, [pc, #16]	; (8007354 <Eror_CodeCheck+0xe4>)
 8007344:	2212      	movs	r2, #18
 8007346:	701a      	strb	r2, [r3, #0]
}
 8007348:	bf00      	nop
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr
 8007350:	20000760 	.word	0x20000760
 8007354:	20000680 	.word	0x20000680
 8007358:	20000a54 	.word	0x20000a54
 800735c:	200007a9 	.word	0x200007a9
 8007360:	200009e0 	.word	0x200009e0
 8007364:	200008dc 	.word	0x200008dc
 8007368:	20000681 	.word	0x20000681
 800736c:	200008e0 	.word	0x200008e0
 8007370:	20000aec 	.word	0x20000aec
 8007374:	20000780 	.word	0x20000780
 8007378:	200007b0 	.word	0x200007b0
 800737c:	20000b08 	.word	0x20000b08
 8007380:	2000089c 	.word	0x2000089c
 8007384:	200007c0 	.word	0x200007c0
 8007388:	200008ac 	.word	0x200008ac

0800738c <Clear_ProtectionFlag>:

void Clear_ProtectionFlag(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
	flag_trip_overvoltage = 0;
 8007390:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <Clear_ProtectionFlag+0x48>)
 8007392:	2200      	movs	r2, #0
 8007394:	701a      	strb	r2, [r3, #0]
	flag_trip_overtemperature = 0;
 8007396:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <Clear_ProtectionFlag+0x4c>)
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature = 0;
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <Clear_ProtectionFlag+0x50>)
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge = 0;
 80073a2:	4b0f      	ldr	r3, [pc, #60]	; (80073e0 <Clear_ProtectionFlag+0x54>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge = 0;
 80073a8:	4b0e      	ldr	r3, [pc, #56]	; (80073e4 <Clear_ProtectionFlag+0x58>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit = 0;
 80073ae:	4b0e      	ldr	r3, [pc, #56]	; (80073e8 <Clear_ProtectionFlag+0x5c>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure = 0;
 80073b4:	4b0d      	ldr	r3, [pc, #52]	; (80073ec <Clear_ProtectionFlag+0x60>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverCurrent = 0;
 80073ba:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <Clear_ProtectionFlag+0x64>)
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverTemperature = 0;
 80073c0:	4b0c      	ldr	r3, [pc, #48]	; (80073f4 <Clear_ProtectionFlag+0x68>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverVoltage = 0;
 80073c6:	4b0c      	ldr	r3, [pc, #48]	; (80073f8 <Clear_ProtectionFlag+0x6c>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
}
 80073cc:	bf00      	nop
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bc80      	pop	{r7}
 80073d2:	4770      	bx	lr
 80073d4:	20000aec 	.word	0x20000aec
 80073d8:	200007a9 	.word	0x200007a9
 80073dc:	200008dc 	.word	0x200008dc
 80073e0:	20000a54 	.word	0x20000a54
 80073e4:	20000682 	.word	0x20000682
 80073e8:	20000760 	.word	0x20000760
 80073ec:	20000780 	.word	0x20000780
 80073f0:	200007c0 	.word	0x200007c0
 80073f4:	20000795 	.word	0x20000795
 80073f8:	200008ac 	.word	0x200008ac
 80073fc:	00000000 	.word	0x00000000

08007400 <Fault_Check>:

void Fault_Check(void)
{
 8007400:	b5b0      	push	{r4, r5, r7, lr}
 8007402:	af00      	add	r7, sp, #0
	if(Current_Charger >= SetProtection_ShortCircuit){
 8007404:	4b88      	ldr	r3, [pc, #544]	; (8007628 <Fault_Check+0x228>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	4618      	mov	r0, r3
 800740a:	f7f9 fc83 	bl	8000d14 <__aeabi_i2f>
 800740e:	4602      	mov	r2, r0
 8007410:	4b86      	ldr	r3, [pc, #536]	; (800762c <Fault_Check+0x22c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4619      	mov	r1, r3
 8007416:	4610      	mov	r0, r2
 8007418:	f7f9 fe78 	bl	800110c <__aeabi_fcmple>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d009      	beq.n	8007436 <Fault_Check+0x36>
		Flag_ChargerShortCircuit=1;
 8007422:	4b83      	ldr	r3, [pc, #524]	; (8007630 <Fault_Check+0x230>)
 8007424:	2201      	movs	r2, #1
 8007426:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8007428:	2201      	movs	r2, #1
 800742a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800742e:	4881      	ldr	r0, [pc, #516]	; (8007634 <Fault_Check+0x234>)
 8007430:	f002 fda1 	bl	8009f76 <HAL_GPIO_WritePin>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
		Eror_Code = 0;
		TripTime_OverCurrent = 0;
		Count_TripTime -= 0.001;
	}
}
 8007434:	e0ef      	b.n	8007616 <Fault_Check+0x216>
	else if((SetProtection_OverCurrent - Current_Charger)<=0 && Flag_ChargerOverCurrent==0 ){
 8007436:	4b80      	ldr	r3, [pc, #512]	; (8007638 <Fault_Check+0x238>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	4618      	mov	r0, r3
 800743c:	f7f9 fc6a 	bl	8000d14 <__aeabi_i2f>
 8007440:	4602      	mov	r2, r0
 8007442:	4b7a      	ldr	r3, [pc, #488]	; (800762c <Fault_Check+0x22c>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7f9 fbad 	bl	8000ba8 <__aeabi_fsub>
 800744e:	4603      	mov	r3, r0
 8007450:	f04f 0100 	mov.w	r1, #0
 8007454:	4618      	mov	r0, r3
 8007456:	f7f9 fe59 	bl	800110c <__aeabi_fcmple>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d058      	beq.n	8007512 <Fault_Check+0x112>
 8007460:	4b76      	ldr	r3, [pc, #472]	; (800763c <Fault_Check+0x23c>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d154      	bne.n	8007512 <Fault_Check+0x112>
		Eror_Code=17;
 8007468:	4b75      	ldr	r3, [pc, #468]	; (8007640 <Fault_Check+0x240>)
 800746a:	2211      	movs	r2, #17
 800746c:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 2/(((Current_Charger/SetProtection_OverCurrent)*(Current_Charger/SetProtection_OverCurrent))-1);
 800746e:	4b6f      	ldr	r3, [pc, #444]	; (800762c <Fault_Check+0x22c>)
 8007470:	681c      	ldr	r4, [r3, #0]
 8007472:	4b71      	ldr	r3, [pc, #452]	; (8007638 <Fault_Check+0x238>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f7f9 fc4c 	bl	8000d14 <__aeabi_i2f>
 800747c:	4603      	mov	r3, r0
 800747e:	4619      	mov	r1, r3
 8007480:	4620      	mov	r0, r4
 8007482:	f7f9 fd4f 	bl	8000f24 <__aeabi_fdiv>
 8007486:	4603      	mov	r3, r0
 8007488:	461d      	mov	r5, r3
 800748a:	4b68      	ldr	r3, [pc, #416]	; (800762c <Fault_Check+0x22c>)
 800748c:	681c      	ldr	r4, [r3, #0]
 800748e:	4b6a      	ldr	r3, [pc, #424]	; (8007638 <Fault_Check+0x238>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	4618      	mov	r0, r3
 8007494:	f7f9 fc3e 	bl	8000d14 <__aeabi_i2f>
 8007498:	4603      	mov	r3, r0
 800749a:	4619      	mov	r1, r3
 800749c:	4620      	mov	r0, r4
 800749e:	f7f9 fd41 	bl	8000f24 <__aeabi_fdiv>
 80074a2:	4603      	mov	r3, r0
 80074a4:	4619      	mov	r1, r3
 80074a6:	4628      	mov	r0, r5
 80074a8:	f7f9 fc88 	bl	8000dbc <__aeabi_fmul>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80074b2:	4618      	mov	r0, r3
 80074b4:	f7f9 fb78 	bl	8000ba8 <__aeabi_fsub>
 80074b8:	4603      	mov	r3, r0
 80074ba:	4619      	mov	r1, r3
 80074bc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80074c0:	f7f9 fd30 	bl	8000f24 <__aeabi_fdiv>
 80074c4:	4603      	mov	r3, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	4b5e      	ldr	r3, [pc, #376]	; (8007644 <Fault_Check+0x244>)
 80074ca:	601a      	str	r2, [r3, #0]
		Count_TripTime += 0.001;
 80074cc:	4b5e      	ldr	r3, [pc, #376]	; (8007648 <Fault_Check+0x248>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f8 ffe5 	bl	80004a0 <__aeabi_f2d>
 80074d6:	a352      	add	r3, pc, #328	; (adr r3, 8007620 <Fault_Check+0x220>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f7f8 fe82 	bl	80001e4 <__adddf3>
 80074e0:	4603      	mov	r3, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	4618      	mov	r0, r3
 80074e6:	4621      	mov	r1, r4
 80074e8:	f7f9 fb0a 	bl	8000b00 <__aeabi_d2f>
 80074ec:	4602      	mov	r2, r0
 80074ee:	4b56      	ldr	r3, [pc, #344]	; (8007648 <Fault_Check+0x248>)
 80074f0:	601a      	str	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 80074f2:	4b55      	ldr	r3, [pc, #340]	; (8007648 <Fault_Check+0x248>)
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	4b53      	ldr	r3, [pc, #332]	; (8007644 <Fault_Check+0x244>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4619      	mov	r1, r3
 80074fc:	4610      	mov	r0, r2
 80074fe:	f7f9 fe0f 	bl	8001120 <__aeabi_fcmpge>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8086 	beq.w	8007616 <Fault_Check+0x216>
			Flag_ChargerOverCurrent=1;
 800750a:	4b4c      	ldr	r3, [pc, #304]	; (800763c <Fault_Check+0x23c>)
 800750c:	2201      	movs	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8007510:	e081      	b.n	8007616 <Fault_Check+0x216>
	else if ( Temp_T1 >= (SetProtection_Temp1-15)  || Temp_T2 >= (SetProtection_Temp2-15)){
 8007512:	4b4e      	ldr	r3, [pc, #312]	; (800764c <Fault_Check+0x24c>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	3b0f      	subs	r3, #15
 8007518:	4618      	mov	r0, r3
 800751a:	f7f9 fbfb 	bl	8000d14 <__aeabi_i2f>
 800751e:	4602      	mov	r2, r0
 8007520:	4b4b      	ldr	r3, [pc, #300]	; (8007650 <Fault_Check+0x250>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4619      	mov	r1, r3
 8007526:	4610      	mov	r0, r2
 8007528:	f7f9 fdf0 	bl	800110c <__aeabi_fcmple>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10f      	bne.n	8007552 <Fault_Check+0x152>
 8007532:	4b48      	ldr	r3, [pc, #288]	; (8007654 <Fault_Check+0x254>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	3b0f      	subs	r3, #15
 8007538:	4618      	mov	r0, r3
 800753a:	f7f9 fbeb 	bl	8000d14 <__aeabi_i2f>
 800753e:	4602      	mov	r2, r0
 8007540:	4b45      	ldr	r3, [pc, #276]	; (8007658 <Fault_Check+0x258>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f7f9 fde0 	bl	800110c <__aeabi_fcmple>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d02b      	beq.n	80075aa <Fault_Check+0x1aa>
		flag_Derating = 1;
 8007552:	4b42      	ldr	r3, [pc, #264]	; (800765c <Fault_Check+0x25c>)
 8007554:	2201      	movs	r2, #1
 8007556:	701a      	strb	r2, [r3, #0]
		Eror_Code = 14;
 8007558:	4b39      	ldr	r3, [pc, #228]	; (8007640 <Fault_Check+0x240>)
 800755a:	220e      	movs	r2, #14
 800755c:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 800755e:	4b3b      	ldr	r3, [pc, #236]	; (800764c <Fault_Check+0x24c>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f7f9 fbd6 	bl	8000d14 <__aeabi_i2f>
 8007568:	4602      	mov	r2, r0
 800756a:	4b39      	ldr	r3, [pc, #228]	; (8007650 <Fault_Check+0x250>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4619      	mov	r1, r3
 8007570:	4610      	mov	r0, r2
 8007572:	f7f9 fdcb 	bl	800110c <__aeabi_fcmple>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d10f      	bne.n	800759c <Fault_Check+0x19c>
 800757c:	4b35      	ldr	r3, [pc, #212]	; (8007654 <Fault_Check+0x254>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	4618      	mov	r0, r3
 8007582:	f7f9 fbc7 	bl	8000d14 <__aeabi_i2f>
 8007586:	4602      	mov	r2, r0
 8007588:	4b33      	ldr	r3, [pc, #204]	; (8007658 <Fault_Check+0x258>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4619      	mov	r1, r3
 800758e:	4610      	mov	r0, r2
 8007590:	f7f9 fdbc 	bl	800110c <__aeabi_fcmple>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d100      	bne.n	800759c <Fault_Check+0x19c>
 800759a:	e03c      	b.n	8007616 <Fault_Check+0x216>
			Flag_ChargerOverTemperature = 1;
 800759c:	4b30      	ldr	r3, [pc, #192]	; (8007660 <Fault_Check+0x260>)
 800759e:	2201      	movs	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 2;
 80075a2:	4b30      	ldr	r3, [pc, #192]	; (8007664 <Fault_Check+0x264>)
 80075a4:	2202      	movs	r2, #2
 80075a6:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 80075a8:	e035      	b.n	8007616 <Fault_Check+0x216>
	else if(Voltage_Charger >= SetProtection_OverVoltage){
 80075aa:	4b2f      	ldr	r3, [pc, #188]	; (8007668 <Fault_Check+0x268>)
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7f9 fbb0 	bl	8000d14 <__aeabi_i2f>
 80075b4:	4602      	mov	r2, r0
 80075b6:	4b2d      	ldr	r3, [pc, #180]	; (800766c <Fault_Check+0x26c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	4610      	mov	r0, r2
 80075be:	f7f9 fda5 	bl	800110c <__aeabi_fcmple>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <Fault_Check+0x1d0>
		Flag_ChargerOverVoltage=1;
 80075c8:	4b29      	ldr	r3, [pc, #164]	; (8007670 <Fault_Check+0x270>)
 80075ca:	2201      	movs	r2, #1
 80075cc:	701a      	strb	r2, [r3, #0]
}
 80075ce:	e022      	b.n	8007616 <Fault_Check+0x216>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
 80075d0:	4b1b      	ldr	r3, [pc, #108]	; (8007640 <Fault_Check+0x240>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <Fault_Check+0x1e0>
 80075d8:	4b19      	ldr	r3, [pc, #100]	; (8007640 <Fault_Check+0x240>)
 80075da:	781a      	ldrb	r2, [r3, #0]
 80075dc:	4b25      	ldr	r3, [pc, #148]	; (8007674 <Fault_Check+0x274>)
 80075de:	701a      	strb	r2, [r3, #0]
		Eror_Code = 0;
 80075e0:	4b17      	ldr	r3, [pc, #92]	; (8007640 <Fault_Check+0x240>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 0;
 80075e6:	4b17      	ldr	r3, [pc, #92]	; (8007644 <Fault_Check+0x244>)
 80075e8:	f04f 0200 	mov.w	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
		Count_TripTime -= 0.001;
 80075ee:	4b16      	ldr	r3, [pc, #88]	; (8007648 <Fault_Check+0x248>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7f8 ff54 	bl	80004a0 <__aeabi_f2d>
 80075f8:	a309      	add	r3, pc, #36	; (adr r3, 8007620 <Fault_Check+0x220>)
 80075fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fe:	f7f8 fdef 	bl	80001e0 <__aeabi_dsub>
 8007602:	4603      	mov	r3, r0
 8007604:	460c      	mov	r4, r1
 8007606:	4618      	mov	r0, r3
 8007608:	4621      	mov	r1, r4
 800760a:	f7f9 fa79 	bl	8000b00 <__aeabi_d2f>
 800760e:	4602      	mov	r2, r0
 8007610:	4b0d      	ldr	r3, [pc, #52]	; (8007648 <Fault_Check+0x248>)
 8007612:	601a      	str	r2, [r3, #0]
}
 8007614:	e7ff      	b.n	8007616 <Fault_Check+0x216>
 8007616:	bf00      	nop
 8007618:	bdb0      	pop	{r4, r5, r7, pc}
 800761a:	bf00      	nop
 800761c:	f3af 8000 	nop.w
 8007620:	d2f1a9fc 	.word	0xd2f1a9fc
 8007624:	3f50624d 	.word	0x3f50624d
 8007628:	20000052 	.word	0x20000052
 800762c:	20000ab4 	.word	0x20000ab4
 8007630:	2000089c 	.word	0x2000089c
 8007634:	40020800 	.word	0x40020800
 8007638:	20000053 	.word	0x20000053
 800763c:	200007c0 	.word	0x200007c0
 8007640:	20000680 	.word	0x20000680
 8007644:	20000dc0 	.word	0x20000dc0
 8007648:	20000dc8 	.word	0x20000dc8
 800764c:	20000055 	.word	0x20000055
 8007650:	200009f8 	.word	0x200009f8
 8007654:	20000056 	.word	0x20000056
 8007658:	20000750 	.word	0x20000750
 800765c:	20000aa4 	.word	0x20000aa4
 8007660:	20000795 	.word	0x20000795
 8007664:	200007a8 	.word	0x200007a8
 8007668:	20000054 	.word	0x20000054
 800766c:	20000a80 	.word	0x20000a80
 8007670:	200008ac 	.word	0x200008ac
 8007674:	20000794 	.word	0x20000794

08007678 <_sbrk>:
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	4b11      	ldr	r3, [pc, #68]	; (80076c8 <_sbrk+0x50>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d102      	bne.n	800768e <_sbrk+0x16>
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <_sbrk+0x50>)
 800768a:	4a10      	ldr	r2, [pc, #64]	; (80076cc <_sbrk+0x54>)
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	4b0e      	ldr	r3, [pc, #56]	; (80076c8 <_sbrk+0x50>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	4b0c      	ldr	r3, [pc, #48]	; (80076c8 <_sbrk+0x50>)
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4413      	add	r3, r2
 800769c:	466a      	mov	r2, sp
 800769e:	4293      	cmp	r3, r2
 80076a0:	d907      	bls.n	80076b2 <_sbrk+0x3a>
 80076a2:	f005 fbd1 	bl	800ce48 <__errno>
 80076a6:	4602      	mov	r2, r0
 80076a8:	230c      	movs	r3, #12
 80076aa:	6013      	str	r3, [r2, #0]
 80076ac:	f04f 33ff 	mov.w	r3, #4294967295
 80076b0:	e006      	b.n	80076c0 <_sbrk+0x48>
 80076b2:	4b05      	ldr	r3, [pc, #20]	; (80076c8 <_sbrk+0x50>)
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	4a03      	ldr	r2, [pc, #12]	; (80076c8 <_sbrk+0x50>)
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000668 	.word	0x20000668
 80076cc:	20000f58 	.word	0x20000f58

080076d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80076d4:	4b12      	ldr	r3, [pc, #72]	; (8007720 <SystemInit+0x50>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a11      	ldr	r2, [pc, #68]	; (8007720 <SystemInit+0x50>)
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80076e0:	4b0f      	ldr	r3, [pc, #60]	; (8007720 <SystemInit+0x50>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80076e6:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <SystemInit+0x50>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a0d      	ldr	r2, [pc, #52]	; (8007720 <SystemInit+0x50>)
 80076ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80076f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80076f6:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <SystemInit+0x50>)
 80076f8:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <SystemInit+0x54>)
 80076fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80076fc:	4b08      	ldr	r3, [pc, #32]	; (8007720 <SystemInit+0x50>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4a07      	ldr	r2, [pc, #28]	; (8007720 <SystemInit+0x50>)
 8007702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007706:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007708:	4b05      	ldr	r3, [pc, #20]	; (8007720 <SystemInit+0x50>)
 800770a:	2200      	movs	r2, #0
 800770c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <SystemInit+0x58>)
 8007710:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007714:	609a      	str	r2, [r3, #8]
#endif
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	bc80      	pop	{r7}
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40023800 	.word	0x40023800
 8007724:	24003010 	.word	0x24003010
 8007728:	e000ed00 	.word	0xe000ed00

0800772c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b096      	sub	sp, #88	; 0x58
 8007730:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]
 800773c:	609a      	str	r2, [r3, #8]
 800773e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
 8007748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800774a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]
 8007752:	605a      	str	r2, [r3, #4]
 8007754:	609a      	str	r2, [r3, #8]
 8007756:	60da      	str	r2, [r3, #12]
 8007758:	611a      	str	r2, [r3, #16]
 800775a:	615a      	str	r2, [r3, #20]
 800775c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800775e:	1d3b      	adds	r3, r7, #4
 8007760:	2220      	movs	r2, #32
 8007762:	2100      	movs	r1, #0
 8007764:	4618      	mov	r0, r3
 8007766:	f005 fb99 	bl	800ce9c <memset>

  htim1.Instance = TIM1;
 800776a:	4b3e      	ldr	r3, [pc, #248]	; (8007864 <MX_TIM1_Init+0x138>)
 800776c:	4a3e      	ldr	r2, [pc, #248]	; (8007868 <MX_TIM1_Init+0x13c>)
 800776e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007770:	4b3c      	ldr	r3, [pc, #240]	; (8007864 <MX_TIM1_Init+0x138>)
 8007772:	2200      	movs	r2, #0
 8007774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007776:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <MX_TIM1_Init+0x138>)
 8007778:	2200      	movs	r2, #0
 800777a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 800777c:	4b39      	ldr	r3, [pc, #228]	; (8007864 <MX_TIM1_Init+0x138>)
 800777e:	f241 726f 	movw	r2, #5999	; 0x176f
 8007782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007784:	4b37      	ldr	r3, [pc, #220]	; (8007864 <MX_TIM1_Init+0x138>)
 8007786:	2200      	movs	r2, #0
 8007788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800778a:	4b36      	ldr	r3, [pc, #216]	; (8007864 <MX_TIM1_Init+0x138>)
 800778c:	2200      	movs	r2, #0
 800778e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007790:	4b34      	ldr	r3, [pc, #208]	; (8007864 <MX_TIM1_Init+0x138>)
 8007792:	2200      	movs	r2, #0
 8007794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007796:	4833      	ldr	r0, [pc, #204]	; (8007864 <MX_TIM1_Init+0x138>)
 8007798:	f003 ffb6 	bl	800b708 <HAL_TIM_Base_Init>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80077a2:	f7fe fe77 	bl	8006494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80077a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80077aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80077ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80077b0:	4619      	mov	r1, r3
 80077b2:	482c      	ldr	r0, [pc, #176]	; (8007864 <MX_TIM1_Init+0x138>)
 80077b4:	f004 fa5a 	bl	800bc6c <HAL_TIM_ConfigClockSource>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d001      	beq.n	80077c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80077be:	f7fe fe69 	bl	8006494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80077c2:	4828      	ldr	r0, [pc, #160]	; (8007864 <MX_TIM1_Init+0x138>)
 80077c4:	f004 f811 	bl	800b7ea <HAL_TIM_PWM_Init>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80077ce:	f7fe fe61 	bl	8006494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077d2:	2300      	movs	r3, #0
 80077d4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077d6:	2300      	movs	r3, #0
 80077d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80077da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077de:	4619      	mov	r1, r3
 80077e0:	4820      	ldr	r0, [pc, #128]	; (8007864 <MX_TIM1_Init+0x138>)
 80077e2:	f004 fe2b 	bl	800c43c <HAL_TIMEx_MasterConfigSynchronization>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d001      	beq.n	80077f0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80077ec:	f7fe fe52 	bl	8006494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80077f0:	2360      	movs	r3, #96	; 0x60
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80077fc:	2300      	movs	r3, #0
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007800:	2300      	movs	r3, #0
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007804:	2300      	movs	r3, #0
 8007806:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800780c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007810:	2200      	movs	r2, #0
 8007812:	4619      	mov	r1, r3
 8007814:	4813      	ldr	r0, [pc, #76]	; (8007864 <MX_TIM1_Init+0x138>)
 8007816:	f004 f963 	bl	800bae0 <HAL_TIM_PWM_ConfigChannel>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007820:	f7fe fe38 	bl	8006494 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007824:	2300      	movs	r3, #0
 8007826:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007828:	2300      	movs	r3, #0
 800782a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007834:	2300      	movs	r3, #0
 8007836:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007838:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800783c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800783e:	2300      	movs	r3, #0
 8007840:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007842:	1d3b      	adds	r3, r7, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4807      	ldr	r0, [pc, #28]	; (8007864 <MX_TIM1_Init+0x138>)
 8007848:	f004 fe3c 	bl	800c4c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8007852:	f7fe fe1f 	bl	8006494 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007856:	4803      	ldr	r0, [pc, #12]	; (8007864 <MX_TIM1_Init+0x138>)
 8007858:	f000 f966 	bl	8007b28 <HAL_TIM_MspPostInit>

}
 800785c:	bf00      	nop
 800785e:	3758      	adds	r7, #88	; 0x58
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000e4c 	.word	0x20000e4c
 8007868:	40010000 	.word	0x40010000

0800786c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007872:	f107 0308 	add.w	r3, r7, #8
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	605a      	str	r2, [r3, #4]
 800787c:	609a      	str	r2, [r3, #8]
 800787e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007880:	463b      	mov	r3, r7
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <MX_TIM2_Init+0x94>)
 800788a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800788e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 8007890:	4b1b      	ldr	r3, [pc, #108]	; (8007900 <MX_TIM2_Init+0x94>)
 8007892:	223b      	movs	r2, #59	; 0x3b
 8007894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <MX_TIM2_Init+0x94>)
 8007898:	2200      	movs	r2, #0
 800789a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800789c:	4b18      	ldr	r3, [pc, #96]	; (8007900 <MX_TIM2_Init+0x94>)
 800789e:	f240 32e7 	movw	r2, #999	; 0x3e7
 80078a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078a4:	4b16      	ldr	r3, [pc, #88]	; (8007900 <MX_TIM2_Init+0x94>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078aa:	4b15      	ldr	r3, [pc, #84]	; (8007900 <MX_TIM2_Init+0x94>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80078b0:	4813      	ldr	r0, [pc, #76]	; (8007900 <MX_TIM2_Init+0x94>)
 80078b2:	f003 ff29 	bl	800b708 <HAL_TIM_Base_Init>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80078bc:	f7fe fdea 	bl	8006494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80078c6:	f107 0308 	add.w	r3, r7, #8
 80078ca:	4619      	mov	r1, r3
 80078cc:	480c      	ldr	r0, [pc, #48]	; (8007900 <MX_TIM2_Init+0x94>)
 80078ce:	f004 f9cd 	bl	800bc6c <HAL_TIM_ConfigClockSource>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80078d8:	f7fe fddc 	bl	8006494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078dc:	2300      	movs	r3, #0
 80078de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80078e4:	463b      	mov	r3, r7
 80078e6:	4619      	mov	r1, r3
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <MX_TIM2_Init+0x94>)
 80078ea:	f004 fda7 	bl	800c43c <HAL_TIMEx_MasterConfigSynchronization>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80078f4:	f7fe fdce 	bl	8006494 <Error_Handler>
  }

}
 80078f8:	bf00      	nop
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	20000e8c 	.word	0x20000e8c

08007904 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b086      	sub	sp, #24
 8007908:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	605a      	str	r2, [r3, #4]
 8007914:	609a      	str	r2, [r3, #8]
 8007916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007918:	463b      	mov	r3, r7
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8007920:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <MX_TIM3_Init+0x94>)
 8007922:	4a1e      	ldr	r2, [pc, #120]	; (800799c <MX_TIM3_Init+0x98>)
 8007924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 8007926:	4b1c      	ldr	r3, [pc, #112]	; (8007998 <MX_TIM3_Init+0x94>)
 8007928:	f240 2257 	movw	r2, #599	; 0x257
 800792c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <MX_TIM3_Init+0x94>)
 8007930:	2200      	movs	r2, #0
 8007932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007934:	4b18      	ldr	r3, [pc, #96]	; (8007998 <MX_TIM3_Init+0x94>)
 8007936:	f242 720f 	movw	r2, #9999	; 0x270f
 800793a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800793c:	4b16      	ldr	r3, [pc, #88]	; (8007998 <MX_TIM3_Init+0x94>)
 800793e:	2200      	movs	r2, #0
 8007940:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007942:	4b15      	ldr	r3, [pc, #84]	; (8007998 <MX_TIM3_Init+0x94>)
 8007944:	2200      	movs	r2, #0
 8007946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007948:	4813      	ldr	r0, [pc, #76]	; (8007998 <MX_TIM3_Init+0x94>)
 800794a:	f003 fedd 	bl	800b708 <HAL_TIM_Base_Init>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007954:	f7fe fd9e 	bl	8006494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800795c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800795e:	f107 0308 	add.w	r3, r7, #8
 8007962:	4619      	mov	r1, r3
 8007964:	480c      	ldr	r0, [pc, #48]	; (8007998 <MX_TIM3_Init+0x94>)
 8007966:	f004 f981 	bl	800bc6c <HAL_TIM_ConfigClockSource>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007970:	f7fe fd90 	bl	8006494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007974:	2300      	movs	r3, #0
 8007976:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007978:	2300      	movs	r3, #0
 800797a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800797c:	463b      	mov	r3, r7
 800797e:	4619      	mov	r1, r3
 8007980:	4805      	ldr	r0, [pc, #20]	; (8007998 <MX_TIM3_Init+0x94>)
 8007982:	f004 fd5b 	bl	800c43c <HAL_TIMEx_MasterConfigSynchronization>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800798c:	f7fe fd82 	bl	8006494 <Error_Handler>
  }

}
 8007990:	bf00      	nop
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	20000e0c 	.word	0x20000e0c
 800799c:	40000400 	.word	0x40000400

080079a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80079a6:	f107 0308 	add.w	r3, r7, #8
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	605a      	str	r2, [r3, #4]
 80079b0:	609a      	str	r2, [r3, #8]
 80079b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079b4:	463b      	mov	r3, r7
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079be:	4a1d      	ldr	r2, [pc, #116]	; (8007a34 <MX_TIM4_Init+0x94>)
 80079c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80079c2:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079c8:	4b19      	ldr	r3, [pc, #100]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 59;
 80079ce:	4b18      	ldr	r3, [pc, #96]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079d0:	223b      	movs	r2, #59	; 0x3b
 80079d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079d4:	4b16      	ldr	r3, [pc, #88]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079da:	4b15      	ldr	r3, [pc, #84]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079dc:	2200      	movs	r2, #0
 80079de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80079e0:	4813      	ldr	r0, [pc, #76]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079e2:	f003 fe91 	bl	800b708 <HAL_TIM_Base_Init>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d001      	beq.n	80079f0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80079ec:	f7fe fd52 	bl	8006494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80079f6:	f107 0308 	add.w	r3, r7, #8
 80079fa:	4619      	mov	r1, r3
 80079fc:	480c      	ldr	r0, [pc, #48]	; (8007a30 <MX_TIM4_Init+0x90>)
 80079fe:	f004 f935 	bl	800bc6c <HAL_TIM_ConfigClockSource>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8007a08:	f7fe fd44 	bl	8006494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007a14:	463b      	mov	r3, r7
 8007a16:	4619      	mov	r1, r3
 8007a18:	4805      	ldr	r0, [pc, #20]	; (8007a30 <MX_TIM4_Init+0x90>)
 8007a1a:	f004 fd0f 	bl	800c43c <HAL_TIMEx_MasterConfigSynchronization>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8007a24:	f7fe fd36 	bl	8006494 <Error_Handler>
  }

}
 8007a28:	bf00      	nop
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000dcc 	.word	0x20000dcc
 8007a34:	40000800 	.word	0x40000800

08007a38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b086      	sub	sp, #24
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a34      	ldr	r2, [pc, #208]	; (8007b18 <HAL_TIM_Base_MspInit+0xe0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d10e      	bne.n	8007a68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]
 8007a4e:	4b33      	ldr	r3, [pc, #204]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a52:	4a32      	ldr	r2, [pc, #200]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	6453      	str	r3, [r2, #68]	; 0x44
 8007a5a:	4b30      	ldr	r3, [pc, #192]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007a66:	e052      	b.n	8007b0e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a70:	d116      	bne.n	8007aa0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007a7c:	f043 0301 	orr.w	r3, r3, #1
 8007a80:	6413      	str	r3, [r2, #64]	; 0x40
 8007a82:	4b26      	ldr	r3, [pc, #152]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	f003 0301 	and.w	r3, r3, #1
 8007a8a:	613b      	str	r3, [r7, #16]
 8007a8c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	201c      	movs	r0, #28
 8007a94:	f001 fcf5 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007a98:	201c      	movs	r0, #28
 8007a9a:	f001 fd0e 	bl	80094ba <HAL_NVIC_EnableIRQ>
}
 8007a9e:	e036      	b.n	8007b0e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <HAL_TIM_Base_MspInit+0xe8>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d116      	bne.n	8007ad8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	4b1b      	ldr	r3, [pc, #108]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	4a1a      	ldr	r2, [pc, #104]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007ab4:	f043 0302 	orr.w	r3, r3, #2
 8007ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8007aba:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007abe:	f003 0302 	and.w	r3, r3, #2
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2100      	movs	r1, #0
 8007aca:	201d      	movs	r0, #29
 8007acc:	f001 fcd9 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007ad0:	201d      	movs	r0, #29
 8007ad2:	f001 fcf2 	bl	80094ba <HAL_NVIC_EnableIRQ>
}
 8007ad6:	e01a      	b.n	8007b0e <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <HAL_TIM_Base_MspInit+0xec>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d115      	bne.n	8007b0e <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	4a0c      	ldr	r2, [pc, #48]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007aec:	f043 0304 	orr.w	r3, r3, #4
 8007af0:	6413      	str	r3, [r2, #64]	; 0x40
 8007af2:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <HAL_TIM_Base_MspInit+0xe4>)
 8007af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af6:	f003 0304 	and.w	r3, r3, #4
 8007afa:	60bb      	str	r3, [r7, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007afe:	2200      	movs	r2, #0
 8007b00:	2100      	movs	r1, #0
 8007b02:	201e      	movs	r0, #30
 8007b04:	f001 fcbd 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007b08:	201e      	movs	r0, #30
 8007b0a:	f001 fcd6 	bl	80094ba <HAL_NVIC_EnableIRQ>
}
 8007b0e:	bf00      	nop
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40023800 	.word	0x40023800
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800

08007b28 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b088      	sub	sp, #32
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b30:	f107 030c 	add.w	r3, r7, #12
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a12      	ldr	r2, [pc, #72]	; (8007b90 <HAL_TIM_MspPostInit+0x68>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d11e      	bne.n	8007b88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
 8007b4e:	4b11      	ldr	r3, [pc, #68]	; (8007b94 <HAL_TIM_MspPostInit+0x6c>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	4a10      	ldr	r2, [pc, #64]	; (8007b94 <HAL_TIM_MspPostInit+0x6c>)
 8007b54:	f043 0301 	orr.w	r3, r3, #1
 8007b58:	6313      	str	r3, [r2, #48]	; 0x30
 8007b5a:	4b0e      	ldr	r3, [pc, #56]	; (8007b94 <HAL_TIM_MspPostInit+0x6c>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	60bb      	str	r3, [r7, #8]
 8007b64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b74:	2303      	movs	r3, #3
 8007b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b7c:	f107 030c 	add.w	r3, r7, #12
 8007b80:	4619      	mov	r1, r3
 8007b82:	4805      	ldr	r0, [pc, #20]	; (8007b98 <HAL_TIM_MspPostInit+0x70>)
 8007b84:	f002 f842 	bl	8009c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007b88:	bf00      	nop
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40010000 	.word	0x40010000
 8007b94:	40023800 	.word	0x40023800
 8007b98:	40020000 	.word	0x40020000

08007b9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007ba0:	4b11      	ldr	r3, [pc, #68]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007ba2:	4a12      	ldr	r2, [pc, #72]	; (8007bec <MX_USART1_UART_Init+0x50>)
 8007ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007ba6:	4b10      	ldr	r3, [pc, #64]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007bae:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007bba:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bc2:	220c      	movs	r2, #12
 8007bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007bc6:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007bcc:	4b06      	ldr	r3, [pc, #24]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007bd2:	4805      	ldr	r0, [pc, #20]	; (8007be8 <MX_USART1_UART_Init+0x4c>)
 8007bd4:	f004 fcd9 	bl	800c58a <HAL_UART_Init>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007bde:	f7fe fc59 	bl	8006494 <Error_Handler>
  }

}
 8007be2:	bf00      	nop
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	20000f0c 	.word	0x20000f0c
 8007bec:	40011000 	.word	0x40011000

08007bf0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007bf4:	4b11      	ldr	r3, [pc, #68]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007bf6:	4a12      	ldr	r2, [pc, #72]	; (8007c40 <MX_USART3_UART_Init+0x50>)
 8007bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007c02:	4b0e      	ldr	r3, [pc, #56]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007c08:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007c0e:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007c14:	4b09      	ldr	r3, [pc, #36]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c16:	220c      	movs	r2, #12
 8007c18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c1a:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007c26:	4805      	ldr	r0, [pc, #20]	; (8007c3c <MX_USART3_UART_Init+0x4c>)
 8007c28:	f004 fcaf 	bl	800c58a <HAL_UART_Init>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007c32:	f7fe fc2f 	bl	8006494 <Error_Handler>
  }

}
 8007c36:	bf00      	nop
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000ecc 	.word	0x20000ecc
 8007c40:	40004800 	.word	0x40004800

08007c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b08c      	sub	sp, #48	; 0x30
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c4c:	f107 031c 	add.w	r3, r7, #28
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]
 8007c54:	605a      	str	r2, [r3, #4]
 8007c56:	609a      	str	r2, [r3, #8]
 8007c58:	60da      	str	r2, [r3, #12]
 8007c5a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a3a      	ldr	r2, [pc, #232]	; (8007d4c <HAL_UART_MspInit+0x108>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d134      	bne.n	8007cd0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007c66:	2300      	movs	r3, #0
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	4b39      	ldr	r3, [pc, #228]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6e:	4a38      	ldr	r2, [pc, #224]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007c70:	f043 0310 	orr.w	r3, r3, #16
 8007c74:	6453      	str	r3, [r2, #68]	; 0x44
 8007c76:	4b36      	ldr	r3, [pc, #216]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	61bb      	str	r3, [r7, #24]
 8007c80:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	4b32      	ldr	r3, [pc, #200]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	4a31      	ldr	r2, [pc, #196]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007c8c:	f043 0302 	orr.w	r3, r3, #2
 8007c90:	6313      	str	r3, [r2, #48]	; 0x30
 8007c92:	4b2f      	ldr	r3, [pc, #188]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	617b      	str	r3, [r7, #20]
 8007c9c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007c9e:	23c0      	movs	r3, #192	; 0xc0
 8007ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ca2:	2302      	movs	r3, #2
 8007ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007caa:	2303      	movs	r3, #3
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007cae:	2307      	movs	r3, #7
 8007cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cb2:	f107 031c 	add.w	r3, r7, #28
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4826      	ldr	r0, [pc, #152]	; (8007d54 <HAL_UART_MspInit+0x110>)
 8007cba:	f001 ffa7 	bl	8009c0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	2025      	movs	r0, #37	; 0x25
 8007cc4:	f001 fbdd 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007cc8:	2025      	movs	r0, #37	; 0x25
 8007cca:	f001 fbf6 	bl	80094ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8007cce:	e039      	b.n	8007d44 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a20      	ldr	r2, [pc, #128]	; (8007d58 <HAL_UART_MspInit+0x114>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d134      	bne.n	8007d44 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007cda:	2300      	movs	r3, #0
 8007cdc:	613b      	str	r3, [r7, #16]
 8007cde:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8007cea:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cf2:	613b      	str	r3, [r7, #16]
 8007cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfe:	4a14      	ldr	r2, [pc, #80]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007d00:	f043 0304 	orr.w	r3, r3, #4
 8007d04:	6313      	str	r3, [r2, #48]	; 0x30
 8007d06:	4b12      	ldr	r3, [pc, #72]	; (8007d50 <HAL_UART_MspInit+0x10c>)
 8007d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007d12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d18:	2302      	movs	r3, #2
 8007d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d20:	2303      	movs	r3, #3
 8007d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007d24:	2307      	movs	r3, #7
 8007d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d28:	f107 031c 	add.w	r3, r7, #28
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	480b      	ldr	r0, [pc, #44]	; (8007d5c <HAL_UART_MspInit+0x118>)
 8007d30:	f001 ff6c 	bl	8009c0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8007d34:	2200      	movs	r2, #0
 8007d36:	2101      	movs	r1, #1
 8007d38:	2027      	movs	r0, #39	; 0x27
 8007d3a:	f001 fba2 	bl	8009482 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007d3e:	2027      	movs	r0, #39	; 0x27
 8007d40:	f001 fbbb 	bl	80094ba <HAL_NVIC_EnableIRQ>
}
 8007d44:	bf00      	nop
 8007d46:	3730      	adds	r7, #48	; 0x30
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}
 8007d4c:	40011000 	.word	0x40011000
 8007d50:	40023800 	.word	0x40023800
 8007d54:	40020400 	.word	0x40020400
 8007d58:	40004800 	.word	0x40004800
 8007d5c:	40020800 	.word	0x40020800

08007d60 <Reset_Handler>:
 8007d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d98 <LoopFillZerobss+0x14>
 8007d64:	2100      	movs	r1, #0
 8007d66:	e003      	b.n	8007d70 <LoopCopyDataInit>

08007d68 <CopyDataInit>:
 8007d68:	4b0c      	ldr	r3, [pc, #48]	; (8007d9c <LoopFillZerobss+0x18>)
 8007d6a:	585b      	ldr	r3, [r3, r1]
 8007d6c:	5043      	str	r3, [r0, r1]
 8007d6e:	3104      	adds	r1, #4

08007d70 <LoopCopyDataInit>:
 8007d70:	480b      	ldr	r0, [pc, #44]	; (8007da0 <LoopFillZerobss+0x1c>)
 8007d72:	4b0c      	ldr	r3, [pc, #48]	; (8007da4 <LoopFillZerobss+0x20>)
 8007d74:	1842      	adds	r2, r0, r1
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d3f6      	bcc.n	8007d68 <CopyDataInit>
 8007d7a:	4a0b      	ldr	r2, [pc, #44]	; (8007da8 <LoopFillZerobss+0x24>)
 8007d7c:	e002      	b.n	8007d84 <LoopFillZerobss>

08007d7e <FillZerobss>:
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f842 3b04 	str.w	r3, [r2], #4

08007d84 <LoopFillZerobss>:
 8007d84:	4b09      	ldr	r3, [pc, #36]	; (8007dac <LoopFillZerobss+0x28>)
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d3f9      	bcc.n	8007d7e <FillZerobss>
 8007d8a:	f7ff fca1 	bl	80076d0 <SystemInit>
 8007d8e:	f005 f861 	bl	800ce54 <__libc_init_array>
 8007d92:	f7fe f903 	bl	8005f9c <main>
 8007d96:	4770      	bx	lr
 8007d98:	20020000 	.word	0x20020000
 8007d9c:	0800fe64 	.word	0x0800fe64
 8007da0:	20000000 	.word	0x20000000
 8007da4:	20000238 	.word	0x20000238
 8007da8:	20000238 	.word	0x20000238
 8007dac:	20000f54 	.word	0x20000f54

08007db0 <ADC_IRQHandler>:
 8007db0:	e7fe      	b.n	8007db0 <ADC_IRQHandler>
	...

08007db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007db8:	4b0e      	ldr	r3, [pc, #56]	; (8007df4 <HAL_Init+0x40>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a0d      	ldr	r2, [pc, #52]	; (8007df4 <HAL_Init+0x40>)
 8007dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <HAL_Init+0x40>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <HAL_Init+0x40>)
 8007dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007dd0:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <HAL_Init+0x40>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a07      	ldr	r2, [pc, #28]	; (8007df4 <HAL_Init+0x40>)
 8007dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007ddc:	2003      	movs	r0, #3
 8007dde:	f001 fb45 	bl	800946c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007de2:	2000      	movs	r0, #0
 8007de4:	f000 f808 	bl	8007df8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007de8:	f7fe fe06 	bl	80069f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40023c00 	.word	0x40023c00

08007df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007e00:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <HAL_InitTick+0x54>)
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_InitTick+0x58>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fb5d 	bl	80094d6 <HAL_SYSTICK_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e00e      	b.n	8007e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b0f      	cmp	r3, #15
 8007e2a:	d80a      	bhi.n	8007e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	f04f 30ff 	mov.w	r0, #4294967295
 8007e34:	f001 fb25 	bl	8009482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e38:	4a06      	ldr	r2, [pc, #24]	; (8007e54 <HAL_InitTick+0x5c>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	e000      	b.n	8007e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3708      	adds	r7, #8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000058 	.word	0x20000058
 8007e50:	20000060 	.word	0x20000060
 8007e54:	2000005c 	.word	0x2000005c

08007e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <HAL_IncTick+0x1c>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	461a      	mov	r2, r3
 8007e62:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_IncTick+0x20>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4413      	add	r3, r2
 8007e68:	4a03      	ldr	r2, [pc, #12]	; (8007e78 <HAL_IncTick+0x20>)
 8007e6a:	6013      	str	r3, [r2, #0]
}
 8007e6c:	bf00      	nop
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr
 8007e74:	20000060 	.word	0x20000060
 8007e78:	20000f4c 	.word	0x20000f4c

08007e7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e80:	4b02      	ldr	r3, [pc, #8]	; (8007e8c <HAL_GetTick+0x10>)
 8007e82:	681b      	ldr	r3, [r3, #0]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr
 8007e8c:	20000f4c 	.word	0x20000f4c

08007e90 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e98:	f7ff fff0 	bl	8007e7c <HAL_GetTick>
 8007e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d005      	beq.n	8007eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007eaa:	4b09      	ldr	r3, [pc, #36]	; (8007ed0 <HAL_Delay+0x40>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007eb6:	bf00      	nop
 8007eb8:	f7ff ffe0 	bl	8007e7c <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d8f7      	bhi.n	8007eb8 <HAL_Delay+0x28>
  {
  }
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000060 	.word	0x20000060

08007ed4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	e033      	b.n	8007f52 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d109      	bne.n	8007f06 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fd fb18 	bl	8005528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2200      	movs	r2, #0
 8007efc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	f003 0310 	and.w	r3, r3, #16
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d118      	bne.n	8007f44 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007f1a:	f023 0302 	bic.w	r3, r3, #2
 8007f1e:	f043 0202 	orr.w	r2, r3, #2
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa1c 	bl	8008364 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	f023 0303 	bic.w	r3, r3, #3
 8007f3a:	f043 0201 	orr.w	r2, r3, #1
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	641a      	str	r2, [r3, #64]	; 0x40
 8007f42:	e001      	b.n	8007f48 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	60b9      	str	r1, [r7, #8]
 8007f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_ADC_Start_DMA+0x1e>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e0af      	b.n	80080da <HAL_ADC_Start_DMA+0x17e>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d018      	beq.n	8007fc2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007fa0:	4b50      	ldr	r3, [pc, #320]	; (80080e4 <HAL_ADC_Start_DMA+0x188>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a50      	ldr	r2, [pc, #320]	; (80080e8 <HAL_ADC_Start_DMA+0x18c>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	0c9a      	lsrs	r2, r3, #18
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8007fb4:	e002      	b.n	8007fbc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f9      	bne.n	8007fb6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	f040 8083 	bne.w	80080d8 <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007fda:	f023 0301 	bic.w	r3, r3, #1
 8007fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d007      	beq.n	8008004 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007ffc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008010:	d106      	bne.n	8008020 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	f023 0206 	bic.w	r2, r3, #6
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	645a      	str	r2, [r3, #68]	; 0x44
 800801e:	e002      	b.n	8008026 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008032:	4a2e      	ldr	r2, [pc, #184]	; (80080ec <HAL_ADC_Start_DMA+0x190>)
 8008034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	4a2d      	ldr	r2, [pc, #180]	; (80080f0 <HAL_ADC_Start_DMA+0x194>)
 800803c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008042:	4a2c      	ldr	r2, [pc, #176]	; (80080f4 <HAL_ADC_Start_DMA+0x198>)
 8008044:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800804e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685a      	ldr	r2, [r3, #4]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800805e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800806e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	334c      	adds	r3, #76	; 0x4c
 800807a:	4619      	mov	r1, r3
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f001 fae4 	bl	800964c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008084:	4b1c      	ldr	r3, [pc, #112]	; (80080f8 <HAL_ADC_Start_DMA+0x19c>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f003 031f 	and.w	r3, r3, #31
 800808c:	2b00      	cmp	r3, #0
 800808e:	d10f      	bne.n	80080b0 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d11c      	bne.n	80080d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80080ac:	609a      	str	r2, [r3, #8]
 80080ae:	e013      	b.n	80080d8 <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a11      	ldr	r2, [pc, #68]	; (80080fc <HAL_ADC_Start_DMA+0x1a0>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d10e      	bne.n	80080d8 <HAL_ADC_Start_DMA+0x17c>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d107      	bne.n	80080d8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689a      	ldr	r2, [r3, #8]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80080d6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3718      	adds	r7, #24
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20000058 	.word	0x20000058
 80080e8:	431bde83 	.word	0x431bde83
 80080ec:	0800856d 	.word	0x0800856d
 80080f0:	08008627 	.word	0x08008627
 80080f4:	08008643 	.word	0x08008643
 80080f8:	40012300 	.word	0x40012300
 80080fc:	40012000 	.word	0x40012000

08008100 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	bc80      	pop	{r7}
 8008110:	4770      	bx	lr

08008112 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr

08008124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_ADC_ConfigChannel+0x1c>
 800813c:	2302      	movs	r3, #2
 800813e:	e103      	b.n	8008348 <HAL_ADC_ConfigChannel+0x224>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b09      	cmp	r3, #9
 800814e:	d925      	bls.n	800819c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68d9      	ldr	r1, [r3, #12]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	461a      	mov	r2, r3
 800815e:	4613      	mov	r3, r2
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	4413      	add	r3, r2
 8008164:	3b1e      	subs	r3, #30
 8008166:	2207      	movs	r2, #7
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	43da      	mvns	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	400a      	ands	r2, r1
 8008174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68d9      	ldr	r1, [r3, #12]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	b29b      	uxth	r3, r3
 8008186:	4618      	mov	r0, r3
 8008188:	4603      	mov	r3, r0
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	4403      	add	r3, r0
 800818e:	3b1e      	subs	r3, #30
 8008190:	409a      	lsls	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	60da      	str	r2, [r3, #12]
 800819a:	e022      	b.n	80081e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	6919      	ldr	r1, [r3, #16]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	4613      	mov	r3, r2
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	4413      	add	r3, r2
 80081b0:	2207      	movs	r2, #7
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	43da      	mvns	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	400a      	ands	r2, r1
 80081be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6919      	ldr	r1, [r3, #16]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	4618      	mov	r0, r3
 80081d2:	4603      	mov	r3, r0
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	4403      	add	r3, r0
 80081d8:	409a      	lsls	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	2b06      	cmp	r3, #6
 80081e8:	d824      	bhi.n	8008234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685a      	ldr	r2, [r3, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	3b05      	subs	r3, #5
 80081fc:	221f      	movs	r2, #31
 80081fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008202:	43da      	mvns	r2, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	400a      	ands	r2, r1
 800820a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	b29b      	uxth	r3, r3
 8008218:	4618      	mov	r0, r3
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	4613      	mov	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	3b05      	subs	r3, #5
 8008226:	fa00 f203 	lsl.w	r2, r0, r3
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	430a      	orrs	r2, r1
 8008230:	635a      	str	r2, [r3, #52]	; 0x34
 8008232:	e04c      	b.n	80082ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2b0c      	cmp	r3, #12
 800823a:	d824      	bhi.n	8008286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	685a      	ldr	r2, [r3, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	3b23      	subs	r3, #35	; 0x23
 800824e:	221f      	movs	r2, #31
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	43da      	mvns	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	400a      	ands	r2, r1
 800825c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	4618      	mov	r0, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	4613      	mov	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4413      	add	r3, r2
 8008276:	3b23      	subs	r3, #35	; 0x23
 8008278:	fa00 f203 	lsl.w	r2, r0, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	430a      	orrs	r2, r1
 8008282:	631a      	str	r2, [r3, #48]	; 0x30
 8008284:	e023      	b.n	80082ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	3b41      	subs	r3, #65	; 0x41
 8008298:	221f      	movs	r2, #31
 800829a:	fa02 f303 	lsl.w	r3, r2, r3
 800829e:	43da      	mvns	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	400a      	ands	r2, r1
 80082a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	b29b      	uxth	r3, r3
 80082b4:	4618      	mov	r0, r3
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	685a      	ldr	r2, [r3, #4]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	3b41      	subs	r3, #65	; 0x41
 80082c2:	fa00 f203 	lsl.w	r2, r0, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a20      	ldr	r2, [pc, #128]	; (8008354 <HAL_ADC_ConfigChannel+0x230>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d109      	bne.n	80082ec <HAL_ADC_ConfigChannel+0x1c8>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2b12      	cmp	r3, #18
 80082de:	d105      	bne.n	80082ec <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80082e0:	4b1d      	ldr	r3, [pc, #116]	; (8008358 <HAL_ADC_ConfigChannel+0x234>)
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <HAL_ADC_ConfigChannel+0x234>)
 80082e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082ea:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a18      	ldr	r2, [pc, #96]	; (8008354 <HAL_ADC_ConfigChannel+0x230>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d123      	bne.n	800833e <HAL_ADC_ConfigChannel+0x21a>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2b10      	cmp	r3, #16
 80082fc:	d003      	beq.n	8008306 <HAL_ADC_ConfigChannel+0x1e2>
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b11      	cmp	r3, #17
 8008304:	d11b      	bne.n	800833e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008306:	4b14      	ldr	r3, [pc, #80]	; (8008358 <HAL_ADC_ConfigChannel+0x234>)
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	4a13      	ldr	r2, [pc, #76]	; (8008358 <HAL_ADC_ConfigChannel+0x234>)
 800830c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008310:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2b10      	cmp	r3, #16
 8008318:	d111      	bne.n	800833e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800831a:	4b10      	ldr	r3, [pc, #64]	; (800835c <HAL_ADC_ConfigChannel+0x238>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a10      	ldr	r2, [pc, #64]	; (8008360 <HAL_ADC_ConfigChannel+0x23c>)
 8008320:	fba2 2303 	umull	r2, r3, r2, r3
 8008324:	0c9a      	lsrs	r2, r3, #18
 8008326:	4613      	mov	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	005b      	lsls	r3, r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8008330:	e002      	b.n	8008338 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3b01      	subs	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1f9      	bne.n	8008332 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40012000 	.word	0x40012000
 8008358:	40012300 	.word	0x40012300
 800835c:	20000058 	.word	0x20000058
 8008360:	431bde83 	.word	0x431bde83

08008364 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800836c:	4b7d      	ldr	r3, [pc, #500]	; (8008564 <ADC_Init+0x200>)
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4a7c      	ldr	r2, [pc, #496]	; (8008564 <ADC_Init+0x200>)
 8008372:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008376:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008378:	4b7a      	ldr	r3, [pc, #488]	; (8008564 <ADC_Init+0x200>)
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	4978      	ldr	r1, [pc, #480]	; (8008564 <ADC_Init+0x200>)
 8008382:	4313      	orrs	r3, r2
 8008384:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	685a      	ldr	r2, [r3, #4]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6859      	ldr	r1, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	021a      	lsls	r2, r3, #8
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	685a      	ldr	r2, [r3, #4]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80083b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	6859      	ldr	r1, [r3, #4]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689a      	ldr	r2, [r3, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6899      	ldr	r1, [r3, #8]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	430a      	orrs	r2, r1
 80083ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f2:	4a5d      	ldr	r2, [pc, #372]	; (8008568 <ADC_Init+0x204>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d022      	beq.n	800843e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	689a      	ldr	r2, [r3, #8]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6899      	ldr	r1, [r3, #8]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	430a      	orrs	r2, r1
 8008418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6899      	ldr	r1, [r3, #8]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	430a      	orrs	r2, r1
 800843a:	609a      	str	r2, [r3, #8]
 800843c:	e00f      	b.n	800845e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689a      	ldr	r2, [r3, #8]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800844c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800845c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689a      	ldr	r2, [r3, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0202 	bic.w	r2, r2, #2
 800846c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	6899      	ldr	r1, [r3, #8]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	005a      	lsls	r2, r3, #1
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	430a      	orrs	r2, r1
 8008480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d027      	beq.n	80084da <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008498:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80084a8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ae:	3b01      	subs	r3, #1
 80084b0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80084b4:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	fa92 f2a2 	rbit	r2, r2
 80084bc:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	fab2 f282 	clz	r2, r2
 80084c4:	b2d2      	uxtb	r2, r2
 80084c6:	fa03 f102 	lsl.w	r1, r3, r2
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	605a      	str	r2, [r3, #4]
 80084d8:	e007      	b.n	80084ea <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084e8:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	3b01      	subs	r3, #1
 8008506:	051a      	lsls	r2, r3, #20
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689a      	ldr	r2, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800851e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	6899      	ldr	r1, [r3, #8]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852a:	025a      	lsls	r2, r3, #9
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008542:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6899      	ldr	r1, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	695b      	ldr	r3, [r3, #20]
 800854e:	029a      	lsls	r2, r3, #10
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	430a      	orrs	r2, r1
 8008556:	609a      	str	r2, [r3, #8]
}
 8008558:	bf00      	nop
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	bc80      	pop	{r7}
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40012300 	.word	0x40012300
 8008568:	0f000001 	.word	0x0f000001

0800856c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008578:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008582:	2b00      	cmp	r3, #0
 8008584:	d13c      	bne.n	8008600 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800859c:	2b00      	cmp	r3, #0
 800859e:	d12b      	bne.n	80085f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d127      	bne.n	80085f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d119      	bne.n	80085f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685a      	ldr	r2, [r3, #4]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f022 0220 	bic.w	r2, r2, #32
 80085d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d105      	bne.n	80085f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	f043 0201 	orr.w	r2, r3, #1
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f7fd fd5f 	bl	80060bc <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80085fe:	e00e      	b.n	800861e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008604:	f003 0310 	and.w	r3, r3, #16
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f7ff fd80 	bl	8008112 <HAL_ADC_ErrorCallback>
}
 8008612:	e004      	b.n	800861e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
}
 800861e:	bf00      	nop
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008632:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff fd63 	bl	8008100 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b084      	sub	sp, #16
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2240      	movs	r2, #64	; 0x40
 8008654:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800865a:	f043 0204 	orr.w	r2, r3, #4
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008662:	68f8      	ldr	r0, [r7, #12]
 8008664:	f7ff fd55 	bl	8008112 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008668:	bf00      	nop
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d101      	bne.n	8008682 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e0ed      	b.n	800885e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	2b00      	cmp	r3, #0
 800868c:	d102      	bne.n	8008694 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7fd f814 	bl	80056bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0202 	bic.w	r2, r2, #2
 80086a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086a4:	f7ff fbea 	bl	8007e7c <HAL_GetTick>
 80086a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80086aa:	e012      	b.n	80086d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80086ac:	f7ff fbe6 	bl	8007e7c <HAL_GetTick>
 80086b0:	4602      	mov	r2, r0
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	1ad3      	subs	r3, r2, r3
 80086b6:	2b0a      	cmp	r3, #10
 80086b8:	d90b      	bls.n	80086d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2205      	movs	r2, #5
 80086ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e0c5      	b.n	800885e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	f003 0302 	and.w	r3, r3, #2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e5      	bne.n	80086ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0201 	orr.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086f0:	f7ff fbc4 	bl	8007e7c <HAL_GetTick>
 80086f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80086f6:	e012      	b.n	800871e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80086f8:	f7ff fbc0 	bl	8007e7c <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	2b0a      	cmp	r3, #10
 8008704:	d90b      	bls.n	800871e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2205      	movs	r2, #5
 8008716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	e09f      	b.n	800885e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0e5      	beq.n	80086f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	7e1b      	ldrb	r3, [r3, #24]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d108      	bne.n	8008746 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	e007      	b.n	8008756 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008754:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	7e5b      	ldrb	r3, [r3, #25]
 800875a:	2b01      	cmp	r3, #1
 800875c:	d108      	bne.n	8008770 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800876c:	601a      	str	r2, [r3, #0]
 800876e:	e007      	b.n	8008780 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800877e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	7e9b      	ldrb	r3, [r3, #26]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d108      	bne.n	800879a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0220 	orr.w	r2, r2, #32
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e007      	b.n	80087aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0220 	bic.w	r2, r2, #32
 80087a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	7edb      	ldrb	r3, [r3, #27]
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d108      	bne.n	80087c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0210 	bic.w	r2, r2, #16
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e007      	b.n	80087d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0210 	orr.w	r2, r2, #16
 80087d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	7f1b      	ldrb	r3, [r3, #28]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d108      	bne.n	80087ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 0208 	orr.w	r2, r2, #8
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	e007      	b.n	80087fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f022 0208 	bic.w	r2, r2, #8
 80087fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7f5b      	ldrb	r3, [r3, #29]
 8008802:	2b01      	cmp	r3, #1
 8008804:	d108      	bne.n	8008818 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 0204 	orr.w	r2, r2, #4
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e007      	b.n	8008828 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0204 	bic.w	r2, r2, #4
 8008826:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	431a      	orrs	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	ea42 0103 	orr.w	r1, r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	1e5a      	subs	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800887e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008880:	7cfb      	ldrb	r3, [r7, #19]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d003      	beq.n	800888e <HAL_CAN_ConfigFilter+0x26>
 8008886:	7cfb      	ldrb	r3, [r7, #19]
 8008888:	2b02      	cmp	r3, #2
 800888a:	f040 80be 	bne.w	8008a0a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800888e:	4b65      	ldr	r3, [pc, #404]	; (8008a24 <HAL_CAN_ConfigFilter+0x1bc>)
 8008890:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008898:	f043 0201 	orr.w	r2, r3, #1
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80088a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	431a      	orrs	r2, r3
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	f003 031f 	and.w	r3, r3, #31
 80088ce:	2201      	movs	r2, #1
 80088d0:	fa02 f303 	lsl.w	r3, r2, r3
 80088d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	43db      	mvns	r3, r3
 80088e0:	401a      	ands	r2, r3
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	69db      	ldr	r3, [r3, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d123      	bne.n	8008938 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	43db      	mvns	r3, r3
 80088fa:	401a      	ands	r2, r3
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800890e:	683a      	ldr	r2, [r7, #0]
 8008910:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008912:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	3248      	adds	r2, #72	; 0x48
 8008918:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800892c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800892e:	6979      	ldr	r1, [r7, #20]
 8008930:	3348      	adds	r3, #72	; 0x48
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	440b      	add	r3, r1
 8008936:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	69db      	ldr	r3, [r3, #28]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d122      	bne.n	8008986 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	431a      	orrs	r2, r3
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008960:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	3248      	adds	r2, #72	; 0x48
 8008966:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800897a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800897c:	6979      	ldr	r1, [r7, #20]
 800897e:	3348      	adds	r3, #72	; 0x48
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	440b      	add	r3, r1
 8008984:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d109      	bne.n	80089a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	43db      	mvns	r3, r3
 8008998:	401a      	ands	r2, r3
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80089a0:	e007      	b.n	80089b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	431a      	orrs	r2, r3
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d109      	bne.n	80089ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	43db      	mvns	r3, r3
 80089c4:	401a      	ands	r2, r3
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80089cc:	e007      	b.n	80089de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	431a      	orrs	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d107      	bne.n	80089f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	431a      	orrs	r2, r3
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80089fc:	f023 0201 	bic.w	r2, r3, #1
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e006      	b.n	8008a18 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
  }
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	371c      	adds	r7, #28
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bc80      	pop	{r7}
 8008a20:	4770      	bx	lr
 8008a22:	bf00      	nop
 8008a24:	40006400 	.word	0x40006400

08008a28 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d12e      	bne.n	8008a9a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f022 0201 	bic.w	r2, r2, #1
 8008a52:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a54:	f7ff fa12 	bl	8007e7c <HAL_GetTick>
 8008a58:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008a5a:	e012      	b.n	8008a82 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008a5c:	f7ff fa0e 	bl	8007e7c <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b0a      	cmp	r3, #10
 8008a68:	d90b      	bls.n	8008a82 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2205      	movs	r2, #5
 8008a7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e012      	b.n	8008aa8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e5      	bne.n	8008a5c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	e006      	b.n	8008aa8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
  }
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b089      	sub	sp, #36	; 0x24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
 8008abc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ac4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008ace:	7ffb      	ldrb	r3, [r7, #31]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d003      	beq.n	8008adc <HAL_CAN_AddTxMessage+0x2c>
 8008ad4:	7ffb      	ldrb	r3, [r7, #31]
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	f040 80b8 	bne.w	8008c4c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d10a      	bne.n	8008afc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80a0 	beq.w	8008c3c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	0e1b      	lsrs	r3, r3, #24
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d907      	bls.n	8008b1c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b10:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e09e      	b.n	8008c5a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	409a      	lsls	r2, r3
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d10d      	bne.n	8008b4a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008b38:	68f9      	ldr	r1, [r7, #12]
 8008b3a:	6809      	ldr	r1, [r1, #0]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	3318      	adds	r3, #24
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	440b      	add	r3, r1
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	e00f      	b.n	8008b6a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008b54:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008b5e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	3318      	adds	r3, #24
 8008b64:	011b      	lsls	r3, r3, #4
 8008b66:	440b      	add	r3, r1
 8008b68:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	6819      	ldr	r1, [r3, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	691a      	ldr	r2, [r3, #16]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	3318      	adds	r3, #24
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	440b      	add	r3, r1
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	7d1b      	ldrb	r3, [r3, #20]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d111      	bne.n	8008baa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	011b      	lsls	r3, r3, #4
 8008b90:	4413      	add	r3, r2
 8008b92:	3304      	adds	r3, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68fa      	ldr	r2, [r7, #12]
 8008b98:	6811      	ldr	r1, [r2, #0]
 8008b9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	3318      	adds	r3, #24
 8008ba2:	011b      	lsls	r3, r3, #4
 8008ba4:	440b      	add	r3, r1
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	3307      	adds	r3, #7
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	061a      	lsls	r2, r3, #24
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	3306      	adds	r3, #6
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	431a      	orrs	r2, r3
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3305      	adds	r3, #5
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	3204      	adds	r2, #4
 8008bca:	7812      	ldrb	r2, [r2, #0]
 8008bcc:	4610      	mov	r0, r2
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	6811      	ldr	r1, [r2, #0]
 8008bd2:	ea43 0200 	orr.w	r2, r3, r0
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	440b      	add	r3, r1
 8008bdc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008be0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	3303      	adds	r3, #3
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	061a      	lsls	r2, r3, #24
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	3302      	adds	r3, #2
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	041b      	lsls	r3, r3, #16
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	021b      	lsls	r3, r3, #8
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	7812      	ldrb	r2, [r2, #0]
 8008c02:	4610      	mov	r0, r2
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	6811      	ldr	r1, [r2, #0]
 8008c08:	ea43 0200 	orr.w	r2, r3, r0
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	011b      	lsls	r3, r3, #4
 8008c10:	440b      	add	r3, r1
 8008c12:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008c16:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	3318      	adds	r3, #24
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	4413      	add	r3, r2
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	6811      	ldr	r1, [r2, #0]
 8008c2a:	f043 0201 	orr.w	r2, r3, #1
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3318      	adds	r3, #24
 8008c32:	011b      	lsls	r3, r3, #4
 8008c34:	440b      	add	r3, r1
 8008c36:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	e00e      	b.n	8008c5a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e006      	b.n	8008c5a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008c58:	2301      	movs	r3, #1
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3724      	adds	r7, #36	; 0x24
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bc80      	pop	{r7}
 8008c62:	4770      	bx	lr

08008c64 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c78:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8008c7a:	7dfb      	ldrb	r3, [r7, #23]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d003      	beq.n	8008c88 <HAL_CAN_GetRxMessage+0x24>
 8008c80:	7dfb      	ldrb	r3, [r7, #23]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	f040 80f3 	bne.w	8008e6e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10e      	bne.n	8008cac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d116      	bne.n	8008cca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e0e7      	b.n	8008e7c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f003 0303 	and.w	r3, r3, #3
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d107      	bne.n	8008cca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e0d8      	b.n	8008e7c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	331b      	adds	r3, #27
 8008cd2:	011b      	lsls	r3, r3, #4
 8008cd4:	4413      	add	r3, r2
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0204 	and.w	r2, r3, #4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d10c      	bne.n	8008d02 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	331b      	adds	r3, #27
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	4413      	add	r3, r2
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	0d5b      	lsrs	r3, r3, #21
 8008cf8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	601a      	str	r2, [r3, #0]
 8008d00:	e00b      	b.n	8008d1a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	331b      	adds	r3, #27
 8008d0a:	011b      	lsls	r3, r3, #4
 8008d0c:	4413      	add	r3, r2
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	08db      	lsrs	r3, r3, #3
 8008d12:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681a      	ldr	r2, [r3, #0]
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	331b      	adds	r3, #27
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	4413      	add	r3, r2
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0202 	and.w	r2, r3, #2
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	331b      	adds	r3, #27
 8008d38:	011b      	lsls	r3, r3, #4
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f003 020f 	and.w	r2, r3, #15
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	331b      	adds	r3, #27
 8008d50:	011b      	lsls	r3, r3, #4
 8008d52:	4413      	add	r3, r2
 8008d54:	3304      	adds	r3, #4
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	0a1b      	lsrs	r3, r3, #8
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	331b      	adds	r3, #27
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	0c1b      	lsrs	r3, r3, #16
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	011b      	lsls	r3, r3, #4
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	0a1a      	lsrs	r2, r3, #8
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	3301      	adds	r3, #1
 8008da4:	b2d2      	uxtb	r2, r2
 8008da6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	011b      	lsls	r3, r3, #4
 8008db0:	4413      	add	r3, r2
 8008db2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	0c1a      	lsrs	r2, r3, #16
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	011b      	lsls	r3, r3, #4
 8008dca:	4413      	add	r3, r2
 8008dcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	0e1a      	lsrs	r2, r3, #24
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	3303      	adds	r3, #3
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	011b      	lsls	r3, r3, #4
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	3304      	adds	r3, #4
 8008df0:	b2d2      	uxtb	r2, r2
 8008df2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	011b      	lsls	r3, r3, #4
 8008dfc:	4413      	add	r3, r2
 8008dfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	0a1a      	lsrs	r2, r3, #8
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	3305      	adds	r3, #5
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681a      	ldr	r2, [r3, #0]
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	011b      	lsls	r3, r3, #4
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	0c1a      	lsrs	r2, r3, #16
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	3306      	adds	r3, #6
 8008e24:	b2d2      	uxtb	r2, r2
 8008e26:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	0e1a      	lsrs	r2, r3, #24
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	3307      	adds	r3, #7
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d108      	bne.n	8008e5a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f042 0220 	orr.w	r2, r2, #32
 8008e56:	60da      	str	r2, [r3, #12]
 8008e58:	e007      	b.n	8008e6a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	691a      	ldr	r2, [r3, #16]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f042 0220 	orr.w	r2, r2, #32
 8008e68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e006      	b.n	8008e7c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
  }
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	371c      	adds	r7, #28
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bc80      	pop	{r7}
 8008e84:	4770      	bx	lr

08008e86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8008e86:	b580      	push	{r7, lr}
 8008e88:	b08a      	sub	sp, #40	; 0x28
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	695b      	ldr	r3, [r3, #20]
 8008e98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	691b      	ldr	r3, [r3, #16]
 8008eb8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d07c      	beq.n	8008fc6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d023      	beq.n	8008f1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2201      	movs	r2, #1
 8008edc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	f003 0302 	and.w	r3, r3, #2
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d003      	beq.n	8008ef0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f97d 	bl	80091e8 <HAL_CAN_TxMailbox0CompleteCallback>
 8008eee:	e016      	b.n	8008f1e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
 8008f02:	e00c      	b.n	8008f1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	f003 0308 	and.w	r3, r3, #8
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d004      	beq.n	8008f18 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008f14:	627b      	str	r3, [r7, #36]	; 0x24
 8008f16:	e002      	b.n	8008f1e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f980 	bl	800921e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d024      	beq.n	8008f72 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d003      	beq.n	8008f44 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f95c 	bl	80091fa <HAL_CAN_TxMailbox1CompleteCallback>
 8008f42:	e016      	b.n	8008f72 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d004      	beq.n	8008f58 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8008f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f54:	627b      	str	r3, [r7, #36]	; 0x24
 8008f56:	e00c      	b.n	8008f72 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d004      	beq.n	8008f6c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6a:	e002      	b.n	8008f72 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f95f 	bl	8009230 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d024      	beq.n	8008fc6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008f84:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d003      	beq.n	8008f98 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f93b 	bl	800920c <HAL_CAN_TxMailbox2CompleteCallback>
 8008f96:	e016      	b.n	8008fc6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d004      	beq.n	8008fac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8008fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8008faa:	e00c      	b.n	8008fc6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d004      	beq.n	8008fc0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8008fbe:	e002      	b.n	8008fc6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 f93e 	bl	8009242 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00c      	beq.n	8008fea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008fd0:	697b      	ldr	r3, [r7, #20]
 8008fd2:	f003 0310 	and.w	r3, r3, #16
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	2210      	movs	r2, #16
 8008fe8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008fea:	6a3b      	ldr	r3, [r7, #32]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d006      	beq.n	800900c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2208      	movs	r2, #8
 8009004:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 f92d 	bl	8009266 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800900c:	6a3b      	ldr	r3, [r7, #32]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b00      	cmp	r3, #0
 8009014:	d009      	beq.n	800902a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f915 	bl	8009254 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009044:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2210      	movs	r2, #16
 800904c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800904e:	6a3b      	ldr	r3, [r7, #32]
 8009050:	f003 0320 	and.w	r3, r3, #32
 8009054:	2b00      	cmp	r3, #0
 8009056:	d00b      	beq.n	8009070 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	f003 0308 	and.w	r3, r3, #8
 800905e:	2b00      	cmp	r3, #0
 8009060:	d006      	beq.n	8009070 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	2208      	movs	r2, #8
 8009068:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f90d 	bl	800928a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009070:	6a3b      	ldr	r3, [r7, #32]
 8009072:	f003 0310 	and.w	r3, r3, #16
 8009076:	2b00      	cmp	r3, #0
 8009078:	d009      	beq.n	800908e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f003 0303 	and.w	r3, r3, #3
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 f8f5 	bl	8009278 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00b      	beq.n	80090b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d006      	beq.n	80090b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2210      	movs	r2, #16
 80090a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f8f6 	bl	800929c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00b      	beq.n	80090d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	f003 0308 	and.w	r3, r3, #8
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2208      	movs	r2, #8
 80090ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8ee 	bl	80092ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d075      	beq.n	80091c8 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d06c      	beq.n	80091c0 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d008      	beq.n	8009102 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	f043 0301 	orr.w	r3, r3, #1
 8009100:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009102:	6a3b      	ldr	r3, [r7, #32]
 8009104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009108:	2b00      	cmp	r3, #0
 800910a:	d008      	beq.n	800911e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	f043 0302 	orr.w	r3, r3, #2
 800911c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009124:	2b00      	cmp	r3, #0
 8009126:	d008      	beq.n	800913a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800912e:	2b00      	cmp	r3, #0
 8009130:	d003      	beq.n	800913a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	f043 0304 	orr.w	r3, r3, #4
 8009138:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800913a:	6a3b      	ldr	r3, [r7, #32]
 800913c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009140:	2b00      	cmp	r3, #0
 8009142:	d03d      	beq.n	80091c0 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800914a:	2b00      	cmp	r3, #0
 800914c:	d038      	beq.n	80091c0 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009154:	2b30      	cmp	r3, #48	; 0x30
 8009156:	d017      	beq.n	8009188 <HAL_CAN_IRQHandler+0x302>
 8009158:	2b30      	cmp	r3, #48	; 0x30
 800915a:	d804      	bhi.n	8009166 <HAL_CAN_IRQHandler+0x2e0>
 800915c:	2b10      	cmp	r3, #16
 800915e:	d009      	beq.n	8009174 <HAL_CAN_IRQHandler+0x2ee>
 8009160:	2b20      	cmp	r3, #32
 8009162:	d00c      	beq.n	800917e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009164:	e024      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009166:	2b50      	cmp	r3, #80	; 0x50
 8009168:	d018      	beq.n	800919c <HAL_CAN_IRQHandler+0x316>
 800916a:	2b60      	cmp	r3, #96	; 0x60
 800916c:	d01b      	beq.n	80091a6 <HAL_CAN_IRQHandler+0x320>
 800916e:	2b40      	cmp	r3, #64	; 0x40
 8009170:	d00f      	beq.n	8009192 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009172:	e01d      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	f043 0308 	orr.w	r3, r3, #8
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800917c:	e018      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	f043 0310 	orr.w	r3, r3, #16
 8009184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009186:	e013      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	f043 0320 	orr.w	r3, r3, #32
 800918e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009190:	e00e      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800919a:	e009      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80091a4:	e004      	b.n	80091b0 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80091a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80091ae:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	699a      	ldr	r2, [r3, #24]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80091be:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2204      	movs	r2, #4
 80091c6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d008      	beq.n	80091e0 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f870 	bl	80092c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80091e0:	bf00      	nop
 80091e2:	3728      	adds	r7, #40	; 0x28
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bc80      	pop	{r7}
 80091f8:	4770      	bx	lr

080091fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80091fa:	b480      	push	{r7}
 80091fc:	b083      	sub	sp, #12
 80091fe:	af00      	add	r7, sp, #0
 8009200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009202:	bf00      	nop
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	bc80      	pop	{r7}
 800920a:	4770      	bx	lr

0800920c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	bc80      	pop	{r7}
 800921c:	4770      	bx	lr

0800921e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr

08009230 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr

08009242 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800924a:	bf00      	nop
 800924c:	370c      	adds	r7, #12
 800924e:	46bd      	mov	sp, r7
 8009250:	bc80      	pop	{r7}
 8009252:	4770      	bx	lr

08009254 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800925c:	bf00      	nop
 800925e:	370c      	adds	r7, #12
 8009260:	46bd      	mov	sp, r7
 8009262:	bc80      	pop	{r7}
 8009264:	4770      	bx	lr

08009266 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009266:	b480      	push	{r7}
 8009268:	b083      	sub	sp, #12
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr

08009278 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	bc80      	pop	{r7}
 8009288:	4770      	bx	lr

0800928a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800928a:	b480      	push	{r7}
 800928c:	b083      	sub	sp, #12
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009292:	bf00      	nop
 8009294:	370c      	adds	r7, #12
 8009296:	46bd      	mov	sp, r7
 8009298:	bc80      	pop	{r7}
 800929a:	4770      	bx	lr

0800929c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bc80      	pop	{r7}
 80092ac:	4770      	bx	lr

080092ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b083      	sub	sp, #12
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr

080092c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr
	...

080092d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80092e4:	4b0c      	ldr	r3, [pc, #48]	; (8009318 <__NVIC_SetPriorityGrouping+0x44>)
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80092f0:	4013      	ands	r3, r2
 80092f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80092fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009306:	4a04      	ldr	r2, [pc, #16]	; (8009318 <__NVIC_SetPriorityGrouping+0x44>)
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	60d3      	str	r3, [r2, #12]
}
 800930c:	bf00      	nop
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	bc80      	pop	{r7}
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	e000ed00 	.word	0xe000ed00

0800931c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800931c:	b480      	push	{r7}
 800931e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009320:	4b04      	ldr	r3, [pc, #16]	; (8009334 <__NVIC_GetPriorityGrouping+0x18>)
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	f003 0307 	and.w	r3, r3, #7
}
 800932a:	4618      	mov	r0, r3
 800932c:	46bd      	mov	sp, r7
 800932e:	bc80      	pop	{r7}
 8009330:	4770      	bx	lr
 8009332:	bf00      	nop
 8009334:	e000ed00 	.word	0xe000ed00

08009338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	4603      	mov	r3, r0
 8009340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009346:	2b00      	cmp	r3, #0
 8009348:	db0b      	blt.n	8009362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800934a:	79fb      	ldrb	r3, [r7, #7]
 800934c:	f003 021f 	and.w	r2, r3, #31
 8009350:	4906      	ldr	r1, [pc, #24]	; (800936c <__NVIC_EnableIRQ+0x34>)
 8009352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	2001      	movs	r0, #1
 800935a:	fa00 f202 	lsl.w	r2, r0, r2
 800935e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	bc80      	pop	{r7}
 800936a:	4770      	bx	lr
 800936c:	e000e100 	.word	0xe000e100

08009370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	4603      	mov	r3, r0
 8009378:	6039      	str	r1, [r7, #0]
 800937a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800937c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009380:	2b00      	cmp	r3, #0
 8009382:	db0a      	blt.n	800939a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	b2da      	uxtb	r2, r3
 8009388:	490c      	ldr	r1, [pc, #48]	; (80093bc <__NVIC_SetPriority+0x4c>)
 800938a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800938e:	0112      	lsls	r2, r2, #4
 8009390:	b2d2      	uxtb	r2, r2
 8009392:	440b      	add	r3, r1
 8009394:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009398:	e00a      	b.n	80093b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	b2da      	uxtb	r2, r3
 800939e:	4908      	ldr	r1, [pc, #32]	; (80093c0 <__NVIC_SetPriority+0x50>)
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	f003 030f 	and.w	r3, r3, #15
 80093a6:	3b04      	subs	r3, #4
 80093a8:	0112      	lsls	r2, r2, #4
 80093aa:	b2d2      	uxtb	r2, r2
 80093ac:	440b      	add	r3, r1
 80093ae:	761a      	strb	r2, [r3, #24]
}
 80093b0:	bf00      	nop
 80093b2:	370c      	adds	r7, #12
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bc80      	pop	{r7}
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	e000e100 	.word	0xe000e100
 80093c0:	e000ed00 	.word	0xe000ed00

080093c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b089      	sub	sp, #36	; 0x24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f003 0307 	and.w	r3, r3, #7
 80093d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f1c3 0307 	rsb	r3, r3, #7
 80093de:	2b04      	cmp	r3, #4
 80093e0:	bf28      	it	cs
 80093e2:	2304      	movcs	r3, #4
 80093e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	3304      	adds	r3, #4
 80093ea:	2b06      	cmp	r3, #6
 80093ec:	d902      	bls.n	80093f4 <NVIC_EncodePriority+0x30>
 80093ee:	69fb      	ldr	r3, [r7, #28]
 80093f0:	3b03      	subs	r3, #3
 80093f2:	e000      	b.n	80093f6 <NVIC_EncodePriority+0x32>
 80093f4:	2300      	movs	r3, #0
 80093f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80093f8:	f04f 32ff 	mov.w	r2, #4294967295
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009402:	43da      	mvns	r2, r3
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	401a      	ands	r2, r3
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800940c:	f04f 31ff 	mov.w	r1, #4294967295
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	fa01 f303 	lsl.w	r3, r1, r3
 8009416:	43d9      	mvns	r1, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800941c:	4313      	orrs	r3, r2
         );
}
 800941e:	4618      	mov	r0, r3
 8009420:	3724      	adds	r7, #36	; 0x24
 8009422:	46bd      	mov	sp, r7
 8009424:	bc80      	pop	{r7}
 8009426:	4770      	bx	lr

08009428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	3b01      	subs	r3, #1
 8009434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009438:	d301      	bcc.n	800943e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800943a:	2301      	movs	r3, #1
 800943c:	e00f      	b.n	800945e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800943e:	4a0a      	ldr	r2, [pc, #40]	; (8009468 <SysTick_Config+0x40>)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	3b01      	subs	r3, #1
 8009444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009446:	210f      	movs	r1, #15
 8009448:	f04f 30ff 	mov.w	r0, #4294967295
 800944c:	f7ff ff90 	bl	8009370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009450:	4b05      	ldr	r3, [pc, #20]	; (8009468 <SysTick_Config+0x40>)
 8009452:	2200      	movs	r2, #0
 8009454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009456:	4b04      	ldr	r3, [pc, #16]	; (8009468 <SysTick_Config+0x40>)
 8009458:	2207      	movs	r2, #7
 800945a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800945c:	2300      	movs	r3, #0
}
 800945e:	4618      	mov	r0, r3
 8009460:	3708      	adds	r7, #8
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	e000e010 	.word	0xe000e010

0800946c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b082      	sub	sp, #8
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f7ff ff2d 	bl	80092d4 <__NVIC_SetPriorityGrouping>
}
 800947a:	bf00      	nop
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009482:	b580      	push	{r7, lr}
 8009484:	b086      	sub	sp, #24
 8009486:	af00      	add	r7, sp, #0
 8009488:	4603      	mov	r3, r0
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	607a      	str	r2, [r7, #4]
 800948e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009494:	f7ff ff42 	bl	800931c <__NVIC_GetPriorityGrouping>
 8009498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	6978      	ldr	r0, [r7, #20]
 80094a0:	f7ff ff90 	bl	80093c4 <NVIC_EncodePriority>
 80094a4:	4602      	mov	r2, r0
 80094a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7ff ff5f 	bl	8009370 <__NVIC_SetPriority>
}
 80094b2:	bf00      	nop
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	4603      	mov	r3, r0
 80094c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff ff35 	bl	8009338 <__NVIC_EnableIRQ>
}
 80094ce:	bf00      	nop
 80094d0:	3708      	adds	r7, #8
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b082      	sub	sp, #8
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7ff ffa2 	bl	8009428 <SysTick_Config>
 80094e4:	4603      	mov	r3, r0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3708      	adds	r7, #8
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
	...

080094f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80094fc:	f7fe fcbe 	bl	8007e7c <HAL_GetTick>
 8009500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e099      	b.n	8009640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2202      	movs	r2, #2
 8009518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f022 0201 	bic.w	r2, r2, #1
 800952a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800952c:	e00f      	b.n	800954e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800952e:	f7fe fca5 	bl	8007e7c <HAL_GetTick>
 8009532:	4602      	mov	r2, r0
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	1ad3      	subs	r3, r2, r3
 8009538:	2b05      	cmp	r3, #5
 800953a:	d908      	bls.n	800954e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2220      	movs	r2, #32
 8009540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2203      	movs	r2, #3
 8009546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e078      	b.n	8009640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e8      	bne.n	800952e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009564:	697a      	ldr	r2, [r7, #20]
 8009566:	4b38      	ldr	r3, [pc, #224]	; (8009648 <HAL_DMA_Init+0x158>)
 8009568:	4013      	ands	r3, r2
 800956a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800957a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6a1b      	ldr	r3, [r3, #32]
 8009598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	d107      	bne.n	80095b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095b0:	4313      	orrs	r3, r2
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	697a      	ldr	r2, [r7, #20]
 80095be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	f023 0307 	bic.w	r3, r3, #7
 80095ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	4313      	orrs	r3, r2
 80095d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d117      	bne.n	8009612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e6:	697a      	ldr	r2, [r7, #20]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d00e      	beq.n	8009612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fa8f 	bl	8009b18 <DMA_CheckFifoParam>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d008      	beq.n	8009612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2240      	movs	r2, #64	; 0x40
 8009604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800960e:	2301      	movs	r3, #1
 8009610:	e016      	b.n	8009640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fa48 	bl	8009ab0 <DMA_CalcBaseAndBitshift>
 8009620:	4603      	mov	r3, r0
 8009622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009628:	223f      	movs	r2, #63	; 0x3f
 800962a:	409a      	lsls	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3718      	adds	r7, #24
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	f010803f 	.word	0xf010803f

0800964c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <HAL_DMA_Start_IT+0x26>
 800966e:	2302      	movs	r3, #2
 8009670:	e040      	b.n	80096f4 <HAL_DMA_Start_IT+0xa8>
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b01      	cmp	r3, #1
 8009684:	d12f      	bne.n	80096e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2202      	movs	r2, #2
 800968a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	2200      	movs	r2, #0
 8009692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	68b9      	ldr	r1, [r7, #8]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f9da 	bl	8009a54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a4:	223f      	movs	r2, #63	; 0x3f
 80096a6:	409a      	lsls	r2, r3
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0216 	orr.w	r2, r2, #22
 80096ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d007      	beq.n	80096d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	681a      	ldr	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f042 0208 	orr.w	r2, r2, #8
 80096d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0201 	orr.w	r2, r2, #1
 80096e2:	601a      	str	r2, [r3, #0]
 80096e4:	e005      	b.n	80096f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80096ee:	2302      	movs	r3, #2
 80096f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80096f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3718      	adds	r7, #24
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b02      	cmp	r3, #2
 800970e:	d004      	beq.n	800971a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2280      	movs	r2, #128	; 0x80
 8009714:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e00c      	b.n	8009734 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2205      	movs	r2, #5
 800971e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0201 	bic.w	r2, r2, #1
 8009730:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	370c      	adds	r7, #12
 8009738:	46bd      	mov	sp, r7
 800973a:	bc80      	pop	{r7}
 800973c:	4770      	bx	lr
	...

08009740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009748:	2300      	movs	r3, #0
 800974a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800974c:	4b92      	ldr	r3, [pc, #584]	; (8009998 <HAL_DMA_IRQHandler+0x258>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a92      	ldr	r2, [pc, #584]	; (800999c <HAL_DMA_IRQHandler+0x25c>)
 8009752:	fba2 2303 	umull	r2, r3, r2, r3
 8009756:	0a9b      	lsrs	r3, r3, #10
 8009758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800975e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800976a:	2208      	movs	r2, #8
 800976c:	409a      	lsls	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	4013      	ands	r3, r2
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01a      	beq.n	80097ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 0304 	and.w	r3, r3, #4
 8009780:	2b00      	cmp	r3, #0
 8009782:	d013      	beq.n	80097ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f022 0204 	bic.w	r2, r2, #4
 8009792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009798:	2208      	movs	r2, #8
 800979a:	409a      	lsls	r2, r3
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a4:	f043 0201 	orr.w	r2, r3, #1
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b0:	2201      	movs	r2, #1
 80097b2:	409a      	lsls	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	4013      	ands	r3, r2
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d012      	beq.n	80097e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	695b      	ldr	r3, [r3, #20]
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00b      	beq.n	80097e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097ce:	2201      	movs	r2, #1
 80097d0:	409a      	lsls	r2, r3
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097da:	f043 0202 	orr.w	r2, r3, #2
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097e6:	2204      	movs	r2, #4
 80097e8:	409a      	lsls	r2, r3
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d012      	beq.n	8009818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00b      	beq.n	8009818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009804:	2204      	movs	r2, #4
 8009806:	409a      	lsls	r2, r3
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009810:	f043 0204 	orr.w	r2, r3, #4
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800981c:	2210      	movs	r2, #16
 800981e:	409a      	lsls	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4013      	ands	r3, r2
 8009824:	2b00      	cmp	r3, #0
 8009826:	d043      	beq.n	80098b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d03c      	beq.n	80098b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800983a:	2210      	movs	r2, #16
 800983c:	409a      	lsls	r2, r3
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d018      	beq.n	8009882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800985a:	2b00      	cmp	r3, #0
 800985c:	d108      	bne.n	8009870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009862:	2b00      	cmp	r3, #0
 8009864:	d024      	beq.n	80098b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
 800986e:	e01f      	b.n	80098b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009874:	2b00      	cmp	r3, #0
 8009876:	d01b      	beq.n	80098b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
 8009880:	e016      	b.n	80098b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800988c:	2b00      	cmp	r3, #0
 800988e:	d107      	bne.n	80098a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0208 	bic.w	r2, r2, #8
 800989e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d003      	beq.n	80098b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b4:	2220      	movs	r2, #32
 80098b6:	409a      	lsls	r2, r3
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	4013      	ands	r3, r2
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f000 808e 	beq.w	80099de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8086 	beq.w	80099de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d6:	2220      	movs	r2, #32
 80098d8:	409a      	lsls	r2, r3
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	2b05      	cmp	r3, #5
 80098e8:	d136      	bne.n	8009958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f022 0216 	bic.w	r2, r2, #22
 80098f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	695a      	ldr	r2, [r3, #20]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d103      	bne.n	800991a <HAL_DMA_IRQHandler+0x1da>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009916:	2b00      	cmp	r3, #0
 8009918:	d007      	beq.n	800992a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f022 0208 	bic.w	r2, r2, #8
 8009928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800992e:	223f      	movs	r2, #63	; 0x3f
 8009930:	409a      	lsls	r2, r3
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800994a:	2b00      	cmp	r3, #0
 800994c:	d07d      	beq.n	8009a4a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	4798      	blx	r3
        }
        return;
 8009956:	e078      	b.n	8009a4a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01c      	beq.n	80099a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009970:	2b00      	cmp	r3, #0
 8009972:	d108      	bne.n	8009986 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	2b00      	cmp	r3, #0
 800997a:	d030      	beq.n	80099de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	4798      	blx	r3
 8009984:	e02b      	b.n	80099de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998a:	2b00      	cmp	r3, #0
 800998c:	d027      	beq.n	80099de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	4798      	blx	r3
 8009996:	e022      	b.n	80099de <HAL_DMA_IRQHandler+0x29e>
 8009998:	20000058 	.word	0x20000058
 800999c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10f      	bne.n	80099ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f022 0210 	bic.w	r2, r2, #16
 80099bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d032      	beq.n	8009a4c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ea:	f003 0301 	and.w	r3, r3, #1
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d022      	beq.n	8009a38 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2205      	movs	r2, #5
 80099f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0201 	bic.w	r2, r2, #1
 8009a08:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	60bb      	str	r3, [r7, #8]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d307      	bcc.n	8009a26 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f2      	bne.n	8009a0a <HAL_DMA_IRQHandler+0x2ca>
 8009a24:	e000      	b.n	8009a28 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009a26:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2201      	movs	r2, #1
 8009a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d005      	beq.n	8009a4c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
 8009a48:	e000      	b.n	8009a4c <HAL_DMA_IRQHandler+0x30c>
        return;
 8009a4a:	bf00      	nop
    }
  }
}
 8009a4c:	3718      	adds	r7, #24
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop

08009a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	2b40      	cmp	r3, #64	; 0x40
 8009a80:	d108      	bne.n	8009a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009a92:	e007      	b.n	8009aa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	60da      	str	r2, [r3, #12]
}
 8009aa4:	bf00      	nop
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bc80      	pop	{r7}
 8009aac:	4770      	bx	lr
	...

08009ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	3b10      	subs	r3, #16
 8009ac0:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <DMA_CalcBaseAndBitshift+0x60>)
 8009ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac6:	091b      	lsrs	r3, r3, #4
 8009ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009aca:	4a12      	ldr	r2, [pc, #72]	; (8009b14 <DMA_CalcBaseAndBitshift+0x64>)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	461a      	mov	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d909      	bls.n	8009af2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	1d1a      	adds	r2, r3, #4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	659a      	str	r2, [r3, #88]	; 0x58
 8009af0:	e007      	b.n	8009b02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009afa:	f023 0303 	bic.w	r3, r3, #3
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bc80      	pop	{r7}
 8009b0e:	4770      	bx	lr
 8009b10:	aaaaaaab 	.word	0xaaaaaaab
 8009b14:	0800fbe8 	.word	0x0800fbe8

08009b18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b20:	2300      	movs	r3, #0
 8009b22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d11f      	bne.n	8009b72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	2b03      	cmp	r3, #3
 8009b36:	d855      	bhi.n	8009be4 <DMA_CheckFifoParam+0xcc>
 8009b38:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <DMA_CheckFifoParam+0x28>)
 8009b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b3e:	bf00      	nop
 8009b40:	08009b51 	.word	0x08009b51
 8009b44:	08009b63 	.word	0x08009b63
 8009b48:	08009b51 	.word	0x08009b51
 8009b4c:	08009be5 	.word	0x08009be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d045      	beq.n	8009be8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b60:	e042      	b.n	8009be8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b6a:	d13f      	bne.n	8009bec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009b70:	e03c      	b.n	8009bec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b7a:	d121      	bne.n	8009bc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d836      	bhi.n	8009bf0 <DMA_CheckFifoParam+0xd8>
 8009b82:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <DMA_CheckFifoParam+0x70>)
 8009b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b88:	08009b99 	.word	0x08009b99
 8009b8c:	08009b9f 	.word	0x08009b9f
 8009b90:	08009b99 	.word	0x08009b99
 8009b94:	08009bb1 	.word	0x08009bb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b9c:	e02f      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d024      	beq.n	8009bf4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009bae:	e021      	b.n	8009bf4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009bb8:	d11e      	bne.n	8009bf8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009bbe:	e01b      	b.n	8009bf8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d902      	bls.n	8009bcc <DMA_CheckFifoParam+0xb4>
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d003      	beq.n	8009bd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009bca:	e018      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	73fb      	strb	r3, [r7, #15]
      break;
 8009bd0:	e015      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00e      	beq.n	8009bfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	73fb      	strb	r3, [r7, #15]
      break;
 8009be2:	e00b      	b.n	8009bfc <DMA_CheckFifoParam+0xe4>
      break;
 8009be4:	bf00      	nop
 8009be6:	e00a      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      break;
 8009be8:	bf00      	nop
 8009bea:	e008      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      break;
 8009bec:	bf00      	nop
 8009bee:	e006      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      break;
 8009bf0:	bf00      	nop
 8009bf2:	e004      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      break;
 8009bf4:	bf00      	nop
 8009bf6:	e002      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      break;   
 8009bf8:	bf00      	nop
 8009bfa:	e000      	b.n	8009bfe <DMA_CheckFifoParam+0xe6>
      break;
 8009bfc:	bf00      	nop
    }
  } 
  
  return status; 
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bc80      	pop	{r7}
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop

08009c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
 8009c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c16:	2300      	movs	r3, #0
 8009c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c1a:	e16f      	b.n	8009efc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	2101      	movs	r1, #1
 8009c22:	697b      	ldr	r3, [r7, #20]
 8009c24:	fa01 f303 	lsl.w	r3, r1, r3
 8009c28:	4013      	ands	r3, r2
 8009c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f000 8161 	beq.w	8009ef6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d00b      	beq.n	8009c54 <HAL_GPIO_Init+0x48>
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2b02      	cmp	r3, #2
 8009c42:	d007      	beq.n	8009c54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009c48:	2b11      	cmp	r3, #17
 8009c4a:	d003      	beq.n	8009c54 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b12      	cmp	r3, #18
 8009c52:	d130      	bne.n	8009cb6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	689b      	ldr	r3, [r3, #8]
 8009c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	2203      	movs	r2, #3
 8009c60:	fa02 f303 	lsl.w	r3, r2, r3
 8009c64:	43db      	mvns	r3, r3
 8009c66:	693a      	ldr	r2, [r7, #16]
 8009c68:	4013      	ands	r3, r2
 8009c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	68da      	ldr	r2, [r3, #12]
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	005b      	lsls	r3, r3, #1
 8009c74:	fa02 f303 	lsl.w	r3, r2, r3
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c92:	43db      	mvns	r3, r3
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4013      	ands	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	091b      	lsrs	r3, r3, #4
 8009ca0:	f003 0201 	and.w	r2, r3, #1
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	693a      	ldr	r2, [r7, #16]
 8009cb4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cc6:	43db      	mvns	r3, r3
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	689a      	ldr	r2, [r3, #8]
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	4313      	orrs	r3, r2
 8009cde:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	693a      	ldr	r2, [r7, #16]
 8009ce4:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2b02      	cmp	r3, #2
 8009cec:	d003      	beq.n	8009cf6 <HAL_GPIO_Init+0xea>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2b12      	cmp	r3, #18
 8009cf4:	d123      	bne.n	8009d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	08da      	lsrs	r2, r3, #3
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3208      	adds	r2, #8
 8009cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	220f      	movs	r2, #15
 8009d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d12:	43db      	mvns	r3, r3
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4013      	ands	r3, r2
 8009d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	691a      	ldr	r2, [r3, #16]
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	f003 0307 	and.w	r3, r3, #7
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	fa02 f303 	lsl.w	r3, r2, r3
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	08da      	lsrs	r2, r3, #3
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	3208      	adds	r2, #8
 8009d38:	6939      	ldr	r1, [r7, #16]
 8009d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	2203      	movs	r2, #3
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	43db      	mvns	r3, r3
 8009d50:	693a      	ldr	r2, [r7, #16]
 8009d52:	4013      	ands	r3, r2
 8009d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	f003 0203 	and.w	r2, r3, #3
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	fa02 f303 	lsl.w	r3, r2, r3
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	693a      	ldr	r2, [r7, #16]
 8009d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f000 80bb 	beq.w	8009ef6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d80:	2300      	movs	r3, #0
 8009d82:	60bb      	str	r3, [r7, #8]
 8009d84:	4b64      	ldr	r3, [pc, #400]	; (8009f18 <HAL_GPIO_Init+0x30c>)
 8009d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d88:	4a63      	ldr	r2, [pc, #396]	; (8009f18 <HAL_GPIO_Init+0x30c>)
 8009d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009d8e:	6453      	str	r3, [r2, #68]	; 0x44
 8009d90:	4b61      	ldr	r3, [pc, #388]	; (8009f18 <HAL_GPIO_Init+0x30c>)
 8009d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d98:	60bb      	str	r3, [r7, #8]
 8009d9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8009d9c:	4a5f      	ldr	r2, [pc, #380]	; (8009f1c <HAL_GPIO_Init+0x310>)
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	089b      	lsrs	r3, r3, #2
 8009da2:	3302      	adds	r3, #2
 8009da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	f003 0303 	and.w	r3, r3, #3
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	220f      	movs	r2, #15
 8009db4:	fa02 f303 	lsl.w	r3, r2, r3
 8009db8:	43db      	mvns	r3, r3
 8009dba:	693a      	ldr	r2, [r7, #16]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a57      	ldr	r2, [pc, #348]	; (8009f20 <HAL_GPIO_Init+0x314>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d031      	beq.n	8009e2c <HAL_GPIO_Init+0x220>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a56      	ldr	r2, [pc, #344]	; (8009f24 <HAL_GPIO_Init+0x318>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d02b      	beq.n	8009e28 <HAL_GPIO_Init+0x21c>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a55      	ldr	r2, [pc, #340]	; (8009f28 <HAL_GPIO_Init+0x31c>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d025      	beq.n	8009e24 <HAL_GPIO_Init+0x218>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a54      	ldr	r2, [pc, #336]	; (8009f2c <HAL_GPIO_Init+0x320>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d01f      	beq.n	8009e20 <HAL_GPIO_Init+0x214>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a53      	ldr	r2, [pc, #332]	; (8009f30 <HAL_GPIO_Init+0x324>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d019      	beq.n	8009e1c <HAL_GPIO_Init+0x210>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a52      	ldr	r2, [pc, #328]	; (8009f34 <HAL_GPIO_Init+0x328>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d013      	beq.n	8009e18 <HAL_GPIO_Init+0x20c>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	4a51      	ldr	r2, [pc, #324]	; (8009f38 <HAL_GPIO_Init+0x32c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d00d      	beq.n	8009e14 <HAL_GPIO_Init+0x208>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	4a50      	ldr	r2, [pc, #320]	; (8009f3c <HAL_GPIO_Init+0x330>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d007      	beq.n	8009e10 <HAL_GPIO_Init+0x204>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a4f      	ldr	r2, [pc, #316]	; (8009f40 <HAL_GPIO_Init+0x334>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d101      	bne.n	8009e0c <HAL_GPIO_Init+0x200>
 8009e08:	2308      	movs	r3, #8
 8009e0a:	e010      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e0c:	2309      	movs	r3, #9
 8009e0e:	e00e      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e10:	2307      	movs	r3, #7
 8009e12:	e00c      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e14:	2306      	movs	r3, #6
 8009e16:	e00a      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e18:	2305      	movs	r3, #5
 8009e1a:	e008      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e1c:	2304      	movs	r3, #4
 8009e1e:	e006      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e20:	2303      	movs	r3, #3
 8009e22:	e004      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e002      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e28:	2301      	movs	r3, #1
 8009e2a:	e000      	b.n	8009e2e <HAL_GPIO_Init+0x222>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	697a      	ldr	r2, [r7, #20]
 8009e30:	f002 0203 	and.w	r2, r2, #3
 8009e34:	0092      	lsls	r2, r2, #2
 8009e36:	4093      	lsls	r3, r2
 8009e38:	461a      	mov	r2, r3
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009e40:	4936      	ldr	r1, [pc, #216]	; (8009f1c <HAL_GPIO_Init+0x310>)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	089b      	lsrs	r3, r3, #2
 8009e46:	3302      	adds	r3, #2
 8009e48:	693a      	ldr	r2, [r7, #16]
 8009e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009e4e:	4b3d      	ldr	r3, [pc, #244]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	43db      	mvns	r3, r3
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4013      	ands	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009e6a:	693a      	ldr	r2, [r7, #16]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8009e72:	4a34      	ldr	r2, [pc, #208]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009e78:	4b32      	ldr	r3, [pc, #200]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	43db      	mvns	r3, r3
 8009e82:	693a      	ldr	r2, [r7, #16]
 8009e84:	4013      	ands	r3, r2
 8009e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009e9c:	4a29      	ldr	r2, [pc, #164]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009ea2:	4b28      	ldr	r3, [pc, #160]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	43db      	mvns	r3, r3
 8009eac:	693a      	ldr	r2, [r7, #16]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8009ec6:	4a1f      	ldr	r2, [pc, #124]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009ecc:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	4013      	ands	r3, r2
 8009eda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d003      	beq.n	8009ef0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8009ee8:	693a      	ldr	r2, [r7, #16]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009ef0:	4a14      	ldr	r2, [pc, #80]	; (8009f44 <HAL_GPIO_Init+0x338>)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	fa22 f303 	lsr.w	r3, r2, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f47f ae88 	bne.w	8009c1c <HAL_GPIO_Init+0x10>
  }
}
 8009f0c:	bf00      	nop
 8009f0e:	371c      	adds	r7, #28
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bc80      	pop	{r7}
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	40023800 	.word	0x40023800
 8009f1c:	40013800 	.word	0x40013800
 8009f20:	40020000 	.word	0x40020000
 8009f24:	40020400 	.word	0x40020400
 8009f28:	40020800 	.word	0x40020800
 8009f2c:	40020c00 	.word	0x40020c00
 8009f30:	40021000 	.word	0x40021000
 8009f34:	40021400 	.word	0x40021400
 8009f38:	40021800 	.word	0x40021800
 8009f3c:	40021c00 	.word	0x40021c00
 8009f40:	40022000 	.word	0x40022000
 8009f44:	40013c00 	.word	0x40013c00

08009f48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	460b      	mov	r3, r1
 8009f52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691a      	ldr	r2, [r3, #16]
 8009f58:	887b      	ldrh	r3, [r7, #2]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d002      	beq.n	8009f66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
 8009f64:	e001      	b.n	8009f6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f66:	2300      	movs	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bc80      	pop	{r7}
 8009f74:	4770      	bx	lr

08009f76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f76:	b480      	push	{r7}
 8009f78:	b083      	sub	sp, #12
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	460b      	mov	r3, r1
 8009f80:	807b      	strh	r3, [r7, #2]
 8009f82:	4613      	mov	r3, r2
 8009f84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009f86:	787b      	ldrb	r3, [r7, #1]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f8c:	887a      	ldrh	r2, [r7, #2]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009f92:	e003      	b.n	8009f9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009f94:	887b      	ldrh	r3, [r7, #2]
 8009f96:	041a      	lsls	r2, r3, #16
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	619a      	str	r2, [r3, #24]
}
 8009f9c:	bf00      	nop
 8009f9e:	370c      	adds	r7, #12
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr

08009fa6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
 8009fae:	460b      	mov	r3, r1
 8009fb0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	695a      	ldr	r2, [r3, #20]
 8009fb6:	887b      	ldrh	r3, [r7, #2]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d004      	beq.n	8009fc8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009fbe:	887b      	ldrh	r3, [r7, #2]
 8009fc0:	041a      	lsls	r2, r3, #16
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8009fc6:	e002      	b.n	8009fce <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009fc8:	887a      	ldrh	r2, [r7, #2]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	619a      	str	r2, [r3, #24]
}
 8009fce:	bf00      	nop
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e11f      	b.n	800a22a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fb ff34 	bl	8005e6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2224      	movs	r2, #36	; 0x24
 800a008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0201 	bic.w	r2, r2, #1
 800a01a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a02a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a03a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a03c:	f001 fb20 	bl	800b680 <HAL_RCC_GetPCLK1Freq>
 800a040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	4a7b      	ldr	r2, [pc, #492]	; (800a234 <HAL_I2C_Init+0x25c>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d807      	bhi.n	800a05c <HAL_I2C_Init+0x84>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4a7a      	ldr	r2, [pc, #488]	; (800a238 <HAL_I2C_Init+0x260>)
 800a050:	4293      	cmp	r3, r2
 800a052:	bf94      	ite	ls
 800a054:	2301      	movls	r3, #1
 800a056:	2300      	movhi	r3, #0
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	e006      	b.n	800a06a <HAL_I2C_Init+0x92>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a77      	ldr	r2, [pc, #476]	; (800a23c <HAL_I2C_Init+0x264>)
 800a060:	4293      	cmp	r3, r2
 800a062:	bf94      	ite	ls
 800a064:	2301      	movls	r3, #1
 800a066:	2300      	movhi	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e0db      	b.n	800a22a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4a72      	ldr	r2, [pc, #456]	; (800a240 <HAL_I2C_Init+0x268>)
 800a076:	fba2 2303 	umull	r2, r3, r2, r3
 800a07a:	0c9b      	lsrs	r3, r3, #18
 800a07c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	6a1b      	ldr	r3, [r3, #32]
 800a098:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	4a64      	ldr	r2, [pc, #400]	; (800a234 <HAL_I2C_Init+0x25c>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d802      	bhi.n	800a0ac <HAL_I2C_Init+0xd4>
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	e009      	b.n	800a0c0 <HAL_I2C_Init+0xe8>
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	4a63      	ldr	r2, [pc, #396]	; (800a244 <HAL_I2C_Init+0x26c>)
 800a0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0bc:	099b      	lsrs	r3, r3, #6
 800a0be:	3301      	adds	r3, #1
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a0d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	685b      	ldr	r3, [r3, #4]
 800a0da:	4956      	ldr	r1, [pc, #344]	; (800a234 <HAL_I2C_Init+0x25c>)
 800a0dc:	428b      	cmp	r3, r1
 800a0de:	d80d      	bhi.n	800a0fc <HAL_I2C_Init+0x124>
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	1e59      	subs	r1, r3, #1
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	005b      	lsls	r3, r3, #1
 800a0ea:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	bf38      	it	cc
 800a0f8:	2304      	movcc	r3, #4
 800a0fa:	e04f      	b.n	800a19c <HAL_I2C_Init+0x1c4>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d111      	bne.n	800a128 <HAL_I2C_Init+0x150>
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	1e58      	subs	r0, r3, #1
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6859      	ldr	r1, [r3, #4]
 800a10c:	460b      	mov	r3, r1
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	440b      	add	r3, r1
 800a112:	fbb0 f3f3 	udiv	r3, r0, r3
 800a116:	3301      	adds	r3, #1
 800a118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bf0c      	ite	eq
 800a120:	2301      	moveq	r3, #1
 800a122:	2300      	movne	r3, #0
 800a124:	b2db      	uxtb	r3, r3
 800a126:	e012      	b.n	800a14e <HAL_I2C_Init+0x176>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	1e58      	subs	r0, r3, #1
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6859      	ldr	r1, [r3, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	0099      	lsls	r1, r3, #2
 800a138:	440b      	add	r3, r1
 800a13a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a13e:	3301      	adds	r3, #1
 800a140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a144:	2b00      	cmp	r3, #0
 800a146:	bf0c      	ite	eq
 800a148:	2301      	moveq	r3, #1
 800a14a:	2300      	movne	r3, #0
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d001      	beq.n	800a156 <HAL_I2C_Init+0x17e>
 800a152:	2301      	movs	r3, #1
 800a154:	e022      	b.n	800a19c <HAL_I2C_Init+0x1c4>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	689b      	ldr	r3, [r3, #8]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d10e      	bne.n	800a17c <HAL_I2C_Init+0x1a4>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1e58      	subs	r0, r3, #1
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6859      	ldr	r1, [r3, #4]
 800a166:	460b      	mov	r3, r1
 800a168:	005b      	lsls	r3, r3, #1
 800a16a:	440b      	add	r3, r1
 800a16c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a170:	3301      	adds	r3, #1
 800a172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a17a:	e00f      	b.n	800a19c <HAL_I2C_Init+0x1c4>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	1e58      	subs	r0, r3, #1
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6859      	ldr	r1, [r3, #4]
 800a184:	460b      	mov	r3, r1
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	440b      	add	r3, r1
 800a18a:	0099      	lsls	r1, r3, #2
 800a18c:	440b      	add	r3, r1
 800a18e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a192:	3301      	adds	r3, #1
 800a194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	6809      	ldr	r1, [r1, #0]
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	69da      	ldr	r2, [r3, #28]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a1b      	ldr	r3, [r3, #32]
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a1ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	6911      	ldr	r1, [r2, #16]
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	68d2      	ldr	r2, [r2, #12]
 800a1d6:	4311      	orrs	r1, r2
 800a1d8:	687a      	ldr	r2, [r7, #4]
 800a1da:	6812      	ldr	r2, [r2, #0]
 800a1dc:	430b      	orrs	r3, r1
 800a1de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	695a      	ldr	r2, [r3, #20]
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	430a      	orrs	r2, r1
 800a1fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f042 0201 	orr.w	r2, r2, #1
 800a20a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2220      	movs	r2, #32
 800a216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2200      	movs	r2, #0
 800a21e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	000186a0 	.word	0x000186a0
 800a238:	001e847f 	.word	0x001e847f
 800a23c:	003d08ff 	.word	0x003d08ff
 800a240:	431bde83 	.word	0x431bde83
 800a244:	10624dd3 	.word	0x10624dd3

0800a248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	607a      	str	r2, [r7, #4]
 800a252:	461a      	mov	r2, r3
 800a254:	460b      	mov	r3, r1
 800a256:	817b      	strh	r3, [r7, #10]
 800a258:	4613      	mov	r3, r2
 800a25a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a25c:	f7fd fe0e 	bl	8007e7c <HAL_GetTick>
 800a260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b20      	cmp	r3, #32
 800a26c:	f040 80e0 	bne.w	800a430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	9300      	str	r3, [sp, #0]
 800a274:	2319      	movs	r3, #25
 800a276:	2201      	movs	r2, #1
 800a278:	4970      	ldr	r1, [pc, #448]	; (800a43c <HAL_I2C_Master_Transmit+0x1f4>)
 800a27a:	68f8      	ldr	r0, [r7, #12]
 800a27c:	f000 fc20 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d001      	beq.n	800a28a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a286:	2302      	movs	r3, #2
 800a288:	e0d3      	b.n	800a432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a290:	2b01      	cmp	r3, #1
 800a292:	d101      	bne.n	800a298 <HAL_I2C_Master_Transmit+0x50>
 800a294:	2302      	movs	r3, #2
 800a296:	e0cc      	b.n	800a432 <HAL_I2C_Master_Transmit+0x1ea>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d007      	beq.n	800a2be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f042 0201 	orr.w	r2, r2, #1
 800a2bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2221      	movs	r2, #33	; 0x21
 800a2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2210      	movs	r2, #16
 800a2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	893a      	ldrh	r2, [r7, #8]
 800a2ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4a50      	ldr	r2, [pc, #320]	; (800a440 <HAL_I2C_Master_Transmit+0x1f8>)
 800a2fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a300:	8979      	ldrh	r1, [r7, #10]
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	6a3a      	ldr	r2, [r7, #32]
 800a306:	68f8      	ldr	r0, [r7, #12]
 800a308:	f000 fac4 	bl	800a894 <I2C_MasterRequestWrite>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d001      	beq.n	800a316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e08d      	b.n	800a432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	613b      	str	r3, [r7, #16]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	613b      	str	r3, [r7, #16]
 800a32a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a32c:	e066      	b.n	800a3fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a32e:	697a      	ldr	r2, [r7, #20]
 800a330:	6a39      	ldr	r1, [r7, #32]
 800a332:	68f8      	ldr	r0, [r7, #12]
 800a334:	f000 fc9a 	bl	800ac6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a338:	4603      	mov	r3, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00d      	beq.n	800a35a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	2b04      	cmp	r3, #4
 800a344:	d107      	bne.n	800a356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e06b      	b.n	800a432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36a:	1c5a      	adds	r2, r3, #1
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a374:	b29b      	uxth	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a382:	3b01      	subs	r3, #1
 800a384:	b29a      	uxth	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b04      	cmp	r3, #4
 800a396:	d11b      	bne.n	800a3d0 <HAL_I2C_Master_Transmit+0x188>
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d017      	beq.n	800a3d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	781a      	ldrb	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	6a39      	ldr	r1, [r7, #32]
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	f000 fc8a 	bl	800acee <I2C_WaitOnBTFFlagUntilTimeout>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00d      	beq.n	800a3fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	2b04      	cmp	r3, #4
 800a3e6:	d107      	bne.n	800a3f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e01a      	b.n	800a432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a400:	2b00      	cmp	r3, #0
 800a402:	d194      	bne.n	800a32e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2220      	movs	r2, #32
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a42c:	2300      	movs	r3, #0
 800a42e:	e000      	b.n	800a432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a430:	2302      	movs	r3, #2
  }
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	00100002 	.word	0x00100002
 800a440:	ffff0000 	.word	0xffff0000

0800a444 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af02      	add	r7, sp, #8
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	461a      	mov	r2, r3
 800a452:	4603      	mov	r3, r0
 800a454:	817b      	strh	r3, [r7, #10]
 800a456:	460b      	mov	r3, r1
 800a458:	813b      	strh	r3, [r7, #8]
 800a45a:	4613      	mov	r3, r2
 800a45c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a45e:	f7fd fd0d 	bl	8007e7c <HAL_GetTick>
 800a462:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	f040 80d9 	bne.w	800a624 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	2319      	movs	r3, #25
 800a478:	2201      	movs	r2, #1
 800a47a:	496d      	ldr	r1, [pc, #436]	; (800a630 <HAL_I2C_Mem_Write+0x1ec>)
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f000 fb1f 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d001      	beq.n	800a48c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a488:	2302      	movs	r3, #2
 800a48a:	e0cc      	b.n	800a626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a492:	2b01      	cmp	r3, #1
 800a494:	d101      	bne.n	800a49a <HAL_I2C_Mem_Write+0x56>
 800a496:	2302      	movs	r3, #2
 800a498:	e0c5      	b.n	800a626 <HAL_I2C_Mem_Write+0x1e2>
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2201      	movs	r2, #1
 800a49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d007      	beq.n	800a4c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f042 0201 	orr.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	2221      	movs	r2, #33	; 0x21
 800a4d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2240      	movs	r2, #64	; 0x40
 800a4dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a3a      	ldr	r2, [r7, #32]
 800a4ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a4f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	4a4d      	ldr	r2, [pc, #308]	; (800a634 <HAL_I2C_Mem_Write+0x1f0>)
 800a500:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a502:	88f8      	ldrh	r0, [r7, #6]
 800a504:	893a      	ldrh	r2, [r7, #8]
 800a506:	8979      	ldrh	r1, [r7, #10]
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50e:	9300      	str	r3, [sp, #0]
 800a510:	4603      	mov	r3, r0
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fa40 	bl	800a998 <I2C_RequestMemoryWrite>
 800a518:	4603      	mov	r3, r0
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d052      	beq.n	800a5c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e081      	b.n	800a626 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fba0 	bl	800ac6c <I2C_WaitOnTXEFlagUntilTimeout>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00d      	beq.n	800a54e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a536:	2b04      	cmp	r3, #4
 800a538:	d107      	bne.n	800a54a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e06b      	b.n	800a626 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	781a      	ldrb	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a568:	3b01      	subs	r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a574:	b29b      	uxth	r3, r3
 800a576:	3b01      	subs	r3, #1
 800a578:	b29a      	uxth	r2, r3
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	695b      	ldr	r3, [r3, #20]
 800a584:	f003 0304 	and.w	r3, r3, #4
 800a588:	2b04      	cmp	r3, #4
 800a58a:	d11b      	bne.n	800a5c4 <HAL_I2C_Mem_Write+0x180>
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a590:	2b00      	cmp	r3, #0
 800a592:	d017      	beq.n	800a5c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	781a      	ldrb	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	b29a      	uxth	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1aa      	bne.n	800a522 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fb8c 	bl	800acee <I2C_WaitOnBTFFlagUntilTimeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00d      	beq.n	800a5f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e0:	2b04      	cmp	r3, #4
 800a5e2:	d107      	bne.n	800a5f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	681a      	ldr	r2, [r3, #0]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e016      	b.n	800a626 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2220      	movs	r2, #32
 800a60c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	e000      	b.n	800a626 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a624:	2302      	movs	r3, #2
  }
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	00100002 	.word	0x00100002
 800a634:	ffff0000 	.word	0xffff0000

0800a638 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08a      	sub	sp, #40	; 0x28
 800a63c:	af02      	add	r7, sp, #8
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	607a      	str	r2, [r7, #4]
 800a642:	603b      	str	r3, [r7, #0]
 800a644:	460b      	mov	r3, r1
 800a646:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800a648:	f7fd fc18 	bl	8007e7c <HAL_GetTick>
 800a64c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800a64e:	2301      	movs	r3, #1
 800a650:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	f040 8110 	bne.w	800a880 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	2319      	movs	r3, #25
 800a666:	2201      	movs	r2, #1
 800a668:	4988      	ldr	r1, [pc, #544]	; (800a88c <HAL_I2C_IsDeviceReady+0x254>)
 800a66a:	68f8      	ldr	r0, [r7, #12]
 800a66c:	f000 fa28 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800a676:	2302      	movs	r3, #2
 800a678:	e103      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a680:	2b01      	cmp	r3, #1
 800a682:	d101      	bne.n	800a688 <HAL_I2C_IsDeviceReady+0x50>
 800a684:	2302      	movs	r3, #2
 800a686:	e0fc      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2201      	movs	r2, #1
 800a68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d007      	beq.n	800a6ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f042 0201 	orr.w	r2, r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2224      	movs	r2, #36	; 0x24
 800a6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	4a70      	ldr	r2, [pc, #448]	; (800a890 <HAL_I2C_IsDeviceReady+0x258>)
 800a6d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a6e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	9300      	str	r3, [sp, #0]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f000 f9e6 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d00c      	beq.n	800a714 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a704:	2b00      	cmp	r3, #0
 800a706:	d003      	beq.n	800a710 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a70e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800a710:	2303      	movs	r3, #3
 800a712:	e0b6      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a714:	897b      	ldrh	r3, [r7, #10]
 800a716:	b2db      	uxtb	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a722:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800a724:	f7fd fbaa 	bl	8007e7c <HAL_GetTick>
 800a728:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	695b      	ldr	r3, [r3, #20]
 800a730:	f003 0302 	and.w	r3, r3, #2
 800a734:	2b02      	cmp	r3, #2
 800a736:	bf0c      	ite	eq
 800a738:	2301      	moveq	r3, #1
 800a73a:	2300      	movne	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a74a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a74e:	bf0c      	ite	eq
 800a750:	2301      	moveq	r3, #1
 800a752:	2300      	movne	r3, #0
 800a754:	b2db      	uxtb	r3, r3
 800a756:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a758:	e025      	b.n	800a7a6 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a75a:	f7fd fb8f 	bl	8007e7c <HAL_GetTick>
 800a75e:	4602      	mov	r2, r0
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	683a      	ldr	r2, [r7, #0]
 800a766:	429a      	cmp	r2, r3
 800a768:	d302      	bcc.n	800a770 <HAL_I2C_IsDeviceReady+0x138>
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d103      	bne.n	800a778 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	22a0      	movs	r2, #160	; 0xa0
 800a774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	695b      	ldr	r3, [r3, #20]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b02      	cmp	r3, #2
 800a784:	bf0c      	ite	eq
 800a786:	2301      	moveq	r3, #1
 800a788:	2300      	movne	r3, #0
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a79c:	bf0c      	ite	eq
 800a79e:	2301      	moveq	r3, #1
 800a7a0:	2300      	movne	r3, #0
 800a7a2:	b2db      	uxtb	r3, r3
 800a7a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	2ba0      	cmp	r3, #160	; 0xa0
 800a7b0:	d005      	beq.n	800a7be <HAL_I2C_IsDeviceReady+0x186>
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d102      	bne.n	800a7be <HAL_I2C_IsDeviceReady+0x186>
 800a7b8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d0cd      	beq.n	800a75a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	2220      	movs	r2, #32
 800a7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	2b02      	cmp	r3, #2
 800a7d2:	d129      	bne.n	800a828 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7e2:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	613b      	str	r3, [r7, #16]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	613b      	str	r3, [r7, #16]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	613b      	str	r3, [r7, #16]
 800a7f8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	9300      	str	r3, [sp, #0]
 800a7fe:	2319      	movs	r3, #25
 800a800:	2201      	movs	r2, #1
 800a802:	4922      	ldr	r1, [pc, #136]	; (800a88c <HAL_I2C_IsDeviceReady+0x254>)
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f95b 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	e036      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2220      	movs	r2, #32
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800a824:	2300      	movs	r3, #0
 800a826:	e02c      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a836:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a840:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	2319      	movs	r3, #25
 800a848:	2201      	movs	r2, #1
 800a84a:	4910      	ldr	r1, [pc, #64]	; (800a88c <HAL_I2C_IsDeviceReady+0x254>)
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	f000 f937 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a852:	4603      	mov	r3, r0
 800a854:	2b00      	cmp	r3, #0
 800a856:	d001      	beq.n	800a85c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800a858:	2301      	movs	r3, #1
 800a85a:	e012      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	3301      	adds	r3, #1
 800a860:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	429a      	cmp	r2, r3
 800a868:	f4ff af33 	bcc.w	800a6d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2220      	movs	r2, #32
 800a870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a87c:	2301      	movs	r3, #1
 800a87e:	e000      	b.n	800a882 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800a880:	2302      	movs	r3, #2
  }
}
 800a882:	4618      	mov	r0, r3
 800a884:	3720      	adds	r7, #32
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	00100002 	.word	0x00100002
 800a890:	ffff0000 	.word	0xffff0000

0800a894 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b088      	sub	sp, #32
 800a898:	af02      	add	r7, sp, #8
 800a89a:	60f8      	str	r0, [r7, #12]
 800a89c:	607a      	str	r2, [r7, #4]
 800a89e:	603b      	str	r3, [r7, #0]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	d006      	beq.n	800a8be <I2C_MasterRequestWrite+0x2a>
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d003      	beq.n	800a8be <I2C_MasterRequestWrite+0x2a>
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8bc:	d108      	bne.n	800a8d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8cc:	601a      	str	r2, [r3, #0]
 800a8ce:	e00b      	b.n	800a8e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d4:	2b12      	cmp	r3, #18
 800a8d6:	d107      	bne.n	800a8e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 f8e3 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00c      	beq.n	800a91a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a914:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e035      	b.n	800a986 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a922:	d108      	bne.n	800a936 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a924:	897b      	ldrh	r3, [r7, #10]
 800a926:	b2db      	uxtb	r3, r3
 800a928:	461a      	mov	r2, r3
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a932:	611a      	str	r2, [r3, #16]
 800a934:	e01b      	b.n	800a96e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a936:	897b      	ldrh	r3, [r7, #10]
 800a938:	11db      	asrs	r3, r3, #7
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	f003 0306 	and.w	r3, r3, #6
 800a940:	b2db      	uxtb	r3, r3
 800a942:	f063 030f 	orn	r3, r3, #15
 800a946:	b2da      	uxtb	r2, r3
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	490f      	ldr	r1, [pc, #60]	; (800a990 <I2C_MasterRequestWrite+0xfc>)
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f000 f90a 	bl	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	e010      	b.n	800a986 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a964:	897b      	ldrh	r3, [r7, #10]
 800a966:	b2da      	uxtb	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	4908      	ldr	r1, [pc, #32]	; (800a994 <I2C_MasterRequestWrite+0x100>)
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 f8fa 	bl	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e000      	b.n	800a986 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	00010008 	.word	0x00010008
 800a994:	00010002 	.word	0x00010002

0800a998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af02      	add	r7, sp, #8
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	4608      	mov	r0, r1
 800a9a2:	4611      	mov	r1, r2
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	817b      	strh	r3, [r7, #10]
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	813b      	strh	r3, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	6a3b      	ldr	r3, [r7, #32]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 f876 	bl	800aac0 <I2C_WaitOnFlagUntilTimeout>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d00c      	beq.n	800a9f4 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d003      	beq.n	800a9f0 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e05f      	b.n	800aab4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a9f4:	897b      	ldrh	r3, [r7, #10]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa06:	6a3a      	ldr	r2, [r7, #32]
 800aa08:	492c      	ldr	r1, [pc, #176]	; (800aabc <I2C_RequestMemoryWrite+0x124>)
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f8af 	bl	800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e04c      	b.n	800aab4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	617b      	str	r3, [r7, #20]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	695b      	ldr	r3, [r3, #20]
 800aa24:	617b      	str	r3, [r7, #20]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	617b      	str	r3, [r7, #20]
 800aa2e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa32:	6a39      	ldr	r1, [r7, #32]
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 f919 	bl	800ac6c <I2C_WaitOnTXEFlagUntilTimeout>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00d      	beq.n	800aa5c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa44:	2b04      	cmp	r3, #4
 800aa46:	d107      	bne.n	800aa58 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e02b      	b.n	800aab4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa5c:	88fb      	ldrh	r3, [r7, #6]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d105      	bne.n	800aa6e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa62:	893b      	ldrh	r3, [r7, #8]
 800aa64:	b2da      	uxtb	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	611a      	str	r2, [r3, #16]
 800aa6c:	e021      	b.n	800aab2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa6e:	893b      	ldrh	r3, [r7, #8]
 800aa70:	0a1b      	lsrs	r3, r3, #8
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7e:	6a39      	ldr	r1, [r7, #32]
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f000 f8f3 	bl	800ac6c <I2C_WaitOnTXEFlagUntilTimeout>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00d      	beq.n	800aaa8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	d107      	bne.n	800aaa4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaa2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	e005      	b.n	800aab4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aaa8:	893b      	ldrh	r3, [r7, #8]
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aab2:	2300      	movs	r3, #0
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3718      	adds	r7, #24
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	00010002 	.word	0x00010002

0800aac0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	603b      	str	r3, [r7, #0]
 800aacc:	4613      	mov	r3, r2
 800aace:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aad0:	e025      	b.n	800ab1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad8:	d021      	beq.n	800ab1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aada:	f7fd f9cf 	bl	8007e7c <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d302      	bcc.n	800aaf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d116      	bne.n	800ab1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	2220      	movs	r2, #32
 800aafa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab0a:	f043 0220 	orr.w	r2, r3, #32
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	e023      	b.n	800ab66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	0c1b      	lsrs	r3, r3, #16
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d10d      	bne.n	800ab44 <I2C_WaitOnFlagUntilTimeout+0x84>
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	43da      	mvns	r2, r3
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	4013      	ands	r3, r2
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bf0c      	ite	eq
 800ab3a:	2301      	moveq	r3, #1
 800ab3c:	2300      	movne	r3, #0
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	461a      	mov	r2, r3
 800ab42:	e00c      	b.n	800ab5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	43da      	mvns	r2, r3
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	bf0c      	ite	eq
 800ab56:	2301      	moveq	r3, #1
 800ab58:	2300      	movne	r3, #0
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	79fb      	ldrb	r3, [r7, #7]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d0b6      	beq.n	800aad2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ab64:	2300      	movs	r3, #0
}
 800ab66:	4618      	mov	r0, r3
 800ab68:	3710      	adds	r7, #16
 800ab6a:	46bd      	mov	sp, r7
 800ab6c:	bd80      	pop	{r7, pc}

0800ab6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	60f8      	str	r0, [r7, #12]
 800ab76:	60b9      	str	r1, [r7, #8]
 800ab78:	607a      	str	r2, [r7, #4]
 800ab7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab7c:	e051      	b.n	800ac22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab8c:	d123      	bne.n	800abd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800aba6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2200      	movs	r2, #0
 800abac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2220      	movs	r2, #32
 800abb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	f043 0204 	orr.w	r2, r3, #4
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e046      	b.n	800ac64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abdc:	d021      	beq.n	800ac22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abde:	f7fd f94d 	bl	8007e7c <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	429a      	cmp	r2, r3
 800abec:	d302      	bcc.n	800abf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d116      	bne.n	800ac22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0e:	f043 0220 	orr.w	r2, r3, #32
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e020      	b.n	800ac64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	0c1b      	lsrs	r3, r3, #16
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d10c      	bne.n	800ac46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	43da      	mvns	r2, r3
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	4013      	ands	r3, r2
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	bf14      	ite	ne
 800ac3e:	2301      	movne	r3, #1
 800ac40:	2300      	moveq	r3, #0
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	e00b      	b.n	800ac5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	43da      	mvns	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	4013      	ands	r3, r2
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	bf14      	ite	ne
 800ac58:	2301      	movne	r3, #1
 800ac5a:	2300      	moveq	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d18d      	bne.n	800ab7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ac62:	2300      	movs	r3, #0
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3710      	adds	r7, #16
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b084      	sub	sp, #16
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac78:	e02d      	b.n	800acd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	f000 f878 	bl	800ad70 <I2C_IsAcknowledgeFailed>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d001      	beq.n	800ac8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e02d      	b.n	800ace6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac90:	d021      	beq.n	800acd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac92:	f7fd f8f3 	bl	8007e7c <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	68ba      	ldr	r2, [r7, #8]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d302      	bcc.n	800aca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d116      	bne.n	800acd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2220      	movs	r2, #32
 800acb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc2:	f043 0220 	orr.w	r2, r3, #32
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e007      	b.n	800ace6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	695b      	ldr	r3, [r3, #20]
 800acdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ace0:	2b80      	cmp	r3, #128	; 0x80
 800ace2:	d1ca      	bne.n	800ac7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800acfa:	e02d      	b.n	800ad58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f837 	bl	800ad70 <I2C_IsAcknowledgeFailed>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e02d      	b.n	800ad68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d021      	beq.n	800ad58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad14:	f7fd f8b2 	bl	8007e7c <HAL_GetTick>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	1ad3      	subs	r3, r2, r3
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d302      	bcc.n	800ad2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d116      	bne.n	800ad58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2220      	movs	r2, #32
 800ad34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	f043 0220 	orr.w	r2, r3, #32
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e007      	b.n	800ad68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	695b      	ldr	r3, [r3, #20]
 800ad5e:	f003 0304 	and.w	r3, r3, #4
 800ad62:	2b04      	cmp	r3, #4
 800ad64:	d1ca      	bne.n	800acfc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad86:	d11b      	bne.n	800adc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ad90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2220      	movs	r2, #32
 800ad9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adac:	f043 0204 	orr.w	r2, r3, #4
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2200      	movs	r2, #0
 800adb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e000      	b.n	800adc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bc80      	pop	{r7}
 800adca:	4770      	bx	lr

0800adcc <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b084      	sub	sp, #16
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e02b      	b.n	800ae36 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ade6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f245 5255 	movw	r2, #21845	; 0x5555
 800adf0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	687a      	ldr	r2, [r7, #4]
 800adf8:	6852      	ldr	r2, [r2, #4]
 800adfa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	6892      	ldr	r2, [r2, #8]
 800ae04:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ae06:	f7fd f839 	bl	8007e7c <HAL_GetTick>
 800ae0a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != 0x00u)
 800ae0c:	e008      	b.n	800ae20 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ae0e:	f7fd f835 	bl	8007e7c <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	1ad3      	subs	r3, r2, r3
 800ae18:	2b30      	cmp	r3, #48	; 0x30
 800ae1a:	d901      	bls.n	800ae20 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800ae1c:	2303      	movs	r3, #3
 800ae1e:	e00a      	b.n	800ae36 <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != 0x00u)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1f1      	bne.n	800ae0e <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ae32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	4618      	mov	r0, r3
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b083      	sub	sp, #12
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800ae4e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	370c      	adds	r7, #12
 800ae56:	46bd      	mov	sp, r7
 800ae58:	bc80      	pop	{r7}
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b090      	sub	sp, #64	; 0x40
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e253      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d050      	beq.n	800af1c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae7a:	4ba3      	ldr	r3, [pc, #652]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	f003 030c 	and.w	r3, r3, #12
 800ae82:	2b04      	cmp	r3, #4
 800ae84:	d00c      	beq.n	800aea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae86:	4ba0      	ldr	r3, [pc, #640]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d112      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae92:	4b9d      	ldr	r3, [pc, #628]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae9e:	d10b      	bne.n	800aeb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aea0:	4b99      	ldr	r3, [pc, #612]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d036      	beq.n	800af1a <HAL_RCC_OscConfig+0xbe>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d132      	bne.n	800af1a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e22e      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	4b93      	ldr	r3, [pc, #588]	; (800b10c <HAL_RCC_OscConfig+0x2b0>)
 800aebe:	b2d2      	uxtb	r2, r2
 800aec0:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d013      	beq.n	800aef2 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeca:	f7fc ffd7 	bl	8007e7c <HAL_GetTick>
 800aece:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aed0:	e008      	b.n	800aee4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aed2:	f7fc ffd3 	bl	8007e7c <HAL_GetTick>
 800aed6:	4602      	mov	r2, r0
 800aed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeda:	1ad3      	subs	r3, r2, r3
 800aedc:	2b64      	cmp	r3, #100	; 0x64
 800aede:	d901      	bls.n	800aee4 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800aee0:	2303      	movs	r3, #3
 800aee2:	e218      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aee4:	4b88      	ldr	r3, [pc, #544]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d0f0      	beq.n	800aed2 <HAL_RCC_OscConfig+0x76>
 800aef0:	e014      	b.n	800af1c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aef2:	f7fc ffc3 	bl	8007e7c <HAL_GetTick>
 800aef6:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aef8:	e008      	b.n	800af0c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aefa:	f7fc ffbf 	bl	8007e7c <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	2b64      	cmp	r3, #100	; 0x64
 800af06:	d901      	bls.n	800af0c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e204      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af0c:	4b7e      	ldr	r3, [pc, #504]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d1f0      	bne.n	800aefa <HAL_RCC_OscConfig+0x9e>
 800af18:	e000      	b.n	800af1c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af1a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d077      	beq.n	800b018 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af28:	4b77      	ldr	r3, [pc, #476]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af2a:	689b      	ldr	r3, [r3, #8]
 800af2c:	f003 030c 	and.w	r3, r3, #12
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af34:	4b74      	ldr	r3, [pc, #464]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af3c:	2b08      	cmp	r3, #8
 800af3e:	d126      	bne.n	800af8e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af40:	4b71      	ldr	r3, [pc, #452]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d120      	bne.n	800af8e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af4c:	4b6e      	ldr	r3, [pc, #440]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	2b00      	cmp	r3, #0
 800af56:	d005      	beq.n	800af64 <HAL_RCC_OscConfig+0x108>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d001      	beq.n	800af64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e1d8      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af64:	4b68      	ldr	r3, [pc, #416]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691b      	ldr	r3, [r3, #16]
 800af70:	21f8      	movs	r1, #248	; 0xf8
 800af72:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af76:	fa91 f1a1 	rbit	r1, r1
 800af7a:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 800af7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af7e:	fab1 f181 	clz	r1, r1
 800af82:	b2c9      	uxtb	r1, r1
 800af84:	408b      	lsls	r3, r1
 800af86:	4960      	ldr	r1, [pc, #384]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800af88:	4313      	orrs	r3, r2
 800af8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af8c:	e044      	b.n	800b018 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d02a      	beq.n	800afec <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800af96:	4b5e      	ldr	r3, [pc, #376]	; (800b110 <HAL_RCC_OscConfig+0x2b4>)
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af9c:	f7fc ff6e 	bl	8007e7c <HAL_GetTick>
 800afa0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afa2:	e008      	b.n	800afb6 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afa4:	f7fc ff6a 	bl	8007e7c <HAL_GetTick>
 800afa8:	4602      	mov	r2, r0
 800afaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	2b02      	cmp	r3, #2
 800afb0:	d901      	bls.n	800afb6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e1af      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afb6:	4b54      	ldr	r3, [pc, #336]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f003 0302 	and.w	r3, r3, #2
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d0f0      	beq.n	800afa4 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afc2:	4b51      	ldr	r3, [pc, #324]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	21f8      	movs	r1, #248	; 0xf8
 800afd0:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800afd4:	fa91 f1a1 	rbit	r1, r1
 800afd8:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800afda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afdc:	fab1 f181 	clz	r1, r1
 800afe0:	b2c9      	uxtb	r1, r1
 800afe2:	408b      	lsls	r3, r1
 800afe4:	4948      	ldr	r1, [pc, #288]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800afe6:	4313      	orrs	r3, r2
 800afe8:	600b      	str	r3, [r1, #0]
 800afea:	e015      	b.n	800b018 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afec:	4b48      	ldr	r3, [pc, #288]	; (800b110 <HAL_RCC_OscConfig+0x2b4>)
 800afee:	2200      	movs	r2, #0
 800aff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aff2:	f7fc ff43 	bl	8007e7c <HAL_GetTick>
 800aff6:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aff8:	e008      	b.n	800b00c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800affa:	f7fc ff3f 	bl	8007e7c <HAL_GetTick>
 800affe:	4602      	mov	r2, r0
 800b000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	2b02      	cmp	r3, #2
 800b006:	d901      	bls.n	800b00c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800b008:	2303      	movs	r3, #3
 800b00a:	e184      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b00c:	4b3e      	ldr	r3, [pc, #248]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0302 	and.w	r3, r3, #2
 800b014:	2b00      	cmp	r3, #0
 800b016:	d1f0      	bne.n	800affa <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0308 	and.w	r3, r3, #8
 800b020:	2b00      	cmp	r3, #0
 800b022:	d030      	beq.n	800b086 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d016      	beq.n	800b05a <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b02c:	4b39      	ldr	r3, [pc, #228]	; (800b114 <HAL_RCC_OscConfig+0x2b8>)
 800b02e:	2201      	movs	r2, #1
 800b030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b032:	f7fc ff23 	bl	8007e7c <HAL_GetTick>
 800b036:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b038:	e008      	b.n	800b04c <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b03a:	f7fc ff1f 	bl	8007e7c <HAL_GetTick>
 800b03e:	4602      	mov	r2, r0
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	1ad3      	subs	r3, r2, r3
 800b044:	2b02      	cmp	r3, #2
 800b046:	d901      	bls.n	800b04c <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800b048:	2303      	movs	r3, #3
 800b04a:	e164      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b04c:	4b2e      	ldr	r3, [pc, #184]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b04e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b050:	f003 0302 	and.w	r3, r3, #2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d0f0      	beq.n	800b03a <HAL_RCC_OscConfig+0x1de>
 800b058:	e015      	b.n	800b086 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b05a:	4b2e      	ldr	r3, [pc, #184]	; (800b114 <HAL_RCC_OscConfig+0x2b8>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b060:	f7fc ff0c 	bl	8007e7c <HAL_GetTick>
 800b064:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b066:	e008      	b.n	800b07a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b068:	f7fc ff08 	bl	8007e7c <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b02      	cmp	r3, #2
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e14d      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b07a:	4b23      	ldr	r3, [pc, #140]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b07c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b07e:	f003 0302 	and.w	r3, r3, #2
 800b082:	2b00      	cmp	r3, #0
 800b084:	d1f0      	bne.n	800b068 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 0304 	and.w	r3, r3, #4
 800b08e:	2b00      	cmp	r3, #0
 800b090:	f000 8088 	beq.w	800b1a4 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b094:	2300      	movs	r3, #0
 800b096:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b09a:	4b1b      	ldr	r3, [pc, #108]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d110      	bne.n	800b0c8 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	60bb      	str	r3, [r7, #8]
 800b0aa:	4b17      	ldr	r3, [pc, #92]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ae:	4a16      	ldr	r2, [pc, #88]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b0b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0b4:	6413      	str	r3, [r2, #64]	; 0x40
 800b0b6:	4b14      	ldr	r3, [pc, #80]	; (800b108 <HAL_RCC_OscConfig+0x2ac>)
 800b0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0be:	60bb      	str	r3, [r7, #8]
 800b0c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b0c8:	4b13      	ldr	r3, [pc, #76]	; (800b118 <HAL_RCC_OscConfig+0x2bc>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4a12      	ldr	r2, [pc, #72]	; (800b118 <HAL_RCC_OscConfig+0x2bc>)
 800b0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0d2:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0d4:	4b10      	ldr	r3, [pc, #64]	; (800b118 <HAL_RCC_OscConfig+0x2bc>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d123      	bne.n	800b128 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0e0:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <HAL_RCC_OscConfig+0x2bc>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a0c      	ldr	r2, [pc, #48]	; (800b118 <HAL_RCC_OscConfig+0x2bc>)
 800b0e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0ec:	f7fc fec6 	bl	8007e7c <HAL_GetTick>
 800b0f0:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0f2:	e013      	b.n	800b11c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0f4:	f7fc fec2 	bl	8007e7c <HAL_GetTick>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d90c      	bls.n	800b11c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e107      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
 800b106:	bf00      	nop
 800b108:	40023800 	.word	0x40023800
 800b10c:	40023802 	.word	0x40023802
 800b110:	42470000 	.word	0x42470000
 800b114:	42470e80 	.word	0x42470e80
 800b118:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b11c:	4b80      	ldr	r3, [pc, #512]	; (800b320 <HAL_RCC_OscConfig+0x4c4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b124:	2b00      	cmp	r3, #0
 800b126:	d0e5      	beq.n	800b0f4 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	689a      	ldr	r2, [r3, #8]
 800b12c:	4b7d      	ldr	r3, [pc, #500]	; (800b324 <HAL_RCC_OscConfig+0x4c8>)
 800b12e:	b2d2      	uxtb	r2, r2
 800b130:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	689b      	ldr	r3, [r3, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d015      	beq.n	800b166 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b13a:	f7fc fe9f 	bl	8007e7c <HAL_GetTick>
 800b13e:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b140:	e00a      	b.n	800b158 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b142:	f7fc fe9b 	bl	8007e7c <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b150:	4293      	cmp	r3, r2
 800b152:	d901      	bls.n	800b158 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e0de      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b158:	4b73      	ldr	r3, [pc, #460]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b15c:	f003 0302 	and.w	r3, r3, #2
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0ee      	beq.n	800b142 <HAL_RCC_OscConfig+0x2e6>
 800b164:	e014      	b.n	800b190 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b166:	f7fc fe89 	bl	8007e7c <HAL_GetTick>
 800b16a:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b16c:	e00a      	b.n	800b184 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b16e:	f7fc fe85 	bl	8007e7c <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	f241 3288 	movw	r2, #5000	; 0x1388
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d901      	bls.n	800b184 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e0c8      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b184:	4b68      	ldr	r3, [pc, #416]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b188:	f003 0302 	and.w	r3, r3, #2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d1ee      	bne.n	800b16e <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b190:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b194:	2b01      	cmp	r3, #1
 800b196:	d105      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b198:	4b63      	ldr	r3, [pc, #396]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b19c:	4a62      	ldr	r2, [pc, #392]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b19e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f000 80b3 	beq.w	800b314 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1ae:	4b5e      	ldr	r3, [pc, #376]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 030c 	and.w	r3, r3, #12
 800b1b6:	2b08      	cmp	r3, #8
 800b1b8:	d07d      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	2b02      	cmp	r3, #2
 800b1c0:	d162      	bne.n	800b288 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1c2:	4b5a      	ldr	r3, [pc, #360]	; (800b32c <HAL_RCC_OscConfig+0x4d0>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1c8:	f7fc fe58 	bl	8007e7c <HAL_GetTick>
 800b1cc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1ce:	e008      	b.n	800b1e2 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1d0:	f7fc fe54 	bl	8007e7c <HAL_GetTick>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	1ad3      	subs	r3, r2, r3
 800b1da:	2b64      	cmp	r3, #100	; 0x64
 800b1dc:	d901      	bls.n	800b1e2 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800b1de:	2303      	movs	r3, #3
 800b1e0:	e099      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1e2:	4b51      	ldr	r3, [pc, #324]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1f0      	bne.n	800b1d0 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	69da      	ldr	r2, [r3, #28]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1fc:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800b200:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b202:	6939      	ldr	r1, [r7, #16]
 800b204:	fa91 f1a1 	rbit	r1, r1
 800b208:	60f9      	str	r1, [r7, #12]
  return result;
 800b20a:	68f9      	ldr	r1, [r7, #12]
 800b20c:	fab1 f181 	clz	r1, r1
 800b210:	b2c9      	uxtb	r1, r1
 800b212:	408b      	lsls	r3, r1
 800b214:	431a      	orrs	r2, r3
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b21a:	085b      	lsrs	r3, r3, #1
 800b21c:	3b01      	subs	r3, #1
 800b21e:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800b222:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b224:	69b9      	ldr	r1, [r7, #24]
 800b226:	fa91 f1a1 	rbit	r1, r1
 800b22a:	6179      	str	r1, [r7, #20]
  return result;
 800b22c:	6979      	ldr	r1, [r7, #20]
 800b22e:	fab1 f181 	clz	r1, r1
 800b232:	b2c9      	uxtb	r1, r1
 800b234:	408b      	lsls	r3, r1
 800b236:	431a      	orrs	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800b240:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b242:	6a39      	ldr	r1, [r7, #32]
 800b244:	fa91 f1a1 	rbit	r1, r1
 800b248:	61f9      	str	r1, [r7, #28]
  return result;
 800b24a:	69f9      	ldr	r1, [r7, #28]
 800b24c:	fab1 f181 	clz	r1, r1
 800b250:	b2c9      	uxtb	r1, r1
 800b252:	408b      	lsls	r3, r1
 800b254:	4934      	ldr	r1, [pc, #208]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b256:	4313      	orrs	r3, r2
 800b258:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b25a:	4b34      	ldr	r3, [pc, #208]	; (800b32c <HAL_RCC_OscConfig+0x4d0>)
 800b25c:	2201      	movs	r2, #1
 800b25e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b260:	f7fc fe0c 	bl	8007e7c <HAL_GetTick>
 800b264:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b266:	e008      	b.n	800b27a <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b268:	f7fc fe08 	bl	8007e7c <HAL_GetTick>
 800b26c:	4602      	mov	r2, r0
 800b26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b270:	1ad3      	subs	r3, r2, r3
 800b272:	2b64      	cmp	r3, #100	; 0x64
 800b274:	d901      	bls.n	800b27a <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800b276:	2303      	movs	r3, #3
 800b278:	e04d      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b27a:	4b2b      	ldr	r3, [pc, #172]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0f0      	beq.n	800b268 <HAL_RCC_OscConfig+0x40c>
 800b286:	e045      	b.n	800b314 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b288:	4b28      	ldr	r3, [pc, #160]	; (800b32c <HAL_RCC_OscConfig+0x4d0>)
 800b28a:	2200      	movs	r2, #0
 800b28c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b28e:	f7fc fdf5 	bl	8007e7c <HAL_GetTick>
 800b292:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b294:	e008      	b.n	800b2a8 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b296:	f7fc fdf1 	bl	8007e7c <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b64      	cmp	r3, #100	; 0x64
 800b2a2:	d901      	bls.n	800b2a8 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e036      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b2a8:	4b1f      	ldr	r3, [pc, #124]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1f0      	bne.n	800b296 <HAL_RCC_OscConfig+0x43a>
 800b2b4:	e02e      	b.n	800b314 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d101      	bne.n	800b2c2 <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e029      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800b2c2:	4b19      	ldr	r3, [pc, #100]	; (800b328 <HAL_RCC_OscConfig+0x4cc>)
 800b2c4:	685b      	ldr	r3, [r3, #4]
 800b2c6:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	69db      	ldr	r3, [r3, #28]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d11c      	bne.n	800b310 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d115      	bne.n	800b310 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e6:	099b      	lsrs	r3, r3, #6
 800b2e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d10d      	bne.n	800b310 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b2f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d106      	bne.n	800b310 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800b302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b304:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d001      	beq.n	800b314 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e000      	b.n	800b316 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3740      	adds	r7, #64	; 0x40
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	40007000 	.word	0x40007000
 800b324:	40023870 	.word	0x40023870
 800b328:	40023800 	.word	0x40023800
 800b32c:	42470060 	.word	0x42470060

0800b330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d101      	bne.n	800b344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e0d2      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b344:	4b6b      	ldr	r3, [pc, #428]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 030f 	and.w	r3, r3, #15
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d90c      	bls.n	800b36c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b352:	4b68      	ldr	r3, [pc, #416]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b35a:	4b66      	ldr	r3, [pc, #408]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d001      	beq.n	800b36c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e0be      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 0302 	and.w	r3, r3, #2
 800b374:	2b00      	cmp	r3, #0
 800b376:	d020      	beq.n	800b3ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b384:	4b5c      	ldr	r3, [pc, #368]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	4a5b      	ldr	r2, [pc, #364]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b38a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b38e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f003 0308 	and.w	r3, r3, #8
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d005      	beq.n	800b3a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800b39c:	4b56      	ldr	r3, [pc, #344]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	4a55      	ldr	r2, [pc, #340]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b3a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b3a8:	4b53      	ldr	r3, [pc, #332]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	4950      	ldr	r1, [pc, #320]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3b6:	4313      	orrs	r3, r2
 800b3b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0301 	and.w	r3, r3, #1
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d040      	beq.n	800b448 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2b01      	cmp	r3, #1
 800b3cc:	d107      	bne.n	800b3de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3ce:	4b4a      	ldr	r3, [pc, #296]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d115      	bne.n	800b406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	e085      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	d107      	bne.n	800b3f6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3e6:	4b44      	ldr	r3, [pc, #272]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	e079      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3f6:	4b40      	ldr	r3, [pc, #256]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e071      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b406:	4b3c      	ldr	r3, [pc, #240]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f023 0203 	bic.w	r2, r3, #3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4939      	ldr	r1, [pc, #228]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b414:	4313      	orrs	r3, r2
 800b416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b418:	f7fc fd30 	bl	8007e7c <HAL_GetTick>
 800b41c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b41e:	e00a      	b.n	800b436 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b420:	f7fc fd2c 	bl	8007e7c <HAL_GetTick>
 800b424:	4602      	mov	r2, r0
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42e:	4293      	cmp	r3, r2
 800b430:	d901      	bls.n	800b436 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800b432:	2303      	movs	r3, #3
 800b434:	e059      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b436:	4b30      	ldr	r3, [pc, #192]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	f003 020c 	and.w	r2, r3, #12
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	429a      	cmp	r2, r3
 800b446:	d1eb      	bne.n	800b420 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b448:	4b2a      	ldr	r3, [pc, #168]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 030f 	and.w	r3, r3, #15
 800b450:	683a      	ldr	r2, [r7, #0]
 800b452:	429a      	cmp	r2, r3
 800b454:	d20c      	bcs.n	800b470 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b456:	4b27      	ldr	r3, [pc, #156]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b458:	683a      	ldr	r2, [r7, #0]
 800b45a:	b2d2      	uxtb	r2, r2
 800b45c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b45e:	4b25      	ldr	r3, [pc, #148]	; (800b4f4 <HAL_RCC_ClockConfig+0x1c4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 030f 	and.w	r3, r3, #15
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d001      	beq.n	800b470 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e03c      	b.n	800b4ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0304 	and.w	r3, r3, #4
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d008      	beq.n	800b48e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b47c:	4b1e      	ldr	r3, [pc, #120]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	491b      	ldr	r1, [pc, #108]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f003 0308 	and.w	r3, r3, #8
 800b496:	2b00      	cmp	r3, #0
 800b498:	d009      	beq.n	800b4ae <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b49a:	4b17      	ldr	r3, [pc, #92]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b49c:	689b      	ldr	r3, [r3, #8]
 800b49e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	00db      	lsls	r3, r3, #3
 800b4a8:	4913      	ldr	r1, [pc, #76]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800b4ae:	f000 f82b 	bl	800b508 <HAL_RCC_GetSysClockFreq>
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	4b10      	ldr	r3, [pc, #64]	; (800b4f8 <HAL_RCC_ClockConfig+0x1c8>)
 800b4b6:	689b      	ldr	r3, [r3, #8]
 800b4b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4bc:	22f0      	movs	r2, #240	; 0xf0
 800b4be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4c0:	693a      	ldr	r2, [r7, #16]
 800b4c2:	fa92 f2a2 	rbit	r2, r2
 800b4c6:	60fa      	str	r2, [r7, #12]
  return result;
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	fab2 f282 	clz	r2, r2
 800b4ce:	b2d2      	uxtb	r2, r2
 800b4d0:	40d3      	lsrs	r3, r2
 800b4d2:	4a0a      	ldr	r2, [pc, #40]	; (800b4fc <HAL_RCC_ClockConfig+0x1cc>)
 800b4d4:	5cd3      	ldrb	r3, [r2, r3]
 800b4d6:	fa21 f303 	lsr.w	r3, r1, r3
 800b4da:	4a09      	ldr	r2, [pc, #36]	; (800b500 <HAL_RCC_ClockConfig+0x1d0>)
 800b4dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4de:	4b09      	ldr	r3, [pc, #36]	; (800b504 <HAL_RCC_ClockConfig+0x1d4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f7fc fc88 	bl	8007df8 <HAL_InitTick>

  return HAL_OK;
 800b4e8:	2300      	movs	r3, #0
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3718      	adds	r7, #24
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	40023c00 	.word	0x40023c00
 800b4f8:	40023800 	.word	0x40023800
 800b4fc:	0800fbd0 	.word	0x0800fbd0
 800b500:	20000058 	.word	0x20000058
 800b504:	2000005c 	.word	0x2000005c

0800b508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b50a:	b085      	sub	sp, #20
 800b50c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	607b      	str	r3, [r7, #4]
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	2300      	movs	r3, #0
 800b518:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b51e:	4b50      	ldr	r3, [pc, #320]	; (800b660 <HAL_RCC_GetSysClockFreq+0x158>)
 800b520:	689b      	ldr	r3, [r3, #8]
 800b522:	f003 030c 	and.w	r3, r3, #12
 800b526:	2b04      	cmp	r3, #4
 800b528:	d007      	beq.n	800b53a <HAL_RCC_GetSysClockFreq+0x32>
 800b52a:	2b08      	cmp	r3, #8
 800b52c:	d008      	beq.n	800b540 <HAL_RCC_GetSysClockFreq+0x38>
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f040 808d 	bne.w	800b64e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b534:	4b4b      	ldr	r3, [pc, #300]	; (800b664 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b536:	60bb      	str	r3, [r7, #8]
       break;
 800b538:	e08c      	b.n	800b654 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b53a:	4b4b      	ldr	r3, [pc, #300]	; (800b668 <HAL_RCC_GetSysClockFreq+0x160>)
 800b53c:	60bb      	str	r3, [r7, #8]
      break;
 800b53e:	e089      	b.n	800b654 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b540:	4b47      	ldr	r3, [pc, #284]	; (800b660 <HAL_RCC_GetSysClockFreq+0x158>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b54a:	4b45      	ldr	r3, [pc, #276]	; (800b660 <HAL_RCC_GetSysClockFreq+0x158>)
 800b54c:	685b      	ldr	r3, [r3, #4]
 800b54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d023      	beq.n	800b59e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b556:	4b42      	ldr	r3, [pc, #264]	; (800b660 <HAL_RCC_GetSysClockFreq+0x158>)
 800b558:	685b      	ldr	r3, [r3, #4]
 800b55a:	099b      	lsrs	r3, r3, #6
 800b55c:	f04f 0400 	mov.w	r4, #0
 800b560:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b564:	f04f 0200 	mov.w	r2, #0
 800b568:	ea03 0501 	and.w	r5, r3, r1
 800b56c:	ea04 0602 	and.w	r6, r4, r2
 800b570:	4a3d      	ldr	r2, [pc, #244]	; (800b668 <HAL_RCC_GetSysClockFreq+0x160>)
 800b572:	fb02 f106 	mul.w	r1, r2, r6
 800b576:	2200      	movs	r2, #0
 800b578:	fb02 f205 	mul.w	r2, r2, r5
 800b57c:	440a      	add	r2, r1
 800b57e:	493a      	ldr	r1, [pc, #232]	; (800b668 <HAL_RCC_GetSysClockFreq+0x160>)
 800b580:	fba5 0101 	umull	r0, r1, r5, r1
 800b584:	1853      	adds	r3, r2, r1
 800b586:	4619      	mov	r1, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f04f 0400 	mov.w	r4, #0
 800b58e:	461a      	mov	r2, r3
 800b590:	4623      	mov	r3, r4
 800b592:	f7f5 fdf9 	bl	8001188 <__aeabi_uldivmod>
 800b596:	4603      	mov	r3, r0
 800b598:	460c      	mov	r4, r1
 800b59a:	60fb      	str	r3, [r7, #12]
 800b59c:	e049      	b.n	800b632 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b59e:	4b30      	ldr	r3, [pc, #192]	; (800b660 <HAL_RCC_GetSysClockFreq+0x158>)
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	099b      	lsrs	r3, r3, #6
 800b5a4:	f04f 0400 	mov.w	r4, #0
 800b5a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5ac:	f04f 0200 	mov.w	r2, #0
 800b5b0:	ea03 0501 	and.w	r5, r3, r1
 800b5b4:	ea04 0602 	and.w	r6, r4, r2
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4632      	mov	r2, r6
 800b5bc:	f04f 0300 	mov.w	r3, #0
 800b5c0:	f04f 0400 	mov.w	r4, #0
 800b5c4:	0154      	lsls	r4, r2, #5
 800b5c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5ca:	014b      	lsls	r3, r1, #5
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4622      	mov	r2, r4
 800b5d0:	1b49      	subs	r1, r1, r5
 800b5d2:	eb62 0206 	sbc.w	r2, r2, r6
 800b5d6:	f04f 0300 	mov.w	r3, #0
 800b5da:	f04f 0400 	mov.w	r4, #0
 800b5de:	0194      	lsls	r4, r2, #6
 800b5e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b5e4:	018b      	lsls	r3, r1, #6
 800b5e6:	1a5b      	subs	r3, r3, r1
 800b5e8:	eb64 0402 	sbc.w	r4, r4, r2
 800b5ec:	f04f 0100 	mov.w	r1, #0
 800b5f0:	f04f 0200 	mov.w	r2, #0
 800b5f4:	00e2      	lsls	r2, r4, #3
 800b5f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b5fa:	00d9      	lsls	r1, r3, #3
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	4614      	mov	r4, r2
 800b600:	195b      	adds	r3, r3, r5
 800b602:	eb44 0406 	adc.w	r4, r4, r6
 800b606:	f04f 0100 	mov.w	r1, #0
 800b60a:	f04f 0200 	mov.w	r2, #0
 800b60e:	02a2      	lsls	r2, r4, #10
 800b610:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b614:	0299      	lsls	r1, r3, #10
 800b616:	460b      	mov	r3, r1
 800b618:	4614      	mov	r4, r2
 800b61a:	4618      	mov	r0, r3
 800b61c:	4621      	mov	r1, r4
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f04f 0400 	mov.w	r4, #0
 800b624:	461a      	mov	r2, r3
 800b626:	4623      	mov	r3, r4
 800b628:	f7f5 fdae 	bl	8001188 <__aeabi_uldivmod>
 800b62c:	4603      	mov	r3, r0
 800b62e:	460c      	mov	r4, r1
 800b630:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <HAL_RCC_GetSysClockFreq+0x158>)
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	0c1b      	lsrs	r3, r3, #16
 800b638:	f003 0303 	and.w	r3, r3, #3
 800b63c:	3301      	adds	r3, #1
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	fbb2 f3f3 	udiv	r3, r2, r3
 800b64a:	60bb      	str	r3, [r7, #8]
      break;
 800b64c:	e002      	b.n	800b654 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b64e:	4b05      	ldr	r3, [pc, #20]	; (800b664 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b650:	60bb      	str	r3, [r7, #8]
      break;
 800b652:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b654:	68bb      	ldr	r3, [r7, #8]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b65e:	bf00      	nop
 800b660:	40023800 	.word	0x40023800
 800b664:	00f42400 	.word	0x00f42400
 800b668:	017d7840 	.word	0x017d7840

0800b66c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b66c:	b480      	push	{r7}
 800b66e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b670:	4b02      	ldr	r3, [pc, #8]	; (800b67c <HAL_RCC_GetHCLKFreq+0x10>)
 800b672:	681b      	ldr	r3, [r3, #0]
}
 800b674:	4618      	mov	r0, r3
 800b676:	46bd      	mov	sp, r7
 800b678:	bc80      	pop	{r7}
 800b67a:	4770      	bx	lr
 800b67c:	20000058 	.word	0x20000058

0800b680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800b686:	f7ff fff1 	bl	800b66c <HAL_RCC_GetHCLKFreq>
 800b68a:	4601      	mov	r1, r0
 800b68c:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800b68e:	689b      	ldr	r3, [r3, #8]
 800b690:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800b694:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800b698:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	fa92 f2a2 	rbit	r2, r2
 800b6a0:	603a      	str	r2, [r7, #0]
  return result;
 800b6a2:	683a      	ldr	r2, [r7, #0]
 800b6a4:	fab2 f282 	clz	r2, r2
 800b6a8:	b2d2      	uxtb	r2, r2
 800b6aa:	40d3      	lsrs	r3, r2
 800b6ac:	4a04      	ldr	r2, [pc, #16]	; (800b6c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800b6ae:	5cd3      	ldrb	r3, [r2, r3]
 800b6b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}
 800b6bc:	40023800 	.word	0x40023800
 800b6c0:	0800fbe0 	.word	0x0800fbe0

0800b6c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800b6ca:	f7ff ffcf 	bl	800b66c <HAL_RCC_GetHCLKFreq>
 800b6ce:	4601      	mov	r1, r0
 800b6d0:	4b0b      	ldr	r3, [pc, #44]	; (800b700 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b6d8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800b6dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	fa92 f2a2 	rbit	r2, r2
 800b6e4:	603a      	str	r2, [r7, #0]
  return result;
 800b6e6:	683a      	ldr	r2, [r7, #0]
 800b6e8:	fab2 f282 	clz	r2, r2
 800b6ec:	b2d2      	uxtb	r2, r2
 800b6ee:	40d3      	lsrs	r3, r2
 800b6f0:	4a04      	ldr	r2, [pc, #16]	; (800b704 <HAL_RCC_GetPCLK2Freq+0x40>)
 800b6f2:	5cd3      	ldrb	r3, [r2, r3]
 800b6f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	40023800 	.word	0x40023800
 800b704:	0800fbe0 	.word	0x0800fbe0

0800b708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d101      	bne.n	800b71a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e01d      	b.n	800b756 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d106      	bne.n	800b734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7fc f982 	bl	8007a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2202      	movs	r2, #2
 800b738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	3304      	adds	r3, #4
 800b744:	4619      	mov	r1, r3
 800b746:	4610      	mov	r0, r2
 800b748:	f000 fb74 	bl	800be34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b75e:	b480      	push	{r7}
 800b760:	b085      	sub	sp, #20
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2202      	movs	r2, #2
 800b76a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f003 0307 	and.w	r3, r3, #7
 800b778:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b06      	cmp	r3, #6
 800b77e:	d007      	beq.n	800b790 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681a      	ldr	r2, [r3, #0]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f042 0201 	orr.w	r2, r2, #1
 800b78e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bc80      	pop	{r7}
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b085      	sub	sp, #20
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f042 0201 	orr.w	r2, r2, #1
 800b7ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b06      	cmp	r3, #6
 800b7cc:	d007      	beq.n	800b7de <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f042 0201 	orr.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7de:	2300      	movs	r3, #0
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bc80      	pop	{r7}
 800b7e8:	4770      	bx	lr

0800b7ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b082      	sub	sp, #8
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e01d      	b.n	800b838 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b802:	b2db      	uxtb	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	d106      	bne.n	800b816 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f000 f815 	bl	800b840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2202      	movs	r2, #2
 800b81a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	3304      	adds	r3, #4
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	f000 fb03 	bl	800be34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}

0800b840 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bc80      	pop	{r7}
 800b850:	4770      	bx	lr
	...

0800b854 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2201      	movs	r2, #1
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	4618      	mov	r0, r3
 800b868:	f000 fdc4 	bl	800c3f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a15      	ldr	r2, [pc, #84]	; (800b8c8 <HAL_TIM_PWM_Start+0x74>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d004      	beq.n	800b880 <HAL_TIM_PWM_Start+0x2c>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a14      	ldr	r2, [pc, #80]	; (800b8cc <HAL_TIM_PWM_Start+0x78>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d101      	bne.n	800b884 <HAL_TIM_PWM_Start+0x30>
 800b880:	2301      	movs	r3, #1
 800b882:	e000      	b.n	800b886 <HAL_TIM_PWM_Start+0x32>
 800b884:	2300      	movs	r3, #0
 800b886:	2b00      	cmp	r3, #0
 800b888:	d007      	beq.n	800b89a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	f003 0307 	and.w	r3, r3, #7
 800b8a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2b06      	cmp	r3, #6
 800b8aa:	d007      	beq.n	800b8bc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f042 0201 	orr.w	r2, r2, #1
 800b8ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	40010000 	.word	0x40010000
 800b8cc:	40010400 	.word	0x40010400

0800b8d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	f003 0302 	and.w	r3, r3, #2
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d122      	bne.n	800b92c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f003 0302 	and.w	r3, r3, #2
 800b8f0:	2b02      	cmp	r3, #2
 800b8f2:	d11b      	bne.n	800b92c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f06f 0202 	mvn.w	r2, #2
 800b8fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 fa73 	bl	800bdfe <HAL_TIM_IC_CaptureCallback>
 800b918:	e005      	b.n	800b926 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fa66 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 fa75 	bl	800be10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	f003 0304 	and.w	r3, r3, #4
 800b936:	2b04      	cmp	r3, #4
 800b938:	d122      	bne.n	800b980 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f003 0304 	and.w	r3, r3, #4
 800b944:	2b04      	cmp	r3, #4
 800b946:	d11b      	bne.n	800b980 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f06f 0204 	mvn.w	r2, #4
 800b950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2202      	movs	r2, #2
 800b956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	699b      	ldr	r3, [r3, #24]
 800b95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fa49 	bl	800bdfe <HAL_TIM_IC_CaptureCallback>
 800b96c:	e005      	b.n	800b97a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa3c 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 fa4b 	bl	800be10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	2b08      	cmp	r3, #8
 800b98c:	d122      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f003 0308 	and.w	r3, r3, #8
 800b998:	2b08      	cmp	r3, #8
 800b99a:	d11b      	bne.n	800b9d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f06f 0208 	mvn.w	r2, #8
 800b9a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2204      	movs	r2, #4
 800b9aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	69db      	ldr	r3, [r3, #28]
 800b9b2:	f003 0303 	and.w	r3, r3, #3
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d003      	beq.n	800b9c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fa1f 	bl	800bdfe <HAL_TIM_IC_CaptureCallback>
 800b9c0:	e005      	b.n	800b9ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 fa12 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 fa21 	bl	800be10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	f003 0310 	and.w	r3, r3, #16
 800b9de:	2b10      	cmp	r3, #16
 800b9e0:	d122      	bne.n	800ba28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68db      	ldr	r3, [r3, #12]
 800b9e8:	f003 0310 	and.w	r3, r3, #16
 800b9ec:	2b10      	cmp	r3, #16
 800b9ee:	d11b      	bne.n	800ba28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f06f 0210 	mvn.w	r2, #16
 800b9f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2208      	movs	r2, #8
 800b9fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	69db      	ldr	r3, [r3, #28]
 800ba06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 f9f5 	bl	800bdfe <HAL_TIM_IC_CaptureCallback>
 800ba14:	e005      	b.n	800ba22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 f9e8 	bl	800bdec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 f9f7 	bl	800be10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d10e      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	68db      	ldr	r3, [r3, #12]
 800ba3c:	f003 0301 	and.w	r3, r3, #1
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d107      	bne.n	800ba54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f06f 0201 	mvn.w	r2, #1
 800ba4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 f9c3 	bl	800bdda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba5e:	2b80      	cmp	r3, #128	; 0x80
 800ba60:	d10e      	bne.n	800ba80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba6c:	2b80      	cmp	r3, #128	; 0x80
 800ba6e:	d107      	bne.n	800ba80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 fd7c 	bl	800c578 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	691b      	ldr	r3, [r3, #16]
 800ba86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba8a:	2b40      	cmp	r3, #64	; 0x40
 800ba8c:	d10e      	bne.n	800baac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	68db      	ldr	r3, [r3, #12]
 800ba94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba98:	2b40      	cmp	r3, #64	; 0x40
 800ba9a:	d107      	bne.n	800baac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800baa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f9bb 	bl	800be22 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	f003 0320 	and.w	r3, r3, #32
 800bab6:	2b20      	cmp	r3, #32
 800bab8:	d10e      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	f003 0320 	and.w	r3, r3, #32
 800bac4:	2b20      	cmp	r3, #32
 800bac6:	d107      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f06f 0220 	mvn.w	r2, #32
 800bad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fd47 	bl	800c566 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bad8:	bf00      	nop
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d101      	bne.n	800bafa <HAL_TIM_PWM_ConfigChannel+0x1a>
 800baf6:	2302      	movs	r3, #2
 800baf8:	e0b4      	b.n	800bc64 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2201      	movs	r2, #1
 800bafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2202      	movs	r2, #2
 800bb06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2b0c      	cmp	r3, #12
 800bb0e:	f200 809f 	bhi.w	800bc50 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bb12:	a201      	add	r2, pc, #4	; (adr r2, 800bb18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bb14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb18:	0800bb4d 	.word	0x0800bb4d
 800bb1c:	0800bc51 	.word	0x0800bc51
 800bb20:	0800bc51 	.word	0x0800bc51
 800bb24:	0800bc51 	.word	0x0800bc51
 800bb28:	0800bb8d 	.word	0x0800bb8d
 800bb2c:	0800bc51 	.word	0x0800bc51
 800bb30:	0800bc51 	.word	0x0800bc51
 800bb34:	0800bc51 	.word	0x0800bc51
 800bb38:	0800bbcf 	.word	0x0800bbcf
 800bb3c:	0800bc51 	.word	0x0800bc51
 800bb40:	0800bc51 	.word	0x0800bc51
 800bb44:	0800bc51 	.word	0x0800bc51
 800bb48:	0800bc0f 	.word	0x0800bc0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 fa0c 	bl	800bf70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	699a      	ldr	r2, [r3, #24]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f042 0208 	orr.w	r2, r2, #8
 800bb66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	699a      	ldr	r2, [r3, #24]
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f022 0204 	bic.w	r2, r2, #4
 800bb76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6999      	ldr	r1, [r3, #24]
 800bb7e:	68bb      	ldr	r3, [r7, #8]
 800bb80:	691a      	ldr	r2, [r3, #16]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	430a      	orrs	r2, r1
 800bb88:	619a      	str	r2, [r3, #24]
      break;
 800bb8a:	e062      	b.n	800bc52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	68b9      	ldr	r1, [r7, #8]
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 fa5c 	bl	800c050 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	699a      	ldr	r2, [r3, #24]
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	699a      	ldr	r2, [r3, #24]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	6999      	ldr	r1, [r3, #24]
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	021a      	lsls	r2, r3, #8
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	619a      	str	r2, [r3, #24]
      break;
 800bbcc:	e041      	b.n	800bc52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 faaf 	bl	800c138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	69da      	ldr	r2, [r3, #28]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f042 0208 	orr.w	r2, r2, #8
 800bbe8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	69da      	ldr	r2, [r3, #28]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f022 0204 	bic.w	r2, r2, #4
 800bbf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69d9      	ldr	r1, [r3, #28]
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	691a      	ldr	r2, [r3, #16]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	430a      	orrs	r2, r1
 800bc0a:	61da      	str	r2, [r3, #28]
      break;
 800bc0c:	e021      	b.n	800bc52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68b9      	ldr	r1, [r7, #8]
 800bc14:	4618      	mov	r0, r3
 800bc16:	f000 fb03 	bl	800c220 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	69da      	ldr	r2, [r3, #28]
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	69da      	ldr	r2, [r3, #28]
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	69d9      	ldr	r1, [r3, #28]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	691b      	ldr	r3, [r3, #16]
 800bc44:	021a      	lsls	r2, r3, #8
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	430a      	orrs	r2, r1
 800bc4c:	61da      	str	r2, [r3, #28]
      break;
 800bc4e:	e000      	b.n	800bc52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bc50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc62:	2300      	movs	r3, #0
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3710      	adds	r7, #16
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d101      	bne.n	800bc84 <HAL_TIM_ConfigClockSource+0x18>
 800bc80:	2302      	movs	r3, #2
 800bc82:	e0a6      	b.n	800bdd2 <HAL_TIM_ConfigClockSource+0x166>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2202      	movs	r2, #2
 800bc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bca2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bcaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68fa      	ldr	r2, [r7, #12]
 800bcb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2b40      	cmp	r3, #64	; 0x40
 800bcba:	d067      	beq.n	800bd8c <HAL_TIM_ConfigClockSource+0x120>
 800bcbc:	2b40      	cmp	r3, #64	; 0x40
 800bcbe:	d80b      	bhi.n	800bcd8 <HAL_TIM_ConfigClockSource+0x6c>
 800bcc0:	2b10      	cmp	r3, #16
 800bcc2:	d073      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x140>
 800bcc4:	2b10      	cmp	r3, #16
 800bcc6:	d802      	bhi.n	800bcce <HAL_TIM_ConfigClockSource+0x62>
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d06f      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bccc:	e078      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bcce:	2b20      	cmp	r3, #32
 800bcd0:	d06c      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x140>
 800bcd2:	2b30      	cmp	r3, #48	; 0x30
 800bcd4:	d06a      	beq.n	800bdac <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bcd6:	e073      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bcd8:	2b70      	cmp	r3, #112	; 0x70
 800bcda:	d00d      	beq.n	800bcf8 <HAL_TIM_ConfigClockSource+0x8c>
 800bcdc:	2b70      	cmp	r3, #112	; 0x70
 800bcde:	d804      	bhi.n	800bcea <HAL_TIM_ConfigClockSource+0x7e>
 800bce0:	2b50      	cmp	r3, #80	; 0x50
 800bce2:	d033      	beq.n	800bd4c <HAL_TIM_ConfigClockSource+0xe0>
 800bce4:	2b60      	cmp	r3, #96	; 0x60
 800bce6:	d041      	beq.n	800bd6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bce8:	e06a      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bcea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcee:	d066      	beq.n	800bdbe <HAL_TIM_ConfigClockSource+0x152>
 800bcf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcf4:	d017      	beq.n	800bd26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bcf6:	e063      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6818      	ldr	r0, [r3, #0]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	6899      	ldr	r1, [r3, #8]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	685a      	ldr	r2, [r3, #4]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	f000 fb55 	bl	800c3b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	689b      	ldr	r3, [r3, #8]
 800bd12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	609a      	str	r2, [r3, #8]
      break;
 800bd24:	e04c      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6818      	ldr	r0, [r3, #0]
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	6899      	ldr	r1, [r3, #8]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	685a      	ldr	r2, [r3, #4]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	f000 fb3e 	bl	800c3b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689a      	ldr	r2, [r3, #8]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd48:	609a      	str	r2, [r3, #8]
      break;
 800bd4a:	e039      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6818      	ldr	r0, [r3, #0]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	6859      	ldr	r1, [r3, #4]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	f000 fab5 	bl	800c2c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2150      	movs	r1, #80	; 0x50
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 fb0c 	bl	800c382 <TIM_ITRx_SetConfig>
      break;
 800bd6a:	e029      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	6859      	ldr	r1, [r3, #4]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	f000 fad3 	bl	800c324 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2160      	movs	r1, #96	; 0x60
 800bd84:	4618      	mov	r0, r3
 800bd86:	f000 fafc 	bl	800c382 <TIM_ITRx_SetConfig>
      break;
 800bd8a:	e019      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	6818      	ldr	r0, [r3, #0]
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	6859      	ldr	r1, [r3, #4]
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	f000 fa95 	bl	800c2c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	2140      	movs	r1, #64	; 0x40
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 faec 	bl	800c382 <TIM_ITRx_SetConfig>
      break;
 800bdaa:	e009      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f000 fae3 	bl	800c382 <TIM_ITRx_SetConfig>
      break;
 800bdbc:	e000      	b.n	800bdc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800bdbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3710      	adds	r7, #16
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bde2:	bf00      	nop
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bc80      	pop	{r7}
 800bdea:	4770      	bx	lr

0800bdec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdf4:	bf00      	nop
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bc80      	pop	{r7}
 800bdfc:	4770      	bx	lr

0800bdfe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be06:	bf00      	nop
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bc80      	pop	{r7}
 800be0e:	4770      	bx	lr

0800be10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be10:	b480      	push	{r7}
 800be12:	b083      	sub	sp, #12
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be18:	bf00      	nop
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bc80      	pop	{r7}
 800be20:	4770      	bx	lr

0800be22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be2a:	bf00      	nop
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	bc80      	pop	{r7}
 800be32:	4770      	bx	lr

0800be34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a3f      	ldr	r2, [pc, #252]	; (800bf44 <TIM_Base_SetConfig+0x110>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d013      	beq.n	800be74 <TIM_Base_SetConfig+0x40>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be52:	d00f      	beq.n	800be74 <TIM_Base_SetConfig+0x40>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	4a3c      	ldr	r2, [pc, #240]	; (800bf48 <TIM_Base_SetConfig+0x114>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d00b      	beq.n	800be74 <TIM_Base_SetConfig+0x40>
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a3b      	ldr	r2, [pc, #236]	; (800bf4c <TIM_Base_SetConfig+0x118>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d007      	beq.n	800be74 <TIM_Base_SetConfig+0x40>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a3a      	ldr	r2, [pc, #232]	; (800bf50 <TIM_Base_SetConfig+0x11c>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d003      	beq.n	800be74 <TIM_Base_SetConfig+0x40>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a39      	ldr	r2, [pc, #228]	; (800bf54 <TIM_Base_SetConfig+0x120>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d108      	bne.n	800be86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4313      	orrs	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a2e      	ldr	r2, [pc, #184]	; (800bf44 <TIM_Base_SetConfig+0x110>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d02b      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be94:	d027      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a2b      	ldr	r2, [pc, #172]	; (800bf48 <TIM_Base_SetConfig+0x114>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d023      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a2a      	ldr	r2, [pc, #168]	; (800bf4c <TIM_Base_SetConfig+0x118>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d01f      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a29      	ldr	r2, [pc, #164]	; (800bf50 <TIM_Base_SetConfig+0x11c>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d01b      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	4a28      	ldr	r2, [pc, #160]	; (800bf54 <TIM_Base_SetConfig+0x120>)
 800beb2:	4293      	cmp	r3, r2
 800beb4:	d017      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4a27      	ldr	r2, [pc, #156]	; (800bf58 <TIM_Base_SetConfig+0x124>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d013      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4a26      	ldr	r2, [pc, #152]	; (800bf5c <TIM_Base_SetConfig+0x128>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d00f      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a25      	ldr	r2, [pc, #148]	; (800bf60 <TIM_Base_SetConfig+0x12c>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00b      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a24      	ldr	r2, [pc, #144]	; (800bf64 <TIM_Base_SetConfig+0x130>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d007      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	4a23      	ldr	r2, [pc, #140]	; (800bf68 <TIM_Base_SetConfig+0x134>)
 800beda:	4293      	cmp	r3, r2
 800bedc:	d003      	beq.n	800bee6 <TIM_Base_SetConfig+0xb2>
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a22      	ldr	r2, [pc, #136]	; (800bf6c <TIM_Base_SetConfig+0x138>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d108      	bne.n	800bef8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	68fa      	ldr	r2, [r7, #12]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	695b      	ldr	r3, [r3, #20]
 800bf02:	4313      	orrs	r3, r2
 800bf04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	68fa      	ldr	r2, [r7, #12]
 800bf0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	689a      	ldr	r2, [r3, #8]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4a09      	ldr	r2, [pc, #36]	; (800bf44 <TIM_Base_SetConfig+0x110>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d003      	beq.n	800bf2c <TIM_Base_SetConfig+0xf8>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a0b      	ldr	r2, [pc, #44]	; (800bf54 <TIM_Base_SetConfig+0x120>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d103      	bne.n	800bf34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	691a      	ldr	r2, [r3, #16]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	615a      	str	r2, [r3, #20]
}
 800bf3a:	bf00      	nop
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bc80      	pop	{r7}
 800bf42:	4770      	bx	lr
 800bf44:	40010000 	.word	0x40010000
 800bf48:	40000400 	.word	0x40000400
 800bf4c:	40000800 	.word	0x40000800
 800bf50:	40000c00 	.word	0x40000c00
 800bf54:	40010400 	.word	0x40010400
 800bf58:	40014000 	.word	0x40014000
 800bf5c:	40014400 	.word	0x40014400
 800bf60:	40014800 	.word	0x40014800
 800bf64:	40001800 	.word	0x40001800
 800bf68:	40001c00 	.word	0x40001c00
 800bf6c:	40002000 	.word	0x40002000

0800bf70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b087      	sub	sp, #28
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	f023 0201 	bic.w	r2, r3, #1
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	685b      	ldr	r3, [r3, #4]
 800bf90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	699b      	ldr	r3, [r3, #24]
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f023 0303 	bic.w	r3, r3, #3
 800bfa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bfb2:	697b      	ldr	r3, [r7, #20]
 800bfb4:	f023 0302 	bic.w	r3, r3, #2
 800bfb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	697a      	ldr	r2, [r7, #20]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	4a20      	ldr	r2, [pc, #128]	; (800c048 <TIM_OC1_SetConfig+0xd8>)
 800bfc8:	4293      	cmp	r3, r2
 800bfca:	d003      	beq.n	800bfd4 <TIM_OC1_SetConfig+0x64>
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	4a1f      	ldr	r2, [pc, #124]	; (800c04c <TIM_OC1_SetConfig+0xdc>)
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	d10c      	bne.n	800bfee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	f023 0308 	bic.w	r3, r3, #8
 800bfda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	697a      	ldr	r2, [r7, #20]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f023 0304 	bic.w	r3, r3, #4
 800bfec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	4a15      	ldr	r2, [pc, #84]	; (800c048 <TIM_OC1_SetConfig+0xd8>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d003      	beq.n	800bffe <TIM_OC1_SetConfig+0x8e>
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4a14      	ldr	r2, [pc, #80]	; (800c04c <TIM_OC1_SetConfig+0xdc>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d111      	bne.n	800c022 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c00c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	695b      	ldr	r3, [r3, #20]
 800c012:	693a      	ldr	r2, [r7, #16]
 800c014:	4313      	orrs	r3, r2
 800c016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	693a      	ldr	r2, [r7, #16]
 800c01e:	4313      	orrs	r3, r2
 800c020:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	697a      	ldr	r2, [r7, #20]
 800c03a:	621a      	str	r2, [r3, #32]
}
 800c03c:	bf00      	nop
 800c03e:	371c      	adds	r7, #28
 800c040:	46bd      	mov	sp, r7
 800c042:	bc80      	pop	{r7}
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	40010000 	.word	0x40010000
 800c04c:	40010400 	.word	0x40010400

0800c050 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6a1b      	ldr	r3, [r3, #32]
 800c05e:	f023 0210 	bic.w	r2, r3, #16
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a1b      	ldr	r3, [r3, #32]
 800c06a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c07e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	021b      	lsls	r3, r3, #8
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	4313      	orrs	r3, r2
 800c092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f023 0320 	bic.w	r3, r3, #32
 800c09a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	011b      	lsls	r3, r3, #4
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a21      	ldr	r2, [pc, #132]	; (800c130 <TIM_OC2_SetConfig+0xe0>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d003      	beq.n	800c0b8 <TIM_OC2_SetConfig+0x68>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a20      	ldr	r2, [pc, #128]	; (800c134 <TIM_OC2_SetConfig+0xe4>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d10d      	bne.n	800c0d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	011b      	lsls	r3, r3, #4
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c0d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a16      	ldr	r2, [pc, #88]	; (800c130 <TIM_OC2_SetConfig+0xe0>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d003      	beq.n	800c0e4 <TIM_OC2_SetConfig+0x94>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a15      	ldr	r2, [pc, #84]	; (800c134 <TIM_OC2_SetConfig+0xe4>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d113      	bne.n	800c10c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	4313      	orrs	r3, r2
 800c10a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	621a      	str	r2, [r3, #32]
}
 800c126:	bf00      	nop
 800c128:	371c      	adds	r7, #28
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bc80      	pop	{r7}
 800c12e:	4770      	bx	lr
 800c130:	40010000 	.word	0x40010000
 800c134:	40010400 	.word	0x40010400

0800c138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c138:	b480      	push	{r7}
 800c13a:	b087      	sub	sp, #28
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a1b      	ldr	r3, [r3, #32]
 800c146:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6a1b      	ldr	r3, [r3, #32]
 800c152:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	4313      	orrs	r3, r2
 800c178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	697a      	ldr	r2, [r7, #20]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a21      	ldr	r2, [pc, #132]	; (800c218 <TIM_OC3_SetConfig+0xe0>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <TIM_OC3_SetConfig+0x66>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a20      	ldr	r2, [pc, #128]	; (800c21c <TIM_OC3_SetConfig+0xe4>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d10d      	bne.n	800c1ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c1a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	021b      	lsls	r3, r3, #8
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c1b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a16      	ldr	r2, [pc, #88]	; (800c218 <TIM_OC3_SetConfig+0xe0>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d003      	beq.n	800c1ca <TIM_OC3_SetConfig+0x92>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a15      	ldr	r2, [pc, #84]	; (800c21c <TIM_OC3_SetConfig+0xe4>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d113      	bne.n	800c1f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c1d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	011b      	lsls	r3, r3, #4
 800c1e0:	693a      	ldr	r2, [r7, #16]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	699b      	ldr	r3, [r3, #24]
 800c1ea:	011b      	lsls	r3, r3, #4
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	685a      	ldr	r2, [r3, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	621a      	str	r2, [r3, #32]
}
 800c20c:	bf00      	nop
 800c20e:	371c      	adds	r7, #28
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	40010000 	.word	0x40010000
 800c21c:	40010400 	.word	0x40010400

0800c220 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c220:	b480      	push	{r7}
 800c222:	b087      	sub	sp, #28
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6a1b      	ldr	r3, [r3, #32]
 800c23a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	021b      	lsls	r3, r3, #8
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	4313      	orrs	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c26a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	031b      	lsls	r3, r3, #12
 800c272:	693a      	ldr	r2, [r7, #16]
 800c274:	4313      	orrs	r3, r2
 800c276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4a11      	ldr	r2, [pc, #68]	; (800c2c0 <TIM_OC4_SetConfig+0xa0>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d003      	beq.n	800c288 <TIM_OC4_SetConfig+0x68>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4a10      	ldr	r2, [pc, #64]	; (800c2c4 <TIM_OC4_SetConfig+0xa4>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d109      	bne.n	800c29c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c28e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	695b      	ldr	r3, [r3, #20]
 800c294:	019b      	lsls	r3, r3, #6
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	4313      	orrs	r3, r2
 800c29a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	697a      	ldr	r2, [r7, #20]
 800c2a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68fa      	ldr	r2, [r7, #12]
 800c2a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	693a      	ldr	r2, [r7, #16]
 800c2b4:	621a      	str	r2, [r3, #32]
}
 800c2b6:	bf00      	nop
 800c2b8:	371c      	adds	r7, #28
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bc80      	pop	{r7}
 800c2be:	4770      	bx	lr
 800c2c0:	40010000 	.word	0x40010000
 800c2c4:	40010400 	.word	0x40010400

0800c2c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b087      	sub	sp, #28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	f023 0201 	bic.w	r2, r3, #1
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f023 030a 	bic.w	r3, r3, #10
 800c304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	621a      	str	r2, [r3, #32]
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	bc80      	pop	{r7}
 800c322:	4770      	bx	lr

0800c324 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c324:	b480      	push	{r7}
 800c326:	b087      	sub	sp, #28
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6a1b      	ldr	r3, [r3, #32]
 800c334:	f023 0210 	bic.w	r2, r3, #16
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	699b      	ldr	r3, [r3, #24]
 800c340:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6a1b      	ldr	r3, [r3, #32]
 800c346:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c34e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	031b      	lsls	r3, r3, #12
 800c354:	697a      	ldr	r2, [r7, #20]
 800c356:	4313      	orrs	r3, r2
 800c358:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c360:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	693a      	ldr	r2, [r7, #16]
 800c368:	4313      	orrs	r3, r2
 800c36a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	697a      	ldr	r2, [r7, #20]
 800c370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	621a      	str	r2, [r3, #32]
}
 800c378:	bf00      	nop
 800c37a:	371c      	adds	r7, #28
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bc80      	pop	{r7}
 800c380:	4770      	bx	lr

0800c382 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c382:	b480      	push	{r7}
 800c384:	b085      	sub	sp, #20
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	689b      	ldr	r3, [r3, #8]
 800c390:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c398:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c39a:	683a      	ldr	r2, [r7, #0]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	f043 0307 	orr.w	r3, r3, #7
 800c3a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	609a      	str	r2, [r3, #8]
}
 800c3ac:	bf00      	nop
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bc80      	pop	{r7}
 800c3b4:	4770      	bx	lr

0800c3b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3b6:	b480      	push	{r7}
 800c3b8:	b087      	sub	sp, #28
 800c3ba:	af00      	add	r7, sp, #0
 800c3bc:	60f8      	str	r0, [r7, #12]
 800c3be:	60b9      	str	r1, [r7, #8]
 800c3c0:	607a      	str	r2, [r7, #4]
 800c3c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	021a      	lsls	r2, r3, #8
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	431a      	orrs	r2, r3
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	697a      	ldr	r2, [r7, #20]
 800c3e8:	609a      	str	r2, [r3, #8]
}
 800c3ea:	bf00      	nop
 800c3ec:	371c      	adds	r7, #28
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bc80      	pop	{r7}
 800c3f2:	4770      	bx	lr

0800c3f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c3f4:	b480      	push	{r7}
 800c3f6:	b087      	sub	sp, #28
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	60f8      	str	r0, [r7, #12]
 800c3fc:	60b9      	str	r1, [r7, #8]
 800c3fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	f003 031f 	and.w	r3, r3, #31
 800c406:	2201      	movs	r2, #1
 800c408:	fa02 f303 	lsl.w	r3, r2, r3
 800c40c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	6a1a      	ldr	r2, [r3, #32]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	43db      	mvns	r3, r3
 800c416:	401a      	ands	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6a1a      	ldr	r2, [r3, #32]
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	f003 031f 	and.w	r3, r3, #31
 800c426:	6879      	ldr	r1, [r7, #4]
 800c428:	fa01 f303 	lsl.w	r3, r1, r3
 800c42c:	431a      	orrs	r2, r3
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	621a      	str	r2, [r3, #32]
}
 800c432:	bf00      	nop
 800c434:	371c      	adds	r7, #28
 800c436:	46bd      	mov	sp, r7
 800c438:	bc80      	pop	{r7}
 800c43a:	4770      	bx	lr

0800c43c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d101      	bne.n	800c454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c450:	2302      	movs	r3, #2
 800c452:	e032      	b.n	800c4ba <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2202      	movs	r2, #2
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	689b      	ldr	r3, [r3, #8]
 800c472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c47a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	4313      	orrs	r3, r2
 800c484:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c48c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	4313      	orrs	r3, r2
 800c496:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	68ba      	ldr	r2, [r7, #8]
 800c4a6:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4b8:	2300      	movs	r3, #0
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3714      	adds	r7, #20
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bc80      	pop	{r7}
 800c4c2:	4770      	bx	lr

0800c4c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d101      	bne.n	800c4e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c4dc:	2302      	movs	r3, #2
 800c4de:	e03d      	b.n	800c55c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	4313      	orrs	r3, r2
 800c502:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	4313      	orrs	r3, r2
 800c510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4313      	orrs	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	4313      	orrs	r3, r2
 800c52c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	695b      	ldr	r3, [r3, #20]
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	69db      	ldr	r3, [r3, #28]
 800c546:	4313      	orrs	r3, r2
 800c548:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	bc80      	pop	{r7}
 800c564:	4770      	bx	lr

0800c566 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c566:	b480      	push	{r7}
 800c568:	b083      	sub	sp, #12
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c56e:	bf00      	nop
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	bc80      	pop	{r7}
 800c576:	4770      	bx	lr

0800c578 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	bc80      	pop	{r7}
 800c588:	4770      	bx	lr

0800c58a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b082      	sub	sp, #8
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e03f      	b.n	800c61c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d106      	bne.n	800c5b6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f7fb fb47 	bl	8007c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2224      	movs	r2, #36	; 0x24
 800c5ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	68da      	ldr	r2, [r3, #12]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5cc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 faa6 	bl	800cb20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	691a      	ldr	r2, [r3, #16]
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	695a      	ldr	r2, [r3, #20]
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5f2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68da      	ldr	r2, [r3, #12]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c602:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2200      	movs	r2, #0
 800c608:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2220      	movs	r2, #32
 800c60e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2220      	movs	r2, #32
 800c616:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c624:	b480      	push	{r7}
 800c626:	b085      	sub	sp, #20
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	4613      	mov	r3, r2
 800c630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b20      	cmp	r3, #32
 800c63c:	d130      	bne.n	800c6a0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d002      	beq.n	800c64a <HAL_UART_Transmit_IT+0x26>
 800c644:	88fb      	ldrh	r3, [r7, #6]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e029      	b.n	800c6a2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c654:	2b01      	cmp	r3, #1
 800c656:	d101      	bne.n	800c65c <HAL_UART_Transmit_IT+0x38>
 800c658:	2302      	movs	r3, #2
 800c65a:	e022      	b.n	800c6a2 <HAL_UART_Transmit_IT+0x7e>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	88fa      	ldrh	r2, [r7, #6]
 800c66e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	88fa      	ldrh	r2, [r7, #6]
 800c674:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2200      	movs	r2, #0
 800c67a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2221      	movs	r2, #33	; 0x21
 800c680:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68da      	ldr	r2, [r3, #12]
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c69a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	e000      	b.n	800c6a2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800c6a0:	2302      	movs	r3, #2
  }
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3714      	adds	r7, #20
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bc80      	pop	{r7}
 800c6aa:	4770      	bx	lr

0800c6ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b088      	sub	sp, #32
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	695b      	ldr	r3, [r3, #20]
 800c6ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c6d4:	69fb      	ldr	r3, [r7, #28]
 800c6d6:	f003 030f 	and.w	r3, r3, #15
 800c6da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10d      	bne.n	800c6fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	f003 0320 	and.w	r3, r3, #32
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d008      	beq.n	800c6fe <HAL_UART_IRQHandler+0x52>
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	f003 0320 	and.w	r3, r3, #32
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f991 	bl	800ca1e <UART_Receive_IT>
      return;
 800c6fc:	e0d1      	b.n	800c8a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b00      	cmp	r3, #0
 800c702:	f000 80b0 	beq.w	800c866 <HAL_UART_IRQHandler+0x1ba>
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d105      	bne.n	800c71c <HAL_UART_IRQHandler+0x70>
 800c710:	69bb      	ldr	r3, [r7, #24]
 800c712:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 80a5 	beq.w	800c866 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	d00a      	beq.n	800c73c <HAL_UART_IRQHandler+0x90>
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d005      	beq.n	800c73c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c734:	f043 0201 	orr.w	r2, r3, #1
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	2b00      	cmp	r3, #0
 800c744:	d00a      	beq.n	800c75c <HAL_UART_IRQHandler+0xb0>
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	f003 0301 	and.w	r3, r3, #1
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c754:	f043 0202 	orr.w	r2, r3, #2
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	f003 0302 	and.w	r3, r3, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <HAL_UART_IRQHandler+0xd0>
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	f003 0301 	and.w	r3, r3, #1
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d005      	beq.n	800c77c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c774:	f043 0204 	orr.w	r2, r3, #4
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	f003 0308 	and.w	r3, r3, #8
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00f      	beq.n	800c7a6 <HAL_UART_IRQHandler+0xfa>
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	f003 0320 	and.w	r3, r3, #32
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d104      	bne.n	800c79a <HAL_UART_IRQHandler+0xee>
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	f003 0301 	and.w	r3, r3, #1
 800c796:	2b00      	cmp	r3, #0
 800c798:	d005      	beq.n	800c7a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c79e:	f043 0208 	orr.w	r2, r3, #8
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d078      	beq.n	800c8a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7ae:	69fb      	ldr	r3, [r7, #28]
 800c7b0:	f003 0320 	and.w	r3, r3, #32
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d007      	beq.n	800c7c8 <HAL_UART_IRQHandler+0x11c>
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	f003 0320 	and.w	r3, r3, #32
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d002      	beq.n	800c7c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f92b 	bl	800ca1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	695b      	ldr	r3, [r3, #20]
 800c7ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d2:	2b40      	cmp	r3, #64	; 0x40
 800c7d4:	bf0c      	ite	eq
 800c7d6:	2301      	moveq	r3, #1
 800c7d8:	2300      	movne	r3, #0
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7e2:	f003 0308 	and.w	r3, r3, #8
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <HAL_UART_IRQHandler+0x144>
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d031      	beq.n	800c854 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f876 	bl	800c8e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c800:	2b40      	cmp	r3, #64	; 0x40
 800c802:	d123      	bne.n	800c84c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	695a      	ldr	r2, [r3, #20]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c812:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d013      	beq.n	800c844 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c820:	4a21      	ldr	r2, [pc, #132]	; (800c8a8 <HAL_UART_IRQHandler+0x1fc>)
 800c822:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c828:	4618      	mov	r0, r3
 800c82a:	f7fc ff67 	bl	80096fc <HAL_DMA_Abort_IT>
 800c82e:	4603      	mov	r3, r0
 800c830:	2b00      	cmp	r3, #0
 800c832:	d016      	beq.n	800c862 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c83e:	4610      	mov	r0, r2
 800c840:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c842:	e00e      	b.n	800c862 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f843 	bl	800c8d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c84a:	e00a      	b.n	800c862 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f83f 	bl	800c8d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c852:	e006      	b.n	800c862 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f83b 	bl	800c8d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800c860:	e01e      	b.n	800c8a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c862:	bf00      	nop
    return;
 800c864:	e01c      	b.n	800c8a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d008      	beq.n	800c882 <HAL_UART_IRQHandler+0x1d6>
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c876:	2b00      	cmp	r3, #0
 800c878:	d003      	beq.n	800c882 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f000 f862 	bl	800c944 <UART_Transmit_IT>
    return;
 800c880:	e00f      	b.n	800c8a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c882:	69fb      	ldr	r3, [r7, #28]
 800c884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00a      	beq.n	800c8a2 <HAL_UART_IRQHandler+0x1f6>
 800c88c:	69bb      	ldr	r3, [r7, #24]
 800c88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c892:	2b00      	cmp	r3, #0
 800c894:	d005      	beq.n	800c8a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f8a9 	bl	800c9ee <UART_EndTransmit_IT>
    return;
 800c89c:	bf00      	nop
 800c89e:	e000      	b.n	800c8a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 800c8a0:	bf00      	nop
  }
}
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	0800c91d 	.word	0x0800c91d

0800c8ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bc80      	pop	{r7}
 800c8bc:	4770      	bx	lr

0800c8be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b083      	sub	sp, #12
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bc80      	pop	{r7}
 800c8ce:	4770      	bx	lr

0800c8d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c8d8:	bf00      	nop
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	bc80      	pop	{r7}
 800c8e0:	4770      	bx	lr

0800c8e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c8f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	695a      	ldr	r2, [r3, #20]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 0201 	bic.w	r2, r2, #1
 800c908:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c912:	bf00      	nop
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	bc80      	pop	{r7}
 800c91a:	4770      	bx	lr

0800c91c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b084      	sub	sp, #16
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c928:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2200      	movs	r2, #0
 800c934:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f7ff ffca 	bl	800c8d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c93c:	bf00      	nop
 800c93e:	3710      	adds	r7, #16
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c952:	b2db      	uxtb	r3, r3
 800c954:	2b21      	cmp	r3, #33	; 0x21
 800c956:	d144      	bne.n	800c9e2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c960:	d11a      	bne.n	800c998 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a1b      	ldr	r3, [r3, #32]
 800c966:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	881b      	ldrh	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c976:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	691b      	ldr	r3, [r3, #16]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d105      	bne.n	800c98c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6a1b      	ldr	r3, [r3, #32]
 800c984:	1c9a      	adds	r2, r3, #2
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	621a      	str	r2, [r3, #32]
 800c98a:	e00e      	b.n	800c9aa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a1b      	ldr	r3, [r3, #32]
 800c990:	1c5a      	adds	r2, r3, #1
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	621a      	str	r2, [r3, #32]
 800c996:	e008      	b.n	800c9aa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6a1b      	ldr	r3, [r3, #32]
 800c99c:	1c59      	adds	r1, r3, #1
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	6211      	str	r1, [r2, #32]
 800c9a2:	781a      	ldrb	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d10f      	bne.n	800c9de <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	68da      	ldr	r2, [r3, #12]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68da      	ldr	r2, [r3, #12]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e000      	b.n	800c9e4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c9e2:	2302      	movs	r3, #2
  }
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3714      	adds	r7, #20
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bc80      	pop	{r7}
 800c9ec:	4770      	bx	lr

0800c9ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b082      	sub	sp, #8
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	68da      	ldr	r2, [r3, #12]
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	2220      	movs	r2, #32
 800ca0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7ff ff4c 	bl	800c8ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	2b22      	cmp	r3, #34	; 0x22
 800ca30:	d171      	bne.n	800cb16 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca3a:	d123      	bne.n	800ca84 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca40:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	691b      	ldr	r3, [r3, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10e      	bne.n	800ca68 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca56:	b29a      	uxth	r2, r3
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca60:	1c9a      	adds	r2, r3, #2
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	629a      	str	r2, [r3, #40]	; 0x28
 800ca66:	e029      	b.n	800cabc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	b29b      	uxth	r3, r3
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca7c:	1c5a      	adds	r2, r3, #1
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	629a      	str	r2, [r3, #40]	; 0x28
 800ca82:	e01b      	b.n	800cabc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	691b      	ldr	r3, [r3, #16]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10a      	bne.n	800caa2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6858      	ldr	r0, [r3, #4]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca96:	1c59      	adds	r1, r3, #1
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	6291      	str	r1, [r2, #40]	; 0x28
 800ca9c:	b2c2      	uxtb	r2, r0
 800ca9e:	701a      	strb	r2, [r3, #0]
 800caa0:	e00c      	b.n	800cabc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caae:	1c58      	adds	r0, r3, #1
 800cab0:	6879      	ldr	r1, [r7, #4]
 800cab2:	6288      	str	r0, [r1, #40]	; 0x28
 800cab4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cab8:	b2d2      	uxtb	r2, r2
 800caba:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	3b01      	subs	r3, #1
 800cac4:	b29b      	uxth	r3, r3
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	4619      	mov	r1, r3
 800caca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d120      	bne.n	800cb12 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68da      	ldr	r2, [r3, #12]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f022 0220 	bic.w	r2, r2, #32
 800cade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	68da      	ldr	r2, [r3, #12]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800caee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	695a      	ldr	r2, [r3, #20]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 0201 	bic.w	r2, r2, #1
 800cafe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2220      	movs	r2, #32
 800cb04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f7ff fed8 	bl	800c8be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e002      	b.n	800cb18 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	e000      	b.n	800cb18 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800cb16:	2302      	movs	r3, #2
  }
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	691b      	ldr	r3, [r3, #16]
 800cb2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	68da      	ldr	r2, [r3, #12]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	689a      	ldr	r2, [r3, #8]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	431a      	orrs	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	695b      	ldr	r3, [r3, #20]
 800cb4c:	431a      	orrs	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	68db      	ldr	r3, [r3, #12]
 800cb5c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cb60:	f023 030c 	bic.w	r3, r3, #12
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	6812      	ldr	r2, [r2, #0]
 800cb68:	68f9      	ldr	r1, [r7, #12]
 800cb6a:	430b      	orrs	r3, r1
 800cb6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	699a      	ldr	r2, [r3, #24]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	430a      	orrs	r2, r1
 800cb82:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	69db      	ldr	r3, [r3, #28]
 800cb88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb8c:	f040 80aa 	bne.w	800cce4 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	4aa9      	ldr	r2, [pc, #676]	; (800ce3c <UART_SetConfig+0x31c>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d004      	beq.n	800cba4 <UART_SetConfig+0x84>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	4aa8      	ldr	r2, [pc, #672]	; (800ce40 <UART_SetConfig+0x320>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d14f      	bne.n	800cc44 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cba4:	f7fe fd8e 	bl	800b6c4 <HAL_RCC_GetPCLK2Freq>
 800cba8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cbaa:	68ba      	ldr	r2, [r7, #8]
 800cbac:	4613      	mov	r3, r2
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	009a      	lsls	r2, r3, #2
 800cbb4:	441a      	add	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	005b      	lsls	r3, r3, #1
 800cbbc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc0:	4aa0      	ldr	r2, [pc, #640]	; (800ce44 <UART_SetConfig+0x324>)
 800cbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc6:	095b      	lsrs	r3, r3, #5
 800cbc8:	0119      	lsls	r1, r3, #4
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4413      	add	r3, r2
 800cbd2:	009a      	lsls	r2, r3, #2
 800cbd4:	441a      	add	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	fbb2 f2f3 	udiv	r2, r2, r3
 800cbe0:	4b98      	ldr	r3, [pc, #608]	; (800ce44 <UART_SetConfig+0x324>)
 800cbe2:	fba3 0302 	umull	r0, r3, r3, r2
 800cbe6:	095b      	lsrs	r3, r3, #5
 800cbe8:	2064      	movs	r0, #100	; 0x64
 800cbea:	fb00 f303 	mul.w	r3, r0, r3
 800cbee:	1ad3      	subs	r3, r2, r3
 800cbf0:	00db      	lsls	r3, r3, #3
 800cbf2:	3332      	adds	r3, #50	; 0x32
 800cbf4:	4a93      	ldr	r2, [pc, #588]	; (800ce44 <UART_SetConfig+0x324>)
 800cbf6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbfa:	095b      	lsrs	r3, r3, #5
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc02:	4419      	add	r1, r3
 800cc04:	68ba      	ldr	r2, [r7, #8]
 800cc06:	4613      	mov	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	4413      	add	r3, r2
 800cc0c:	009a      	lsls	r2, r3, #2
 800cc0e:	441a      	add	r2, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	005b      	lsls	r3, r3, #1
 800cc16:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc1a:	4b8a      	ldr	r3, [pc, #552]	; (800ce44 <UART_SetConfig+0x324>)
 800cc1c:	fba3 0302 	umull	r0, r3, r3, r2
 800cc20:	095b      	lsrs	r3, r3, #5
 800cc22:	2064      	movs	r0, #100	; 0x64
 800cc24:	fb00 f303 	mul.w	r3, r0, r3
 800cc28:	1ad3      	subs	r3, r2, r3
 800cc2a:	00db      	lsls	r3, r3, #3
 800cc2c:	3332      	adds	r3, #50	; 0x32
 800cc2e:	4a85      	ldr	r2, [pc, #532]	; (800ce44 <UART_SetConfig+0x324>)
 800cc30:	fba2 2303 	umull	r2, r3, r2, r3
 800cc34:	095b      	lsrs	r3, r3, #5
 800cc36:	f003 0207 	and.w	r2, r3, #7
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	440a      	add	r2, r1
 800cc40:	609a      	str	r2, [r3, #8]
 800cc42:	e0f7      	b.n	800ce34 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc44:	f7fe fd1c 	bl	800b680 <HAL_RCC_GetPCLK1Freq>
 800cc48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc4a:	68ba      	ldr	r2, [r7, #8]
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	009a      	lsls	r2, r3, #2
 800cc54:	441a      	add	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc60:	4a78      	ldr	r2, [pc, #480]	; (800ce44 <UART_SetConfig+0x324>)
 800cc62:	fba2 2303 	umull	r2, r3, r2, r3
 800cc66:	095b      	lsrs	r3, r3, #5
 800cc68:	0119      	lsls	r1, r3, #4
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	4613      	mov	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4413      	add	r3, r2
 800cc72:	009a      	lsls	r2, r3, #2
 800cc74:	441a      	add	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	005b      	lsls	r3, r3, #1
 800cc7c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc80:	4b70      	ldr	r3, [pc, #448]	; (800ce44 <UART_SetConfig+0x324>)
 800cc82:	fba3 0302 	umull	r0, r3, r3, r2
 800cc86:	095b      	lsrs	r3, r3, #5
 800cc88:	2064      	movs	r0, #100	; 0x64
 800cc8a:	fb00 f303 	mul.w	r3, r0, r3
 800cc8e:	1ad3      	subs	r3, r2, r3
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	3332      	adds	r3, #50	; 0x32
 800cc94:	4a6b      	ldr	r2, [pc, #428]	; (800ce44 <UART_SetConfig+0x324>)
 800cc96:	fba2 2303 	umull	r2, r3, r2, r3
 800cc9a:	095b      	lsrs	r3, r3, #5
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cca2:	4419      	add	r1, r3
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	4613      	mov	r3, r2
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	4413      	add	r3, r2
 800ccac:	009a      	lsls	r2, r3, #2
 800ccae:	441a      	add	r2, r3
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	fbb2 f2f3 	udiv	r2, r2, r3
 800ccba:	4b62      	ldr	r3, [pc, #392]	; (800ce44 <UART_SetConfig+0x324>)
 800ccbc:	fba3 0302 	umull	r0, r3, r3, r2
 800ccc0:	095b      	lsrs	r3, r3, #5
 800ccc2:	2064      	movs	r0, #100	; 0x64
 800ccc4:	fb00 f303 	mul.w	r3, r0, r3
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	00db      	lsls	r3, r3, #3
 800cccc:	3332      	adds	r3, #50	; 0x32
 800ccce:	4a5d      	ldr	r2, [pc, #372]	; (800ce44 <UART_SetConfig+0x324>)
 800ccd0:	fba2 2303 	umull	r2, r3, r2, r3
 800ccd4:	095b      	lsrs	r3, r3, #5
 800ccd6:	f003 0207 	and.w	r2, r3, #7
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	440a      	add	r2, r1
 800cce0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800cce2:	e0a7      	b.n	800ce34 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a54      	ldr	r2, [pc, #336]	; (800ce3c <UART_SetConfig+0x31c>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d004      	beq.n	800ccf8 <UART_SetConfig+0x1d8>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a53      	ldr	r2, [pc, #332]	; (800ce40 <UART_SetConfig+0x320>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d14e      	bne.n	800cd96 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 800ccf8:	f7fe fce4 	bl	800b6c4 <HAL_RCC_GetPCLK2Freq>
 800ccfc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	4613      	mov	r3, r2
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4413      	add	r3, r2
 800cd06:	009a      	lsls	r2, r3, #2
 800cd08:	441a      	add	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd14:	4a4b      	ldr	r2, [pc, #300]	; (800ce44 <UART_SetConfig+0x324>)
 800cd16:	fba2 2303 	umull	r2, r3, r2, r3
 800cd1a:	095b      	lsrs	r3, r3, #5
 800cd1c:	0119      	lsls	r1, r3, #4
 800cd1e:	68ba      	ldr	r2, [r7, #8]
 800cd20:	4613      	mov	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	009a      	lsls	r2, r3, #2
 800cd28:	441a      	add	r2, r3
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd34:	4b43      	ldr	r3, [pc, #268]	; (800ce44 <UART_SetConfig+0x324>)
 800cd36:	fba3 0302 	umull	r0, r3, r3, r2
 800cd3a:	095b      	lsrs	r3, r3, #5
 800cd3c:	2064      	movs	r0, #100	; 0x64
 800cd3e:	fb00 f303 	mul.w	r3, r0, r3
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	011b      	lsls	r3, r3, #4
 800cd46:	3332      	adds	r3, #50	; 0x32
 800cd48:	4a3e      	ldr	r2, [pc, #248]	; (800ce44 <UART_SetConfig+0x324>)
 800cd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd4e:	095b      	lsrs	r3, r3, #5
 800cd50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd54:	4419      	add	r1, r3
 800cd56:	68ba      	ldr	r2, [r7, #8]
 800cd58:	4613      	mov	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	009a      	lsls	r2, r3, #2
 800cd60:	441a      	add	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	fbb2 f2f3 	udiv	r2, r2, r3
 800cd6c:	4b35      	ldr	r3, [pc, #212]	; (800ce44 <UART_SetConfig+0x324>)
 800cd6e:	fba3 0302 	umull	r0, r3, r3, r2
 800cd72:	095b      	lsrs	r3, r3, #5
 800cd74:	2064      	movs	r0, #100	; 0x64
 800cd76:	fb00 f303 	mul.w	r3, r0, r3
 800cd7a:	1ad3      	subs	r3, r2, r3
 800cd7c:	011b      	lsls	r3, r3, #4
 800cd7e:	3332      	adds	r3, #50	; 0x32
 800cd80:	4a30      	ldr	r2, [pc, #192]	; (800ce44 <UART_SetConfig+0x324>)
 800cd82:	fba2 2303 	umull	r2, r3, r2, r3
 800cd86:	095b      	lsrs	r3, r3, #5
 800cd88:	f003 020f 	and.w	r2, r3, #15
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	440a      	add	r2, r1
 800cd92:	609a      	str	r2, [r3, #8]
 800cd94:	e04e      	b.n	800ce34 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cd96:	f7fe fc73 	bl	800b680 <HAL_RCC_GetPCLK1Freq>
 800cd9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd9c:	68ba      	ldr	r2, [r7, #8]
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009a      	lsls	r2, r3, #2
 800cda6:	441a      	add	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdb2:	4a24      	ldr	r2, [pc, #144]	; (800ce44 <UART_SetConfig+0x324>)
 800cdb4:	fba2 2303 	umull	r2, r3, r2, r3
 800cdb8:	095b      	lsrs	r3, r3, #5
 800cdba:	0119      	lsls	r1, r3, #4
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009a      	lsls	r2, r3, #2
 800cdc6:	441a      	add	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	009b      	lsls	r3, r3, #2
 800cdce:	fbb2 f2f3 	udiv	r2, r2, r3
 800cdd2:	4b1c      	ldr	r3, [pc, #112]	; (800ce44 <UART_SetConfig+0x324>)
 800cdd4:	fba3 0302 	umull	r0, r3, r3, r2
 800cdd8:	095b      	lsrs	r3, r3, #5
 800cdda:	2064      	movs	r0, #100	; 0x64
 800cddc:	fb00 f303 	mul.w	r3, r0, r3
 800cde0:	1ad3      	subs	r3, r2, r3
 800cde2:	011b      	lsls	r3, r3, #4
 800cde4:	3332      	adds	r3, #50	; 0x32
 800cde6:	4a17      	ldr	r2, [pc, #92]	; (800ce44 <UART_SetConfig+0x324>)
 800cde8:	fba2 2303 	umull	r2, r3, r2, r3
 800cdec:	095b      	lsrs	r3, r3, #5
 800cdee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdf2:	4419      	add	r1, r3
 800cdf4:	68ba      	ldr	r2, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	009b      	lsls	r3, r3, #2
 800cdfa:	4413      	add	r3, r2
 800cdfc:	009a      	lsls	r2, r3, #2
 800cdfe:	441a      	add	r2, r3
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce0a:	4b0e      	ldr	r3, [pc, #56]	; (800ce44 <UART_SetConfig+0x324>)
 800ce0c:	fba3 0302 	umull	r0, r3, r3, r2
 800ce10:	095b      	lsrs	r3, r3, #5
 800ce12:	2064      	movs	r0, #100	; 0x64
 800ce14:	fb00 f303 	mul.w	r3, r0, r3
 800ce18:	1ad3      	subs	r3, r2, r3
 800ce1a:	011b      	lsls	r3, r3, #4
 800ce1c:	3332      	adds	r3, #50	; 0x32
 800ce1e:	4a09      	ldr	r2, [pc, #36]	; (800ce44 <UART_SetConfig+0x324>)
 800ce20:	fba2 2303 	umull	r2, r3, r2, r3
 800ce24:	095b      	lsrs	r3, r3, #5
 800ce26:	f003 020f 	and.w	r2, r3, #15
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	440a      	add	r2, r1
 800ce30:	609a      	str	r2, [r3, #8]
}
 800ce32:	e7ff      	b.n	800ce34 <UART_SetConfig+0x314>
 800ce34:	bf00      	nop
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}
 800ce3c:	40011000 	.word	0x40011000
 800ce40:	40011400 	.word	0x40011400
 800ce44:	51eb851f 	.word	0x51eb851f

0800ce48 <__errno>:
 800ce48:	4b01      	ldr	r3, [pc, #4]	; (800ce50 <__errno+0x8>)
 800ce4a:	6818      	ldr	r0, [r3, #0]
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	20000064 	.word	0x20000064

0800ce54 <__libc_init_array>:
 800ce54:	b570      	push	{r4, r5, r6, lr}
 800ce56:	2500      	movs	r5, #0
 800ce58:	4e0c      	ldr	r6, [pc, #48]	; (800ce8c <__libc_init_array+0x38>)
 800ce5a:	4c0d      	ldr	r4, [pc, #52]	; (800ce90 <__libc_init_array+0x3c>)
 800ce5c:	1ba4      	subs	r4, r4, r6
 800ce5e:	10a4      	asrs	r4, r4, #2
 800ce60:	42a5      	cmp	r5, r4
 800ce62:	d109      	bne.n	800ce78 <__libc_init_array+0x24>
 800ce64:	f002 fa92 	bl	800f38c <_init>
 800ce68:	2500      	movs	r5, #0
 800ce6a:	4e0a      	ldr	r6, [pc, #40]	; (800ce94 <__libc_init_array+0x40>)
 800ce6c:	4c0a      	ldr	r4, [pc, #40]	; (800ce98 <__libc_init_array+0x44>)
 800ce6e:	1ba4      	subs	r4, r4, r6
 800ce70:	10a4      	asrs	r4, r4, #2
 800ce72:	42a5      	cmp	r5, r4
 800ce74:	d105      	bne.n	800ce82 <__libc_init_array+0x2e>
 800ce76:	bd70      	pop	{r4, r5, r6, pc}
 800ce78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce7c:	4798      	blx	r3
 800ce7e:	3501      	adds	r5, #1
 800ce80:	e7ee      	b.n	800ce60 <__libc_init_array+0xc>
 800ce82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ce86:	4798      	blx	r3
 800ce88:	3501      	adds	r5, #1
 800ce8a:	e7f2      	b.n	800ce72 <__libc_init_array+0x1e>
 800ce8c:	0800fe5c 	.word	0x0800fe5c
 800ce90:	0800fe5c 	.word	0x0800fe5c
 800ce94:	0800fe5c 	.word	0x0800fe5c
 800ce98:	0800fe60 	.word	0x0800fe60

0800ce9c <memset>:
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	4402      	add	r2, r0
 800cea0:	4293      	cmp	r3, r2
 800cea2:	d100      	bne.n	800cea6 <memset+0xa>
 800cea4:	4770      	bx	lr
 800cea6:	f803 1b01 	strb.w	r1, [r3], #1
 800ceaa:	e7f9      	b.n	800cea0 <memset+0x4>

0800ceac <__cvt>:
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb2:	461e      	mov	r6, r3
 800ceb4:	bfbb      	ittet	lt
 800ceb6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ceba:	461e      	movlt	r6, r3
 800cebc:	2300      	movge	r3, #0
 800cebe:	232d      	movlt	r3, #45	; 0x2d
 800cec0:	b088      	sub	sp, #32
 800cec2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800cec4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800cec8:	f027 0720 	bic.w	r7, r7, #32
 800cecc:	2f46      	cmp	r7, #70	; 0x46
 800cece:	4614      	mov	r4, r2
 800ced0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ced2:	700b      	strb	r3, [r1, #0]
 800ced4:	d004      	beq.n	800cee0 <__cvt+0x34>
 800ced6:	2f45      	cmp	r7, #69	; 0x45
 800ced8:	d100      	bne.n	800cedc <__cvt+0x30>
 800ceda:	3501      	adds	r5, #1
 800cedc:	2302      	movs	r3, #2
 800cede:	e000      	b.n	800cee2 <__cvt+0x36>
 800cee0:	2303      	movs	r3, #3
 800cee2:	aa07      	add	r2, sp, #28
 800cee4:	9204      	str	r2, [sp, #16]
 800cee6:	aa06      	add	r2, sp, #24
 800cee8:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ceec:	e9cd 3500 	strd	r3, r5, [sp]
 800cef0:	4622      	mov	r2, r4
 800cef2:	4633      	mov	r3, r6
 800cef4:	f000 fcd8 	bl	800d8a8 <_dtoa_r>
 800cef8:	2f47      	cmp	r7, #71	; 0x47
 800cefa:	4680      	mov	r8, r0
 800cefc:	d102      	bne.n	800cf04 <__cvt+0x58>
 800cefe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cf00:	07db      	lsls	r3, r3, #31
 800cf02:	d526      	bpl.n	800cf52 <__cvt+0xa6>
 800cf04:	2f46      	cmp	r7, #70	; 0x46
 800cf06:	eb08 0905 	add.w	r9, r8, r5
 800cf0a:	d111      	bne.n	800cf30 <__cvt+0x84>
 800cf0c:	f898 3000 	ldrb.w	r3, [r8]
 800cf10:	2b30      	cmp	r3, #48	; 0x30
 800cf12:	d10a      	bne.n	800cf2a <__cvt+0x7e>
 800cf14:	2200      	movs	r2, #0
 800cf16:	2300      	movs	r3, #0
 800cf18:	4620      	mov	r0, r4
 800cf1a:	4631      	mov	r1, r6
 800cf1c:	f7f3 fd80 	bl	8000a20 <__aeabi_dcmpeq>
 800cf20:	b918      	cbnz	r0, 800cf2a <__cvt+0x7e>
 800cf22:	f1c5 0501 	rsb	r5, r5, #1
 800cf26:	f8ca 5000 	str.w	r5, [sl]
 800cf2a:	f8da 3000 	ldr.w	r3, [sl]
 800cf2e:	4499      	add	r9, r3
 800cf30:	2200      	movs	r2, #0
 800cf32:	2300      	movs	r3, #0
 800cf34:	4620      	mov	r0, r4
 800cf36:	4631      	mov	r1, r6
 800cf38:	f7f3 fd72 	bl	8000a20 <__aeabi_dcmpeq>
 800cf3c:	b938      	cbnz	r0, 800cf4e <__cvt+0xa2>
 800cf3e:	2230      	movs	r2, #48	; 0x30
 800cf40:	9b07      	ldr	r3, [sp, #28]
 800cf42:	454b      	cmp	r3, r9
 800cf44:	d205      	bcs.n	800cf52 <__cvt+0xa6>
 800cf46:	1c59      	adds	r1, r3, #1
 800cf48:	9107      	str	r1, [sp, #28]
 800cf4a:	701a      	strb	r2, [r3, #0]
 800cf4c:	e7f8      	b.n	800cf40 <__cvt+0x94>
 800cf4e:	f8cd 901c 	str.w	r9, [sp, #28]
 800cf52:	4640      	mov	r0, r8
 800cf54:	9b07      	ldr	r3, [sp, #28]
 800cf56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cf58:	eba3 0308 	sub.w	r3, r3, r8
 800cf5c:	6013      	str	r3, [r2, #0]
 800cf5e:	b008      	add	sp, #32
 800cf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cf64 <__exponent>:
 800cf64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf66:	2900      	cmp	r1, #0
 800cf68:	bfb4      	ite	lt
 800cf6a:	232d      	movlt	r3, #45	; 0x2d
 800cf6c:	232b      	movge	r3, #43	; 0x2b
 800cf6e:	4604      	mov	r4, r0
 800cf70:	bfb8      	it	lt
 800cf72:	4249      	neglt	r1, r1
 800cf74:	2909      	cmp	r1, #9
 800cf76:	f804 2b02 	strb.w	r2, [r4], #2
 800cf7a:	7043      	strb	r3, [r0, #1]
 800cf7c:	dd21      	ble.n	800cfc2 <__exponent+0x5e>
 800cf7e:	f10d 0307 	add.w	r3, sp, #7
 800cf82:	461f      	mov	r7, r3
 800cf84:	260a      	movs	r6, #10
 800cf86:	fb91 f5f6 	sdiv	r5, r1, r6
 800cf8a:	fb06 1115 	mls	r1, r6, r5, r1
 800cf8e:	2d09      	cmp	r5, #9
 800cf90:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800cf94:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cf98:	f103 32ff 	add.w	r2, r3, #4294967295
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	dc09      	bgt.n	800cfb4 <__exponent+0x50>
 800cfa0:	3130      	adds	r1, #48	; 0x30
 800cfa2:	3b02      	subs	r3, #2
 800cfa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cfa8:	42bb      	cmp	r3, r7
 800cfaa:	4622      	mov	r2, r4
 800cfac:	d304      	bcc.n	800cfb8 <__exponent+0x54>
 800cfae:	1a10      	subs	r0, r2, r0
 800cfb0:	b003      	add	sp, #12
 800cfb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	e7e6      	b.n	800cf86 <__exponent+0x22>
 800cfb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfbc:	f804 2b01 	strb.w	r2, [r4], #1
 800cfc0:	e7f2      	b.n	800cfa8 <__exponent+0x44>
 800cfc2:	2330      	movs	r3, #48	; 0x30
 800cfc4:	4419      	add	r1, r3
 800cfc6:	7083      	strb	r3, [r0, #2]
 800cfc8:	1d02      	adds	r2, r0, #4
 800cfca:	70c1      	strb	r1, [r0, #3]
 800cfcc:	e7ef      	b.n	800cfae <__exponent+0x4a>
	...

0800cfd0 <_printf_float>:
 800cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd4:	b091      	sub	sp, #68	; 0x44
 800cfd6:	460c      	mov	r4, r1
 800cfd8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800cfda:	4693      	mov	fp, r2
 800cfdc:	461e      	mov	r6, r3
 800cfde:	4605      	mov	r5, r0
 800cfe0:	f001 fa16 	bl	800e410 <_localeconv_r>
 800cfe4:	6803      	ldr	r3, [r0, #0]
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	9309      	str	r3, [sp, #36]	; 0x24
 800cfea:	f7f3 f8ed 	bl	80001c8 <strlen>
 800cfee:	2300      	movs	r3, #0
 800cff0:	930e      	str	r3, [sp, #56]	; 0x38
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	900a      	str	r0, [sp, #40]	; 0x28
 800cff6:	3307      	adds	r3, #7
 800cff8:	f023 0307 	bic.w	r3, r3, #7
 800cffc:	f103 0208 	add.w	r2, r3, #8
 800d000:	f894 8018 	ldrb.w	r8, [r4, #24]
 800d004:	f8d4 a000 	ldr.w	sl, [r4]
 800d008:	603a      	str	r2, [r7, #0]
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d012:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800d016:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d01a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d01c:	f04f 32ff 	mov.w	r2, #4294967295
 800d020:	4ba6      	ldr	r3, [pc, #664]	; (800d2bc <_printf_float+0x2ec>)
 800d022:	4638      	mov	r0, r7
 800d024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d026:	f7f3 fd2d 	bl	8000a84 <__aeabi_dcmpun>
 800d02a:	bb68      	cbnz	r0, 800d088 <_printf_float+0xb8>
 800d02c:	f04f 32ff 	mov.w	r2, #4294967295
 800d030:	4ba2      	ldr	r3, [pc, #648]	; (800d2bc <_printf_float+0x2ec>)
 800d032:	4638      	mov	r0, r7
 800d034:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d036:	f7f3 fd07 	bl	8000a48 <__aeabi_dcmple>
 800d03a:	bb28      	cbnz	r0, 800d088 <_printf_float+0xb8>
 800d03c:	2200      	movs	r2, #0
 800d03e:	2300      	movs	r3, #0
 800d040:	4638      	mov	r0, r7
 800d042:	4649      	mov	r1, r9
 800d044:	f7f3 fcf6 	bl	8000a34 <__aeabi_dcmplt>
 800d048:	b110      	cbz	r0, 800d050 <_printf_float+0x80>
 800d04a:	232d      	movs	r3, #45	; 0x2d
 800d04c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d050:	4f9b      	ldr	r7, [pc, #620]	; (800d2c0 <_printf_float+0x2f0>)
 800d052:	4b9c      	ldr	r3, [pc, #624]	; (800d2c4 <_printf_float+0x2f4>)
 800d054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d058:	bf98      	it	ls
 800d05a:	461f      	movls	r7, r3
 800d05c:	2303      	movs	r3, #3
 800d05e:	f04f 0900 	mov.w	r9, #0
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	f02a 0304 	bic.w	r3, sl, #4
 800d068:	6023      	str	r3, [r4, #0]
 800d06a:	9600      	str	r6, [sp, #0]
 800d06c:	465b      	mov	r3, fp
 800d06e:	aa0f      	add	r2, sp, #60	; 0x3c
 800d070:	4621      	mov	r1, r4
 800d072:	4628      	mov	r0, r5
 800d074:	f000 f9e2 	bl	800d43c <_printf_common>
 800d078:	3001      	adds	r0, #1
 800d07a:	f040 8090 	bne.w	800d19e <_printf_float+0x1ce>
 800d07e:	f04f 30ff 	mov.w	r0, #4294967295
 800d082:	b011      	add	sp, #68	; 0x44
 800d084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d088:	463a      	mov	r2, r7
 800d08a:	464b      	mov	r3, r9
 800d08c:	4638      	mov	r0, r7
 800d08e:	4649      	mov	r1, r9
 800d090:	f7f3 fcf8 	bl	8000a84 <__aeabi_dcmpun>
 800d094:	b110      	cbz	r0, 800d09c <_printf_float+0xcc>
 800d096:	4f8c      	ldr	r7, [pc, #560]	; (800d2c8 <_printf_float+0x2f8>)
 800d098:	4b8c      	ldr	r3, [pc, #560]	; (800d2cc <_printf_float+0x2fc>)
 800d09a:	e7db      	b.n	800d054 <_printf_float+0x84>
 800d09c:	6863      	ldr	r3, [r4, #4]
 800d09e:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800d0a2:	1c59      	adds	r1, r3, #1
 800d0a4:	a80d      	add	r0, sp, #52	; 0x34
 800d0a6:	a90e      	add	r1, sp, #56	; 0x38
 800d0a8:	d140      	bne.n	800d12c <_printf_float+0x15c>
 800d0aa:	2306      	movs	r3, #6
 800d0ac:	6063      	str	r3, [r4, #4]
 800d0ae:	f04f 0c00 	mov.w	ip, #0
 800d0b2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800d0b6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d0ba:	6863      	ldr	r3, [r4, #4]
 800d0bc:	6022      	str	r2, [r4, #0]
 800d0be:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	463a      	mov	r2, r7
 800d0c6:	464b      	mov	r3, r9
 800d0c8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	f7ff feed 	bl	800ceac <__cvt>
 800d0d2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800d0d6:	2b47      	cmp	r3, #71	; 0x47
 800d0d8:	4607      	mov	r7, r0
 800d0da:	d109      	bne.n	800d0f0 <_printf_float+0x120>
 800d0dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d0de:	1cd8      	adds	r0, r3, #3
 800d0e0:	db02      	blt.n	800d0e8 <_printf_float+0x118>
 800d0e2:	6862      	ldr	r2, [r4, #4]
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	dd47      	ble.n	800d178 <_printf_float+0x1a8>
 800d0e8:	f1a8 0802 	sub.w	r8, r8, #2
 800d0ec:	fa5f f888 	uxtb.w	r8, r8
 800d0f0:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800d0f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d0f6:	d824      	bhi.n	800d142 <_printf_float+0x172>
 800d0f8:	3901      	subs	r1, #1
 800d0fa:	4642      	mov	r2, r8
 800d0fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d100:	910d      	str	r1, [sp, #52]	; 0x34
 800d102:	f7ff ff2f 	bl	800cf64 <__exponent>
 800d106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d108:	4681      	mov	r9, r0
 800d10a:	1813      	adds	r3, r2, r0
 800d10c:	2a01      	cmp	r2, #1
 800d10e:	6123      	str	r3, [r4, #16]
 800d110:	dc02      	bgt.n	800d118 <_printf_float+0x148>
 800d112:	6822      	ldr	r2, [r4, #0]
 800d114:	07d1      	lsls	r1, r2, #31
 800d116:	d501      	bpl.n	800d11c <_printf_float+0x14c>
 800d118:	3301      	adds	r3, #1
 800d11a:	6123      	str	r3, [r4, #16]
 800d11c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d120:	2b00      	cmp	r3, #0
 800d122:	d0a2      	beq.n	800d06a <_printf_float+0x9a>
 800d124:	232d      	movs	r3, #45	; 0x2d
 800d126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d12a:	e79e      	b.n	800d06a <_printf_float+0x9a>
 800d12c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800d130:	f000 816e 	beq.w	800d410 <_printf_float+0x440>
 800d134:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d138:	d1b9      	bne.n	800d0ae <_printf_float+0xde>
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d1b7      	bne.n	800d0ae <_printf_float+0xde>
 800d13e:	2301      	movs	r3, #1
 800d140:	e7b4      	b.n	800d0ac <_printf_float+0xdc>
 800d142:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800d146:	d119      	bne.n	800d17c <_printf_float+0x1ac>
 800d148:	2900      	cmp	r1, #0
 800d14a:	6863      	ldr	r3, [r4, #4]
 800d14c:	dd0c      	ble.n	800d168 <_printf_float+0x198>
 800d14e:	6121      	str	r1, [r4, #16]
 800d150:	b913      	cbnz	r3, 800d158 <_printf_float+0x188>
 800d152:	6822      	ldr	r2, [r4, #0]
 800d154:	07d2      	lsls	r2, r2, #31
 800d156:	d502      	bpl.n	800d15e <_printf_float+0x18e>
 800d158:	3301      	adds	r3, #1
 800d15a:	440b      	add	r3, r1
 800d15c:	6123      	str	r3, [r4, #16]
 800d15e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d160:	f04f 0900 	mov.w	r9, #0
 800d164:	65a3      	str	r3, [r4, #88]	; 0x58
 800d166:	e7d9      	b.n	800d11c <_printf_float+0x14c>
 800d168:	b913      	cbnz	r3, 800d170 <_printf_float+0x1a0>
 800d16a:	6822      	ldr	r2, [r4, #0]
 800d16c:	07d0      	lsls	r0, r2, #31
 800d16e:	d501      	bpl.n	800d174 <_printf_float+0x1a4>
 800d170:	3302      	adds	r3, #2
 800d172:	e7f3      	b.n	800d15c <_printf_float+0x18c>
 800d174:	2301      	movs	r3, #1
 800d176:	e7f1      	b.n	800d15c <_printf_float+0x18c>
 800d178:	f04f 0867 	mov.w	r8, #103	; 0x67
 800d17c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d180:	4293      	cmp	r3, r2
 800d182:	db05      	blt.n	800d190 <_printf_float+0x1c0>
 800d184:	6822      	ldr	r2, [r4, #0]
 800d186:	6123      	str	r3, [r4, #16]
 800d188:	07d1      	lsls	r1, r2, #31
 800d18a:	d5e8      	bpl.n	800d15e <_printf_float+0x18e>
 800d18c:	3301      	adds	r3, #1
 800d18e:	e7e5      	b.n	800d15c <_printf_float+0x18c>
 800d190:	2b00      	cmp	r3, #0
 800d192:	bfcc      	ite	gt
 800d194:	2301      	movgt	r3, #1
 800d196:	f1c3 0302 	rsble	r3, r3, #2
 800d19a:	4413      	add	r3, r2
 800d19c:	e7de      	b.n	800d15c <_printf_float+0x18c>
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	055a      	lsls	r2, r3, #21
 800d1a2:	d407      	bmi.n	800d1b4 <_printf_float+0x1e4>
 800d1a4:	6923      	ldr	r3, [r4, #16]
 800d1a6:	463a      	mov	r2, r7
 800d1a8:	4659      	mov	r1, fp
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	47b0      	blx	r6
 800d1ae:	3001      	adds	r0, #1
 800d1b0:	d129      	bne.n	800d206 <_printf_float+0x236>
 800d1b2:	e764      	b.n	800d07e <_printf_float+0xae>
 800d1b4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800d1b8:	f240 80d7 	bls.w	800d36a <_printf_float+0x39a>
 800d1bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	f7f3 fc2c 	bl	8000a20 <__aeabi_dcmpeq>
 800d1c8:	b388      	cbz	r0, 800d22e <_printf_float+0x25e>
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	4a40      	ldr	r2, [pc, #256]	; (800d2d0 <_printf_float+0x300>)
 800d1ce:	4659      	mov	r1, fp
 800d1d0:	4628      	mov	r0, r5
 800d1d2:	47b0      	blx	r6
 800d1d4:	3001      	adds	r0, #1
 800d1d6:	f43f af52 	beq.w	800d07e <_printf_float+0xae>
 800d1da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d1de:	429a      	cmp	r2, r3
 800d1e0:	db02      	blt.n	800d1e8 <_printf_float+0x218>
 800d1e2:	6823      	ldr	r3, [r4, #0]
 800d1e4:	07d8      	lsls	r0, r3, #31
 800d1e6:	d50e      	bpl.n	800d206 <_printf_float+0x236>
 800d1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1ec:	4659      	mov	r1, fp
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	47b0      	blx	r6
 800d1f2:	3001      	adds	r0, #1
 800d1f4:	f43f af43 	beq.w	800d07e <_printf_float+0xae>
 800d1f8:	2700      	movs	r7, #0
 800d1fa:	f104 081a 	add.w	r8, r4, #26
 800d1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d200:	3b01      	subs	r3, #1
 800d202:	42bb      	cmp	r3, r7
 800d204:	dc09      	bgt.n	800d21a <_printf_float+0x24a>
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	079f      	lsls	r7, r3, #30
 800d20a:	f100 80fd 	bmi.w	800d408 <_printf_float+0x438>
 800d20e:	68e0      	ldr	r0, [r4, #12]
 800d210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d212:	4298      	cmp	r0, r3
 800d214:	bfb8      	it	lt
 800d216:	4618      	movlt	r0, r3
 800d218:	e733      	b.n	800d082 <_printf_float+0xb2>
 800d21a:	2301      	movs	r3, #1
 800d21c:	4642      	mov	r2, r8
 800d21e:	4659      	mov	r1, fp
 800d220:	4628      	mov	r0, r5
 800d222:	47b0      	blx	r6
 800d224:	3001      	adds	r0, #1
 800d226:	f43f af2a 	beq.w	800d07e <_printf_float+0xae>
 800d22a:	3701      	adds	r7, #1
 800d22c:	e7e7      	b.n	800d1fe <_printf_float+0x22e>
 800d22e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d230:	2b00      	cmp	r3, #0
 800d232:	dc2b      	bgt.n	800d28c <_printf_float+0x2bc>
 800d234:	2301      	movs	r3, #1
 800d236:	4a26      	ldr	r2, [pc, #152]	; (800d2d0 <_printf_float+0x300>)
 800d238:	4659      	mov	r1, fp
 800d23a:	4628      	mov	r0, r5
 800d23c:	47b0      	blx	r6
 800d23e:	3001      	adds	r0, #1
 800d240:	f43f af1d 	beq.w	800d07e <_printf_float+0xae>
 800d244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d246:	b923      	cbnz	r3, 800d252 <_printf_float+0x282>
 800d248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d24a:	b913      	cbnz	r3, 800d252 <_printf_float+0x282>
 800d24c:	6823      	ldr	r3, [r4, #0]
 800d24e:	07d9      	lsls	r1, r3, #31
 800d250:	d5d9      	bpl.n	800d206 <_printf_float+0x236>
 800d252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d256:	4659      	mov	r1, fp
 800d258:	4628      	mov	r0, r5
 800d25a:	47b0      	blx	r6
 800d25c:	3001      	adds	r0, #1
 800d25e:	f43f af0e 	beq.w	800d07e <_printf_float+0xae>
 800d262:	f04f 0800 	mov.w	r8, #0
 800d266:	f104 091a 	add.w	r9, r4, #26
 800d26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d26c:	425b      	negs	r3, r3
 800d26e:	4543      	cmp	r3, r8
 800d270:	dc01      	bgt.n	800d276 <_printf_float+0x2a6>
 800d272:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d274:	e797      	b.n	800d1a6 <_printf_float+0x1d6>
 800d276:	2301      	movs	r3, #1
 800d278:	464a      	mov	r2, r9
 800d27a:	4659      	mov	r1, fp
 800d27c:	4628      	mov	r0, r5
 800d27e:	47b0      	blx	r6
 800d280:	3001      	adds	r0, #1
 800d282:	f43f aefc 	beq.w	800d07e <_printf_float+0xae>
 800d286:	f108 0801 	add.w	r8, r8, #1
 800d28a:	e7ee      	b.n	800d26a <_printf_float+0x29a>
 800d28c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d28e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d290:	429a      	cmp	r2, r3
 800d292:	bfa8      	it	ge
 800d294:	461a      	movge	r2, r3
 800d296:	2a00      	cmp	r2, #0
 800d298:	4690      	mov	r8, r2
 800d29a:	dd07      	ble.n	800d2ac <_printf_float+0x2dc>
 800d29c:	4613      	mov	r3, r2
 800d29e:	4659      	mov	r1, fp
 800d2a0:	463a      	mov	r2, r7
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b0      	blx	r6
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	f43f aee9 	beq.w	800d07e <_printf_float+0xae>
 800d2ac:	f104 031a 	add.w	r3, r4, #26
 800d2b0:	f04f 0a00 	mov.w	sl, #0
 800d2b4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800d2b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d2ba:	e015      	b.n	800d2e8 <_printf_float+0x318>
 800d2bc:	7fefffff 	.word	0x7fefffff
 800d2c0:	0800fbf4 	.word	0x0800fbf4
 800d2c4:	0800fbf0 	.word	0x0800fbf0
 800d2c8:	0800fbfc 	.word	0x0800fbfc
 800d2cc:	0800fbf8 	.word	0x0800fbf8
 800d2d0:	0800fc00 	.word	0x0800fc00
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d2d8:	4659      	mov	r1, fp
 800d2da:	4628      	mov	r0, r5
 800d2dc:	47b0      	blx	r6
 800d2de:	3001      	adds	r0, #1
 800d2e0:	f43f aecd 	beq.w	800d07e <_printf_float+0xae>
 800d2e4:	f10a 0a01 	add.w	sl, sl, #1
 800d2e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800d2ec:	eba9 0308 	sub.w	r3, r9, r8
 800d2f0:	4553      	cmp	r3, sl
 800d2f2:	dcef      	bgt.n	800d2d4 <_printf_float+0x304>
 800d2f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	444f      	add	r7, r9
 800d2fc:	db14      	blt.n	800d328 <_printf_float+0x358>
 800d2fe:	6823      	ldr	r3, [r4, #0]
 800d300:	07da      	lsls	r2, r3, #31
 800d302:	d411      	bmi.n	800d328 <_printf_float+0x358>
 800d304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d306:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d308:	eba3 0209 	sub.w	r2, r3, r9
 800d30c:	eba3 0901 	sub.w	r9, r3, r1
 800d310:	4591      	cmp	r9, r2
 800d312:	bfa8      	it	ge
 800d314:	4691      	movge	r9, r2
 800d316:	f1b9 0f00 	cmp.w	r9, #0
 800d31a:	dc0d      	bgt.n	800d338 <_printf_float+0x368>
 800d31c:	2700      	movs	r7, #0
 800d31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d322:	f104 081a 	add.w	r8, r4, #26
 800d326:	e018      	b.n	800d35a <_printf_float+0x38a>
 800d328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d32c:	4659      	mov	r1, fp
 800d32e:	4628      	mov	r0, r5
 800d330:	47b0      	blx	r6
 800d332:	3001      	adds	r0, #1
 800d334:	d1e6      	bne.n	800d304 <_printf_float+0x334>
 800d336:	e6a2      	b.n	800d07e <_printf_float+0xae>
 800d338:	464b      	mov	r3, r9
 800d33a:	463a      	mov	r2, r7
 800d33c:	4659      	mov	r1, fp
 800d33e:	4628      	mov	r0, r5
 800d340:	47b0      	blx	r6
 800d342:	3001      	adds	r0, #1
 800d344:	d1ea      	bne.n	800d31c <_printf_float+0x34c>
 800d346:	e69a      	b.n	800d07e <_printf_float+0xae>
 800d348:	2301      	movs	r3, #1
 800d34a:	4642      	mov	r2, r8
 800d34c:	4659      	mov	r1, fp
 800d34e:	4628      	mov	r0, r5
 800d350:	47b0      	blx	r6
 800d352:	3001      	adds	r0, #1
 800d354:	f43f ae93 	beq.w	800d07e <_printf_float+0xae>
 800d358:	3701      	adds	r7, #1
 800d35a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d35e:	1a9b      	subs	r3, r3, r2
 800d360:	eba3 0309 	sub.w	r3, r3, r9
 800d364:	42bb      	cmp	r3, r7
 800d366:	dcef      	bgt.n	800d348 <_printf_float+0x378>
 800d368:	e74d      	b.n	800d206 <_printf_float+0x236>
 800d36a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d36c:	2a01      	cmp	r2, #1
 800d36e:	dc01      	bgt.n	800d374 <_printf_float+0x3a4>
 800d370:	07db      	lsls	r3, r3, #31
 800d372:	d538      	bpl.n	800d3e6 <_printf_float+0x416>
 800d374:	2301      	movs	r3, #1
 800d376:	463a      	mov	r2, r7
 800d378:	4659      	mov	r1, fp
 800d37a:	4628      	mov	r0, r5
 800d37c:	47b0      	blx	r6
 800d37e:	3001      	adds	r0, #1
 800d380:	f43f ae7d 	beq.w	800d07e <_printf_float+0xae>
 800d384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d388:	4659      	mov	r1, fp
 800d38a:	4628      	mov	r0, r5
 800d38c:	47b0      	blx	r6
 800d38e:	3001      	adds	r0, #1
 800d390:	f107 0701 	add.w	r7, r7, #1
 800d394:	f43f ae73 	beq.w	800d07e <_printf_float+0xae>
 800d398:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f103 38ff 	add.w	r8, r3, #4294967295
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f7f3 fb3b 	bl	8000a20 <__aeabi_dcmpeq>
 800d3aa:	b9c0      	cbnz	r0, 800d3de <_printf_float+0x40e>
 800d3ac:	4643      	mov	r3, r8
 800d3ae:	463a      	mov	r2, r7
 800d3b0:	4659      	mov	r1, fp
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	47b0      	blx	r6
 800d3b6:	3001      	adds	r0, #1
 800d3b8:	d10d      	bne.n	800d3d6 <_printf_float+0x406>
 800d3ba:	e660      	b.n	800d07e <_printf_float+0xae>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	4642      	mov	r2, r8
 800d3c0:	4659      	mov	r1, fp
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	47b0      	blx	r6
 800d3c6:	3001      	adds	r0, #1
 800d3c8:	f43f ae59 	beq.w	800d07e <_printf_float+0xae>
 800d3cc:	3701      	adds	r7, #1
 800d3ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3d0:	3b01      	subs	r3, #1
 800d3d2:	42bb      	cmp	r3, r7
 800d3d4:	dcf2      	bgt.n	800d3bc <_printf_float+0x3ec>
 800d3d6:	464b      	mov	r3, r9
 800d3d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d3dc:	e6e4      	b.n	800d1a8 <_printf_float+0x1d8>
 800d3de:	2700      	movs	r7, #0
 800d3e0:	f104 081a 	add.w	r8, r4, #26
 800d3e4:	e7f3      	b.n	800d3ce <_printf_float+0x3fe>
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e7e1      	b.n	800d3ae <_printf_float+0x3de>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	4642      	mov	r2, r8
 800d3ee:	4659      	mov	r1, fp
 800d3f0:	4628      	mov	r0, r5
 800d3f2:	47b0      	blx	r6
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	f43f ae42 	beq.w	800d07e <_printf_float+0xae>
 800d3fa:	3701      	adds	r7, #1
 800d3fc:	68e3      	ldr	r3, [r4, #12]
 800d3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d400:	1a9b      	subs	r3, r3, r2
 800d402:	42bb      	cmp	r3, r7
 800d404:	dcf1      	bgt.n	800d3ea <_printf_float+0x41a>
 800d406:	e702      	b.n	800d20e <_printf_float+0x23e>
 800d408:	2700      	movs	r7, #0
 800d40a:	f104 0819 	add.w	r8, r4, #25
 800d40e:	e7f5      	b.n	800d3fc <_printf_float+0x42c>
 800d410:	2b00      	cmp	r3, #0
 800d412:	f43f ae94 	beq.w	800d13e <_printf_float+0x16e>
 800d416:	f04f 0c00 	mov.w	ip, #0
 800d41a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800d41e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800d422:	6022      	str	r2, [r4, #0]
 800d424:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800d428:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	463a      	mov	r2, r7
 800d430:	464b      	mov	r3, r9
 800d432:	4628      	mov	r0, r5
 800d434:	f7ff fd3a 	bl	800ceac <__cvt>
 800d438:	4607      	mov	r7, r0
 800d43a:	e64f      	b.n	800d0dc <_printf_float+0x10c>

0800d43c <_printf_common>:
 800d43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d440:	4691      	mov	r9, r2
 800d442:	461f      	mov	r7, r3
 800d444:	688a      	ldr	r2, [r1, #8]
 800d446:	690b      	ldr	r3, [r1, #16]
 800d448:	4606      	mov	r6, r0
 800d44a:	4293      	cmp	r3, r2
 800d44c:	bfb8      	it	lt
 800d44e:	4613      	movlt	r3, r2
 800d450:	f8c9 3000 	str.w	r3, [r9]
 800d454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d458:	460c      	mov	r4, r1
 800d45a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d45e:	b112      	cbz	r2, 800d466 <_printf_common+0x2a>
 800d460:	3301      	adds	r3, #1
 800d462:	f8c9 3000 	str.w	r3, [r9]
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	0699      	lsls	r1, r3, #26
 800d46a:	bf42      	ittt	mi
 800d46c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d470:	3302      	addmi	r3, #2
 800d472:	f8c9 3000 	strmi.w	r3, [r9]
 800d476:	6825      	ldr	r5, [r4, #0]
 800d478:	f015 0506 	ands.w	r5, r5, #6
 800d47c:	d107      	bne.n	800d48e <_printf_common+0x52>
 800d47e:	f104 0a19 	add.w	sl, r4, #25
 800d482:	68e3      	ldr	r3, [r4, #12]
 800d484:	f8d9 2000 	ldr.w	r2, [r9]
 800d488:	1a9b      	subs	r3, r3, r2
 800d48a:	42ab      	cmp	r3, r5
 800d48c:	dc29      	bgt.n	800d4e2 <_printf_common+0xa6>
 800d48e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d492:	6822      	ldr	r2, [r4, #0]
 800d494:	3300      	adds	r3, #0
 800d496:	bf18      	it	ne
 800d498:	2301      	movne	r3, #1
 800d49a:	0692      	lsls	r2, r2, #26
 800d49c:	d42e      	bmi.n	800d4fc <_printf_common+0xc0>
 800d49e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	4630      	mov	r0, r6
 800d4a6:	47c0      	blx	r8
 800d4a8:	3001      	adds	r0, #1
 800d4aa:	d021      	beq.n	800d4f0 <_printf_common+0xb4>
 800d4ac:	6823      	ldr	r3, [r4, #0]
 800d4ae:	68e5      	ldr	r5, [r4, #12]
 800d4b0:	f003 0306 	and.w	r3, r3, #6
 800d4b4:	2b04      	cmp	r3, #4
 800d4b6:	bf18      	it	ne
 800d4b8:	2500      	movne	r5, #0
 800d4ba:	f8d9 2000 	ldr.w	r2, [r9]
 800d4be:	f04f 0900 	mov.w	r9, #0
 800d4c2:	bf08      	it	eq
 800d4c4:	1aad      	subeq	r5, r5, r2
 800d4c6:	68a3      	ldr	r3, [r4, #8]
 800d4c8:	6922      	ldr	r2, [r4, #16]
 800d4ca:	bf08      	it	eq
 800d4cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	bfc4      	itt	gt
 800d4d4:	1a9b      	subgt	r3, r3, r2
 800d4d6:	18ed      	addgt	r5, r5, r3
 800d4d8:	341a      	adds	r4, #26
 800d4da:	454d      	cmp	r5, r9
 800d4dc:	d11a      	bne.n	800d514 <_printf_common+0xd8>
 800d4de:	2000      	movs	r0, #0
 800d4e0:	e008      	b.n	800d4f4 <_printf_common+0xb8>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	4652      	mov	r2, sl
 800d4e6:	4639      	mov	r1, r7
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	47c0      	blx	r8
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d103      	bne.n	800d4f8 <_printf_common+0xbc>
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f8:	3501      	adds	r5, #1
 800d4fa:	e7c2      	b.n	800d482 <_printf_common+0x46>
 800d4fc:	2030      	movs	r0, #48	; 0x30
 800d4fe:	18e1      	adds	r1, r4, r3
 800d500:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d504:	1c5a      	adds	r2, r3, #1
 800d506:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d50a:	4422      	add	r2, r4
 800d50c:	3302      	adds	r3, #2
 800d50e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d512:	e7c4      	b.n	800d49e <_printf_common+0x62>
 800d514:	2301      	movs	r3, #1
 800d516:	4622      	mov	r2, r4
 800d518:	4639      	mov	r1, r7
 800d51a:	4630      	mov	r0, r6
 800d51c:	47c0      	blx	r8
 800d51e:	3001      	adds	r0, #1
 800d520:	d0e6      	beq.n	800d4f0 <_printf_common+0xb4>
 800d522:	f109 0901 	add.w	r9, r9, #1
 800d526:	e7d8      	b.n	800d4da <_printf_common+0x9e>

0800d528 <_printf_i>:
 800d528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d52c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d530:	460c      	mov	r4, r1
 800d532:	7e09      	ldrb	r1, [r1, #24]
 800d534:	b085      	sub	sp, #20
 800d536:	296e      	cmp	r1, #110	; 0x6e
 800d538:	4617      	mov	r7, r2
 800d53a:	4606      	mov	r6, r0
 800d53c:	4698      	mov	r8, r3
 800d53e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d540:	f000 80b3 	beq.w	800d6aa <_printf_i+0x182>
 800d544:	d822      	bhi.n	800d58c <_printf_i+0x64>
 800d546:	2963      	cmp	r1, #99	; 0x63
 800d548:	d036      	beq.n	800d5b8 <_printf_i+0x90>
 800d54a:	d80a      	bhi.n	800d562 <_printf_i+0x3a>
 800d54c:	2900      	cmp	r1, #0
 800d54e:	f000 80b9 	beq.w	800d6c4 <_printf_i+0x19c>
 800d552:	2958      	cmp	r1, #88	; 0x58
 800d554:	f000 8083 	beq.w	800d65e <_printf_i+0x136>
 800d558:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d55c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d560:	e032      	b.n	800d5c8 <_printf_i+0xa0>
 800d562:	2964      	cmp	r1, #100	; 0x64
 800d564:	d001      	beq.n	800d56a <_printf_i+0x42>
 800d566:	2969      	cmp	r1, #105	; 0x69
 800d568:	d1f6      	bne.n	800d558 <_printf_i+0x30>
 800d56a:	6820      	ldr	r0, [r4, #0]
 800d56c:	6813      	ldr	r3, [r2, #0]
 800d56e:	0605      	lsls	r5, r0, #24
 800d570:	f103 0104 	add.w	r1, r3, #4
 800d574:	d52a      	bpl.n	800d5cc <_printf_i+0xa4>
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	6011      	str	r1, [r2, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	da03      	bge.n	800d586 <_printf_i+0x5e>
 800d57e:	222d      	movs	r2, #45	; 0x2d
 800d580:	425b      	negs	r3, r3
 800d582:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d586:	486f      	ldr	r0, [pc, #444]	; (800d744 <_printf_i+0x21c>)
 800d588:	220a      	movs	r2, #10
 800d58a:	e039      	b.n	800d600 <_printf_i+0xd8>
 800d58c:	2973      	cmp	r1, #115	; 0x73
 800d58e:	f000 809d 	beq.w	800d6cc <_printf_i+0x1a4>
 800d592:	d808      	bhi.n	800d5a6 <_printf_i+0x7e>
 800d594:	296f      	cmp	r1, #111	; 0x6f
 800d596:	d020      	beq.n	800d5da <_printf_i+0xb2>
 800d598:	2970      	cmp	r1, #112	; 0x70
 800d59a:	d1dd      	bne.n	800d558 <_printf_i+0x30>
 800d59c:	6823      	ldr	r3, [r4, #0]
 800d59e:	f043 0320 	orr.w	r3, r3, #32
 800d5a2:	6023      	str	r3, [r4, #0]
 800d5a4:	e003      	b.n	800d5ae <_printf_i+0x86>
 800d5a6:	2975      	cmp	r1, #117	; 0x75
 800d5a8:	d017      	beq.n	800d5da <_printf_i+0xb2>
 800d5aa:	2978      	cmp	r1, #120	; 0x78
 800d5ac:	d1d4      	bne.n	800d558 <_printf_i+0x30>
 800d5ae:	2378      	movs	r3, #120	; 0x78
 800d5b0:	4865      	ldr	r0, [pc, #404]	; (800d748 <_printf_i+0x220>)
 800d5b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d5b6:	e055      	b.n	800d664 <_printf_i+0x13c>
 800d5b8:	6813      	ldr	r3, [r2, #0]
 800d5ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5be:	1d19      	adds	r1, r3, #4
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	6011      	str	r1, [r2, #0]
 800d5c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	e08c      	b.n	800d6e6 <_printf_i+0x1be>
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d5d2:	6011      	str	r1, [r2, #0]
 800d5d4:	bf18      	it	ne
 800d5d6:	b21b      	sxthne	r3, r3
 800d5d8:	e7cf      	b.n	800d57a <_printf_i+0x52>
 800d5da:	6813      	ldr	r3, [r2, #0]
 800d5dc:	6825      	ldr	r5, [r4, #0]
 800d5de:	1d18      	adds	r0, r3, #4
 800d5e0:	6010      	str	r0, [r2, #0]
 800d5e2:	0628      	lsls	r0, r5, #24
 800d5e4:	d501      	bpl.n	800d5ea <_printf_i+0xc2>
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	e002      	b.n	800d5f0 <_printf_i+0xc8>
 800d5ea:	0668      	lsls	r0, r5, #25
 800d5ec:	d5fb      	bpl.n	800d5e6 <_printf_i+0xbe>
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	296f      	cmp	r1, #111	; 0x6f
 800d5f2:	bf14      	ite	ne
 800d5f4:	220a      	movne	r2, #10
 800d5f6:	2208      	moveq	r2, #8
 800d5f8:	4852      	ldr	r0, [pc, #328]	; (800d744 <_printf_i+0x21c>)
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d600:	6865      	ldr	r5, [r4, #4]
 800d602:	2d00      	cmp	r5, #0
 800d604:	60a5      	str	r5, [r4, #8]
 800d606:	f2c0 8095 	blt.w	800d734 <_printf_i+0x20c>
 800d60a:	6821      	ldr	r1, [r4, #0]
 800d60c:	f021 0104 	bic.w	r1, r1, #4
 800d610:	6021      	str	r1, [r4, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d13d      	bne.n	800d692 <_printf_i+0x16a>
 800d616:	2d00      	cmp	r5, #0
 800d618:	f040 808e 	bne.w	800d738 <_printf_i+0x210>
 800d61c:	4665      	mov	r5, ip
 800d61e:	2a08      	cmp	r2, #8
 800d620:	d10b      	bne.n	800d63a <_printf_i+0x112>
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	07db      	lsls	r3, r3, #31
 800d626:	d508      	bpl.n	800d63a <_printf_i+0x112>
 800d628:	6923      	ldr	r3, [r4, #16]
 800d62a:	6862      	ldr	r2, [r4, #4]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	bfde      	ittt	le
 800d630:	2330      	movle	r3, #48	; 0x30
 800d632:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d636:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d63a:	ebac 0305 	sub.w	r3, ip, r5
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	f8cd 8000 	str.w	r8, [sp]
 800d644:	463b      	mov	r3, r7
 800d646:	aa03      	add	r2, sp, #12
 800d648:	4621      	mov	r1, r4
 800d64a:	4630      	mov	r0, r6
 800d64c:	f7ff fef6 	bl	800d43c <_printf_common>
 800d650:	3001      	adds	r0, #1
 800d652:	d14d      	bne.n	800d6f0 <_printf_i+0x1c8>
 800d654:	f04f 30ff 	mov.w	r0, #4294967295
 800d658:	b005      	add	sp, #20
 800d65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d65e:	4839      	ldr	r0, [pc, #228]	; (800d744 <_printf_i+0x21c>)
 800d660:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d664:	6813      	ldr	r3, [r2, #0]
 800d666:	6821      	ldr	r1, [r4, #0]
 800d668:	1d1d      	adds	r5, r3, #4
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6015      	str	r5, [r2, #0]
 800d66e:	060a      	lsls	r2, r1, #24
 800d670:	d50b      	bpl.n	800d68a <_printf_i+0x162>
 800d672:	07ca      	lsls	r2, r1, #31
 800d674:	bf44      	itt	mi
 800d676:	f041 0120 	orrmi.w	r1, r1, #32
 800d67a:	6021      	strmi	r1, [r4, #0]
 800d67c:	b91b      	cbnz	r3, 800d686 <_printf_i+0x15e>
 800d67e:	6822      	ldr	r2, [r4, #0]
 800d680:	f022 0220 	bic.w	r2, r2, #32
 800d684:	6022      	str	r2, [r4, #0]
 800d686:	2210      	movs	r2, #16
 800d688:	e7b7      	b.n	800d5fa <_printf_i+0xd2>
 800d68a:	064d      	lsls	r5, r1, #25
 800d68c:	bf48      	it	mi
 800d68e:	b29b      	uxthmi	r3, r3
 800d690:	e7ef      	b.n	800d672 <_printf_i+0x14a>
 800d692:	4665      	mov	r5, ip
 800d694:	fbb3 f1f2 	udiv	r1, r3, r2
 800d698:	fb02 3311 	mls	r3, r2, r1, r3
 800d69c:	5cc3      	ldrb	r3, [r0, r3]
 800d69e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	2900      	cmp	r1, #0
 800d6a6:	d1f5      	bne.n	800d694 <_printf_i+0x16c>
 800d6a8:	e7b9      	b.n	800d61e <_printf_i+0xf6>
 800d6aa:	6813      	ldr	r3, [r2, #0]
 800d6ac:	6825      	ldr	r5, [r4, #0]
 800d6ae:	1d18      	adds	r0, r3, #4
 800d6b0:	6961      	ldr	r1, [r4, #20]
 800d6b2:	6010      	str	r0, [r2, #0]
 800d6b4:	0628      	lsls	r0, r5, #24
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	d501      	bpl.n	800d6be <_printf_i+0x196>
 800d6ba:	6019      	str	r1, [r3, #0]
 800d6bc:	e002      	b.n	800d6c4 <_printf_i+0x19c>
 800d6be:	066a      	lsls	r2, r5, #25
 800d6c0:	d5fb      	bpl.n	800d6ba <_printf_i+0x192>
 800d6c2:	8019      	strh	r1, [r3, #0]
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	4665      	mov	r5, ip
 800d6c8:	6123      	str	r3, [r4, #16]
 800d6ca:	e7b9      	b.n	800d640 <_printf_i+0x118>
 800d6cc:	6813      	ldr	r3, [r2, #0]
 800d6ce:	1d19      	adds	r1, r3, #4
 800d6d0:	6011      	str	r1, [r2, #0]
 800d6d2:	681d      	ldr	r5, [r3, #0]
 800d6d4:	6862      	ldr	r2, [r4, #4]
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4628      	mov	r0, r5
 800d6da:	f000 feaf 	bl	800e43c <memchr>
 800d6de:	b108      	cbz	r0, 800d6e4 <_printf_i+0x1bc>
 800d6e0:	1b40      	subs	r0, r0, r5
 800d6e2:	6060      	str	r0, [r4, #4]
 800d6e4:	6863      	ldr	r3, [r4, #4]
 800d6e6:	6123      	str	r3, [r4, #16]
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6ee:	e7a7      	b.n	800d640 <_printf_i+0x118>
 800d6f0:	6923      	ldr	r3, [r4, #16]
 800d6f2:	462a      	mov	r2, r5
 800d6f4:	4639      	mov	r1, r7
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	47c0      	blx	r8
 800d6fa:	3001      	adds	r0, #1
 800d6fc:	d0aa      	beq.n	800d654 <_printf_i+0x12c>
 800d6fe:	6823      	ldr	r3, [r4, #0]
 800d700:	079b      	lsls	r3, r3, #30
 800d702:	d413      	bmi.n	800d72c <_printf_i+0x204>
 800d704:	68e0      	ldr	r0, [r4, #12]
 800d706:	9b03      	ldr	r3, [sp, #12]
 800d708:	4298      	cmp	r0, r3
 800d70a:	bfb8      	it	lt
 800d70c:	4618      	movlt	r0, r3
 800d70e:	e7a3      	b.n	800d658 <_printf_i+0x130>
 800d710:	2301      	movs	r3, #1
 800d712:	464a      	mov	r2, r9
 800d714:	4639      	mov	r1, r7
 800d716:	4630      	mov	r0, r6
 800d718:	47c0      	blx	r8
 800d71a:	3001      	adds	r0, #1
 800d71c:	d09a      	beq.n	800d654 <_printf_i+0x12c>
 800d71e:	3501      	adds	r5, #1
 800d720:	68e3      	ldr	r3, [r4, #12]
 800d722:	9a03      	ldr	r2, [sp, #12]
 800d724:	1a9b      	subs	r3, r3, r2
 800d726:	42ab      	cmp	r3, r5
 800d728:	dcf2      	bgt.n	800d710 <_printf_i+0x1e8>
 800d72a:	e7eb      	b.n	800d704 <_printf_i+0x1dc>
 800d72c:	2500      	movs	r5, #0
 800d72e:	f104 0919 	add.w	r9, r4, #25
 800d732:	e7f5      	b.n	800d720 <_printf_i+0x1f8>
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1ac      	bne.n	800d692 <_printf_i+0x16a>
 800d738:	7803      	ldrb	r3, [r0, #0]
 800d73a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d73e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d742:	e76c      	b.n	800d61e <_printf_i+0xf6>
 800d744:	0800fc02 	.word	0x0800fc02
 800d748:	0800fc13 	.word	0x0800fc13

0800d74c <siprintf>:
 800d74c:	b40e      	push	{r1, r2, r3}
 800d74e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d752:	b500      	push	{lr}
 800d754:	b09c      	sub	sp, #112	; 0x70
 800d756:	ab1d      	add	r3, sp, #116	; 0x74
 800d758:	9002      	str	r0, [sp, #8]
 800d75a:	9006      	str	r0, [sp, #24]
 800d75c:	9107      	str	r1, [sp, #28]
 800d75e:	9104      	str	r1, [sp, #16]
 800d760:	4808      	ldr	r0, [pc, #32]	; (800d784 <siprintf+0x38>)
 800d762:	4909      	ldr	r1, [pc, #36]	; (800d788 <siprintf+0x3c>)
 800d764:	f853 2b04 	ldr.w	r2, [r3], #4
 800d768:	9105      	str	r1, [sp, #20]
 800d76a:	6800      	ldr	r0, [r0, #0]
 800d76c:	a902      	add	r1, sp, #8
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	f001 fa68 	bl	800ec44 <_svfiprintf_r>
 800d774:	2200      	movs	r2, #0
 800d776:	9b02      	ldr	r3, [sp, #8]
 800d778:	701a      	strb	r2, [r3, #0]
 800d77a:	b01c      	add	sp, #112	; 0x70
 800d77c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d780:	b003      	add	sp, #12
 800d782:	4770      	bx	lr
 800d784:	20000064 	.word	0x20000064
 800d788:	ffff0208 	.word	0xffff0208

0800d78c <quorem>:
 800d78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d790:	6903      	ldr	r3, [r0, #16]
 800d792:	690c      	ldr	r4, [r1, #16]
 800d794:	4680      	mov	r8, r0
 800d796:	42a3      	cmp	r3, r4
 800d798:	f2c0 8084 	blt.w	800d8a4 <quorem+0x118>
 800d79c:	3c01      	subs	r4, #1
 800d79e:	f101 0714 	add.w	r7, r1, #20
 800d7a2:	f100 0614 	add.w	r6, r0, #20
 800d7a6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d7aa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d7ae:	3501      	adds	r5, #1
 800d7b0:	fbb0 f5f5 	udiv	r5, r0, r5
 800d7b4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d7b8:	eb06 030c 	add.w	r3, r6, ip
 800d7bc:	eb07 090c 	add.w	r9, r7, ip
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	b39d      	cbz	r5, 800d82c <quorem+0xa0>
 800d7c4:	f04f 0a00 	mov.w	sl, #0
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	46b6      	mov	lr, r6
 800d7cc:	46d3      	mov	fp, sl
 800d7ce:	f850 2b04 	ldr.w	r2, [r0], #4
 800d7d2:	b293      	uxth	r3, r2
 800d7d4:	fb05 a303 	mla	r3, r5, r3, sl
 800d7d8:	0c12      	lsrs	r2, r2, #16
 800d7da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d7de:	fb05 a202 	mla	r2, r5, r2, sl
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	ebab 0303 	sub.w	r3, fp, r3
 800d7e8:	f8de b000 	ldr.w	fp, [lr]
 800d7ec:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d7f0:	fa1f fb8b 	uxth.w	fp, fp
 800d7f4:	445b      	add	r3, fp
 800d7f6:	fa1f fb82 	uxth.w	fp, r2
 800d7fa:	f8de 2000 	ldr.w	r2, [lr]
 800d7fe:	4581      	cmp	r9, r0
 800d800:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d804:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d808:	b29b      	uxth	r3, r3
 800d80a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d80e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d812:	f84e 3b04 	str.w	r3, [lr], #4
 800d816:	d2da      	bcs.n	800d7ce <quorem+0x42>
 800d818:	f856 300c 	ldr.w	r3, [r6, ip]
 800d81c:	b933      	cbnz	r3, 800d82c <quorem+0xa0>
 800d81e:	9b01      	ldr	r3, [sp, #4]
 800d820:	3b04      	subs	r3, #4
 800d822:	429e      	cmp	r6, r3
 800d824:	461a      	mov	r2, r3
 800d826:	d331      	bcc.n	800d88c <quorem+0x100>
 800d828:	f8c8 4010 	str.w	r4, [r8, #16]
 800d82c:	4640      	mov	r0, r8
 800d82e:	f001 f833 	bl	800e898 <__mcmp>
 800d832:	2800      	cmp	r0, #0
 800d834:	db26      	blt.n	800d884 <quorem+0xf8>
 800d836:	4630      	mov	r0, r6
 800d838:	f04f 0c00 	mov.w	ip, #0
 800d83c:	3501      	adds	r5, #1
 800d83e:	f857 1b04 	ldr.w	r1, [r7], #4
 800d842:	f8d0 e000 	ldr.w	lr, [r0]
 800d846:	b28b      	uxth	r3, r1
 800d848:	ebac 0303 	sub.w	r3, ip, r3
 800d84c:	fa1f f28e 	uxth.w	r2, lr
 800d850:	4413      	add	r3, r2
 800d852:	0c0a      	lsrs	r2, r1, #16
 800d854:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d858:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d85c:	b29b      	uxth	r3, r3
 800d85e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d862:	45b9      	cmp	r9, r7
 800d864:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d868:	f840 3b04 	str.w	r3, [r0], #4
 800d86c:	d2e7      	bcs.n	800d83e <quorem+0xb2>
 800d86e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d872:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d876:	b92a      	cbnz	r2, 800d884 <quorem+0xf8>
 800d878:	3b04      	subs	r3, #4
 800d87a:	429e      	cmp	r6, r3
 800d87c:	461a      	mov	r2, r3
 800d87e:	d30b      	bcc.n	800d898 <quorem+0x10c>
 800d880:	f8c8 4010 	str.w	r4, [r8, #16]
 800d884:	4628      	mov	r0, r5
 800d886:	b003      	add	sp, #12
 800d888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88c:	6812      	ldr	r2, [r2, #0]
 800d88e:	3b04      	subs	r3, #4
 800d890:	2a00      	cmp	r2, #0
 800d892:	d1c9      	bne.n	800d828 <quorem+0x9c>
 800d894:	3c01      	subs	r4, #1
 800d896:	e7c4      	b.n	800d822 <quorem+0x96>
 800d898:	6812      	ldr	r2, [r2, #0]
 800d89a:	3b04      	subs	r3, #4
 800d89c:	2a00      	cmp	r2, #0
 800d89e:	d1ef      	bne.n	800d880 <quorem+0xf4>
 800d8a0:	3c01      	subs	r4, #1
 800d8a2:	e7ea      	b.n	800d87a <quorem+0xee>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	e7ee      	b.n	800d886 <quorem+0xfa>

0800d8a8 <_dtoa_r>:
 800d8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ac:	4616      	mov	r6, r2
 800d8ae:	461f      	mov	r7, r3
 800d8b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d8b2:	b095      	sub	sp, #84	; 0x54
 800d8b4:	4604      	mov	r4, r0
 800d8b6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800d8ba:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d8be:	b93d      	cbnz	r5, 800d8d0 <_dtoa_r+0x28>
 800d8c0:	2010      	movs	r0, #16
 800d8c2:	f000 fdb3 	bl	800e42c <malloc>
 800d8c6:	6260      	str	r0, [r4, #36]	; 0x24
 800d8c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d8cc:	6005      	str	r5, [r0, #0]
 800d8ce:	60c5      	str	r5, [r0, #12]
 800d8d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8d2:	6819      	ldr	r1, [r3, #0]
 800d8d4:	b151      	cbz	r1, 800d8ec <_dtoa_r+0x44>
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	2301      	movs	r3, #1
 800d8da:	4093      	lsls	r3, r2
 800d8dc:	604a      	str	r2, [r1, #4]
 800d8de:	608b      	str	r3, [r1, #8]
 800d8e0:	4620      	mov	r0, r4
 800d8e2:	f000 fdf8 	bl	800e4d6 <_Bfree>
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	1e3b      	subs	r3, r7, #0
 800d8ee:	bfaf      	iteee	ge
 800d8f0:	2300      	movge	r3, #0
 800d8f2:	2201      	movlt	r2, #1
 800d8f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d8f8:	9303      	strlt	r3, [sp, #12]
 800d8fa:	bfac      	ite	ge
 800d8fc:	f8c8 3000 	strge.w	r3, [r8]
 800d900:	f8c8 2000 	strlt.w	r2, [r8]
 800d904:	4bae      	ldr	r3, [pc, #696]	; (800dbc0 <_dtoa_r+0x318>)
 800d906:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d90a:	ea33 0308 	bics.w	r3, r3, r8
 800d90e:	d11b      	bne.n	800d948 <_dtoa_r+0xa0>
 800d910:	f242 730f 	movw	r3, #9999	; 0x270f
 800d914:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	9b02      	ldr	r3, [sp, #8]
 800d91a:	b923      	cbnz	r3, 800d926 <_dtoa_r+0x7e>
 800d91c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d920:	2800      	cmp	r0, #0
 800d922:	f000 8545 	beq.w	800e3b0 <_dtoa_r+0xb08>
 800d926:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d928:	b953      	cbnz	r3, 800d940 <_dtoa_r+0x98>
 800d92a:	4ba6      	ldr	r3, [pc, #664]	; (800dbc4 <_dtoa_r+0x31c>)
 800d92c:	e021      	b.n	800d972 <_dtoa_r+0xca>
 800d92e:	4ba6      	ldr	r3, [pc, #664]	; (800dbc8 <_dtoa_r+0x320>)
 800d930:	9306      	str	r3, [sp, #24]
 800d932:	3308      	adds	r3, #8
 800d934:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d936:	6013      	str	r3, [r2, #0]
 800d938:	9806      	ldr	r0, [sp, #24]
 800d93a:	b015      	add	sp, #84	; 0x54
 800d93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d940:	4ba0      	ldr	r3, [pc, #640]	; (800dbc4 <_dtoa_r+0x31c>)
 800d942:	9306      	str	r3, [sp, #24]
 800d944:	3303      	adds	r3, #3
 800d946:	e7f5      	b.n	800d934 <_dtoa_r+0x8c>
 800d948:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d94c:	2200      	movs	r2, #0
 800d94e:	2300      	movs	r3, #0
 800d950:	4630      	mov	r0, r6
 800d952:	4639      	mov	r1, r7
 800d954:	f7f3 f864 	bl	8000a20 <__aeabi_dcmpeq>
 800d958:	4682      	mov	sl, r0
 800d95a:	b160      	cbz	r0, 800d976 <_dtoa_r+0xce>
 800d95c:	2301      	movs	r3, #1
 800d95e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d960:	6013      	str	r3, [r2, #0]
 800d962:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d964:	2b00      	cmp	r3, #0
 800d966:	f000 8520 	beq.w	800e3aa <_dtoa_r+0xb02>
 800d96a:	4b98      	ldr	r3, [pc, #608]	; (800dbcc <_dtoa_r+0x324>)
 800d96c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	3b01      	subs	r3, #1
 800d972:	9306      	str	r3, [sp, #24]
 800d974:	e7e0      	b.n	800d938 <_dtoa_r+0x90>
 800d976:	ab12      	add	r3, sp, #72	; 0x48
 800d978:	9301      	str	r3, [sp, #4]
 800d97a:	ab13      	add	r3, sp, #76	; 0x4c
 800d97c:	9300      	str	r3, [sp, #0]
 800d97e:	4632      	mov	r2, r6
 800d980:	463b      	mov	r3, r7
 800d982:	4620      	mov	r0, r4
 800d984:	f001 f800 	bl	800e988 <__d2b>
 800d988:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d98c:	4683      	mov	fp, r0
 800d98e:	2d00      	cmp	r5, #0
 800d990:	d07d      	beq.n	800da8e <_dtoa_r+0x1e6>
 800d992:	46b0      	mov	r8, r6
 800d994:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d998:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800d99c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800d9a0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d9a4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	4b89      	ldr	r3, [pc, #548]	; (800dbd0 <_dtoa_r+0x328>)
 800d9ac:	4640      	mov	r0, r8
 800d9ae:	4649      	mov	r1, r9
 800d9b0:	f7f2 fc16 	bl	80001e0 <__aeabi_dsub>
 800d9b4:	a37c      	add	r3, pc, #496	; (adr r3, 800dba8 <_dtoa_r+0x300>)
 800d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ba:	f7f2 fdc9 	bl	8000550 <__aeabi_dmul>
 800d9be:	a37c      	add	r3, pc, #496	; (adr r3, 800dbb0 <_dtoa_r+0x308>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc0e 	bl	80001e4 <__adddf3>
 800d9c8:	4606      	mov	r6, r0
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	460f      	mov	r7, r1
 800d9ce:	f7f2 fd55 	bl	800047c <__aeabi_i2d>
 800d9d2:	a379      	add	r3, pc, #484	; (adr r3, 800dbb8 <_dtoa_r+0x310>)
 800d9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d8:	f7f2 fdba 	bl	8000550 <__aeabi_dmul>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	4639      	mov	r1, r7
 800d9e4:	f7f2 fbfe 	bl	80001e4 <__adddf3>
 800d9e8:	4606      	mov	r6, r0
 800d9ea:	460f      	mov	r7, r1
 800d9ec:	f7f3 f860 	bl	8000ab0 <__aeabi_d2iz>
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	4682      	mov	sl, r0
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	4639      	mov	r1, r7
 800d9fa:	f7f3 f81b 	bl	8000a34 <__aeabi_dcmplt>
 800d9fe:	b148      	cbz	r0, 800da14 <_dtoa_r+0x16c>
 800da00:	4650      	mov	r0, sl
 800da02:	f7f2 fd3b 	bl	800047c <__aeabi_i2d>
 800da06:	4632      	mov	r2, r6
 800da08:	463b      	mov	r3, r7
 800da0a:	f7f3 f809 	bl	8000a20 <__aeabi_dcmpeq>
 800da0e:	b908      	cbnz	r0, 800da14 <_dtoa_r+0x16c>
 800da10:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da14:	f1ba 0f16 	cmp.w	sl, #22
 800da18:	d85a      	bhi.n	800dad0 <_dtoa_r+0x228>
 800da1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da1e:	496d      	ldr	r1, [pc, #436]	; (800dbd4 <_dtoa_r+0x32c>)
 800da20:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800da24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800da28:	f7f3 f822 	bl	8000a70 <__aeabi_dcmpgt>
 800da2c:	2800      	cmp	r0, #0
 800da2e:	d051      	beq.n	800dad4 <_dtoa_r+0x22c>
 800da30:	2300      	movs	r3, #0
 800da32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da36:	930d      	str	r3, [sp, #52]	; 0x34
 800da38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800da3a:	1b5d      	subs	r5, r3, r5
 800da3c:	1e6b      	subs	r3, r5, #1
 800da3e:	9307      	str	r3, [sp, #28]
 800da40:	bf43      	ittte	mi
 800da42:	2300      	movmi	r3, #0
 800da44:	f1c5 0901 	rsbmi	r9, r5, #1
 800da48:	9307      	strmi	r3, [sp, #28]
 800da4a:	f04f 0900 	movpl.w	r9, #0
 800da4e:	f1ba 0f00 	cmp.w	sl, #0
 800da52:	db41      	blt.n	800dad8 <_dtoa_r+0x230>
 800da54:	9b07      	ldr	r3, [sp, #28]
 800da56:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800da5a:	4453      	add	r3, sl
 800da5c:	9307      	str	r3, [sp, #28]
 800da5e:	2300      	movs	r3, #0
 800da60:	9308      	str	r3, [sp, #32]
 800da62:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800da64:	2b09      	cmp	r3, #9
 800da66:	f200 808f 	bhi.w	800db88 <_dtoa_r+0x2e0>
 800da6a:	2b05      	cmp	r3, #5
 800da6c:	bfc4      	itt	gt
 800da6e:	3b04      	subgt	r3, #4
 800da70:	931e      	strgt	r3, [sp, #120]	; 0x78
 800da72:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800da74:	bfc8      	it	gt
 800da76:	2500      	movgt	r5, #0
 800da78:	f1a3 0302 	sub.w	r3, r3, #2
 800da7c:	bfd8      	it	le
 800da7e:	2501      	movle	r5, #1
 800da80:	2b03      	cmp	r3, #3
 800da82:	f200 808d 	bhi.w	800dba0 <_dtoa_r+0x2f8>
 800da86:	e8df f003 	tbb	[pc, r3]
 800da8a:	7d7b      	.short	0x7d7b
 800da8c:	6f2f      	.short	0x6f2f
 800da8e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800da92:	441d      	add	r5, r3
 800da94:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800da98:	2820      	cmp	r0, #32
 800da9a:	dd13      	ble.n	800dac4 <_dtoa_r+0x21c>
 800da9c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800daa0:	9b02      	ldr	r3, [sp, #8]
 800daa2:	fa08 f800 	lsl.w	r8, r8, r0
 800daa6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800daaa:	fa23 f000 	lsr.w	r0, r3, r0
 800daae:	ea48 0000 	orr.w	r0, r8, r0
 800dab2:	f7f2 fcd3 	bl	800045c <__aeabi_ui2d>
 800dab6:	2301      	movs	r3, #1
 800dab8:	4680      	mov	r8, r0
 800daba:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800dabe:	3d01      	subs	r5, #1
 800dac0:	9310      	str	r3, [sp, #64]	; 0x40
 800dac2:	e771      	b.n	800d9a8 <_dtoa_r+0x100>
 800dac4:	9b02      	ldr	r3, [sp, #8]
 800dac6:	f1c0 0020 	rsb	r0, r0, #32
 800daca:	fa03 f000 	lsl.w	r0, r3, r0
 800dace:	e7f0      	b.n	800dab2 <_dtoa_r+0x20a>
 800dad0:	2301      	movs	r3, #1
 800dad2:	e7b0      	b.n	800da36 <_dtoa_r+0x18e>
 800dad4:	900d      	str	r0, [sp, #52]	; 0x34
 800dad6:	e7af      	b.n	800da38 <_dtoa_r+0x190>
 800dad8:	f1ca 0300 	rsb	r3, sl, #0
 800dadc:	9308      	str	r3, [sp, #32]
 800dade:	2300      	movs	r3, #0
 800dae0:	eba9 090a 	sub.w	r9, r9, sl
 800dae4:	930c      	str	r3, [sp, #48]	; 0x30
 800dae6:	e7bc      	b.n	800da62 <_dtoa_r+0x1ba>
 800dae8:	2301      	movs	r3, #1
 800daea:	9309      	str	r3, [sp, #36]	; 0x24
 800daec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800daee:	2b00      	cmp	r3, #0
 800daf0:	dd74      	ble.n	800dbdc <_dtoa_r+0x334>
 800daf2:	4698      	mov	r8, r3
 800daf4:	9304      	str	r3, [sp, #16]
 800daf6:	2200      	movs	r2, #0
 800daf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dafa:	6072      	str	r2, [r6, #4]
 800dafc:	2204      	movs	r2, #4
 800dafe:	f102 0014 	add.w	r0, r2, #20
 800db02:	4298      	cmp	r0, r3
 800db04:	6871      	ldr	r1, [r6, #4]
 800db06:	d96e      	bls.n	800dbe6 <_dtoa_r+0x33e>
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 fcb0 	bl	800e46e <_Balloc>
 800db0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db10:	6030      	str	r0, [r6, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	f1b8 0f0e 	cmp.w	r8, #14
 800db18:	9306      	str	r3, [sp, #24]
 800db1a:	f200 80ed 	bhi.w	800dcf8 <_dtoa_r+0x450>
 800db1e:	2d00      	cmp	r5, #0
 800db20:	f000 80ea 	beq.w	800dcf8 <_dtoa_r+0x450>
 800db24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db28:	f1ba 0f00 	cmp.w	sl, #0
 800db2c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800db30:	dd77      	ble.n	800dc22 <_dtoa_r+0x37a>
 800db32:	4a28      	ldr	r2, [pc, #160]	; (800dbd4 <_dtoa_r+0x32c>)
 800db34:	f00a 030f 	and.w	r3, sl, #15
 800db38:	ea4f 162a 	mov.w	r6, sl, asr #4
 800db3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db40:	06f0      	lsls	r0, r6, #27
 800db42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db46:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800db4a:	d568      	bpl.n	800dc1e <_dtoa_r+0x376>
 800db4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800db50:	4b21      	ldr	r3, [pc, #132]	; (800dbd8 <_dtoa_r+0x330>)
 800db52:	2503      	movs	r5, #3
 800db54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db58:	f7f2 fe24 	bl	80007a4 <__aeabi_ddiv>
 800db5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db60:	f006 060f 	and.w	r6, r6, #15
 800db64:	4f1c      	ldr	r7, [pc, #112]	; (800dbd8 <_dtoa_r+0x330>)
 800db66:	e04f      	b.n	800dc08 <_dtoa_r+0x360>
 800db68:	2301      	movs	r3, #1
 800db6a:	9309      	str	r3, [sp, #36]	; 0x24
 800db6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800db6e:	4453      	add	r3, sl
 800db70:	f103 0801 	add.w	r8, r3, #1
 800db74:	9304      	str	r3, [sp, #16]
 800db76:	4643      	mov	r3, r8
 800db78:	2b01      	cmp	r3, #1
 800db7a:	bfb8      	it	lt
 800db7c:	2301      	movlt	r3, #1
 800db7e:	e7ba      	b.n	800daf6 <_dtoa_r+0x24e>
 800db80:	2300      	movs	r3, #0
 800db82:	e7b2      	b.n	800daea <_dtoa_r+0x242>
 800db84:	2300      	movs	r3, #0
 800db86:	e7f0      	b.n	800db6a <_dtoa_r+0x2c2>
 800db88:	2501      	movs	r5, #1
 800db8a:	2300      	movs	r3, #0
 800db8c:	9509      	str	r5, [sp, #36]	; 0x24
 800db8e:	931e      	str	r3, [sp, #120]	; 0x78
 800db90:	f04f 33ff 	mov.w	r3, #4294967295
 800db94:	2200      	movs	r2, #0
 800db96:	9304      	str	r3, [sp, #16]
 800db98:	4698      	mov	r8, r3
 800db9a:	2312      	movs	r3, #18
 800db9c:	921f      	str	r2, [sp, #124]	; 0x7c
 800db9e:	e7aa      	b.n	800daf6 <_dtoa_r+0x24e>
 800dba0:	2301      	movs	r3, #1
 800dba2:	9309      	str	r3, [sp, #36]	; 0x24
 800dba4:	e7f4      	b.n	800db90 <_dtoa_r+0x2e8>
 800dba6:	bf00      	nop
 800dba8:	636f4361 	.word	0x636f4361
 800dbac:	3fd287a7 	.word	0x3fd287a7
 800dbb0:	8b60c8b3 	.word	0x8b60c8b3
 800dbb4:	3fc68a28 	.word	0x3fc68a28
 800dbb8:	509f79fb 	.word	0x509f79fb
 800dbbc:	3fd34413 	.word	0x3fd34413
 800dbc0:	7ff00000 	.word	0x7ff00000
 800dbc4:	0800fc2d 	.word	0x0800fc2d
 800dbc8:	0800fc24 	.word	0x0800fc24
 800dbcc:	0800fc01 	.word	0x0800fc01
 800dbd0:	3ff80000 	.word	0x3ff80000
 800dbd4:	0800fc60 	.word	0x0800fc60
 800dbd8:	0800fc38 	.word	0x0800fc38
 800dbdc:	2301      	movs	r3, #1
 800dbde:	9304      	str	r3, [sp, #16]
 800dbe0:	4698      	mov	r8, r3
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	e7da      	b.n	800db9c <_dtoa_r+0x2f4>
 800dbe6:	3101      	adds	r1, #1
 800dbe8:	6071      	str	r1, [r6, #4]
 800dbea:	0052      	lsls	r2, r2, #1
 800dbec:	e787      	b.n	800dafe <_dtoa_r+0x256>
 800dbee:	07f1      	lsls	r1, r6, #31
 800dbf0:	d508      	bpl.n	800dc04 <_dtoa_r+0x35c>
 800dbf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dbf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbfa:	f7f2 fca9 	bl	8000550 <__aeabi_dmul>
 800dbfe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dc02:	3501      	adds	r5, #1
 800dc04:	1076      	asrs	r6, r6, #1
 800dc06:	3708      	adds	r7, #8
 800dc08:	2e00      	cmp	r6, #0
 800dc0a:	d1f0      	bne.n	800dbee <_dtoa_r+0x346>
 800dc0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dc10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc14:	f7f2 fdc6 	bl	80007a4 <__aeabi_ddiv>
 800dc18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc1c:	e01b      	b.n	800dc56 <_dtoa_r+0x3ae>
 800dc1e:	2502      	movs	r5, #2
 800dc20:	e7a0      	b.n	800db64 <_dtoa_r+0x2bc>
 800dc22:	f000 80a4 	beq.w	800dd6e <_dtoa_r+0x4c6>
 800dc26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800dc2a:	f1ca 0600 	rsb	r6, sl, #0
 800dc2e:	4ba0      	ldr	r3, [pc, #640]	; (800deb0 <_dtoa_r+0x608>)
 800dc30:	f006 020f 	and.w	r2, r6, #15
 800dc34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc3c:	f7f2 fc88 	bl	8000550 <__aeabi_dmul>
 800dc40:	2502      	movs	r5, #2
 800dc42:	2300      	movs	r3, #0
 800dc44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc48:	4f9a      	ldr	r7, [pc, #616]	; (800deb4 <_dtoa_r+0x60c>)
 800dc4a:	1136      	asrs	r6, r6, #4
 800dc4c:	2e00      	cmp	r6, #0
 800dc4e:	f040 8083 	bne.w	800dd58 <_dtoa_r+0x4b0>
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d1e0      	bne.n	800dc18 <_dtoa_r+0x370>
 800dc56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f000 808a 	beq.w	800dd72 <_dtoa_r+0x4ca>
 800dc5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc62:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800dc66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	4b92      	ldr	r3, [pc, #584]	; (800deb8 <_dtoa_r+0x610>)
 800dc6e:	f7f2 fee1 	bl	8000a34 <__aeabi_dcmplt>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d07d      	beq.n	800dd72 <_dtoa_r+0x4ca>
 800dc76:	f1b8 0f00 	cmp.w	r8, #0
 800dc7a:	d07a      	beq.n	800dd72 <_dtoa_r+0x4ca>
 800dc7c:	9b04      	ldr	r3, [sp, #16]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	dd36      	ble.n	800dcf0 <_dtoa_r+0x448>
 800dc82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dc86:	2200      	movs	r2, #0
 800dc88:	4b8c      	ldr	r3, [pc, #560]	; (800debc <_dtoa_r+0x614>)
 800dc8a:	f7f2 fc61 	bl	8000550 <__aeabi_dmul>
 800dc8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc92:	9e04      	ldr	r6, [sp, #16]
 800dc94:	f10a 37ff 	add.w	r7, sl, #4294967295
 800dc98:	3501      	adds	r5, #1
 800dc9a:	4628      	mov	r0, r5
 800dc9c:	f7f2 fbee 	bl	800047c <__aeabi_i2d>
 800dca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dca4:	f7f2 fc54 	bl	8000550 <__aeabi_dmul>
 800dca8:	2200      	movs	r2, #0
 800dcaa:	4b85      	ldr	r3, [pc, #532]	; (800dec0 <_dtoa_r+0x618>)
 800dcac:	f7f2 fa9a 	bl	80001e4 <__adddf3>
 800dcb0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800dcb4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dcb8:	950b      	str	r5, [sp, #44]	; 0x2c
 800dcba:	2e00      	cmp	r6, #0
 800dcbc:	d15c      	bne.n	800dd78 <_dtoa_r+0x4d0>
 800dcbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	4b7f      	ldr	r3, [pc, #508]	; (800dec4 <_dtoa_r+0x61c>)
 800dcc6:	f7f2 fa8b 	bl	80001e0 <__aeabi_dsub>
 800dcca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dccc:	462b      	mov	r3, r5
 800dcce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dcd2:	f7f2 fecd 	bl	8000a70 <__aeabi_dcmpgt>
 800dcd6:	2800      	cmp	r0, #0
 800dcd8:	f040 8281 	bne.w	800e1de <_dtoa_r+0x936>
 800dcdc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dce2:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dce6:	f7f2 fea5 	bl	8000a34 <__aeabi_dcmplt>
 800dcea:	2800      	cmp	r0, #0
 800dcec:	f040 8275 	bne.w	800e1da <_dtoa_r+0x932>
 800dcf0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800dcf4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dcf8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	f2c0 814b 	blt.w	800df96 <_dtoa_r+0x6ee>
 800dd00:	f1ba 0f0e 	cmp.w	sl, #14
 800dd04:	f300 8147 	bgt.w	800df96 <_dtoa_r+0x6ee>
 800dd08:	4b69      	ldr	r3, [pc, #420]	; (800deb0 <_dtoa_r+0x608>)
 800dd0a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dd16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f280 80d7 	bge.w	800decc <_dtoa_r+0x624>
 800dd1e:	f1b8 0f00 	cmp.w	r8, #0
 800dd22:	f300 80d3 	bgt.w	800decc <_dtoa_r+0x624>
 800dd26:	f040 8257 	bne.w	800e1d8 <_dtoa_r+0x930>
 800dd2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	4b64      	ldr	r3, [pc, #400]	; (800dec4 <_dtoa_r+0x61c>)
 800dd32:	f7f2 fc0d 	bl	8000550 <__aeabi_dmul>
 800dd36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dd3a:	f7f2 fe8f 	bl	8000a5c <__aeabi_dcmpge>
 800dd3e:	4646      	mov	r6, r8
 800dd40:	4647      	mov	r7, r8
 800dd42:	2800      	cmp	r0, #0
 800dd44:	f040 822d 	bne.w	800e1a2 <_dtoa_r+0x8fa>
 800dd48:	9b06      	ldr	r3, [sp, #24]
 800dd4a:	9a06      	ldr	r2, [sp, #24]
 800dd4c:	1c5d      	adds	r5, r3, #1
 800dd4e:	2331      	movs	r3, #49	; 0x31
 800dd50:	f10a 0a01 	add.w	sl, sl, #1
 800dd54:	7013      	strb	r3, [r2, #0]
 800dd56:	e228      	b.n	800e1aa <_dtoa_r+0x902>
 800dd58:	07f2      	lsls	r2, r6, #31
 800dd5a:	d505      	bpl.n	800dd68 <_dtoa_r+0x4c0>
 800dd5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd60:	f7f2 fbf6 	bl	8000550 <__aeabi_dmul>
 800dd64:	2301      	movs	r3, #1
 800dd66:	3501      	adds	r5, #1
 800dd68:	1076      	asrs	r6, r6, #1
 800dd6a:	3708      	adds	r7, #8
 800dd6c:	e76e      	b.n	800dc4c <_dtoa_r+0x3a4>
 800dd6e:	2502      	movs	r5, #2
 800dd70:	e771      	b.n	800dc56 <_dtoa_r+0x3ae>
 800dd72:	4657      	mov	r7, sl
 800dd74:	4646      	mov	r6, r8
 800dd76:	e790      	b.n	800dc9a <_dtoa_r+0x3f2>
 800dd78:	4b4d      	ldr	r3, [pc, #308]	; (800deb0 <_dtoa_r+0x608>)
 800dd7a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dd7e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800dd82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d048      	beq.n	800de1a <_dtoa_r+0x572>
 800dd88:	4602      	mov	r2, r0
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	494e      	ldr	r1, [pc, #312]	; (800dec8 <_dtoa_r+0x620>)
 800dd90:	f7f2 fd08 	bl	80007a4 <__aeabi_ddiv>
 800dd94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dd98:	f7f2 fa22 	bl	80001e0 <__aeabi_dsub>
 800dd9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800dda0:	9d06      	ldr	r5, [sp, #24]
 800dda2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dda6:	f7f2 fe83 	bl	8000ab0 <__aeabi_d2iz>
 800ddaa:	9011      	str	r0, [sp, #68]	; 0x44
 800ddac:	f7f2 fb66 	bl	800047c <__aeabi_i2d>
 800ddb0:	4602      	mov	r2, r0
 800ddb2:	460b      	mov	r3, r1
 800ddb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddb8:	f7f2 fa12 	bl	80001e0 <__aeabi_dsub>
 800ddbc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ddc2:	3330      	adds	r3, #48	; 0x30
 800ddc4:	f805 3b01 	strb.w	r3, [r5], #1
 800ddc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ddcc:	f7f2 fe32 	bl	8000a34 <__aeabi_dcmplt>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	d163      	bne.n	800de9c <_dtoa_r+0x5f4>
 800ddd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddd8:	2000      	movs	r0, #0
 800ddda:	4937      	ldr	r1, [pc, #220]	; (800deb8 <_dtoa_r+0x610>)
 800dddc:	f7f2 fa00 	bl	80001e0 <__aeabi_dsub>
 800dde0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dde4:	f7f2 fe26 	bl	8000a34 <__aeabi_dcmplt>
 800dde8:	2800      	cmp	r0, #0
 800ddea:	f040 80b5 	bne.w	800df58 <_dtoa_r+0x6b0>
 800ddee:	9b06      	ldr	r3, [sp, #24]
 800ddf0:	1aeb      	subs	r3, r5, r3
 800ddf2:	429e      	cmp	r6, r3
 800ddf4:	f77f af7c 	ble.w	800dcf0 <_dtoa_r+0x448>
 800ddf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	4b2f      	ldr	r3, [pc, #188]	; (800debc <_dtoa_r+0x614>)
 800de00:	f7f2 fba6 	bl	8000550 <__aeabi_dmul>
 800de04:	2200      	movs	r2, #0
 800de06:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800de0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de0e:	4b2b      	ldr	r3, [pc, #172]	; (800debc <_dtoa_r+0x614>)
 800de10:	f7f2 fb9e 	bl	8000550 <__aeabi_dmul>
 800de14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de18:	e7c3      	b.n	800dda2 <_dtoa_r+0x4fa>
 800de1a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de1e:	f7f2 fb97 	bl	8000550 <__aeabi_dmul>
 800de22:	9b06      	ldr	r3, [sp, #24]
 800de24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800de28:	199d      	adds	r5, r3, r6
 800de2a:	461e      	mov	r6, r3
 800de2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de30:	f7f2 fe3e 	bl	8000ab0 <__aeabi_d2iz>
 800de34:	9011      	str	r0, [sp, #68]	; 0x44
 800de36:	f7f2 fb21 	bl	800047c <__aeabi_i2d>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de42:	f7f2 f9cd 	bl	80001e0 <__aeabi_dsub>
 800de46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800de48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de4c:	3330      	adds	r3, #48	; 0x30
 800de4e:	f806 3b01 	strb.w	r3, [r6], #1
 800de52:	42ae      	cmp	r6, r5
 800de54:	f04f 0200 	mov.w	r2, #0
 800de58:	d124      	bne.n	800dea4 <_dtoa_r+0x5fc>
 800de5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800de5e:	4b1a      	ldr	r3, [pc, #104]	; (800dec8 <_dtoa_r+0x620>)
 800de60:	f7f2 f9c0 	bl	80001e4 <__adddf3>
 800de64:	4602      	mov	r2, r0
 800de66:	460b      	mov	r3, r1
 800de68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de6c:	f7f2 fe00 	bl	8000a70 <__aeabi_dcmpgt>
 800de70:	2800      	cmp	r0, #0
 800de72:	d171      	bne.n	800df58 <_dtoa_r+0x6b0>
 800de74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800de78:	2000      	movs	r0, #0
 800de7a:	4913      	ldr	r1, [pc, #76]	; (800dec8 <_dtoa_r+0x620>)
 800de7c:	f7f2 f9b0 	bl	80001e0 <__aeabi_dsub>
 800de80:	4602      	mov	r2, r0
 800de82:	460b      	mov	r3, r1
 800de84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de88:	f7f2 fdd4 	bl	8000a34 <__aeabi_dcmplt>
 800de8c:	2800      	cmp	r0, #0
 800de8e:	f43f af2f 	beq.w	800dcf0 <_dtoa_r+0x448>
 800de92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de96:	1e6a      	subs	r2, r5, #1
 800de98:	2b30      	cmp	r3, #48	; 0x30
 800de9a:	d001      	beq.n	800dea0 <_dtoa_r+0x5f8>
 800de9c:	46ba      	mov	sl, r7
 800de9e:	e04a      	b.n	800df36 <_dtoa_r+0x68e>
 800dea0:	4615      	mov	r5, r2
 800dea2:	e7f6      	b.n	800de92 <_dtoa_r+0x5ea>
 800dea4:	4b05      	ldr	r3, [pc, #20]	; (800debc <_dtoa_r+0x614>)
 800dea6:	f7f2 fb53 	bl	8000550 <__aeabi_dmul>
 800deaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800deae:	e7bd      	b.n	800de2c <_dtoa_r+0x584>
 800deb0:	0800fc60 	.word	0x0800fc60
 800deb4:	0800fc38 	.word	0x0800fc38
 800deb8:	3ff00000 	.word	0x3ff00000
 800debc:	40240000 	.word	0x40240000
 800dec0:	401c0000 	.word	0x401c0000
 800dec4:	40140000 	.word	0x40140000
 800dec8:	3fe00000 	.word	0x3fe00000
 800decc:	9d06      	ldr	r5, [sp, #24]
 800dece:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ded2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ded6:	4630      	mov	r0, r6
 800ded8:	4639      	mov	r1, r7
 800deda:	f7f2 fc63 	bl	80007a4 <__aeabi_ddiv>
 800dede:	f7f2 fde7 	bl	8000ab0 <__aeabi_d2iz>
 800dee2:	4681      	mov	r9, r0
 800dee4:	f7f2 faca 	bl	800047c <__aeabi_i2d>
 800dee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800deec:	f7f2 fb30 	bl	8000550 <__aeabi_dmul>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	f7f2 f972 	bl	80001e0 <__aeabi_dsub>
 800defc:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800df00:	f805 6b01 	strb.w	r6, [r5], #1
 800df04:	9e06      	ldr	r6, [sp, #24]
 800df06:	4602      	mov	r2, r0
 800df08:	1bae      	subs	r6, r5, r6
 800df0a:	45b0      	cmp	r8, r6
 800df0c:	460b      	mov	r3, r1
 800df0e:	d135      	bne.n	800df7c <_dtoa_r+0x6d4>
 800df10:	f7f2 f968 	bl	80001e4 <__adddf3>
 800df14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df18:	4606      	mov	r6, r0
 800df1a:	460f      	mov	r7, r1
 800df1c:	f7f2 fda8 	bl	8000a70 <__aeabi_dcmpgt>
 800df20:	b9c8      	cbnz	r0, 800df56 <_dtoa_r+0x6ae>
 800df22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df26:	4630      	mov	r0, r6
 800df28:	4639      	mov	r1, r7
 800df2a:	f7f2 fd79 	bl	8000a20 <__aeabi_dcmpeq>
 800df2e:	b110      	cbz	r0, 800df36 <_dtoa_r+0x68e>
 800df30:	f019 0f01 	tst.w	r9, #1
 800df34:	d10f      	bne.n	800df56 <_dtoa_r+0x6ae>
 800df36:	4659      	mov	r1, fp
 800df38:	4620      	mov	r0, r4
 800df3a:	f000 facc 	bl	800e4d6 <_Bfree>
 800df3e:	2300      	movs	r3, #0
 800df40:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800df42:	702b      	strb	r3, [r5, #0]
 800df44:	f10a 0301 	add.w	r3, sl, #1
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	f43f acf3 	beq.w	800d938 <_dtoa_r+0x90>
 800df52:	601d      	str	r5, [r3, #0]
 800df54:	e4f0      	b.n	800d938 <_dtoa_r+0x90>
 800df56:	4657      	mov	r7, sl
 800df58:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800df5c:	1e6b      	subs	r3, r5, #1
 800df5e:	2a39      	cmp	r2, #57	; 0x39
 800df60:	d106      	bne.n	800df70 <_dtoa_r+0x6c8>
 800df62:	9a06      	ldr	r2, [sp, #24]
 800df64:	429a      	cmp	r2, r3
 800df66:	d107      	bne.n	800df78 <_dtoa_r+0x6d0>
 800df68:	2330      	movs	r3, #48	; 0x30
 800df6a:	7013      	strb	r3, [r2, #0]
 800df6c:	4613      	mov	r3, r2
 800df6e:	3701      	adds	r7, #1
 800df70:	781a      	ldrb	r2, [r3, #0]
 800df72:	3201      	adds	r2, #1
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	e791      	b.n	800de9c <_dtoa_r+0x5f4>
 800df78:	461d      	mov	r5, r3
 800df7a:	e7ed      	b.n	800df58 <_dtoa_r+0x6b0>
 800df7c:	2200      	movs	r2, #0
 800df7e:	4b99      	ldr	r3, [pc, #612]	; (800e1e4 <_dtoa_r+0x93c>)
 800df80:	f7f2 fae6 	bl	8000550 <__aeabi_dmul>
 800df84:	2200      	movs	r2, #0
 800df86:	2300      	movs	r3, #0
 800df88:	4606      	mov	r6, r0
 800df8a:	460f      	mov	r7, r1
 800df8c:	f7f2 fd48 	bl	8000a20 <__aeabi_dcmpeq>
 800df90:	2800      	cmp	r0, #0
 800df92:	d09e      	beq.n	800ded2 <_dtoa_r+0x62a>
 800df94:	e7cf      	b.n	800df36 <_dtoa_r+0x68e>
 800df96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800df98:	2a00      	cmp	r2, #0
 800df9a:	f000 8088 	beq.w	800e0ae <_dtoa_r+0x806>
 800df9e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800dfa0:	2a01      	cmp	r2, #1
 800dfa2:	dc6d      	bgt.n	800e080 <_dtoa_r+0x7d8>
 800dfa4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dfa6:	2a00      	cmp	r2, #0
 800dfa8:	d066      	beq.n	800e078 <_dtoa_r+0x7d0>
 800dfaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dfae:	464d      	mov	r5, r9
 800dfb0:	9e08      	ldr	r6, [sp, #32]
 800dfb2:	9a07      	ldr	r2, [sp, #28]
 800dfb4:	2101      	movs	r1, #1
 800dfb6:	441a      	add	r2, r3
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4499      	add	r9, r3
 800dfbc:	9207      	str	r2, [sp, #28]
 800dfbe:	f000 fb2a 	bl	800e616 <__i2b>
 800dfc2:	4607      	mov	r7, r0
 800dfc4:	2d00      	cmp	r5, #0
 800dfc6:	dd0b      	ble.n	800dfe0 <_dtoa_r+0x738>
 800dfc8:	9b07      	ldr	r3, [sp, #28]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	dd08      	ble.n	800dfe0 <_dtoa_r+0x738>
 800dfce:	42ab      	cmp	r3, r5
 800dfd0:	bfa8      	it	ge
 800dfd2:	462b      	movge	r3, r5
 800dfd4:	9a07      	ldr	r2, [sp, #28]
 800dfd6:	eba9 0903 	sub.w	r9, r9, r3
 800dfda:	1aed      	subs	r5, r5, r3
 800dfdc:	1ad3      	subs	r3, r2, r3
 800dfde:	9307      	str	r3, [sp, #28]
 800dfe0:	9b08      	ldr	r3, [sp, #32]
 800dfe2:	b1eb      	cbz	r3, 800e020 <_dtoa_r+0x778>
 800dfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d065      	beq.n	800e0b6 <_dtoa_r+0x80e>
 800dfea:	b18e      	cbz	r6, 800e010 <_dtoa_r+0x768>
 800dfec:	4639      	mov	r1, r7
 800dfee:	4632      	mov	r2, r6
 800dff0:	4620      	mov	r0, r4
 800dff2:	f000 fbaf 	bl	800e754 <__pow5mult>
 800dff6:	465a      	mov	r2, fp
 800dff8:	4601      	mov	r1, r0
 800dffa:	4607      	mov	r7, r0
 800dffc:	4620      	mov	r0, r4
 800dffe:	f000 fb13 	bl	800e628 <__multiply>
 800e002:	4659      	mov	r1, fp
 800e004:	900a      	str	r0, [sp, #40]	; 0x28
 800e006:	4620      	mov	r0, r4
 800e008:	f000 fa65 	bl	800e4d6 <_Bfree>
 800e00c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e00e:	469b      	mov	fp, r3
 800e010:	9b08      	ldr	r3, [sp, #32]
 800e012:	1b9a      	subs	r2, r3, r6
 800e014:	d004      	beq.n	800e020 <_dtoa_r+0x778>
 800e016:	4659      	mov	r1, fp
 800e018:	4620      	mov	r0, r4
 800e01a:	f000 fb9b 	bl	800e754 <__pow5mult>
 800e01e:	4683      	mov	fp, r0
 800e020:	2101      	movs	r1, #1
 800e022:	4620      	mov	r0, r4
 800e024:	f000 faf7 	bl	800e616 <__i2b>
 800e028:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e02a:	4606      	mov	r6, r0
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 81c6 	beq.w	800e3be <_dtoa_r+0xb16>
 800e032:	461a      	mov	r2, r3
 800e034:	4601      	mov	r1, r0
 800e036:	4620      	mov	r0, r4
 800e038:	f000 fb8c 	bl	800e754 <__pow5mult>
 800e03c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e03e:	4606      	mov	r6, r0
 800e040:	2b01      	cmp	r3, #1
 800e042:	dc3e      	bgt.n	800e0c2 <_dtoa_r+0x81a>
 800e044:	9b02      	ldr	r3, [sp, #8]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d137      	bne.n	800e0ba <_dtoa_r+0x812>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e050:	2b00      	cmp	r3, #0
 800e052:	d134      	bne.n	800e0be <_dtoa_r+0x816>
 800e054:	9b03      	ldr	r3, [sp, #12]
 800e056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e05a:	0d1b      	lsrs	r3, r3, #20
 800e05c:	051b      	lsls	r3, r3, #20
 800e05e:	b12b      	cbz	r3, 800e06c <_dtoa_r+0x7c4>
 800e060:	9b07      	ldr	r3, [sp, #28]
 800e062:	f109 0901 	add.w	r9, r9, #1
 800e066:	3301      	adds	r3, #1
 800e068:	9307      	str	r3, [sp, #28]
 800e06a:	2301      	movs	r3, #1
 800e06c:	9308      	str	r3, [sp, #32]
 800e06e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e070:	2b00      	cmp	r3, #0
 800e072:	d128      	bne.n	800e0c6 <_dtoa_r+0x81e>
 800e074:	2001      	movs	r0, #1
 800e076:	e02e      	b.n	800e0d6 <_dtoa_r+0x82e>
 800e078:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e07a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e07e:	e796      	b.n	800dfae <_dtoa_r+0x706>
 800e080:	9b08      	ldr	r3, [sp, #32]
 800e082:	f108 36ff 	add.w	r6, r8, #4294967295
 800e086:	42b3      	cmp	r3, r6
 800e088:	bfb7      	itett	lt
 800e08a:	9b08      	ldrlt	r3, [sp, #32]
 800e08c:	1b9e      	subge	r6, r3, r6
 800e08e:	1af2      	sublt	r2, r6, r3
 800e090:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800e092:	bfbf      	itttt	lt
 800e094:	9608      	strlt	r6, [sp, #32]
 800e096:	189b      	addlt	r3, r3, r2
 800e098:	930c      	strlt	r3, [sp, #48]	; 0x30
 800e09a:	2600      	movlt	r6, #0
 800e09c:	f1b8 0f00 	cmp.w	r8, #0
 800e0a0:	bfb9      	ittee	lt
 800e0a2:	eba9 0508 	sublt.w	r5, r9, r8
 800e0a6:	2300      	movlt	r3, #0
 800e0a8:	464d      	movge	r5, r9
 800e0aa:	4643      	movge	r3, r8
 800e0ac:	e781      	b.n	800dfb2 <_dtoa_r+0x70a>
 800e0ae:	9e08      	ldr	r6, [sp, #32]
 800e0b0:	464d      	mov	r5, r9
 800e0b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e0b4:	e786      	b.n	800dfc4 <_dtoa_r+0x71c>
 800e0b6:	9a08      	ldr	r2, [sp, #32]
 800e0b8:	e7ad      	b.n	800e016 <_dtoa_r+0x76e>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	e7d6      	b.n	800e06c <_dtoa_r+0x7c4>
 800e0be:	9b02      	ldr	r3, [sp, #8]
 800e0c0:	e7d4      	b.n	800e06c <_dtoa_r+0x7c4>
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	9308      	str	r3, [sp, #32]
 800e0c6:	6933      	ldr	r3, [r6, #16]
 800e0c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e0cc:	6918      	ldr	r0, [r3, #16]
 800e0ce:	f000 fa54 	bl	800e57a <__hi0bits>
 800e0d2:	f1c0 0020 	rsb	r0, r0, #32
 800e0d6:	9b07      	ldr	r3, [sp, #28]
 800e0d8:	4418      	add	r0, r3
 800e0da:	f010 001f 	ands.w	r0, r0, #31
 800e0de:	d047      	beq.n	800e170 <_dtoa_r+0x8c8>
 800e0e0:	f1c0 0320 	rsb	r3, r0, #32
 800e0e4:	2b04      	cmp	r3, #4
 800e0e6:	dd3b      	ble.n	800e160 <_dtoa_r+0x8b8>
 800e0e8:	9b07      	ldr	r3, [sp, #28]
 800e0ea:	f1c0 001c 	rsb	r0, r0, #28
 800e0ee:	4481      	add	r9, r0
 800e0f0:	4405      	add	r5, r0
 800e0f2:	4403      	add	r3, r0
 800e0f4:	9307      	str	r3, [sp, #28]
 800e0f6:	f1b9 0f00 	cmp.w	r9, #0
 800e0fa:	dd05      	ble.n	800e108 <_dtoa_r+0x860>
 800e0fc:	4659      	mov	r1, fp
 800e0fe:	464a      	mov	r2, r9
 800e100:	4620      	mov	r0, r4
 800e102:	f000 fb75 	bl	800e7f0 <__lshift>
 800e106:	4683      	mov	fp, r0
 800e108:	9b07      	ldr	r3, [sp, #28]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dd05      	ble.n	800e11a <_dtoa_r+0x872>
 800e10e:	4631      	mov	r1, r6
 800e110:	461a      	mov	r2, r3
 800e112:	4620      	mov	r0, r4
 800e114:	f000 fb6c 	bl	800e7f0 <__lshift>
 800e118:	4606      	mov	r6, r0
 800e11a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e11c:	b353      	cbz	r3, 800e174 <_dtoa_r+0x8cc>
 800e11e:	4631      	mov	r1, r6
 800e120:	4658      	mov	r0, fp
 800e122:	f000 fbb9 	bl	800e898 <__mcmp>
 800e126:	2800      	cmp	r0, #0
 800e128:	da24      	bge.n	800e174 <_dtoa_r+0x8cc>
 800e12a:	2300      	movs	r3, #0
 800e12c:	4659      	mov	r1, fp
 800e12e:	220a      	movs	r2, #10
 800e130:	4620      	mov	r0, r4
 800e132:	f000 f9e7 	bl	800e504 <__multadd>
 800e136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e13c:	4683      	mov	fp, r0
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f000 8144 	beq.w	800e3cc <_dtoa_r+0xb24>
 800e144:	2300      	movs	r3, #0
 800e146:	4639      	mov	r1, r7
 800e148:	220a      	movs	r2, #10
 800e14a:	4620      	mov	r0, r4
 800e14c:	f000 f9da 	bl	800e504 <__multadd>
 800e150:	9b04      	ldr	r3, [sp, #16]
 800e152:	4607      	mov	r7, r0
 800e154:	2b00      	cmp	r3, #0
 800e156:	dc4d      	bgt.n	800e1f4 <_dtoa_r+0x94c>
 800e158:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	dd4a      	ble.n	800e1f4 <_dtoa_r+0x94c>
 800e15e:	e011      	b.n	800e184 <_dtoa_r+0x8dc>
 800e160:	d0c9      	beq.n	800e0f6 <_dtoa_r+0x84e>
 800e162:	9a07      	ldr	r2, [sp, #28]
 800e164:	331c      	adds	r3, #28
 800e166:	441a      	add	r2, r3
 800e168:	4499      	add	r9, r3
 800e16a:	441d      	add	r5, r3
 800e16c:	4613      	mov	r3, r2
 800e16e:	e7c1      	b.n	800e0f4 <_dtoa_r+0x84c>
 800e170:	4603      	mov	r3, r0
 800e172:	e7f6      	b.n	800e162 <_dtoa_r+0x8ba>
 800e174:	f1b8 0f00 	cmp.w	r8, #0
 800e178:	dc36      	bgt.n	800e1e8 <_dtoa_r+0x940>
 800e17a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	dd33      	ble.n	800e1e8 <_dtoa_r+0x940>
 800e180:	f8cd 8010 	str.w	r8, [sp, #16]
 800e184:	9b04      	ldr	r3, [sp, #16]
 800e186:	b963      	cbnz	r3, 800e1a2 <_dtoa_r+0x8fa>
 800e188:	4631      	mov	r1, r6
 800e18a:	2205      	movs	r2, #5
 800e18c:	4620      	mov	r0, r4
 800e18e:	f000 f9b9 	bl	800e504 <__multadd>
 800e192:	4601      	mov	r1, r0
 800e194:	4606      	mov	r6, r0
 800e196:	4658      	mov	r0, fp
 800e198:	f000 fb7e 	bl	800e898 <__mcmp>
 800e19c:	2800      	cmp	r0, #0
 800e19e:	f73f add3 	bgt.w	800dd48 <_dtoa_r+0x4a0>
 800e1a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1a4:	9d06      	ldr	r5, [sp, #24]
 800e1a6:	ea6f 0a03 	mvn.w	sl, r3
 800e1aa:	f04f 0900 	mov.w	r9, #0
 800e1ae:	4631      	mov	r1, r6
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f000 f990 	bl	800e4d6 <_Bfree>
 800e1b6:	2f00      	cmp	r7, #0
 800e1b8:	f43f aebd 	beq.w	800df36 <_dtoa_r+0x68e>
 800e1bc:	f1b9 0f00 	cmp.w	r9, #0
 800e1c0:	d005      	beq.n	800e1ce <_dtoa_r+0x926>
 800e1c2:	45b9      	cmp	r9, r7
 800e1c4:	d003      	beq.n	800e1ce <_dtoa_r+0x926>
 800e1c6:	4649      	mov	r1, r9
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f000 f984 	bl	800e4d6 <_Bfree>
 800e1ce:	4639      	mov	r1, r7
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f000 f980 	bl	800e4d6 <_Bfree>
 800e1d6:	e6ae      	b.n	800df36 <_dtoa_r+0x68e>
 800e1d8:	2600      	movs	r6, #0
 800e1da:	4637      	mov	r7, r6
 800e1dc:	e7e1      	b.n	800e1a2 <_dtoa_r+0x8fa>
 800e1de:	46ba      	mov	sl, r7
 800e1e0:	4637      	mov	r7, r6
 800e1e2:	e5b1      	b.n	800dd48 <_dtoa_r+0x4a0>
 800e1e4:	40240000 	.word	0x40240000
 800e1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ea:	f8cd 8010 	str.w	r8, [sp, #16]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	f000 80f3 	beq.w	800e3da <_dtoa_r+0xb32>
 800e1f4:	2d00      	cmp	r5, #0
 800e1f6:	dd05      	ble.n	800e204 <_dtoa_r+0x95c>
 800e1f8:	4639      	mov	r1, r7
 800e1fa:	462a      	mov	r2, r5
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	f000 faf7 	bl	800e7f0 <__lshift>
 800e202:	4607      	mov	r7, r0
 800e204:	9b08      	ldr	r3, [sp, #32]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d04c      	beq.n	800e2a4 <_dtoa_r+0x9fc>
 800e20a:	6879      	ldr	r1, [r7, #4]
 800e20c:	4620      	mov	r0, r4
 800e20e:	f000 f92e 	bl	800e46e <_Balloc>
 800e212:	4605      	mov	r5, r0
 800e214:	693a      	ldr	r2, [r7, #16]
 800e216:	f107 010c 	add.w	r1, r7, #12
 800e21a:	3202      	adds	r2, #2
 800e21c:	0092      	lsls	r2, r2, #2
 800e21e:	300c      	adds	r0, #12
 800e220:	f000 f91a 	bl	800e458 <memcpy>
 800e224:	2201      	movs	r2, #1
 800e226:	4629      	mov	r1, r5
 800e228:	4620      	mov	r0, r4
 800e22a:	f000 fae1 	bl	800e7f0 <__lshift>
 800e22e:	46b9      	mov	r9, r7
 800e230:	4607      	mov	r7, r0
 800e232:	9b06      	ldr	r3, [sp, #24]
 800e234:	9307      	str	r3, [sp, #28]
 800e236:	9b02      	ldr	r3, [sp, #8]
 800e238:	f003 0301 	and.w	r3, r3, #1
 800e23c:	9308      	str	r3, [sp, #32]
 800e23e:	4631      	mov	r1, r6
 800e240:	4658      	mov	r0, fp
 800e242:	f7ff faa3 	bl	800d78c <quorem>
 800e246:	4649      	mov	r1, r9
 800e248:	4605      	mov	r5, r0
 800e24a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e24e:	4658      	mov	r0, fp
 800e250:	f000 fb22 	bl	800e898 <__mcmp>
 800e254:	463a      	mov	r2, r7
 800e256:	9002      	str	r0, [sp, #8]
 800e258:	4631      	mov	r1, r6
 800e25a:	4620      	mov	r0, r4
 800e25c:	f000 fb36 	bl	800e8cc <__mdiff>
 800e260:	68c3      	ldr	r3, [r0, #12]
 800e262:	4602      	mov	r2, r0
 800e264:	bb03      	cbnz	r3, 800e2a8 <_dtoa_r+0xa00>
 800e266:	4601      	mov	r1, r0
 800e268:	9009      	str	r0, [sp, #36]	; 0x24
 800e26a:	4658      	mov	r0, fp
 800e26c:	f000 fb14 	bl	800e898 <__mcmp>
 800e270:	4603      	mov	r3, r0
 800e272:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e274:	4611      	mov	r1, r2
 800e276:	4620      	mov	r0, r4
 800e278:	9309      	str	r3, [sp, #36]	; 0x24
 800e27a:	f000 f92c 	bl	800e4d6 <_Bfree>
 800e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e280:	b9a3      	cbnz	r3, 800e2ac <_dtoa_r+0xa04>
 800e282:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e284:	b992      	cbnz	r2, 800e2ac <_dtoa_r+0xa04>
 800e286:	9a08      	ldr	r2, [sp, #32]
 800e288:	b982      	cbnz	r2, 800e2ac <_dtoa_r+0xa04>
 800e28a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e28e:	d029      	beq.n	800e2e4 <_dtoa_r+0xa3c>
 800e290:	9b02      	ldr	r3, [sp, #8]
 800e292:	2b00      	cmp	r3, #0
 800e294:	dd01      	ble.n	800e29a <_dtoa_r+0x9f2>
 800e296:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e29a:	9b07      	ldr	r3, [sp, #28]
 800e29c:	1c5d      	adds	r5, r3, #1
 800e29e:	f883 8000 	strb.w	r8, [r3]
 800e2a2:	e784      	b.n	800e1ae <_dtoa_r+0x906>
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	e7c2      	b.n	800e22e <_dtoa_r+0x986>
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	e7e3      	b.n	800e274 <_dtoa_r+0x9cc>
 800e2ac:	9a02      	ldr	r2, [sp, #8]
 800e2ae:	2a00      	cmp	r2, #0
 800e2b0:	db04      	blt.n	800e2bc <_dtoa_r+0xa14>
 800e2b2:	d123      	bne.n	800e2fc <_dtoa_r+0xa54>
 800e2b4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e2b6:	bb0a      	cbnz	r2, 800e2fc <_dtoa_r+0xa54>
 800e2b8:	9a08      	ldr	r2, [sp, #32]
 800e2ba:	b9fa      	cbnz	r2, 800e2fc <_dtoa_r+0xa54>
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	ddec      	ble.n	800e29a <_dtoa_r+0x9f2>
 800e2c0:	4659      	mov	r1, fp
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	f000 fa93 	bl	800e7f0 <__lshift>
 800e2ca:	4631      	mov	r1, r6
 800e2cc:	4683      	mov	fp, r0
 800e2ce:	f000 fae3 	bl	800e898 <__mcmp>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	dc03      	bgt.n	800e2de <_dtoa_r+0xa36>
 800e2d6:	d1e0      	bne.n	800e29a <_dtoa_r+0x9f2>
 800e2d8:	f018 0f01 	tst.w	r8, #1
 800e2dc:	d0dd      	beq.n	800e29a <_dtoa_r+0x9f2>
 800e2de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e2e2:	d1d8      	bne.n	800e296 <_dtoa_r+0x9ee>
 800e2e4:	9b07      	ldr	r3, [sp, #28]
 800e2e6:	9a07      	ldr	r2, [sp, #28]
 800e2e8:	1c5d      	adds	r5, r3, #1
 800e2ea:	2339      	movs	r3, #57	; 0x39
 800e2ec:	7013      	strb	r3, [r2, #0]
 800e2ee:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e2f2:	1e6a      	subs	r2, r5, #1
 800e2f4:	2b39      	cmp	r3, #57	; 0x39
 800e2f6:	d04d      	beq.n	800e394 <_dtoa_r+0xaec>
 800e2f8:	3301      	adds	r3, #1
 800e2fa:	e052      	b.n	800e3a2 <_dtoa_r+0xafa>
 800e2fc:	9a07      	ldr	r2, [sp, #28]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f102 0501 	add.w	r5, r2, #1
 800e304:	dd06      	ble.n	800e314 <_dtoa_r+0xa6c>
 800e306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e30a:	d0eb      	beq.n	800e2e4 <_dtoa_r+0xa3c>
 800e30c:	f108 0801 	add.w	r8, r8, #1
 800e310:	9b07      	ldr	r3, [sp, #28]
 800e312:	e7c4      	b.n	800e29e <_dtoa_r+0x9f6>
 800e314:	9b06      	ldr	r3, [sp, #24]
 800e316:	9a04      	ldr	r2, [sp, #16]
 800e318:	1aeb      	subs	r3, r5, r3
 800e31a:	4293      	cmp	r3, r2
 800e31c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e320:	d021      	beq.n	800e366 <_dtoa_r+0xabe>
 800e322:	4659      	mov	r1, fp
 800e324:	2300      	movs	r3, #0
 800e326:	220a      	movs	r2, #10
 800e328:	4620      	mov	r0, r4
 800e32a:	f000 f8eb 	bl	800e504 <__multadd>
 800e32e:	45b9      	cmp	r9, r7
 800e330:	4683      	mov	fp, r0
 800e332:	f04f 0300 	mov.w	r3, #0
 800e336:	f04f 020a 	mov.w	r2, #10
 800e33a:	4649      	mov	r1, r9
 800e33c:	4620      	mov	r0, r4
 800e33e:	d105      	bne.n	800e34c <_dtoa_r+0xaa4>
 800e340:	f000 f8e0 	bl	800e504 <__multadd>
 800e344:	4681      	mov	r9, r0
 800e346:	4607      	mov	r7, r0
 800e348:	9507      	str	r5, [sp, #28]
 800e34a:	e778      	b.n	800e23e <_dtoa_r+0x996>
 800e34c:	f000 f8da 	bl	800e504 <__multadd>
 800e350:	4639      	mov	r1, r7
 800e352:	4681      	mov	r9, r0
 800e354:	2300      	movs	r3, #0
 800e356:	220a      	movs	r2, #10
 800e358:	4620      	mov	r0, r4
 800e35a:	f000 f8d3 	bl	800e504 <__multadd>
 800e35e:	4607      	mov	r7, r0
 800e360:	e7f2      	b.n	800e348 <_dtoa_r+0xaa0>
 800e362:	f04f 0900 	mov.w	r9, #0
 800e366:	4659      	mov	r1, fp
 800e368:	2201      	movs	r2, #1
 800e36a:	4620      	mov	r0, r4
 800e36c:	f000 fa40 	bl	800e7f0 <__lshift>
 800e370:	4631      	mov	r1, r6
 800e372:	4683      	mov	fp, r0
 800e374:	f000 fa90 	bl	800e898 <__mcmp>
 800e378:	2800      	cmp	r0, #0
 800e37a:	dcb8      	bgt.n	800e2ee <_dtoa_r+0xa46>
 800e37c:	d102      	bne.n	800e384 <_dtoa_r+0xadc>
 800e37e:	f018 0f01 	tst.w	r8, #1
 800e382:	d1b4      	bne.n	800e2ee <_dtoa_r+0xa46>
 800e384:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e388:	1e6a      	subs	r2, r5, #1
 800e38a:	2b30      	cmp	r3, #48	; 0x30
 800e38c:	f47f af0f 	bne.w	800e1ae <_dtoa_r+0x906>
 800e390:	4615      	mov	r5, r2
 800e392:	e7f7      	b.n	800e384 <_dtoa_r+0xadc>
 800e394:	9b06      	ldr	r3, [sp, #24]
 800e396:	4293      	cmp	r3, r2
 800e398:	d105      	bne.n	800e3a6 <_dtoa_r+0xafe>
 800e39a:	2331      	movs	r3, #49	; 0x31
 800e39c:	9a06      	ldr	r2, [sp, #24]
 800e39e:	f10a 0a01 	add.w	sl, sl, #1
 800e3a2:	7013      	strb	r3, [r2, #0]
 800e3a4:	e703      	b.n	800e1ae <_dtoa_r+0x906>
 800e3a6:	4615      	mov	r5, r2
 800e3a8:	e7a1      	b.n	800e2ee <_dtoa_r+0xa46>
 800e3aa:	4b17      	ldr	r3, [pc, #92]	; (800e408 <_dtoa_r+0xb60>)
 800e3ac:	f7ff bae1 	b.w	800d972 <_dtoa_r+0xca>
 800e3b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f47f aabb 	bne.w	800d92e <_dtoa_r+0x86>
 800e3b8:	4b14      	ldr	r3, [pc, #80]	; (800e40c <_dtoa_r+0xb64>)
 800e3ba:	f7ff bada 	b.w	800d972 <_dtoa_r+0xca>
 800e3be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e3c0:	2b01      	cmp	r3, #1
 800e3c2:	f77f ae3f 	ble.w	800e044 <_dtoa_r+0x79c>
 800e3c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3c8:	9308      	str	r3, [sp, #32]
 800e3ca:	e653      	b.n	800e074 <_dtoa_r+0x7cc>
 800e3cc:	9b04      	ldr	r3, [sp, #16]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	dc03      	bgt.n	800e3da <_dtoa_r+0xb32>
 800e3d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	f73f aed5 	bgt.w	800e184 <_dtoa_r+0x8dc>
 800e3da:	9d06      	ldr	r5, [sp, #24]
 800e3dc:	4631      	mov	r1, r6
 800e3de:	4658      	mov	r0, fp
 800e3e0:	f7ff f9d4 	bl	800d78c <quorem>
 800e3e4:	9b06      	ldr	r3, [sp, #24]
 800e3e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e3ea:	f805 8b01 	strb.w	r8, [r5], #1
 800e3ee:	9a04      	ldr	r2, [sp, #16]
 800e3f0:	1aeb      	subs	r3, r5, r3
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	ddb5      	ble.n	800e362 <_dtoa_r+0xaba>
 800e3f6:	4659      	mov	r1, fp
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	220a      	movs	r2, #10
 800e3fc:	4620      	mov	r0, r4
 800e3fe:	f000 f881 	bl	800e504 <__multadd>
 800e402:	4683      	mov	fp, r0
 800e404:	e7ea      	b.n	800e3dc <_dtoa_r+0xb34>
 800e406:	bf00      	nop
 800e408:	0800fc00 	.word	0x0800fc00
 800e40c:	0800fc24 	.word	0x0800fc24

0800e410 <_localeconv_r>:
 800e410:	4b04      	ldr	r3, [pc, #16]	; (800e424 <_localeconv_r+0x14>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6a18      	ldr	r0, [r3, #32]
 800e416:	4b04      	ldr	r3, [pc, #16]	; (800e428 <_localeconv_r+0x18>)
 800e418:	2800      	cmp	r0, #0
 800e41a:	bf08      	it	eq
 800e41c:	4618      	moveq	r0, r3
 800e41e:	30f0      	adds	r0, #240	; 0xf0
 800e420:	4770      	bx	lr
 800e422:	bf00      	nop
 800e424:	20000064 	.word	0x20000064
 800e428:	200000c8 	.word	0x200000c8

0800e42c <malloc>:
 800e42c:	4b02      	ldr	r3, [pc, #8]	; (800e438 <malloc+0xc>)
 800e42e:	4601      	mov	r1, r0
 800e430:	6818      	ldr	r0, [r3, #0]
 800e432:	f000 bb53 	b.w	800eadc <_malloc_r>
 800e436:	bf00      	nop
 800e438:	20000064 	.word	0x20000064

0800e43c <memchr>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	b2c9      	uxtb	r1, r1
 800e440:	4402      	add	r2, r0
 800e442:	4290      	cmp	r0, r2
 800e444:	4603      	mov	r3, r0
 800e446:	d101      	bne.n	800e44c <memchr+0x10>
 800e448:	2300      	movs	r3, #0
 800e44a:	e003      	b.n	800e454 <memchr+0x18>
 800e44c:	781c      	ldrb	r4, [r3, #0]
 800e44e:	3001      	adds	r0, #1
 800e450:	428c      	cmp	r4, r1
 800e452:	d1f6      	bne.n	800e442 <memchr+0x6>
 800e454:	4618      	mov	r0, r3
 800e456:	bd10      	pop	{r4, pc}

0800e458 <memcpy>:
 800e458:	b510      	push	{r4, lr}
 800e45a:	1e43      	subs	r3, r0, #1
 800e45c:	440a      	add	r2, r1
 800e45e:	4291      	cmp	r1, r2
 800e460:	d100      	bne.n	800e464 <memcpy+0xc>
 800e462:	bd10      	pop	{r4, pc}
 800e464:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e46c:	e7f7      	b.n	800e45e <memcpy+0x6>

0800e46e <_Balloc>:
 800e46e:	b570      	push	{r4, r5, r6, lr}
 800e470:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e472:	4604      	mov	r4, r0
 800e474:	460e      	mov	r6, r1
 800e476:	b93d      	cbnz	r5, 800e488 <_Balloc+0x1a>
 800e478:	2010      	movs	r0, #16
 800e47a:	f7ff ffd7 	bl	800e42c <malloc>
 800e47e:	6260      	str	r0, [r4, #36]	; 0x24
 800e480:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e484:	6005      	str	r5, [r0, #0]
 800e486:	60c5      	str	r5, [r0, #12]
 800e488:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e48a:	68eb      	ldr	r3, [r5, #12]
 800e48c:	b183      	cbz	r3, 800e4b0 <_Balloc+0x42>
 800e48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e496:	b9b8      	cbnz	r0, 800e4c8 <_Balloc+0x5a>
 800e498:	2101      	movs	r1, #1
 800e49a:	fa01 f506 	lsl.w	r5, r1, r6
 800e49e:	1d6a      	adds	r2, r5, #5
 800e4a0:	0092      	lsls	r2, r2, #2
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f000 fabf 	bl	800ea26 <_calloc_r>
 800e4a8:	b160      	cbz	r0, 800e4c4 <_Balloc+0x56>
 800e4aa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e4ae:	e00e      	b.n	800e4ce <_Balloc+0x60>
 800e4b0:	2221      	movs	r2, #33	; 0x21
 800e4b2:	2104      	movs	r1, #4
 800e4b4:	4620      	mov	r0, r4
 800e4b6:	f000 fab6 	bl	800ea26 <_calloc_r>
 800e4ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4bc:	60e8      	str	r0, [r5, #12]
 800e4be:	68db      	ldr	r3, [r3, #12]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1e4      	bne.n	800e48e <_Balloc+0x20>
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	bd70      	pop	{r4, r5, r6, pc}
 800e4c8:	6802      	ldr	r2, [r0, #0]
 800e4ca:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e4d4:	e7f7      	b.n	800e4c6 <_Balloc+0x58>

0800e4d6 <_Bfree>:
 800e4d6:	b570      	push	{r4, r5, r6, lr}
 800e4d8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e4da:	4606      	mov	r6, r0
 800e4dc:	460d      	mov	r5, r1
 800e4de:	b93c      	cbnz	r4, 800e4f0 <_Bfree+0x1a>
 800e4e0:	2010      	movs	r0, #16
 800e4e2:	f7ff ffa3 	bl	800e42c <malloc>
 800e4e6:	6270      	str	r0, [r6, #36]	; 0x24
 800e4e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4ec:	6004      	str	r4, [r0, #0]
 800e4ee:	60c4      	str	r4, [r0, #12]
 800e4f0:	b13d      	cbz	r5, 800e502 <_Bfree+0x2c>
 800e4f2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e4f4:	686a      	ldr	r2, [r5, #4]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e4fc:	6029      	str	r1, [r5, #0]
 800e4fe:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e502:	bd70      	pop	{r4, r5, r6, pc}

0800e504 <__multadd>:
 800e504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e508:	461f      	mov	r7, r3
 800e50a:	4606      	mov	r6, r0
 800e50c:	460c      	mov	r4, r1
 800e50e:	2300      	movs	r3, #0
 800e510:	690d      	ldr	r5, [r1, #16]
 800e512:	f101 0c14 	add.w	ip, r1, #20
 800e516:	f8dc 0000 	ldr.w	r0, [ip]
 800e51a:	3301      	adds	r3, #1
 800e51c:	b281      	uxth	r1, r0
 800e51e:	fb02 7101 	mla	r1, r2, r1, r7
 800e522:	0c00      	lsrs	r0, r0, #16
 800e524:	0c0f      	lsrs	r7, r1, #16
 800e526:	fb02 7000 	mla	r0, r2, r0, r7
 800e52a:	b289      	uxth	r1, r1
 800e52c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e530:	429d      	cmp	r5, r3
 800e532:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e536:	f84c 1b04 	str.w	r1, [ip], #4
 800e53a:	dcec      	bgt.n	800e516 <__multadd+0x12>
 800e53c:	b1d7      	cbz	r7, 800e574 <__multadd+0x70>
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	42ab      	cmp	r3, r5
 800e542:	dc12      	bgt.n	800e56a <__multadd+0x66>
 800e544:	6861      	ldr	r1, [r4, #4]
 800e546:	4630      	mov	r0, r6
 800e548:	3101      	adds	r1, #1
 800e54a:	f7ff ff90 	bl	800e46e <_Balloc>
 800e54e:	4680      	mov	r8, r0
 800e550:	6922      	ldr	r2, [r4, #16]
 800e552:	f104 010c 	add.w	r1, r4, #12
 800e556:	3202      	adds	r2, #2
 800e558:	0092      	lsls	r2, r2, #2
 800e55a:	300c      	adds	r0, #12
 800e55c:	f7ff ff7c 	bl	800e458 <memcpy>
 800e560:	4621      	mov	r1, r4
 800e562:	4630      	mov	r0, r6
 800e564:	f7ff ffb7 	bl	800e4d6 <_Bfree>
 800e568:	4644      	mov	r4, r8
 800e56a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e56e:	3501      	adds	r5, #1
 800e570:	615f      	str	r7, [r3, #20]
 800e572:	6125      	str	r5, [r4, #16]
 800e574:	4620      	mov	r0, r4
 800e576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e57a <__hi0bits>:
 800e57a:	0c02      	lsrs	r2, r0, #16
 800e57c:	0412      	lsls	r2, r2, #16
 800e57e:	4603      	mov	r3, r0
 800e580:	b9b2      	cbnz	r2, 800e5b0 <__hi0bits+0x36>
 800e582:	0403      	lsls	r3, r0, #16
 800e584:	2010      	movs	r0, #16
 800e586:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e58a:	bf04      	itt	eq
 800e58c:	021b      	lsleq	r3, r3, #8
 800e58e:	3008      	addeq	r0, #8
 800e590:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e594:	bf04      	itt	eq
 800e596:	011b      	lsleq	r3, r3, #4
 800e598:	3004      	addeq	r0, #4
 800e59a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e59e:	bf04      	itt	eq
 800e5a0:	009b      	lsleq	r3, r3, #2
 800e5a2:	3002      	addeq	r0, #2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	db06      	blt.n	800e5b6 <__hi0bits+0x3c>
 800e5a8:	005b      	lsls	r3, r3, #1
 800e5aa:	d503      	bpl.n	800e5b4 <__hi0bits+0x3a>
 800e5ac:	3001      	adds	r0, #1
 800e5ae:	4770      	bx	lr
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	e7e8      	b.n	800e586 <__hi0bits+0xc>
 800e5b4:	2020      	movs	r0, #32
 800e5b6:	4770      	bx	lr

0800e5b8 <__lo0bits>:
 800e5b8:	6803      	ldr	r3, [r0, #0]
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	f013 0207 	ands.w	r2, r3, #7
 800e5c0:	d00b      	beq.n	800e5da <__lo0bits+0x22>
 800e5c2:	07da      	lsls	r2, r3, #31
 800e5c4:	d423      	bmi.n	800e60e <__lo0bits+0x56>
 800e5c6:	0798      	lsls	r0, r3, #30
 800e5c8:	bf49      	itett	mi
 800e5ca:	085b      	lsrmi	r3, r3, #1
 800e5cc:	089b      	lsrpl	r3, r3, #2
 800e5ce:	2001      	movmi	r0, #1
 800e5d0:	600b      	strmi	r3, [r1, #0]
 800e5d2:	bf5c      	itt	pl
 800e5d4:	600b      	strpl	r3, [r1, #0]
 800e5d6:	2002      	movpl	r0, #2
 800e5d8:	4770      	bx	lr
 800e5da:	b298      	uxth	r0, r3
 800e5dc:	b9a8      	cbnz	r0, 800e60a <__lo0bits+0x52>
 800e5de:	2010      	movs	r0, #16
 800e5e0:	0c1b      	lsrs	r3, r3, #16
 800e5e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e5e6:	bf04      	itt	eq
 800e5e8:	0a1b      	lsreq	r3, r3, #8
 800e5ea:	3008      	addeq	r0, #8
 800e5ec:	071a      	lsls	r2, r3, #28
 800e5ee:	bf04      	itt	eq
 800e5f0:	091b      	lsreq	r3, r3, #4
 800e5f2:	3004      	addeq	r0, #4
 800e5f4:	079a      	lsls	r2, r3, #30
 800e5f6:	bf04      	itt	eq
 800e5f8:	089b      	lsreq	r3, r3, #2
 800e5fa:	3002      	addeq	r0, #2
 800e5fc:	07da      	lsls	r2, r3, #31
 800e5fe:	d402      	bmi.n	800e606 <__lo0bits+0x4e>
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	d006      	beq.n	800e612 <__lo0bits+0x5a>
 800e604:	3001      	adds	r0, #1
 800e606:	600b      	str	r3, [r1, #0]
 800e608:	4770      	bx	lr
 800e60a:	4610      	mov	r0, r2
 800e60c:	e7e9      	b.n	800e5e2 <__lo0bits+0x2a>
 800e60e:	2000      	movs	r0, #0
 800e610:	4770      	bx	lr
 800e612:	2020      	movs	r0, #32
 800e614:	4770      	bx	lr

0800e616 <__i2b>:
 800e616:	b510      	push	{r4, lr}
 800e618:	460c      	mov	r4, r1
 800e61a:	2101      	movs	r1, #1
 800e61c:	f7ff ff27 	bl	800e46e <_Balloc>
 800e620:	2201      	movs	r2, #1
 800e622:	6144      	str	r4, [r0, #20]
 800e624:	6102      	str	r2, [r0, #16]
 800e626:	bd10      	pop	{r4, pc}

0800e628 <__multiply>:
 800e628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e62c:	4614      	mov	r4, r2
 800e62e:	690a      	ldr	r2, [r1, #16]
 800e630:	6923      	ldr	r3, [r4, #16]
 800e632:	4688      	mov	r8, r1
 800e634:	429a      	cmp	r2, r3
 800e636:	bfbe      	ittt	lt
 800e638:	460b      	movlt	r3, r1
 800e63a:	46a0      	movlt	r8, r4
 800e63c:	461c      	movlt	r4, r3
 800e63e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e642:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e646:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e64a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e64e:	eb07 0609 	add.w	r6, r7, r9
 800e652:	42b3      	cmp	r3, r6
 800e654:	bfb8      	it	lt
 800e656:	3101      	addlt	r1, #1
 800e658:	f7ff ff09 	bl	800e46e <_Balloc>
 800e65c:	f100 0514 	add.w	r5, r0, #20
 800e660:	462b      	mov	r3, r5
 800e662:	2200      	movs	r2, #0
 800e664:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e668:	4573      	cmp	r3, lr
 800e66a:	d316      	bcc.n	800e69a <__multiply+0x72>
 800e66c:	f104 0214 	add.w	r2, r4, #20
 800e670:	f108 0114 	add.w	r1, r8, #20
 800e674:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e678:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	9b00      	ldr	r3, [sp, #0]
 800e680:	9201      	str	r2, [sp, #4]
 800e682:	4293      	cmp	r3, r2
 800e684:	d80c      	bhi.n	800e6a0 <__multiply+0x78>
 800e686:	2e00      	cmp	r6, #0
 800e688:	dd03      	ble.n	800e692 <__multiply+0x6a>
 800e68a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d05d      	beq.n	800e74e <__multiply+0x126>
 800e692:	6106      	str	r6, [r0, #16]
 800e694:	b003      	add	sp, #12
 800e696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e69a:	f843 2b04 	str.w	r2, [r3], #4
 800e69e:	e7e3      	b.n	800e668 <__multiply+0x40>
 800e6a0:	f8b2 b000 	ldrh.w	fp, [r2]
 800e6a4:	f1bb 0f00 	cmp.w	fp, #0
 800e6a8:	d023      	beq.n	800e6f2 <__multiply+0xca>
 800e6aa:	4689      	mov	r9, r1
 800e6ac:	46ac      	mov	ip, r5
 800e6ae:	f04f 0800 	mov.w	r8, #0
 800e6b2:	f859 4b04 	ldr.w	r4, [r9], #4
 800e6b6:	f8dc a000 	ldr.w	sl, [ip]
 800e6ba:	b2a3      	uxth	r3, r4
 800e6bc:	fa1f fa8a 	uxth.w	sl, sl
 800e6c0:	fb0b a303 	mla	r3, fp, r3, sl
 800e6c4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e6c8:	f8dc 4000 	ldr.w	r4, [ip]
 800e6cc:	4443      	add	r3, r8
 800e6ce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e6d2:	fb0b 840a 	mla	r4, fp, sl, r8
 800e6d6:	46e2      	mov	sl, ip
 800e6d8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e6e2:	454f      	cmp	r7, r9
 800e6e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e6e8:	f84a 3b04 	str.w	r3, [sl], #4
 800e6ec:	d82b      	bhi.n	800e746 <__multiply+0x11e>
 800e6ee:	f8cc 8004 	str.w	r8, [ip, #4]
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	3204      	adds	r2, #4
 800e6f6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e6fa:	f1ba 0f00 	cmp.w	sl, #0
 800e6fe:	d020      	beq.n	800e742 <__multiply+0x11a>
 800e700:	4689      	mov	r9, r1
 800e702:	46a8      	mov	r8, r5
 800e704:	f04f 0b00 	mov.w	fp, #0
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	f8b9 c000 	ldrh.w	ip, [r9]
 800e70e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e712:	b29b      	uxth	r3, r3
 800e714:	fb0a 440c 	mla	r4, sl, ip, r4
 800e718:	46c4      	mov	ip, r8
 800e71a:	445c      	add	r4, fp
 800e71c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e720:	f84c 3b04 	str.w	r3, [ip], #4
 800e724:	f859 3b04 	ldr.w	r3, [r9], #4
 800e728:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e72c:	0c1b      	lsrs	r3, r3, #16
 800e72e:	fb0a b303 	mla	r3, sl, r3, fp
 800e732:	454f      	cmp	r7, r9
 800e734:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e738:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e73c:	d805      	bhi.n	800e74a <__multiply+0x122>
 800e73e:	f8c8 3004 	str.w	r3, [r8, #4]
 800e742:	3504      	adds	r5, #4
 800e744:	e79b      	b.n	800e67e <__multiply+0x56>
 800e746:	46d4      	mov	ip, sl
 800e748:	e7b3      	b.n	800e6b2 <__multiply+0x8a>
 800e74a:	46e0      	mov	r8, ip
 800e74c:	e7dd      	b.n	800e70a <__multiply+0xe2>
 800e74e:	3e01      	subs	r6, #1
 800e750:	e799      	b.n	800e686 <__multiply+0x5e>
	...

0800e754 <__pow5mult>:
 800e754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e758:	4615      	mov	r5, r2
 800e75a:	f012 0203 	ands.w	r2, r2, #3
 800e75e:	4606      	mov	r6, r0
 800e760:	460f      	mov	r7, r1
 800e762:	d007      	beq.n	800e774 <__pow5mult+0x20>
 800e764:	4c21      	ldr	r4, [pc, #132]	; (800e7ec <__pow5mult+0x98>)
 800e766:	3a01      	subs	r2, #1
 800e768:	2300      	movs	r3, #0
 800e76a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e76e:	f7ff fec9 	bl	800e504 <__multadd>
 800e772:	4607      	mov	r7, r0
 800e774:	10ad      	asrs	r5, r5, #2
 800e776:	d035      	beq.n	800e7e4 <__pow5mult+0x90>
 800e778:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e77a:	b93c      	cbnz	r4, 800e78c <__pow5mult+0x38>
 800e77c:	2010      	movs	r0, #16
 800e77e:	f7ff fe55 	bl	800e42c <malloc>
 800e782:	6270      	str	r0, [r6, #36]	; 0x24
 800e784:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e788:	6004      	str	r4, [r0, #0]
 800e78a:	60c4      	str	r4, [r0, #12]
 800e78c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e790:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e794:	b94c      	cbnz	r4, 800e7aa <__pow5mult+0x56>
 800e796:	f240 2171 	movw	r1, #625	; 0x271
 800e79a:	4630      	mov	r0, r6
 800e79c:	f7ff ff3b 	bl	800e616 <__i2b>
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	f8c8 0008 	str.w	r0, [r8, #8]
 800e7a8:	6003      	str	r3, [r0, #0]
 800e7aa:	f04f 0800 	mov.w	r8, #0
 800e7ae:	07eb      	lsls	r3, r5, #31
 800e7b0:	d50a      	bpl.n	800e7c8 <__pow5mult+0x74>
 800e7b2:	4639      	mov	r1, r7
 800e7b4:	4622      	mov	r2, r4
 800e7b6:	4630      	mov	r0, r6
 800e7b8:	f7ff ff36 	bl	800e628 <__multiply>
 800e7bc:	4681      	mov	r9, r0
 800e7be:	4639      	mov	r1, r7
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	f7ff fe88 	bl	800e4d6 <_Bfree>
 800e7c6:	464f      	mov	r7, r9
 800e7c8:	106d      	asrs	r5, r5, #1
 800e7ca:	d00b      	beq.n	800e7e4 <__pow5mult+0x90>
 800e7cc:	6820      	ldr	r0, [r4, #0]
 800e7ce:	b938      	cbnz	r0, 800e7e0 <__pow5mult+0x8c>
 800e7d0:	4622      	mov	r2, r4
 800e7d2:	4621      	mov	r1, r4
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	f7ff ff27 	bl	800e628 <__multiply>
 800e7da:	6020      	str	r0, [r4, #0]
 800e7dc:	f8c0 8000 	str.w	r8, [r0]
 800e7e0:	4604      	mov	r4, r0
 800e7e2:	e7e4      	b.n	800e7ae <__pow5mult+0x5a>
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ea:	bf00      	nop
 800e7ec:	0800fd28 	.word	0x0800fd28

0800e7f0 <__lshift>:
 800e7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f4:	460c      	mov	r4, r1
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	4616      	mov	r6, r2
 800e7fa:	6923      	ldr	r3, [r4, #16]
 800e7fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e800:	eb0a 0903 	add.w	r9, sl, r3
 800e804:	6849      	ldr	r1, [r1, #4]
 800e806:	68a3      	ldr	r3, [r4, #8]
 800e808:	f109 0501 	add.w	r5, r9, #1
 800e80c:	42ab      	cmp	r3, r5
 800e80e:	db32      	blt.n	800e876 <__lshift+0x86>
 800e810:	4638      	mov	r0, r7
 800e812:	f7ff fe2c 	bl	800e46e <_Balloc>
 800e816:	2300      	movs	r3, #0
 800e818:	4680      	mov	r8, r0
 800e81a:	461a      	mov	r2, r3
 800e81c:	f100 0114 	add.w	r1, r0, #20
 800e820:	4553      	cmp	r3, sl
 800e822:	db2b      	blt.n	800e87c <__lshift+0x8c>
 800e824:	6920      	ldr	r0, [r4, #16]
 800e826:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e82a:	f104 0314 	add.w	r3, r4, #20
 800e82e:	f016 021f 	ands.w	r2, r6, #31
 800e832:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e836:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e83a:	d025      	beq.n	800e888 <__lshift+0x98>
 800e83c:	2000      	movs	r0, #0
 800e83e:	f1c2 0e20 	rsb	lr, r2, #32
 800e842:	468a      	mov	sl, r1
 800e844:	681e      	ldr	r6, [r3, #0]
 800e846:	4096      	lsls	r6, r2
 800e848:	4330      	orrs	r0, r6
 800e84a:	f84a 0b04 	str.w	r0, [sl], #4
 800e84e:	f853 0b04 	ldr.w	r0, [r3], #4
 800e852:	459c      	cmp	ip, r3
 800e854:	fa20 f00e 	lsr.w	r0, r0, lr
 800e858:	d814      	bhi.n	800e884 <__lshift+0x94>
 800e85a:	6048      	str	r0, [r1, #4]
 800e85c:	b108      	cbz	r0, 800e862 <__lshift+0x72>
 800e85e:	f109 0502 	add.w	r5, r9, #2
 800e862:	3d01      	subs	r5, #1
 800e864:	4638      	mov	r0, r7
 800e866:	f8c8 5010 	str.w	r5, [r8, #16]
 800e86a:	4621      	mov	r1, r4
 800e86c:	f7ff fe33 	bl	800e4d6 <_Bfree>
 800e870:	4640      	mov	r0, r8
 800e872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e876:	3101      	adds	r1, #1
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	e7c7      	b.n	800e80c <__lshift+0x1c>
 800e87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e880:	3301      	adds	r3, #1
 800e882:	e7cd      	b.n	800e820 <__lshift+0x30>
 800e884:	4651      	mov	r1, sl
 800e886:	e7dc      	b.n	800e842 <__lshift+0x52>
 800e888:	3904      	subs	r1, #4
 800e88a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e88e:	459c      	cmp	ip, r3
 800e890:	f841 2f04 	str.w	r2, [r1, #4]!
 800e894:	d8f9      	bhi.n	800e88a <__lshift+0x9a>
 800e896:	e7e4      	b.n	800e862 <__lshift+0x72>

0800e898 <__mcmp>:
 800e898:	6903      	ldr	r3, [r0, #16]
 800e89a:	690a      	ldr	r2, [r1, #16]
 800e89c:	b530      	push	{r4, r5, lr}
 800e89e:	1a9b      	subs	r3, r3, r2
 800e8a0:	d10c      	bne.n	800e8bc <__mcmp+0x24>
 800e8a2:	0092      	lsls	r2, r2, #2
 800e8a4:	3014      	adds	r0, #20
 800e8a6:	3114      	adds	r1, #20
 800e8a8:	1884      	adds	r4, r0, r2
 800e8aa:	4411      	add	r1, r2
 800e8ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e8b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e8b4:	4295      	cmp	r5, r2
 800e8b6:	d003      	beq.n	800e8c0 <__mcmp+0x28>
 800e8b8:	d305      	bcc.n	800e8c6 <__mcmp+0x2e>
 800e8ba:	2301      	movs	r3, #1
 800e8bc:	4618      	mov	r0, r3
 800e8be:	bd30      	pop	{r4, r5, pc}
 800e8c0:	42a0      	cmp	r0, r4
 800e8c2:	d3f3      	bcc.n	800e8ac <__mcmp+0x14>
 800e8c4:	e7fa      	b.n	800e8bc <__mcmp+0x24>
 800e8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ca:	e7f7      	b.n	800e8bc <__mcmp+0x24>

0800e8cc <__mdiff>:
 800e8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8d0:	460d      	mov	r5, r1
 800e8d2:	4607      	mov	r7, r0
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	4614      	mov	r4, r2
 800e8da:	f7ff ffdd 	bl	800e898 <__mcmp>
 800e8de:	1e06      	subs	r6, r0, #0
 800e8e0:	d108      	bne.n	800e8f4 <__mdiff+0x28>
 800e8e2:	4631      	mov	r1, r6
 800e8e4:	4638      	mov	r0, r7
 800e8e6:	f7ff fdc2 	bl	800e46e <_Balloc>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8f4:	bfa4      	itt	ge
 800e8f6:	4623      	movge	r3, r4
 800e8f8:	462c      	movge	r4, r5
 800e8fa:	4638      	mov	r0, r7
 800e8fc:	6861      	ldr	r1, [r4, #4]
 800e8fe:	bfa6      	itte	ge
 800e900:	461d      	movge	r5, r3
 800e902:	2600      	movge	r6, #0
 800e904:	2601      	movlt	r6, #1
 800e906:	f7ff fdb2 	bl	800e46e <_Balloc>
 800e90a:	f04f 0e00 	mov.w	lr, #0
 800e90e:	60c6      	str	r6, [r0, #12]
 800e910:	692b      	ldr	r3, [r5, #16]
 800e912:	6926      	ldr	r6, [r4, #16]
 800e914:	f104 0214 	add.w	r2, r4, #20
 800e918:	f105 0914 	add.w	r9, r5, #20
 800e91c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e920:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e924:	f100 0114 	add.w	r1, r0, #20
 800e928:	f852 ab04 	ldr.w	sl, [r2], #4
 800e92c:	f859 5b04 	ldr.w	r5, [r9], #4
 800e930:	fa1f f38a 	uxth.w	r3, sl
 800e934:	4473      	add	r3, lr
 800e936:	b2ac      	uxth	r4, r5
 800e938:	1b1b      	subs	r3, r3, r4
 800e93a:	0c2c      	lsrs	r4, r5, #16
 800e93c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800e940:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800e944:	b29b      	uxth	r3, r3
 800e946:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800e94a:	45c8      	cmp	r8, r9
 800e94c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800e950:	4694      	mov	ip, r2
 800e952:	f841 4b04 	str.w	r4, [r1], #4
 800e956:	d8e7      	bhi.n	800e928 <__mdiff+0x5c>
 800e958:	45bc      	cmp	ip, r7
 800e95a:	d304      	bcc.n	800e966 <__mdiff+0x9a>
 800e95c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800e960:	b183      	cbz	r3, 800e984 <__mdiff+0xb8>
 800e962:	6106      	str	r6, [r0, #16]
 800e964:	e7c4      	b.n	800e8f0 <__mdiff+0x24>
 800e966:	f85c 4b04 	ldr.w	r4, [ip], #4
 800e96a:	b2a2      	uxth	r2, r4
 800e96c:	4472      	add	r2, lr
 800e96e:	1413      	asrs	r3, r2, #16
 800e970:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e974:	b292      	uxth	r2, r2
 800e976:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e97a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e97e:	f841 2b04 	str.w	r2, [r1], #4
 800e982:	e7e9      	b.n	800e958 <__mdiff+0x8c>
 800e984:	3e01      	subs	r6, #1
 800e986:	e7e9      	b.n	800e95c <__mdiff+0x90>

0800e988 <__d2b>:
 800e988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e98c:	461c      	mov	r4, r3
 800e98e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800e992:	2101      	movs	r1, #1
 800e994:	4690      	mov	r8, r2
 800e996:	f7ff fd6a 	bl	800e46e <_Balloc>
 800e99a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800e99e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800e9a2:	4607      	mov	r7, r0
 800e9a4:	bb34      	cbnz	r4, 800e9f4 <__d2b+0x6c>
 800e9a6:	9201      	str	r2, [sp, #4]
 800e9a8:	f1b8 0200 	subs.w	r2, r8, #0
 800e9ac:	d027      	beq.n	800e9fe <__d2b+0x76>
 800e9ae:	a802      	add	r0, sp, #8
 800e9b0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800e9b4:	f7ff fe00 	bl	800e5b8 <__lo0bits>
 800e9b8:	9900      	ldr	r1, [sp, #0]
 800e9ba:	b1f0      	cbz	r0, 800e9fa <__d2b+0x72>
 800e9bc:	9a01      	ldr	r2, [sp, #4]
 800e9be:	f1c0 0320 	rsb	r3, r0, #32
 800e9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c6:	430b      	orrs	r3, r1
 800e9c8:	40c2      	lsrs	r2, r0
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	9201      	str	r2, [sp, #4]
 800e9ce:	9b01      	ldr	r3, [sp, #4]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	bf14      	ite	ne
 800e9d4:	2102      	movne	r1, #2
 800e9d6:	2101      	moveq	r1, #1
 800e9d8:	61bb      	str	r3, [r7, #24]
 800e9da:	6139      	str	r1, [r7, #16]
 800e9dc:	b1c4      	cbz	r4, 800ea10 <__d2b+0x88>
 800e9de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e9e2:	4404      	add	r4, r0
 800e9e4:	6034      	str	r4, [r6, #0]
 800e9e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9ea:	6028      	str	r0, [r5, #0]
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	b002      	add	sp, #8
 800e9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e9f8:	e7d5      	b.n	800e9a6 <__d2b+0x1e>
 800e9fa:	6179      	str	r1, [r7, #20]
 800e9fc:	e7e7      	b.n	800e9ce <__d2b+0x46>
 800e9fe:	a801      	add	r0, sp, #4
 800ea00:	f7ff fdda 	bl	800e5b8 <__lo0bits>
 800ea04:	2101      	movs	r1, #1
 800ea06:	9b01      	ldr	r3, [sp, #4]
 800ea08:	6139      	str	r1, [r7, #16]
 800ea0a:	617b      	str	r3, [r7, #20]
 800ea0c:	3020      	adds	r0, #32
 800ea0e:	e7e5      	b.n	800e9dc <__d2b+0x54>
 800ea10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ea18:	6030      	str	r0, [r6, #0]
 800ea1a:	6918      	ldr	r0, [r3, #16]
 800ea1c:	f7ff fdad 	bl	800e57a <__hi0bits>
 800ea20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ea24:	e7e1      	b.n	800e9ea <__d2b+0x62>

0800ea26 <_calloc_r>:
 800ea26:	b538      	push	{r3, r4, r5, lr}
 800ea28:	fb02 f401 	mul.w	r4, r2, r1
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	f000 f855 	bl	800eadc <_malloc_r>
 800ea32:	4605      	mov	r5, r0
 800ea34:	b118      	cbz	r0, 800ea3e <_calloc_r+0x18>
 800ea36:	4622      	mov	r2, r4
 800ea38:	2100      	movs	r1, #0
 800ea3a:	f7fe fa2f 	bl	800ce9c <memset>
 800ea3e:	4628      	mov	r0, r5
 800ea40:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ea44 <_free_r>:
 800ea44:	b538      	push	{r3, r4, r5, lr}
 800ea46:	4605      	mov	r5, r0
 800ea48:	2900      	cmp	r1, #0
 800ea4a:	d043      	beq.n	800ead4 <_free_r+0x90>
 800ea4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea50:	1f0c      	subs	r4, r1, #4
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	bfb8      	it	lt
 800ea56:	18e4      	addlt	r4, r4, r3
 800ea58:	f000 fa27 	bl	800eeaa <__malloc_lock>
 800ea5c:	4a1e      	ldr	r2, [pc, #120]	; (800ead8 <_free_r+0x94>)
 800ea5e:	6813      	ldr	r3, [r2, #0]
 800ea60:	4610      	mov	r0, r2
 800ea62:	b933      	cbnz	r3, 800ea72 <_free_r+0x2e>
 800ea64:	6063      	str	r3, [r4, #4]
 800ea66:	6014      	str	r4, [r2, #0]
 800ea68:	4628      	mov	r0, r5
 800ea6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea6e:	f000 ba1d 	b.w	800eeac <__malloc_unlock>
 800ea72:	42a3      	cmp	r3, r4
 800ea74:	d90b      	bls.n	800ea8e <_free_r+0x4a>
 800ea76:	6821      	ldr	r1, [r4, #0]
 800ea78:	1862      	adds	r2, r4, r1
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	bf01      	itttt	eq
 800ea7e:	681a      	ldreq	r2, [r3, #0]
 800ea80:	685b      	ldreq	r3, [r3, #4]
 800ea82:	1852      	addeq	r2, r2, r1
 800ea84:	6022      	streq	r2, [r4, #0]
 800ea86:	6063      	str	r3, [r4, #4]
 800ea88:	6004      	str	r4, [r0, #0]
 800ea8a:	e7ed      	b.n	800ea68 <_free_r+0x24>
 800ea8c:	4613      	mov	r3, r2
 800ea8e:	685a      	ldr	r2, [r3, #4]
 800ea90:	b10a      	cbz	r2, 800ea96 <_free_r+0x52>
 800ea92:	42a2      	cmp	r2, r4
 800ea94:	d9fa      	bls.n	800ea8c <_free_r+0x48>
 800ea96:	6819      	ldr	r1, [r3, #0]
 800ea98:	1858      	adds	r0, r3, r1
 800ea9a:	42a0      	cmp	r0, r4
 800ea9c:	d10b      	bne.n	800eab6 <_free_r+0x72>
 800ea9e:	6820      	ldr	r0, [r4, #0]
 800eaa0:	4401      	add	r1, r0
 800eaa2:	1858      	adds	r0, r3, r1
 800eaa4:	4282      	cmp	r2, r0
 800eaa6:	6019      	str	r1, [r3, #0]
 800eaa8:	d1de      	bne.n	800ea68 <_free_r+0x24>
 800eaaa:	6810      	ldr	r0, [r2, #0]
 800eaac:	6852      	ldr	r2, [r2, #4]
 800eaae:	4401      	add	r1, r0
 800eab0:	6019      	str	r1, [r3, #0]
 800eab2:	605a      	str	r2, [r3, #4]
 800eab4:	e7d8      	b.n	800ea68 <_free_r+0x24>
 800eab6:	d902      	bls.n	800eabe <_free_r+0x7a>
 800eab8:	230c      	movs	r3, #12
 800eaba:	602b      	str	r3, [r5, #0]
 800eabc:	e7d4      	b.n	800ea68 <_free_r+0x24>
 800eabe:	6820      	ldr	r0, [r4, #0]
 800eac0:	1821      	adds	r1, r4, r0
 800eac2:	428a      	cmp	r2, r1
 800eac4:	bf01      	itttt	eq
 800eac6:	6811      	ldreq	r1, [r2, #0]
 800eac8:	6852      	ldreq	r2, [r2, #4]
 800eaca:	1809      	addeq	r1, r1, r0
 800eacc:	6021      	streq	r1, [r4, #0]
 800eace:	6062      	str	r2, [r4, #4]
 800ead0:	605c      	str	r4, [r3, #4]
 800ead2:	e7c9      	b.n	800ea68 <_free_r+0x24>
 800ead4:	bd38      	pop	{r3, r4, r5, pc}
 800ead6:	bf00      	nop
 800ead8:	2000066c 	.word	0x2000066c

0800eadc <_malloc_r>:
 800eadc:	b570      	push	{r4, r5, r6, lr}
 800eade:	1ccd      	adds	r5, r1, #3
 800eae0:	f025 0503 	bic.w	r5, r5, #3
 800eae4:	3508      	adds	r5, #8
 800eae6:	2d0c      	cmp	r5, #12
 800eae8:	bf38      	it	cc
 800eaea:	250c      	movcc	r5, #12
 800eaec:	2d00      	cmp	r5, #0
 800eaee:	4606      	mov	r6, r0
 800eaf0:	db01      	blt.n	800eaf6 <_malloc_r+0x1a>
 800eaf2:	42a9      	cmp	r1, r5
 800eaf4:	d903      	bls.n	800eafe <_malloc_r+0x22>
 800eaf6:	230c      	movs	r3, #12
 800eaf8:	6033      	str	r3, [r6, #0]
 800eafa:	2000      	movs	r0, #0
 800eafc:	bd70      	pop	{r4, r5, r6, pc}
 800eafe:	f000 f9d4 	bl	800eeaa <__malloc_lock>
 800eb02:	4a21      	ldr	r2, [pc, #132]	; (800eb88 <_malloc_r+0xac>)
 800eb04:	6814      	ldr	r4, [r2, #0]
 800eb06:	4621      	mov	r1, r4
 800eb08:	b991      	cbnz	r1, 800eb30 <_malloc_r+0x54>
 800eb0a:	4c20      	ldr	r4, [pc, #128]	; (800eb8c <_malloc_r+0xb0>)
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	b91b      	cbnz	r3, 800eb18 <_malloc_r+0x3c>
 800eb10:	4630      	mov	r0, r6
 800eb12:	f000 f98f 	bl	800ee34 <_sbrk_r>
 800eb16:	6020      	str	r0, [r4, #0]
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4630      	mov	r0, r6
 800eb1c:	f000 f98a 	bl	800ee34 <_sbrk_r>
 800eb20:	1c43      	adds	r3, r0, #1
 800eb22:	d124      	bne.n	800eb6e <_malloc_r+0x92>
 800eb24:	230c      	movs	r3, #12
 800eb26:	4630      	mov	r0, r6
 800eb28:	6033      	str	r3, [r6, #0]
 800eb2a:	f000 f9bf 	bl	800eeac <__malloc_unlock>
 800eb2e:	e7e4      	b.n	800eafa <_malloc_r+0x1e>
 800eb30:	680b      	ldr	r3, [r1, #0]
 800eb32:	1b5b      	subs	r3, r3, r5
 800eb34:	d418      	bmi.n	800eb68 <_malloc_r+0x8c>
 800eb36:	2b0b      	cmp	r3, #11
 800eb38:	d90f      	bls.n	800eb5a <_malloc_r+0x7e>
 800eb3a:	600b      	str	r3, [r1, #0]
 800eb3c:	18cc      	adds	r4, r1, r3
 800eb3e:	50cd      	str	r5, [r1, r3]
 800eb40:	4630      	mov	r0, r6
 800eb42:	f000 f9b3 	bl	800eeac <__malloc_unlock>
 800eb46:	f104 000b 	add.w	r0, r4, #11
 800eb4a:	1d23      	adds	r3, r4, #4
 800eb4c:	f020 0007 	bic.w	r0, r0, #7
 800eb50:	1ac3      	subs	r3, r0, r3
 800eb52:	d0d3      	beq.n	800eafc <_malloc_r+0x20>
 800eb54:	425a      	negs	r2, r3
 800eb56:	50e2      	str	r2, [r4, r3]
 800eb58:	e7d0      	b.n	800eafc <_malloc_r+0x20>
 800eb5a:	684b      	ldr	r3, [r1, #4]
 800eb5c:	428c      	cmp	r4, r1
 800eb5e:	bf16      	itet	ne
 800eb60:	6063      	strne	r3, [r4, #4]
 800eb62:	6013      	streq	r3, [r2, #0]
 800eb64:	460c      	movne	r4, r1
 800eb66:	e7eb      	b.n	800eb40 <_malloc_r+0x64>
 800eb68:	460c      	mov	r4, r1
 800eb6a:	6849      	ldr	r1, [r1, #4]
 800eb6c:	e7cc      	b.n	800eb08 <_malloc_r+0x2c>
 800eb6e:	1cc4      	adds	r4, r0, #3
 800eb70:	f024 0403 	bic.w	r4, r4, #3
 800eb74:	42a0      	cmp	r0, r4
 800eb76:	d005      	beq.n	800eb84 <_malloc_r+0xa8>
 800eb78:	1a21      	subs	r1, r4, r0
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f000 f95a 	bl	800ee34 <_sbrk_r>
 800eb80:	3001      	adds	r0, #1
 800eb82:	d0cf      	beq.n	800eb24 <_malloc_r+0x48>
 800eb84:	6025      	str	r5, [r4, #0]
 800eb86:	e7db      	b.n	800eb40 <_malloc_r+0x64>
 800eb88:	2000066c 	.word	0x2000066c
 800eb8c:	20000670 	.word	0x20000670

0800eb90 <__ssputs_r>:
 800eb90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb94:	688e      	ldr	r6, [r1, #8]
 800eb96:	4682      	mov	sl, r0
 800eb98:	429e      	cmp	r6, r3
 800eb9a:	460c      	mov	r4, r1
 800eb9c:	4690      	mov	r8, r2
 800eb9e:	4699      	mov	r9, r3
 800eba0:	d837      	bhi.n	800ec12 <__ssputs_r+0x82>
 800eba2:	898a      	ldrh	r2, [r1, #12]
 800eba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eba8:	d031      	beq.n	800ec0e <__ssputs_r+0x7e>
 800ebaa:	2302      	movs	r3, #2
 800ebac:	6825      	ldr	r5, [r4, #0]
 800ebae:	6909      	ldr	r1, [r1, #16]
 800ebb0:	1a6f      	subs	r7, r5, r1
 800ebb2:	6965      	ldr	r5, [r4, #20]
 800ebb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebb8:	fb95 f5f3 	sdiv	r5, r5, r3
 800ebbc:	f109 0301 	add.w	r3, r9, #1
 800ebc0:	443b      	add	r3, r7
 800ebc2:	429d      	cmp	r5, r3
 800ebc4:	bf38      	it	cc
 800ebc6:	461d      	movcc	r5, r3
 800ebc8:	0553      	lsls	r3, r2, #21
 800ebca:	d530      	bpl.n	800ec2e <__ssputs_r+0x9e>
 800ebcc:	4629      	mov	r1, r5
 800ebce:	f7ff ff85 	bl	800eadc <_malloc_r>
 800ebd2:	4606      	mov	r6, r0
 800ebd4:	b950      	cbnz	r0, 800ebec <__ssputs_r+0x5c>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebdc:	f8ca 3000 	str.w	r3, [sl]
 800ebe0:	89a3      	ldrh	r3, [r4, #12]
 800ebe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ebe6:	81a3      	strh	r3, [r4, #12]
 800ebe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebec:	463a      	mov	r2, r7
 800ebee:	6921      	ldr	r1, [r4, #16]
 800ebf0:	f7ff fc32 	bl	800e458 <memcpy>
 800ebf4:	89a3      	ldrh	r3, [r4, #12]
 800ebf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ebfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ebfe:	81a3      	strh	r3, [r4, #12]
 800ec00:	6126      	str	r6, [r4, #16]
 800ec02:	443e      	add	r6, r7
 800ec04:	6026      	str	r6, [r4, #0]
 800ec06:	464e      	mov	r6, r9
 800ec08:	6165      	str	r5, [r4, #20]
 800ec0a:	1bed      	subs	r5, r5, r7
 800ec0c:	60a5      	str	r5, [r4, #8]
 800ec0e:	454e      	cmp	r6, r9
 800ec10:	d900      	bls.n	800ec14 <__ssputs_r+0x84>
 800ec12:	464e      	mov	r6, r9
 800ec14:	4632      	mov	r2, r6
 800ec16:	4641      	mov	r1, r8
 800ec18:	6820      	ldr	r0, [r4, #0]
 800ec1a:	f000 f92d 	bl	800ee78 <memmove>
 800ec1e:	68a3      	ldr	r3, [r4, #8]
 800ec20:	2000      	movs	r0, #0
 800ec22:	1b9b      	subs	r3, r3, r6
 800ec24:	60a3      	str	r3, [r4, #8]
 800ec26:	6823      	ldr	r3, [r4, #0]
 800ec28:	441e      	add	r6, r3
 800ec2a:	6026      	str	r6, [r4, #0]
 800ec2c:	e7dc      	b.n	800ebe8 <__ssputs_r+0x58>
 800ec2e:	462a      	mov	r2, r5
 800ec30:	f000 f93d 	bl	800eeae <_realloc_r>
 800ec34:	4606      	mov	r6, r0
 800ec36:	2800      	cmp	r0, #0
 800ec38:	d1e2      	bne.n	800ec00 <__ssputs_r+0x70>
 800ec3a:	6921      	ldr	r1, [r4, #16]
 800ec3c:	4650      	mov	r0, sl
 800ec3e:	f7ff ff01 	bl	800ea44 <_free_r>
 800ec42:	e7c8      	b.n	800ebd6 <__ssputs_r+0x46>

0800ec44 <_svfiprintf_r>:
 800ec44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec48:	461d      	mov	r5, r3
 800ec4a:	898b      	ldrh	r3, [r1, #12]
 800ec4c:	b09d      	sub	sp, #116	; 0x74
 800ec4e:	061f      	lsls	r7, r3, #24
 800ec50:	4680      	mov	r8, r0
 800ec52:	460c      	mov	r4, r1
 800ec54:	4616      	mov	r6, r2
 800ec56:	d50f      	bpl.n	800ec78 <_svfiprintf_r+0x34>
 800ec58:	690b      	ldr	r3, [r1, #16]
 800ec5a:	b96b      	cbnz	r3, 800ec78 <_svfiprintf_r+0x34>
 800ec5c:	2140      	movs	r1, #64	; 0x40
 800ec5e:	f7ff ff3d 	bl	800eadc <_malloc_r>
 800ec62:	6020      	str	r0, [r4, #0]
 800ec64:	6120      	str	r0, [r4, #16]
 800ec66:	b928      	cbnz	r0, 800ec74 <_svfiprintf_r+0x30>
 800ec68:	230c      	movs	r3, #12
 800ec6a:	f8c8 3000 	str.w	r3, [r8]
 800ec6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec72:	e0c8      	b.n	800ee06 <_svfiprintf_r+0x1c2>
 800ec74:	2340      	movs	r3, #64	; 0x40
 800ec76:	6163      	str	r3, [r4, #20]
 800ec78:	2300      	movs	r3, #0
 800ec7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec7c:	2320      	movs	r3, #32
 800ec7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec82:	2330      	movs	r3, #48	; 0x30
 800ec84:	f04f 0b01 	mov.w	fp, #1
 800ec88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec8c:	9503      	str	r5, [sp, #12]
 800ec8e:	4637      	mov	r7, r6
 800ec90:	463d      	mov	r5, r7
 800ec92:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ec96:	b10b      	cbz	r3, 800ec9c <_svfiprintf_r+0x58>
 800ec98:	2b25      	cmp	r3, #37	; 0x25
 800ec9a:	d13e      	bne.n	800ed1a <_svfiprintf_r+0xd6>
 800ec9c:	ebb7 0a06 	subs.w	sl, r7, r6
 800eca0:	d00b      	beq.n	800ecba <_svfiprintf_r+0x76>
 800eca2:	4653      	mov	r3, sl
 800eca4:	4632      	mov	r2, r6
 800eca6:	4621      	mov	r1, r4
 800eca8:	4640      	mov	r0, r8
 800ecaa:	f7ff ff71 	bl	800eb90 <__ssputs_r>
 800ecae:	3001      	adds	r0, #1
 800ecb0:	f000 80a4 	beq.w	800edfc <_svfiprintf_r+0x1b8>
 800ecb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecb6:	4453      	add	r3, sl
 800ecb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ecba:	783b      	ldrb	r3, [r7, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 809d 	beq.w	800edfc <_svfiprintf_r+0x1b8>
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ecc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eccc:	9304      	str	r3, [sp, #16]
 800ecce:	9307      	str	r3, [sp, #28]
 800ecd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ecd4:	931a      	str	r3, [sp, #104]	; 0x68
 800ecd6:	462f      	mov	r7, r5
 800ecd8:	2205      	movs	r2, #5
 800ecda:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ecde:	4850      	ldr	r0, [pc, #320]	; (800ee20 <_svfiprintf_r+0x1dc>)
 800ece0:	f7ff fbac 	bl	800e43c <memchr>
 800ece4:	9b04      	ldr	r3, [sp, #16]
 800ece6:	b9d0      	cbnz	r0, 800ed1e <_svfiprintf_r+0xda>
 800ece8:	06d9      	lsls	r1, r3, #27
 800ecea:	bf44      	itt	mi
 800ecec:	2220      	movmi	r2, #32
 800ecee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ecf2:	071a      	lsls	r2, r3, #28
 800ecf4:	bf44      	itt	mi
 800ecf6:	222b      	movmi	r2, #43	; 0x2b
 800ecf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ecfc:	782a      	ldrb	r2, [r5, #0]
 800ecfe:	2a2a      	cmp	r2, #42	; 0x2a
 800ed00:	d015      	beq.n	800ed2e <_svfiprintf_r+0xea>
 800ed02:	462f      	mov	r7, r5
 800ed04:	2000      	movs	r0, #0
 800ed06:	250a      	movs	r5, #10
 800ed08:	9a07      	ldr	r2, [sp, #28]
 800ed0a:	4639      	mov	r1, r7
 800ed0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed10:	3b30      	subs	r3, #48	; 0x30
 800ed12:	2b09      	cmp	r3, #9
 800ed14:	d94d      	bls.n	800edb2 <_svfiprintf_r+0x16e>
 800ed16:	b1b8      	cbz	r0, 800ed48 <_svfiprintf_r+0x104>
 800ed18:	e00f      	b.n	800ed3a <_svfiprintf_r+0xf6>
 800ed1a:	462f      	mov	r7, r5
 800ed1c:	e7b8      	b.n	800ec90 <_svfiprintf_r+0x4c>
 800ed1e:	4a40      	ldr	r2, [pc, #256]	; (800ee20 <_svfiprintf_r+0x1dc>)
 800ed20:	463d      	mov	r5, r7
 800ed22:	1a80      	subs	r0, r0, r2
 800ed24:	fa0b f000 	lsl.w	r0, fp, r0
 800ed28:	4318      	orrs	r0, r3
 800ed2a:	9004      	str	r0, [sp, #16]
 800ed2c:	e7d3      	b.n	800ecd6 <_svfiprintf_r+0x92>
 800ed2e:	9a03      	ldr	r2, [sp, #12]
 800ed30:	1d11      	adds	r1, r2, #4
 800ed32:	6812      	ldr	r2, [r2, #0]
 800ed34:	9103      	str	r1, [sp, #12]
 800ed36:	2a00      	cmp	r2, #0
 800ed38:	db01      	blt.n	800ed3e <_svfiprintf_r+0xfa>
 800ed3a:	9207      	str	r2, [sp, #28]
 800ed3c:	e004      	b.n	800ed48 <_svfiprintf_r+0x104>
 800ed3e:	4252      	negs	r2, r2
 800ed40:	f043 0302 	orr.w	r3, r3, #2
 800ed44:	9207      	str	r2, [sp, #28]
 800ed46:	9304      	str	r3, [sp, #16]
 800ed48:	783b      	ldrb	r3, [r7, #0]
 800ed4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ed4c:	d10c      	bne.n	800ed68 <_svfiprintf_r+0x124>
 800ed4e:	787b      	ldrb	r3, [r7, #1]
 800ed50:	2b2a      	cmp	r3, #42	; 0x2a
 800ed52:	d133      	bne.n	800edbc <_svfiprintf_r+0x178>
 800ed54:	9b03      	ldr	r3, [sp, #12]
 800ed56:	3702      	adds	r7, #2
 800ed58:	1d1a      	adds	r2, r3, #4
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	9203      	str	r2, [sp, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bfb8      	it	lt
 800ed62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed66:	9305      	str	r3, [sp, #20]
 800ed68:	4d2e      	ldr	r5, [pc, #184]	; (800ee24 <_svfiprintf_r+0x1e0>)
 800ed6a:	2203      	movs	r2, #3
 800ed6c:	7839      	ldrb	r1, [r7, #0]
 800ed6e:	4628      	mov	r0, r5
 800ed70:	f7ff fb64 	bl	800e43c <memchr>
 800ed74:	b138      	cbz	r0, 800ed86 <_svfiprintf_r+0x142>
 800ed76:	2340      	movs	r3, #64	; 0x40
 800ed78:	1b40      	subs	r0, r0, r5
 800ed7a:	fa03 f000 	lsl.w	r0, r3, r0
 800ed7e:	9b04      	ldr	r3, [sp, #16]
 800ed80:	3701      	adds	r7, #1
 800ed82:	4303      	orrs	r3, r0
 800ed84:	9304      	str	r3, [sp, #16]
 800ed86:	7839      	ldrb	r1, [r7, #0]
 800ed88:	2206      	movs	r2, #6
 800ed8a:	4827      	ldr	r0, [pc, #156]	; (800ee28 <_svfiprintf_r+0x1e4>)
 800ed8c:	1c7e      	adds	r6, r7, #1
 800ed8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed92:	f7ff fb53 	bl	800e43c <memchr>
 800ed96:	2800      	cmp	r0, #0
 800ed98:	d038      	beq.n	800ee0c <_svfiprintf_r+0x1c8>
 800ed9a:	4b24      	ldr	r3, [pc, #144]	; (800ee2c <_svfiprintf_r+0x1e8>)
 800ed9c:	bb13      	cbnz	r3, 800ede4 <_svfiprintf_r+0x1a0>
 800ed9e:	9b03      	ldr	r3, [sp, #12]
 800eda0:	3307      	adds	r3, #7
 800eda2:	f023 0307 	bic.w	r3, r3, #7
 800eda6:	3308      	adds	r3, #8
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edac:	444b      	add	r3, r9
 800edae:	9309      	str	r3, [sp, #36]	; 0x24
 800edb0:	e76d      	b.n	800ec8e <_svfiprintf_r+0x4a>
 800edb2:	fb05 3202 	mla	r2, r5, r2, r3
 800edb6:	2001      	movs	r0, #1
 800edb8:	460f      	mov	r7, r1
 800edba:	e7a6      	b.n	800ed0a <_svfiprintf_r+0xc6>
 800edbc:	2300      	movs	r3, #0
 800edbe:	250a      	movs	r5, #10
 800edc0:	4619      	mov	r1, r3
 800edc2:	3701      	adds	r7, #1
 800edc4:	9305      	str	r3, [sp, #20]
 800edc6:	4638      	mov	r0, r7
 800edc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800edcc:	3a30      	subs	r2, #48	; 0x30
 800edce:	2a09      	cmp	r2, #9
 800edd0:	d903      	bls.n	800edda <_svfiprintf_r+0x196>
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d0c8      	beq.n	800ed68 <_svfiprintf_r+0x124>
 800edd6:	9105      	str	r1, [sp, #20]
 800edd8:	e7c6      	b.n	800ed68 <_svfiprintf_r+0x124>
 800edda:	fb05 2101 	mla	r1, r5, r1, r2
 800edde:	2301      	movs	r3, #1
 800ede0:	4607      	mov	r7, r0
 800ede2:	e7f0      	b.n	800edc6 <_svfiprintf_r+0x182>
 800ede4:	ab03      	add	r3, sp, #12
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	4622      	mov	r2, r4
 800edea:	4b11      	ldr	r3, [pc, #68]	; (800ee30 <_svfiprintf_r+0x1ec>)
 800edec:	a904      	add	r1, sp, #16
 800edee:	4640      	mov	r0, r8
 800edf0:	f7fe f8ee 	bl	800cfd0 <_printf_float>
 800edf4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800edf8:	4681      	mov	r9, r0
 800edfa:	d1d6      	bne.n	800edaa <_svfiprintf_r+0x166>
 800edfc:	89a3      	ldrh	r3, [r4, #12]
 800edfe:	065b      	lsls	r3, r3, #25
 800ee00:	f53f af35 	bmi.w	800ec6e <_svfiprintf_r+0x2a>
 800ee04:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee06:	b01d      	add	sp, #116	; 0x74
 800ee08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0c:	ab03      	add	r3, sp, #12
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	4622      	mov	r2, r4
 800ee12:	4b07      	ldr	r3, [pc, #28]	; (800ee30 <_svfiprintf_r+0x1ec>)
 800ee14:	a904      	add	r1, sp, #16
 800ee16:	4640      	mov	r0, r8
 800ee18:	f7fe fb86 	bl	800d528 <_printf_i>
 800ee1c:	e7ea      	b.n	800edf4 <_svfiprintf_r+0x1b0>
 800ee1e:	bf00      	nop
 800ee20:	0800fd34 	.word	0x0800fd34
 800ee24:	0800fd3a 	.word	0x0800fd3a
 800ee28:	0800fd3e 	.word	0x0800fd3e
 800ee2c:	0800cfd1 	.word	0x0800cfd1
 800ee30:	0800eb91 	.word	0x0800eb91

0800ee34 <_sbrk_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	2300      	movs	r3, #0
 800ee38:	4c05      	ldr	r4, [pc, #20]	; (800ee50 <_sbrk_r+0x1c>)
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	6023      	str	r3, [r4, #0]
 800ee40:	f7f8 fc1a 	bl	8007678 <_sbrk>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d102      	bne.n	800ee4e <_sbrk_r+0x1a>
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	b103      	cbz	r3, 800ee4e <_sbrk_r+0x1a>
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	20000f50 	.word	0x20000f50

0800ee54 <__ascii_mbtowc>:
 800ee54:	b082      	sub	sp, #8
 800ee56:	b901      	cbnz	r1, 800ee5a <__ascii_mbtowc+0x6>
 800ee58:	a901      	add	r1, sp, #4
 800ee5a:	b142      	cbz	r2, 800ee6e <__ascii_mbtowc+0x1a>
 800ee5c:	b14b      	cbz	r3, 800ee72 <__ascii_mbtowc+0x1e>
 800ee5e:	7813      	ldrb	r3, [r2, #0]
 800ee60:	600b      	str	r3, [r1, #0]
 800ee62:	7812      	ldrb	r2, [r2, #0]
 800ee64:	1c10      	adds	r0, r2, #0
 800ee66:	bf18      	it	ne
 800ee68:	2001      	movne	r0, #1
 800ee6a:	b002      	add	sp, #8
 800ee6c:	4770      	bx	lr
 800ee6e:	4610      	mov	r0, r2
 800ee70:	e7fb      	b.n	800ee6a <__ascii_mbtowc+0x16>
 800ee72:	f06f 0001 	mvn.w	r0, #1
 800ee76:	e7f8      	b.n	800ee6a <__ascii_mbtowc+0x16>

0800ee78 <memmove>:
 800ee78:	4288      	cmp	r0, r1
 800ee7a:	b510      	push	{r4, lr}
 800ee7c:	eb01 0302 	add.w	r3, r1, r2
 800ee80:	d807      	bhi.n	800ee92 <memmove+0x1a>
 800ee82:	1e42      	subs	r2, r0, #1
 800ee84:	4299      	cmp	r1, r3
 800ee86:	d00a      	beq.n	800ee9e <memmove+0x26>
 800ee88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ee90:	e7f8      	b.n	800ee84 <memmove+0xc>
 800ee92:	4283      	cmp	r3, r0
 800ee94:	d9f5      	bls.n	800ee82 <memmove+0xa>
 800ee96:	1881      	adds	r1, r0, r2
 800ee98:	1ad2      	subs	r2, r2, r3
 800ee9a:	42d3      	cmn	r3, r2
 800ee9c:	d100      	bne.n	800eea0 <memmove+0x28>
 800ee9e:	bd10      	pop	{r4, pc}
 800eea0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eea4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800eea8:	e7f7      	b.n	800ee9a <memmove+0x22>

0800eeaa <__malloc_lock>:
 800eeaa:	4770      	bx	lr

0800eeac <__malloc_unlock>:
 800eeac:	4770      	bx	lr

0800eeae <_realloc_r>:
 800eeae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	4614      	mov	r4, r2
 800eeb4:	460e      	mov	r6, r1
 800eeb6:	b921      	cbnz	r1, 800eec2 <_realloc_r+0x14>
 800eeb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eebc:	4611      	mov	r1, r2
 800eebe:	f7ff be0d 	b.w	800eadc <_malloc_r>
 800eec2:	b922      	cbnz	r2, 800eece <_realloc_r+0x20>
 800eec4:	f7ff fdbe 	bl	800ea44 <_free_r>
 800eec8:	4625      	mov	r5, r4
 800eeca:	4628      	mov	r0, r5
 800eecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eece:	f000 f821 	bl	800ef14 <_malloc_usable_size_r>
 800eed2:	42a0      	cmp	r0, r4
 800eed4:	d20f      	bcs.n	800eef6 <_realloc_r+0x48>
 800eed6:	4621      	mov	r1, r4
 800eed8:	4638      	mov	r0, r7
 800eeda:	f7ff fdff 	bl	800eadc <_malloc_r>
 800eede:	4605      	mov	r5, r0
 800eee0:	2800      	cmp	r0, #0
 800eee2:	d0f2      	beq.n	800eeca <_realloc_r+0x1c>
 800eee4:	4631      	mov	r1, r6
 800eee6:	4622      	mov	r2, r4
 800eee8:	f7ff fab6 	bl	800e458 <memcpy>
 800eeec:	4631      	mov	r1, r6
 800eeee:	4638      	mov	r0, r7
 800eef0:	f7ff fda8 	bl	800ea44 <_free_r>
 800eef4:	e7e9      	b.n	800eeca <_realloc_r+0x1c>
 800eef6:	4635      	mov	r5, r6
 800eef8:	e7e7      	b.n	800eeca <_realloc_r+0x1c>

0800eefa <__ascii_wctomb>:
 800eefa:	b149      	cbz	r1, 800ef10 <__ascii_wctomb+0x16>
 800eefc:	2aff      	cmp	r2, #255	; 0xff
 800eefe:	bf8b      	itete	hi
 800ef00:	238a      	movhi	r3, #138	; 0x8a
 800ef02:	700a      	strbls	r2, [r1, #0]
 800ef04:	6003      	strhi	r3, [r0, #0]
 800ef06:	2001      	movls	r0, #1
 800ef08:	bf88      	it	hi
 800ef0a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ef0e:	4770      	bx	lr
 800ef10:	4608      	mov	r0, r1
 800ef12:	4770      	bx	lr

0800ef14 <_malloc_usable_size_r>:
 800ef14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ef18:	1f18      	subs	r0, r3, #4
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	bfbc      	itt	lt
 800ef1e:	580b      	ldrlt	r3, [r1, r0]
 800ef20:	18c0      	addlt	r0, r0, r3
 800ef22:	4770      	bx	lr

0800ef24 <log>:
 800ef24:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800ef28:	b08a      	sub	sp, #40	; 0x28
 800ef2a:	4604      	mov	r4, r0
 800ef2c:	460d      	mov	r5, r1
 800ef2e:	f000 f873 	bl	800f018 <__ieee754_log>
 800ef32:	4b34      	ldr	r3, [pc, #208]	; (800f004 <log+0xe0>)
 800ef34:	4680      	mov	r8, r0
 800ef36:	f993 6000 	ldrsb.w	r6, [r3]
 800ef3a:	4689      	mov	r9, r1
 800ef3c:	1c73      	adds	r3, r6, #1
 800ef3e:	d05b      	beq.n	800eff8 <log+0xd4>
 800ef40:	4622      	mov	r2, r4
 800ef42:	462b      	mov	r3, r5
 800ef44:	4620      	mov	r0, r4
 800ef46:	4629      	mov	r1, r5
 800ef48:	f7f1 fd9c 	bl	8000a84 <__aeabi_dcmpun>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d153      	bne.n	800eff8 <log+0xd4>
 800ef50:	2200      	movs	r2, #0
 800ef52:	2300      	movs	r3, #0
 800ef54:	4620      	mov	r0, r4
 800ef56:	4629      	mov	r1, r5
 800ef58:	f7f1 fd8a 	bl	8000a70 <__aeabi_dcmpgt>
 800ef5c:	2800      	cmp	r0, #0
 800ef5e:	d14b      	bne.n	800eff8 <log+0xd4>
 800ef60:	4b29      	ldr	r3, [pc, #164]	; (800f008 <log+0xe4>)
 800ef62:	9008      	str	r0, [sp, #32]
 800ef64:	9301      	str	r3, [sp, #4]
 800ef66:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ef6a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800ef6e:	b9a6      	cbnz	r6, 800ef9a <log+0x76>
 800ef70:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800ef74:	4b25      	ldr	r3, [pc, #148]	; (800f00c <log+0xe8>)
 800ef76:	4620      	mov	r0, r4
 800ef78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ef7c:	4629      	mov	r1, r5
 800ef7e:	2200      	movs	r2, #0
 800ef80:	2300      	movs	r3, #0
 800ef82:	f7f1 fd4d 	bl	8000a20 <__aeabi_dcmpeq>
 800ef86:	bb40      	cbnz	r0, 800efda <log+0xb6>
 800ef88:	2301      	movs	r3, #1
 800ef8a:	2e02      	cmp	r6, #2
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	d119      	bne.n	800efc4 <log+0xa0>
 800ef90:	f7fd ff5a 	bl	800ce48 <__errno>
 800ef94:	2321      	movs	r3, #33	; 0x21
 800ef96:	6003      	str	r3, [r0, #0]
 800ef98:	e019      	b.n	800efce <log+0xaa>
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	4b1c      	ldr	r3, [pc, #112]	; (800f010 <log+0xec>)
 800ef9e:	4620      	mov	r0, r4
 800efa0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800efa4:	4629      	mov	r1, r5
 800efa6:	2200      	movs	r2, #0
 800efa8:	2300      	movs	r3, #0
 800efaa:	f7f1 fd39 	bl	8000a20 <__aeabi_dcmpeq>
 800efae:	2800      	cmp	r0, #0
 800efb0:	d0ea      	beq.n	800ef88 <log+0x64>
 800efb2:	2302      	movs	r3, #2
 800efb4:	429e      	cmp	r6, r3
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	d111      	bne.n	800efde <log+0xba>
 800efba:	f7fd ff45 	bl	800ce48 <__errno>
 800efbe:	2322      	movs	r3, #34	; 0x22
 800efc0:	6003      	str	r3, [r0, #0]
 800efc2:	e011      	b.n	800efe8 <log+0xc4>
 800efc4:	4668      	mov	r0, sp
 800efc6:	f000 f9d9 	bl	800f37c <matherr>
 800efca:	2800      	cmp	r0, #0
 800efcc:	d0e0      	beq.n	800ef90 <log+0x6c>
 800efce:	4811      	ldr	r0, [pc, #68]	; (800f014 <log+0xf0>)
 800efd0:	f000 f9d6 	bl	800f380 <nan>
 800efd4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800efd8:	e006      	b.n	800efe8 <log+0xc4>
 800efda:	2302      	movs	r3, #2
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	4668      	mov	r0, sp
 800efe0:	f000 f9cc 	bl	800f37c <matherr>
 800efe4:	2800      	cmp	r0, #0
 800efe6:	d0e8      	beq.n	800efba <log+0x96>
 800efe8:	9b08      	ldr	r3, [sp, #32]
 800efea:	b11b      	cbz	r3, 800eff4 <log+0xd0>
 800efec:	f7fd ff2c 	bl	800ce48 <__errno>
 800eff0:	9b08      	ldr	r3, [sp, #32]
 800eff2:	6003      	str	r3, [r0, #0]
 800eff4:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800eff8:	4640      	mov	r0, r8
 800effa:	4649      	mov	r1, r9
 800effc:	b00a      	add	sp, #40	; 0x28
 800effe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f002:	bf00      	nop
 800f004:	20000234 	.word	0x20000234
 800f008:	0800fe50 	.word	0x0800fe50
 800f00c:	c7efffff 	.word	0xc7efffff
 800f010:	fff00000 	.word	0xfff00000
 800f014:	0800fd39 	.word	0x0800fd39

0800f018 <__ieee754_log>:
 800f018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f020:	b087      	sub	sp, #28
 800f022:	4602      	mov	r2, r0
 800f024:	460b      	mov	r3, r1
 800f026:	460d      	mov	r5, r1
 800f028:	da24      	bge.n	800f074 <__ieee754_log+0x5c>
 800f02a:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800f02e:	4304      	orrs	r4, r0
 800f030:	d108      	bne.n	800f044 <__ieee754_log+0x2c>
 800f032:	2200      	movs	r2, #0
 800f034:	2300      	movs	r3, #0
 800f036:	2000      	movs	r0, #0
 800f038:	49cb      	ldr	r1, [pc, #812]	; (800f368 <__ieee754_log+0x350>)
 800f03a:	f7f1 fbb3 	bl	80007a4 <__aeabi_ddiv>
 800f03e:	b007      	add	sp, #28
 800f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	2900      	cmp	r1, #0
 800f046:	da04      	bge.n	800f052 <__ieee754_log+0x3a>
 800f048:	f7f1 f8ca 	bl	80001e0 <__aeabi_dsub>
 800f04c:	2200      	movs	r2, #0
 800f04e:	2300      	movs	r3, #0
 800f050:	e7f3      	b.n	800f03a <__ieee754_log+0x22>
 800f052:	2200      	movs	r2, #0
 800f054:	4bc5      	ldr	r3, [pc, #788]	; (800f36c <__ieee754_log+0x354>)
 800f056:	f7f1 fa7b 	bl	8000550 <__aeabi_dmul>
 800f05a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800f05e:	4602      	mov	r2, r0
 800f060:	460b      	mov	r3, r1
 800f062:	460d      	mov	r5, r1
 800f064:	49c2      	ldr	r1, [pc, #776]	; (800f370 <__ieee754_log+0x358>)
 800f066:	428d      	cmp	r5, r1
 800f068:	dd06      	ble.n	800f078 <__ieee754_log+0x60>
 800f06a:	4610      	mov	r0, r2
 800f06c:	4619      	mov	r1, r3
 800f06e:	f7f1 f8b9 	bl	80001e4 <__adddf3>
 800f072:	e7e4      	b.n	800f03e <__ieee754_log+0x26>
 800f074:	2600      	movs	r6, #0
 800f076:	e7f5      	b.n	800f064 <__ieee754_log+0x4c>
 800f078:	152c      	asrs	r4, r5, #20
 800f07a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f07e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800f082:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f086:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800f08a:	4426      	add	r6, r4
 800f08c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800f090:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800f094:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800f098:	ea41 0305 	orr.w	r3, r1, r5
 800f09c:	4610      	mov	r0, r2
 800f09e:	4619      	mov	r1, r3
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	4bb4      	ldr	r3, [pc, #720]	; (800f374 <__ieee754_log+0x35c>)
 800f0a4:	f7f1 f89c 	bl	80001e0 <__aeabi_dsub>
 800f0a8:	1cab      	adds	r3, r5, #2
 800f0aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0ae:	2b02      	cmp	r3, #2
 800f0b0:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800f0b4:	4682      	mov	sl, r0
 800f0b6:	468b      	mov	fp, r1
 800f0b8:	f04f 0200 	mov.w	r2, #0
 800f0bc:	dc53      	bgt.n	800f166 <__ieee754_log+0x14e>
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f7f1 fcae 	bl	8000a20 <__aeabi_dcmpeq>
 800f0c4:	b1d0      	cbz	r0, 800f0fc <__ieee754_log+0xe4>
 800f0c6:	2c00      	cmp	r4, #0
 800f0c8:	f000 8120 	beq.w	800f30c <__ieee754_log+0x2f4>
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f7f1 f9d5 	bl	800047c <__aeabi_i2d>
 800f0d2:	a391      	add	r3, pc, #580	; (adr r3, 800f318 <__ieee754_log+0x300>)
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	4606      	mov	r6, r0
 800f0da:	460f      	mov	r7, r1
 800f0dc:	f7f1 fa38 	bl	8000550 <__aeabi_dmul>
 800f0e0:	a38f      	add	r3, pc, #572	; (adr r3, 800f320 <__ieee754_log+0x308>)
 800f0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e6:	4604      	mov	r4, r0
 800f0e8:	460d      	mov	r5, r1
 800f0ea:	4630      	mov	r0, r6
 800f0ec:	4639      	mov	r1, r7
 800f0ee:	f7f1 fa2f 	bl	8000550 <__aeabi_dmul>
 800f0f2:	4602      	mov	r2, r0
 800f0f4:	460b      	mov	r3, r1
 800f0f6:	4620      	mov	r0, r4
 800f0f8:	4629      	mov	r1, r5
 800f0fa:	e7b8      	b.n	800f06e <__ieee754_log+0x56>
 800f0fc:	a38a      	add	r3, pc, #552	; (adr r3, 800f328 <__ieee754_log+0x310>)
 800f0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f102:	4650      	mov	r0, sl
 800f104:	4659      	mov	r1, fp
 800f106:	f7f1 fa23 	bl	8000550 <__aeabi_dmul>
 800f10a:	4602      	mov	r2, r0
 800f10c:	460b      	mov	r3, r1
 800f10e:	2000      	movs	r0, #0
 800f110:	4999      	ldr	r1, [pc, #612]	; (800f378 <__ieee754_log+0x360>)
 800f112:	f7f1 f865 	bl	80001e0 <__aeabi_dsub>
 800f116:	4652      	mov	r2, sl
 800f118:	4606      	mov	r6, r0
 800f11a:	460f      	mov	r7, r1
 800f11c:	465b      	mov	r3, fp
 800f11e:	4650      	mov	r0, sl
 800f120:	4659      	mov	r1, fp
 800f122:	f7f1 fa15 	bl	8000550 <__aeabi_dmul>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4630      	mov	r0, r6
 800f12c:	4639      	mov	r1, r7
 800f12e:	f7f1 fa0f 	bl	8000550 <__aeabi_dmul>
 800f132:	4606      	mov	r6, r0
 800f134:	460f      	mov	r7, r1
 800f136:	b914      	cbnz	r4, 800f13e <__ieee754_log+0x126>
 800f138:	4632      	mov	r2, r6
 800f13a:	463b      	mov	r3, r7
 800f13c:	e0a0      	b.n	800f280 <__ieee754_log+0x268>
 800f13e:	4620      	mov	r0, r4
 800f140:	f7f1 f99c 	bl	800047c <__aeabi_i2d>
 800f144:	a374      	add	r3, pc, #464	; (adr r3, 800f318 <__ieee754_log+0x300>)
 800f146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14a:	4680      	mov	r8, r0
 800f14c:	4689      	mov	r9, r1
 800f14e:	f7f1 f9ff 	bl	8000550 <__aeabi_dmul>
 800f152:	a373      	add	r3, pc, #460	; (adr r3, 800f320 <__ieee754_log+0x308>)
 800f154:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f158:	4604      	mov	r4, r0
 800f15a:	460d      	mov	r5, r1
 800f15c:	4640      	mov	r0, r8
 800f15e:	4649      	mov	r1, r9
 800f160:	f7f1 f9f6 	bl	8000550 <__aeabi_dmul>
 800f164:	e0a5      	b.n	800f2b2 <__ieee754_log+0x29a>
 800f166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f16a:	f7f1 f83b 	bl	80001e4 <__adddf3>
 800f16e:	4602      	mov	r2, r0
 800f170:	460b      	mov	r3, r1
 800f172:	4650      	mov	r0, sl
 800f174:	4659      	mov	r1, fp
 800f176:	f7f1 fb15 	bl	80007a4 <__aeabi_ddiv>
 800f17a:	e9cd 0100 	strd	r0, r1, [sp]
 800f17e:	4620      	mov	r0, r4
 800f180:	f7f1 f97c 	bl	800047c <__aeabi_i2d>
 800f184:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f188:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f18c:	4610      	mov	r0, r2
 800f18e:	4619      	mov	r1, r3
 800f190:	f7f1 f9de 	bl	8000550 <__aeabi_dmul>
 800f194:	4602      	mov	r2, r0
 800f196:	460b      	mov	r3, r1
 800f198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f19c:	f7f1 f9d8 	bl	8000550 <__aeabi_dmul>
 800f1a0:	a363      	add	r3, pc, #396	; (adr r3, 800f330 <__ieee754_log+0x318>)
 800f1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a6:	4680      	mov	r8, r0
 800f1a8:	4689      	mov	r9, r1
 800f1aa:	f7f1 f9d1 	bl	8000550 <__aeabi_dmul>
 800f1ae:	a362      	add	r3, pc, #392	; (adr r3, 800f338 <__ieee754_log+0x320>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	f7f1 f816 	bl	80001e4 <__adddf3>
 800f1b8:	4642      	mov	r2, r8
 800f1ba:	464b      	mov	r3, r9
 800f1bc:	f7f1 f9c8 	bl	8000550 <__aeabi_dmul>
 800f1c0:	a35f      	add	r3, pc, #380	; (adr r3, 800f340 <__ieee754_log+0x328>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	f7f1 f80d 	bl	80001e4 <__adddf3>
 800f1ca:	4642      	mov	r2, r8
 800f1cc:	464b      	mov	r3, r9
 800f1ce:	f7f1 f9bf 	bl	8000550 <__aeabi_dmul>
 800f1d2:	a35d      	add	r3, pc, #372	; (adr r3, 800f348 <__ieee754_log+0x330>)
 800f1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d8:	f7f1 f804 	bl	80001e4 <__adddf3>
 800f1dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f1e0:	f7f1 f9b6 	bl	8000550 <__aeabi_dmul>
 800f1e4:	a35a      	add	r3, pc, #360	; (adr r3, 800f350 <__ieee754_log+0x338>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f1ee:	4640      	mov	r0, r8
 800f1f0:	4649      	mov	r1, r9
 800f1f2:	f7f1 f9ad 	bl	8000550 <__aeabi_dmul>
 800f1f6:	a358      	add	r3, pc, #352	; (adr r3, 800f358 <__ieee754_log+0x340>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f0 fff2 	bl	80001e4 <__adddf3>
 800f200:	4642      	mov	r2, r8
 800f202:	464b      	mov	r3, r9
 800f204:	f7f1 f9a4 	bl	8000550 <__aeabi_dmul>
 800f208:	a355      	add	r3, pc, #340	; (adr r3, 800f360 <__ieee754_log+0x348>)
 800f20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20e:	f7f0 ffe9 	bl	80001e4 <__adddf3>
 800f212:	4642      	mov	r2, r8
 800f214:	464b      	mov	r3, r9
 800f216:	f7f1 f99b 	bl	8000550 <__aeabi_dmul>
 800f21a:	4602      	mov	r2, r0
 800f21c:	460b      	mov	r3, r1
 800f21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f222:	f7f0 ffdf 	bl	80001e4 <__adddf3>
 800f226:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800f22a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f22e:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800f232:	3551      	adds	r5, #81	; 0x51
 800f234:	4335      	orrs	r5, r6
 800f236:	2d00      	cmp	r5, #0
 800f238:	4680      	mov	r8, r0
 800f23a:	4689      	mov	r9, r1
 800f23c:	dd48      	ble.n	800f2d0 <__ieee754_log+0x2b8>
 800f23e:	2200      	movs	r2, #0
 800f240:	4b4d      	ldr	r3, [pc, #308]	; (800f378 <__ieee754_log+0x360>)
 800f242:	4650      	mov	r0, sl
 800f244:	4659      	mov	r1, fp
 800f246:	f7f1 f983 	bl	8000550 <__aeabi_dmul>
 800f24a:	4652      	mov	r2, sl
 800f24c:	465b      	mov	r3, fp
 800f24e:	f7f1 f97f 	bl	8000550 <__aeabi_dmul>
 800f252:	4602      	mov	r2, r0
 800f254:	460b      	mov	r3, r1
 800f256:	4606      	mov	r6, r0
 800f258:	460f      	mov	r7, r1
 800f25a:	4640      	mov	r0, r8
 800f25c:	4649      	mov	r1, r9
 800f25e:	f7f0 ffc1 	bl	80001e4 <__adddf3>
 800f262:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f266:	f7f1 f973 	bl	8000550 <__aeabi_dmul>
 800f26a:	4680      	mov	r8, r0
 800f26c:	4689      	mov	r9, r1
 800f26e:	b964      	cbnz	r4, 800f28a <__ieee754_log+0x272>
 800f270:	4602      	mov	r2, r0
 800f272:	460b      	mov	r3, r1
 800f274:	4630      	mov	r0, r6
 800f276:	4639      	mov	r1, r7
 800f278:	f7f0 ffb2 	bl	80001e0 <__aeabi_dsub>
 800f27c:	4602      	mov	r2, r0
 800f27e:	460b      	mov	r3, r1
 800f280:	4650      	mov	r0, sl
 800f282:	4659      	mov	r1, fp
 800f284:	f7f0 ffac 	bl	80001e0 <__aeabi_dsub>
 800f288:	e6d9      	b.n	800f03e <__ieee754_log+0x26>
 800f28a:	a323      	add	r3, pc, #140	; (adr r3, 800f318 <__ieee754_log+0x300>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f294:	f7f1 f95c 	bl	8000550 <__aeabi_dmul>
 800f298:	a321      	add	r3, pc, #132	; (adr r3, 800f320 <__ieee754_log+0x308>)
 800f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29e:	4604      	mov	r4, r0
 800f2a0:	460d      	mov	r5, r1
 800f2a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2a6:	f7f1 f953 	bl	8000550 <__aeabi_dmul>
 800f2aa:	4642      	mov	r2, r8
 800f2ac:	464b      	mov	r3, r9
 800f2ae:	f7f0 ff99 	bl	80001e4 <__adddf3>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	4639      	mov	r1, r7
 800f2ba:	f7f0 ff91 	bl	80001e0 <__aeabi_dsub>
 800f2be:	4652      	mov	r2, sl
 800f2c0:	465b      	mov	r3, fp
 800f2c2:	f7f0 ff8d 	bl	80001e0 <__aeabi_dsub>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	460b      	mov	r3, r1
 800f2ca:	4620      	mov	r0, r4
 800f2cc:	4629      	mov	r1, r5
 800f2ce:	e7d9      	b.n	800f284 <__ieee754_log+0x26c>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4650      	mov	r0, sl
 800f2d6:	4659      	mov	r1, fp
 800f2d8:	f7f0 ff82 	bl	80001e0 <__aeabi_dsub>
 800f2dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f2e0:	f7f1 f936 	bl	8000550 <__aeabi_dmul>
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	460f      	mov	r7, r1
 800f2e8:	2c00      	cmp	r4, #0
 800f2ea:	f43f af25 	beq.w	800f138 <__ieee754_log+0x120>
 800f2ee:	a30a      	add	r3, pc, #40	; (adr r3, 800f318 <__ieee754_log+0x300>)
 800f2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2f8:	f7f1 f92a 	bl	8000550 <__aeabi_dmul>
 800f2fc:	a308      	add	r3, pc, #32	; (adr r3, 800f320 <__ieee754_log+0x308>)
 800f2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f302:	4604      	mov	r4, r0
 800f304:	460d      	mov	r5, r1
 800f306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f30a:	e729      	b.n	800f160 <__ieee754_log+0x148>
 800f30c:	2000      	movs	r0, #0
 800f30e:	2100      	movs	r1, #0
 800f310:	e695      	b.n	800f03e <__ieee754_log+0x26>
 800f312:	bf00      	nop
 800f314:	f3af 8000 	nop.w
 800f318:	fee00000 	.word	0xfee00000
 800f31c:	3fe62e42 	.word	0x3fe62e42
 800f320:	35793c76 	.word	0x35793c76
 800f324:	3dea39ef 	.word	0x3dea39ef
 800f328:	55555555 	.word	0x55555555
 800f32c:	3fd55555 	.word	0x3fd55555
 800f330:	df3e5244 	.word	0xdf3e5244
 800f334:	3fc2f112 	.word	0x3fc2f112
 800f338:	96cb03de 	.word	0x96cb03de
 800f33c:	3fc74664 	.word	0x3fc74664
 800f340:	94229359 	.word	0x94229359
 800f344:	3fd24924 	.word	0x3fd24924
 800f348:	55555593 	.word	0x55555593
 800f34c:	3fe55555 	.word	0x3fe55555
 800f350:	d078c69f 	.word	0xd078c69f
 800f354:	3fc39a09 	.word	0x3fc39a09
 800f358:	1d8e78af 	.word	0x1d8e78af
 800f35c:	3fcc71c5 	.word	0x3fcc71c5
 800f360:	9997fa04 	.word	0x9997fa04
 800f364:	3fd99999 	.word	0x3fd99999
 800f368:	c3500000 	.word	0xc3500000
 800f36c:	43500000 	.word	0x43500000
 800f370:	7fefffff 	.word	0x7fefffff
 800f374:	3ff00000 	.word	0x3ff00000
 800f378:	3fe00000 	.word	0x3fe00000

0800f37c <matherr>:
 800f37c:	2000      	movs	r0, #0
 800f37e:	4770      	bx	lr

0800f380 <nan>:
 800f380:	2000      	movs	r0, #0
 800f382:	4901      	ldr	r1, [pc, #4]	; (800f388 <nan+0x8>)
 800f384:	4770      	bx	lr
 800f386:	bf00      	nop
 800f388:	7ff80000 	.word	0x7ff80000

0800f38c <_init>:
 800f38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38e:	bf00      	nop
 800f390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f392:	bc08      	pop	{r3}
 800f394:	469e      	mov	lr, r3
 800f396:	4770      	bx	lr

0800f398 <_fini>:
 800f398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f39a:	bf00      	nop
 800f39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39e:	bc08      	pop	{r3}
 800f3a0:	469e      	mov	lr, r3
 800f3a2:	4770      	bx	lr
