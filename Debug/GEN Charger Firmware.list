
GEN Charger Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f624  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800f7b0  0800f7b0  0001f7b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801025c  0801025c  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801025c  0801025c  0002025c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010264  08010264  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010264  08010264  00020264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010268  08010268  00020268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801026c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fc0  20000238  080104a4  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  080104a4  000311f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eaeb  00000000  00000000  00030261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000038fd  00000000  00000000  0004ed4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00052650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  00053a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021acf  00000000  00000000  00054c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000139a8  00000000  00000000  000766d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2228  00000000  00000000  0008a07f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c2a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cfc  00000000  00000000  0014c324  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800f794 	.word	0x0800f794

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	0800f794 	.word	0x0800f794

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <Constant_Current>:
float 	SetPoint_CC;
float	CC_Value = 0.3*Battery_Capacity;

//test git2
void Constant_Current()
{
 8001490:	b598      	push	{r3, r4, r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(Batt_SOC.m_uint16t <= 15)
 8001494:	4b8c      	ldr	r3, [pc, #560]	; (80016c8 <Constant_Current+0x238>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80b      	bhi.n	80014b4 <Constant_Current+0x24>
		SetPoint_CC = 0.5*CC_Value;
 800149c:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <Constant_Current+0x23c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc89 	bl	8000dbc <__aeabi_fmul>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b88      	ldr	r3, [pc, #544]	; (80016d0 <Constant_Current+0x240>)
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e06b      	b.n	800158c <Constant_Current+0xfc>
	else {
		if(flag_Derating==1)
 80014b4:	4b87      	ldr	r3, [pc, #540]	; (80016d4 <Constant_Current+0x244>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d10b      	bne.n	80014d4 <Constant_Current+0x44>
			SetPoint_CC = 0.5*CC_Value;
 80014bc:	4b83      	ldr	r3, [pc, #524]	; (80016cc <Constant_Current+0x23c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc79 	bl	8000dbc <__aeabi_fmul>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b80      	ldr	r3, [pc, #512]	; (80016d0 <Constant_Current+0x240>)
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e05b      	b.n	800158c <Constant_Current+0xfc>
		else {
			if(Batt_temp.m_uint16t <= 10)
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <Constant_Current+0x248>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	2b0a      	cmp	r3, #10
 80014da:	d80a      	bhi.n	80014f2 <Constant_Current+0x62>
				SetPoint_CC = 0.5*CC_Value;
 80014dc:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <Constant_Current+0x23c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fc69 	bl	8000dbc <__aeabi_fmul>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <Constant_Current+0x240>)
 80014f0:	601a      	str	r2, [r3, #0]

			if(Batt_temp.m_uint16t >10 && Batt_temp.m_uint16t <= 20) // Temperature 10 ~ 20
 80014f2:	4b79      	ldr	r3, [pc, #484]	; (80016d8 <Constant_Current+0x248>)
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	2b0a      	cmp	r3, #10
 80014f8:	d90e      	bls.n	8001518 <Constant_Current+0x88>
 80014fa:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <Constant_Current+0x248>)
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	2b14      	cmp	r3, #20
 8001500:	d80a      	bhi.n	8001518 <Constant_Current+0x88>
				SetPoint_CC = 0.5*CC_Value;
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <Constant_Current+0x23c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fc56 	bl	8000dbc <__aeabi_fmul>
 8001510:	4603      	mov	r3, r0
 8001512:	461a      	mov	r2, r3
 8001514:	4b6e      	ldr	r3, [pc, #440]	; (80016d0 <Constant_Current+0x240>)
 8001516:	601a      	str	r2, [r3, #0]

			if(Batt_temp.m_uint16t > 20 && Batt_temp.m_uint16t <= 30) // Temperature 20 ~ 30
 8001518:	4b6f      	ldr	r3, [pc, #444]	; (80016d8 <Constant_Current+0x248>)
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	2b14      	cmp	r3, #20
 800151e:	d916      	bls.n	800154e <Constant_Current+0xbe>
 8001520:	4b6d      	ldr	r3, [pc, #436]	; (80016d8 <Constant_Current+0x248>)
 8001522:	881b      	ldrh	r3, [r3, #0]
 8001524:	2b1e      	cmp	r3, #30
 8001526:	d812      	bhi.n	800154e <Constant_Current+0xbe>
				SetPoint_CC = 0.7*CC_Value;
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <Constant_Current+0x23c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffb7 	bl	80004a0 <__aeabi_f2d>
 8001532:	a363      	add	r3, pc, #396	; (adr r3, 80016c0 <Constant_Current+0x230>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7ff f80a 	bl	8000550 <__aeabi_dmul>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fadc 	bl	8000b00 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <Constant_Current+0x240>)
 800154c:	601a      	str	r2, [r3, #0]

			if(Batt_temp.m_uint16t > 30 && Batt_temp.m_uint16t <= 40)
 800154e:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <Constant_Current+0x248>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	2b1e      	cmp	r3, #30
 8001554:	d907      	bls.n	8001566 <Constant_Current+0xd6>
 8001556:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <Constant_Current+0x248>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2b28      	cmp	r3, #40	; 0x28
 800155c:	d803      	bhi.n	8001566 <Constant_Current+0xd6>
				SetPoint_CC = CC_Value;
 800155e:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <Constant_Current+0x23c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a5b      	ldr	r2, [pc, #364]	; (80016d0 <Constant_Current+0x240>)
 8001564:	6013      	str	r3, [r2, #0]

			if(Batt_temp.m_uint16t > 40 && Batt_temp.m_uint16t <= 50)
 8001566:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <Constant_Current+0x248>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2b28      	cmp	r3, #40	; 0x28
 800156c:	d90e      	bls.n	800158c <Constant_Current+0xfc>
 800156e:	4b5a      	ldr	r3, [pc, #360]	; (80016d8 <Constant_Current+0x248>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	2b32      	cmp	r3, #50	; 0x32
 8001574:	d80a      	bhi.n	800158c <Constant_Current+0xfc>
				SetPoint_CC = 0.5*CC_Value;
 8001576:	4b55      	ldr	r3, [pc, #340]	; (80016cc <Constant_Current+0x23c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc1c 	bl	8000dbc <__aeabi_fmul>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b51      	ldr	r3, [pc, #324]	; (80016d0 <Constant_Current+0x240>)
 800158a:	601a      	str	r2, [r3, #0]
		}
	}

	sp = SetPoint_CC;
 800158c:	4b50      	ldr	r3, [pc, #320]	; (80016d0 <Constant_Current+0x240>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <Constant_Current+0x24c>)
 8001592:	6013      	str	r3, [r2, #0]
	pv = Current_Charger;
 8001594:	4b52      	ldr	r3, [pc, #328]	; (80016e0 <Constant_Current+0x250>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <Constant_Current+0x254>)
 800159a:	6013      	str	r3, [r2, #0]
	e = sp-pv;
 800159c:	4b4f      	ldr	r3, [pc, #316]	; (80016dc <Constant_Current+0x24c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <Constant_Current+0x254>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f7ff fafe 	bl	8000ba8 <__aeabi_fsub>
 80015ac:	4603      	mov	r3, r0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b4d      	ldr	r3, [pc, #308]	; (80016e8 <Constant_Current+0x258>)
 80015b2:	601a      	str	r2, [r3, #0]
	d = e-esblm;
 80015b4:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <Constant_Current+0x258>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <Constant_Current+0x25c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff faf2 	bl	8000ba8 <__aeabi_fsub>
 80015c4:	4603      	mov	r3, r0
 80015c6:	461a      	mov	r2, r3
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <Constant_Current+0x260>)
 80015ca:	601a      	str	r2, [r3, #0]
	esblm = e;
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <Constant_Current+0x258>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a46      	ldr	r2, [pc, #280]	; (80016ec <Constant_Current+0x25c>)
 80015d2:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-6)
 80015d4:	4b44      	ldr	r3, [pc, #272]	; (80016e8 <Constant_Current+0x258>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4946      	ldr	r1, [pc, #280]	; (80016f4 <Constant_Current+0x264>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd96 	bl	800110c <__aeabi_fcmple>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01b      	beq.n	800161e <Constant_Current+0x18e>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 80015e6:	4b44      	ldr	r3, [pc, #272]	; (80016f8 <Constant_Current+0x268>)
 80015e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	4b43      	ldr	r3, [pc, #268]	; (80016fc <Constant_Current+0x26c>)
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	4b41      	ldr	r3, [pc, #260]	; (80016fc <Constant_Current+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a41      	ldr	r2, [pc, #260]	; (8001700 <Constant_Current+0x270>)
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b40      	ldr	r3, [pc, #256]	; (8001700 <Constant_Current+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a40      	ldr	r2, [pc, #256]	; (8001704 <Constant_Current+0x274>)
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <Constant_Current+0x274>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a3f      	ldr	r2, [pc, #252]	; (8001708 <Constant_Current+0x278>)
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b3e      	ldr	r3, [pc, #248]	; (8001708 <Constant_Current+0x278>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a3e      	ldr	r2, [pc, #248]	; (800170c <Constant_Current+0x27c>)
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <Constant_Current+0x27c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a3d      	ldr	r2, [pc, #244]	; (8001710 <Constant_Current+0x280>)
 800161c:	6013      	str	r3, [r2, #0]

	if(e>=-6&&e<=-4)
 800161e:	4b32      	ldr	r3, [pc, #200]	; (80016e8 <Constant_Current+0x258>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4934      	ldr	r1, [pc, #208]	; (80016f4 <Constant_Current+0x264>)
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fd7b 	bl	8001120 <__aeabi_fcmpge>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d075      	beq.n	800171c <Constant_Current+0x28c>
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <Constant_Current+0x258>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4937      	ldr	r1, [pc, #220]	; (8001714 <Constant_Current+0x284>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fd68 	bl	800110c <__aeabi_fcmple>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d06c      	beq.n	800171c <Constant_Current+0x28c>
	{ eNB=(-(e+6)/2)+1;
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <Constant_Current+0x258>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4934      	ldr	r1, [pc, #208]	; (8001718 <Constant_Current+0x288>)
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff faaf 	bl	8000bac <__addsf3>
 800164e:	4603      	mov	r3, r0
 8001650:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001654:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fc63 	bl	8000f24 <__aeabi_fdiv>
 800165e:	4603      	mov	r3, r0
 8001660:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff faa1 	bl	8000bac <__addsf3>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <Constant_Current+0x268>)
 8001670:	601a      	str	r2, [r3, #0]
	   eNM=(e+6)/2;
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <Constant_Current+0x258>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4928      	ldr	r1, [pc, #160]	; (8001718 <Constant_Current+0x288>)
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa97 	bl	8000bac <__addsf3>
 800167e:	4603      	mov	r3, r0
 8001680:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fc4d 	bl	8000f24 <__aeabi_fdiv>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <Constant_Current+0x280>)
 8001690:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <Constant_Current+0x26c>)
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <Constant_Current+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a18      	ldr	r2, [pc, #96]	; (8001700 <Constant_Current+0x270>)
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <Constant_Current+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <Constant_Current+0x274>)
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <Constant_Current+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <Constant_Current+0x278>)
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <Constant_Current+0x278>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a15      	ldr	r2, [pc, #84]	; (800170c <Constant_Current+0x27c>)
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	e1f6      	b.n	8001aaa <Constant_Current+0x61a>
 80016bc:	f3af 8000 	nop.w
 80016c0:	66666666 	.word	0x66666666
 80016c4:	3fe66666 	.word	0x3fe66666
 80016c8:	20000a44 	.word	0x20000a44
 80016cc:	20000020 	.word	0x20000020
 80016d0:	200009ec 	.word	0x200009ec
 80016d4:	20000c80 	.word	0x20000c80
 80016d8:	20000a8c 	.word	0x20000a8c
 80016dc:	20000b9c 	.word	0x20000b9c
 80016e0:	20000d58 	.word	0x20000d58
 80016e4:	20000c84 	.word	0x20000c84
 80016e8:	20000d60 	.word	0x20000d60
 80016ec:	20000d64 	.word	0x20000d64
 80016f0:	20000aa0 	.word	0x20000aa0
 80016f4:	c0c00000 	.word	0xc0c00000
 80016f8:	20000d68 	.word	0x20000d68
 80016fc:	200009f0 	.word	0x200009f0
 8001700:	20000aa8 	.word	0x20000aa8
 8001704:	20000a2c 	.word	0x20000a2c
 8001708:	20000db4 	.word	0x20000db4
 800170c:	200006b0 	.word	0x200006b0
 8001710:	20000da0 	.word	0x20000da0
 8001714:	c0800000 	.word	0xc0800000
 8001718:	40c00000 	.word	0x40c00000
	}

	else if(e>=-4&&e<=-2)
 800171c:	4b9e      	ldr	r3, [pc, #632]	; (8001998 <Constant_Current+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	499e      	ldr	r1, [pc, #632]	; (800199c <Constant_Current+0x50c>)
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fcfc 	bl	8001120 <__aeabi_fcmpge>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d048      	beq.n	80017c0 <Constant_Current+0x330>
 800172e:	4b9a      	ldr	r3, [pc, #616]	; (8001998 <Constant_Current+0x508>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fce8 	bl	800110c <__aeabi_fcmple>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d03e      	beq.n	80017c0 <Constant_Current+0x330>
	{ eNM=(-(e+4)/2)+1;
 8001742:	4b95      	ldr	r3, [pc, #596]	; (8001998 <Constant_Current+0x508>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fa2e 	bl	8000bac <__addsf3>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001756:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fbe2 	bl	8000f24 <__aeabi_fdiv>
 8001760:	4603      	mov	r3, r0
 8001762:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fa20 	bl	8000bac <__addsf3>
 800176c:	4603      	mov	r3, r0
 800176e:	461a      	mov	r2, r3
 8001770:	4b8b      	ldr	r3, [pc, #556]	; (80019a0 <Constant_Current+0x510>)
 8001772:	601a      	str	r2, [r3, #0]
	   eNS=(e+4)/2;
 8001774:	4b88      	ldr	r3, [pc, #544]	; (8001998 <Constant_Current+0x508>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fa15 	bl	8000bac <__addsf3>
 8001782:	4603      	mov	r3, r0
 8001784:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fbcb 	bl	8000f24 <__aeabi_fdiv>
 800178e:	4603      	mov	r3, r0
 8001790:	461a      	mov	r2, r3
 8001792:	4b84      	ldr	r3, [pc, #528]	; (80019a4 <Constant_Current+0x514>)
 8001794:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 8001796:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <Constant_Current+0x518>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4b82      	ldr	r3, [pc, #520]	; (80019a8 <Constant_Current+0x518>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a82      	ldr	r2, [pc, #520]	; (80019ac <Constant_Current+0x51c>)
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b81      	ldr	r3, [pc, #516]	; (80019ac <Constant_Current+0x51c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a81      	ldr	r2, [pc, #516]	; (80019b0 <Constant_Current+0x520>)
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b80      	ldr	r3, [pc, #512]	; (80019b0 <Constant_Current+0x520>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a80      	ldr	r2, [pc, #512]	; (80019b4 <Constant_Current+0x524>)
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <Constant_Current+0x524>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a7f      	ldr	r2, [pc, #508]	; (80019b8 <Constant_Current+0x528>)
 80017bc:	6013      	str	r3, [r2, #0]
 80017be:	e174      	b.n	8001aaa <Constant_Current+0x61a>
	}

	else if(e>=-2&&e<=0)
 80017c0:	4b75      	ldr	r3, [pc, #468]	; (8001998 <Constant_Current+0x508>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fca9 	bl	8001120 <__aeabi_fcmpge>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d048      	beq.n	8001866 <Constant_Current+0x3d6>
 80017d4:	4b70      	ldr	r3, [pc, #448]	; (8001998 <Constant_Current+0x508>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fc95 	bl	800110c <__aeabi_fcmple>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d03e      	beq.n	8001866 <Constant_Current+0x3d6>
	{ eNS=(-(e+2)/2)+1;
 80017e8:	4b6b      	ldr	r3, [pc, #428]	; (8001998 <Constant_Current+0x508>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f9db 	bl	8000bac <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fb8f 	bl	8000f24 <__aeabi_fdiv>
 8001806:	4603      	mov	r3, r0
 8001808:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff f9cd 	bl	8000bac <__addsf3>
 8001812:	4603      	mov	r3, r0
 8001814:	461a      	mov	r2, r3
 8001816:	4b63      	ldr	r3, [pc, #396]	; (80019a4 <Constant_Current+0x514>)
 8001818:	601a      	str	r2, [r3, #0]
	   eZ=(e/2)+1;
 800181a:	4b5f      	ldr	r3, [pc, #380]	; (8001998 <Constant_Current+0x508>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb7e 	bl	8000f24 <__aeabi_fdiv>
 8001828:	4603      	mov	r3, r0
 800182a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff f9bc 	bl	8000bac <__addsf3>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	4b5e      	ldr	r3, [pc, #376]	; (80019b4 <Constant_Current+0x524>)
 800183a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 800183c:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <Constant_Current+0x518>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <Constant_Current+0x518>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a58      	ldr	r2, [pc, #352]	; (80019ac <Constant_Current+0x51c>)
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	4b57      	ldr	r3, [pc, #348]	; (80019ac <Constant_Current+0x51c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a57      	ldr	r2, [pc, #348]	; (80019b0 <Constant_Current+0x520>)
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b56      	ldr	r3, [pc, #344]	; (80019b0 <Constant_Current+0x520>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a51      	ldr	r2, [pc, #324]	; (80019a0 <Constant_Current+0x510>)
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <Constant_Current+0x510>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a55      	ldr	r2, [pc, #340]	; (80019b8 <Constant_Current+0x528>)
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e121      	b.n	8001aaa <Constant_Current+0x61a>
	}

	else if(e>=0&&e<=2)
 8001866:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <Constant_Current+0x508>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f04f 0100 	mov.w	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fc56 	bl	8001120 <__aeabi_fcmpge>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d03a      	beq.n	80018f0 <Constant_Current+0x460>
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <Constant_Current+0x508>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fc42 	bl	800110c <__aeabi_fcmple>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d030      	beq.n	80018f0 <Constant_Current+0x460>
	{ eZ=-(e/2)+1;
 800188e:	4b42      	ldr	r3, [pc, #264]	; (8001998 <Constant_Current+0x508>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb44 	bl	8000f24 <__aeabi_fdiv>
 800189c:	4603      	mov	r3, r0
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80018a4:	f7ff f980 	bl	8000ba8 <__aeabi_fsub>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <Constant_Current+0x524>)
 80018ae:	601a      	str	r2, [r3, #0]
	   ePS=e/2;
 80018b0:	4b39      	ldr	r3, [pc, #228]	; (8001998 <Constant_Current+0x508>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb33 	bl	8000f24 <__aeabi_fdiv>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <Constant_Current+0x520>)
 80018c4:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 80018c6:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <Constant_Current+0x518>)
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	4b36      	ldr	r3, [pc, #216]	; (80019a8 <Constant_Current+0x518>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a36      	ldr	r2, [pc, #216]	; (80019ac <Constant_Current+0x51c>)
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b35      	ldr	r3, [pc, #212]	; (80019ac <Constant_Current+0x51c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a32      	ldr	r2, [pc, #200]	; (80019a4 <Constant_Current+0x514>)
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <Constant_Current+0x514>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2f      	ldr	r2, [pc, #188]	; (80019a0 <Constant_Current+0x510>)
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <Constant_Current+0x510>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <Constant_Current+0x528>)
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e0dc      	b.n	8001aaa <Constant_Current+0x61a>
	}

	else if(e>=2&&e<=4)
 80018f0:	4b29      	ldr	r3, [pc, #164]	; (8001998 <Constant_Current+0x508>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fc11 	bl	8001120 <__aeabi_fcmpge>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d05b      	beq.n	80019bc <Constant_Current+0x52c>
 8001904:	4b24      	ldr	r3, [pc, #144]	; (8001998 <Constant_Current+0x508>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fbfd 	bl	800110c <__aeabi_fcmple>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d051      	beq.n	80019bc <Constant_Current+0x52c>
	{ ePS=(-(e-2)/2)+1;
 8001918:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <Constant_Current+0x508>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f941 	bl	8000ba8 <__aeabi_fsub>
 8001926:	4603      	mov	r3, r0
 8001928:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800192c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff faf7 	bl	8000f24 <__aeabi_fdiv>
 8001936:	4603      	mov	r3, r0
 8001938:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff f935 	bl	8000bac <__addsf3>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <Constant_Current+0x520>)
 8001948:	601a      	str	r2, [r3, #0]
	   ePM=(e-2)/2;
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <Constant_Current+0x508>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f928 	bl	8000ba8 <__aeabi_fsub>
 8001958:	4603      	mov	r3, r0
 800195a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fae0 	bl	8000f24 <__aeabi_fdiv>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b10      	ldr	r3, [pc, #64]	; (80019ac <Constant_Current+0x51c>)
 800196a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <Constant_Current+0x518>)
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <Constant_Current+0x518>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0e      	ldr	r2, [pc, #56]	; (80019b4 <Constant_Current+0x524>)
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <Constant_Current+0x524>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <Constant_Current+0x514>)
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <Constant_Current+0x514>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a05      	ldr	r2, [pc, #20]	; (80019a0 <Constant_Current+0x510>)
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <Constant_Current+0x510>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <Constant_Current+0x528>)
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	e089      	b.n	8001aaa <Constant_Current+0x61a>
 8001996:	bf00      	nop
 8001998:	20000d60 	.word	0x20000d60
 800199c:	c0800000 	.word	0xc0800000
 80019a0:	20000da0 	.word	0x20000da0
 80019a4:	200006b0 	.word	0x200006b0
 80019a8:	200009f0 	.word	0x200009f0
 80019ac:	20000aa8 	.word	0x20000aa8
 80019b0:	20000a2c 	.word	0x20000a2c
 80019b4:	20000db4 	.word	0x20000db4
 80019b8:	20000d68 	.word	0x20000d68
	}

	else if(e>=4&&e<=6)
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <Constant_Current+0x704>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fbab 	bl	8001120 <__aeabi_fcmpge>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d047      	beq.n	8001a60 <Constant_Current+0x5d0>
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <Constant_Current+0x704>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4970      	ldr	r1, [pc, #448]	; (8001b98 <Constant_Current+0x708>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb98 	bl	800110c <__aeabi_fcmple>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03e      	beq.n	8001a60 <Constant_Current+0x5d0>
	{ ePM=(-(e-4)/2)+1;
 80019e2:	4b6c      	ldr	r3, [pc, #432]	; (8001b94 <Constant_Current+0x704>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f8dc 	bl	8000ba8 <__aeabi_fsub>
 80019f0:	4603      	mov	r3, r0
 80019f2:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fa92 	bl	8000f24 <__aeabi_fdiv>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff f8d0 	bl	8000bac <__addsf3>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <Constant_Current+0x70c>)
 8001a12:	601a      	str	r2, [r3, #0]
	   ePB=(e-4)/2;
 8001a14:	4b5f      	ldr	r3, [pc, #380]	; (8001b94 <Constant_Current+0x704>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff f8c3 	bl	8000ba8 <__aeabi_fsub>
 8001a22:	4603      	mov	r3, r0
 8001a24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f7ff fa7b 	bl	8000f24 <__aeabi_fdiv>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <Constant_Current+0x710>)
 8001a34:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 8001a36:	4b5b      	ldr	r3, [pc, #364]	; (8001ba4 <Constant_Current+0x714>)
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <Constant_Current+0x714>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <Constant_Current+0x718>)
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b58      	ldr	r3, [pc, #352]	; (8001ba8 <Constant_Current+0x718>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a58      	ldr	r2, [pc, #352]	; (8001bac <Constant_Current+0x71c>)
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b57      	ldr	r3, [pc, #348]	; (8001bac <Constant_Current+0x71c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a57      	ldr	r2, [pc, #348]	; (8001bb0 <Constant_Current+0x720>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b56      	ldr	r3, [pc, #344]	; (8001bb0 <Constant_Current+0x720>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a56      	ldr	r2, [pc, #344]	; (8001bb4 <Constant_Current+0x724>)
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e024      	b.n	8001aaa <Constant_Current+0x61a>
	}

	else if(e>=6)
 8001a60:	4b4c      	ldr	r3, [pc, #304]	; (8001b94 <Constant_Current+0x704>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	494c      	ldr	r1, [pc, #304]	; (8001b98 <Constant_Current+0x708>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fb5a 	bl	8001120 <__aeabi_fcmpge>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d01b      	beq.n	8001aaa <Constant_Current+0x61a>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8001a72:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <Constant_Current+0x710>)
 8001a74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	4b48      	ldr	r3, [pc, #288]	; (8001b9c <Constant_Current+0x70c>)
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	4b46      	ldr	r3, [pc, #280]	; (8001b9c <Constant_Current+0x70c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <Constant_Current+0x714>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	4b46      	ldr	r3, [pc, #280]	; (8001ba4 <Constant_Current+0x714>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a46      	ldr	r2, [pc, #280]	; (8001ba8 <Constant_Current+0x718>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	4b45      	ldr	r3, [pc, #276]	; (8001ba8 <Constant_Current+0x718>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a45      	ldr	r2, [pc, #276]	; (8001bac <Constant_Current+0x71c>)
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b44      	ldr	r3, [pc, #272]	; (8001bac <Constant_Current+0x71c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a44      	ldr	r2, [pc, #272]	; (8001bb0 <Constant_Current+0x720>)
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <Constant_Current+0x720>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a43      	ldr	r2, [pc, #268]	; (8001bb4 <Constant_Current+0x724>)
 8001aa8:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-6)
 8001aaa:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <Constant_Current+0x728>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4943      	ldr	r1, [pc, #268]	; (8001bbc <Constant_Current+0x72c>)
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fb2b 	bl	800110c <__aeabi_fcmple>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d01b      	beq.n	8001af4 <Constant_Current+0x664>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8001abc:	4b40      	ldr	r3, [pc, #256]	; (8001bc0 <Constant_Current+0x730>)
 8001abe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	; (8001bc4 <Constant_Current+0x734>)
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <Constant_Current+0x734>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <Constant_Current+0x738>)
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	4b3c      	ldr	r3, [pc, #240]	; (8001bc8 <Constant_Current+0x738>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <Constant_Current+0x73c>)
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <Constant_Current+0x73c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a3b      	ldr	r2, [pc, #236]	; (8001bd0 <Constant_Current+0x740>)
 8001ae2:	6013      	str	r3, [r2, #0]
 8001ae4:	4b3a      	ldr	r3, [pc, #232]	; (8001bd0 <Constant_Current+0x740>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a3a      	ldr	r2, [pc, #232]	; (8001bd4 <Constant_Current+0x744>)
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b39      	ldr	r3, [pc, #228]	; (8001bd4 <Constant_Current+0x744>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <Constant_Current+0x748>)
 8001af2:	6013      	str	r3, [r2, #0]

	if(d>=-6&&d<=-4)
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <Constant_Current+0x728>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4930      	ldr	r1, [pc, #192]	; (8001bbc <Constant_Current+0x72c>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fb10 	bl	8001120 <__aeabi_fcmpge>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d06c      	beq.n	8001be0 <Constant_Current+0x750>
 8001b06:	4b2c      	ldr	r3, [pc, #176]	; (8001bb8 <Constant_Current+0x728>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4934      	ldr	r1, [pc, #208]	; (8001bdc <Constant_Current+0x74c>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fafd 	bl	800110c <__aeabi_fcmple>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d063      	beq.n	8001be0 <Constant_Current+0x750>
	{ dNB=(-(d+6)/2)+1;
 8001b18:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <Constant_Current+0x728>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	491e      	ldr	r1, [pc, #120]	; (8001b98 <Constant_Current+0x708>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f844 	bl	8000bac <__addsf3>
 8001b24:	4603      	mov	r3, r0
 8001b26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff f9f8 	bl	8000f24 <__aeabi_fdiv>
 8001b34:	4603      	mov	r3, r0
 8001b36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f836 	bl	8000bac <__addsf3>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <Constant_Current+0x730>)
 8001b46:	601a      	str	r2, [r3, #0]
	   dNM=(d+6)/2;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <Constant_Current+0x728>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4912      	ldr	r1, [pc, #72]	; (8001b98 <Constant_Current+0x708>)
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f82c 	bl	8000bac <__addsf3>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f9e2 	bl	8000f24 <__aeabi_fdiv>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <Constant_Current+0x748>)
 8001b66:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <Constant_Current+0x734>)
 8001b6a:	f04f 0200 	mov.w	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <Constant_Current+0x734>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <Constant_Current+0x738>)
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <Constant_Current+0x738>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <Constant_Current+0x73c>)
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <Constant_Current+0x73c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <Constant_Current+0x740>)
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <Constant_Current+0x740>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <Constant_Current+0x744>)
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	e1ff      	b.n	8001f92 <Constant_Current+0xb02>
 8001b92:	bf00      	nop
 8001b94:	20000d60 	.word	0x20000d60
 8001b98:	40c00000 	.word	0x40c00000
 8001b9c:	20000aa8 	.word	0x20000aa8
 8001ba0:	200009f0 	.word	0x200009f0
 8001ba4:	20000a2c 	.word	0x20000a2c
 8001ba8:	20000db4 	.word	0x20000db4
 8001bac:	200006b0 	.word	0x200006b0
 8001bb0:	20000da0 	.word	0x20000da0
 8001bb4:	20000d68 	.word	0x20000d68
 8001bb8:	20000aa0 	.word	0x20000aa0
 8001bbc:	c0c00000 	.word	0xc0c00000
 8001bc0:	200006d4 	.word	0x200006d4
 8001bc4:	20000ab0 	.word	0x20000ab0
 8001bc8:	200006e8 	.word	0x200006e8
 8001bcc:	20000d7c 	.word	0x20000d7c
 8001bd0:	20000d94 	.word	0x20000d94
 8001bd4:	20000828 	.word	0x20000828
 8001bd8:	20000a28 	.word	0x20000a28
 8001bdc:	c0800000 	.word	0xc0800000
	}

	else if(d>=-4&&d<=-2)
 8001be0:	4b9e      	ldr	r3, [pc, #632]	; (8001e5c <Constant_Current+0x9cc>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	499e      	ldr	r1, [pc, #632]	; (8001e60 <Constant_Current+0x9d0>)
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fa9a 	bl	8001120 <__aeabi_fcmpge>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d048      	beq.n	8001c84 <Constant_Current+0x7f4>
 8001bf2:	4b9a      	ldr	r3, [pc, #616]	; (8001e5c <Constant_Current+0x9cc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fa86 	bl	800110c <__aeabi_fcmple>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03e      	beq.n	8001c84 <Constant_Current+0x7f4>
	{ dNM=(-(d+4)/2)+1;
 8001c06:	4b95      	ldr	r3, [pc, #596]	; (8001e5c <Constant_Current+0x9cc>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe ffcc 	bl	8000bac <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff f980 	bl	8000f24 <__aeabi_fdiv>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe ffbe 	bl	8000bac <__addsf3>
 8001c30:	4603      	mov	r3, r0
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b8b      	ldr	r3, [pc, #556]	; (8001e64 <Constant_Current+0x9d4>)
 8001c36:	601a      	str	r2, [r3, #0]
	   dNS=(d+4)/2;
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <Constant_Current+0x9cc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe ffb3 	bl	8000bac <__addsf3>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f969 	bl	8000f24 <__aeabi_fdiv>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b84      	ldr	r3, [pc, #528]	; (8001e68 <Constant_Current+0x9d8>)
 8001c58:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8001c5a:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <Constant_Current+0x9dc>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <Constant_Current+0x9dc>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <Constant_Current+0x9e0>)
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <Constant_Current+0x9e0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a81      	ldr	r2, [pc, #516]	; (8001e74 <Constant_Current+0x9e4>)
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <Constant_Current+0x9e4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a80      	ldr	r2, [pc, #512]	; (8001e78 <Constant_Current+0x9e8>)
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b7f      	ldr	r3, [pc, #508]	; (8001e78 <Constant_Current+0x9e8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <Constant_Current+0x9ec>)
 8001c80:	6013      	str	r3, [r2, #0]
 8001c82:	e186      	b.n	8001f92 <Constant_Current+0xb02>
	}

	else if(d>=-2&&d<=0)
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <Constant_Current+0x9cc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fa47 	bl	8001120 <__aeabi_fcmpge>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d048      	beq.n	8001d2a <Constant_Current+0x89a>
 8001c98:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <Constant_Current+0x9cc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f04f 0100 	mov.w	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fa33 	bl	800110c <__aeabi_fcmple>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d03e      	beq.n	8001d2a <Constant_Current+0x89a>
	{ dNS=(-(d+2)/2)+1;
 8001cac:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <Constant_Current+0x9cc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe ff79 	bl	8000bac <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001cc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff f92d 	bl	8000f24 <__aeabi_fdiv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe ff6b 	bl	8000bac <__addsf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <Constant_Current+0x9d8>)
 8001cdc:	601a      	str	r2, [r3, #0]
	   dZ=(d+2)/2;
 8001cde:	4b5f      	ldr	r3, [pc, #380]	; (8001e5c <Constant_Current+0x9cc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe ff60 	bl	8000bac <__addsf3>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f916 	bl	8000f24 <__aeabi_fdiv>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b5e      	ldr	r3, [pc, #376]	; (8001e78 <Constant_Current+0x9e8>)
 8001cfe:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8001d00:	4b5a      	ldr	r3, [pc, #360]	; (8001e6c <Constant_Current+0x9dc>)
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b58      	ldr	r3, [pc, #352]	; (8001e6c <Constant_Current+0x9dc>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a58      	ldr	r2, [pc, #352]	; (8001e70 <Constant_Current+0x9e0>)
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b57      	ldr	r3, [pc, #348]	; (8001e70 <Constant_Current+0x9e0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <Constant_Current+0x9e4>)
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <Constant_Current+0x9e4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a51      	ldr	r2, [pc, #324]	; (8001e64 <Constant_Current+0x9d4>)
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <Constant_Current+0x9d4>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <Constant_Current+0x9ec>)
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	e133      	b.n	8001f92 <Constant_Current+0xb02>
	}

	else if(d>=0&&d<=2)
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <Constant_Current+0x9cc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f04f 0100 	mov.w	r1, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f9f4 	bl	8001120 <__aeabi_fcmpge>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d03a      	beq.n	8001db4 <Constant_Current+0x924>
 8001d3e:	4b47      	ldr	r3, [pc, #284]	; (8001e5c <Constant_Current+0x9cc>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f9e0 	bl	800110c <__aeabi_fcmple>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d030      	beq.n	8001db4 <Constant_Current+0x924>
	{ dZ=-(d/2)+1;
 8001d52:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <Constant_Current+0x9cc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f8e2 	bl	8000f24 <__aeabi_fdiv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4619      	mov	r1, r3
 8001d64:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001d68:	f7fe ff1e 	bl	8000ba8 <__aeabi_fsub>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b41      	ldr	r3, [pc, #260]	; (8001e78 <Constant_Current+0x9e8>)
 8001d72:	601a      	str	r2, [r3, #0]
	   dPS=d/2;
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <Constant_Current+0x9cc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f8d1 	bl	8000f24 <__aeabi_fdiv>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <Constant_Current+0x9e4>)
 8001d88:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <Constant_Current+0x9dc>)
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <Constant_Current+0x9dc>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <Constant_Current+0x9e0>)
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b35      	ldr	r3, [pc, #212]	; (8001e70 <Constant_Current+0x9e0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a32      	ldr	r2, [pc, #200]	; (8001e68 <Constant_Current+0x9d8>)
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <Constant_Current+0x9d8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a2f      	ldr	r2, [pc, #188]	; (8001e64 <Constant_Current+0x9d4>)
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <Constant_Current+0x9d4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a33      	ldr	r2, [pc, #204]	; (8001e7c <Constant_Current+0x9ec>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e0ee      	b.n	8001f92 <Constant_Current+0xb02>
	}

	else if(d>=2&&d<=4)
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <Constant_Current+0x9cc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f9af 	bl	8001120 <__aeabi_fcmpge>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d05b      	beq.n	8001e80 <Constant_Current+0x9f0>
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <Constant_Current+0x9cc>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff f99b 	bl	800110c <__aeabi_fcmple>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d051      	beq.n	8001e80 <Constant_Current+0x9f0>
	{ dPS=(-(d-2)/2)+1;
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <Constant_Current+0x9cc>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fedf 	bl	8000ba8 <__aeabi_fsub>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001df0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f895 	bl	8000f24 <__aeabi_fdiv>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7fe fed3 	bl	8000bac <__addsf3>
 8001e06:	4603      	mov	r3, r0
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <Constant_Current+0x9e4>)
 8001e0c:	601a      	str	r2, [r3, #0]
	   dPM=(d-2)/2;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <Constant_Current+0x9cc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe fec6 	bl	8000ba8 <__aeabi_fsub>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff f87e 	bl	8000f24 <__aeabi_fdiv>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <Constant_Current+0x9e0>)
 8001e2e:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <Constant_Current+0x9dc>)
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <Constant_Current+0x9dc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0e      	ldr	r2, [pc, #56]	; (8001e78 <Constant_Current+0x9e8>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <Constant_Current+0x9e8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <Constant_Current+0x9d8>)
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <Constant_Current+0x9d8>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <Constant_Current+0x9d4>)
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <Constant_Current+0x9d4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <Constant_Current+0x9ec>)
 8001e56:	6013      	str	r3, [r2, #0]
 8001e58:	e09b      	b.n	8001f92 <Constant_Current+0xb02>
 8001e5a:	bf00      	nop
 8001e5c:	20000aa0 	.word	0x20000aa0
 8001e60:	c0800000 	.word	0xc0800000
 8001e64:	20000a28 	.word	0x20000a28
 8001e68:	20000828 	.word	0x20000828
 8001e6c:	20000ab0 	.word	0x20000ab0
 8001e70:	200006e8 	.word	0x200006e8
 8001e74:	20000d7c 	.word	0x20000d7c
 8001e78:	20000d94 	.word	0x20000d94
 8001e7c:	200006d4 	.word	0x200006d4
	}

	else if(d>=4&&d<=6)
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <Constant_Current+0xa94>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff f949 	bl	8001120 <__aeabi_fcmpge>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d059      	beq.n	8001f48 <Constant_Current+0xab8>
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <Constant_Current+0xa94>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4923      	ldr	r1, [pc, #140]	; (8001f28 <Constant_Current+0xa98>)
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff f936 	bl	800110c <__aeabi_fcmple>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d050      	beq.n	8001f48 <Constant_Current+0xab8>
	{ dPM=(-(d-4)/2)+1;
 8001ea6:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <Constant_Current+0xa94>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe fe7a 	bl	8000ba8 <__aeabi_fsub>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001eba:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f830 	bl	8000f24 <__aeabi_fdiv>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fe6e 	bl	8000bac <__addsf3>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <Constant_Current+0xa9c>)
 8001ed6:	601a      	str	r2, [r3, #0]
	   dPB=(d-4)/2;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <Constant_Current+0xa94>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fe61 	bl	8000ba8 <__aeabi_fsub>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f819 	bl	8000f24 <__aeabi_fdiv>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <Constant_Current+0xaa0>)
 8001ef8:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <Constant_Current+0xaa4>)
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <Constant_Current+0xaa4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <Constant_Current+0xaa8>)
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <Constant_Current+0xaa8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <Constant_Current+0xaac>)
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <Constant_Current+0xaac>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <Constant_Current+0xab0>)
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <Constant_Current+0xab0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a09      	ldr	r2, [pc, #36]	; (8001f44 <Constant_Current+0xab4>)
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e036      	b.n	8001f92 <Constant_Current+0xb02>
 8001f24:	20000aa0 	.word	0x20000aa0
 8001f28:	40c00000 	.word	0x40c00000
 8001f2c:	200006e8 	.word	0x200006e8
 8001f30:	20000ab0 	.word	0x20000ab0
 8001f34:	20000d7c 	.word	0x20000d7c
 8001f38:	20000d94 	.word	0x20000d94
 8001f3c:	20000828 	.word	0x20000828
 8001f40:	20000a28 	.word	0x20000a28
 8001f44:	200006d4 	.word	0x200006d4
	}

	else if(d>=6)
 8001f48:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <Constant_Current+0xcf0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	498d      	ldr	r1, [pc, #564]	; (8002184 <Constant_Current+0xcf4>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f8e6 	bl	8001120 <__aeabi_fcmpge>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d01b      	beq.n	8001f92 <Constant_Current+0xb02>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	; (8002188 <Constant_Current+0xcf8>)
 8001f5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	4b8a      	ldr	r3, [pc, #552]	; (800218c <Constant_Current+0xcfc>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	4b88      	ldr	r3, [pc, #544]	; (800218c <Constant_Current+0xcfc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a88      	ldr	r2, [pc, #544]	; (8002190 <Constant_Current+0xd00>)
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b87      	ldr	r3, [pc, #540]	; (8002190 <Constant_Current+0xd00>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a87      	ldr	r2, [pc, #540]	; (8002194 <Constant_Current+0xd04>)
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b86      	ldr	r3, [pc, #536]	; (8002194 <Constant_Current+0xd04>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a86      	ldr	r2, [pc, #536]	; (8002198 <Constant_Current+0xd08>)
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b85      	ldr	r3, [pc, #532]	; (8002198 <Constant_Current+0xd08>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a85      	ldr	r2, [pc, #532]	; (800219c <Constant_Current+0xd0c>)
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b84      	ldr	r3, [pc, #528]	; (800219c <Constant_Current+0xd0c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a84      	ldr	r2, [pc, #528]	; (80021a0 <Constant_Current+0xd10>)
 8001f90:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8001f92:	4b7d      	ldr	r3, [pc, #500]	; (8002188 <Constant_Current+0xcf8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a83      	ldr	r2, [pc, #524]	; (80021a4 <Constant_Current+0xd14>)
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b83      	ldr	r3, [pc, #524]	; (80021a8 <Constant_Current+0xd18>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b7a      	ldr	r3, [pc, #488]	; (8002188 <Constant_Current+0xcf8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f7ff f8a7 	bl	80010f8 <__aeabi_fcmplt>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <Constant_Current+0xb28>
 8001fb0:	4b7d      	ldr	r3, [pc, #500]	; (80021a8 <Constant_Current+0xd18>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a7b      	ldr	r2, [pc, #492]	; (80021a4 <Constant_Current+0xd14>)
 8001fb6:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8001fb8:	4b73      	ldr	r3, [pc, #460]	; (8002188 <Constant_Current+0xcf8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a7b      	ldr	r2, [pc, #492]	; (80021ac <Constant_Current+0xd1c>)
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	4b7b      	ldr	r3, [pc, #492]	; (80021b0 <Constant_Current+0xd20>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b70      	ldr	r3, [pc, #448]	; (8002188 <Constant_Current+0xcf8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	f7ff f894 	bl	80010f8 <__aeabi_fcmplt>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <Constant_Current+0xb4e>
 8001fd6:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <Constant_Current+0xd20>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a74      	ldr	r2, [pc, #464]	; (80021ac <Constant_Current+0xd1c>)
 8001fdc:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8001fde:	4b6a      	ldr	r3, [pc, #424]	; (8002188 <Constant_Current+0xcf8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a74      	ldr	r2, [pc, #464]	; (80021b4 <Constant_Current+0xd24>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b74      	ldr	r3, [pc, #464]	; (80021b8 <Constant_Current+0xd28>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b67      	ldr	r3, [pc, #412]	; (8002188 <Constant_Current+0xcf8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	f7ff f881 	bl	80010f8 <__aeabi_fcmplt>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <Constant_Current+0xb74>
 8001ffc:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <Constant_Current+0xd28>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <Constant_Current+0xd24>)
 8002002:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8002004:	4b60      	ldr	r3, [pc, #384]	; (8002188 <Constant_Current+0xcf8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6c      	ldr	r2, [pc, #432]	; (80021bc <Constant_Current+0xd2c>)
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <Constant_Current+0xd30>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <Constant_Current+0xcf8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	4610      	mov	r0, r2
 8002018:	f7ff f86e 	bl	80010f8 <__aeabi_fcmplt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <Constant_Current+0xb9a>
 8002022:	4b67      	ldr	r3, [pc, #412]	; (80021c0 <Constant_Current+0xd30>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a65      	ldr	r2, [pc, #404]	; (80021bc <Constant_Current+0xd2c>)
 8002028:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <Constant_Current+0xcf8>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a65      	ldr	r2, [pc, #404]	; (80021c4 <Constant_Current+0xd34>)
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b65      	ldr	r3, [pc, #404]	; (80021c8 <Constant_Current+0xd38>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <Constant_Current+0xcf8>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f7ff f85b 	bl	80010f8 <__aeabi_fcmplt>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <Constant_Current+0xbc0>
 8002048:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <Constant_Current+0xd38>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a5d      	ldr	r2, [pc, #372]	; (80021c4 <Constant_Current+0xd34>)
 800204e:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8002050:	4b4d      	ldr	r3, [pc, #308]	; (8002188 <Constant_Current+0xcf8>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a5d      	ldr	r2, [pc, #372]	; (80021cc <Constant_Current+0xd3c>)
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <Constant_Current+0xd40>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	4b4a      	ldr	r3, [pc, #296]	; (8002188 <Constant_Current+0xcf8>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f7ff f848 	bl	80010f8 <__aeabi_fcmplt>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <Constant_Current+0xbe6>
 800206e:	4b58      	ldr	r3, [pc, #352]	; (80021d0 <Constant_Current+0xd40>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a56      	ldr	r2, [pc, #344]	; (80021cc <Constant_Current+0xd3c>)
 8002074:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <Constant_Current+0xcf8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a56      	ldr	r2, [pc, #344]	; (80021d4 <Constant_Current+0xd44>)
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <Constant_Current+0xd48>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <Constant_Current+0xcf8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f7ff f835 	bl	80010f8 <__aeabi_fcmplt>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <Constant_Current+0xc0c>
 8002094:	4b50      	ldr	r3, [pc, #320]	; (80021d8 <Constant_Current+0xd48>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a4e      	ldr	r2, [pc, #312]	; (80021d4 <Constant_Current+0xd44>)
 800209a:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 800209c:	4b3b      	ldr	r3, [pc, #236]	; (800218c <Constant_Current+0xcfc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a4e      	ldr	r2, [pc, #312]	; (80021dc <Constant_Current+0xd4c>)
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <Constant_Current+0xd18>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b38      	ldr	r3, [pc, #224]	; (800218c <Constant_Current+0xcfc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	4610      	mov	r0, r2
 80020b0:	f7ff f822 	bl	80010f8 <__aeabi_fcmplt>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <Constant_Current+0xc32>
 80020ba:	4b3b      	ldr	r3, [pc, #236]	; (80021a8 <Constant_Current+0xd18>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a47      	ldr	r2, [pc, #284]	; (80021dc <Constant_Current+0xd4c>)
 80020c0:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <Constant_Current+0xcfc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a46      	ldr	r2, [pc, #280]	; (80021e0 <Constant_Current+0xd50>)
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b39      	ldr	r3, [pc, #228]	; (80021b0 <Constant_Current+0xd20>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	4b2f      	ldr	r3, [pc, #188]	; (800218c <Constant_Current+0xcfc>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4619      	mov	r1, r3
 80020d4:	4610      	mov	r0, r2
 80020d6:	f7ff f80f 	bl	80010f8 <__aeabi_fcmplt>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <Constant_Current+0xc58>
 80020e0:	4b33      	ldr	r3, [pc, #204]	; (80021b0 <Constant_Current+0xd20>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3e      	ldr	r2, [pc, #248]	; (80021e0 <Constant_Current+0xd50>)
 80020e6:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 80020e8:	4b28      	ldr	r3, [pc, #160]	; (800218c <Constant_Current+0xcfc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a3d      	ldr	r2, [pc, #244]	; (80021e4 <Constant_Current+0xd54>)
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <Constant_Current+0xd28>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4b25      	ldr	r3, [pc, #148]	; (800218c <Constant_Current+0xcfc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4619      	mov	r1, r3
 80020fa:	4610      	mov	r0, r2
 80020fc:	f7fe fffc 	bl	80010f8 <__aeabi_fcmplt>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <Constant_Current+0xc7e>
 8002106:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <Constant_Current+0xd28>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a36      	ldr	r2, [pc, #216]	; (80021e4 <Constant_Current+0xd54>)
 800210c:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <Constant_Current+0xcfc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a35      	ldr	r2, [pc, #212]	; (80021e8 <Constant_Current+0xd58>)
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <Constant_Current+0xd30>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <Constant_Current+0xcfc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	4610      	mov	r0, r2
 8002122:	f7fe ffe9 	bl	80010f8 <__aeabi_fcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <Constant_Current+0xca4>
 800212c:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <Constant_Current+0xd30>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a2d      	ldr	r2, [pc, #180]	; (80021e8 <Constant_Current+0xd58>)
 8002132:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <Constant_Current+0xcfc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2c      	ldr	r2, [pc, #176]	; (80021ec <Constant_Current+0xd5c>)
 800213a:	6013      	str	r3, [r2, #0]
 800213c:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <Constant_Current+0xd38>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <Constant_Current+0xcfc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f7fe ffd6 	bl	80010f8 <__aeabi_fcmplt>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <Constant_Current+0xcca>
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <Constant_Current+0xd38>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a25      	ldr	r2, [pc, #148]	; (80021ec <Constant_Current+0xd5c>)
 8002158:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <Constant_Current+0xcfc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a24      	ldr	r2, [pc, #144]	; (80021f0 <Constant_Current+0xd60>)
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <Constant_Current+0xd40>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <Constant_Current+0xcfc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4619      	mov	r1, r3
 800216c:	4610      	mov	r0, r2
 800216e:	f7fe ffc3 	bl	80010f8 <__aeabi_fcmplt>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d03f      	beq.n	80021f8 <Constant_Current+0xd68>
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <Constant_Current+0xd40>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	e03a      	b.n	80021f4 <Constant_Current+0xd64>
 800217e:	bf00      	nop
 8002180:	20000aa0 	.word	0x20000aa0
 8002184:	40c00000 	.word	0x40c00000
 8002188:	20000ab0 	.word	0x20000ab0
 800218c:	200006e8 	.word	0x200006e8
 8002190:	20000d7c 	.word	0x20000d7c
 8002194:	20000d94 	.word	0x20000d94
 8002198:	20000828 	.word	0x20000828
 800219c:	20000a28 	.word	0x20000a28
 80021a0:	200006d4 	.word	0x200006d4
 80021a4:	20000db8 	.word	0x20000db8
 80021a8:	20000d68 	.word	0x20000d68
 80021ac:	20000ba4 	.word	0x20000ba4
 80021b0:	20000da0 	.word	0x20000da0
 80021b4:	200006c8 	.word	0x200006c8
 80021b8:	200006b0 	.word	0x200006b0
 80021bc:	20000804 	.word	0x20000804
 80021c0:	20000db4 	.word	0x20000db4
 80021c4:	20000da8 	.word	0x20000da8
 80021c8:	20000a2c 	.word	0x20000a2c
 80021cc:	200007f0 	.word	0x200007f0
 80021d0:	20000aa8 	.word	0x20000aa8
 80021d4:	20000a90 	.word	0x20000a90
 80021d8:	200009f0 	.word	0x200009f0
 80021dc:	20000a00 	.word	0x20000a00
 80021e0:	200006f8 	.word	0x200006f8
 80021e4:	200009e4 	.word	0x200009e4
 80021e8:	20000ba0 	.word	0x20000ba0
 80021ec:	20000d88 	.word	0x20000d88
 80021f0:	20000dbc 	.word	0x20000dbc
 80021f4:	4a8d      	ldr	r2, [pc, #564]	; (800242c <Constant_Current+0xf9c>)
 80021f6:	6013      	str	r3, [r2, #0]
	r14=dPM; if(ePB<dPM) r14=ePB;	//r14=max(dPM,ePB);
 80021f8:	4b8d      	ldr	r3, [pc, #564]	; (8002430 <Constant_Current+0xfa0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a8d      	ldr	r2, [pc, #564]	; (8002434 <Constant_Current+0xfa4>)
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	4b8d      	ldr	r3, [pc, #564]	; (8002438 <Constant_Current+0xfa8>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	4b8a      	ldr	r3, [pc, #552]	; (8002430 <Constant_Current+0xfa0>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4619      	mov	r1, r3
 800220a:	4610      	mov	r0, r2
 800220c:	f7fe ff74 	bl	80010f8 <__aeabi_fcmplt>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <Constant_Current+0xd8e>
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <Constant_Current+0xfa8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a86      	ldr	r2, [pc, #536]	; (8002434 <Constant_Current+0xfa4>)
 800221c:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 800221e:	4b87      	ldr	r3, [pc, #540]	; (800243c <Constant_Current+0xfac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a87      	ldr	r2, [pc, #540]	; (8002440 <Constant_Current+0xfb0>)
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b87      	ldr	r3, [pc, #540]	; (8002444 <Constant_Current+0xfb4>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b84      	ldr	r3, [pc, #528]	; (800243c <Constant_Current+0xfac>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4619      	mov	r1, r3
 8002230:	4610      	mov	r0, r2
 8002232:	f7fe ff61 	bl	80010f8 <__aeabi_fcmplt>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <Constant_Current+0xdb4>
 800223c:	4b81      	ldr	r3, [pc, #516]	; (8002444 <Constant_Current+0xfb4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7f      	ldr	r2, [pc, #508]	; (8002440 <Constant_Current+0xfb0>)
 8002242:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 8002244:	4b7d      	ldr	r3, [pc, #500]	; (800243c <Constant_Current+0xfac>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a7f      	ldr	r2, [pc, #508]	; (8002448 <Constant_Current+0xfb8>)
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b7f      	ldr	r3, [pc, #508]	; (800244c <Constant_Current+0xfbc>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b7a      	ldr	r3, [pc, #488]	; (800243c <Constant_Current+0xfac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	4610      	mov	r0, r2
 8002258:	f7fe ff4e 	bl	80010f8 <__aeabi_fcmplt>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <Constant_Current+0xdda>
 8002262:	4b7a      	ldr	r3, [pc, #488]	; (800244c <Constant_Current+0xfbc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a78      	ldr	r2, [pc, #480]	; (8002448 <Constant_Current+0xfb8>)
 8002268:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 800226a:	4b74      	ldr	r3, [pc, #464]	; (800243c <Constant_Current+0xfac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a78      	ldr	r2, [pc, #480]	; (8002450 <Constant_Current+0xfc0>)
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b78      	ldr	r3, [pc, #480]	; (8002454 <Constant_Current+0xfc4>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b71      	ldr	r3, [pc, #452]	; (800243c <Constant_Current+0xfac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	4610      	mov	r0, r2
 800227e:	f7fe ff3b 	bl	80010f8 <__aeabi_fcmplt>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d003      	beq.n	8002290 <Constant_Current+0xe00>
 8002288:	4b72      	ldr	r3, [pc, #456]	; (8002454 <Constant_Current+0xfc4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a70      	ldr	r2, [pc, #448]	; (8002450 <Constant_Current+0xfc0>)
 800228e:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <Constant_Current+0xfac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a70      	ldr	r2, [pc, #448]	; (8002458 <Constant_Current+0xfc8>)
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b70      	ldr	r3, [pc, #448]	; (800245c <Constant_Current+0xfcc>)
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	4b67      	ldr	r3, [pc, #412]	; (800243c <Constant_Current+0xfac>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4619      	mov	r1, r3
 80022a2:	4610      	mov	r0, r2
 80022a4:	f7fe ff28 	bl	80010f8 <__aeabi_fcmplt>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <Constant_Current+0xe26>
 80022ae:	4b6b      	ldr	r3, [pc, #428]	; (800245c <Constant_Current+0xfcc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a69      	ldr	r2, [pc, #420]	; (8002458 <Constant_Current+0xfc8>)
 80022b4:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 80022b6:	4b61      	ldr	r3, [pc, #388]	; (800243c <Constant_Current+0xfac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a69      	ldr	r2, [pc, #420]	; (8002460 <Constant_Current+0xfd0>)
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b69      	ldr	r3, [pc, #420]	; (8002464 <Constant_Current+0xfd4>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	4b5e      	ldr	r3, [pc, #376]	; (800243c <Constant_Current+0xfac>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f7fe ff15 	bl	80010f8 <__aeabi_fcmplt>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <Constant_Current+0xe4c>
 80022d4:	4b63      	ldr	r3, [pc, #396]	; (8002464 <Constant_Current+0xfd4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a61      	ldr	r2, [pc, #388]	; (8002460 <Constant_Current+0xfd0>)
 80022da:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 80022dc:	4b57      	ldr	r3, [pc, #348]	; (800243c <Constant_Current+0xfac>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a61      	ldr	r2, [pc, #388]	; (8002468 <Constant_Current+0xfd8>)
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	4b61      	ldr	r3, [pc, #388]	; (800246c <Constant_Current+0xfdc>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b54      	ldr	r3, [pc, #336]	; (800243c <Constant_Current+0xfac>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f7fe ff02 	bl	80010f8 <__aeabi_fcmplt>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <Constant_Current+0xe72>
 80022fa:	4b5c      	ldr	r3, [pc, #368]	; (800246c <Constant_Current+0xfdc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a5a      	ldr	r2, [pc, #360]	; (8002468 <Constant_Current+0xfd8>)
 8002300:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 8002302:	4b4e      	ldr	r3, [pc, #312]	; (800243c <Constant_Current+0xfac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a5a      	ldr	r2, [pc, #360]	; (8002470 <Constant_Current+0xfe0>)
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <Constant_Current+0xfa8>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4b4b      	ldr	r3, [pc, #300]	; (800243c <Constant_Current+0xfac>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f7fe feef 	bl	80010f8 <__aeabi_fcmplt>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <Constant_Current+0xe98>
 8002320:	4b45      	ldr	r3, [pc, #276]	; (8002438 <Constant_Current+0xfa8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <Constant_Current+0xfe0>)
 8002326:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 8002328:	4b52      	ldr	r3, [pc, #328]	; (8002474 <Constant_Current+0xfe4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a52      	ldr	r2, [pc, #328]	; (8002478 <Constant_Current+0xfe8>)
 800232e:	6013      	str	r3, [r2, #0]
 8002330:	4b44      	ldr	r3, [pc, #272]	; (8002444 <Constant_Current+0xfb4>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b4f      	ldr	r3, [pc, #316]	; (8002474 <Constant_Current+0xfe4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4619      	mov	r1, r3
 800233a:	4610      	mov	r0, r2
 800233c:	f7fe fedc 	bl	80010f8 <__aeabi_fcmplt>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <Constant_Current+0xebe>
 8002346:	4b3f      	ldr	r3, [pc, #252]	; (8002444 <Constant_Current+0xfb4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <Constant_Current+0xfe8>)
 800234c:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 800234e:	4b49      	ldr	r3, [pc, #292]	; (8002474 <Constant_Current+0xfe4>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a4a      	ldr	r2, [pc, #296]	; (800247c <Constant_Current+0xfec>)
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <Constant_Current+0xfbc>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <Constant_Current+0xfe4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7fe fec9 	bl	80010f8 <__aeabi_fcmplt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <Constant_Current+0xee4>
 800236c:	4b37      	ldr	r3, [pc, #220]	; (800244c <Constant_Current+0xfbc>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a42      	ldr	r2, [pc, #264]	; (800247c <Constant_Current+0xfec>)
 8002372:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 8002374:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <Constant_Current+0xfe4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a41      	ldr	r2, [pc, #260]	; (8002480 <Constant_Current+0xff0>)
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <Constant_Current+0xfc4>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <Constant_Current+0xfe4>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4619      	mov	r1, r3
 8002386:	4610      	mov	r0, r2
 8002388:	f7fe feb6 	bl	80010f8 <__aeabi_fcmplt>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <Constant_Current+0xf0a>
 8002392:	4b30      	ldr	r3, [pc, #192]	; (8002454 <Constant_Current+0xfc4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a3a      	ldr	r2, [pc, #232]	; (8002480 <Constant_Current+0xff0>)
 8002398:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <Constant_Current+0xfe4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a39      	ldr	r2, [pc, #228]	; (8002484 <Constant_Current+0xff4>)
 80023a0:	6013      	str	r3, [r2, #0]
 80023a2:	4b2e      	ldr	r3, [pc, #184]	; (800245c <Constant_Current+0xfcc>)
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <Constant_Current+0xfe4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fe fea3 	bl	80010f8 <__aeabi_fcmplt>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <Constant_Current+0xf30>
 80023b8:	4b28      	ldr	r3, [pc, #160]	; (800245c <Constant_Current+0xfcc>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a31      	ldr	r2, [pc, #196]	; (8002484 <Constant_Current+0xff4>)
 80023be:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <Constant_Current+0xfe4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a30      	ldr	r2, [pc, #192]	; (8002488 <Constant_Current+0xff8>)
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <Constant_Current+0xfd4>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <Constant_Current+0xfe4>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f7fe fe90 	bl	80010f8 <__aeabi_fcmplt>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <Constant_Current+0xf56>
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <Constant_Current+0xfd4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a29      	ldr	r2, [pc, #164]	; (8002488 <Constant_Current+0xff8>)
 80023e4:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <Constant_Current+0xfe4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a28      	ldr	r2, [pc, #160]	; (800248c <Constant_Current+0xffc>)
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <Constant_Current+0xfdc>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b20      	ldr	r3, [pc, #128]	; (8002474 <Constant_Current+0xfe4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4619      	mov	r1, r3
 80023f8:	4610      	mov	r0, r2
 80023fa:	f7fe fe7d 	bl	80010f8 <__aeabi_fcmplt>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <Constant_Current+0xf7c>
 8002404:	4b19      	ldr	r3, [pc, #100]	; (800246c <Constant_Current+0xfdc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a20      	ldr	r2, [pc, #128]	; (800248c <Constant_Current+0xffc>)
 800240a:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <Constant_Current+0xfe4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a1f      	ldr	r2, [pc, #124]	; (8002490 <Constant_Current+0x1000>)
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <Constant_Current+0xfa8>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <Constant_Current+0xfe4>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f7fe fe6a 	bl	80010f8 <__aeabi_fcmplt>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d038      	beq.n	800249c <Constant_Current+0x100c>
 800242a:	e033      	b.n	8002494 <Constant_Current+0x1004>
 800242c:	20000dbc 	.word	0x20000dbc
 8002430:	200006e8 	.word	0x200006e8
 8002434:	20000678 	.word	0x20000678
 8002438:	200009f0 	.word	0x200009f0
 800243c:	20000d7c 	.word	0x20000d7c
 8002440:	20000d8c 	.word	0x20000d8c
 8002444:	20000d68 	.word	0x20000d68
 8002448:	20000aa4 	.word	0x20000aa4
 800244c:	20000da0 	.word	0x20000da0
 8002450:	200007e0 	.word	0x200007e0
 8002454:	200006b0 	.word	0x200006b0
 8002458:	20000a30 	.word	0x20000a30
 800245c:	20000db4 	.word	0x20000db4
 8002460:	20000d84 	.word	0x20000d84
 8002464:	20000a2c 	.word	0x20000a2c
 8002468:	200009f8 	.word	0x200009f8
 800246c:	20000aa8 	.word	0x20000aa8
 8002470:	200007f8 	.word	0x200007f8
 8002474:	20000d94 	.word	0x20000d94
 8002478:	20000c8c 	.word	0x20000c8c
 800247c:	20000d9c 	.word	0x20000d9c
 8002480:	20000db0 	.word	0x20000db0
 8002484:	200006ac 	.word	0x200006ac
 8002488:	200007d0 	.word	0x200007d0
 800248c:	20000a14 	.word	0x20000a14
 8002490:	20000684 	.word	0x20000684
 8002494:	4b8d      	ldr	r3, [pc, #564]	; (80026cc <Constant_Current+0x123c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a8d      	ldr	r2, [pc, #564]	; (80026d0 <Constant_Current+0x1240>)
 800249a:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 800249c:	4b8d      	ldr	r3, [pc, #564]	; (80026d4 <Constant_Current+0x1244>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a8d      	ldr	r2, [pc, #564]	; (80026d8 <Constant_Current+0x1248>)
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b8d      	ldr	r3, [pc, #564]	; (80026dc <Constant_Current+0x124c>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b8a      	ldr	r3, [pc, #552]	; (80026d4 <Constant_Current+0x1244>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f7fe fe22 	bl	80010f8 <__aeabi_fcmplt>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d003      	beq.n	80024c2 <Constant_Current+0x1032>
 80024ba:	4b88      	ldr	r3, [pc, #544]	; (80026dc <Constant_Current+0x124c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a86      	ldr	r2, [pc, #536]	; (80026d8 <Constant_Current+0x1248>)
 80024c0:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 80024c2:	4b84      	ldr	r3, [pc, #528]	; (80026d4 <Constant_Current+0x1244>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a86      	ldr	r2, [pc, #536]	; (80026e0 <Constant_Current+0x1250>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b86      	ldr	r3, [pc, #536]	; (80026e4 <Constant_Current+0x1254>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b81      	ldr	r3, [pc, #516]	; (80026d4 <Constant_Current+0x1244>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4619      	mov	r1, r3
 80024d4:	4610      	mov	r0, r2
 80024d6:	f7fe fe0f 	bl	80010f8 <__aeabi_fcmplt>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <Constant_Current+0x1058>
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <Constant_Current+0x1254>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a7e      	ldr	r2, [pc, #504]	; (80026e0 <Constant_Current+0x1250>)
 80024e6:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 80024e8:	4b7a      	ldr	r3, [pc, #488]	; (80026d4 <Constant_Current+0x1244>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <Constant_Current+0x1258>)
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <Constant_Current+0x125c>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b77      	ldr	r3, [pc, #476]	; (80026d4 <Constant_Current+0x1244>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7fe fdfc 	bl	80010f8 <__aeabi_fcmplt>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <Constant_Current+0x107e>
 8002506:	4b79      	ldr	r3, [pc, #484]	; (80026ec <Constant_Current+0x125c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a77      	ldr	r2, [pc, #476]	; (80026e8 <Constant_Current+0x1258>)
 800250c:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 800250e:	4b71      	ldr	r3, [pc, #452]	; (80026d4 <Constant_Current+0x1244>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a77      	ldr	r2, [pc, #476]	; (80026f0 <Constant_Current+0x1260>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b77      	ldr	r3, [pc, #476]	; (80026f4 <Constant_Current+0x1264>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	4b6e      	ldr	r3, [pc, #440]	; (80026d4 <Constant_Current+0x1244>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	4610      	mov	r0, r2
 8002522:	f7fe fde9 	bl	80010f8 <__aeabi_fcmplt>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <Constant_Current+0x10a4>
 800252c:	4b71      	ldr	r3, [pc, #452]	; (80026f4 <Constant_Current+0x1264>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a6f      	ldr	r2, [pc, #444]	; (80026f0 <Constant_Current+0x1260>)
 8002532:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 8002534:	4b67      	ldr	r3, [pc, #412]	; (80026d4 <Constant_Current+0x1244>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6f      	ldr	r2, [pc, #444]	; (80026f8 <Constant_Current+0x1268>)
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	4b6f      	ldr	r3, [pc, #444]	; (80026fc <Constant_Current+0x126c>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b64      	ldr	r3, [pc, #400]	; (80026d4 <Constant_Current+0x1244>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4619      	mov	r1, r3
 8002546:	4610      	mov	r0, r2
 8002548:	f7fe fdd6 	bl	80010f8 <__aeabi_fcmplt>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <Constant_Current+0x10ca>
 8002552:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <Constant_Current+0x126c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a68      	ldr	r2, [pc, #416]	; (80026f8 <Constant_Current+0x1268>)
 8002558:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 800255a:	4b5e      	ldr	r3, [pc, #376]	; (80026d4 <Constant_Current+0x1244>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a68      	ldr	r2, [pc, #416]	; (8002700 <Constant_Current+0x1270>)
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	4b68      	ldr	r3, [pc, #416]	; (8002704 <Constant_Current+0x1274>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	4b5b      	ldr	r3, [pc, #364]	; (80026d4 <Constant_Current+0x1244>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4619      	mov	r1, r3
 800256c:	4610      	mov	r0, r2
 800256e:	f7fe fdc3 	bl	80010f8 <__aeabi_fcmplt>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <Constant_Current+0x10f0>
 8002578:	4b62      	ldr	r3, [pc, #392]	; (8002704 <Constant_Current+0x1274>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a60      	ldr	r2, [pc, #384]	; (8002700 <Constant_Current+0x1270>)
 800257e:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 8002580:	4b54      	ldr	r3, [pc, #336]	; (80026d4 <Constant_Current+0x1244>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a60      	ldr	r2, [pc, #384]	; (8002708 <Constant_Current+0x1278>)
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b50      	ldr	r3, [pc, #320]	; (80026cc <Constant_Current+0x123c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b51      	ldr	r3, [pc, #324]	; (80026d4 <Constant_Current+0x1244>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4619      	mov	r1, r3
 8002592:	4610      	mov	r0, r2
 8002594:	f7fe fdb0 	bl	80010f8 <__aeabi_fcmplt>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <Constant_Current+0x1116>
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <Constant_Current+0x123c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a59      	ldr	r2, [pc, #356]	; (8002708 <Constant_Current+0x1278>)
 80025a4:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 80025a6:	4b59      	ldr	r3, [pc, #356]	; (800270c <Constant_Current+0x127c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a59      	ldr	r2, [pc, #356]	; (8002710 <Constant_Current+0x1280>)
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <Constant_Current+0x124c>)
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	4b56      	ldr	r3, [pc, #344]	; (800270c <Constant_Current+0x127c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f7fe fd9d 	bl	80010f8 <__aeabi_fcmplt>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <Constant_Current+0x113c>
 80025c4:	4b45      	ldr	r3, [pc, #276]	; (80026dc <Constant_Current+0x124c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a51      	ldr	r2, [pc, #324]	; (8002710 <Constant_Current+0x1280>)
 80025ca:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 80025cc:	4b4f      	ldr	r3, [pc, #316]	; (800270c <Constant_Current+0x127c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a50      	ldr	r2, [pc, #320]	; (8002714 <Constant_Current+0x1284>)
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <Constant_Current+0x1254>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4b4c      	ldr	r3, [pc, #304]	; (800270c <Constant_Current+0x127c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7fe fd8a 	bl	80010f8 <__aeabi_fcmplt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <Constant_Current+0x1162>
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <Constant_Current+0x1254>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a49      	ldr	r2, [pc, #292]	; (8002714 <Constant_Current+0x1284>)
 80025f0:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 80025f2:	4b46      	ldr	r3, [pc, #280]	; (800270c <Constant_Current+0x127c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a48      	ldr	r2, [pc, #288]	; (8002718 <Constant_Current+0x1288>)
 80025f8:	6013      	str	r3, [r2, #0]
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <Constant_Current+0x125c>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4b43      	ldr	r3, [pc, #268]	; (800270c <Constant_Current+0x127c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f7fe fd77 	bl	80010f8 <__aeabi_fcmplt>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <Constant_Current+0x1188>
 8002610:	4b36      	ldr	r3, [pc, #216]	; (80026ec <Constant_Current+0x125c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a40      	ldr	r2, [pc, #256]	; (8002718 <Constant_Current+0x1288>)
 8002616:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 8002618:	4b3c      	ldr	r3, [pc, #240]	; (800270c <Constant_Current+0x127c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a3f      	ldr	r2, [pc, #252]	; (800271c <Constant_Current+0x128c>)
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b34      	ldr	r3, [pc, #208]	; (80026f4 <Constant_Current+0x1264>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b39      	ldr	r3, [pc, #228]	; (800270c <Constant_Current+0x127c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f7fe fd64 	bl	80010f8 <__aeabi_fcmplt>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <Constant_Current+0x11ae>
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <Constant_Current+0x1264>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a38      	ldr	r2, [pc, #224]	; (800271c <Constant_Current+0x128c>)
 800263c:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <Constant_Current+0x127c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a37      	ldr	r2, [pc, #220]	; (8002720 <Constant_Current+0x1290>)
 8002644:	6013      	str	r3, [r2, #0]
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <Constant_Current+0x126c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b30      	ldr	r3, [pc, #192]	; (800270c <Constant_Current+0x127c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f7fe fd51 	bl	80010f8 <__aeabi_fcmplt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <Constant_Current+0x11d4>
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <Constant_Current+0x126c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a2f      	ldr	r2, [pc, #188]	; (8002720 <Constant_Current+0x1290>)
 8002662:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 8002664:	4b29      	ldr	r3, [pc, #164]	; (800270c <Constant_Current+0x127c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2e      	ldr	r2, [pc, #184]	; (8002724 <Constant_Current+0x1294>)
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <Constant_Current+0x1274>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	4b26      	ldr	r3, [pc, #152]	; (800270c <Constant_Current+0x127c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4619      	mov	r1, r3
 8002676:	4610      	mov	r0, r2
 8002678:	f7fe fd3e 	bl	80010f8 <__aeabi_fcmplt>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <Constant_Current+0x11fa>
 8002682:	4b20      	ldr	r3, [pc, #128]	; (8002704 <Constant_Current+0x1274>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a27      	ldr	r2, [pc, #156]	; (8002724 <Constant_Current+0x1294>)
 8002688:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 800268a:	4b20      	ldr	r3, [pc, #128]	; (800270c <Constant_Current+0x127c>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a26      	ldr	r2, [pc, #152]	; (8002728 <Constant_Current+0x1298>)
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <Constant_Current+0x123c>)
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	4b1d      	ldr	r3, [pc, #116]	; (800270c <Constant_Current+0x127c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	4610      	mov	r0, r2
 800269e:	f7fe fd2b 	bl	80010f8 <__aeabi_fcmplt>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <Constant_Current+0x1220>
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <Constant_Current+0x123c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a1e      	ldr	r2, [pc, #120]	; (8002728 <Constant_Current+0x1298>)
 80026ae:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 80026b0:	4b1e      	ldr	r3, [pc, #120]	; (800272c <Constant_Current+0x129c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1e      	ldr	r2, [pc, #120]	; (8002730 <Constant_Current+0x12a0>)
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	4b08      	ldr	r3, [pc, #32]	; (80026dc <Constant_Current+0x124c>)
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <Constant_Current+0x129c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7fe fd18 	bl	80010f8 <__aeabi_fcmplt>
 80026c8:	e034      	b.n	8002734 <Constant_Current+0x12a4>
 80026ca:	bf00      	nop
 80026cc:	200009f0 	.word	0x200009f0
 80026d0:	20000684 	.word	0x20000684
 80026d4:	20000828 	.word	0x20000828
 80026d8:	200006a4 	.word	0x200006a4
 80026dc:	20000d68 	.word	0x20000d68
 80026e0:	20000b8c 	.word	0x20000b8c
 80026e4:	20000da0 	.word	0x20000da0
 80026e8:	200007e8 	.word	0x200007e8
 80026ec:	200006b0 	.word	0x200006b0
 80026f0:	2000082c 	.word	0x2000082c
 80026f4:	20000db4 	.word	0x20000db4
 80026f8:	20000a20 	.word	0x20000a20
 80026fc:	20000a2c 	.word	0x20000a2c
 8002700:	20000b88 	.word	0x20000b88
 8002704:	20000aa8 	.word	0x20000aa8
 8002708:	20000c88 	.word	0x20000c88
 800270c:	20000a28 	.word	0x20000a28
 8002710:	200006cc 	.word	0x200006cc
 8002714:	2000090c 	.word	0x2000090c
 8002718:	200009f4 	.word	0x200009f4
 800271c:	20000d78 	.word	0x20000d78
 8002720:	20000a88 	.word	0x20000a88
 8002724:	200006b8 	.word	0x200006b8
 8002728:	200006c0 	.word	0x200006c0
 800272c:	200006d4 	.word	0x200006d4
 8002730:	20000d80 	.word	0x20000d80
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <Constant_Current+0x12b2>
 800273a:	4b8f      	ldr	r3, [pc, #572]	; (8002978 <Constant_Current+0x14e8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a8f      	ldr	r2, [pc, #572]	; (800297c <Constant_Current+0x14ec>)
 8002740:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 8002742:	4b8f      	ldr	r3, [pc, #572]	; (8002980 <Constant_Current+0x14f0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a8f      	ldr	r2, [pc, #572]	; (8002984 <Constant_Current+0x14f4>)
 8002748:	6013      	str	r3, [r2, #0]
 800274a:	4b8f      	ldr	r3, [pc, #572]	; (8002988 <Constant_Current+0x14f8>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	4b8c      	ldr	r3, [pc, #560]	; (8002980 <Constant_Current+0x14f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4619      	mov	r1, r3
 8002754:	4610      	mov	r0, r2
 8002756:	f7fe fccf 	bl	80010f8 <__aeabi_fcmplt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <Constant_Current+0x12d8>
 8002760:	4b89      	ldr	r3, [pc, #548]	; (8002988 <Constant_Current+0x14f8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a87      	ldr	r2, [pc, #540]	; (8002984 <Constant_Current+0x14f4>)
 8002766:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 8002768:	4b85      	ldr	r3, [pc, #532]	; (8002980 <Constant_Current+0x14f0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a87      	ldr	r2, [pc, #540]	; (800298c <Constant_Current+0x14fc>)
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b87      	ldr	r3, [pc, #540]	; (8002990 <Constant_Current+0x1500>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b82      	ldr	r3, [pc, #520]	; (8002980 <Constant_Current+0x14f0>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4619      	mov	r1, r3
 800277a:	4610      	mov	r0, r2
 800277c:	f7fe fcbc 	bl	80010f8 <__aeabi_fcmplt>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <Constant_Current+0x12fe>
 8002786:	4b82      	ldr	r3, [pc, #520]	; (8002990 <Constant_Current+0x1500>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a80      	ldr	r2, [pc, #512]	; (800298c <Constant_Current+0x14fc>)
 800278c:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 800278e:	4b7c      	ldr	r3, [pc, #496]	; (8002980 <Constant_Current+0x14f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a80      	ldr	r2, [pc, #512]	; (8002994 <Constant_Current+0x1504>)
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b80      	ldr	r3, [pc, #512]	; (8002998 <Constant_Current+0x1508>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b79      	ldr	r3, [pc, #484]	; (8002980 <Constant_Current+0x14f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7fe fca9 	bl	80010f8 <__aeabi_fcmplt>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <Constant_Current+0x1324>
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <Constant_Current+0x1508>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a78      	ldr	r2, [pc, #480]	; (8002994 <Constant_Current+0x1504>)
 80027b2:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 80027b4:	4b72      	ldr	r3, [pc, #456]	; (8002980 <Constant_Current+0x14f0>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a78      	ldr	r2, [pc, #480]	; (800299c <Constant_Current+0x150c>)
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <Constant_Current+0x1510>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <Constant_Current+0x14f0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7fe fc96 	bl	80010f8 <__aeabi_fcmplt>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <Constant_Current+0x134a>
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <Constant_Current+0x1510>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a71      	ldr	r2, [pc, #452]	; (800299c <Constant_Current+0x150c>)
 80027d8:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 80027da:	4b69      	ldr	r3, [pc, #420]	; (8002980 <Constant_Current+0x14f0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a71      	ldr	r2, [pc, #452]	; (80029a4 <Constant_Current+0x1514>)
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	4b71      	ldr	r3, [pc, #452]	; (80029a8 <Constant_Current+0x1518>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b66      	ldr	r3, [pc, #408]	; (8002980 <Constant_Current+0x14f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4619      	mov	r1, r3
 80027ec:	4610      	mov	r0, r2
 80027ee:	f7fe fc83 	bl	80010f8 <__aeabi_fcmplt>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <Constant_Current+0x1370>
 80027f8:	4b6b      	ldr	r3, [pc, #428]	; (80029a8 <Constant_Current+0x1518>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a69      	ldr	r2, [pc, #420]	; (80029a4 <Constant_Current+0x1514>)
 80027fe:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8002800:	4b5f      	ldr	r3, [pc, #380]	; (8002980 <Constant_Current+0x14f0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a69      	ldr	r2, [pc, #420]	; (80029ac <Constant_Current+0x151c>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b69      	ldr	r3, [pc, #420]	; (80029b0 <Constant_Current+0x1520>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <Constant_Current+0x14f0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f7fe fc70 	bl	80010f8 <__aeabi_fcmplt>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <Constant_Current+0x1396>
 800281e:	4b64      	ldr	r3, [pc, #400]	; (80029b0 <Constant_Current+0x1520>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a62      	ldr	r2, [pc, #392]	; (80029ac <Constant_Current+0x151c>)
 8002824:	6013      	str	r3, [r2, #0]

	///////////////////////////////DEFUZZIFIKASI///////////////////////////////////

	A=(r1*outZ)+(r2*outPS)+(r3*outPM)+(r4*outPB)+(r5*outPH)+(r6*outPH)+(r7*outPH);
 8002826:	4b63      	ldr	r3, [pc, #396]	; (80029b4 <Constant_Current+0x1524>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <Constant_Current+0x1528>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	4610      	mov	r0, r2
 8002832:	f7fe fac3 	bl	8000dbc <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	461c      	mov	r4, r3
 800283a:	4b60      	ldr	r3, [pc, #384]	; (80029bc <Constant_Current+0x152c>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	4b60      	ldr	r3, [pc, #384]	; (80029c0 <Constant_Current+0x1530>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4619      	mov	r1, r3
 8002844:	4610      	mov	r0, r2
 8002846:	f7fe fab9 	bl	8000dbc <__aeabi_fmul>
 800284a:	4603      	mov	r3, r0
 800284c:	4619      	mov	r1, r3
 800284e:	4620      	mov	r0, r4
 8002850:	f7fe f9ac 	bl	8000bac <__addsf3>
 8002854:	4603      	mov	r3, r0
 8002856:	461c      	mov	r4, r3
 8002858:	4b5a      	ldr	r3, [pc, #360]	; (80029c4 <Constant_Current+0x1534>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <Constant_Current+0x1538>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	4610      	mov	r0, r2
 8002864:	f7fe faaa 	bl	8000dbc <__aeabi_fmul>
 8002868:	4603      	mov	r3, r0
 800286a:	4619      	mov	r1, r3
 800286c:	4620      	mov	r0, r4
 800286e:	f7fe f99d 	bl	8000bac <__addsf3>
 8002872:	4603      	mov	r3, r0
 8002874:	461c      	mov	r4, r3
 8002876:	4b55      	ldr	r3, [pc, #340]	; (80029cc <Constant_Current+0x153c>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	4b55      	ldr	r3, [pc, #340]	; (80029d0 <Constant_Current+0x1540>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4619      	mov	r1, r3
 8002880:	4610      	mov	r0, r2
 8002882:	f7fe fa9b 	bl	8000dbc <__aeabi_fmul>
 8002886:	4603      	mov	r3, r0
 8002888:	4619      	mov	r1, r3
 800288a:	4620      	mov	r0, r4
 800288c:	f7fe f98e 	bl	8000bac <__addsf3>
 8002890:	4603      	mov	r3, r0
 8002892:	461c      	mov	r4, r3
 8002894:	4b4f      	ldr	r3, [pc, #316]	; (80029d4 <Constant_Current+0x1544>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b4f      	ldr	r3, [pc, #316]	; (80029d8 <Constant_Current+0x1548>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	4610      	mov	r0, r2
 80028a0:	f7fe fa8c 	bl	8000dbc <__aeabi_fmul>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4619      	mov	r1, r3
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7fe f97f 	bl	8000bac <__addsf3>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461c      	mov	r4, r3
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <Constant_Current+0x154c>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	4b48      	ldr	r3, [pc, #288]	; (80029d8 <Constant_Current+0x1548>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f7fe fa7d 	bl	8000dbc <__aeabi_fmul>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4619      	mov	r1, r3
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7fe f970 	bl	8000bac <__addsf3>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461c      	mov	r4, r3
 80028d0:	4b43      	ldr	r3, [pc, #268]	; (80029e0 <Constant_Current+0x1550>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <Constant_Current+0x1548>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f7fe fa6e 	bl	8000dbc <__aeabi_fmul>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7fe f961 	bl	8000bac <__addsf3>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b3d      	ldr	r3, [pc, #244]	; (80029e4 <Constant_Current+0x1554>)
 80028f0:	601a      	str	r2, [r3, #0]
	B=(r8*outNS)+(r9*outZ)+(r10*outPS)+(r11*outPM)+(r12*outPB)+(r13*outPH)+(r14*outPH);
 80028f2:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <Constant_Current+0x1558>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b3d      	ldr	r3, [pc, #244]	; (80029ec <Constant_Current+0x155c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f7fe fa5d 	bl	8000dbc <__aeabi_fmul>
 8002902:	4603      	mov	r3, r0
 8002904:	461c      	mov	r4, r3
 8002906:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <Constant_Current+0x1560>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <Constant_Current+0x1528>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	4610      	mov	r0, r2
 8002912:	f7fe fa53 	bl	8000dbc <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	4619      	mov	r1, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f7fe f946 	bl	8000bac <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	461c      	mov	r4, r3
 8002924:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <Constant_Current+0x1564>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <Constant_Current+0x1530>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f7fe fa44 	bl	8000dbc <__aeabi_fmul>
 8002934:	4603      	mov	r3, r0
 8002936:	4619      	mov	r1, r3
 8002938:	4620      	mov	r0, r4
 800293a:	f7fe f937 	bl	8000bac <__addsf3>
 800293e:	4603      	mov	r3, r0
 8002940:	461c      	mov	r4, r3
 8002942:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <Constant_Current+0x1568>)
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <Constant_Current+0x1538>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f7fe fa35 	bl	8000dbc <__aeabi_fmul>
 8002952:	4603      	mov	r3, r0
 8002954:	4619      	mov	r1, r3
 8002956:	4620      	mov	r0, r4
 8002958:	f7fe f928 	bl	8000bac <__addsf3>
 800295c:	4603      	mov	r3, r0
 800295e:	461c      	mov	r4, r3
 8002960:	4b26      	ldr	r3, [pc, #152]	; (80029fc <Constant_Current+0x156c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <Constant_Current+0x1540>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	4610      	mov	r0, r2
 800296c:	f7fe fa26 	bl	8000dbc <__aeabi_fmul>
 8002970:	4603      	mov	r3, r0
 8002972:	4619      	mov	r1, r3
 8002974:	4620      	mov	r0, r4
 8002976:	e043      	b.n	8002a00 <Constant_Current+0x1570>
 8002978:	20000d68 	.word	0x20000d68
 800297c:	20000d80 	.word	0x20000d80
 8002980:	200006d4 	.word	0x200006d4
 8002984:	200008fc 	.word	0x200008fc
 8002988:	20000da0 	.word	0x20000da0
 800298c:	20000824 	.word	0x20000824
 8002990:	200006b0 	.word	0x200006b0
 8002994:	200006fc 	.word	0x200006fc
 8002998:	20000db4 	.word	0x20000db4
 800299c:	20000d70 	.word	0x20000d70
 80029a0:	20000a2c 	.word	0x20000a2c
 80029a4:	20000a94 	.word	0x20000a94
 80029a8:	20000aa8 	.word	0x20000aa8
 80029ac:	20000a1c 	.word	0x20000a1c
 80029b0:	200009f0 	.word	0x200009f0
 80029b4:	20000db8 	.word	0x20000db8
 80029b8:	20000254 	.word	0x20000254
 80029bc:	20000ba4 	.word	0x20000ba4
 80029c0:	20000010 	.word	0x20000010
 80029c4:	200006c8 	.word	0x200006c8
 80029c8:	20000014 	.word	0x20000014
 80029cc:	20000804 	.word	0x20000804
 80029d0:	20000018 	.word	0x20000018
 80029d4:	20000da8 	.word	0x20000da8
 80029d8:	2000001c 	.word	0x2000001c
 80029dc:	200007f0 	.word	0x200007f0
 80029e0:	20000a90 	.word	0x20000a90
 80029e4:	200006f0 	.word	0x200006f0
 80029e8:	20000a00 	.word	0x20000a00
 80029ec:	2000000c 	.word	0x2000000c
 80029f0:	200006f8 	.word	0x200006f8
 80029f4:	200009e4 	.word	0x200009e4
 80029f8:	20000ba0 	.word	0x20000ba0
 80029fc:	20000d88 	.word	0x20000d88
 8002a00:	f7fe f8d4 	bl	8000bac <__addsf3>
 8002a04:	4603      	mov	r3, r0
 8002a06:	461c      	mov	r4, r3
 8002a08:	4b91      	ldr	r3, [pc, #580]	; (8002c50 <Constant_Current+0x17c0>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <Constant_Current+0x17c4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f7fe f9d2 	bl	8000dbc <__aeabi_fmul>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7fe f8c5 	bl	8000bac <__addsf3>
 8002a22:	4603      	mov	r3, r0
 8002a24:	461c      	mov	r4, r3
 8002a26:	4b8c      	ldr	r3, [pc, #560]	; (8002c58 <Constant_Current+0x17c8>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b8a      	ldr	r3, [pc, #552]	; (8002c54 <Constant_Current+0x17c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f7fe f9c3 	bl	8000dbc <__aeabi_fmul>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f7fe f8b6 	bl	8000bac <__addsf3>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <Constant_Current+0x17cc>)
 8002a46:	601a      	str	r2, [r3, #0]
	C=(r15*outNM)+(r16*outNS)+(r17*outZ)+(r18*outPS)+(r19*outPM)+(r20*outPB)+(r21*outPH);
 8002a48:	4b85      	ldr	r3, [pc, #532]	; (8002c60 <Constant_Current+0x17d0>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b85      	ldr	r3, [pc, #532]	; (8002c64 <Constant_Current+0x17d4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	4610      	mov	r0, r2
 8002a54:	f7fe f9b2 	bl	8000dbc <__aeabi_fmul>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <Constant_Current+0x17d8>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <Constant_Current+0x17dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4619      	mov	r1, r3
 8002a66:	4610      	mov	r0, r2
 8002a68:	f7fe f9a8 	bl	8000dbc <__aeabi_fmul>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7fe f89b 	bl	8000bac <__addsf3>
 8002a76:	4603      	mov	r3, r0
 8002a78:	461c      	mov	r4, r3
 8002a7a:	4b7d      	ldr	r3, [pc, #500]	; (8002c70 <Constant_Current+0x17e0>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b7d      	ldr	r3, [pc, #500]	; (8002c74 <Constant_Current+0x17e4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4619      	mov	r1, r3
 8002a84:	4610      	mov	r0, r2
 8002a86:	f7fe f999 	bl	8000dbc <__aeabi_fmul>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7fe f88c 	bl	8000bac <__addsf3>
 8002a94:	4603      	mov	r3, r0
 8002a96:	461c      	mov	r4, r3
 8002a98:	4b77      	ldr	r3, [pc, #476]	; (8002c78 <Constant_Current+0x17e8>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4b77      	ldr	r3, [pc, #476]	; (8002c7c <Constant_Current+0x17ec>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	f7fe f98a 	bl	8000dbc <__aeabi_fmul>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4620      	mov	r0, r4
 8002aae:	f7fe f87d 	bl	8000bac <__addsf3>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	461c      	mov	r4, r3
 8002ab6:	4b72      	ldr	r3, [pc, #456]	; (8002c80 <Constant_Current+0x17f0>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4b72      	ldr	r3, [pc, #456]	; (8002c84 <Constant_Current+0x17f4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	f7fe f97b 	bl	8000dbc <__aeabi_fmul>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4620      	mov	r0, r4
 8002acc:	f7fe f86e 	bl	8000bac <__addsf3>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461c      	mov	r4, r3
 8002ad4:	4b6c      	ldr	r3, [pc, #432]	; (8002c88 <Constant_Current+0x17f8>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	4b6c      	ldr	r3, [pc, #432]	; (8002c8c <Constant_Current+0x17fc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7fe f96c 	bl	8000dbc <__aeabi_fmul>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4620      	mov	r0, r4
 8002aea:	f7fe f85f 	bl	8000bac <__addsf3>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461c      	mov	r4, r3
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <Constant_Current+0x1800>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4b57      	ldr	r3, [pc, #348]	; (8002c54 <Constant_Current+0x17c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f7fe f95d 	bl	8000dbc <__aeabi_fmul>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4619      	mov	r1, r3
 8002b06:	4620      	mov	r0, r4
 8002b08:	f7fe f850 	bl	8000bac <__addsf3>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4b60      	ldr	r3, [pc, #384]	; (8002c94 <Constant_Current+0x1804>)
 8002b12:	601a      	str	r2, [r3, #0]
	D=(r22*outNB)+(r23*outNM)+(r24*outNS)+(r25*outZ)+(r26*outPS)+(r27*outPM)+(r28*outPB);
 8002b14:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <Constant_Current+0x1808>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b60      	ldr	r3, [pc, #384]	; (8002c9c <Constant_Current+0x180c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f7fe f94c 	bl	8000dbc <__aeabi_fmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461c      	mov	r4, r3
 8002b28:	4b5d      	ldr	r3, [pc, #372]	; (8002ca0 <Constant_Current+0x1810>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <Constant_Current+0x17d4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7fe f942 	bl	8000dbc <__aeabi_fmul>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7fe f835 	bl	8000bac <__addsf3>
 8002b42:	4603      	mov	r3, r0
 8002b44:	461c      	mov	r4, r3
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <Constant_Current+0x1814>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	4b48      	ldr	r3, [pc, #288]	; (8002c6c <Constant_Current+0x17dc>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4610      	mov	r0, r2
 8002b52:	f7fe f933 	bl	8000dbc <__aeabi_fmul>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	f7fe f826 	bl	8000bac <__addsf3>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461c      	mov	r4, r3
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <Constant_Current+0x1818>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b42      	ldr	r3, [pc, #264]	; (8002c74 <Constant_Current+0x17e4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f7fe f924 	bl	8000dbc <__aeabi_fmul>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4619      	mov	r1, r3
 8002b78:	4620      	mov	r0, r4
 8002b7a:	f7fe f817 	bl	8000bac <__addsf3>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461c      	mov	r4, r3
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <Constant_Current+0x181c>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <Constant_Current+0x17ec>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f7fe f915 	bl	8000dbc <__aeabi_fmul>
 8002b92:	4603      	mov	r3, r0
 8002b94:	4619      	mov	r1, r3
 8002b96:	4620      	mov	r0, r4
 8002b98:	f7fe f808 	bl	8000bac <__addsf3>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	461c      	mov	r4, r3
 8002ba0:	4b43      	ldr	r3, [pc, #268]	; (8002cb0 <Constant_Current+0x1820>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <Constant_Current+0x17f4>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4610      	mov	r0, r2
 8002bac:	f7fe f906 	bl	8000dbc <__aeabi_fmul>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	f7fd fff9 	bl	8000bac <__addsf3>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461c      	mov	r4, r3
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <Constant_Current+0x1824>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <Constant_Current+0x17fc>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7fe f8f7 	bl	8000dbc <__aeabi_fmul>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7fd ffea 	bl	8000bac <__addsf3>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b36      	ldr	r3, [pc, #216]	; (8002cb8 <Constant_Current+0x1828>)
 8002bde:	601a      	str	r2, [r3, #0]
	E=(r29*outNH)+(r30*outNB)+(r31*outNM)+(r32*outNS)+(r33*outZ)+(r34*outPS)+(r35*outPM);
 8002be0:	4b36      	ldr	r3, [pc, #216]	; (8002cbc <Constant_Current+0x182c>)
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b36      	ldr	r3, [pc, #216]	; (8002cc0 <Constant_Current+0x1830>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4619      	mov	r1, r3
 8002bea:	4610      	mov	r0, r2
 8002bec:	f7fe f8e6 	bl	8000dbc <__aeabi_fmul>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	461c      	mov	r4, r3
 8002bf4:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <Constant_Current+0x1834>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <Constant_Current+0x180c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	f7fe f8dc 	bl	8000dbc <__aeabi_fmul>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4619      	mov	r1, r3
 8002c08:	4620      	mov	r0, r4
 8002c0a:	f7fd ffcf 	bl	8000bac <__addsf3>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461c      	mov	r4, r3
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <Constant_Current+0x1838>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <Constant_Current+0x17d4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7fe f8cd 	bl	8000dbc <__aeabi_fmul>
 8002c22:	4603      	mov	r3, r0
 8002c24:	4619      	mov	r1, r3
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7fd ffc0 	bl	8000bac <__addsf3>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	461c      	mov	r4, r3
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <Constant_Current+0x183c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <Constant_Current+0x17dc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	f7fe f8be 	bl	8000dbc <__aeabi_fmul>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4619      	mov	r1, r3
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7fd ffb1 	bl	8000bac <__addsf3>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	e040      	b.n	8002cd0 <Constant_Current+0x1840>
 8002c4e:	bf00      	nop
 8002c50:	20000dbc 	.word	0x20000dbc
 8002c54:	2000001c 	.word	0x2000001c
 8002c58:	20000678 	.word	0x20000678
 8002c5c:	200008f8 	.word	0x200008f8
 8002c60:	20000d8c 	.word	0x20000d8c
 8002c64:	20000008 	.word	0x20000008
 8002c68:	20000aa4 	.word	0x20000aa4
 8002c6c:	2000000c 	.word	0x2000000c
 8002c70:	200007e0 	.word	0x200007e0
 8002c74:	20000254 	.word	0x20000254
 8002c78:	20000a30 	.word	0x20000a30
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	20000d84 	.word	0x20000d84
 8002c84:	20000014 	.word	0x20000014
 8002c88:	200009f8 	.word	0x200009f8
 8002c8c:	20000018 	.word	0x20000018
 8002c90:	200007f8 	.word	0x200007f8
 8002c94:	20000914 	.word	0x20000914
 8002c98:	20000c8c 	.word	0x20000c8c
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000d9c 	.word	0x20000d9c
 8002ca4:	20000db0 	.word	0x20000db0
 8002ca8:	200006ac 	.word	0x200006ac
 8002cac:	200007d0 	.word	0x200007d0
 8002cb0:	20000a14 	.word	0x20000a14
 8002cb4:	20000684 	.word	0x20000684
 8002cb8:	20000674 	.word	0x20000674
 8002cbc:	200006a4 	.word	0x200006a4
 8002cc0:	20000000 	.word	0x20000000
 8002cc4:	20000b8c 	.word	0x20000b8c
 8002cc8:	200007e8 	.word	0x200007e8
 8002ccc:	2000082c 	.word	0x2000082c
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	4b91      	ldr	r3, [pc, #580]	; (8002f18 <Constant_Current+0x1a88>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b91      	ldr	r3, [pc, #580]	; (8002f1c <Constant_Current+0x1a8c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f7fe f86d 	bl	8000dbc <__aeabi_fmul>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7fd ff60 	bl	8000bac <__addsf3>
 8002cec:	4603      	mov	r3, r0
 8002cee:	461c      	mov	r4, r3
 8002cf0:	4b8b      	ldr	r3, [pc, #556]	; (8002f20 <Constant_Current+0x1a90>)
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b8b      	ldr	r3, [pc, #556]	; (8002f24 <Constant_Current+0x1a94>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	f7fe f85e 	bl	8000dbc <__aeabi_fmul>
 8002d00:	4603      	mov	r3, r0
 8002d02:	4619      	mov	r1, r3
 8002d04:	4620      	mov	r0, r4
 8002d06:	f7fd ff51 	bl	8000bac <__addsf3>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461c      	mov	r4, r3
 8002d0e:	4b86      	ldr	r3, [pc, #536]	; (8002f28 <Constant_Current+0x1a98>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b86      	ldr	r3, [pc, #536]	; (8002f2c <Constant_Current+0x1a9c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4619      	mov	r1, r3
 8002d18:	4610      	mov	r0, r2
 8002d1a:	f7fe f84f 	bl	8000dbc <__aeabi_fmul>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4619      	mov	r1, r3
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7fd ff42 	bl	8000bac <__addsf3>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4b80      	ldr	r3, [pc, #512]	; (8002f30 <Constant_Current+0x1aa0>)
 8002d2e:	601a      	str	r2, [r3, #0]
	F=(r36*outNH)+(r37*outNH)+(r38*outNB)+(r39*outNM)+(r40*outNS)+(r41*outZ)+(r42*outPS);
 8002d30:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <Constant_Current+0x1aa4>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <Constant_Current+0x1aa8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4610      	mov	r0, r2
 8002d3c:	f7fe f83e 	bl	8000dbc <__aeabi_fmul>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461c      	mov	r4, r3
 8002d44:	4b7d      	ldr	r3, [pc, #500]	; (8002f3c <Constant_Current+0x1aac>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b7b      	ldr	r3, [pc, #492]	; (8002f38 <Constant_Current+0x1aa8>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f7fe f834 	bl	8000dbc <__aeabi_fmul>
 8002d54:	4603      	mov	r3, r0
 8002d56:	4619      	mov	r1, r3
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7fd ff27 	bl	8000bac <__addsf3>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	461c      	mov	r4, r3
 8002d62:	4b77      	ldr	r3, [pc, #476]	; (8002f40 <Constant_Current+0x1ab0>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b77      	ldr	r3, [pc, #476]	; (8002f44 <Constant_Current+0x1ab4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7fe f825 	bl	8000dbc <__aeabi_fmul>
 8002d72:	4603      	mov	r3, r0
 8002d74:	4619      	mov	r1, r3
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7fd ff18 	bl	8000bac <__addsf3>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461c      	mov	r4, r3
 8002d80:	4b71      	ldr	r3, [pc, #452]	; (8002f48 <Constant_Current+0x1ab8>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b71      	ldr	r3, [pc, #452]	; (8002f4c <Constant_Current+0x1abc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f7fe f816 	bl	8000dbc <__aeabi_fmul>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4619      	mov	r1, r3
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7fd ff09 	bl	8000bac <__addsf3>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461c      	mov	r4, r3
 8002d9e:	4b6c      	ldr	r3, [pc, #432]	; (8002f50 <Constant_Current+0x1ac0>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4b6c      	ldr	r3, [pc, #432]	; (8002f54 <Constant_Current+0x1ac4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4619      	mov	r1, r3
 8002da8:	4610      	mov	r0, r2
 8002daa:	f7fe f807 	bl	8000dbc <__aeabi_fmul>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4619      	mov	r1, r3
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7fd fefa 	bl	8000bac <__addsf3>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461c      	mov	r4, r3
 8002dbc:	4b66      	ldr	r3, [pc, #408]	; (8002f58 <Constant_Current+0x1ac8>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <Constant_Current+0x1a8c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f7fd fff8 	bl	8000dbc <__aeabi_fmul>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7fd feeb 	bl	8000bac <__addsf3>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	461c      	mov	r4, r3
 8002dda:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <Constant_Current+0x1acc>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	4b51      	ldr	r3, [pc, #324]	; (8002f24 <Constant_Current+0x1a94>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4619      	mov	r1, r3
 8002de4:	4610      	mov	r0, r2
 8002de6:	f7fd ffe9 	bl	8000dbc <__aeabi_fmul>
 8002dea:	4603      	mov	r3, r0
 8002dec:	4619      	mov	r1, r3
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7fd fedc 	bl	8000bac <__addsf3>
 8002df4:	4603      	mov	r3, r0
 8002df6:	461a      	mov	r2, r3
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <Constant_Current+0x1ad0>)
 8002dfa:	601a      	str	r2, [r3, #0]
	G=(r43*outNH)+(r44*outNH)+(r45*outNH)+(r46*outNB)+(r47*outNM)+(r48*outNS)+(r49*outZ);
 8002dfc:	4b59      	ldr	r3, [pc, #356]	; (8002f64 <Constant_Current+0x1ad4>)
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b4d      	ldr	r3, [pc, #308]	; (8002f38 <Constant_Current+0x1aa8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f7fd ffd8 	bl	8000dbc <__aeabi_fmul>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461c      	mov	r4, r3
 8002e10:	4b55      	ldr	r3, [pc, #340]	; (8002f68 <Constant_Current+0x1ad8>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <Constant_Current+0x1aa8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f7fd ffce 	bl	8000dbc <__aeabi_fmul>
 8002e20:	4603      	mov	r3, r0
 8002e22:	4619      	mov	r1, r3
 8002e24:	4620      	mov	r0, r4
 8002e26:	f7fd fec1 	bl	8000bac <__addsf3>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461c      	mov	r4, r3
 8002e2e:	4b4f      	ldr	r3, [pc, #316]	; (8002f6c <Constant_Current+0x1adc>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <Constant_Current+0x1aa8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4619      	mov	r1, r3
 8002e38:	4610      	mov	r0, r2
 8002e3a:	f7fd ffbf 	bl	8000dbc <__aeabi_fmul>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	4619      	mov	r1, r3
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7fd feb2 	bl	8000bac <__addsf3>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461c      	mov	r4, r3
 8002e4c:	4b48      	ldr	r3, [pc, #288]	; (8002f70 <Constant_Current+0x1ae0>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b3c      	ldr	r3, [pc, #240]	; (8002f44 <Constant_Current+0x1ab4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4619      	mov	r1, r3
 8002e56:	4610      	mov	r0, r2
 8002e58:	f7fd ffb0 	bl	8000dbc <__aeabi_fmul>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4619      	mov	r1, r3
 8002e60:	4620      	mov	r0, r4
 8002e62:	f7fd fea3 	bl	8000bac <__addsf3>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461c      	mov	r4, r3
 8002e6a:	4b42      	ldr	r3, [pc, #264]	; (8002f74 <Constant_Current+0x1ae4>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <Constant_Current+0x1abc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4619      	mov	r1, r3
 8002e74:	4610      	mov	r0, r2
 8002e76:	f7fd ffa1 	bl	8000dbc <__aeabi_fmul>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f7fd fe94 	bl	8000bac <__addsf3>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461c      	mov	r4, r3
 8002e88:	4b3b      	ldr	r3, [pc, #236]	; (8002f78 <Constant_Current+0x1ae8>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b31      	ldr	r3, [pc, #196]	; (8002f54 <Constant_Current+0x1ac4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f7fd ff92 	bl	8000dbc <__aeabi_fmul>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7fd fe85 	bl	8000bac <__addsf3>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461c      	mov	r4, r3
 8002ea6:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <Constant_Current+0x1aec>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <Constant_Current+0x1a8c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f7fd ff83 	bl	8000dbc <__aeabi_fmul>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f7fd fe76 	bl	8000bac <__addsf3>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <Constant_Current+0x1af0>)
 8002ec6:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <Constant_Current+0x1af4>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b2e      	ldr	r3, [pc, #184]	; (8002f88 <Constant_Current+0x1af8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f7fd fe6a 	bl	8000bac <__addsf3>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	461a      	mov	r2, r3
 8002edc:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <Constant_Current+0x1afc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f7fd fe62 	bl	8000bac <__addsf3>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b28      	ldr	r3, [pc, #160]	; (8002f90 <Constant_Current+0x1b00>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4610      	mov	r0, r2
 8002ef4:	f7fd fe5a 	bl	8000bac <__addsf3>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b25      	ldr	r3, [pc, #148]	; (8002f94 <Constant_Current+0x1b04>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f7fd fe52 	bl	8000bac <__addsf3>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <Constant_Current+0x1b08>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	4610      	mov	r0, r2
 8002f14:	e042      	b.n	8002f9c <Constant_Current+0x1b0c>
 8002f16:	bf00      	nop
 8002f18:	20000a20 	.word	0x20000a20
 8002f1c:	20000254 	.word	0x20000254
 8002f20:	20000b88 	.word	0x20000b88
 8002f24:	20000010 	.word	0x20000010
 8002f28:	20000c88 	.word	0x20000c88
 8002f2c:	20000014 	.word	0x20000014
 8002f30:	20000c74 	.word	0x20000c74
 8002f34:	200006cc 	.word	0x200006cc
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	2000090c 	.word	0x2000090c
 8002f40:	200009f4 	.word	0x200009f4
 8002f44:	20000004 	.word	0x20000004
 8002f48:	20000d78 	.word	0x20000d78
 8002f4c:	20000008 	.word	0x20000008
 8002f50:	20000a88 	.word	0x20000a88
 8002f54:	2000000c 	.word	0x2000000c
 8002f58:	200006b8 	.word	0x200006b8
 8002f5c:	200006c0 	.word	0x200006c0
 8002f60:	20000da4 	.word	0x20000da4
 8002f64:	20000d80 	.word	0x20000d80
 8002f68:	200008fc 	.word	0x200008fc
 8002f6c:	20000824 	.word	0x20000824
 8002f70:	200006fc 	.word	0x200006fc
 8002f74:	20000d70 	.word	0x20000d70
 8002f78:	20000a94 	.word	0x20000a94
 8002f7c:	20000a1c 	.word	0x20000a1c
 8002f80:	20000a04 	.word	0x20000a04
 8002f84:	20000db8 	.word	0x20000db8
 8002f88:	20000ba4 	.word	0x20000ba4
 8002f8c:	200006c8 	.word	0x200006c8
 8002f90:	20000804 	.word	0x20000804
 8002f94:	20000da8 	.word	0x20000da8
 8002f98:	200007f0 	.word	0x200007f0
 8002f9c:	f7fd fe06 	bl	8000bac <__addsf3>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b90      	ldr	r3, [pc, #576]	; (80031e8 <Constant_Current+0x1d58>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f7fd fdfe 	bl	8000bac <__addsf3>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4b8d      	ldr	r3, [pc, #564]	; (80031ec <Constant_Current+0x1d5c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4619      	mov	r1, r3
 8002fba:	4610      	mov	r0, r2
 8002fbc:	f7fd fdf6 	bl	8000bac <__addsf3>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b8a      	ldr	r3, [pc, #552]	; (80031f0 <Constant_Current+0x1d60>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4610      	mov	r0, r2
 8002fcc:	f7fd fdee 	bl	8000bac <__addsf3>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <Constant_Current+0x1d64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fd fde6 	bl	8000bac <__addsf3>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	4b84      	ldr	r3, [pc, #528]	; (80031f8 <Constant_Current+0x1d68>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f7fd fdde 	bl	8000bac <__addsf3>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	4b81      	ldr	r3, [pc, #516]	; (80031fc <Constant_Current+0x1d6c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	f7fd fdd6 	bl	8000bac <__addsf3>
 8003000:	4603      	mov	r3, r0
 8003002:	461a      	mov	r2, r3
 8003004:	4b7e      	ldr	r3, [pc, #504]	; (8003200 <Constant_Current+0x1d70>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	4610      	mov	r0, r2
 800300c:	f7fd fdce 	bl	8000bac <__addsf3>
 8003010:	4603      	mov	r3, r0
 8003012:	461a      	mov	r2, r3
 8003014:	4b7b      	ldr	r3, [pc, #492]	; (8003204 <Constant_Current+0x1d74>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f7fd fdc6 	bl	8000bac <__addsf3>
 8003020:	4603      	mov	r3, r0
 8003022:	461a      	mov	r2, r3
 8003024:	4b78      	ldr	r3, [pc, #480]	; (8003208 <Constant_Current+0x1d78>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	4610      	mov	r0, r2
 800302c:	f7fd fdbe 	bl	8000bac <__addsf3>
 8003030:	4603      	mov	r3, r0
 8003032:	461a      	mov	r2, r3
 8003034:	4b75      	ldr	r3, [pc, #468]	; (800320c <Constant_Current+0x1d7c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	4610      	mov	r0, r2
 800303c:	f7fd fdb6 	bl	8000bac <__addsf3>
 8003040:	4603      	mov	r3, r0
 8003042:	461a      	mov	r2, r3
 8003044:	4b72      	ldr	r3, [pc, #456]	; (8003210 <Constant_Current+0x1d80>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	4610      	mov	r0, r2
 800304c:	f7fd fdae 	bl	8000bac <__addsf3>
 8003050:	4603      	mov	r3, r0
 8003052:	461a      	mov	r2, r3
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <Constant_Current+0x1d84>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f7fd fda6 	bl	8000bac <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	4b6c      	ldr	r3, [pc, #432]	; (8003218 <Constant_Current+0x1d88>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f7fd fd9e 	bl	8000bac <__addsf3>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	4b69      	ldr	r3, [pc, #420]	; (800321c <Constant_Current+0x1d8c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7fd fd96 	bl	8000bac <__addsf3>
 8003080:	4603      	mov	r3, r0
 8003082:	461a      	mov	r2, r3
 8003084:	4b66      	ldr	r3, [pc, #408]	; (8003220 <Constant_Current+0x1d90>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f7fd fd8e 	bl	8000bac <__addsf3>
 8003090:	4603      	mov	r3, r0
 8003092:	461a      	mov	r2, r3
 8003094:	4b63      	ldr	r3, [pc, #396]	; (8003224 <Constant_Current+0x1d94>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4619      	mov	r1, r3
 800309a:	4610      	mov	r0, r2
 800309c:	f7fd fd86 	bl	8000bac <__addsf3>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b60      	ldr	r3, [pc, #384]	; (8003228 <Constant_Current+0x1d98>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4619      	mov	r1, r3
 80030aa:	4610      	mov	r0, r2
 80030ac:	f7fd fd7e 	bl	8000bac <__addsf3>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <Constant_Current+0x1d9c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f7fd fd76 	bl	8000bac <__addsf3>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <Constant_Current+0x1da0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4619      	mov	r1, r3
 80030ca:	4610      	mov	r0, r2
 80030cc:	f7fd fd6e 	bl	8000bac <__addsf3>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	4b57      	ldr	r3, [pc, #348]	; (8003234 <Constant_Current+0x1da4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f7fd fd66 	bl	8000bac <__addsf3>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b54      	ldr	r3, [pc, #336]	; (8003238 <Constant_Current+0x1da8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7fd fd5e 	bl	8000bac <__addsf3>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b51      	ldr	r3, [pc, #324]	; (800323c <Constant_Current+0x1dac>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f7fd fd56 	bl	8000bac <__addsf3>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	4b4e      	ldr	r3, [pc, #312]	; (8003240 <Constant_Current+0x1db0>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f7fd fd4e 	bl	8000bac <__addsf3>
 8003110:	4603      	mov	r3, r0
 8003112:	461a      	mov	r2, r3
 8003114:	4b4b      	ldr	r3, [pc, #300]	; (8003244 <Constant_Current+0x1db4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	4610      	mov	r0, r2
 800311c:	f7fd fd46 	bl	8000bac <__addsf3>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <Constant_Current+0x1db8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4619      	mov	r1, r3
 800312a:	4610      	mov	r0, r2
 800312c:	f7fd fd3e 	bl	8000bac <__addsf3>
 8003130:	4603      	mov	r3, r0
 8003132:	461a      	mov	r2, r3
 8003134:	4b45      	ldr	r3, [pc, #276]	; (800324c <Constant_Current+0x1dbc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4619      	mov	r1, r3
 800313a:	4610      	mov	r0, r2
 800313c:	f7fd fd36 	bl	8000bac <__addsf3>
 8003140:	4603      	mov	r3, r0
 8003142:	461a      	mov	r2, r3
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <Constant_Current+0x1dc0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fd fd2e 	bl	8000bac <__addsf3>
 8003150:	4603      	mov	r3, r0
 8003152:	461a      	mov	r2, r3
 8003154:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <Constant_Current+0x1dc4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
 800315a:	4610      	mov	r0, r2
 800315c:	f7fd fd26 	bl	8000bac <__addsf3>
 8003160:	4603      	mov	r3, r0
 8003162:	461a      	mov	r2, r3
 8003164:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <Constant_Current+0x1dc8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f7fd fd1e 	bl	8000bac <__addsf3>
 8003170:	4603      	mov	r3, r0
 8003172:	461a      	mov	r2, r3
 8003174:	4b39      	ldr	r3, [pc, #228]	; (800325c <Constant_Current+0x1dcc>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f7fd fd16 	bl	8000bac <__addsf3>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <Constant_Current+0x1dd0>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4619      	mov	r1, r3
 800318a:	4610      	mov	r0, r2
 800318c:	f7fd fd0e 	bl	8000bac <__addsf3>
 8003190:	4603      	mov	r3, r0
 8003192:	461a      	mov	r2, r3
 8003194:	4b33      	ldr	r3, [pc, #204]	; (8003264 <Constant_Current+0x1dd4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4619      	mov	r1, r3
 800319a:	4610      	mov	r0, r2
 800319c:	f7fd fd06 	bl	8000bac <__addsf3>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <Constant_Current+0x1dd8>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f7fd fcfe 	bl	8000bac <__addsf3>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b2d      	ldr	r3, [pc, #180]	; (800326c <Constant_Current+0x1ddc>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7fd fcf6 	bl	8000bac <__addsf3>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <Constant_Current+0x1de0>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f7fd fcee 	bl	8000bac <__addsf3>
 80031d0:	4603      	mov	r3, r0
 80031d2:	461a      	mov	r2, r3
 80031d4:	4b27      	ldr	r3, [pc, #156]	; (8003274 <Constant_Current+0x1de4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f7fd fce6 	bl	8000bac <__addsf3>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	e048      	b.n	8003278 <Constant_Current+0x1de8>
 80031e6:	bf00      	nop
 80031e8:	20000a90 	.word	0x20000a90
 80031ec:	20000a00 	.word	0x20000a00
 80031f0:	200006f8 	.word	0x200006f8
 80031f4:	200009e4 	.word	0x200009e4
 80031f8:	20000ba0 	.word	0x20000ba0
 80031fc:	20000d88 	.word	0x20000d88
 8003200:	20000dbc 	.word	0x20000dbc
 8003204:	20000678 	.word	0x20000678
 8003208:	20000d8c 	.word	0x20000d8c
 800320c:	20000aa4 	.word	0x20000aa4
 8003210:	200007e0 	.word	0x200007e0
 8003214:	20000a30 	.word	0x20000a30
 8003218:	20000d84 	.word	0x20000d84
 800321c:	200009f8 	.word	0x200009f8
 8003220:	200007f8 	.word	0x200007f8
 8003224:	20000c8c 	.word	0x20000c8c
 8003228:	20000d9c 	.word	0x20000d9c
 800322c:	20000db0 	.word	0x20000db0
 8003230:	200006ac 	.word	0x200006ac
 8003234:	200007d0 	.word	0x200007d0
 8003238:	20000a14 	.word	0x20000a14
 800323c:	20000684 	.word	0x20000684
 8003240:	200006a4 	.word	0x200006a4
 8003244:	20000b8c 	.word	0x20000b8c
 8003248:	200007e8 	.word	0x200007e8
 800324c:	2000082c 	.word	0x2000082c
 8003250:	20000a20 	.word	0x20000a20
 8003254:	20000b88 	.word	0x20000b88
 8003258:	20000c88 	.word	0x20000c88
 800325c:	200006cc 	.word	0x200006cc
 8003260:	2000090c 	.word	0x2000090c
 8003264:	200009f4 	.word	0x200009f4
 8003268:	20000d78 	.word	0x20000d78
 800326c:	20000a88 	.word	0x20000a88
 8003270:	200006b8 	.word	0x200006b8
 8003274:	200006c0 	.word	0x200006c0
 8003278:	4b78      	ldr	r3, [pc, #480]	; (800345c <Constant_Current+0x1fcc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4619      	mov	r1, r3
 800327e:	4610      	mov	r0, r2
 8003280:	f7fd fc94 	bl	8000bac <__addsf3>
 8003284:	4603      	mov	r3, r0
 8003286:	461a      	mov	r2, r3
 8003288:	4b75      	ldr	r3, [pc, #468]	; (8003460 <Constant_Current+0x1fd0>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	4610      	mov	r0, r2
 8003290:	f7fd fc8c 	bl	8000bac <__addsf3>
 8003294:	4603      	mov	r3, r0
 8003296:	461a      	mov	r2, r3
 8003298:	4b72      	ldr	r3, [pc, #456]	; (8003464 <Constant_Current+0x1fd4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f7fd fc84 	bl	8000bac <__addsf3>
 80032a4:	4603      	mov	r3, r0
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b6f      	ldr	r3, [pc, #444]	; (8003468 <Constant_Current+0x1fd8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4619      	mov	r1, r3
 80032ae:	4610      	mov	r0, r2
 80032b0:	f7fd fc7c 	bl	8000bac <__addsf3>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b6c      	ldr	r3, [pc, #432]	; (800346c <Constant_Current+0x1fdc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7fd fc74 	bl	8000bac <__addsf3>
 80032c4:	4603      	mov	r3, r0
 80032c6:	461a      	mov	r2, r3
 80032c8:	4b69      	ldr	r3, [pc, #420]	; (8003470 <Constant_Current+0x1fe0>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	4610      	mov	r0, r2
 80032d0:	f7fd fc6c 	bl	8000bac <__addsf3>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b66      	ldr	r3, [pc, #408]	; (8003474 <Constant_Current+0x1fe4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4619      	mov	r1, r3
 80032de:	4610      	mov	r0, r2
 80032e0:	f7fd fc64 	bl	8000bac <__addsf3>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b63      	ldr	r3, [pc, #396]	; (8003478 <Constant_Current+0x1fe8>)
 80032ea:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 80032ec:	4b63      	ldr	r3, [pc, #396]	; (800347c <Constant_Current+0x1fec>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b63      	ldr	r3, [pc, #396]	; (8003480 <Constant_Current+0x1ff0>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f7fd fc58 	bl	8000bac <__addsf3>
 80032fc:	4603      	mov	r3, r0
 80032fe:	461a      	mov	r2, r3
 8003300:	4b60      	ldr	r3, [pc, #384]	; (8003484 <Constant_Current+0x1ff4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	4610      	mov	r0, r2
 8003308:	f7fd fc50 	bl	8000bac <__addsf3>
 800330c:	4603      	mov	r3, r0
 800330e:	461a      	mov	r2, r3
 8003310:	4b5d      	ldr	r3, [pc, #372]	; (8003488 <Constant_Current+0x1ff8>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	4610      	mov	r0, r2
 8003318:	f7fd fc48 	bl	8000bac <__addsf3>
 800331c:	4603      	mov	r3, r0
 800331e:	461a      	mov	r2, r3
 8003320:	4b5a      	ldr	r3, [pc, #360]	; (800348c <Constant_Current+0x1ffc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f7fd fc40 	bl	8000bac <__addsf3>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b57      	ldr	r3, [pc, #348]	; (8003490 <Constant_Current+0x2000>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f7fd fc38 	bl	8000bac <__addsf3>
 800333c:	4603      	mov	r3, r0
 800333e:	461a      	mov	r2, r3
 8003340:	4b54      	ldr	r3, [pc, #336]	; (8003494 <Constant_Current+0x2004>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f7fd fc30 	bl	8000bac <__addsf3>
 800334c:	4603      	mov	r3, r0
 800334e:	461a      	mov	r2, r3
 8003350:	4b49      	ldr	r3, [pc, #292]	; (8003478 <Constant_Current+0x1fe8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7fd fde4 	bl	8000f24 <__aeabi_fdiv>
 800335c:	4603      	mov	r3, r0
 800335e:	461a      	mov	r2, r3
 8003360:	4b4d      	ldr	r3, [pc, #308]	; (8003498 <Constant_Current+0x2008>)
 8003362:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 8003364:	4b4d      	ldr	r3, [pc, #308]	; (800349c <Constant_Current+0x200c>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <Constant_Current+0x2008>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7fd fc1c 	bl	8000bac <__addsf3>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	4b48      	ldr	r3, [pc, #288]	; (800349c <Constant_Current+0x200c>)
 800337a:	601a      	str	r2, [r3, #0]

	if(dc>=90)
 800337c:	4b47      	ldr	r3, [pc, #284]	; (800349c <Constant_Current+0x200c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4947      	ldr	r1, [pc, #284]	; (80034a0 <Constant_Current+0x2010>)
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd fecc 	bl	8001120 <__aeabi_fcmpge>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <Constant_Current+0x1f04>
		dc=90;
 800338e:	4b43      	ldr	r3, [pc, #268]	; (800349c <Constant_Current+0x200c>)
 8003390:	4a43      	ldr	r2, [pc, #268]	; (80034a0 <Constant_Current+0x2010>)
 8003392:	601a      	str	r2, [r3, #0]
	if(dc<=0)
 8003394:	4b41      	ldr	r3, [pc, #260]	; (800349c <Constant_Current+0x200c>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f04f 0100 	mov.w	r1, #0
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd feb5 	bl	800110c <__aeabi_fcmple>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <Constant_Current+0x1f20>
		dc=0;
 80033a8:	4b3c      	ldr	r3, [pc, #240]	; (800349c <Constant_Current+0x200c>)
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 80033b0:	4b3a      	ldr	r3, [pc, #232]	; (800349c <Constant_Current+0x200c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	493b      	ldr	r1, [pc, #236]	; (80034a4 <Constant_Current+0x2014>)
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7fd fdb4 	bl	8000f24 <__aeabi_fdiv>
 80033bc:	4603      	mov	r3, r0
 80033be:	461a      	mov	r2, r3
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <Constant_Current+0x2018>)
 80033c2:	601a      	str	r2, [r3, #0]
//			  	while(p>0)
//			  		p--;
//			  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//		}

	if(	flag_trip_overvoltage == 1		||
 80033c4:	4b39      	ldr	r3, [pc, #228]	; (80034ac <Constant_Current+0x201c>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d02b      	beq.n	8003424 <Constant_Current+0x1f94>
		flag_trip_overtemperature == 1	||
 80033cc:	4b38      	ldr	r3, [pc, #224]	; (80034b0 <Constant_Current+0x2020>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d027      	beq.n	8003424 <Constant_Current+0x1f94>
		flag_trip_undertemperature == 1	||
 80033d4:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <Constant_Current+0x2024>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d023      	beq.n	8003424 <Constant_Current+0x1f94>
		flag_trip_overcurrentcharge == 1||
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <Constant_Current+0x2028>)
 80033de:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d01f      	beq.n	8003424 <Constant_Current+0x1f94>
		flag_trip_SOCOverCharge == 1	||
 80033e4:	4b35      	ldr	r3, [pc, #212]	; (80034bc <Constant_Current+0x202c>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d01b      	beq.n	8003424 <Constant_Current+0x1f94>
		flag_trip_shortcircuit == 1		||
 80033ec:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <Constant_Current+0x2030>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d017      	beq.n	8003424 <Constant_Current+0x1f94>
		flag_trip_systemfailure == 1	||
 80033f4:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <Constant_Current+0x2034>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d013      	beq.n	8003424 <Constant_Current+0x1f94>
		Flag_ChargerShortCircuit == 1	||
 80033fc:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <Constant_Current+0x2038>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8003400:	2b01      	cmp	r3, #1
 8003402:	d00f      	beq.n	8003424 <Constant_Current+0x1f94>
		Flag_ChargerOverCurrent == 1	||
 8003404:	4b31      	ldr	r3, [pc, #196]	; (80034cc <Constant_Current+0x203c>)
 8003406:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 8003408:	2b01      	cmp	r3, #1
 800340a:	d00b      	beq.n	8003424 <Constant_Current+0x1f94>
		Flag_ChargerOverTemperature == 1||
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <Constant_Current+0x2040>)
 800340e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8003410:	2b01      	cmp	r3, #1
 8003412:	d007      	beq.n	8003424 <Constant_Current+0x1f94>
		Flag_ChargerOverVoltage == 1	||
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <Constant_Current+0x2044>)
 8003416:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 8003418:	2b01      	cmp	r3, #1
 800341a:	d003      	beq.n	8003424 <Constant_Current+0x1f94>
		Flag_ChargerLostCommunication==1)
 800341c:	4b2e      	ldr	r3, [pc, #184]	; (80034d8 <Constant_Current+0x2048>)
 800341e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <Constant_Current+0x1fa2>
		{
			duty=0;
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <Constant_Current+0x2018>)
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 800342c:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <Constant_Current+0x204c>)
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
		}

	TIM1->CCR1=duty*TIM1->ARR;
 8003432:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <Constant_Current+0x2050>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fc68 	bl	8000d0c <__aeabi_ui2f>
 800343c:	4602      	mov	r2, r0
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <Constant_Current+0x2018>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4619      	mov	r1, r3
 8003444:	4610      	mov	r0, r2
 8003446:	f7fd fcb9 	bl	8000dbc <__aeabi_fmul>
 800344a:	4603      	mov	r3, r0
 800344c:	4c24      	ldr	r4, [pc, #144]	; (80034e0 <Constant_Current+0x2050>)
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd fe7a 	bl	8001148 <__aeabi_f2uiz>
 8003454:	4603      	mov	r3, r0
 8003456:	6363      	str	r3, [r4, #52]	; 0x34

}
 8003458:	bf00      	nop
 800345a:	bd98      	pop	{r3, r4, r7, pc}
 800345c:	20000d80 	.word	0x20000d80
 8003460:	200008fc 	.word	0x200008fc
 8003464:	20000824 	.word	0x20000824
 8003468:	200006fc 	.word	0x200006fc
 800346c:	20000d70 	.word	0x20000d70
 8003470:	20000a94 	.word	0x20000a94
 8003474:	20000a1c 	.word	0x20000a1c
 8003478:	20000a84 	.word	0x20000a84
 800347c:	200006f0 	.word	0x200006f0
 8003480:	200008f8 	.word	0x200008f8
 8003484:	20000914 	.word	0x20000914
 8003488:	20000674 	.word	0x20000674
 800348c:	20000c74 	.word	0x20000c74
 8003490:	20000da4 	.word	0x20000da4
 8003494:	20000a04 	.word	0x20000a04
 8003498:	20000c70 	.word	0x20000c70
 800349c:	200006b4 	.word	0x200006b4
 80034a0:	42b40000 	.word	0x42b40000
 80034a4:	42c80000 	.word	0x42c80000
 80034a8:	20000d5c 	.word	0x20000d5c
 80034ac:	20000d90 	.word	0x20000d90
 80034b0:	200007cc 	.word	0x200007cc
 80034b4:	20000908 	.word	0x20000908
 80034b8:	20000a98 	.word	0x20000a98
 80034bc:	20000693 	.word	0x20000693
 80034c0:	200006a8 	.word	0x200006a8
 80034c4:	200006c4 	.word	0x200006c4
 80034c8:	20000808 	.word	0x20000808
 80034cc:	200007ec 	.word	0x200007ec
 80034d0:	200006e1 	.word	0x200006e1
 80034d4:	2000080c 	.word	0x2000080c
 80034d8:	20000a08 	.word	0x20000a08
 80034dc:	20000700 	.word	0x20000700
 80034e0:	40010000 	.word	0x40010000

080034e4 <Constant_Voltage>:
float oNH=-0.05, oNB=-0.025, oNM=-0.01, oNS=-0.0075, oZ=0, oPS=0.0075, oPM=0.01, oPB=0.025, oPH=0.05;
float SetPoint_CV = 30;
extern float Voltage_Charger;

void Constant_Voltage(void)
{
 80034e4:	b598      	push	{r3, r4, r7, lr}
 80034e6:	af00      	add	r7, sp, #0

	sp=SetPoint_CV;
 80034e8:	4b71      	ldr	r3, [pc, #452]	; (80036b0 <Constant_Voltage+0x1cc>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a71      	ldr	r2, [pc, #452]	; (80036b4 <Constant_Voltage+0x1d0>)
 80034ee:	6013      	str	r3, [r2, #0]
	pv=Voltage_Charger;
 80034f0:	4b71      	ldr	r3, [pc, #452]	; (80036b8 <Constant_Voltage+0x1d4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a71      	ldr	r2, [pc, #452]	; (80036bc <Constant_Voltage+0x1d8>)
 80034f6:	6013      	str	r3, [r2, #0]
	e=sp-pv;
 80034f8:	4b6e      	ldr	r3, [pc, #440]	; (80036b4 <Constant_Voltage+0x1d0>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b6f      	ldr	r3, [pc, #444]	; (80036bc <Constant_Voltage+0x1d8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7fd fb50 	bl	8000ba8 <__aeabi_fsub>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <Constant_Voltage+0x1dc>)
 800350e:	601a      	str	r2, [r3, #0]
	d=e-esblm;
 8003510:	4b6b      	ldr	r3, [pc, #428]	; (80036c0 <Constant_Voltage+0x1dc>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b6b      	ldr	r3, [pc, #428]	; (80036c4 <Constant_Voltage+0x1e0>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f7fd fb44 	bl	8000ba8 <__aeabi_fsub>
 8003520:	4603      	mov	r3, r0
 8003522:	461a      	mov	r2, r3
 8003524:	4b68      	ldr	r3, [pc, #416]	; (80036c8 <Constant_Voltage+0x1e4>)
 8003526:	601a      	str	r2, [r3, #0]
	esblm=e;
 8003528:	4b65      	ldr	r3, [pc, #404]	; (80036c0 <Constant_Voltage+0x1dc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a65      	ldr	r2, [pc, #404]	; (80036c4 <Constant_Voltage+0x1e0>)
 800352e:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-75)
 8003530:	4b63      	ldr	r3, [pc, #396]	; (80036c0 <Constant_Voltage+0x1dc>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4965      	ldr	r1, [pc, #404]	; (80036cc <Constant_Voltage+0x1e8>)
 8003536:	4618      	mov	r0, r3
 8003538:	f7fd fde8 	bl	800110c <__aeabi_fcmple>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <Constant_Voltage+0x96>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 8003542:	4b63      	ldr	r3, [pc, #396]	; (80036d0 <Constant_Voltage+0x1ec>)
 8003544:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	4b62      	ldr	r3, [pc, #392]	; (80036d4 <Constant_Voltage+0x1f0>)
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	4b60      	ldr	r3, [pc, #384]	; (80036d4 <Constant_Voltage+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a60      	ldr	r2, [pc, #384]	; (80036d8 <Constant_Voltage+0x1f4>)
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b5f      	ldr	r3, [pc, #380]	; (80036d8 <Constant_Voltage+0x1f4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a5f      	ldr	r2, [pc, #380]	; (80036dc <Constant_Voltage+0x1f8>)
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b5e      	ldr	r3, [pc, #376]	; (80036dc <Constant_Voltage+0x1f8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5e      	ldr	r2, [pc, #376]	; (80036e0 <Constant_Voltage+0x1fc>)
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	4b5d      	ldr	r3, [pc, #372]	; (80036e0 <Constant_Voltage+0x1fc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a5d      	ldr	r2, [pc, #372]	; (80036e4 <Constant_Voltage+0x200>)
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b5c      	ldr	r3, [pc, #368]	; (80036e4 <Constant_Voltage+0x200>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a5c      	ldr	r2, [pc, #368]	; (80036e8 <Constant_Voltage+0x204>)
 8003578:	6013      	str	r3, [r2, #0]

	if(e>=-75&&e<=-50)
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <Constant_Voltage+0x1dc>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4953      	ldr	r1, [pc, #332]	; (80036cc <Constant_Voltage+0x1e8>)
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fdcd 	bl	8001120 <__aeabi_fcmpge>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d043      	beq.n	8003614 <Constant_Voltage+0x130>
 800358c:	4b4c      	ldr	r3, [pc, #304]	; (80036c0 <Constant_Voltage+0x1dc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4956      	ldr	r1, [pc, #344]	; (80036ec <Constant_Voltage+0x208>)
 8003592:	4618      	mov	r0, r3
 8003594:	f7fd fdba 	bl	800110c <__aeabi_fcmple>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03a      	beq.n	8003614 <Constant_Voltage+0x130>
	{ eNB=(-(e+75)/25)+1;
 800359e:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <Constant_Voltage+0x1dc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4953      	ldr	r1, [pc, #332]	; (80036f0 <Constant_Voltage+0x20c>)
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fb01 	bl	8000bac <__addsf3>
 80035aa:	4603      	mov	r3, r0
 80035ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80035b0:	4950      	ldr	r1, [pc, #320]	; (80036f4 <Constant_Voltage+0x210>)
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fcb6 	bl	8000f24 <__aeabi_fdiv>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd faf4 	bl	8000bac <__addsf3>
 80035c4:	4603      	mov	r3, r0
 80035c6:	461a      	mov	r2, r3
 80035c8:	4b41      	ldr	r3, [pc, #260]	; (80036d0 <Constant_Voltage+0x1ec>)
 80035ca:	601a      	str	r2, [r3, #0]
	   eNM=(e+75)/25;
 80035cc:	4b3c      	ldr	r3, [pc, #240]	; (80036c0 <Constant_Voltage+0x1dc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4947      	ldr	r1, [pc, #284]	; (80036f0 <Constant_Voltage+0x20c>)
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd faea 	bl	8000bac <__addsf3>
 80035d8:	4603      	mov	r3, r0
 80035da:	4946      	ldr	r1, [pc, #280]	; (80036f4 <Constant_Voltage+0x210>)
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fca1 	bl	8000f24 <__aeabi_fdiv>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b40      	ldr	r3, [pc, #256]	; (80036e8 <Constant_Voltage+0x204>)
 80035e8:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 80035ea:	4b3a      	ldr	r3, [pc, #232]	; (80036d4 <Constant_Voltage+0x1f0>)
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	4b38      	ldr	r3, [pc, #224]	; (80036d4 <Constant_Voltage+0x1f0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a38      	ldr	r2, [pc, #224]	; (80036d8 <Constant_Voltage+0x1f4>)
 80035f8:	6013      	str	r3, [r2, #0]
 80035fa:	4b37      	ldr	r3, [pc, #220]	; (80036d8 <Constant_Voltage+0x1f4>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a37      	ldr	r2, [pc, #220]	; (80036dc <Constant_Voltage+0x1f8>)
 8003600:	6013      	str	r3, [r2, #0]
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <Constant_Voltage+0x1f8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a36      	ldr	r2, [pc, #216]	; (80036e0 <Constant_Voltage+0x1fc>)
 8003608:	6013      	str	r3, [r2, #0]
 800360a:	4b35      	ldr	r3, [pc, #212]	; (80036e0 <Constant_Voltage+0x1fc>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a35      	ldr	r2, [pc, #212]	; (80036e4 <Constant_Voltage+0x200>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e1de      	b.n	80039d2 <Constant_Voltage+0x4ee>
	}

	else if(e>=-50&&e<=-25)
 8003614:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <Constant_Voltage+0x1dc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4934      	ldr	r1, [pc, #208]	; (80036ec <Constant_Voltage+0x208>)
 800361a:	4618      	mov	r0, r3
 800361c:	f7fd fd80 	bl	8001120 <__aeabi_fcmpge>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d06c      	beq.n	8003700 <Constant_Voltage+0x21c>
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <Constant_Voltage+0x1dc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4933      	ldr	r1, [pc, #204]	; (80036f8 <Constant_Voltage+0x214>)
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fd6d 	bl	800110c <__aeabi_fcmple>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d063      	beq.n	8003700 <Constant_Voltage+0x21c>
	{ eNM=(-(e+50)/25)+1;
 8003638:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <Constant_Voltage+0x1dc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	492f      	ldr	r1, [pc, #188]	; (80036fc <Constant_Voltage+0x218>)
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fab4 	bl	8000bac <__addsf3>
 8003644:	4603      	mov	r3, r0
 8003646:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800364a:	492a      	ldr	r1, [pc, #168]	; (80036f4 <Constant_Voltage+0x210>)
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fc69 	bl	8000f24 <__aeabi_fdiv>
 8003652:	4603      	mov	r3, r0
 8003654:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003658:	4618      	mov	r0, r3
 800365a:	f7fd faa7 	bl	8000bac <__addsf3>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <Constant_Voltage+0x204>)
 8003664:	601a      	str	r2, [r3, #0]
	   eNS=(e+50)/25;
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <Constant_Voltage+0x1dc>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4924      	ldr	r1, [pc, #144]	; (80036fc <Constant_Voltage+0x218>)
 800366c:	4618      	mov	r0, r3
 800366e:	f7fd fa9d 	bl	8000bac <__addsf3>
 8003672:	4603      	mov	r3, r0
 8003674:	491f      	ldr	r1, [pc, #124]	; (80036f4 <Constant_Voltage+0x210>)
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fc54 	bl	8000f24 <__aeabi_fdiv>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <Constant_Voltage+0x200>)
 8003682:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 8003684:	4b13      	ldr	r3, [pc, #76]	; (80036d4 <Constant_Voltage+0x1f0>)
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <Constant_Voltage+0x1f0>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a11      	ldr	r2, [pc, #68]	; (80036d8 <Constant_Voltage+0x1f4>)
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <Constant_Voltage+0x1f4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a10      	ldr	r2, [pc, #64]	; (80036dc <Constant_Voltage+0x1f8>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <Constant_Voltage+0x1f8>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0f      	ldr	r2, [pc, #60]	; (80036e0 <Constant_Voltage+0x1fc>)
 80036a2:	6013      	str	r3, [r2, #0]
 80036a4:	4b0e      	ldr	r3, [pc, #56]	; (80036e0 <Constant_Voltage+0x1fc>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <Constant_Voltage+0x1ec>)
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	e191      	b.n	80039d2 <Constant_Voltage+0x4ee>
 80036ae:	bf00      	nop
 80036b0:	20000044 	.word	0x20000044
 80036b4:	20000b9c 	.word	0x20000b9c
 80036b8:	20000b90 	.word	0x20000b90
 80036bc:	20000c84 	.word	0x20000c84
 80036c0:	20000d60 	.word	0x20000d60
 80036c4:	20000d64 	.word	0x20000d64
 80036c8:	20000aa0 	.word	0x20000aa0
 80036cc:	c2960000 	.word	0xc2960000
 80036d0:	20000d68 	.word	0x20000d68
 80036d4:	200009f0 	.word	0x200009f0
 80036d8:	20000aa8 	.word	0x20000aa8
 80036dc:	20000a2c 	.word	0x20000a2c
 80036e0:	20000db4 	.word	0x20000db4
 80036e4:	200006b0 	.word	0x200006b0
 80036e8:	20000da0 	.word	0x20000da0
 80036ec:	c2480000 	.word	0xc2480000
 80036f0:	42960000 	.word	0x42960000
 80036f4:	41c80000 	.word	0x41c80000
 80036f8:	c1c80000 	.word	0xc1c80000
 80036fc:	42480000 	.word	0x42480000
	}

	else if(e>=-25&&e<=0)
 8003700:	4b95      	ldr	r3, [pc, #596]	; (8003958 <Constant_Voltage+0x474>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4995      	ldr	r1, [pc, #596]	; (800395c <Constant_Voltage+0x478>)
 8003706:	4618      	mov	r0, r3
 8003708:	f7fd fd0a 	bl	8001120 <__aeabi_fcmpge>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d045      	beq.n	800379e <Constant_Voltage+0x2ba>
 8003712:	4b91      	ldr	r3, [pc, #580]	; (8003958 <Constant_Voltage+0x474>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f7fd fcf6 	bl	800110c <__aeabi_fcmple>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d03b      	beq.n	800379e <Constant_Voltage+0x2ba>
	{ eNS=(-(e+25)/25)+1;
 8003726:	4b8c      	ldr	r3, [pc, #560]	; (8003958 <Constant_Voltage+0x474>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	498d      	ldr	r1, [pc, #564]	; (8003960 <Constant_Voltage+0x47c>)
 800372c:	4618      	mov	r0, r3
 800372e:	f7fd fa3d 	bl	8000bac <__addsf3>
 8003732:	4603      	mov	r3, r0
 8003734:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003738:	4989      	ldr	r1, [pc, #548]	; (8003960 <Constant_Voltage+0x47c>)
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fbf2 	bl	8000f24 <__aeabi_fdiv>
 8003740:	4603      	mov	r3, r0
 8003742:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fa30 	bl	8000bac <__addsf3>
 800374c:	4603      	mov	r3, r0
 800374e:	461a      	mov	r2, r3
 8003750:	4b84      	ldr	r3, [pc, #528]	; (8003964 <Constant_Voltage+0x480>)
 8003752:	601a      	str	r2, [r3, #0]
	   eZ=(e/25)+1;
 8003754:	4b80      	ldr	r3, [pc, #512]	; (8003958 <Constant_Voltage+0x474>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4981      	ldr	r1, [pc, #516]	; (8003960 <Constant_Voltage+0x47c>)
 800375a:	4618      	mov	r0, r3
 800375c:	f7fd fbe2 	bl	8000f24 <__aeabi_fdiv>
 8003760:	4603      	mov	r3, r0
 8003762:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fa20 	bl	8000bac <__addsf3>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	4b7d      	ldr	r3, [pc, #500]	; (8003968 <Constant_Voltage+0x484>)
 8003772:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 8003774:	4b7d      	ldr	r3, [pc, #500]	; (800396c <Constant_Voltage+0x488>)
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	4b7b      	ldr	r3, [pc, #492]	; (800396c <Constant_Voltage+0x488>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a7b      	ldr	r2, [pc, #492]	; (8003970 <Constant_Voltage+0x48c>)
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b7a      	ldr	r3, [pc, #488]	; (8003970 <Constant_Voltage+0x48c>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7a      	ldr	r2, [pc, #488]	; (8003974 <Constant_Voltage+0x490>)
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b79      	ldr	r3, [pc, #484]	; (8003974 <Constant_Voltage+0x490>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a79      	ldr	r2, [pc, #484]	; (8003978 <Constant_Voltage+0x494>)
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b78      	ldr	r3, [pc, #480]	; (8003978 <Constant_Voltage+0x494>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a78      	ldr	r2, [pc, #480]	; (800397c <Constant_Voltage+0x498>)
 800379a:	6013      	str	r3, [r2, #0]
 800379c:	e119      	b.n	80039d2 <Constant_Voltage+0x4ee>
	}

	else if(e>=0&&e<=25)
 800379e:	4b6e      	ldr	r3, [pc, #440]	; (8003958 <Constant_Voltage+0x474>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f04f 0100 	mov.w	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fcba 	bl	8001120 <__aeabi_fcmpge>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d037      	beq.n	8003822 <Constant_Voltage+0x33e>
 80037b2:	4b69      	ldr	r3, [pc, #420]	; (8003958 <Constant_Voltage+0x474>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	496a      	ldr	r1, [pc, #424]	; (8003960 <Constant_Voltage+0x47c>)
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fd fca7 	bl	800110c <__aeabi_fcmple>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d02e      	beq.n	8003822 <Constant_Voltage+0x33e>
	{ eZ=-(e/25)+1;
 80037c4:	4b64      	ldr	r3, [pc, #400]	; (8003958 <Constant_Voltage+0x474>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4965      	ldr	r1, [pc, #404]	; (8003960 <Constant_Voltage+0x47c>)
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fbaa 	bl	8000f24 <__aeabi_fdiv>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4619      	mov	r1, r3
 80037d4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80037d8:	f7fd f9e6 	bl	8000ba8 <__aeabi_fsub>
 80037dc:	4603      	mov	r3, r0
 80037de:	461a      	mov	r2, r3
 80037e0:	4b61      	ldr	r3, [pc, #388]	; (8003968 <Constant_Voltage+0x484>)
 80037e2:	601a      	str	r2, [r3, #0]
	   ePS=e/25;
 80037e4:	4b5c      	ldr	r3, [pc, #368]	; (8003958 <Constant_Voltage+0x474>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	495d      	ldr	r1, [pc, #372]	; (8003960 <Constant_Voltage+0x47c>)
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fd fb9a 	bl	8000f24 <__aeabi_fdiv>
 80037f0:	4603      	mov	r3, r0
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b5f      	ldr	r3, [pc, #380]	; (8003974 <Constant_Voltage+0x490>)
 80037f6:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 80037f8:	4b5c      	ldr	r3, [pc, #368]	; (800396c <Constant_Voltage+0x488>)
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <Constant_Voltage+0x488>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a5a      	ldr	r2, [pc, #360]	; (8003970 <Constant_Voltage+0x48c>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <Constant_Voltage+0x48c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a55      	ldr	r2, [pc, #340]	; (8003964 <Constant_Voltage+0x480>)
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b54      	ldr	r3, [pc, #336]	; (8003964 <Constant_Voltage+0x480>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a58      	ldr	r2, [pc, #352]	; (8003978 <Constant_Voltage+0x494>)
 8003816:	6013      	str	r3, [r2, #0]
 8003818:	4b57      	ldr	r3, [pc, #348]	; (8003978 <Constant_Voltage+0x494>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a57      	ldr	r2, [pc, #348]	; (800397c <Constant_Voltage+0x498>)
 800381e:	6013      	str	r3, [r2, #0]
 8003820:	e0d7      	b.n	80039d2 <Constant_Voltage+0x4ee>
	}

	else if(e>=25&&e<=50)
 8003822:	4b4d      	ldr	r3, [pc, #308]	; (8003958 <Constant_Voltage+0x474>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	494e      	ldr	r1, [pc, #312]	; (8003960 <Constant_Voltage+0x47c>)
 8003828:	4618      	mov	r0, r3
 800382a:	f7fd fc79 	bl	8001120 <__aeabi_fcmpge>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d043      	beq.n	80038bc <Constant_Voltage+0x3d8>
 8003834:	4b48      	ldr	r3, [pc, #288]	; (8003958 <Constant_Voltage+0x474>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4951      	ldr	r1, [pc, #324]	; (8003980 <Constant_Voltage+0x49c>)
 800383a:	4618      	mov	r0, r3
 800383c:	f7fd fc66 	bl	800110c <__aeabi_fcmple>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d03a      	beq.n	80038bc <Constant_Voltage+0x3d8>
	{ ePS=(-(e-25)/25)+1;
 8003846:	4b44      	ldr	r3, [pc, #272]	; (8003958 <Constant_Voltage+0x474>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4945      	ldr	r1, [pc, #276]	; (8003960 <Constant_Voltage+0x47c>)
 800384c:	4618      	mov	r0, r3
 800384e:	f7fd f9ab 	bl	8000ba8 <__aeabi_fsub>
 8003852:	4603      	mov	r3, r0
 8003854:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003858:	4941      	ldr	r1, [pc, #260]	; (8003960 <Constant_Voltage+0x47c>)
 800385a:	4618      	mov	r0, r3
 800385c:	f7fd fb62 	bl	8000f24 <__aeabi_fdiv>
 8003860:	4603      	mov	r3, r0
 8003862:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd f9a0 	bl	8000bac <__addsf3>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	4b40      	ldr	r3, [pc, #256]	; (8003974 <Constant_Voltage+0x490>)
 8003872:	601a      	str	r2, [r3, #0]
	   ePM=(e-25)/25;
 8003874:	4b38      	ldr	r3, [pc, #224]	; (8003958 <Constant_Voltage+0x474>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4939      	ldr	r1, [pc, #228]	; (8003960 <Constant_Voltage+0x47c>)
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd f994 	bl	8000ba8 <__aeabi_fsub>
 8003880:	4603      	mov	r3, r0
 8003882:	4937      	ldr	r1, [pc, #220]	; (8003960 <Constant_Voltage+0x47c>)
 8003884:	4618      	mov	r0, r3
 8003886:	f7fd fb4d 	bl	8000f24 <__aeabi_fdiv>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	4b38      	ldr	r3, [pc, #224]	; (8003970 <Constant_Voltage+0x48c>)
 8003890:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 8003892:	4b36      	ldr	r3, [pc, #216]	; (800396c <Constant_Voltage+0x488>)
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	4b34      	ldr	r3, [pc, #208]	; (800396c <Constant_Voltage+0x488>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a32      	ldr	r2, [pc, #200]	; (8003968 <Constant_Voltage+0x484>)
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <Constant_Voltage+0x484>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <Constant_Voltage+0x480>)
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <Constant_Voltage+0x480>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a32      	ldr	r2, [pc, #200]	; (8003978 <Constant_Voltage+0x494>)
 80038b0:	6013      	str	r3, [r2, #0]
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <Constant_Voltage+0x494>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a31      	ldr	r2, [pc, #196]	; (800397c <Constant_Voltage+0x498>)
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e08a      	b.n	80039d2 <Constant_Voltage+0x4ee>
	}

	else if(e>=50&&e<=75)
 80038bc:	4b26      	ldr	r3, [pc, #152]	; (8003958 <Constant_Voltage+0x474>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	492f      	ldr	r1, [pc, #188]	; (8003980 <Constant_Voltage+0x49c>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fd fc2c 	bl	8001120 <__aeabi_fcmpge>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d05c      	beq.n	8003988 <Constant_Voltage+0x4a4>
 80038ce:	4b22      	ldr	r3, [pc, #136]	; (8003958 <Constant_Voltage+0x474>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	492c      	ldr	r1, [pc, #176]	; (8003984 <Constant_Voltage+0x4a0>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fc19 	bl	800110c <__aeabi_fcmple>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d053      	beq.n	8003988 <Constant_Voltage+0x4a4>
	{ ePM=(-(e-50)/25)+1;
 80038e0:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <Constant_Voltage+0x474>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4926      	ldr	r1, [pc, #152]	; (8003980 <Constant_Voltage+0x49c>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd f95e 	bl	8000ba8 <__aeabi_fsub>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80038f2:	491b      	ldr	r1, [pc, #108]	; (8003960 <Constant_Voltage+0x47c>)
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fd fb15 	bl	8000f24 <__aeabi_fdiv>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd f953 	bl	8000bac <__addsf3>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <Constant_Voltage+0x48c>)
 800390c:	601a      	str	r2, [r3, #0]
	   ePB=(e-50)/25;
 800390e:	4b12      	ldr	r3, [pc, #72]	; (8003958 <Constant_Voltage+0x474>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	491b      	ldr	r1, [pc, #108]	; (8003980 <Constant_Voltage+0x49c>)
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd f947 	bl	8000ba8 <__aeabi_fsub>
 800391a:	4603      	mov	r3, r0
 800391c:	4910      	ldr	r1, [pc, #64]	; (8003960 <Constant_Voltage+0x47c>)
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fb00 	bl	8000f24 <__aeabi_fdiv>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	4b10      	ldr	r3, [pc, #64]	; (800396c <Constant_Voltage+0x488>)
 800392a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 800392c:	4b11      	ldr	r3, [pc, #68]	; (8003974 <Constant_Voltage+0x490>)
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <Constant_Voltage+0x490>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a0b      	ldr	r2, [pc, #44]	; (8003968 <Constant_Voltage+0x484>)
 800393a:	6013      	str	r3, [r2, #0]
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <Constant_Voltage+0x484>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a08      	ldr	r2, [pc, #32]	; (8003964 <Constant_Voltage+0x480>)
 8003942:	6013      	str	r3, [r2, #0]
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <Constant_Voltage+0x480>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <Constant_Voltage+0x494>)
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <Constant_Voltage+0x494>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <Constant_Voltage+0x498>)
 8003952:	6013      	str	r3, [r2, #0]
 8003954:	e03d      	b.n	80039d2 <Constant_Voltage+0x4ee>
 8003956:	bf00      	nop
 8003958:	20000d60 	.word	0x20000d60
 800395c:	c1c80000 	.word	0xc1c80000
 8003960:	41c80000 	.word	0x41c80000
 8003964:	200006b0 	.word	0x200006b0
 8003968:	20000db4 	.word	0x20000db4
 800396c:	200009f0 	.word	0x200009f0
 8003970:	20000aa8 	.word	0x20000aa8
 8003974:	20000a2c 	.word	0x20000a2c
 8003978:	20000da0 	.word	0x20000da0
 800397c:	20000d68 	.word	0x20000d68
 8003980:	42480000 	.word	0x42480000
 8003984:	42960000 	.word	0x42960000
	}

	else if(e>=75)
 8003988:	4b71      	ldr	r3, [pc, #452]	; (8003b50 <Constant_Voltage+0x66c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4971      	ldr	r1, [pc, #452]	; (8003b54 <Constant_Voltage+0x670>)
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fbc6 	bl	8001120 <__aeabi_fcmpge>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d01b      	beq.n	80039d2 <Constant_Voltage+0x4ee>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 800399a:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <Constant_Voltage+0x674>)
 800399c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	4b6e      	ldr	r3, [pc, #440]	; (8003b5c <Constant_Voltage+0x678>)
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <Constant_Voltage+0x678>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a6c      	ldr	r2, [pc, #432]	; (8003b60 <Constant_Voltage+0x67c>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b6b      	ldr	r3, [pc, #428]	; (8003b60 <Constant_Voltage+0x67c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6b      	ldr	r2, [pc, #428]	; (8003b64 <Constant_Voltage+0x680>)
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <Constant_Voltage+0x680>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6a      	ldr	r2, [pc, #424]	; (8003b68 <Constant_Voltage+0x684>)
 80039c0:	6013      	str	r3, [r2, #0]
 80039c2:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <Constant_Voltage+0x684>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a69      	ldr	r2, [pc, #420]	; (8003b6c <Constant_Voltage+0x688>)
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	4b68      	ldr	r3, [pc, #416]	; (8003b6c <Constant_Voltage+0x688>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a68      	ldr	r2, [pc, #416]	; (8003b70 <Constant_Voltage+0x68c>)
 80039d0:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-30)
 80039d2:	4b68      	ldr	r3, [pc, #416]	; (8003b74 <Constant_Voltage+0x690>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4968      	ldr	r1, [pc, #416]	; (8003b78 <Constant_Voltage+0x694>)
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fd fb97 	bl	800110c <__aeabi_fcmple>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d01b      	beq.n	8003a1c <Constant_Voltage+0x538>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 80039e4:	4b65      	ldr	r3, [pc, #404]	; (8003b7c <Constant_Voltage+0x698>)
 80039e6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4b64      	ldr	r3, [pc, #400]	; (8003b80 <Constant_Voltage+0x69c>)
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	4b62      	ldr	r3, [pc, #392]	; (8003b80 <Constant_Voltage+0x69c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a62      	ldr	r2, [pc, #392]	; (8003b84 <Constant_Voltage+0x6a0>)
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <Constant_Voltage+0x6a0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a61      	ldr	r2, [pc, #388]	; (8003b88 <Constant_Voltage+0x6a4>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <Constant_Voltage+0x6a4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a60      	ldr	r2, [pc, #384]	; (8003b8c <Constant_Voltage+0x6a8>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b5f      	ldr	r3, [pc, #380]	; (8003b8c <Constant_Voltage+0x6a8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a5f      	ldr	r2, [pc, #380]	; (8003b90 <Constant_Voltage+0x6ac>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	4b5e      	ldr	r3, [pc, #376]	; (8003b90 <Constant_Voltage+0x6ac>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a5e      	ldr	r2, [pc, #376]	; (8003b94 <Constant_Voltage+0x6b0>)
 8003a1a:	6013      	str	r3, [r2, #0]

	if(d>=-30&&d<=-20)
 8003a1c:	4b55      	ldr	r3, [pc, #340]	; (8003b74 <Constant_Voltage+0x690>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4955      	ldr	r1, [pc, #340]	; (8003b78 <Constant_Voltage+0x694>)
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7fd fb7c 	bl	8001120 <__aeabi_fcmpge>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d043      	beq.n	8003ab6 <Constant_Voltage+0x5d2>
 8003a2e:	4b51      	ldr	r3, [pc, #324]	; (8003b74 <Constant_Voltage+0x690>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4959      	ldr	r1, [pc, #356]	; (8003b98 <Constant_Voltage+0x6b4>)
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fb69 	bl	800110c <__aeabi_fcmple>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03a      	beq.n	8003ab6 <Constant_Voltage+0x5d2>
	{ dNB=(-(d+30)/10)+1;
 8003a40:	4b4c      	ldr	r3, [pc, #304]	; (8003b74 <Constant_Voltage+0x690>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4955      	ldr	r1, [pc, #340]	; (8003b9c <Constant_Voltage+0x6b8>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd f8b0 	bl	8000bac <__addsf3>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a52:	4953      	ldr	r1, [pc, #332]	; (8003ba0 <Constant_Voltage+0x6bc>)
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fd fa65 	bl	8000f24 <__aeabi_fdiv>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fd f8a3 	bl	8000bac <__addsf3>
 8003a66:	4603      	mov	r3, r0
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <Constant_Voltage+0x698>)
 8003a6c:	601a      	str	r2, [r3, #0]
	   dNM=(d+30)/10;
 8003a6e:	4b41      	ldr	r3, [pc, #260]	; (8003b74 <Constant_Voltage+0x690>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	494a      	ldr	r1, [pc, #296]	; (8003b9c <Constant_Voltage+0x6b8>)
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7fd f899 	bl	8000bac <__addsf3>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	4948      	ldr	r1, [pc, #288]	; (8003ba0 <Constant_Voltage+0x6bc>)
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd fa50 	bl	8000f24 <__aeabi_fdiv>
 8003a84:	4603      	mov	r3, r0
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b42      	ldr	r3, [pc, #264]	; (8003b94 <Constant_Voltage+0x6b0>)
 8003a8a:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8003a8c:	4b3c      	ldr	r3, [pc, #240]	; (8003b80 <Constant_Voltage+0x69c>)
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	4b3a      	ldr	r3, [pc, #232]	; (8003b80 <Constant_Voltage+0x69c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a3a      	ldr	r2, [pc, #232]	; (8003b84 <Constant_Voltage+0x6a0>)
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <Constant_Voltage+0x6a0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a39      	ldr	r2, [pc, #228]	; (8003b88 <Constant_Voltage+0x6a4>)
 8003aa2:	6013      	str	r3, [r2, #0]
 8003aa4:	4b38      	ldr	r3, [pc, #224]	; (8003b88 <Constant_Voltage+0x6a4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a38      	ldr	r2, [pc, #224]	; (8003b8c <Constant_Voltage+0x6a8>)
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <Constant_Voltage+0x6a8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a37      	ldr	r2, [pc, #220]	; (8003b90 <Constant_Voltage+0x6ac>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e1e1      	b.n	8003e7a <Constant_Voltage+0x996>
	}

	else if(d>=-20&&d<=-10)
 8003ab6:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <Constant_Voltage+0x690>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4937      	ldr	r1, [pc, #220]	; (8003b98 <Constant_Voltage+0x6b4>)
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fb2f 	bl	8001120 <__aeabi_fcmpge>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d071      	beq.n	8003bac <Constant_Voltage+0x6c8>
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <Constant_Voltage+0x690>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4935      	ldr	r1, [pc, #212]	; (8003ba4 <Constant_Voltage+0x6c0>)
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fd fb1c 	bl	800110c <__aeabi_fcmple>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d068      	beq.n	8003bac <Constant_Voltage+0x6c8>
	{ dNM=(-(d+20)/10)+1;
 8003ada:	4b26      	ldr	r3, [pc, #152]	; (8003b74 <Constant_Voltage+0x690>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4932      	ldr	r1, [pc, #200]	; (8003ba8 <Constant_Voltage+0x6c4>)
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f863 	bl	8000bac <__addsf3>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003aec:	492c      	ldr	r1, [pc, #176]	; (8003ba0 <Constant_Voltage+0x6bc>)
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fd fa18 	bl	8000f24 <__aeabi_fdiv>
 8003af4:	4603      	mov	r3, r0
 8003af6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd f856 	bl	8000bac <__addsf3>
 8003b00:	4603      	mov	r3, r0
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b23      	ldr	r3, [pc, #140]	; (8003b94 <Constant_Voltage+0x6b0>)
 8003b06:	601a      	str	r2, [r3, #0]
	   dNS=(d+20)/10;
 8003b08:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <Constant_Voltage+0x690>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4926      	ldr	r1, [pc, #152]	; (8003ba8 <Constant_Voltage+0x6c4>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fd f84c 	bl	8000bac <__addsf3>
 8003b14:	4603      	mov	r3, r0
 8003b16:	4922      	ldr	r1, [pc, #136]	; (8003ba0 <Constant_Voltage+0x6bc>)
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd fa03 	bl	8000f24 <__aeabi_fdiv>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <Constant_Voltage+0x6ac>)
 8003b24:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <Constant_Voltage+0x69c>)
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
 8003b2e:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <Constant_Voltage+0x69c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <Constant_Voltage+0x6a0>)
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <Constant_Voltage+0x6a0>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a13      	ldr	r2, [pc, #76]	; (8003b88 <Constant_Voltage+0x6a4>)
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b12      	ldr	r3, [pc, #72]	; (8003b88 <Constant_Voltage+0x6a4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a12      	ldr	r2, [pc, #72]	; (8003b8c <Constant_Voltage+0x6a8>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <Constant_Voltage+0x6a8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <Constant_Voltage+0x698>)
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e194      	b.n	8003e7a <Constant_Voltage+0x996>
 8003b50:	20000d60 	.word	0x20000d60
 8003b54:	42960000 	.word	0x42960000
 8003b58:	200009f0 	.word	0x200009f0
 8003b5c:	20000aa8 	.word	0x20000aa8
 8003b60:	20000a2c 	.word	0x20000a2c
 8003b64:	20000db4 	.word	0x20000db4
 8003b68:	200006b0 	.word	0x200006b0
 8003b6c:	20000da0 	.word	0x20000da0
 8003b70:	20000d68 	.word	0x20000d68
 8003b74:	20000aa0 	.word	0x20000aa0
 8003b78:	c1f00000 	.word	0xc1f00000
 8003b7c:	200006d4 	.word	0x200006d4
 8003b80:	20000ab0 	.word	0x20000ab0
 8003b84:	200006e8 	.word	0x200006e8
 8003b88:	20000d7c 	.word	0x20000d7c
 8003b8c:	20000d94 	.word	0x20000d94
 8003b90:	20000828 	.word	0x20000828
 8003b94:	20000a28 	.word	0x20000a28
 8003b98:	c1a00000 	.word	0xc1a00000
 8003b9c:	41f00000 	.word	0x41f00000
 8003ba0:	41200000 	.word	0x41200000
 8003ba4:	c1200000 	.word	0xc1200000
 8003ba8:	41a00000 	.word	0x41a00000
	}

	else if(d>=-10&&d<=0)
 8003bac:	4b94      	ldr	r3, [pc, #592]	; (8003e00 <Constant_Voltage+0x91c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4994      	ldr	r1, [pc, #592]	; (8003e04 <Constant_Voltage+0x920>)
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd fab4 	bl	8001120 <__aeabi_fcmpge>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d044      	beq.n	8003c48 <Constant_Voltage+0x764>
 8003bbe:	4b90      	ldr	r3, [pc, #576]	; (8003e00 <Constant_Voltage+0x91c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f04f 0100 	mov.w	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fd faa0 	bl	800110c <__aeabi_fcmple>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d03a      	beq.n	8003c48 <Constant_Voltage+0x764>
	{ dNS=(-(d+10)/10)+1;
 8003bd2:	4b8b      	ldr	r3, [pc, #556]	; (8003e00 <Constant_Voltage+0x91c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	498c      	ldr	r1, [pc, #560]	; (8003e08 <Constant_Voltage+0x924>)
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc ffe7 	bl	8000bac <__addsf3>
 8003bde:	4603      	mov	r3, r0
 8003be0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003be4:	4988      	ldr	r1, [pc, #544]	; (8003e08 <Constant_Voltage+0x924>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd f99c 	bl	8000f24 <__aeabi_fdiv>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc ffda 	bl	8000bac <__addsf3>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	4b83      	ldr	r3, [pc, #524]	; (8003e0c <Constant_Voltage+0x928>)
 8003bfe:	601a      	str	r2, [r3, #0]
	   dZ=(d+10)/10;
 8003c00:	4b7f      	ldr	r3, [pc, #508]	; (8003e00 <Constant_Voltage+0x91c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4980      	ldr	r1, [pc, #512]	; (8003e08 <Constant_Voltage+0x924>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc ffd0 	bl	8000bac <__addsf3>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	497e      	ldr	r1, [pc, #504]	; (8003e08 <Constant_Voltage+0x924>)
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7fd f987 	bl	8000f24 <__aeabi_fdiv>
 8003c16:	4603      	mov	r3, r0
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <Constant_Voltage+0x92c>)
 8003c1c:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8003c1e:	4b7d      	ldr	r3, [pc, #500]	; (8003e14 <Constant_Voltage+0x930>)
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	4b7b      	ldr	r3, [pc, #492]	; (8003e14 <Constant_Voltage+0x930>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a7b      	ldr	r2, [pc, #492]	; (8003e18 <Constant_Voltage+0x934>)
 8003c2c:	6013      	str	r3, [r2, #0]
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <Constant_Voltage+0x934>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a7a      	ldr	r2, [pc, #488]	; (8003e1c <Constant_Voltage+0x938>)
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b79      	ldr	r3, [pc, #484]	; (8003e1c <Constant_Voltage+0x938>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a79      	ldr	r2, [pc, #484]	; (8003e20 <Constant_Voltage+0x93c>)
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b78      	ldr	r3, [pc, #480]	; (8003e20 <Constant_Voltage+0x93c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a78      	ldr	r2, [pc, #480]	; (8003e24 <Constant_Voltage+0x940>)
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e118      	b.n	8003e7a <Constant_Voltage+0x996>
	}

	else if(d>=0&&d<=10)
 8003c48:	4b6d      	ldr	r3, [pc, #436]	; (8003e00 <Constant_Voltage+0x91c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fd fa65 	bl	8001120 <__aeabi_fcmpge>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d037      	beq.n	8003ccc <Constant_Voltage+0x7e8>
 8003c5c:	4b68      	ldr	r3, [pc, #416]	; (8003e00 <Constant_Voltage+0x91c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4969      	ldr	r1, [pc, #420]	; (8003e08 <Constant_Voltage+0x924>)
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fa52 	bl	800110c <__aeabi_fcmple>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d02e      	beq.n	8003ccc <Constant_Voltage+0x7e8>
	{ dZ=-(d/10)+1;
 8003c6e:	4b64      	ldr	r3, [pc, #400]	; (8003e00 <Constant_Voltage+0x91c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4965      	ldr	r1, [pc, #404]	; (8003e08 <Constant_Voltage+0x924>)
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd f955 	bl	8000f24 <__aeabi_fdiv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003c82:	f7fc ff91 	bl	8000ba8 <__aeabi_fsub>
 8003c86:	4603      	mov	r3, r0
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4b61      	ldr	r3, [pc, #388]	; (8003e10 <Constant_Voltage+0x92c>)
 8003c8c:	601a      	str	r2, [r3, #0]
	   dPS=d/10;
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <Constant_Voltage+0x91c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	495d      	ldr	r1, [pc, #372]	; (8003e08 <Constant_Voltage+0x924>)
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fd f945 	bl	8000f24 <__aeabi_fdiv>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4b5f      	ldr	r3, [pc, #380]	; (8003e1c <Constant_Voltage+0x938>)
 8003ca0:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <Constant_Voltage+0x930>)
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	4b5a      	ldr	r3, [pc, #360]	; (8003e14 <Constant_Voltage+0x930>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <Constant_Voltage+0x934>)
 8003cb0:	6013      	str	r3, [r2, #0]
 8003cb2:	4b59      	ldr	r3, [pc, #356]	; (8003e18 <Constant_Voltage+0x934>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <Constant_Voltage+0x928>)
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b54      	ldr	r3, [pc, #336]	; (8003e0c <Constant_Voltage+0x928>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <Constant_Voltage+0x93c>)
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <Constant_Voltage+0x93c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <Constant_Voltage+0x940>)
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	e0d6      	b.n	8003e7a <Constant_Voltage+0x996>
	}

	else if(d>=10&&d<=20)
 8003ccc:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <Constant_Voltage+0x91c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	494d      	ldr	r1, [pc, #308]	; (8003e08 <Constant_Voltage+0x924>)
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fa24 	bl	8001120 <__aeabi_fcmpge>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d043      	beq.n	8003d66 <Constant_Voltage+0x882>
 8003cde:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <Constant_Voltage+0x91c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4951      	ldr	r1, [pc, #324]	; (8003e28 <Constant_Voltage+0x944>)
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd fa11 	bl	800110c <__aeabi_fcmple>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d03a      	beq.n	8003d66 <Constant_Voltage+0x882>
	{ dPS=(-(d-10)/10)+1;
 8003cf0:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <Constant_Voltage+0x91c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4944      	ldr	r1, [pc, #272]	; (8003e08 <Constant_Voltage+0x924>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fc ff56 	bl	8000ba8 <__aeabi_fsub>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d02:	4941      	ldr	r1, [pc, #260]	; (8003e08 <Constant_Voltage+0x924>)
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7fd f90d 	bl	8000f24 <__aeabi_fdiv>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fc ff4b 	bl	8000bac <__addsf3>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <Constant_Voltage+0x938>)
 8003d1c:	601a      	str	r2, [r3, #0]
	   dPM=(d-10)/10;
 8003d1e:	4b38      	ldr	r3, [pc, #224]	; (8003e00 <Constant_Voltage+0x91c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4939      	ldr	r1, [pc, #228]	; (8003e08 <Constant_Voltage+0x924>)
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7fc ff3f 	bl	8000ba8 <__aeabi_fsub>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	4936      	ldr	r1, [pc, #216]	; (8003e08 <Constant_Voltage+0x924>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd f8f8 	bl	8000f24 <__aeabi_fdiv>
 8003d34:	4603      	mov	r3, r0
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b37      	ldr	r3, [pc, #220]	; (8003e18 <Constant_Voltage+0x934>)
 8003d3a:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8003d3c:	4b35      	ldr	r3, [pc, #212]	; (8003e14 <Constant_Voltage+0x930>)
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <Constant_Voltage+0x930>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <Constant_Voltage+0x92c>)
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b30      	ldr	r3, [pc, #192]	; (8003e10 <Constant_Voltage+0x92c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a2e      	ldr	r2, [pc, #184]	; (8003e0c <Constant_Voltage+0x928>)
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b2d      	ldr	r3, [pc, #180]	; (8003e0c <Constant_Voltage+0x928>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <Constant_Voltage+0x93c>)
 8003d5a:	6013      	str	r3, [r2, #0]
 8003d5c:	4b30      	ldr	r3, [pc, #192]	; (8003e20 <Constant_Voltage+0x93c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <Constant_Voltage+0x940>)
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e089      	b.n	8003e7a <Constant_Voltage+0x996>
	}

	else if(d>=20&&d<=30)
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <Constant_Voltage+0x91c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	492f      	ldr	r1, [pc, #188]	; (8003e28 <Constant_Voltage+0x944>)
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fd f9d7 	bl	8001120 <__aeabi_fcmpge>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d05b      	beq.n	8003e30 <Constant_Voltage+0x94c>
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <Constant_Voltage+0x91c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	492b      	ldr	r1, [pc, #172]	; (8003e2c <Constant_Voltage+0x948>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd f9c4 	bl	800110c <__aeabi_fcmple>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d052      	beq.n	8003e30 <Constant_Voltage+0x94c>
	{ dPM=(-(d-20)/10)+1;
 8003d8a:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <Constant_Voltage+0x91c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4926      	ldr	r1, [pc, #152]	; (8003e28 <Constant_Voltage+0x944>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc ff09 	bl	8000ba8 <__aeabi_fsub>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d9c:	491a      	ldr	r1, [pc, #104]	; (8003e08 <Constant_Voltage+0x924>)
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fd f8c0 	bl	8000f24 <__aeabi_fdiv>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fc fefe 	bl	8000bac <__addsf3>
 8003db0:	4603      	mov	r3, r0
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b18      	ldr	r3, [pc, #96]	; (8003e18 <Constant_Voltage+0x934>)
 8003db6:	601a      	str	r2, [r3, #0]
	   dPB=(d-20)/10;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <Constant_Voltage+0x91c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	491a      	ldr	r1, [pc, #104]	; (8003e28 <Constant_Voltage+0x944>)
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7fc fef2 	bl	8000ba8 <__aeabi_fsub>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	4910      	ldr	r1, [pc, #64]	; (8003e08 <Constant_Voltage+0x924>)
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fd f8ab 	bl	8000f24 <__aeabi_fdiv>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <Constant_Voltage+0x930>)
 8003dd4:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <Constant_Voltage+0x938>)
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <Constant_Voltage+0x938>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a0b      	ldr	r2, [pc, #44]	; (8003e10 <Constant_Voltage+0x92c>)
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <Constant_Voltage+0x92c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a08      	ldr	r2, [pc, #32]	; (8003e0c <Constant_Voltage+0x928>)
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <Constant_Voltage+0x928>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <Constant_Voltage+0x93c>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <Constant_Voltage+0x93c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <Constant_Voltage+0x940>)
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e03c      	b.n	8003e7a <Constant_Voltage+0x996>
 8003e00:	20000aa0 	.word	0x20000aa0
 8003e04:	c1200000 	.word	0xc1200000
 8003e08:	41200000 	.word	0x41200000
 8003e0c:	20000828 	.word	0x20000828
 8003e10:	20000d94 	.word	0x20000d94
 8003e14:	20000ab0 	.word	0x20000ab0
 8003e18:	200006e8 	.word	0x200006e8
 8003e1c:	20000d7c 	.word	0x20000d7c
 8003e20:	20000a28 	.word	0x20000a28
 8003e24:	200006d4 	.word	0x200006d4
 8003e28:	41a00000 	.word	0x41a00000
 8003e2c:	41f00000 	.word	0x41f00000
	}

	else if(d>=30)
 8003e30:	4b8e      	ldr	r3, [pc, #568]	; (800406c <Constant_Voltage+0xb88>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	498e      	ldr	r1, [pc, #568]	; (8004070 <Constant_Voltage+0xb8c>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd f972 	bl	8001120 <__aeabi_fcmpge>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01b      	beq.n	8003e7a <Constant_Voltage+0x996>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8003e42:	4b8c      	ldr	r3, [pc, #560]	; (8004074 <Constant_Voltage+0xb90>)
 8003e44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4b8b      	ldr	r3, [pc, #556]	; (8004078 <Constant_Voltage+0xb94>)
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4b89      	ldr	r3, [pc, #548]	; (8004078 <Constant_Voltage+0xb94>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a89      	ldr	r2, [pc, #548]	; (800407c <Constant_Voltage+0xb98>)
 8003e58:	6013      	str	r3, [r2, #0]
 8003e5a:	4b88      	ldr	r3, [pc, #544]	; (800407c <Constant_Voltage+0xb98>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a88      	ldr	r2, [pc, #544]	; (8004080 <Constant_Voltage+0xb9c>)
 8003e60:	6013      	str	r3, [r2, #0]
 8003e62:	4b87      	ldr	r3, [pc, #540]	; (8004080 <Constant_Voltage+0xb9c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a87      	ldr	r2, [pc, #540]	; (8004084 <Constant_Voltage+0xba0>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	4b86      	ldr	r3, [pc, #536]	; (8004084 <Constant_Voltage+0xba0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a86      	ldr	r2, [pc, #536]	; (8004088 <Constant_Voltage+0xba4>)
 8003e70:	6013      	str	r3, [r2, #0]
 8003e72:	4b85      	ldr	r3, [pc, #532]	; (8004088 <Constant_Voltage+0xba4>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a85      	ldr	r2, [pc, #532]	; (800408c <Constant_Voltage+0xba8>)
 8003e78:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8003e7a:	4b7e      	ldr	r3, [pc, #504]	; (8004074 <Constant_Voltage+0xb90>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a84      	ldr	r2, [pc, #528]	; (8004090 <Constant_Voltage+0xbac>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b84      	ldr	r3, [pc, #528]	; (8004094 <Constant_Voltage+0xbb0>)
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	4b7b      	ldr	r3, [pc, #492]	; (8004074 <Constant_Voltage+0xb90>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f7fd f933 	bl	80010f8 <__aeabi_fcmplt>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <Constant_Voltage+0x9bc>
 8003e98:	4b7e      	ldr	r3, [pc, #504]	; (8004094 <Constant_Voltage+0xbb0>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a7c      	ldr	r2, [pc, #496]	; (8004090 <Constant_Voltage+0xbac>)
 8003e9e:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8003ea0:	4b74      	ldr	r3, [pc, #464]	; (8004074 <Constant_Voltage+0xb90>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <Constant_Voltage+0xbb4>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	4b7c      	ldr	r3, [pc, #496]	; (800409c <Constant_Voltage+0xbb8>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b71      	ldr	r3, [pc, #452]	; (8004074 <Constant_Voltage+0xb90>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4610      	mov	r0, r2
 8003eb4:	f7fd f920 	bl	80010f8 <__aeabi_fcmplt>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <Constant_Voltage+0x9e2>
 8003ebe:	4b77      	ldr	r3, [pc, #476]	; (800409c <Constant_Voltage+0xbb8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a75      	ldr	r2, [pc, #468]	; (8004098 <Constant_Voltage+0xbb4>)
 8003ec4:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8003ec6:	4b6b      	ldr	r3, [pc, #428]	; (8004074 <Constant_Voltage+0xb90>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a75      	ldr	r2, [pc, #468]	; (80040a0 <Constant_Voltage+0xbbc>)
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b75      	ldr	r3, [pc, #468]	; (80040a4 <Constant_Voltage+0xbc0>)
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	4b68      	ldr	r3, [pc, #416]	; (8004074 <Constant_Voltage+0xb90>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4610      	mov	r0, r2
 8003eda:	f7fd f90d 	bl	80010f8 <__aeabi_fcmplt>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <Constant_Voltage+0xa08>
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	; (80040a4 <Constant_Voltage+0xbc0>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6d      	ldr	r2, [pc, #436]	; (80040a0 <Constant_Voltage+0xbbc>)
 8003eea:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8003eec:	4b61      	ldr	r3, [pc, #388]	; (8004074 <Constant_Voltage+0xb90>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6d      	ldr	r2, [pc, #436]	; (80040a8 <Constant_Voltage+0xbc4>)
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <Constant_Voltage+0xbc8>)
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	4b5e      	ldr	r3, [pc, #376]	; (8004074 <Constant_Voltage+0xb90>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f7fd f8fa 	bl	80010f8 <__aeabi_fcmplt>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <Constant_Voltage+0xa2e>
 8003f0a:	4b68      	ldr	r3, [pc, #416]	; (80040ac <Constant_Voltage+0xbc8>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a66      	ldr	r2, [pc, #408]	; (80040a8 <Constant_Voltage+0xbc4>)
 8003f10:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 8003f12:	4b58      	ldr	r3, [pc, #352]	; (8004074 <Constant_Voltage+0xb90>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a66      	ldr	r2, [pc, #408]	; (80040b0 <Constant_Voltage+0xbcc>)
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b66      	ldr	r3, [pc, #408]	; (80040b4 <Constant_Voltage+0xbd0>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4b55      	ldr	r3, [pc, #340]	; (8004074 <Constant_Voltage+0xb90>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4619      	mov	r1, r3
 8003f24:	4610      	mov	r0, r2
 8003f26:	f7fd f8e7 	bl	80010f8 <__aeabi_fcmplt>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <Constant_Voltage+0xa54>
 8003f30:	4b60      	ldr	r3, [pc, #384]	; (80040b4 <Constant_Voltage+0xbd0>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a5e      	ldr	r2, [pc, #376]	; (80040b0 <Constant_Voltage+0xbcc>)
 8003f36:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8003f38:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <Constant_Voltage+0xb90>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a5e      	ldr	r2, [pc, #376]	; (80040b8 <Constant_Voltage+0xbd4>)
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4b5e      	ldr	r3, [pc, #376]	; (80040bc <Constant_Voltage+0xbd8>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	4b4b      	ldr	r3, [pc, #300]	; (8004074 <Constant_Voltage+0xb90>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fd f8d4 	bl	80010f8 <__aeabi_fcmplt>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <Constant_Voltage+0xa7a>
 8003f56:	4b59      	ldr	r3, [pc, #356]	; (80040bc <Constant_Voltage+0xbd8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a57      	ldr	r2, [pc, #348]	; (80040b8 <Constant_Voltage+0xbd4>)
 8003f5c:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 8003f5e:	4b45      	ldr	r3, [pc, #276]	; (8004074 <Constant_Voltage+0xb90>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a57      	ldr	r2, [pc, #348]	; (80040c0 <Constant_Voltage+0xbdc>)
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b57      	ldr	r3, [pc, #348]	; (80040c4 <Constant_Voltage+0xbe0>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b42      	ldr	r3, [pc, #264]	; (8004074 <Constant_Voltage+0xb90>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f7fd f8c1 	bl	80010f8 <__aeabi_fcmplt>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d003      	beq.n	8003f84 <Constant_Voltage+0xaa0>
 8003f7c:	4b51      	ldr	r3, [pc, #324]	; (80040c4 <Constant_Voltage+0xbe0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a4f      	ldr	r2, [pc, #316]	; (80040c0 <Constant_Voltage+0xbdc>)
 8003f82:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8003f84:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <Constant_Voltage+0xb94>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a4f      	ldr	r2, [pc, #316]	; (80040c8 <Constant_Voltage+0xbe4>)
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b41      	ldr	r3, [pc, #260]	; (8004094 <Constant_Voltage+0xbb0>)
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	4b39      	ldr	r3, [pc, #228]	; (8004078 <Constant_Voltage+0xb94>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7fd f8ae 	bl	80010f8 <__aeabi_fcmplt>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <Constant_Voltage+0xac6>
 8003fa2:	4b3c      	ldr	r3, [pc, #240]	; (8004094 <Constant_Voltage+0xbb0>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a48      	ldr	r2, [pc, #288]	; (80040c8 <Constant_Voltage+0xbe4>)
 8003fa8:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8003faa:	4b33      	ldr	r3, [pc, #204]	; (8004078 <Constant_Voltage+0xb94>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a47      	ldr	r2, [pc, #284]	; (80040cc <Constant_Voltage+0xbe8>)
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	4b3a      	ldr	r3, [pc, #232]	; (800409c <Constant_Voltage+0xbb8>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4b30      	ldr	r3, [pc, #192]	; (8004078 <Constant_Voltage+0xb94>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4610      	mov	r0, r2
 8003fbe:	f7fd f89b 	bl	80010f8 <__aeabi_fcmplt>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <Constant_Voltage+0xaec>
 8003fc8:	4b34      	ldr	r3, [pc, #208]	; (800409c <Constant_Voltage+0xbb8>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a3f      	ldr	r2, [pc, #252]	; (80040cc <Constant_Voltage+0xbe8>)
 8003fce:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <Constant_Voltage+0xb94>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a3e      	ldr	r2, [pc, #248]	; (80040d0 <Constant_Voltage+0xbec>)
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <Constant_Voltage+0xbc0>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4b26      	ldr	r3, [pc, #152]	; (8004078 <Constant_Voltage+0xb94>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7fd f888 	bl	80010f8 <__aeabi_fcmplt>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <Constant_Voltage+0xb12>
 8003fee:	4b2d      	ldr	r3, [pc, #180]	; (80040a4 <Constant_Voltage+0xbc0>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a37      	ldr	r2, [pc, #220]	; (80040d0 <Constant_Voltage+0xbec>)
 8003ff4:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 8003ff6:	4b20      	ldr	r3, [pc, #128]	; (8004078 <Constant_Voltage+0xb94>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a36      	ldr	r2, [pc, #216]	; (80040d4 <Constant_Voltage+0xbf0>)
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b2b      	ldr	r3, [pc, #172]	; (80040ac <Constant_Voltage+0xbc8>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <Constant_Voltage+0xb94>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7fd f875 	bl	80010f8 <__aeabi_fcmplt>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d003      	beq.n	800401c <Constant_Voltage+0xb38>
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <Constant_Voltage+0xbc8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a2e      	ldr	r2, [pc, #184]	; (80040d4 <Constant_Voltage+0xbf0>)
 800401a:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <Constant_Voltage+0xb94>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2d      	ldr	r2, [pc, #180]	; (80040d8 <Constant_Voltage+0xbf4>)
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b23      	ldr	r3, [pc, #140]	; (80040b4 <Constant_Voltage+0xbd0>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b13      	ldr	r3, [pc, #76]	; (8004078 <Constant_Voltage+0xb94>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7fd f862 	bl	80010f8 <__aeabi_fcmplt>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <Constant_Voltage+0xb5e>
 800403a:	4b1e      	ldr	r3, [pc, #120]	; (80040b4 <Constant_Voltage+0xbd0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <Constant_Voltage+0xbf4>)
 8004040:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 8004042:	4b0d      	ldr	r3, [pc, #52]	; (8004078 <Constant_Voltage+0xb94>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a25      	ldr	r2, [pc, #148]	; (80040dc <Constant_Voltage+0xbf8>)
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	4b1c      	ldr	r3, [pc, #112]	; (80040bc <Constant_Voltage+0xbd8>)
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b0a      	ldr	r3, [pc, #40]	; (8004078 <Constant_Voltage+0xb94>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4619      	mov	r1, r3
 8004054:	4610      	mov	r0, r2
 8004056:	f7fd f84f 	bl	80010f8 <__aeabi_fcmplt>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03f      	beq.n	80040e0 <Constant_Voltage+0xbfc>
 8004060:	4b16      	ldr	r3, [pc, #88]	; (80040bc <Constant_Voltage+0xbd8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <Constant_Voltage+0xbf8>)
 8004066:	6013      	str	r3, [r2, #0]
 8004068:	e03a      	b.n	80040e0 <Constant_Voltage+0xbfc>
 800406a:	bf00      	nop
 800406c:	20000aa0 	.word	0x20000aa0
 8004070:	41f00000 	.word	0x41f00000
 8004074:	20000ab0 	.word	0x20000ab0
 8004078:	200006e8 	.word	0x200006e8
 800407c:	20000d7c 	.word	0x20000d7c
 8004080:	20000d94 	.word	0x20000d94
 8004084:	20000828 	.word	0x20000828
 8004088:	20000a28 	.word	0x20000a28
 800408c:	200006d4 	.word	0x200006d4
 8004090:	20000db8 	.word	0x20000db8
 8004094:	20000d68 	.word	0x20000d68
 8004098:	20000ba4 	.word	0x20000ba4
 800409c:	20000da0 	.word	0x20000da0
 80040a0:	200006c8 	.word	0x200006c8
 80040a4:	200006b0 	.word	0x200006b0
 80040a8:	20000804 	.word	0x20000804
 80040ac:	20000db4 	.word	0x20000db4
 80040b0:	20000da8 	.word	0x20000da8
 80040b4:	20000a2c 	.word	0x20000a2c
 80040b8:	200007f0 	.word	0x200007f0
 80040bc:	20000aa8 	.word	0x20000aa8
 80040c0:	20000a90 	.word	0x20000a90
 80040c4:	200009f0 	.word	0x200009f0
 80040c8:	20000a00 	.word	0x20000a00
 80040cc:	200006f8 	.word	0x200006f8
 80040d0:	200009e4 	.word	0x200009e4
 80040d4:	20000ba0 	.word	0x20000ba0
 80040d8:	20000d88 	.word	0x20000d88
 80040dc:	20000dbc 	.word	0x20000dbc
	r14=dPM; if(ePB<dPM) r14=ePB;		//r14=max(dPM,ePB);
 80040e0:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <Constant_Voltage+0xe34>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a8d      	ldr	r2, [pc, #564]	; (800431c <Constant_Voltage+0xe38>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	4b8d      	ldr	r3, [pc, #564]	; (8004320 <Constant_Voltage+0xe3c>)
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b8a      	ldr	r3, [pc, #552]	; (8004318 <Constant_Voltage+0xe34>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f7fd f800 	bl	80010f8 <__aeabi_fcmplt>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <Constant_Voltage+0xc22>
 80040fe:	4b88      	ldr	r3, [pc, #544]	; (8004320 <Constant_Voltage+0xe3c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a86      	ldr	r2, [pc, #536]	; (800431c <Constant_Voltage+0xe38>)
 8004104:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 8004106:	4b87      	ldr	r3, [pc, #540]	; (8004324 <Constant_Voltage+0xe40>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a87      	ldr	r2, [pc, #540]	; (8004328 <Constant_Voltage+0xe44>)
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b87      	ldr	r3, [pc, #540]	; (800432c <Constant_Voltage+0xe48>)
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4b84      	ldr	r3, [pc, #528]	; (8004324 <Constant_Voltage+0xe40>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4619      	mov	r1, r3
 8004118:	4610      	mov	r0, r2
 800411a:	f7fc ffed 	bl	80010f8 <__aeabi_fcmplt>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <Constant_Voltage+0xc48>
 8004124:	4b81      	ldr	r3, [pc, #516]	; (800432c <Constant_Voltage+0xe48>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a7f      	ldr	r2, [pc, #508]	; (8004328 <Constant_Voltage+0xe44>)
 800412a:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 800412c:	4b7d      	ldr	r3, [pc, #500]	; (8004324 <Constant_Voltage+0xe40>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a7f      	ldr	r2, [pc, #508]	; (8004330 <Constant_Voltage+0xe4c>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	4b7f      	ldr	r3, [pc, #508]	; (8004334 <Constant_Voltage+0xe50>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <Constant_Voltage+0xe40>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f7fc ffda 	bl	80010f8 <__aeabi_fcmplt>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d003      	beq.n	8004152 <Constant_Voltage+0xc6e>
 800414a:	4b7a      	ldr	r3, [pc, #488]	; (8004334 <Constant_Voltage+0xe50>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a78      	ldr	r2, [pc, #480]	; (8004330 <Constant_Voltage+0xe4c>)
 8004150:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 8004152:	4b74      	ldr	r3, [pc, #464]	; (8004324 <Constant_Voltage+0xe40>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a78      	ldr	r2, [pc, #480]	; (8004338 <Constant_Voltage+0xe54>)
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b78      	ldr	r3, [pc, #480]	; (800433c <Constant_Voltage+0xe58>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b71      	ldr	r3, [pc, #452]	; (8004324 <Constant_Voltage+0xe40>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f7fc ffc7 	bl	80010f8 <__aeabi_fcmplt>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <Constant_Voltage+0xc94>
 8004170:	4b72      	ldr	r3, [pc, #456]	; (800433c <Constant_Voltage+0xe58>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a70      	ldr	r2, [pc, #448]	; (8004338 <Constant_Voltage+0xe54>)
 8004176:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <Constant_Voltage+0xe40>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a70      	ldr	r2, [pc, #448]	; (8004340 <Constant_Voltage+0xe5c>)
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b70      	ldr	r3, [pc, #448]	; (8004344 <Constant_Voltage+0xe60>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	4b67      	ldr	r3, [pc, #412]	; (8004324 <Constant_Voltage+0xe40>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f7fc ffb4 	bl	80010f8 <__aeabi_fcmplt>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <Constant_Voltage+0xcba>
 8004196:	4b6b      	ldr	r3, [pc, #428]	; (8004344 <Constant_Voltage+0xe60>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a69      	ldr	r2, [pc, #420]	; (8004340 <Constant_Voltage+0xe5c>)
 800419c:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 800419e:	4b61      	ldr	r3, [pc, #388]	; (8004324 <Constant_Voltage+0xe40>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a69      	ldr	r2, [pc, #420]	; (8004348 <Constant_Voltage+0xe64>)
 80041a4:	6013      	str	r3, [r2, #0]
 80041a6:	4b69      	ldr	r3, [pc, #420]	; (800434c <Constant_Voltage+0xe68>)
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	4b5e      	ldr	r3, [pc, #376]	; (8004324 <Constant_Voltage+0xe40>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4619      	mov	r1, r3
 80041b0:	4610      	mov	r0, r2
 80041b2:	f7fc ffa1 	bl	80010f8 <__aeabi_fcmplt>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <Constant_Voltage+0xce0>
 80041bc:	4b63      	ldr	r3, [pc, #396]	; (800434c <Constant_Voltage+0xe68>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a61      	ldr	r2, [pc, #388]	; (8004348 <Constant_Voltage+0xe64>)
 80041c2:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 80041c4:	4b57      	ldr	r3, [pc, #348]	; (8004324 <Constant_Voltage+0xe40>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a61      	ldr	r2, [pc, #388]	; (8004350 <Constant_Voltage+0xe6c>)
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b61      	ldr	r3, [pc, #388]	; (8004354 <Constant_Voltage+0xe70>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	4b54      	ldr	r3, [pc, #336]	; (8004324 <Constant_Voltage+0xe40>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4610      	mov	r0, r2
 80041d8:	f7fc ff8e 	bl	80010f8 <__aeabi_fcmplt>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <Constant_Voltage+0xd06>
 80041e2:	4b5c      	ldr	r3, [pc, #368]	; (8004354 <Constant_Voltage+0xe70>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a5a      	ldr	r2, [pc, #360]	; (8004350 <Constant_Voltage+0xe6c>)
 80041e8:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 80041ea:	4b4e      	ldr	r3, [pc, #312]	; (8004324 <Constant_Voltage+0xe40>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a5a      	ldr	r2, [pc, #360]	; (8004358 <Constant_Voltage+0xe74>)
 80041f0:	6013      	str	r3, [r2, #0]
 80041f2:	4b4b      	ldr	r3, [pc, #300]	; (8004320 <Constant_Voltage+0xe3c>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b4b      	ldr	r3, [pc, #300]	; (8004324 <Constant_Voltage+0xe40>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4619      	mov	r1, r3
 80041fc:	4610      	mov	r0, r2
 80041fe:	f7fc ff7b 	bl	80010f8 <__aeabi_fcmplt>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <Constant_Voltage+0xd2c>
 8004208:	4b45      	ldr	r3, [pc, #276]	; (8004320 <Constant_Voltage+0xe3c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a52      	ldr	r2, [pc, #328]	; (8004358 <Constant_Voltage+0xe74>)
 800420e:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 8004210:	4b52      	ldr	r3, [pc, #328]	; (800435c <Constant_Voltage+0xe78>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a52      	ldr	r2, [pc, #328]	; (8004360 <Constant_Voltage+0xe7c>)
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b44      	ldr	r3, [pc, #272]	; (800432c <Constant_Voltage+0xe48>)
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	4b4f      	ldr	r3, [pc, #316]	; (800435c <Constant_Voltage+0xe78>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4619      	mov	r1, r3
 8004222:	4610      	mov	r0, r2
 8004224:	f7fc ff68 	bl	80010f8 <__aeabi_fcmplt>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <Constant_Voltage+0xd52>
 800422e:	4b3f      	ldr	r3, [pc, #252]	; (800432c <Constant_Voltage+0xe48>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a4b      	ldr	r2, [pc, #300]	; (8004360 <Constant_Voltage+0xe7c>)
 8004234:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 8004236:	4b49      	ldr	r3, [pc, #292]	; (800435c <Constant_Voltage+0xe78>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4a      	ldr	r2, [pc, #296]	; (8004364 <Constant_Voltage+0xe80>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4b3d      	ldr	r3, [pc, #244]	; (8004334 <Constant_Voltage+0xe50>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b46      	ldr	r3, [pc, #280]	; (800435c <Constant_Voltage+0xe78>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	4610      	mov	r0, r2
 800424a:	f7fc ff55 	bl	80010f8 <__aeabi_fcmplt>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <Constant_Voltage+0xd78>
 8004254:	4b37      	ldr	r3, [pc, #220]	; (8004334 <Constant_Voltage+0xe50>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a42      	ldr	r2, [pc, #264]	; (8004364 <Constant_Voltage+0xe80>)
 800425a:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 800425c:	4b3f      	ldr	r3, [pc, #252]	; (800435c <Constant_Voltage+0xe78>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a41      	ldr	r2, [pc, #260]	; (8004368 <Constant_Voltage+0xe84>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b35      	ldr	r3, [pc, #212]	; (800433c <Constant_Voltage+0xe58>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b3c      	ldr	r3, [pc, #240]	; (800435c <Constant_Voltage+0xe78>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7fc ff42 	bl	80010f8 <__aeabi_fcmplt>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <Constant_Voltage+0xd9e>
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <Constant_Voltage+0xe58>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a3a      	ldr	r2, [pc, #232]	; (8004368 <Constant_Voltage+0xe84>)
 8004280:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 8004282:	4b36      	ldr	r3, [pc, #216]	; (800435c <Constant_Voltage+0xe78>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a39      	ldr	r2, [pc, #228]	; (800436c <Constant_Voltage+0xe88>)
 8004288:	6013      	str	r3, [r2, #0]
 800428a:	4b2e      	ldr	r3, [pc, #184]	; (8004344 <Constant_Voltage+0xe60>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b33      	ldr	r3, [pc, #204]	; (800435c <Constant_Voltage+0xe78>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4619      	mov	r1, r3
 8004294:	4610      	mov	r0, r2
 8004296:	f7fc ff2f 	bl	80010f8 <__aeabi_fcmplt>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <Constant_Voltage+0xdc4>
 80042a0:	4b28      	ldr	r3, [pc, #160]	; (8004344 <Constant_Voltage+0xe60>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a31      	ldr	r2, [pc, #196]	; (800436c <Constant_Voltage+0xe88>)
 80042a6:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 80042a8:	4b2c      	ldr	r3, [pc, #176]	; (800435c <Constant_Voltage+0xe78>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a30      	ldr	r2, [pc, #192]	; (8004370 <Constant_Voltage+0xe8c>)
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b26      	ldr	r3, [pc, #152]	; (800434c <Constant_Voltage+0xe68>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <Constant_Voltage+0xe78>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4619      	mov	r1, r3
 80042ba:	4610      	mov	r0, r2
 80042bc:	f7fc ff1c 	bl	80010f8 <__aeabi_fcmplt>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <Constant_Voltage+0xdea>
 80042c6:	4b21      	ldr	r3, [pc, #132]	; (800434c <Constant_Voltage+0xe68>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a29      	ldr	r2, [pc, #164]	; (8004370 <Constant_Voltage+0xe8c>)
 80042cc:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 80042ce:	4b23      	ldr	r3, [pc, #140]	; (800435c <Constant_Voltage+0xe78>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a28      	ldr	r2, [pc, #160]	; (8004374 <Constant_Voltage+0xe90>)
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <Constant_Voltage+0xe70>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <Constant_Voltage+0xe78>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fc ff09 	bl	80010f8 <__aeabi_fcmplt>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <Constant_Voltage+0xe10>
 80042ec:	4b19      	ldr	r3, [pc, #100]	; (8004354 <Constant_Voltage+0xe70>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a20      	ldr	r2, [pc, #128]	; (8004374 <Constant_Voltage+0xe90>)
 80042f2:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 80042f4:	4b19      	ldr	r3, [pc, #100]	; (800435c <Constant_Voltage+0xe78>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <Constant_Voltage+0xe94>)
 80042fa:	6013      	str	r3, [r2, #0]
 80042fc:	4b08      	ldr	r3, [pc, #32]	; (8004320 <Constant_Voltage+0xe3c>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	4b16      	ldr	r3, [pc, #88]	; (800435c <Constant_Voltage+0xe78>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4619      	mov	r1, r3
 8004306:	4610      	mov	r0, r2
 8004308:	f7fc fef6 	bl	80010f8 <__aeabi_fcmplt>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d036      	beq.n	8004380 <Constant_Voltage+0xe9c>
 8004312:	4b03      	ldr	r3, [pc, #12]	; (8004320 <Constant_Voltage+0xe3c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	e031      	b.n	800437c <Constant_Voltage+0xe98>
 8004318:	200006e8 	.word	0x200006e8
 800431c:	20000678 	.word	0x20000678
 8004320:	200009f0 	.word	0x200009f0
 8004324:	20000d7c 	.word	0x20000d7c
 8004328:	20000d8c 	.word	0x20000d8c
 800432c:	20000d68 	.word	0x20000d68
 8004330:	20000aa4 	.word	0x20000aa4
 8004334:	20000da0 	.word	0x20000da0
 8004338:	200007e0 	.word	0x200007e0
 800433c:	200006b0 	.word	0x200006b0
 8004340:	20000a30 	.word	0x20000a30
 8004344:	20000db4 	.word	0x20000db4
 8004348:	20000d84 	.word	0x20000d84
 800434c:	20000a2c 	.word	0x20000a2c
 8004350:	200009f8 	.word	0x200009f8
 8004354:	20000aa8 	.word	0x20000aa8
 8004358:	200007f8 	.word	0x200007f8
 800435c:	20000d94 	.word	0x20000d94
 8004360:	20000c8c 	.word	0x20000c8c
 8004364:	20000d9c 	.word	0x20000d9c
 8004368:	20000db0 	.word	0x20000db0
 800436c:	200006ac 	.word	0x200006ac
 8004370:	200007d0 	.word	0x200007d0
 8004374:	20000a14 	.word	0x20000a14
 8004378:	20000684 	.word	0x20000684
 800437c:	4a8d      	ldr	r2, [pc, #564]	; (80045b4 <Constant_Voltage+0x10d0>)
 800437e:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 8004380:	4b8d      	ldr	r3, [pc, #564]	; (80045b8 <Constant_Voltage+0x10d4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a8d      	ldr	r2, [pc, #564]	; (80045bc <Constant_Voltage+0x10d8>)
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <Constant_Voltage+0x10dc>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b8a      	ldr	r3, [pc, #552]	; (80045b8 <Constant_Voltage+0x10d4>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4619      	mov	r1, r3
 8004392:	4610      	mov	r0, r2
 8004394:	f7fc feb0 	bl	80010f8 <__aeabi_fcmplt>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <Constant_Voltage+0xec2>
 800439e:	4b88      	ldr	r3, [pc, #544]	; (80045c0 <Constant_Voltage+0x10dc>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a86      	ldr	r2, [pc, #536]	; (80045bc <Constant_Voltage+0x10d8>)
 80043a4:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 80043a6:	4b84      	ldr	r3, [pc, #528]	; (80045b8 <Constant_Voltage+0x10d4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a86      	ldr	r2, [pc, #536]	; (80045c4 <Constant_Voltage+0x10e0>)
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b86      	ldr	r3, [pc, #536]	; (80045c8 <Constant_Voltage+0x10e4>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b81      	ldr	r3, [pc, #516]	; (80045b8 <Constant_Voltage+0x10d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4619      	mov	r1, r3
 80043b8:	4610      	mov	r0, r2
 80043ba:	f7fc fe9d 	bl	80010f8 <__aeabi_fcmplt>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <Constant_Voltage+0xee8>
 80043c4:	4b80      	ldr	r3, [pc, #512]	; (80045c8 <Constant_Voltage+0x10e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a7e      	ldr	r2, [pc, #504]	; (80045c4 <Constant_Voltage+0x10e0>)
 80043ca:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 80043cc:	4b7a      	ldr	r3, [pc, #488]	; (80045b8 <Constant_Voltage+0x10d4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a7e      	ldr	r2, [pc, #504]	; (80045cc <Constant_Voltage+0x10e8>)
 80043d2:	6013      	str	r3, [r2, #0]
 80043d4:	4b7e      	ldr	r3, [pc, #504]	; (80045d0 <Constant_Voltage+0x10ec>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b77      	ldr	r3, [pc, #476]	; (80045b8 <Constant_Voltage+0x10d4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f7fc fe8a 	bl	80010f8 <__aeabi_fcmplt>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <Constant_Voltage+0xf0e>
 80043ea:	4b79      	ldr	r3, [pc, #484]	; (80045d0 <Constant_Voltage+0x10ec>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a77      	ldr	r2, [pc, #476]	; (80045cc <Constant_Voltage+0x10e8>)
 80043f0:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 80043f2:	4b71      	ldr	r3, [pc, #452]	; (80045b8 <Constant_Voltage+0x10d4>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a77      	ldr	r2, [pc, #476]	; (80045d4 <Constant_Voltage+0x10f0>)
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b77      	ldr	r3, [pc, #476]	; (80045d8 <Constant_Voltage+0x10f4>)
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	4b6e      	ldr	r3, [pc, #440]	; (80045b8 <Constant_Voltage+0x10d4>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7fc fe77 	bl	80010f8 <__aeabi_fcmplt>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <Constant_Voltage+0xf34>
 8004410:	4b71      	ldr	r3, [pc, #452]	; (80045d8 <Constant_Voltage+0x10f4>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a6f      	ldr	r2, [pc, #444]	; (80045d4 <Constant_Voltage+0x10f0>)
 8004416:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 8004418:	4b67      	ldr	r3, [pc, #412]	; (80045b8 <Constant_Voltage+0x10d4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a6f      	ldr	r2, [pc, #444]	; (80045dc <Constant_Voltage+0x10f8>)
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b6f      	ldr	r3, [pc, #444]	; (80045e0 <Constant_Voltage+0x10fc>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b64      	ldr	r3, [pc, #400]	; (80045b8 <Constant_Voltage+0x10d4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7fc fe64 	bl	80010f8 <__aeabi_fcmplt>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <Constant_Voltage+0xf5a>
 8004436:	4b6a      	ldr	r3, [pc, #424]	; (80045e0 <Constant_Voltage+0x10fc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a68      	ldr	r2, [pc, #416]	; (80045dc <Constant_Voltage+0x10f8>)
 800443c:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 800443e:	4b5e      	ldr	r3, [pc, #376]	; (80045b8 <Constant_Voltage+0x10d4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a68      	ldr	r2, [pc, #416]	; (80045e4 <Constant_Voltage+0x1100>)
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <Constant_Voltage+0x1104>)
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	4b5b      	ldr	r3, [pc, #364]	; (80045b8 <Constant_Voltage+0x10d4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f7fc fe51 	bl	80010f8 <__aeabi_fcmplt>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <Constant_Voltage+0xf80>
 800445c:	4b62      	ldr	r3, [pc, #392]	; (80045e8 <Constant_Voltage+0x1104>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a60      	ldr	r2, [pc, #384]	; (80045e4 <Constant_Voltage+0x1100>)
 8004462:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 8004464:	4b54      	ldr	r3, [pc, #336]	; (80045b8 <Constant_Voltage+0x10d4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a60      	ldr	r2, [pc, #384]	; (80045ec <Constant_Voltage+0x1108>)
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b60      	ldr	r3, [pc, #384]	; (80045f0 <Constant_Voltage+0x110c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b51      	ldr	r3, [pc, #324]	; (80045b8 <Constant_Voltage+0x10d4>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4619      	mov	r1, r3
 8004476:	4610      	mov	r0, r2
 8004478:	f7fc fe3e 	bl	80010f8 <__aeabi_fcmplt>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <Constant_Voltage+0xfa6>
 8004482:	4b5b      	ldr	r3, [pc, #364]	; (80045f0 <Constant_Voltage+0x110c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a59      	ldr	r2, [pc, #356]	; (80045ec <Constant_Voltage+0x1108>)
 8004488:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 800448a:	4b5a      	ldr	r3, [pc, #360]	; (80045f4 <Constant_Voltage+0x1110>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a5a      	ldr	r2, [pc, #360]	; (80045f8 <Constant_Voltage+0x1114>)
 8004490:	6013      	str	r3, [r2, #0]
 8004492:	4b4b      	ldr	r3, [pc, #300]	; (80045c0 <Constant_Voltage+0x10dc>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b57      	ldr	r3, [pc, #348]	; (80045f4 <Constant_Voltage+0x1110>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	4610      	mov	r0, r2
 800449e:	f7fc fe2b 	bl	80010f8 <__aeabi_fcmplt>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <Constant_Voltage+0xfcc>
 80044a8:	4b45      	ldr	r3, [pc, #276]	; (80045c0 <Constant_Voltage+0x10dc>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a52      	ldr	r2, [pc, #328]	; (80045f8 <Constant_Voltage+0x1114>)
 80044ae:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 80044b0:	4b50      	ldr	r3, [pc, #320]	; (80045f4 <Constant_Voltage+0x1110>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a51      	ldr	r2, [pc, #324]	; (80045fc <Constant_Voltage+0x1118>)
 80044b6:	6013      	str	r3, [r2, #0]
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <Constant_Voltage+0x10e4>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b4d      	ldr	r3, [pc, #308]	; (80045f4 <Constant_Voltage+0x1110>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f7fc fe18 	bl	80010f8 <__aeabi_fcmplt>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <Constant_Voltage+0xff2>
 80044ce:	4b3e      	ldr	r3, [pc, #248]	; (80045c8 <Constant_Voltage+0x10e4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a4a      	ldr	r2, [pc, #296]	; (80045fc <Constant_Voltage+0x1118>)
 80044d4:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 80044d6:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <Constant_Voltage+0x1110>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a49      	ldr	r2, [pc, #292]	; (8004600 <Constant_Voltage+0x111c>)
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	4b3c      	ldr	r3, [pc, #240]	; (80045d0 <Constant_Voltage+0x10ec>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	4b44      	ldr	r3, [pc, #272]	; (80045f4 <Constant_Voltage+0x1110>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7fc fe05 	bl	80010f8 <__aeabi_fcmplt>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <Constant_Voltage+0x1018>
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <Constant_Voltage+0x10ec>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a41      	ldr	r2, [pc, #260]	; (8004600 <Constant_Voltage+0x111c>)
 80044fa:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 80044fc:	4b3d      	ldr	r3, [pc, #244]	; (80045f4 <Constant_Voltage+0x1110>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a40      	ldr	r2, [pc, #256]	; (8004604 <Constant_Voltage+0x1120>)
 8004502:	6013      	str	r3, [r2, #0]
 8004504:	4b34      	ldr	r3, [pc, #208]	; (80045d8 <Constant_Voltage+0x10f4>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <Constant_Voltage+0x1110>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4619      	mov	r1, r3
 800450e:	4610      	mov	r0, r2
 8004510:	f7fc fdf2 	bl	80010f8 <__aeabi_fcmplt>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <Constant_Voltage+0x103e>
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <Constant_Voltage+0x10f4>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a39      	ldr	r2, [pc, #228]	; (8004604 <Constant_Voltage+0x1120>)
 8004520:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 8004522:	4b34      	ldr	r3, [pc, #208]	; (80045f4 <Constant_Voltage+0x1110>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a38      	ldr	r2, [pc, #224]	; (8004608 <Constant_Voltage+0x1124>)
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	4b2d      	ldr	r3, [pc, #180]	; (80045e0 <Constant_Voltage+0x10fc>)
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b31      	ldr	r3, [pc, #196]	; (80045f4 <Constant_Voltage+0x1110>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4619      	mov	r1, r3
 8004534:	4610      	mov	r0, r2
 8004536:	f7fc fddf 	bl	80010f8 <__aeabi_fcmplt>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <Constant_Voltage+0x1064>
 8004540:	4b27      	ldr	r3, [pc, #156]	; (80045e0 <Constant_Voltage+0x10fc>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a30      	ldr	r2, [pc, #192]	; (8004608 <Constant_Voltage+0x1124>)
 8004546:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <Constant_Voltage+0x1110>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a2f      	ldr	r2, [pc, #188]	; (800460c <Constant_Voltage+0x1128>)
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	4b25      	ldr	r3, [pc, #148]	; (80045e8 <Constant_Voltage+0x1104>)
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <Constant_Voltage+0x1110>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4619      	mov	r1, r3
 800455a:	4610      	mov	r0, r2
 800455c:	f7fc fdcc 	bl	80010f8 <__aeabi_fcmplt>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <Constant_Voltage+0x108a>
 8004566:	4b20      	ldr	r3, [pc, #128]	; (80045e8 <Constant_Voltage+0x1104>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a28      	ldr	r2, [pc, #160]	; (800460c <Constant_Voltage+0x1128>)
 800456c:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 800456e:	4b21      	ldr	r3, [pc, #132]	; (80045f4 <Constant_Voltage+0x1110>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a27      	ldr	r2, [pc, #156]	; (8004610 <Constant_Voltage+0x112c>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <Constant_Voltage+0x110c>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <Constant_Voltage+0x1110>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4619      	mov	r1, r3
 8004580:	4610      	mov	r0, r2
 8004582:	f7fc fdb9 	bl	80010f8 <__aeabi_fcmplt>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <Constant_Voltage+0x10b0>
 800458c:	4b18      	ldr	r3, [pc, #96]	; (80045f0 <Constant_Voltage+0x110c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1f      	ldr	r2, [pc, #124]	; (8004610 <Constant_Voltage+0x112c>)
 8004592:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 8004594:	4b1f      	ldr	r3, [pc, #124]	; (8004614 <Constant_Voltage+0x1130>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a1f      	ldr	r2, [pc, #124]	; (8004618 <Constant_Voltage+0x1134>)
 800459a:	6013      	str	r3, [r2, #0]
 800459c:	4b08      	ldr	r3, [pc, #32]	; (80045c0 <Constant_Voltage+0x10dc>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <Constant_Voltage+0x1130>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7fc fda6 	bl	80010f8 <__aeabi_fcmplt>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d038      	beq.n	8004624 <Constant_Voltage+0x1140>
 80045b2:	e033      	b.n	800461c <Constant_Voltage+0x1138>
 80045b4:	20000684 	.word	0x20000684
 80045b8:	20000828 	.word	0x20000828
 80045bc:	200006a4 	.word	0x200006a4
 80045c0:	20000d68 	.word	0x20000d68
 80045c4:	20000b8c 	.word	0x20000b8c
 80045c8:	20000da0 	.word	0x20000da0
 80045cc:	200007e8 	.word	0x200007e8
 80045d0:	200006b0 	.word	0x200006b0
 80045d4:	2000082c 	.word	0x2000082c
 80045d8:	20000db4 	.word	0x20000db4
 80045dc:	20000a20 	.word	0x20000a20
 80045e0:	20000a2c 	.word	0x20000a2c
 80045e4:	20000b88 	.word	0x20000b88
 80045e8:	20000aa8 	.word	0x20000aa8
 80045ec:	20000c88 	.word	0x20000c88
 80045f0:	200009f0 	.word	0x200009f0
 80045f4:	20000a28 	.word	0x20000a28
 80045f8:	200006cc 	.word	0x200006cc
 80045fc:	2000090c 	.word	0x2000090c
 8004600:	200009f4 	.word	0x200009f4
 8004604:	20000d78 	.word	0x20000d78
 8004608:	20000a88 	.word	0x20000a88
 800460c:	200006b8 	.word	0x200006b8
 8004610:	200006c0 	.word	0x200006c0
 8004614:	200006d4 	.word	0x200006d4
 8004618:	20000d80 	.word	0x20000d80
 800461c:	4b90      	ldr	r3, [pc, #576]	; (8004860 <Constant_Voltage+0x137c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a90      	ldr	r2, [pc, #576]	; (8004864 <Constant_Voltage+0x1380>)
 8004622:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 8004624:	4b90      	ldr	r3, [pc, #576]	; (8004868 <Constant_Voltage+0x1384>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a90      	ldr	r2, [pc, #576]	; (800486c <Constant_Voltage+0x1388>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	4b90      	ldr	r3, [pc, #576]	; (8004870 <Constant_Voltage+0x138c>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b8d      	ldr	r3, [pc, #564]	; (8004868 <Constant_Voltage+0x1384>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fc fd5e 	bl	80010f8 <__aeabi_fcmplt>
 800463c:	4603      	mov	r3, r0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <Constant_Voltage+0x1166>
 8004642:	4b8b      	ldr	r3, [pc, #556]	; (8004870 <Constant_Voltage+0x138c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a89      	ldr	r2, [pc, #548]	; (800486c <Constant_Voltage+0x1388>)
 8004648:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 800464a:	4b87      	ldr	r3, [pc, #540]	; (8004868 <Constant_Voltage+0x1384>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a89      	ldr	r2, [pc, #548]	; (8004874 <Constant_Voltage+0x1390>)
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	4b89      	ldr	r3, [pc, #548]	; (8004878 <Constant_Voltage+0x1394>)
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	4b84      	ldr	r3, [pc, #528]	; (8004868 <Constant_Voltage+0x1384>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4619      	mov	r1, r3
 800465c:	4610      	mov	r0, r2
 800465e:	f7fc fd4b 	bl	80010f8 <__aeabi_fcmplt>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <Constant_Voltage+0x118c>
 8004668:	4b83      	ldr	r3, [pc, #524]	; (8004878 <Constant_Voltage+0x1394>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a81      	ldr	r2, [pc, #516]	; (8004874 <Constant_Voltage+0x1390>)
 800466e:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 8004670:	4b7d      	ldr	r3, [pc, #500]	; (8004868 <Constant_Voltage+0x1384>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a81      	ldr	r2, [pc, #516]	; (800487c <Constant_Voltage+0x1398>)
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	4b81      	ldr	r3, [pc, #516]	; (8004880 <Constant_Voltage+0x139c>)
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b7a      	ldr	r3, [pc, #488]	; (8004868 <Constant_Voltage+0x1384>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4619      	mov	r1, r3
 8004682:	4610      	mov	r0, r2
 8004684:	f7fc fd38 	bl	80010f8 <__aeabi_fcmplt>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <Constant_Voltage+0x11b2>
 800468e:	4b7c      	ldr	r3, [pc, #496]	; (8004880 <Constant_Voltage+0x139c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a7a      	ldr	r2, [pc, #488]	; (800487c <Constant_Voltage+0x1398>)
 8004694:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 8004696:	4b74      	ldr	r3, [pc, #464]	; (8004868 <Constant_Voltage+0x1384>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7a      	ldr	r2, [pc, #488]	; (8004884 <Constant_Voltage+0x13a0>)
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	4b7a      	ldr	r3, [pc, #488]	; (8004888 <Constant_Voltage+0x13a4>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b71      	ldr	r3, [pc, #452]	; (8004868 <Constant_Voltage+0x1384>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	4610      	mov	r0, r2
 80046aa:	f7fc fd25 	bl	80010f8 <__aeabi_fcmplt>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <Constant_Voltage+0x11d8>
 80046b4:	4b74      	ldr	r3, [pc, #464]	; (8004888 <Constant_Voltage+0x13a4>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a72      	ldr	r2, [pc, #456]	; (8004884 <Constant_Voltage+0x13a0>)
 80046ba:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 80046bc:	4b6a      	ldr	r3, [pc, #424]	; (8004868 <Constant_Voltage+0x1384>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a72      	ldr	r2, [pc, #456]	; (800488c <Constant_Voltage+0x13a8>)
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4b72      	ldr	r3, [pc, #456]	; (8004890 <Constant_Voltage+0x13ac>)
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b67      	ldr	r3, [pc, #412]	; (8004868 <Constant_Voltage+0x1384>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f7fc fd12 	bl	80010f8 <__aeabi_fcmplt>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <Constant_Voltage+0x11fe>
 80046da:	4b6d      	ldr	r3, [pc, #436]	; (8004890 <Constant_Voltage+0x13ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a6b      	ldr	r2, [pc, #428]	; (800488c <Constant_Voltage+0x13a8>)
 80046e0:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 80046e2:	4b61      	ldr	r3, [pc, #388]	; (8004868 <Constant_Voltage+0x1384>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a6b      	ldr	r2, [pc, #428]	; (8004894 <Constant_Voltage+0x13b0>)
 80046e8:	6013      	str	r3, [r2, #0]
 80046ea:	4b6b      	ldr	r3, [pc, #428]	; (8004898 <Constant_Voltage+0x13b4>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b5e      	ldr	r3, [pc, #376]	; (8004868 <Constant_Voltage+0x1384>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fc fcff 	bl	80010f8 <__aeabi_fcmplt>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <Constant_Voltage+0x1224>
 8004700:	4b65      	ldr	r3, [pc, #404]	; (8004898 <Constant_Voltage+0x13b4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a63      	ldr	r2, [pc, #396]	; (8004894 <Constant_Voltage+0x13b0>)
 8004706:	6013      	str	r3, [r2, #0]

	///////////////////////////DEFUZZIFIKASI///////////////////////

	A=(r1*oZ)+(r2*oPS)+(r3*oPM)+(r4*oPB)+(r5*oPH)+(r6*oPH)+(r7*oPH);
 8004708:	4b64      	ldr	r3, [pc, #400]	; (800489c <Constant_Voltage+0x13b8>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <Constant_Voltage+0x13bc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	4610      	mov	r0, r2
 8004714:	f7fc fb52 	bl	8000dbc <__aeabi_fmul>
 8004718:	4603      	mov	r3, r0
 800471a:	461c      	mov	r4, r3
 800471c:	4b61      	ldr	r3, [pc, #388]	; (80048a4 <Constant_Voltage+0x13c0>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b61      	ldr	r3, [pc, #388]	; (80048a8 <Constant_Voltage+0x13c4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f7fc fb48 	bl	8000dbc <__aeabi_fmul>
 800472c:	4603      	mov	r3, r0
 800472e:	4619      	mov	r1, r3
 8004730:	4620      	mov	r0, r4
 8004732:	f7fc fa3b 	bl	8000bac <__addsf3>
 8004736:	4603      	mov	r3, r0
 8004738:	461c      	mov	r4, r3
 800473a:	4b5c      	ldr	r3, [pc, #368]	; (80048ac <Constant_Voltage+0x13c8>)
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b5c      	ldr	r3, [pc, #368]	; (80048b0 <Constant_Voltage+0x13cc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fc fb39 	bl	8000dbc <__aeabi_fmul>
 800474a:	4603      	mov	r3, r0
 800474c:	4619      	mov	r1, r3
 800474e:	4620      	mov	r0, r4
 8004750:	f7fc fa2c 	bl	8000bac <__addsf3>
 8004754:	4603      	mov	r3, r0
 8004756:	461c      	mov	r4, r3
 8004758:	4b56      	ldr	r3, [pc, #344]	; (80048b4 <Constant_Voltage+0x13d0>)
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b56      	ldr	r3, [pc, #344]	; (80048b8 <Constant_Voltage+0x13d4>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fc fb2a 	bl	8000dbc <__aeabi_fmul>
 8004768:	4603      	mov	r3, r0
 800476a:	4619      	mov	r1, r3
 800476c:	4620      	mov	r0, r4
 800476e:	f7fc fa1d 	bl	8000bac <__addsf3>
 8004772:	4603      	mov	r3, r0
 8004774:	461c      	mov	r4, r3
 8004776:	4b51      	ldr	r3, [pc, #324]	; (80048bc <Constant_Voltage+0x13d8>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	4b51      	ldr	r3, [pc, #324]	; (80048c0 <Constant_Voltage+0x13dc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fc fb1b 	bl	8000dbc <__aeabi_fmul>
 8004786:	4603      	mov	r3, r0
 8004788:	4619      	mov	r1, r3
 800478a:	4620      	mov	r0, r4
 800478c:	f7fc fa0e 	bl	8000bac <__addsf3>
 8004790:	4603      	mov	r3, r0
 8004792:	461c      	mov	r4, r3
 8004794:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <Constant_Voltage+0x13e0>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	4b49      	ldr	r3, [pc, #292]	; (80048c0 <Constant_Voltage+0x13dc>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4619      	mov	r1, r3
 800479e:	4610      	mov	r0, r2
 80047a0:	f7fc fb0c 	bl	8000dbc <__aeabi_fmul>
 80047a4:	4603      	mov	r3, r0
 80047a6:	4619      	mov	r1, r3
 80047a8:	4620      	mov	r0, r4
 80047aa:	f7fc f9ff 	bl	8000bac <__addsf3>
 80047ae:	4603      	mov	r3, r0
 80047b0:	461c      	mov	r4, r3
 80047b2:	4b45      	ldr	r3, [pc, #276]	; (80048c8 <Constant_Voltage+0x13e4>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b42      	ldr	r3, [pc, #264]	; (80048c0 <Constant_Voltage+0x13dc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7fc fafd 	bl	8000dbc <__aeabi_fmul>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4619      	mov	r1, r3
 80047c6:	4620      	mov	r0, r4
 80047c8:	f7fc f9f0 	bl	8000bac <__addsf3>
 80047cc:	4603      	mov	r3, r0
 80047ce:	461a      	mov	r2, r3
 80047d0:	4b3e      	ldr	r3, [pc, #248]	; (80048cc <Constant_Voltage+0x13e8>)
 80047d2:	601a      	str	r2, [r3, #0]
	B=(r8*oNS)+(r9*oZ)+(r10*oPS)+(r11*oPM)+(r12*oPB)+(r13*oPH)+(r14*oPH);
 80047d4:	4b3e      	ldr	r3, [pc, #248]	; (80048d0 <Constant_Voltage+0x13ec>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <Constant_Voltage+0x13f0>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7fc faec 	bl	8000dbc <__aeabi_fmul>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461c      	mov	r4, r3
 80047e8:	4b3b      	ldr	r3, [pc, #236]	; (80048d8 <Constant_Voltage+0x13f4>)
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <Constant_Voltage+0x13bc>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f7fc fae2 	bl	8000dbc <__aeabi_fmul>
 80047f8:	4603      	mov	r3, r0
 80047fa:	4619      	mov	r1, r3
 80047fc:	4620      	mov	r0, r4
 80047fe:	f7fc f9d5 	bl	8000bac <__addsf3>
 8004802:	4603      	mov	r3, r0
 8004804:	461c      	mov	r4, r3
 8004806:	4b35      	ldr	r3, [pc, #212]	; (80048dc <Constant_Voltage+0x13f8>)
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	4b27      	ldr	r3, [pc, #156]	; (80048a8 <Constant_Voltage+0x13c4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4619      	mov	r1, r3
 8004810:	4610      	mov	r0, r2
 8004812:	f7fc fad3 	bl	8000dbc <__aeabi_fmul>
 8004816:	4603      	mov	r3, r0
 8004818:	4619      	mov	r1, r3
 800481a:	4620      	mov	r0, r4
 800481c:	f7fc f9c6 	bl	8000bac <__addsf3>
 8004820:	4603      	mov	r3, r0
 8004822:	461c      	mov	r4, r3
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <Constant_Voltage+0x13fc>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <Constant_Voltage+0x13cc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fc fac4 	bl	8000dbc <__aeabi_fmul>
 8004834:	4603      	mov	r3, r0
 8004836:	4619      	mov	r1, r3
 8004838:	4620      	mov	r0, r4
 800483a:	f7fc f9b7 	bl	8000bac <__addsf3>
 800483e:	4603      	mov	r3, r0
 8004840:	461c      	mov	r4, r3
 8004842:	4b28      	ldr	r3, [pc, #160]	; (80048e4 <Constant_Voltage+0x1400>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <Constant_Voltage+0x13d4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f7fc fab5 	bl	8000dbc <__aeabi_fmul>
 8004852:	4603      	mov	r3, r0
 8004854:	4619      	mov	r1, r3
 8004856:	4620      	mov	r0, r4
 8004858:	f7fc f9a8 	bl	8000bac <__addsf3>
 800485c:	e044      	b.n	80048e8 <Constant_Voltage+0x1404>
 800485e:	bf00      	nop
 8004860:	20000d68 	.word	0x20000d68
 8004864:	20000d80 	.word	0x20000d80
 8004868:	200006d4 	.word	0x200006d4
 800486c:	200008fc 	.word	0x200008fc
 8004870:	20000da0 	.word	0x20000da0
 8004874:	20000824 	.word	0x20000824
 8004878:	200006b0 	.word	0x200006b0
 800487c:	200006fc 	.word	0x200006fc
 8004880:	20000db4 	.word	0x20000db4
 8004884:	20000d70 	.word	0x20000d70
 8004888:	20000a2c 	.word	0x20000a2c
 800488c:	20000a94 	.word	0x20000a94
 8004890:	20000aa8 	.word	0x20000aa8
 8004894:	20000a1c 	.word	0x20000a1c
 8004898:	200009f0 	.word	0x200009f0
 800489c:	20000db8 	.word	0x20000db8
 80048a0:	20000258 	.word	0x20000258
 80048a4:	20000ba4 	.word	0x20000ba4
 80048a8:	20000034 	.word	0x20000034
 80048ac:	200006c8 	.word	0x200006c8
 80048b0:	20000038 	.word	0x20000038
 80048b4:	20000804 	.word	0x20000804
 80048b8:	2000003c 	.word	0x2000003c
 80048bc:	20000da8 	.word	0x20000da8
 80048c0:	20000040 	.word	0x20000040
 80048c4:	200007f0 	.word	0x200007f0
 80048c8:	20000a90 	.word	0x20000a90
 80048cc:	200006f0 	.word	0x200006f0
 80048d0:	20000a00 	.word	0x20000a00
 80048d4:	20000030 	.word	0x20000030
 80048d8:	200006f8 	.word	0x200006f8
 80048dc:	200009e4 	.word	0x200009e4
 80048e0:	20000ba0 	.word	0x20000ba0
 80048e4:	20000d88 	.word	0x20000d88
 80048e8:	4603      	mov	r3, r0
 80048ea:	461c      	mov	r4, r3
 80048ec:	4b91      	ldr	r3, [pc, #580]	; (8004b34 <Constant_Voltage+0x1650>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	4b91      	ldr	r3, [pc, #580]	; (8004b38 <Constant_Voltage+0x1654>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	4610      	mov	r0, r2
 80048f8:	f7fc fa60 	bl	8000dbc <__aeabi_fmul>
 80048fc:	4603      	mov	r3, r0
 80048fe:	4619      	mov	r1, r3
 8004900:	4620      	mov	r0, r4
 8004902:	f7fc f953 	bl	8000bac <__addsf3>
 8004906:	4603      	mov	r3, r0
 8004908:	461c      	mov	r4, r3
 800490a:	4b8c      	ldr	r3, [pc, #560]	; (8004b3c <Constant_Voltage+0x1658>)
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	4b8a      	ldr	r3, [pc, #552]	; (8004b38 <Constant_Voltage+0x1654>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	4610      	mov	r0, r2
 8004916:	f7fc fa51 	bl	8000dbc <__aeabi_fmul>
 800491a:	4603      	mov	r3, r0
 800491c:	4619      	mov	r1, r3
 800491e:	4620      	mov	r0, r4
 8004920:	f7fc f944 	bl	8000bac <__addsf3>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	4b85      	ldr	r3, [pc, #532]	; (8004b40 <Constant_Voltage+0x165c>)
 800492a:	601a      	str	r2, [r3, #0]
	C=(r15*oNM)+(r16*oNS)+(r17*oZ)+(r18*oPS)+(r19*oPM)+(r20*oPB)+(r21*oPH);
 800492c:	4b85      	ldr	r3, [pc, #532]	; (8004b44 <Constant_Voltage+0x1660>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b85      	ldr	r3, [pc, #532]	; (8004b48 <Constant_Voltage+0x1664>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f7fc fa40 	bl	8000dbc <__aeabi_fmul>
 800493c:	4603      	mov	r3, r0
 800493e:	461c      	mov	r4, r3
 8004940:	4b82      	ldr	r3, [pc, #520]	; (8004b4c <Constant_Voltage+0x1668>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b82      	ldr	r3, [pc, #520]	; (8004b50 <Constant_Voltage+0x166c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4619      	mov	r1, r3
 800494a:	4610      	mov	r0, r2
 800494c:	f7fc fa36 	bl	8000dbc <__aeabi_fmul>
 8004950:	4603      	mov	r3, r0
 8004952:	4619      	mov	r1, r3
 8004954:	4620      	mov	r0, r4
 8004956:	f7fc f929 	bl	8000bac <__addsf3>
 800495a:	4603      	mov	r3, r0
 800495c:	461c      	mov	r4, r3
 800495e:	4b7d      	ldr	r3, [pc, #500]	; (8004b54 <Constant_Voltage+0x1670>)
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b7d      	ldr	r3, [pc, #500]	; (8004b58 <Constant_Voltage+0x1674>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fc fa27 	bl	8000dbc <__aeabi_fmul>
 800496e:	4603      	mov	r3, r0
 8004970:	4619      	mov	r1, r3
 8004972:	4620      	mov	r0, r4
 8004974:	f7fc f91a 	bl	8000bac <__addsf3>
 8004978:	4603      	mov	r3, r0
 800497a:	461c      	mov	r4, r3
 800497c:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <Constant_Voltage+0x1678>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b77      	ldr	r3, [pc, #476]	; (8004b60 <Constant_Voltage+0x167c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f7fc fa18 	bl	8000dbc <__aeabi_fmul>
 800498c:	4603      	mov	r3, r0
 800498e:	4619      	mov	r1, r3
 8004990:	4620      	mov	r0, r4
 8004992:	f7fc f90b 	bl	8000bac <__addsf3>
 8004996:	4603      	mov	r3, r0
 8004998:	461c      	mov	r4, r3
 800499a:	4b72      	ldr	r3, [pc, #456]	; (8004b64 <Constant_Voltage+0x1680>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b72      	ldr	r3, [pc, #456]	; (8004b68 <Constant_Voltage+0x1684>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4619      	mov	r1, r3
 80049a4:	4610      	mov	r0, r2
 80049a6:	f7fc fa09 	bl	8000dbc <__aeabi_fmul>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4619      	mov	r1, r3
 80049ae:	4620      	mov	r0, r4
 80049b0:	f7fc f8fc 	bl	8000bac <__addsf3>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461c      	mov	r4, r3
 80049b8:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <Constant_Voltage+0x1688>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b6c      	ldr	r3, [pc, #432]	; (8004b70 <Constant_Voltage+0x168c>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7fc f9fa 	bl	8000dbc <__aeabi_fmul>
 80049c8:	4603      	mov	r3, r0
 80049ca:	4619      	mov	r1, r3
 80049cc:	4620      	mov	r0, r4
 80049ce:	f7fc f8ed 	bl	8000bac <__addsf3>
 80049d2:	4603      	mov	r3, r0
 80049d4:	461c      	mov	r4, r3
 80049d6:	4b67      	ldr	r3, [pc, #412]	; (8004b74 <Constant_Voltage+0x1690>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	4b57      	ldr	r3, [pc, #348]	; (8004b38 <Constant_Voltage+0x1654>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4619      	mov	r1, r3
 80049e0:	4610      	mov	r0, r2
 80049e2:	f7fc f9eb 	bl	8000dbc <__aeabi_fmul>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4619      	mov	r1, r3
 80049ea:	4620      	mov	r0, r4
 80049ec:	f7fc f8de 	bl	8000bac <__addsf3>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b60      	ldr	r3, [pc, #384]	; (8004b78 <Constant_Voltage+0x1694>)
 80049f6:	601a      	str	r2, [r3, #0]
	D=(r22*oNB)+(r23*oNM)+(r24*oNS)+(r25*oZ)+(r26*oPS)+(r27*oPM)+(r28*oPB);
 80049f8:	4b60      	ldr	r3, [pc, #384]	; (8004b7c <Constant_Voltage+0x1698>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b60      	ldr	r3, [pc, #384]	; (8004b80 <Constant_Voltage+0x169c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7fc f9da 	bl	8000dbc <__aeabi_fmul>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	461c      	mov	r4, r3
 8004a0c:	4b5d      	ldr	r3, [pc, #372]	; (8004b84 <Constant_Voltage+0x16a0>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b4d      	ldr	r3, [pc, #308]	; (8004b48 <Constant_Voltage+0x1664>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f7fc f9d0 	bl	8000dbc <__aeabi_fmul>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7fc f8c3 	bl	8000bac <__addsf3>
 8004a26:	4603      	mov	r3, r0
 8004a28:	461c      	mov	r4, r3
 8004a2a:	4b57      	ldr	r3, [pc, #348]	; (8004b88 <Constant_Voltage+0x16a4>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	4b48      	ldr	r3, [pc, #288]	; (8004b50 <Constant_Voltage+0x166c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4619      	mov	r1, r3
 8004a34:	4610      	mov	r0, r2
 8004a36:	f7fc f9c1 	bl	8000dbc <__aeabi_fmul>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7fc f8b4 	bl	8000bac <__addsf3>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461c      	mov	r4, r3
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <Constant_Voltage+0x16a8>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <Constant_Voltage+0x1674>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	4610      	mov	r0, r2
 8004a54:	f7fc f9b2 	bl	8000dbc <__aeabi_fmul>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4620      	mov	r0, r4
 8004a5e:	f7fc f8a5 	bl	8000bac <__addsf3>
 8004a62:	4603      	mov	r3, r0
 8004a64:	461c      	mov	r4, r3
 8004a66:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <Constant_Voltage+0x16ac>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <Constant_Voltage+0x167c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	4610      	mov	r0, r2
 8004a72:	f7fc f9a3 	bl	8000dbc <__aeabi_fmul>
 8004a76:	4603      	mov	r3, r0
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	f7fc f896 	bl	8000bac <__addsf3>
 8004a80:	4603      	mov	r3, r0
 8004a82:	461c      	mov	r4, r3
 8004a84:	4b43      	ldr	r3, [pc, #268]	; (8004b94 <Constant_Voltage+0x16b0>)
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <Constant_Voltage+0x1684>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f7fc f994 	bl	8000dbc <__aeabi_fmul>
 8004a94:	4603      	mov	r3, r0
 8004a96:	4619      	mov	r1, r3
 8004a98:	4620      	mov	r0, r4
 8004a9a:	f7fc f887 	bl	8000bac <__addsf3>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	461c      	mov	r4, r3
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	; (8004b98 <Constant_Voltage+0x16b4>)
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b32      	ldr	r3, [pc, #200]	; (8004b70 <Constant_Voltage+0x168c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4610      	mov	r0, r2
 8004aae:	f7fc f985 	bl	8000dbc <__aeabi_fmul>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7fc f878 	bl	8000bac <__addsf3>
 8004abc:	4603      	mov	r3, r0
 8004abe:	461a      	mov	r2, r3
 8004ac0:	4b36      	ldr	r3, [pc, #216]	; (8004b9c <Constant_Voltage+0x16b8>)
 8004ac2:	601a      	str	r2, [r3, #0]
	E=(r29*oNH)+(r30*oNB)+(r31*oNM)+(r32*oNS)+(r33*oZ)+(r34*oPS)+(r35*oPM);
 8004ac4:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <Constant_Voltage+0x16bc>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <Constant_Voltage+0x16c0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fc f974 	bl	8000dbc <__aeabi_fmul>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	461c      	mov	r4, r3
 8004ad8:	4b33      	ldr	r3, [pc, #204]	; (8004ba8 <Constant_Voltage+0x16c4>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <Constant_Voltage+0x169c>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7fc f96a 	bl	8000dbc <__aeabi_fmul>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	4619      	mov	r1, r3
 8004aec:	4620      	mov	r0, r4
 8004aee:	f7fc f85d 	bl	8000bac <__addsf3>
 8004af2:	4603      	mov	r3, r0
 8004af4:	461c      	mov	r4, r3
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <Constant_Voltage+0x16c8>)
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <Constant_Voltage+0x1664>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f7fc f95b 	bl	8000dbc <__aeabi_fmul>
 8004b06:	4603      	mov	r3, r0
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	f7fc f84e 	bl	8000bac <__addsf3>
 8004b10:	4603      	mov	r3, r0
 8004b12:	461c      	mov	r4, r3
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <Constant_Voltage+0x16cc>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	4b0d      	ldr	r3, [pc, #52]	; (8004b50 <Constant_Voltage+0x166c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fc f94c 	bl	8000dbc <__aeabi_fmul>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4619      	mov	r1, r3
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f7fc f83f 	bl	8000bac <__addsf3>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	461c      	mov	r4, r3
 8004b32:	e03f      	b.n	8004bb4 <Constant_Voltage+0x16d0>
 8004b34:	20000dbc 	.word	0x20000dbc
 8004b38:	20000040 	.word	0x20000040
 8004b3c:	20000678 	.word	0x20000678
 8004b40:	200008f8 	.word	0x200008f8
 8004b44:	20000d8c 	.word	0x20000d8c
 8004b48:	2000002c 	.word	0x2000002c
 8004b4c:	20000aa4 	.word	0x20000aa4
 8004b50:	20000030 	.word	0x20000030
 8004b54:	200007e0 	.word	0x200007e0
 8004b58:	20000258 	.word	0x20000258
 8004b5c:	20000a30 	.word	0x20000a30
 8004b60:	20000034 	.word	0x20000034
 8004b64:	20000d84 	.word	0x20000d84
 8004b68:	20000038 	.word	0x20000038
 8004b6c:	200009f8 	.word	0x200009f8
 8004b70:	2000003c 	.word	0x2000003c
 8004b74:	200007f8 	.word	0x200007f8
 8004b78:	20000914 	.word	0x20000914
 8004b7c:	20000c8c 	.word	0x20000c8c
 8004b80:	20000028 	.word	0x20000028
 8004b84:	20000d9c 	.word	0x20000d9c
 8004b88:	20000db0 	.word	0x20000db0
 8004b8c:	200006ac 	.word	0x200006ac
 8004b90:	200007d0 	.word	0x200007d0
 8004b94:	20000a14 	.word	0x20000a14
 8004b98:	20000684 	.word	0x20000684
 8004b9c:	20000674 	.word	0x20000674
 8004ba0:	200006a4 	.word	0x200006a4
 8004ba4:	20000024 	.word	0x20000024
 8004ba8:	20000b8c 	.word	0x20000b8c
 8004bac:	200007e8 	.word	0x200007e8
 8004bb0:	2000082c 	.word	0x2000082c
 8004bb4:	4b91      	ldr	r3, [pc, #580]	; (8004dfc <Constant_Voltage+0x1918>)
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	4b91      	ldr	r3, [pc, #580]	; (8004e00 <Constant_Voltage+0x191c>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	4610      	mov	r0, r2
 8004bc0:	f7fc f8fc 	bl	8000dbc <__aeabi_fmul>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	4620      	mov	r0, r4
 8004bca:	f7fb ffef 	bl	8000bac <__addsf3>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	461c      	mov	r4, r3
 8004bd2:	4b8c      	ldr	r3, [pc, #560]	; (8004e04 <Constant_Voltage+0x1920>)
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b8c      	ldr	r3, [pc, #560]	; (8004e08 <Constant_Voltage+0x1924>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fc f8ed 	bl	8000dbc <__aeabi_fmul>
 8004be2:	4603      	mov	r3, r0
 8004be4:	4619      	mov	r1, r3
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fb ffe0 	bl	8000bac <__addsf3>
 8004bec:	4603      	mov	r3, r0
 8004bee:	461c      	mov	r4, r3
 8004bf0:	4b86      	ldr	r3, [pc, #536]	; (8004e0c <Constant_Voltage+0x1928>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b86      	ldr	r3, [pc, #536]	; (8004e10 <Constant_Voltage+0x192c>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7fc f8de 	bl	8000dbc <__aeabi_fmul>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4619      	mov	r1, r3
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7fb ffd1 	bl	8000bac <__addsf3>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b81      	ldr	r3, [pc, #516]	; (8004e14 <Constant_Voltage+0x1930>)
 8004c10:	601a      	str	r2, [r3, #0]
	F=(r36*oNH)+(r37*oNH)+(r38*oNB)+(r39*oNM)+(r40*oNS)+(r41*oZ)+(r42*oPS);
 8004c12:	4b81      	ldr	r3, [pc, #516]	; (8004e18 <Constant_Voltage+0x1934>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <Constant_Voltage+0x1938>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fc f8cd 	bl	8000dbc <__aeabi_fmul>
 8004c22:	4603      	mov	r3, r0
 8004c24:	461c      	mov	r4, r3
 8004c26:	4b7e      	ldr	r3, [pc, #504]	; (8004e20 <Constant_Voltage+0x193c>)
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	4b7c      	ldr	r3, [pc, #496]	; (8004e1c <Constant_Voltage+0x1938>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4610      	mov	r0, r2
 8004c32:	f7fc f8c3 	bl	8000dbc <__aeabi_fmul>
 8004c36:	4603      	mov	r3, r0
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f7fb ffb6 	bl	8000bac <__addsf3>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461c      	mov	r4, r3
 8004c44:	4b77      	ldr	r3, [pc, #476]	; (8004e24 <Constant_Voltage+0x1940>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	4b77      	ldr	r3, [pc, #476]	; (8004e28 <Constant_Voltage+0x1944>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f7fc f8b4 	bl	8000dbc <__aeabi_fmul>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4619      	mov	r1, r3
 8004c58:	4620      	mov	r0, r4
 8004c5a:	f7fb ffa7 	bl	8000bac <__addsf3>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461c      	mov	r4, r3
 8004c62:	4b72      	ldr	r3, [pc, #456]	; (8004e2c <Constant_Voltage+0x1948>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b72      	ldr	r3, [pc, #456]	; (8004e30 <Constant_Voltage+0x194c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	f7fc f8a5 	bl	8000dbc <__aeabi_fmul>
 8004c72:	4603      	mov	r3, r0
 8004c74:	4619      	mov	r1, r3
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7fb ff98 	bl	8000bac <__addsf3>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	461c      	mov	r4, r3
 8004c80:	4b6c      	ldr	r3, [pc, #432]	; (8004e34 <Constant_Voltage+0x1950>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4b6c      	ldr	r3, [pc, #432]	; (8004e38 <Constant_Voltage+0x1954>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7fc f896 	bl	8000dbc <__aeabi_fmul>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4619      	mov	r1, r3
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7fb ff89 	bl	8000bac <__addsf3>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	461c      	mov	r4, r3
 8004c9e:	4b67      	ldr	r3, [pc, #412]	; (8004e3c <Constant_Voltage+0x1958>)
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b57      	ldr	r3, [pc, #348]	; (8004e00 <Constant_Voltage+0x191c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7fc f887 	bl	8000dbc <__aeabi_fmul>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f7fb ff7a 	bl	8000bac <__addsf3>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	461c      	mov	r4, r3
 8004cbc:	4b60      	ldr	r3, [pc, #384]	; (8004e40 <Constant_Voltage+0x195c>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <Constant_Voltage+0x1924>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f7fc f878 	bl	8000dbc <__aeabi_fmul>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	f7fb ff6b 	bl	8000bac <__addsf3>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4b5a      	ldr	r3, [pc, #360]	; (8004e44 <Constant_Voltage+0x1960>)
 8004cdc:	601a      	str	r2, [r3, #0]
	G=(r43*oNH)+(r44*oNH)+(r45*oNH)+(r46*oNB)+(r47*oNM)+(r48*oNS)+(r49*oZ);
 8004cde:	4b5a      	ldr	r3, [pc, #360]	; (8004e48 <Constant_Voltage+0x1964>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b4e      	ldr	r3, [pc, #312]	; (8004e1c <Constant_Voltage+0x1938>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fc f867 	bl	8000dbc <__aeabi_fmul>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	461c      	mov	r4, r3
 8004cf2:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <Constant_Voltage+0x1968>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4b49      	ldr	r3, [pc, #292]	; (8004e1c <Constant_Voltage+0x1938>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fc f85d 	bl	8000dbc <__aeabi_fmul>
 8004d02:	4603      	mov	r3, r0
 8004d04:	4619      	mov	r1, r3
 8004d06:	4620      	mov	r0, r4
 8004d08:	f7fb ff50 	bl	8000bac <__addsf3>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	461c      	mov	r4, r3
 8004d10:	4b4f      	ldr	r3, [pc, #316]	; (8004e50 <Constant_Voltage+0x196c>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <Constant_Voltage+0x1938>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f7fc f84e 	bl	8000dbc <__aeabi_fmul>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4619      	mov	r1, r3
 8004d24:	4620      	mov	r0, r4
 8004d26:	f7fb ff41 	bl	8000bac <__addsf3>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461c      	mov	r4, r3
 8004d2e:	4b49      	ldr	r3, [pc, #292]	; (8004e54 <Constant_Voltage+0x1970>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b3d      	ldr	r3, [pc, #244]	; (8004e28 <Constant_Voltage+0x1944>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fc f83f 	bl	8000dbc <__aeabi_fmul>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4619      	mov	r1, r3
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7fb ff32 	bl	8000bac <__addsf3>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	461c      	mov	r4, r3
 8004d4c:	4b42      	ldr	r3, [pc, #264]	; (8004e58 <Constant_Voltage+0x1974>)
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	4b37      	ldr	r3, [pc, #220]	; (8004e30 <Constant_Voltage+0x194c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4619      	mov	r1, r3
 8004d56:	4610      	mov	r0, r2
 8004d58:	f7fc f830 	bl	8000dbc <__aeabi_fmul>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4620      	mov	r0, r4
 8004d62:	f7fb ff23 	bl	8000bac <__addsf3>
 8004d66:	4603      	mov	r3, r0
 8004d68:	461c      	mov	r4, r3
 8004d6a:	4b3c      	ldr	r3, [pc, #240]	; (8004e5c <Constant_Voltage+0x1978>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <Constant_Voltage+0x1954>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	4610      	mov	r0, r2
 8004d76:	f7fc f821 	bl	8000dbc <__aeabi_fmul>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7fb ff14 	bl	8000bac <__addsf3>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461c      	mov	r4, r3
 8004d88:	4b35      	ldr	r3, [pc, #212]	; (8004e60 <Constant_Voltage+0x197c>)
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	4b1c      	ldr	r3, [pc, #112]	; (8004e00 <Constant_Voltage+0x191c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4619      	mov	r1, r3
 8004d92:	4610      	mov	r0, r2
 8004d94:	f7fc f812 	bl	8000dbc <__aeabi_fmul>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7fb ff05 	bl	8000bac <__addsf3>
 8004da2:	4603      	mov	r3, r0
 8004da4:	461a      	mov	r2, r3
 8004da6:	4b2f      	ldr	r3, [pc, #188]	; (8004e64 <Constant_Voltage+0x1980>)
 8004da8:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8004daa:	4b2f      	ldr	r3, [pc, #188]	; (8004e68 <Constant_Voltage+0x1984>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b2f      	ldr	r3, [pc, #188]	; (8004e6c <Constant_Voltage+0x1988>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fb fef9 	bl	8000bac <__addsf3>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <Constant_Voltage+0x198c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f7fb fef1 	bl	8000bac <__addsf3>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4b29      	ldr	r3, [pc, #164]	; (8004e74 <Constant_Voltage+0x1990>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f7fb fee9 	bl	8000bac <__addsf3>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	4b26      	ldr	r3, [pc, #152]	; (8004e78 <Constant_Voltage+0x1994>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f7fb fee1 	bl	8000bac <__addsf3>
 8004dea:	4603      	mov	r3, r0
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <Constant_Voltage+0x1998>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7fb fed9 	bl	8000bac <__addsf3>
 8004dfa:	e041      	b.n	8004e80 <Constant_Voltage+0x199c>
 8004dfc:	20000a20 	.word	0x20000a20
 8004e00:	20000258 	.word	0x20000258
 8004e04:	20000b88 	.word	0x20000b88
 8004e08:	20000034 	.word	0x20000034
 8004e0c:	20000c88 	.word	0x20000c88
 8004e10:	20000038 	.word	0x20000038
 8004e14:	20000c74 	.word	0x20000c74
 8004e18:	200006cc 	.word	0x200006cc
 8004e1c:	20000024 	.word	0x20000024
 8004e20:	2000090c 	.word	0x2000090c
 8004e24:	200009f4 	.word	0x200009f4
 8004e28:	20000028 	.word	0x20000028
 8004e2c:	20000d78 	.word	0x20000d78
 8004e30:	2000002c 	.word	0x2000002c
 8004e34:	20000a88 	.word	0x20000a88
 8004e38:	20000030 	.word	0x20000030
 8004e3c:	200006b8 	.word	0x200006b8
 8004e40:	200006c0 	.word	0x200006c0
 8004e44:	20000da4 	.word	0x20000da4
 8004e48:	20000d80 	.word	0x20000d80
 8004e4c:	200008fc 	.word	0x200008fc
 8004e50:	20000824 	.word	0x20000824
 8004e54:	200006fc 	.word	0x200006fc
 8004e58:	20000d70 	.word	0x20000d70
 8004e5c:	20000a94 	.word	0x20000a94
 8004e60:	20000a1c 	.word	0x20000a1c
 8004e64:	20000a04 	.word	0x20000a04
 8004e68:	20000db8 	.word	0x20000db8
 8004e6c:	20000ba4 	.word	0x20000ba4
 8004e70:	200006c8 	.word	0x200006c8
 8004e74:	20000804 	.word	0x20000804
 8004e78:	20000da8 	.word	0x20000da8
 8004e7c:	200007f0 	.word	0x200007f0
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b91      	ldr	r3, [pc, #580]	; (80050cc <Constant_Voltage+0x1be8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4610      	mov	r0, r2
 8004e8c:	f7fb fe8e 	bl	8000bac <__addsf3>
 8004e90:	4603      	mov	r3, r0
 8004e92:	461a      	mov	r2, r3
 8004e94:	4b8e      	ldr	r3, [pc, #568]	; (80050d0 <Constant_Voltage+0x1bec>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	4610      	mov	r0, r2
 8004e9c:	f7fb fe86 	bl	8000bac <__addsf3>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	4b8b      	ldr	r3, [pc, #556]	; (80050d4 <Constant_Voltage+0x1bf0>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	f7fb fe7e 	bl	8000bac <__addsf3>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	4b88      	ldr	r3, [pc, #544]	; (80050d8 <Constant_Voltage+0x1bf4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	4610      	mov	r0, r2
 8004ebc:	f7fb fe76 	bl	8000bac <__addsf3>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	4b85      	ldr	r3, [pc, #532]	; (80050dc <Constant_Voltage+0x1bf8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fb fe6e 	bl	8000bac <__addsf3>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	4b82      	ldr	r3, [pc, #520]	; (80050e0 <Constant_Voltage+0x1bfc>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4619      	mov	r1, r3
 8004eda:	4610      	mov	r0, r2
 8004edc:	f7fb fe66 	bl	8000bac <__addsf3>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4b7f      	ldr	r3, [pc, #508]	; (80050e4 <Constant_Voltage+0x1c00>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f7fb fe5e 	bl	8000bac <__addsf3>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	4b7c      	ldr	r3, [pc, #496]	; (80050e8 <Constant_Voltage+0x1c04>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	4610      	mov	r0, r2
 8004efc:	f7fb fe56 	bl	8000bac <__addsf3>
 8004f00:	4603      	mov	r3, r0
 8004f02:	461a      	mov	r2, r3
 8004f04:	4b79      	ldr	r3, [pc, #484]	; (80050ec <Constant_Voltage+0x1c08>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fb fe4e 	bl	8000bac <__addsf3>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <Constant_Voltage+0x1c0c>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7fb fe46 	bl	8000bac <__addsf3>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b73      	ldr	r3, [pc, #460]	; (80050f4 <Constant_Voltage+0x1c10>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fb fe3e 	bl	8000bac <__addsf3>
 8004f30:	4603      	mov	r3, r0
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b70      	ldr	r3, [pc, #448]	; (80050f8 <Constant_Voltage+0x1c14>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fb fe36 	bl	8000bac <__addsf3>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b6d      	ldr	r3, [pc, #436]	; (80050fc <Constant_Voltage+0x1c18>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fb fe2e 	bl	8000bac <__addsf3>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b6a      	ldr	r3, [pc, #424]	; (8005100 <Constant_Voltage+0x1c1c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fb fe26 	bl	8000bac <__addsf3>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b67      	ldr	r3, [pc, #412]	; (8005104 <Constant_Voltage+0x1c20>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fb fe1e 	bl	8000bac <__addsf3>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b64      	ldr	r3, [pc, #400]	; (8005108 <Constant_Voltage+0x1c24>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fb fe16 	bl	8000bac <__addsf3>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <Constant_Voltage+0x1c28>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fb fe0e 	bl	8000bac <__addsf3>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b5e      	ldr	r3, [pc, #376]	; (8005110 <Constant_Voltage+0x1c2c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fb fe06 	bl	8000bac <__addsf3>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <Constant_Voltage+0x1c30>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fb fdfe 	bl	8000bac <__addsf3>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b58      	ldr	r3, [pc, #352]	; (8005118 <Constant_Voltage+0x1c34>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fb fdf6 	bl	8000bac <__addsf3>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b55      	ldr	r3, [pc, #340]	; (800511c <Constant_Voltage+0x1c38>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7fb fdee 	bl	8000bac <__addsf3>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b52      	ldr	r3, [pc, #328]	; (8005120 <Constant_Voltage+0x1c3c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fb fde6 	bl	8000bac <__addsf3>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <Constant_Voltage+0x1c40>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fb fdde 	bl	8000bac <__addsf3>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b4c      	ldr	r3, [pc, #304]	; (8005128 <Constant_Voltage+0x1c44>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f7fb fdd6 	bl	8000bac <__addsf3>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	4b49      	ldr	r3, [pc, #292]	; (800512c <Constant_Voltage+0x1c48>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fb fdce 	bl	8000bac <__addsf3>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	4b46      	ldr	r3, [pc, #280]	; (8005130 <Constant_Voltage+0x1c4c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7fb fdc6 	bl	8000bac <__addsf3>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <Constant_Voltage+0x1c50>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fb fdbe 	bl	8000bac <__addsf3>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	4b40      	ldr	r3, [pc, #256]	; (8005138 <Constant_Voltage+0x1c54>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fb fdb6 	bl	8000bac <__addsf3>
 8005040:	4603      	mov	r3, r0
 8005042:	461a      	mov	r2, r3
 8005044:	4b3d      	ldr	r3, [pc, #244]	; (800513c <Constant_Voltage+0x1c58>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fb fdae 	bl	8000bac <__addsf3>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <Constant_Voltage+0x1c5c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fb fda6 	bl	8000bac <__addsf3>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	4b37      	ldr	r3, [pc, #220]	; (8005144 <Constant_Voltage+0x1c60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7fb fd9e 	bl	8000bac <__addsf3>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	4b34      	ldr	r3, [pc, #208]	; (8005148 <Constant_Voltage+0x1c64>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fb fd96 	bl	8000bac <__addsf3>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	4b31      	ldr	r3, [pc, #196]	; (800514c <Constant_Voltage+0x1c68>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fb fd8e 	bl	8000bac <__addsf3>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <Constant_Voltage+0x1c6c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f7fb fd86 	bl	8000bac <__addsf3>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <Constant_Voltage+0x1c70>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fb fd7e 	bl	8000bac <__addsf3>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b28      	ldr	r3, [pc, #160]	; (8005158 <Constant_Voltage+0x1c74>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fb fd76 	bl	8000bac <__addsf3>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <Constant_Voltage+0x1c78>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	e04a      	b.n	8005160 <Constant_Voltage+0x1c7c>
 80050ca:	bf00      	nop
 80050cc:	20000a90 	.word	0x20000a90
 80050d0:	20000a00 	.word	0x20000a00
 80050d4:	200006f8 	.word	0x200006f8
 80050d8:	200009e4 	.word	0x200009e4
 80050dc:	20000ba0 	.word	0x20000ba0
 80050e0:	20000d88 	.word	0x20000d88
 80050e4:	20000dbc 	.word	0x20000dbc
 80050e8:	20000678 	.word	0x20000678
 80050ec:	20000d8c 	.word	0x20000d8c
 80050f0:	20000aa4 	.word	0x20000aa4
 80050f4:	200007e0 	.word	0x200007e0
 80050f8:	20000a30 	.word	0x20000a30
 80050fc:	20000d84 	.word	0x20000d84
 8005100:	200009f8 	.word	0x200009f8
 8005104:	200007f8 	.word	0x200007f8
 8005108:	20000c8c 	.word	0x20000c8c
 800510c:	20000d9c 	.word	0x20000d9c
 8005110:	20000db0 	.word	0x20000db0
 8005114:	200006ac 	.word	0x200006ac
 8005118:	200007d0 	.word	0x200007d0
 800511c:	20000a14 	.word	0x20000a14
 8005120:	20000684 	.word	0x20000684
 8005124:	200006a4 	.word	0x200006a4
 8005128:	20000b8c 	.word	0x20000b8c
 800512c:	200007e8 	.word	0x200007e8
 8005130:	2000082c 	.word	0x2000082c
 8005134:	20000a20 	.word	0x20000a20
 8005138:	20000b88 	.word	0x20000b88
 800513c:	20000c88 	.word	0x20000c88
 8005140:	200006cc 	.word	0x200006cc
 8005144:	2000090c 	.word	0x2000090c
 8005148:	200009f4 	.word	0x200009f4
 800514c:	20000d78 	.word	0x20000d78
 8005150:	20000a88 	.word	0x20000a88
 8005154:	200006b8 	.word	0x200006b8
 8005158:	200006c0 	.word	0x200006c0
 800515c:	20000d80 	.word	0x20000d80
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fb fd22 	bl	8000bac <__addsf3>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	4b72      	ldr	r3, [pc, #456]	; (8005338 <Constant_Voltage+0x1e54>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7fb fd1a 	bl	8000bac <__addsf3>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	4b6f      	ldr	r3, [pc, #444]	; (800533c <Constant_Voltage+0x1e58>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fb fd12 	bl	8000bac <__addsf3>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	4b6c      	ldr	r3, [pc, #432]	; (8005340 <Constant_Voltage+0x1e5c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4619      	mov	r1, r3
 8005192:	4610      	mov	r0, r2
 8005194:	f7fb fd0a 	bl	8000bac <__addsf3>
 8005198:	4603      	mov	r3, r0
 800519a:	461a      	mov	r2, r3
 800519c:	4b69      	ldr	r3, [pc, #420]	; (8005344 <Constant_Voltage+0x1e60>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f7fb fd02 	bl	8000bac <__addsf3>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b66      	ldr	r3, [pc, #408]	; (8005348 <Constant_Voltage+0x1e64>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f7fb fcfa 	bl	8000bac <__addsf3>
 80051b8:	4603      	mov	r3, r0
 80051ba:	461a      	mov	r2, r3
 80051bc:	4b63      	ldr	r3, [pc, #396]	; (800534c <Constant_Voltage+0x1e68>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4610      	mov	r0, r2
 80051c4:	f7fb fcf2 	bl	8000bac <__addsf3>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	4b60      	ldr	r3, [pc, #384]	; (8005350 <Constant_Voltage+0x1e6c>)
 80051ce:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 80051d0:	4b60      	ldr	r3, [pc, #384]	; (8005354 <Constant_Voltage+0x1e70>)
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b60      	ldr	r3, [pc, #384]	; (8005358 <Constant_Voltage+0x1e74>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f7fb fce6 	bl	8000bac <__addsf3>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	4b5d      	ldr	r3, [pc, #372]	; (800535c <Constant_Voltage+0x1e78>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4619      	mov	r1, r3
 80051ea:	4610      	mov	r0, r2
 80051ec:	f7fb fcde 	bl	8000bac <__addsf3>
 80051f0:	4603      	mov	r3, r0
 80051f2:	461a      	mov	r2, r3
 80051f4:	4b5a      	ldr	r3, [pc, #360]	; (8005360 <Constant_Voltage+0x1e7c>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4619      	mov	r1, r3
 80051fa:	4610      	mov	r0, r2
 80051fc:	f7fb fcd6 	bl	8000bac <__addsf3>
 8005200:	4603      	mov	r3, r0
 8005202:	461a      	mov	r2, r3
 8005204:	4b57      	ldr	r3, [pc, #348]	; (8005364 <Constant_Voltage+0x1e80>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4619      	mov	r1, r3
 800520a:	4610      	mov	r0, r2
 800520c:	f7fb fcce 	bl	8000bac <__addsf3>
 8005210:	4603      	mov	r3, r0
 8005212:	461a      	mov	r2, r3
 8005214:	4b54      	ldr	r3, [pc, #336]	; (8005368 <Constant_Voltage+0x1e84>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f7fb fcc6 	bl	8000bac <__addsf3>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	4b51      	ldr	r3, [pc, #324]	; (800536c <Constant_Voltage+0x1e88>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fb fcbe 	bl	8000bac <__addsf3>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	4b46      	ldr	r3, [pc, #280]	; (8005350 <Constant_Voltage+0x1e6c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fb fe72 	bl	8000f24 <__aeabi_fdiv>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	4b4a      	ldr	r3, [pc, #296]	; (8005370 <Constant_Voltage+0x1e8c>)
 8005246:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 8005248:	4b4a      	ldr	r3, [pc, #296]	; (8005374 <Constant_Voltage+0x1e90>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b48      	ldr	r3, [pc, #288]	; (8005370 <Constant_Voltage+0x1e8c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f7fb fcaa 	bl	8000bac <__addsf3>
 8005258:	4603      	mov	r3, r0
 800525a:	461a      	mov	r2, r3
 800525c:	4b45      	ldr	r3, [pc, #276]	; (8005374 <Constant_Voltage+0x1e90>)
 800525e:	601a      	str	r2, [r3, #0]

	if(dc>=80)	dc=80;
 8005260:	4b44      	ldr	r3, [pc, #272]	; (8005374 <Constant_Voltage+0x1e90>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4944      	ldr	r1, [pc, #272]	; (8005378 <Constant_Voltage+0x1e94>)
 8005266:	4618      	mov	r0, r3
 8005268:	f7fb ff5a 	bl	8001120 <__aeabi_fcmpge>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <Constant_Voltage+0x1d94>
 8005272:	4b40      	ldr	r3, [pc, #256]	; (8005374 <Constant_Voltage+0x1e90>)
 8005274:	4a40      	ldr	r2, [pc, #256]	; (8005378 <Constant_Voltage+0x1e94>)
 8005276:	601a      	str	r2, [r3, #0]
	if(dc<=0)	dc=0;
 8005278:	4b3e      	ldr	r3, [pc, #248]	; (8005374 <Constant_Voltage+0x1e90>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f04f 0100 	mov.w	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f7fb ff43 	bl	800110c <__aeabi_fcmple>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <Constant_Voltage+0x1db0>
 800528c:	4b39      	ldr	r3, [pc, #228]	; (8005374 <Constant_Voltage+0x1e90>)
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 8005294:	4b37      	ldr	r3, [pc, #220]	; (8005374 <Constant_Voltage+0x1e90>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4938      	ldr	r1, [pc, #224]	; (800537c <Constant_Voltage+0x1e98>)
 800529a:	4618      	mov	r0, r3
 800529c:	f7fb fe42 	bl	8000f24 <__aeabi_fdiv>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b36      	ldr	r3, [pc, #216]	; (8005380 <Constant_Voltage+0x1e9c>)
 80052a6:	601a      	str	r2, [r3, #0]
//		  	while(p>0)
//		  		p--;
//		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//	}

	if(	flag_trip_overvoltage == 1		||
 80052a8:	4b36      	ldr	r3, [pc, #216]	; (8005384 <Constant_Voltage+0x1ea0>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d027      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		flag_trip_overtemperature == 1	||
 80052b0:	4b35      	ldr	r3, [pc, #212]	; (8005388 <Constant_Voltage+0x1ea4>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d023      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		flag_trip_undertemperature == 1	||
 80052b8:	4b34      	ldr	r3, [pc, #208]	; (800538c <Constant_Voltage+0x1ea8>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d01f      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		flag_trip_overcurrentcharge == 1||
 80052c0:	4b33      	ldr	r3, [pc, #204]	; (8005390 <Constant_Voltage+0x1eac>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d01b      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		flag_trip_SOCOverCharge == 1	||
 80052c8:	4b32      	ldr	r3, [pc, #200]	; (8005394 <Constant_Voltage+0x1eb0>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d017      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		flag_trip_shortcircuit == 1		||
 80052d0:	4b31      	ldr	r3, [pc, #196]	; (8005398 <Constant_Voltage+0x1eb4>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d013      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		flag_trip_systemfailure == 1	||
 80052d8:	4b30      	ldr	r3, [pc, #192]	; (800539c <Constant_Voltage+0x1eb8>)
 80052da:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d00f      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		Flag_ChargerShortCircuit == 1	||
 80052e0:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <Constant_Voltage+0x1ebc>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d00b      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverCurrent == 1	||
 80052e8:	4b2e      	ldr	r3, [pc, #184]	; (80053a4 <Constant_Voltage+0x1ec0>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d007      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverTemperature == 1||
 80052f0:	4b2d      	ldr	r3, [pc, #180]	; (80053a8 <Constant_Voltage+0x1ec4>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d003      	beq.n	8005300 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverVoltage == 1	)
 80052f8:	4b2c      	ldr	r3, [pc, #176]	; (80053ac <Constant_Voltage+0x1ec8>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d106      	bne.n	800530e <Constant_Voltage+0x1e2a>
		{
			duty=0;
 8005300:	4b1f      	ldr	r3, [pc, #124]	; (8005380 <Constant_Voltage+0x1e9c>)
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 8005308:	4b29      	ldr	r3, [pc, #164]	; (80053b0 <Constant_Voltage+0x1ecc>)
 800530a:	2202      	movs	r2, #2
 800530c:	701a      	strb	r2, [r3, #0]
		}
	TIM1->CCR1=duty*TIM1->ARR;
 800530e:	4b29      	ldr	r3, [pc, #164]	; (80053b4 <Constant_Voltage+0x1ed0>)
 8005310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005312:	4618      	mov	r0, r3
 8005314:	f7fb fcfa 	bl	8000d0c <__aeabi_ui2f>
 8005318:	4602      	mov	r2, r0
 800531a:	4b19      	ldr	r3, [pc, #100]	; (8005380 <Constant_Voltage+0x1e9c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4619      	mov	r1, r3
 8005320:	4610      	mov	r0, r2
 8005322:	f7fb fd4b 	bl	8000dbc <__aeabi_fmul>
 8005326:	4603      	mov	r3, r0
 8005328:	4c22      	ldr	r4, [pc, #136]	; (80053b4 <Constant_Voltage+0x1ed0>)
 800532a:	4618      	mov	r0, r3
 800532c:	f7fb ff0c 	bl	8001148 <__aeabi_f2uiz>
 8005330:	4603      	mov	r3, r0
 8005332:	6363      	str	r3, [r4, #52]	; 0x34
}
 8005334:	bf00      	nop
 8005336:	bd98      	pop	{r3, r4, r7, pc}
 8005338:	200008fc 	.word	0x200008fc
 800533c:	20000824 	.word	0x20000824
 8005340:	200006fc 	.word	0x200006fc
 8005344:	20000d70 	.word	0x20000d70
 8005348:	20000a94 	.word	0x20000a94
 800534c:	20000a1c 	.word	0x20000a1c
 8005350:	20000a84 	.word	0x20000a84
 8005354:	200006f0 	.word	0x200006f0
 8005358:	200008f8 	.word	0x200008f8
 800535c:	20000914 	.word	0x20000914
 8005360:	20000674 	.word	0x20000674
 8005364:	20000c74 	.word	0x20000c74
 8005368:	20000da4 	.word	0x20000da4
 800536c:	20000a04 	.word	0x20000a04
 8005370:	20000c70 	.word	0x20000c70
 8005374:	200006b4 	.word	0x200006b4
 8005378:	42a00000 	.word	0x42a00000
 800537c:	42c80000 	.word	0x42c80000
 8005380:	20000d5c 	.word	0x20000d5c
 8005384:	20000d90 	.word	0x20000d90
 8005388:	200007cc 	.word	0x200007cc
 800538c:	20000908 	.word	0x20000908
 8005390:	20000a98 	.word	0x20000a98
 8005394:	20000693 	.word	0x20000693
 8005398:	200006a8 	.word	0x200006a8
 800539c:	200006c4 	.word	0x200006c4
 80053a0:	20000808 	.word	0x20000808
 80053a4:	200007ec 	.word	0x200007ec
 80053a8:	200006e1 	.word	0x200006e1
 80053ac:	2000080c 	.word	0x2000080c
 80053b0:	20000700 	.word	0x20000700
 80053b4:	40010000 	.word	0x40010000

080053b8 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	4603      	mov	r3, r0
 80053c0:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 3, 100)!=HAL_OK){
 80053c2:	88f9      	ldrh	r1, [r7, #6]
 80053c4:	2364      	movs	r3, #100	; 0x64
 80053c6:	2203      	movs	r2, #3
 80053c8:	4808      	ldr	r0, [pc, #32]	; (80053ec <EEPROM_isDeviceReady+0x34>)
 80053ca:	f005 fb37 	bl	800aa3c <HAL_I2C_IsDeviceReady>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 80053d4:	2140      	movs	r1, #64	; 0x40
 80053d6:	4806      	ldr	r0, [pc, #24]	; (80053f0 <EEPROM_isDeviceReady+0x38>)
 80053d8:	f004 ffe7 	bl	800a3aa <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80053dc:	2064      	movs	r0, #100	; 0x64
 80053de:	f002 ff35 	bl	800824c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 80053e2:	e7f7      	b.n	80053d4 <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 80053e4:	bf00      	nop
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000ea8 	.word	0x20000ea8
 80053f0:	40020800 	.word	0x40020800

080053f4 <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af04      	add	r7, sp, #16
 80053fa:	4603      	mov	r3, r0
 80053fc:	460a      	mov	r2, r1
 80053fe:	80fb      	strh	r3, [r7, #6]
 8005400:	4613      	mov	r3, r2
 8005402:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADDRESS,addr,64,&data,1,10);
 8005404:	88fa      	ldrh	r2, [r7, #6]
 8005406:	230a      	movs	r3, #10
 8005408:	9302      	str	r3, [sp, #8]
 800540a:	2301      	movs	r3, #1
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	1d7b      	adds	r3, r7, #5
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	2340      	movs	r3, #64	; 0x40
 8005414:	21a0      	movs	r1, #160	; 0xa0
 8005416:	4805      	ldr	r0, [pc, #20]	; (800542c <EEPROM_WriteData+0x38>)
 8005418:	f005 fa16 	bl	800a848 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 800541c:	2064      	movs	r0, #100	; 0x64
 800541e:	f002 ff15 	bl	800824c <HAL_Delay>
}
 8005422:	bf00      	nop
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000ea8 	.word	0x20000ea8

08005430 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8005436:	463b      	mov	r3, r7
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	609a      	str	r2, [r3, #8]
 8005440:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8005442:	4b51      	ldr	r3, [pc, #324]	; (8005588 <MX_ADC1_Init+0x158>)
 8005444:	4a51      	ldr	r2, [pc, #324]	; (800558c <MX_ADC1_Init+0x15c>)
 8005446:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005448:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <MX_ADC1_Init+0x158>)
 800544a:	2200      	movs	r2, #0
 800544c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800544e:	4b4e      	ldr	r3, [pc, #312]	; (8005588 <MX_ADC1_Init+0x158>)
 8005450:	2200      	movs	r2, #0
 8005452:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8005454:	4b4c      	ldr	r3, [pc, #304]	; (8005588 <MX_ADC1_Init+0x158>)
 8005456:	2201      	movs	r2, #1
 8005458:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <MX_ADC1_Init+0x158>)
 800545c:	2201      	movs	r2, #1
 800545e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005460:	4b49      	ldr	r3, [pc, #292]	; (8005588 <MX_ADC1_Init+0x158>)
 8005462:	2200      	movs	r2, #0
 8005464:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005466:	4b48      	ldr	r3, [pc, #288]	; (8005588 <MX_ADC1_Init+0x158>)
 8005468:	2200      	movs	r2, #0
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800546c:	4b46      	ldr	r3, [pc, #280]	; (8005588 <MX_ADC1_Init+0x158>)
 800546e:	4a48      	ldr	r2, [pc, #288]	; (8005590 <MX_ADC1_Init+0x160>)
 8005470:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005472:	4b45      	ldr	r3, [pc, #276]	; (8005588 <MX_ADC1_Init+0x158>)
 8005474:	2200      	movs	r2, #0
 8005476:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8005478:	4b43      	ldr	r3, [pc, #268]	; (8005588 <MX_ADC1_Init+0x158>)
 800547a:	2208      	movs	r2, #8
 800547c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800547e:	4b42      	ldr	r3, [pc, #264]	; (8005588 <MX_ADC1_Init+0x158>)
 8005480:	2201      	movs	r2, #1
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005484:	4b40      	ldr	r3, [pc, #256]	; (8005588 <MX_ADC1_Init+0x158>)
 8005486:	2201      	movs	r2, #1
 8005488:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800548a:	483f      	ldr	r0, [pc, #252]	; (8005588 <MX_ADC1_Init+0x158>)
 800548c:	f002 ff00 	bl	8008290 <HAL_ADC_Init>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8005496:	f001 f907 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800549a:	2301      	movs	r3, #1
 800549c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80054a2:	2306      	movs	r3, #6
 80054a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054a6:	463b      	mov	r3, r7
 80054a8:	4619      	mov	r1, r3
 80054aa:	4837      	ldr	r0, [pc, #220]	; (8005588 <MX_ADC1_Init+0x158>)
 80054ac:	f003 f818 	bl	80084e0 <HAL_ADC_ConfigChannel>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80054b6:	f001 f8f7 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80054ba:	2302      	movs	r3, #2
 80054bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80054be:	2302      	movs	r3, #2
 80054c0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054c2:	463b      	mov	r3, r7
 80054c4:	4619      	mov	r1, r3
 80054c6:	4830      	ldr	r0, [pc, #192]	; (8005588 <MX_ADC1_Init+0x158>)
 80054c8:	f003 f80a 	bl	80084e0 <HAL_ADC_ConfigChannel>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80054d2:	f001 f8e9 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80054d6:	2303      	movs	r3, #3
 80054d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80054da:	2303      	movs	r3, #3
 80054dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054de:	463b      	mov	r3, r7
 80054e0:	4619      	mov	r1, r3
 80054e2:	4829      	ldr	r0, [pc, #164]	; (8005588 <MX_ADC1_Init+0x158>)
 80054e4:	f002 fffc 	bl	80084e0 <HAL_ADC_ConfigChannel>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80054ee:	f001 f8db 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80054f2:	230e      	movs	r3, #14
 80054f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80054f6:	2304      	movs	r3, #4
 80054f8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80054fa:	463b      	mov	r3, r7
 80054fc:	4619      	mov	r1, r3
 80054fe:	4822      	ldr	r0, [pc, #136]	; (8005588 <MX_ADC1_Init+0x158>)
 8005500:	f002 ffee 	bl	80084e0 <HAL_ADC_ConfigChannel>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800550a:	f001 f8cd 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800550e:	230f      	movs	r3, #15
 8005510:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005512:	2305      	movs	r3, #5
 8005514:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005516:	463b      	mov	r3, r7
 8005518:	4619      	mov	r1, r3
 800551a:	481b      	ldr	r0, [pc, #108]	; (8005588 <MX_ADC1_Init+0x158>)
 800551c:	f002 ffe0 	bl	80084e0 <HAL_ADC_ConfigChannel>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8005526:	f001 f8bf 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800552a:	230b      	movs	r3, #11
 800552c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800552e:	2306      	movs	r3, #6
 8005530:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005532:	463b      	mov	r3, r7
 8005534:	4619      	mov	r1, r3
 8005536:	4814      	ldr	r0, [pc, #80]	; (8005588 <MX_ADC1_Init+0x158>)
 8005538:	f002 ffd2 	bl	80084e0 <HAL_ADC_ConfigChannel>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8005542:	f001 f8b1 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005546:	230c      	movs	r3, #12
 8005548:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800554a:	2307      	movs	r3, #7
 800554c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800554e:	463b      	mov	r3, r7
 8005550:	4619      	mov	r1, r3
 8005552:	480d      	ldr	r0, [pc, #52]	; (8005588 <MX_ADC1_Init+0x158>)
 8005554:	f002 ffc4 	bl	80084e0 <HAL_ADC_ConfigChannel>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800555e:	f001 f8a3 	bl	80066a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005562:	2308      	movs	r3, #8
 8005564:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005566:	2308      	movs	r3, #8
 8005568:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800556a:	463b      	mov	r3, r7
 800556c:	4619      	mov	r1, r3
 800556e:	4806      	ldr	r0, [pc, #24]	; (8005588 <MX_ADC1_Init+0x158>)
 8005570:	f002 ffb6 	bl	80084e0 <HAL_ADC_ConfigChannel>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800557a:	f001 f895 	bl	80066a8 <Error_Handler>
  }

}
 800557e:	bf00      	nop
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000dc4 	.word	0x20000dc4
 800558c:	40012000 	.word	0x40012000
 8005590:	0f000001 	.word	0x0f000001

08005594 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b08c      	sub	sp, #48	; 0x30
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559c:	f107 031c 	add.w	r3, r7, #28
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a4a      	ldr	r2, [pc, #296]	; (80056dc <HAL_ADC_MspInit+0x148>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f040 808d 	bne.w	80056d2 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80055b8:	2300      	movs	r3, #0
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c0:	4a47      	ldr	r2, [pc, #284]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c6:	6453      	str	r3, [r2, #68]	; 0x44
 80055c8:	4b45      	ldr	r3, [pc, #276]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055d4:	2300      	movs	r3, #0
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	4b41      	ldr	r3, [pc, #260]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055de:	f043 0304 	orr.w	r3, r3, #4
 80055e2:	6313      	str	r3, [r2, #48]	; 0x30
 80055e4:	4b3e      	ldr	r3, [pc, #248]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055f0:	2300      	movs	r3, #0
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	4b3a      	ldr	r3, [pc, #232]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f8:	4a39      	ldr	r2, [pc, #228]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 80055fa:	f043 0301 	orr.w	r3, r3, #1
 80055fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005600:	4b37      	ldr	r3, [pc, #220]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800560c:	2300      	movs	r3, #0
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	4a32      	ldr	r2, [pc, #200]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 8005616:	f043 0302 	orr.w	r3, r3, #2
 800561a:	6313      	str	r3, [r2, #48]	; 0x30
 800561c:	4b30      	ldr	r3, [pc, #192]	; (80056e0 <HAL_ADC_MspInit+0x14c>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8005628:	2336      	movs	r3, #54	; 0x36
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800562c:	2303      	movs	r3, #3
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	4619      	mov	r1, r3
 800563a:	482a      	ldr	r0, [pc, #168]	; (80056e4 <HAL_ADC_MspInit+0x150>)
 800563c:	f004 fce8 	bl	800a010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005640:	230e      	movs	r3, #14
 8005642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005644:	2303      	movs	r3, #3
 8005646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005648:	2300      	movs	r3, #0
 800564a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800564c:	f107 031c 	add.w	r3, r7, #28
 8005650:	4619      	mov	r1, r3
 8005652:	4825      	ldr	r0, [pc, #148]	; (80056e8 <HAL_ADC_MspInit+0x154>)
 8005654:	f004 fcdc 	bl	800a010 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005658:	2301      	movs	r3, #1
 800565a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800565c:	2303      	movs	r3, #3
 800565e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005660:	2300      	movs	r3, #0
 8005662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005664:	f107 031c 	add.w	r3, r7, #28
 8005668:	4619      	mov	r1, r3
 800566a:	4820      	ldr	r0, [pc, #128]	; (80056ec <HAL_ADC_MspInit+0x158>)
 800566c:	f004 fcd0 	bl	800a010 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005670:	4b1f      	ldr	r3, [pc, #124]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 8005672:	4a20      	ldr	r2, [pc, #128]	; (80056f4 <HAL_ADC_MspInit+0x160>)
 8005674:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005676:	4b1e      	ldr	r3, [pc, #120]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 8005678:	2200      	movs	r2, #0
 800567a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800567c:	4b1c      	ldr	r3, [pc, #112]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 800567e:	2200      	movs	r2, #0
 8005680:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005682:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 8005684:	2200      	movs	r2, #0
 8005686:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 800568a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800568e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005690:	4b17      	ldr	r3, [pc, #92]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 8005692:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005696:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 800569a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800569e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 80056a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80056a8:	4b11      	ldr	r3, [pc, #68]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 80056aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056ae:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056b0:	4b0f      	ldr	r3, [pc, #60]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80056b6:	480e      	ldr	r0, [pc, #56]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 80056b8:	f004 f91c 	bl	80098f4 <HAL_DMA_Init>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 80056c2:	f000 fff1 	bl	80066a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a09      	ldr	r2, [pc, #36]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 80056ca:	639a      	str	r2, [r3, #56]	; 0x38
 80056cc:	4a08      	ldr	r2, [pc, #32]	; (80056f0 <HAL_ADC_MspInit+0x15c>)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80056d2:	bf00      	nop
 80056d4:	3730      	adds	r7, #48	; 0x30
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	40012000 	.word	0x40012000
 80056e0:	40023800 	.word	0x40023800
 80056e4:	40020800 	.word	0x40020800
 80056e8:	40020000 	.word	0x40020000
 80056ec:	40020400 	.word	0x40020400
 80056f0:	20000e0c 	.word	0x20000e0c
 80056f4:	40026410 	.word	0x40026410

080056f8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80056fc:	4b17      	ldr	r3, [pc, #92]	; (800575c <MX_CAN1_Init+0x64>)
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <MX_CAN1_Init+0x68>)
 8005700:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8005702:	4b16      	ldr	r3, [pc, #88]	; (800575c <MX_CAN1_Init+0x64>)
 8005704:	2204      	movs	r2, #4
 8005706:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8005708:	4b14      	ldr	r3, [pc, #80]	; (800575c <MX_CAN1_Init+0x64>)
 800570a:	2200      	movs	r2, #0
 800570c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <MX_CAN1_Init+0x64>)
 8005710:	2200      	movs	r2, #0
 8005712:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <MX_CAN1_Init+0x64>)
 8005716:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 800571a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800571c:	4b0f      	ldr	r3, [pc, #60]	; (800575c <MX_CAN1_Init+0x64>)
 800571e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005722:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8005724:	4b0d      	ldr	r3, [pc, #52]	; (800575c <MX_CAN1_Init+0x64>)
 8005726:	2200      	movs	r2, #0
 8005728:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800572a:	4b0c      	ldr	r3, [pc, #48]	; (800575c <MX_CAN1_Init+0x64>)
 800572c:	2200      	movs	r2, #0
 800572e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8005730:	4b0a      	ldr	r3, [pc, #40]	; (800575c <MX_CAN1_Init+0x64>)
 8005732:	2200      	movs	r2, #0
 8005734:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <MX_CAN1_Init+0x64>)
 8005738:	2200      	movs	r2, #0
 800573a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800573c:	4b07      	ldr	r3, [pc, #28]	; (800575c <MX_CAN1_Init+0x64>)
 800573e:	2200      	movs	r2, #0
 8005740:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8005742:	4b06      	ldr	r3, [pc, #24]	; (800575c <MX_CAN1_Init+0x64>)
 8005744:	2200      	movs	r2, #0
 8005746:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005748:	4804      	ldr	r0, [pc, #16]	; (800575c <MX_CAN1_Init+0x64>)
 800574a:	f003 f96f 	bl	8008a2c <HAL_CAN_Init>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8005754:	f000 ffa8 	bl	80066a8 <Error_Handler>
  }

}
 8005758:	bf00      	nop
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000e80 	.word	0x20000e80
 8005760:	40006400 	.word	0x40006400

08005764 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800576c:	f107 0314 	add.w	r3, r7, #20
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	609a      	str	r2, [r3, #8]
 8005778:	60da      	str	r2, [r3, #12]
 800577a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a21      	ldr	r2, [pc, #132]	; (8005808 <HAL_CAN_MspInit+0xa4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d13c      	bne.n	8005800 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005786:	2300      	movs	r3, #0
 8005788:	613b      	str	r3, [r7, #16]
 800578a:	4b20      	ldr	r3, [pc, #128]	; (800580c <HAL_CAN_MspInit+0xa8>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_CAN_MspInit+0xa8>)
 8005790:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005794:	6413      	str	r3, [r2, #64]	; 0x40
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <HAL_CAN_MspInit+0xa8>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800579e:	613b      	str	r3, [r7, #16]
 80057a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4b19      	ldr	r3, [pc, #100]	; (800580c <HAL_CAN_MspInit+0xa8>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	4a18      	ldr	r2, [pc, #96]	; (800580c <HAL_CAN_MspInit+0xa8>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	6313      	str	r3, [r2, #48]	; 0x30
 80057b2:	4b16      	ldr	r3, [pc, #88]	; (800580c <HAL_CAN_MspInit+0xa8>)
 80057b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c4:	2302      	movs	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c8:	2300      	movs	r3, #0
 80057ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057cc:	2303      	movs	r3, #3
 80057ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80057d0:	2309      	movs	r3, #9
 80057d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057d4:	f107 0314 	add.w	r3, r7, #20
 80057d8:	4619      	mov	r1, r3
 80057da:	480d      	ldr	r0, [pc, #52]	; (8005810 <HAL_CAN_MspInit+0xac>)
 80057dc:	f004 fc18 	bl	800a010 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80057e0:	2200      	movs	r2, #0
 80057e2:	2100      	movs	r1, #0
 80057e4:	2015      	movs	r0, #21
 80057e6:	f004 f84e 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80057ea:	2015      	movs	r0, #21
 80057ec:	f004 f867 	bl	80098be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80057f0:	2200      	movs	r2, #0
 80057f2:	2100      	movs	r1, #0
 80057f4:	2016      	movs	r0, #22
 80057f6:	f004 f846 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80057fa:	2016      	movs	r0, #22
 80057fc:	f004 f85f 	bl	80098be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005800:	bf00      	nop
 8005802:	3728      	adds	r7, #40	; 0x28
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	40006400 	.word	0x40006400
 800580c:	40023800 	.word	0x40023800
 8005810:	40020000 	.word	0x40020000

08005814 <CAN_Setting>:
  }
} 

/* USER CODE BEGIN 1 */
void CAN_Setting(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	; 0x28
 8005818:	af00      	add	r7, sp, #0
/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800581e:	2300      	movs	r3, #0
 8005820:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8005822:	2301      	movs	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
	//sFilterConfig.FilterIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 8005826:	2300      	movs	r3, #0
 8005828:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800582e:	2300      	movs	r3, #0
 8005830:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8005836:	2300      	movs	r3, #0
 8005838:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800583a:	2301      	movs	r3, #1
 800583c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800583e:	230e      	movs	r3, #14
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 8005842:	463b      	mov	r3, r7
 8005844:	4619      	mov	r1, r3
 8005846:	4810      	ldr	r0, [pc, #64]	; (8005888 <CAN_Setting+0x74>)
 8005848:	f003 f9ec 	bl	8008c24 <HAL_CAN_ConfigFilter>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <CAN_Setting+0x42>
 8005852:	f000 ff29 	bl	80066a8 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 8005856:	480c      	ldr	r0, [pc, #48]	; (8005888 <CAN_Setting+0x74>)
 8005858:	f003 fac4 	bl	8008de4 <HAL_CAN_Start>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <CAN_Setting+0x52>
 8005862:	f000 ff21 	bl	80066a8 <Error_Handler>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 8005866:	4b09      	ldr	r3, [pc, #36]	; (800588c <CAN_Setting+0x78>)
 8005868:	2200      	movs	r2, #0
 800586a:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 800586c:	4b07      	ldr	r3, [pc, #28]	; (800588c <CAN_Setting+0x78>)
 800586e:	2200      	movs	r2, #0
 8005870:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <CAN_Setting+0x78>)
 8005874:	2200      	movs	r2, #0
 8005876:	609a      	str	r2, [r3, #8]

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005878:	2102      	movs	r1, #2
 800587a:	4803      	ldr	r0, [pc, #12]	; (8005888 <CAN_Setting+0x74>)
 800587c:	f003 fce1 	bl	8009242 <HAL_CAN_ActivateNotification>
}
 8005880:	bf00      	nop
 8005882:	3728      	adds	r7, #40	; 0x28
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000e80 	.word	0x20000e80
 800588c:	20001044 	.word	0x20001044

08005890 <CAN_Rx_Process>:
  Tx_Header.DLC = 8;
  if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
}

void CAN_Rx_Process(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 8005896:	4b50      	ldr	r3, [pc, #320]	; (80059d8 <CAN_Rx_Process+0x148>)
 8005898:	4a50      	ldr	r2, [pc, #320]	; (80059dc <CAN_Rx_Process+0x14c>)
 800589a:	2100      	movs	r1, #0
 800589c:	4850      	ldr	r0, [pc, #320]	; (80059e0 <CAN_Rx_Process+0x150>)
 800589e:	f003 fbbf 	bl	8009020 <HAL_CAN_GetRxMessage>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <CAN_Rx_Process+0x28>
	HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 80058a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ac:	484d      	ldr	r0, [pc, #308]	; (80059e4 <CAN_Rx_Process+0x154>)
 80058ae:	f004 fd7c 	bl	800a3aa <HAL_GPIO_TogglePin>
	Communication_Flag = 1;
 80058b2:	4b4d      	ldr	r3, [pc, #308]	; (80059e8 <CAN_Rx_Process+0x158>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
}
		if(Handshaking==0){
 80058b8:	4b4c      	ldr	r3, [pc, #304]	; (80059ec <CAN_Rx_Process+0x15c>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f040 80dc 	bne.w	8005a7a <CAN_Rx_Process+0x1ea>
			if(identified == 0){
 80058c2:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <CAN_Rx_Process+0x160>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d129      	bne.n	800591e <CAN_Rx_Process+0x8e>
				Tx_Header.StdId = 0x1B2;
 80058ca:	4b4a      	ldr	r3, [pc, #296]	; (80059f4 <CAN_Rx_Process+0x164>)
 80058cc:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 80058d0:	601a      	str	r2, [r3, #0]
				Tx_data[0] = 0;
 80058d2:	4b49      	ldr	r3, [pc, #292]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	701a      	strb	r2, [r3, #0]
				Tx_data[1] = 0;
 80058d8:	4b47      	ldr	r3, [pc, #284]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058da:	2200      	movs	r2, #0
 80058dc:	705a      	strb	r2, [r3, #1]
				Tx_data[2] = 0;
 80058de:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	709a      	strb	r2, [r3, #2]
				Tx_data[3] = 0;
 80058e4:	4b44      	ldr	r3, [pc, #272]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	70da      	strb	r2, [r3, #3]
				Tx_data[4] = 0;
 80058ea:	4b43      	ldr	r3, [pc, #268]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	711a      	strb	r2, [r3, #4]
				Tx_data[5] = 0;
 80058f0:	4b41      	ldr	r3, [pc, #260]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	715a      	strb	r2, [r3, #5]
				Tx_data[6] = 0;
 80058f6:	4b40      	ldr	r3, [pc, #256]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	719a      	strb	r2, [r3, #6]
				Tx_data[7] = 0x01;
 80058fc:	4b3e      	ldr	r3, [pc, #248]	; (80059f8 <CAN_Rx_Process+0x168>)
 80058fe:	2201      	movs	r2, #1
 8005900:	71da      	strb	r2, [r3, #7]
				Tx_Header.DLC = 8;
 8005902:	4b3c      	ldr	r3, [pc, #240]	; (80059f4 <CAN_Rx_Process+0x164>)
 8005904:	2208      	movs	r2, #8
 8005906:	611a      	str	r2, [r3, #16]
				if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005908:	4b3c      	ldr	r3, [pc, #240]	; (80059fc <CAN_Rx_Process+0x16c>)
 800590a:	4a3b      	ldr	r2, [pc, #236]	; (80059f8 <CAN_Rx_Process+0x168>)
 800590c:	4939      	ldr	r1, [pc, #228]	; (80059f4 <CAN_Rx_Process+0x164>)
 800590e:	4834      	ldr	r0, [pc, #208]	; (80059e0 <CAN_Rx_Process+0x150>)
 8005910:	f003 faac 	bl	8008e6c <HAL_CAN_AddTxMessage>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <CAN_Rx_Process+0x8e>
 800591a:	f000 fec5 	bl	80066a8 <Error_Handler>
			}
		// CAN ID receive (Handshaking)
			if(Rx_Header.ExtId>>20==0x0E0){
 800591e:	4b2f      	ldr	r3, [pc, #188]	; (80059dc <CAN_Rx_Process+0x14c>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	0d1b      	lsrs	r3, r3, #20
 8005924:	2be0      	cmp	r3, #224	; 0xe0
 8005926:	f040 80a8 	bne.w	8005a7a <CAN_Rx_Process+0x1ea>
				if(Rx_data[6]==0x55 && identified==0){
 800592a:	4b2b      	ldr	r3, [pc, #172]	; (80059d8 <CAN_Rx_Process+0x148>)
 800592c:	799b      	ldrb	r3, [r3, #6]
 800592e:	2b55      	cmp	r3, #85	; 0x55
 8005930:	d12f      	bne.n	8005992 <CAN_Rx_Process+0x102>
 8005932:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <CAN_Rx_Process+0x160>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d12b      	bne.n	8005992 <CAN_Rx_Process+0x102>
					Tx_Header.StdId = 0x0E2;
 800593a:	4b2e      	ldr	r3, [pc, #184]	; (80059f4 <CAN_Rx_Process+0x164>)
 800593c:	22e2      	movs	r2, #226	; 0xe2
 800593e:	601a      	str	r2, [r3, #0]
					Tx_data[0] = 1;
 8005940:	4b2d      	ldr	r3, [pc, #180]	; (80059f8 <CAN_Rx_Process+0x168>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = 2;
 8005946:	4b2c      	ldr	r3, [pc, #176]	; (80059f8 <CAN_Rx_Process+0x168>)
 8005948:	2202      	movs	r2, #2
 800594a:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = 3;
 800594c:	4b2a      	ldr	r3, [pc, #168]	; (80059f8 <CAN_Rx_Process+0x168>)
 800594e:	2203      	movs	r2, #3
 8005950:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 4;
 8005952:	4b29      	ldr	r3, [pc, #164]	; (80059f8 <CAN_Rx_Process+0x168>)
 8005954:	2204      	movs	r2, #4
 8005956:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 5;
 8005958:	4b27      	ldr	r3, [pc, #156]	; (80059f8 <CAN_Rx_Process+0x168>)
 800595a:	2205      	movs	r2, #5
 800595c:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 6;
 800595e:	4b26      	ldr	r3, [pc, #152]	; (80059f8 <CAN_Rx_Process+0x168>)
 8005960:	2206      	movs	r2, #6
 8005962:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0x55;
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <CAN_Rx_Process+0x168>)
 8005966:	2255      	movs	r2, #85	; 0x55
 8005968:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 8;
 800596a:	4b23      	ldr	r3, [pc, #140]	; (80059f8 <CAN_Rx_Process+0x168>)
 800596c:	2208      	movs	r2, #8
 800596e:	71da      	strb	r2, [r3, #7]

					Tx_Header.DLC = 8;
 8005970:	4b20      	ldr	r3, [pc, #128]	; (80059f4 <CAN_Rx_Process+0x164>)
 8005972:	2208      	movs	r2, #8
 8005974:	611a      	str	r2, [r3, #16]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005976:	4b21      	ldr	r3, [pc, #132]	; (80059fc <CAN_Rx_Process+0x16c>)
 8005978:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <CAN_Rx_Process+0x168>)
 800597a:	491e      	ldr	r1, [pc, #120]	; (80059f4 <CAN_Rx_Process+0x164>)
 800597c:	4818      	ldr	r0, [pc, #96]	; (80059e0 <CAN_Rx_Process+0x150>)
 800597e:	f003 fa75 	bl	8008e6c <HAL_CAN_AddTxMessage>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <CAN_Rx_Process+0xfc>
 8005988:	f000 fe8e 	bl	80066a8 <Error_Handler>
					identified = 1;
 800598c:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <CAN_Rx_Process+0x160>)
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
				}

				if(Rx_data[6]==0xAA && identified==1){
 8005992:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <CAN_Rx_Process+0x148>)
 8005994:	799b      	ldrb	r3, [r3, #6]
 8005996:	2baa      	cmp	r3, #170	; 0xaa
 8005998:	d16f      	bne.n	8005a7a <CAN_Rx_Process+0x1ea>
 800599a:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <CAN_Rx_Process+0x160>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d16b      	bne.n	8005a7a <CAN_Rx_Process+0x1ea>
					Tx_data[6] = 0xAA;
 80059a2:	4b15      	ldr	r3, [pc, #84]	; (80059f8 <CAN_Rx_Process+0x168>)
 80059a4:	22aa      	movs	r2, #170	; 0xaa
 80059a6:	719a      	strb	r2, [r3, #6]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 80059a8:	4b14      	ldr	r3, [pc, #80]	; (80059fc <CAN_Rx_Process+0x16c>)
 80059aa:	4a13      	ldr	r2, [pc, #76]	; (80059f8 <CAN_Rx_Process+0x168>)
 80059ac:	4911      	ldr	r1, [pc, #68]	; (80059f4 <CAN_Rx_Process+0x164>)
 80059ae:	480c      	ldr	r0, [pc, #48]	; (80059e0 <CAN_Rx_Process+0x150>)
 80059b0:	f003 fa5c 	bl	8008e6c <HAL_CAN_AddTxMessage>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <CAN_Rx_Process+0x12e>
 80059ba:	f000 fe75 	bl	80066a8 <Error_Handler>
					UNIQUE_Code = Rx_Header.ExtId & 0x000FFFFF;
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <CAN_Rx_Process+0x14c>)
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059c6:	4a0e      	ldr	r2, [pc, #56]	; (8005a00 <CAN_Rx_Process+0x170>)
 80059c8:	6013      	str	r3, [r2, #0]
					Handshaking=1;
 80059ca:	4b08      	ldr	r3, [pc, #32]	; (80059ec <CAN_Rx_Process+0x15c>)
 80059cc:	2201      	movs	r2, #1
 80059ce:	701a      	strb	r2, [r3, #0]

					uint32_t Delay_Charger = 20000000;
 80059d0:	4b0c      	ldr	r3, [pc, #48]	; (8005a04 <CAN_Rx_Process+0x174>)
 80059d2:	607b      	str	r3, [r7, #4]
					while(Delay_Charger>0)
 80059d4:	e01b      	b.n	8005a0e <CAN_Rx_Process+0x17e>
 80059d6:	bf00      	nop
 80059d8:	20000e74 	.word	0x20000e74
 80059dc:	20001028 	.word	0x20001028
 80059e0:	20000e80 	.word	0x20000e80
 80059e4:	40020400 	.word	0x40020400
 80059e8:	200007ed 	.word	0x200007ed
 80059ec:	20000ab4 	.word	0x20000ab4
 80059f0:	2000025c 	.word	0x2000025c
 80059f4:	20001044 	.word	0x20001044
 80059f8:	20000e6c 	.word	0x20000e6c
 80059fc:	20000e7c 	.word	0x20000e7c
 8005a00:	20000a9c 	.word	0x20000a9c
 8005a04:	01312d00 	.word	0x01312d00
					Delay_Charger--;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	607b      	str	r3, [r7, #4]
					while(Delay_Charger>0)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1f9      	bne.n	8005a08 <CAN_Rx_Process+0x178>
					Charger_Mode=1;
 8005a14:	4b9c      	ldr	r3, [pc, #624]	; (8005c88 <CAN_Rx_Process+0x3f8>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	701a      	strb	r2, [r3, #0]

					Tx_Header.StdId = 0x0C1;
 8005a1a:	4b9c      	ldr	r3, [pc, #624]	; (8005c8c <CAN_Rx_Process+0x3fc>)
 8005a1c:	22c1      	movs	r2, #193	; 0xc1
 8005a1e:	601a      	str	r2, [r3, #0]
					Tx_data[0] = UNIQUE_Code >> 12;
 8005a20:	4b9b      	ldr	r3, [pc, #620]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	0b1b      	lsrs	r3, r3, #12
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	4b9a      	ldr	r3, [pc, #616]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a2a:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = UNIQUE_Code >> 4;
 8005a2c:	4b98      	ldr	r3, [pc, #608]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	091b      	lsrs	r3, r3, #4
 8005a32:	b2da      	uxtb	r2, r3
 8005a34:	4b97      	ldr	r3, [pc, #604]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a36:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = UNIQUE_Code << 4;
 8005a38:	4b95      	ldr	r3, [pc, #596]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	4b94      	ldr	r3, [pc, #592]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a44:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 0;
 8005a46:	4b93      	ldr	r3, [pc, #588]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 0;
 8005a4c:	4b91      	ldr	r3, [pc, #580]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 0;
 8005a52:	4b90      	ldr	r3, [pc, #576]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0;
 8005a58:	4b8e      	ldr	r3, [pc, #568]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 0;
 8005a5e:	4b8d      	ldr	r3, [pc, #564]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	71da      	strb	r2, [r3, #7]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005a64:	4b8c      	ldr	r3, [pc, #560]	; (8005c98 <CAN_Rx_Process+0x408>)
 8005a66:	4a8b      	ldr	r2, [pc, #556]	; (8005c94 <CAN_Rx_Process+0x404>)
 8005a68:	4988      	ldr	r1, [pc, #544]	; (8005c8c <CAN_Rx_Process+0x3fc>)
 8005a6a:	488c      	ldr	r0, [pc, #560]	; (8005c9c <CAN_Rx_Process+0x40c>)
 8005a6c:	f003 f9fe 	bl	8008e6c <HAL_CAN_AddTxMessage>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <CAN_Rx_Process+0x1ea>
 8005a76:	f000 fe17 	bl	80066a8 <Error_Handler>
				}
			}
		}

		if(Handshaking==1){
 8005a7a:	4b89      	ldr	r3, [pc, #548]	; (8005ca0 <CAN_Rx_Process+0x410>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	f040 8180 	bne.w	8005d84 <CAN_Rx_Process+0x4f4>
		// CAN ID receive #1 (0x7b1)
		if(Rx_Header.ExtId == (0x0B0<<20|UNIQUE_Code)){
 8005a84:	4b87      	ldr	r3, [pc, #540]	; (8005ca4 <CAN_Rx_Process+0x414>)
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	4b81      	ldr	r3, [pc, #516]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d11f      	bne.n	8005ad4 <CAN_Rx_Process+0x244>
			Batt_voltage.m_bytes[0] = Rx_data[0];
 8005a94:	4b84      	ldr	r3, [pc, #528]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	4b84      	ldr	r3, [pc, #528]	; (8005cac <CAN_Rx_Process+0x41c>)
 8005a9a:	701a      	strb	r2, [r3, #0]
			Batt_voltage.m_bytes[1] = Rx_data[1];
 8005a9c:	4b82      	ldr	r3, [pc, #520]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005a9e:	785a      	ldrb	r2, [r3, #1]
 8005aa0:	4b82      	ldr	r3, [pc, #520]	; (8005cac <CAN_Rx_Process+0x41c>)
 8005aa2:	705a      	strb	r2, [r3, #1]
			Batt_current.m_bytes[0] = Rx_data[2];
 8005aa4:	4b80      	ldr	r3, [pc, #512]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005aa6:	789a      	ldrb	r2, [r3, #2]
 8005aa8:	4b81      	ldr	r3, [pc, #516]	; (8005cb0 <CAN_Rx_Process+0x420>)
 8005aaa:	701a      	strb	r2, [r3, #0]
			Batt_current.m_bytes[1] = Rx_data[3];
 8005aac:	4b7e      	ldr	r3, [pc, #504]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005aae:	78da      	ldrb	r2, [r3, #3]
 8005ab0:	4b7f      	ldr	r3, [pc, #508]	; (8005cb0 <CAN_Rx_Process+0x420>)
 8005ab2:	705a      	strb	r2, [r3, #1]
			Batt_SOC.m_bytes[0] = Rx_data[4];
 8005ab4:	4b7c      	ldr	r3, [pc, #496]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005ab6:	791a      	ldrb	r2, [r3, #4]
 8005ab8:	4b7e      	ldr	r3, [pc, #504]	; (8005cb4 <CAN_Rx_Process+0x424>)
 8005aba:	701a      	strb	r2, [r3, #0]
			Batt_SOC.m_bytes[1] = Rx_data[5];
 8005abc:	4b7a      	ldr	r3, [pc, #488]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005abe:	795a      	ldrb	r2, [r3, #5]
 8005ac0:	4b7c      	ldr	r3, [pc, #496]	; (8005cb4 <CAN_Rx_Process+0x424>)
 8005ac2:	705a      	strb	r2, [r3, #1]
			Batt_temp.m_bytes[0] = Rx_data[6];
 8005ac4:	4b78      	ldr	r3, [pc, #480]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005ac6:	799a      	ldrb	r2, [r3, #6]
 8005ac8:	4b7b      	ldr	r3, [pc, #492]	; (8005cb8 <CAN_Rx_Process+0x428>)
 8005aca:	701a      	strb	r2, [r3, #0]
			Batt_temp.m_bytes[1] = Rx_data[7];
 8005acc:	4b76      	ldr	r3, [pc, #472]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005ace:	79da      	ldrb	r2, [r3, #7]
 8005ad0:	4b79      	ldr	r3, [pc, #484]	; (8005cb8 <CAN_Rx_Process+0x428>)
 8005ad2:	705a      	strb	r2, [r3, #1]
		}

		// CAN ID receive #2 (0x7b2)
		if(Rx_Header.ExtId == (0x0B1<<20|UNIQUE_Code)){
 8005ad4:	4b73      	ldr	r3, [pc, #460]	; (8005ca4 <CAN_Rx_Process+0x414>)
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	4b6d      	ldr	r3, [pc, #436]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f043 6331 	orr.w	r3, r3, #185597952	; 0xb100000
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d161      	bne.n	8005ba8 <CAN_Rx_Process+0x318>
			Batt_capacity.m_bytes[0] = Rx_data[0];
 8005ae4:	4b70      	ldr	r3, [pc, #448]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005ae6:	781a      	ldrb	r2, [r3, #0]
 8005ae8:	4b74      	ldr	r3, [pc, #464]	; (8005cbc <CAN_Rx_Process+0x42c>)
 8005aea:	701a      	strb	r2, [r3, #0]
			Batt_capacity.m_bytes[1] = Rx_data[1];
 8005aec:	4b6e      	ldr	r3, [pc, #440]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005aee:	785a      	ldrb	r2, [r3, #1]
 8005af0:	4b72      	ldr	r3, [pc, #456]	; (8005cbc <CAN_Rx_Process+0x42c>)
 8005af2:	705a      	strb	r2, [r3, #1]
			Batt_SOH.m_bytes[0] = Rx_data[2];
 8005af4:	4b6c      	ldr	r3, [pc, #432]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005af6:	789a      	ldrb	r2, [r3, #2]
 8005af8:	4b71      	ldr	r3, [pc, #452]	; (8005cc0 <CAN_Rx_Process+0x430>)
 8005afa:	701a      	strb	r2, [r3, #0]
			Batt_SOH.m_bytes[1] = Rx_data[3];
 8005afc:	4b6a      	ldr	r3, [pc, #424]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005afe:	78da      	ldrb	r2, [r3, #3]
 8005b00:	4b6f      	ldr	r3, [pc, #444]	; (8005cc0 <CAN_Rx_Process+0x430>)
 8005b02:	705a      	strb	r2, [r3, #1]
			Batt_cycle.m_bytes[0] = Rx_data[4];
 8005b04:	4b68      	ldr	r3, [pc, #416]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b06:	791a      	ldrb	r2, [r3, #4]
 8005b08:	4b6e      	ldr	r3, [pc, #440]	; (8005cc4 <CAN_Rx_Process+0x434>)
 8005b0a:	701a      	strb	r2, [r3, #0]
			Batt_cycle.m_bytes[1] = Rx_data[5];
 8005b0c:	4b66      	ldr	r3, [pc, #408]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b0e:	795a      	ldrb	r2, [r3, #5]
 8005b10:	4b6c      	ldr	r3, [pc, #432]	; (8005cc4 <CAN_Rx_Process+0x434>)
 8005b12:	705a      	strb	r2, [r3, #1]

			flag_trip_shortcircuit = Rx_data[6]&0x01;
 8005b14:	4b64      	ldr	r3, [pc, #400]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b16:	799b      	ldrb	r3, [r3, #6]
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <CAN_Rx_Process+0x438>)
 8005b20:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentdischarge = (Rx_data[6]>>1)&0x01;
 8005b22:	4b61      	ldr	r3, [pc, #388]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b24:	799b      	ldrb	r3, [r3, #6]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	4b66      	ldr	r3, [pc, #408]	; (8005ccc <CAN_Rx_Process+0x43c>)
 8005b32:	701a      	strb	r2, [r3, #0]
			flag_trip_overcurrentcharge = (Rx_data[6]>>2)&0x01;
 8005b34:	4b5c      	ldr	r3, [pc, #368]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b36:	799b      	ldrb	r3, [r3, #6]
 8005b38:	089b      	lsrs	r3, r3, #2
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4b63      	ldr	r3, [pc, #396]	; (8005cd0 <CAN_Rx_Process+0x440>)
 8005b44:	701a      	strb	r2, [r3, #0]
			flag_trip_overtemperature = (Rx_data[6]>>3)&0x01;
 8005b46:	4b58      	ldr	r3, [pc, #352]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b48:	799b      	ldrb	r3, [r3, #6]
 8005b4a:	08db      	lsrs	r3, r3, #3
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	4b5f      	ldr	r3, [pc, #380]	; (8005cd4 <CAN_Rx_Process+0x444>)
 8005b56:	701a      	strb	r2, [r3, #0]
			flag_trip_undertemperature = (Rx_data[6]>>4)&0x01;
 8005b58:	4b53      	ldr	r3, [pc, #332]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b5a:	799b      	ldrb	r3, [r3, #6]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <CAN_Rx_Process+0x448>)
 8005b68:	701a      	strb	r2, [r3, #0]
	//			flag_trip_overtemperature = (Rx_data[6]>>5)&0x01;
	//			flag_trip_undertemperature = (Rx_data[6]>>6)&0x01;
			flag_trip_unbalance = (Rx_data[6]>>7)&0x01;
 8005b6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b6c:	799b      	ldrb	r3, [r3, #6]
 8005b6e:	09db      	lsrs	r3, r3, #7
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	4b5a      	ldr	r3, [pc, #360]	; (8005cdc <CAN_Rx_Process+0x44c>)
 8005b74:	701a      	strb	r2, [r3, #0]

			flag_trip_undervoltage = Rx_data[7]&0x01;
 8005b76:	4b4c      	ldr	r3, [pc, #304]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005b78:	79db      	ldrb	r3, [r3, #7]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	4b57      	ldr	r3, [pc, #348]	; (8005ce0 <CAN_Rx_Process+0x450>)
 8005b82:	701a      	strb	r2, [r3, #0]
			flag_trip_overvoltage = (Rx_data[7]<<1)&0x01;
 8005b84:	4b57      	ldr	r3, [pc, #348]	; (8005ce4 <CAN_Rx_Process+0x454>)
 8005b86:	2200      	movs	r2, #0
 8005b88:	701a      	strb	r2, [r3, #0]
			flag_trip_SOCOverDischarge = (Rx_data[7]<<2)&0x01;
 8005b8a:	4b57      	ldr	r3, [pc, #348]	; (8005ce8 <CAN_Rx_Process+0x458>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
			flag_trip_systemfailure = (Rx_data[7]<<3)&0x01;
 8005b90:	4b56      	ldr	r3, [pc, #344]	; (8005cec <CAN_Rx_Process+0x45c>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	701a      	strb	r2, [r3, #0]
			charge_state = (Rx_data[7]<<4)&0x01;
 8005b96:	4b56      	ldr	r3, [pc, #344]	; (8005cf0 <CAN_Rx_Process+0x460>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
			discharge_state = (Rx_data[7]<<5)&0x01;
 8005b9c:	4b55      	ldr	r3, [pc, #340]	; (8005cf4 <CAN_Rx_Process+0x464>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]
			sleep_state = (Rx_data[7]<<6)&0x01;
 8005ba2:	4b55      	ldr	r3, [pc, #340]	; (8005cf8 <CAN_Rx_Process+0x468>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
		}


		// *********************** Start Cell  Voltage Data Send ******************************
		if(Rx_Header.ExtId == (0x0B4<<20|UNIQUE_Code)){
 8005ba8:	4b3e      	ldr	r3, [pc, #248]	; (8005ca4 <CAN_Rx_Process+0x414>)
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	4b38      	ldr	r3, [pc, #224]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f043 6334 	orr.w	r3, r3, #188743680	; 0xb400000
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d11f      	bne.n	8005bf8 <CAN_Rx_Process+0x368>
			vcell_15databyte[0].m_bytes[1] = Rx_data[0];
 8005bb8:	4b3b      	ldr	r3, [pc, #236]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	4b4f      	ldr	r3, [pc, #316]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bbe:	705a      	strb	r2, [r3, #1]
			vcell_15databyte[0].m_bytes[0] = Rx_data[1];
 8005bc0:	4b39      	ldr	r3, [pc, #228]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bc2:	785a      	ldrb	r2, [r3, #1]
 8005bc4:	4b4d      	ldr	r3, [pc, #308]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bc6:	701a      	strb	r2, [r3, #0]
			vcell_15databyte[1].m_bytes[1] = Rx_data[2];
 8005bc8:	4b37      	ldr	r3, [pc, #220]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bca:	789a      	ldrb	r2, [r3, #2]
 8005bcc:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bce:	715a      	strb	r2, [r3, #5]
			vcell_15databyte[1].m_bytes[0] = Rx_data[3];
 8005bd0:	4b35      	ldr	r3, [pc, #212]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bd2:	78da      	ldrb	r2, [r3, #3]
 8005bd4:	4b49      	ldr	r3, [pc, #292]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bd6:	711a      	strb	r2, [r3, #4]
			vcell_15databyte[2].m_bytes[1] = Rx_data[4];
 8005bd8:	4b33      	ldr	r3, [pc, #204]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bda:	791a      	ldrb	r2, [r3, #4]
 8005bdc:	4b47      	ldr	r3, [pc, #284]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bde:	725a      	strb	r2, [r3, #9]
			vcell_15databyte[2].m_bytes[0] = Rx_data[5];
 8005be0:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005be2:	795a      	ldrb	r2, [r3, #5]
 8005be4:	4b45      	ldr	r3, [pc, #276]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005be6:	721a      	strb	r2, [r3, #8]
			vcell_15databyte[3].m_bytes[1] = Rx_data[6];
 8005be8:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bea:	799a      	ldrb	r2, [r3, #6]
 8005bec:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bee:	735a      	strb	r2, [r3, #13]
			vcell_15databyte[3].m_bytes[0] = Rx_data[7];
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005bf2:	79da      	ldrb	r2, [r3, #7]
 8005bf4:	4b41      	ldr	r3, [pc, #260]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005bf6:	731a      	strb	r2, [r3, #12]
		}

		if(Rx_Header.ExtId == (0x0B5<<20|UNIQUE_Code)){
 8005bf8:	4b2a      	ldr	r3, [pc, #168]	; (8005ca4 <CAN_Rx_Process+0x414>)
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4b24      	ldr	r3, [pc, #144]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f043 6335 	orr.w	r3, r3, #189792256	; 0xb500000
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d11f      	bne.n	8005c48 <CAN_Rx_Process+0x3b8>
			vcell_15databyte[4].m_bytes[1] = Rx_data[0];
 8005c08:	4b27      	ldr	r3, [pc, #156]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c0a:	781a      	ldrb	r2, [r3, #0]
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c0e:	745a      	strb	r2, [r3, #17]
			vcell_15databyte[4].m_bytes[0] = Rx_data[1];
 8005c10:	4b25      	ldr	r3, [pc, #148]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c12:	785a      	ldrb	r2, [r3, #1]
 8005c14:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c16:	741a      	strb	r2, [r3, #16]
			vcell_15databyte[5].m_bytes[1] = Rx_data[2];
 8005c18:	4b23      	ldr	r3, [pc, #140]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c1a:	789a      	ldrb	r2, [r3, #2]
 8005c1c:	4b37      	ldr	r3, [pc, #220]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c1e:	755a      	strb	r2, [r3, #21]
			vcell_15databyte[5].m_bytes[0] = Rx_data[3];
 8005c20:	4b21      	ldr	r3, [pc, #132]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c22:	78da      	ldrb	r2, [r3, #3]
 8005c24:	4b35      	ldr	r3, [pc, #212]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c26:	751a      	strb	r2, [r3, #20]
			vcell_15databyte[6].m_bytes[1] = Rx_data[4];
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c2a:	791a      	ldrb	r2, [r3, #4]
 8005c2c:	4b33      	ldr	r3, [pc, #204]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c2e:	765a      	strb	r2, [r3, #25]
			vcell_15databyte[6].m_bytes[0] = Rx_data[5];
 8005c30:	4b1d      	ldr	r3, [pc, #116]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c32:	795a      	ldrb	r2, [r3, #5]
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c36:	761a      	strb	r2, [r3, #24]
			vcell_15databyte[7].m_bytes[1] = Rx_data[6];
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c3a:	799a      	ldrb	r2, [r3, #6]
 8005c3c:	4b2f      	ldr	r3, [pc, #188]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c3e:	775a      	strb	r2, [r3, #29]
			vcell_15databyte[7].m_bytes[0] = Rx_data[7];
 8005c40:	4b19      	ldr	r3, [pc, #100]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c42:	79da      	ldrb	r2, [r3, #7]
 8005c44:	4b2d      	ldr	r3, [pc, #180]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c46:	771a      	strb	r2, [r3, #28]
		}

		if(Rx_Header.ExtId == (0x0B6<<20|UNIQUE_Code)){
 8005c48:	4b16      	ldr	r3, [pc, #88]	; (8005ca4 <CAN_Rx_Process+0x414>)
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <CAN_Rx_Process+0x400>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f043 6336 	orr.w	r3, r3, #190840832	; 0xb600000
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d165      	bne.n	8005d24 <CAN_Rx_Process+0x494>
			vcell_15databyte[8].m_bytes[1] = Rx_data[0];
 8005c58:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c5a:	781a      	ldrb	r2, [r3, #0]
 8005c5c:	4b27      	ldr	r3, [pc, #156]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			vcell_15databyte[8].m_bytes[0] = Rx_data[1];
 8005c62:	4b11      	ldr	r3, [pc, #68]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c64:	785a      	ldrb	r2, [r3, #1]
 8005c66:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c68:	f883 2020 	strb.w	r2, [r3, #32]
			vcell_15databyte[9].m_bytes[1] = Rx_data[2];
 8005c6c:	4b0e      	ldr	r3, [pc, #56]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c6e:	789a      	ldrb	r2, [r3, #2]
 8005c70:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			vcell_15databyte[9].m_bytes[0] = Rx_data[3];
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c78:	78da      	ldrb	r2, [r3, #3]
 8005c7a:	4b20      	ldr	r3, [pc, #128]	; (8005cfc <CAN_Rx_Process+0x46c>)
 8005c7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			vcell_15databyte[10].m_bytes[1] = Rx_data[4];
 8005c80:	4b09      	ldr	r3, [pc, #36]	; (8005ca8 <CAN_Rx_Process+0x418>)
 8005c82:	791a      	ldrb	r2, [r3, #4]
 8005c84:	e03c      	b.n	8005d00 <CAN_Rx_Process+0x470>
 8005c86:	bf00      	nop
 8005c88:	20000700 	.word	0x20000700
 8005c8c:	20001044 	.word	0x20001044
 8005c90:	20000a9c 	.word	0x20000a9c
 8005c94:	20000e6c 	.word	0x20000e6c
 8005c98:	20000e7c 	.word	0x20000e7c
 8005c9c:	20000e80 	.word	0x20000e80
 8005ca0:	20000ab4 	.word	0x20000ab4
 8005ca4:	20001028 	.word	0x20001028
 8005ca8:	20000e74 	.word	0x20000e74
 8005cac:	20000dc0 	.word	0x20000dc0
 8005cb0:	20000a0c 	.word	0x20000a0c
 8005cb4:	20000a44 	.word	0x20000a44
 8005cb8:	20000a8c 	.word	0x20000a8c
 8005cbc:	20000d6c 	.word	0x20000d6c
 8005cc0:	2000069c 	.word	0x2000069c
 8005cc4:	200009e8 	.word	0x200009e8
 8005cc8:	200006a8 	.word	0x200006a8
 8005ccc:	200009fc 	.word	0x200009fc
 8005cd0:	20000a98 	.word	0x20000a98
 8005cd4:	200007cc 	.word	0x200007cc
 8005cd8:	20000908 	.word	0x20000908
 8005cdc:	20000692 	.word	0x20000692
 8005ce0:	20000909 	.word	0x20000909
 8005ce4:	20000d90 	.word	0x20000d90
 8005ce8:	20000aac 	.word	0x20000aac
 8005cec:	200006c4 	.word	0x200006c4
 8005cf0:	20000b98 	.word	0x20000b98
 8005cf4:	200007f4 	.word	0x200007f4
 8005cf8:	20000d98 	.word	0x20000d98
 8005cfc:	20000a48 	.word	0x20000a48
 8005d00:	4b45      	ldr	r3, [pc, #276]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			vcell_15databyte[10].m_bytes[0] = Rx_data[5];
 8005d06:	4b45      	ldr	r3, [pc, #276]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d08:	795a      	ldrb	r2, [r3, #5]
 8005d0a:	4b43      	ldr	r3, [pc, #268]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			vcell_15databyte[11].m_bytes[1] = Rx_data[6];
 8005d10:	4b42      	ldr	r3, [pc, #264]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d12:	799a      	ldrb	r2, [r3, #6]
 8005d14:	4b40      	ldr	r3, [pc, #256]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d16:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			vcell_15databyte[11].m_bytes[0] = Rx_data[7];
 8005d1a:	4b40      	ldr	r3, [pc, #256]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d1c:	79da      	ldrb	r2, [r3, #7]
 8005d1e:	4b3e      	ldr	r3, [pc, #248]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		}

		if(Rx_Header.ExtId == (0x0B7<<20|UNIQUE_Code)){
 8005d24:	4b3e      	ldr	r3, [pc, #248]	; (8005e20 <CAN_Rx_Process+0x590>)
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	4b3e      	ldr	r3, [pc, #248]	; (8005e24 <CAN_Rx_Process+0x594>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f043 6337 	orr.w	r3, r3, #191889408	; 0xb700000
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d127      	bne.n	8005d84 <CAN_Rx_Process+0x4f4>
			vcell_15databyte[12].m_bytes[1] = Rx_data[0];
 8005d34:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d3a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			vcell_15databyte[12].m_bytes[0] = Rx_data[1];
 8005d3e:	4b37      	ldr	r3, [pc, #220]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d40:	785a      	ldrb	r2, [r3, #1]
 8005d42:	4b35      	ldr	r3, [pc, #212]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			vcell_15databyte[13].m_bytes[1] = Rx_data[2];
 8005d48:	4b34      	ldr	r3, [pc, #208]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d4a:	789a      	ldrb	r2, [r3, #2]
 8005d4c:	4b32      	ldr	r3, [pc, #200]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
			vcell_15databyte[13].m_bytes[0] = Rx_data[3];
 8005d52:	4b32      	ldr	r3, [pc, #200]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d54:	78da      	ldrb	r2, [r3, #3]
 8005d56:	4b30      	ldr	r3, [pc, #192]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			vcell_15databyte[14].m_bytes[1] = Rx_data[4];
 8005d5c:	4b2f      	ldr	r3, [pc, #188]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d5e:	791a      	ldrb	r2, [r3, #4]
 8005d60:	4b2d      	ldr	r3, [pc, #180]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
			vcell_15databyte[14].m_bytes[0] = Rx_data[5];
 8005d66:	4b2d      	ldr	r3, [pc, #180]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d68:	795a      	ldrb	r2, [r3, #5]
 8005d6a:	4b2b      	ldr	r3, [pc, #172]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
			vcell_15databyte[15].m_bytes[1] = Rx_data[6];
 8005d70:	4b2a      	ldr	r3, [pc, #168]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d72:	799a      	ldrb	r2, [r3, #6]
 8005d74:	4b28      	ldr	r3, [pc, #160]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
			vcell_15databyte[15].m_bytes[0] = Rx_data[7];
 8005d7a:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <CAN_Rx_Process+0x58c>)
 8005d7c:	79da      	ldrb	r2, [r3, #7]
 8005d7e:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <CAN_Rx_Process+0x588>)
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		}
		}
		// ******************************End Cell  Voltage Data Send**************************************
		BP_Voltage = Batt_voltage.m_uint16t/100;
 8005d84:	4b28      	ldr	r3, [pc, #160]	; (8005e28 <CAN_Rx_Process+0x598>)
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	4a28      	ldr	r2, [pc, #160]	; (8005e2c <CAN_Rx_Process+0x59c>)
 8005d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa ffbe 	bl	8000d14 <__aeabi_i2f>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <CAN_Rx_Process+0x5a0>)
 8005d9c:	601a      	str	r2, [r3, #0]
		BP_Current = (Batt_current.m_uint16t/100)-50;
 8005d9e:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <CAN_Rx_Process+0x5a4>)
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <CAN_Rx_Process+0x59c>)
 8005da4:	fba2 2303 	umull	r2, r3, r2, r3
 8005da8:	095b      	lsrs	r3, r3, #5
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	3b32      	subs	r3, #50	; 0x32
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7fa ffb0 	bl	8000d14 <__aeabi_i2f>
 8005db4:	4602      	mov	r2, r0
 8005db6:	4b20      	ldr	r3, [pc, #128]	; (8005e38 <CAN_Rx_Process+0x5a8>)
 8005db8:	601a      	str	r2, [r3, #0]
		BP_Temp = (Batt_temp.m_uint16t/10)-40;
 8005dba:	4b20      	ldr	r3, [pc, #128]	; (8005e3c <CAN_Rx_Process+0x5ac>)
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	4a20      	ldr	r2, [pc, #128]	; (8005e40 <CAN_Rx_Process+0x5b0>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	08db      	lsrs	r3, r3, #3
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b28      	subs	r3, #40	; 0x28
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fa ffa2 	bl	8000d14 <__aeabi_i2f>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	4b1c      	ldr	r3, [pc, #112]	; (8005e44 <CAN_Rx_Process+0x5b4>)
 8005dd4:	601a      	str	r2, [r3, #0]
		BP_SOC = Batt_SOC.m_uint16t;
 8005dd6:	4b1c      	ldr	r3, [pc, #112]	; (8005e48 <CAN_Rx_Process+0x5b8>)
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fa ff96 	bl	8000d0c <__aeabi_ui2f>
 8005de0:	4602      	mov	r2, r0
 8005de2:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <CAN_Rx_Process+0x5bc>)
 8005de4:	601a      	str	r2, [r3, #0]
		BP_Capacity = Batt_capacity.m_uint16t/100;
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <CAN_Rx_Process+0x5c0>)
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	4a10      	ldr	r2, [pc, #64]	; (8005e2c <CAN_Rx_Process+0x59c>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fa ff8d 	bl	8000d14 <__aeabi_i2f>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b15      	ldr	r3, [pc, #84]	; (8005e54 <CAN_Rx_Process+0x5c4>)
 8005dfe:	601a      	str	r2, [r3, #0]
		BP_SOH = Batt_SOH.m_uint16t;
 8005e00:	4b15      	ldr	r3, [pc, #84]	; (8005e58 <CAN_Rx_Process+0x5c8>)
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fa ff81 	bl	8000d0c <__aeabi_ui2f>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <CAN_Rx_Process+0x5cc>)
 8005e0e:	601a      	str	r2, [r3, #0]
//		BP_Cycle = Batt_cycle.m_uint16;

}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	20000a48 	.word	0x20000a48
 8005e1c:	20000e74 	.word	0x20000e74
 8005e20:	20001028 	.word	0x20001028
 8005e24:	20000a9c 	.word	0x20000a9c
 8005e28:	20000dc0 	.word	0x20000dc0
 8005e2c:	51eb851f 	.word	0x51eb851f
 8005e30:	200006dc 	.word	0x200006dc
 8005e34:	20000a0c 	.word	0x20000a0c
 8005e38:	20000a38 	.word	0x20000a38
 8005e3c:	20000a8c 	.word	0x20000a8c
 8005e40:	cccccccd 	.word	0xcccccccd
 8005e44:	20000900 	.word	0x20000900
 8005e48:	20000a44 	.word	0x20000a44
 8005e4c:	200007e4 	.word	0x200007e4
 8005e50:	20000d6c 	.word	0x20000d6c
 8005e54:	20000b94 	.word	0x20000b94
 8005e58:	2000069c 	.word	0x2000069c
 8005e5c:	20000b84 	.word	0x20000b84

08005e60 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005e66:	2300      	movs	r3, #0
 8005e68:	607b      	str	r3, [r7, #4]
 8005e6a:	4b0c      	ldr	r3, [pc, #48]	; (8005e9c <MX_DMA_Init+0x3c>)
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6e:	4a0b      	ldr	r2, [pc, #44]	; (8005e9c <MX_DMA_Init+0x3c>)
 8005e70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e74:	6313      	str	r3, [r2, #48]	; 0x30
 8005e76:	4b09      	ldr	r3, [pc, #36]	; (8005e9c <MX_DMA_Init+0x3c>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7e:	607b      	str	r3, [r7, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8005e82:	2200      	movs	r2, #0
 8005e84:	2100      	movs	r1, #0
 8005e86:	2038      	movs	r0, #56	; 0x38
 8005e88:	f003 fcfd 	bl	8009886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005e8c:	2038      	movs	r0, #56	; 0x38
 8005e8e:	f003 fd16 	bl	80098be <HAL_NVIC_EnableIRQ>

}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	40023800 	.word	0x40023800

08005ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ea6:	f107 030c 	add.w	r3, r7, #12
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	605a      	str	r2, [r3, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4a30      	ldr	r2, [pc, #192]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ec0:	f043 0304 	orr.w	r3, r3, #4
 8005ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec6:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f003 0304 	and.w	r3, r3, #4
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	607b      	str	r3, [r7, #4]
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eda:	4a29      	ldr	r2, [pc, #164]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005edc:	f043 0301 	orr.w	r3, r3, #1
 8005ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ee2:	4b27      	ldr	r3, [pc, #156]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005eee:	2300      	movs	r3, #0
 8005ef0:	603b      	str	r3, [r7, #0]
 8005ef2:	4b23      	ldr	r3, [pc, #140]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	4a22      	ldr	r2, [pc, #136]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005ef8:	f043 0302 	orr.w	r3, r3, #2
 8005efc:	6313      	str	r3, [r2, #48]	; 0x30
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <MX_GPIO_Init+0xe0>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	603b      	str	r3, [r7, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8005f10:	481c      	ldr	r0, [pc, #112]	; (8005f84 <MX_GPIO_Init+0xe4>)
 8005f12:	f004 fa32 	bl	800a37a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led3_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 8005f16:	2200      	movs	r2, #0
 8005f18:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005f1c:	481a      	ldr	r0, [pc, #104]	; (8005f88 <MX_GPIO_Init+0xe8>)
 8005f1e:	f004 fa2c 	bl	800a37a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 8005f22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005f26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4812      	ldr	r0, [pc, #72]	; (8005f84 <MX_GPIO_Init+0xe4>)
 8005f3c:	f004 f868 	bl	800a010 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Led3_Pin|Buzzer_Pin;
 8005f40:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f46:	2301      	movs	r3, #1
 8005f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f52:	f107 030c 	add.w	r3, r7, #12
 8005f56:	4619      	mov	r1, r3
 8005f58:	480b      	ldr	r0, [pc, #44]	; (8005f88 <MX_GPIO_Init+0xe8>)
 8005f5a:	f004 f859 	bl	800a010 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8005f5e:	2380      	movs	r3, #128	; 0x80
 8005f60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005f62:	2300      	movs	r3, #0
 8005f64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005f66:	2302      	movs	r3, #2
 8005f68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	4619      	mov	r1, r3
 8005f70:	4805      	ldr	r0, [pc, #20]	; (8005f88 <MX_GPIO_Init+0xe8>)
 8005f72:	f004 f84d 	bl	800a010 <HAL_GPIO_Init>

}
 8005f76:	bf00      	nop
 8005f78:	3720      	adds	r7, #32
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	40023800 	.word	0x40023800
 8005f84:	40020400 	.word	0x40020400
 8005f88:	40020800 	.word	0x40020800

08005f8c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8005f90:	4b12      	ldr	r3, [pc, #72]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <MX_I2C1_Init+0x54>)
 8005f94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005f96:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005f98:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <MX_I2C1_Init+0x58>)
 8005f9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005fa2:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005fa8:	4b0c      	ldr	r3, [pc, #48]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005faa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005fae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005fb0:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005fbc:	4b07      	ldr	r3, [pc, #28]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005fc2:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005fc8:	4804      	ldr	r0, [pc, #16]	; (8005fdc <MX_I2C1_Init+0x50>)
 8005fca:	f004 fa07 	bl	800a3dc <HAL_I2C_Init>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005fd4:	f000 fb68 	bl	80066a8 <Error_Handler>
  }

}
 8005fd8:	bf00      	nop
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	20000ea8 	.word	0x20000ea8
 8005fe0:	40005400 	.word	0x40005400
 8005fe4:	000186a0 	.word	0x000186a0

08005fe8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8005fec:	4b12      	ldr	r3, [pc, #72]	; (8006038 <MX_I2C2_Init+0x50>)
 8005fee:	4a13      	ldr	r2, [pc, #76]	; (800603c <MX_I2C2_Init+0x54>)
 8005ff0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005ff2:	4b11      	ldr	r3, [pc, #68]	; (8006038 <MX_I2C2_Init+0x50>)
 8005ff4:	4a12      	ldr	r2, [pc, #72]	; (8006040 <MX_I2C2_Init+0x58>)
 8005ff6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ff8:	4b0f      	ldr	r3, [pc, #60]	; (8006038 <MX_I2C2_Init+0x50>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <MX_I2C2_Init+0x50>)
 8006000:	2200      	movs	r2, #0
 8006002:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <MX_I2C2_Init+0x50>)
 8006006:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800600a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <MX_I2C2_Init+0x50>)
 800600e:	2200      	movs	r2, #0
 8006010:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006012:	4b09      	ldr	r3, [pc, #36]	; (8006038 <MX_I2C2_Init+0x50>)
 8006014:	2200      	movs	r2, #0
 8006016:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006018:	4b07      	ldr	r3, [pc, #28]	; (8006038 <MX_I2C2_Init+0x50>)
 800601a:	2200      	movs	r2, #0
 800601c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <MX_I2C2_Init+0x50>)
 8006020:	2200      	movs	r2, #0
 8006022:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006024:	4804      	ldr	r0, [pc, #16]	; (8006038 <MX_I2C2_Init+0x50>)
 8006026:	f004 f9d9 	bl	800a3dc <HAL_I2C_Init>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d001      	beq.n	8006034 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006030:	f000 fb3a 	bl	80066a8 <Error_Handler>
  }

}
 8006034:	bf00      	nop
 8006036:	bd80      	pop	{r7, pc}
 8006038:	20000efc 	.word	0x20000efc
 800603c:	40005800 	.word	0x40005800
 8006040:	00061a80 	.word	0x00061a80

08006044 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b08c      	sub	sp, #48	; 0x30
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800604c:	f107 031c 	add.w	r3, r7, #28
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	609a      	str	r2, [r3, #8]
 8006058:	60da      	str	r2, [r3, #12]
 800605a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a33      	ldr	r2, [pc, #204]	; (8006130 <HAL_I2C_MspInit+0xec>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d12d      	bne.n	80060c2 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006066:	2300      	movs	r3, #0
 8006068:	61bb      	str	r3, [r7, #24]
 800606a:	4b32      	ldr	r3, [pc, #200]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 800606c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606e:	4a31      	ldr	r2, [pc, #196]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 8006070:	f043 0302 	orr.w	r3, r3, #2
 8006074:	6313      	str	r3, [r2, #48]	; 0x30
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 8006078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	61bb      	str	r3, [r7, #24]
 8006080:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006082:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006088:	2312      	movs	r3, #18
 800608a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800608c:	2301      	movs	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006090:	2303      	movs	r3, #3
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006094:	2304      	movs	r3, #4
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006098:	f107 031c 	add.w	r3, r7, #28
 800609c:	4619      	mov	r1, r3
 800609e:	4826      	ldr	r0, [pc, #152]	; (8006138 <HAL_I2C_MspInit+0xf4>)
 80060a0:	f003 ffb6 	bl	800a010 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	4b22      	ldr	r3, [pc, #136]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	4a21      	ldr	r2, [pc, #132]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 80060ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060b2:	6413      	str	r3, [r2, #64]	; 0x40
 80060b4:	4b1f      	ldr	r3, [pc, #124]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80060c0:	e031      	b.n	8006126 <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	; (800613c <HAL_I2C_MspInit+0xf8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d12c      	bne.n	8006126 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	4b18      	ldr	r3, [pc, #96]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	4a17      	ldr	r2, [pc, #92]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 80060d6:	f043 0302 	orr.w	r3, r3, #2
 80060da:	6313      	str	r3, [r2, #48]	; 0x30
 80060dc:	4b15      	ldr	r3, [pc, #84]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 80060de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80060e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060ee:	2312      	movs	r3, #18
 80060f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060f2:	2301      	movs	r3, #1
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060f6:	2303      	movs	r3, #3
 80060f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80060fa:	2304      	movs	r3, #4
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060fe:	f107 031c 	add.w	r3, r7, #28
 8006102:	4619      	mov	r1, r3
 8006104:	480c      	ldr	r0, [pc, #48]	; (8006138 <HAL_I2C_MspInit+0xf4>)
 8006106:	f003 ff83 	bl	800a010 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a08      	ldr	r2, [pc, #32]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 8006114:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b06      	ldr	r3, [pc, #24]	; (8006134 <HAL_I2C_MspInit+0xf0>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006122:	60fb      	str	r3, [r7, #12]
 8006124:	68fb      	ldr	r3, [r7, #12]
}
 8006126:	bf00      	nop
 8006128:	3730      	adds	r7, #48	; 0x30
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40005400 	.word	0x40005400
 8006134:	40023800 	.word	0x40023800
 8006138:	40020400 	.word	0x40020400
 800613c:	40005800 	.word	0x40005800

08006140 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <MX_IWDG_Init+0x2c>)
 8006146:	4a0a      	ldr	r2, [pc, #40]	; (8006170 <MX_IWDG_Init+0x30>)
 8006148:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <MX_IWDG_Init+0x2c>)
 800614c:	2204      	movs	r2, #4
 800614e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <MX_IWDG_Init+0x2c>)
 8006152:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006156:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8006158:	4804      	ldr	r0, [pc, #16]	; (800616c <MX_IWDG_Init+0x2c>)
 800615a:	f005 f839 	bl	800b1d0 <HAL_IWDG_Init>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8006164:	f000 faa0 	bl	80066a8 <Error_Handler>
  }

}
 8006168:	bf00      	nop
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000f50 	.word	0x20000f50
 8006170:	40003000 	.word	0x40003000

08006174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006178:	f001 fffa 	bl	8008170 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800617c:	f000 f844 	bl	8006208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006180:	f7ff fe8e 	bl	8005ea0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006184:	f7ff fe6c 	bl	8005e60 <MX_DMA_Init>
  MX_I2C2_Init();
 8006188:	f7ff ff2e 	bl	8005fe8 <MX_I2C2_Init>
  MX_TIM1_Init();
 800618c:	f001 fcaa 	bl	8007ae4 <MX_TIM1_Init>
  MX_CAN1_Init();
 8006190:	f7ff fab2 	bl	80056f8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8006194:	f7ff fefa 	bl	8005f8c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8006198:	f001 ff08 	bl	8007fac <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800619c:	f7ff f948 	bl	8005430 <MX_ADC1_Init>
  MX_TIM2_Init();
 80061a0:	f001 fd40 	bl	8007c24 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80061a4:	f001 fed8 	bl	8007f58 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80061a8:	f001 fd88 	bl	8007cbc <MX_TIM3_Init>
  MX_IWDG_Init();
 80061ac:	f7ff ffc8 	bl	8006140 <MX_IWDG_Init>
  MX_TIM4_Init();
 80061b0:	f001 fdd2 	bl	8007d58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  Charger_Mode = 0;
 80061b4:	4b11      	ldr	r3, [pc, #68]	; (80061fc <main+0x88>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
  Eror_Code = 0;
 80061ba:	4b11      	ldr	r3, [pc, #68]	; (8006200 <main+0x8c>)
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
  CHARGER_ON_Init();
 80061c0:	f000 f8ae 	bl	8006320 <CHARGER_ON_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_isDeviceReady(0XA0);
 80061c4:	20a0      	movs	r0, #160	; 0xa0
 80061c6:	f7ff f8f7 	bl	80053b8 <EEPROM_isDeviceReady>
  EEPROM_WriteData(10, 15);
 80061ca:	210f      	movs	r1, #15
 80061cc:	200a      	movs	r0, #10
 80061ce:	f7ff f911 	bl	80053f4 <EEPROM_WriteData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Charger_Mode==1) 		Display_ChargeMode();
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <main+0x88>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d102      	bne.n	80061e0 <main+0x6c>
 80061da:	f000 f967 	bl	80064ac <Display_ChargeMode>
 80061de:	e008      	b.n	80061f2 <main+0x7e>
	  else if (Charger_Mode==2)	Display_ProtectionMode();
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <main+0x88>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d102      	bne.n	80061ee <main+0x7a>
 80061e8:	f000 f934 	bl	8006454 <Display_ProtectionMode>
 80061ec:	e001      	b.n	80061f2 <main+0x7e>
	  else						Display_StanbyMode();
 80061ee:	f000 f91b 	bl	8006428 <Display_StanbyMode>

	  HAL_IWDG_Refresh(&hiwdg);
 80061f2:	4804      	ldr	r0, [pc, #16]	; (8006204 <main+0x90>)
 80061f4:	f005 f825 	bl	800b242 <HAL_IWDG_Refresh>
	  if(Charger_Mode==1) 		Display_ChargeMode();
 80061f8:	e7eb      	b.n	80061d2 <main+0x5e>
 80061fa:	bf00      	nop
 80061fc:	20000700 	.word	0x20000700
 8006200:	20000688 	.word	0x20000688
 8006204:	20000f50 	.word	0x20000f50

08006208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b092      	sub	sp, #72	; 0x48
 800620c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800620e:	f107 0318 	add.w	r3, r7, #24
 8006212:	2230      	movs	r2, #48	; 0x30
 8006214:	2100      	movs	r1, #0
 8006216:	4618      	mov	r0, r3
 8006218:	f007 f842 	bl	800d2a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800621c:	1d3b      	adds	r3, r7, #4
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	605a      	str	r2, [r3, #4]
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	60da      	str	r2, [r3, #12]
 8006228:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800622a:	230a      	movs	r3, #10
 800622c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800622e:	2301      	movs	r3, #1
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006232:	2310      	movs	r3, #16
 8006234:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006236:	2301      	movs	r3, #1
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800623a:	2302      	movs	r3, #2
 800623c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800623e:	2300      	movs	r3, #0
 8006240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8006242:	230d      	movs	r3, #13
 8006244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8006246:	23c3      	movs	r3, #195	; 0xc3
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800624a:	2302      	movs	r3, #2
 800624c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800624e:	2304      	movs	r3, #4
 8006250:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006252:	f107 0318 	add.w	r3, r7, #24
 8006256:	4618      	mov	r0, r3
 8006258:	f005 f802 	bl	800b260 <HAL_RCC_OscConfig>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8006262:	f000 fa21 	bl	80066a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006266:	230f      	movs	r3, #15
 8006268:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800626a:	2302      	movs	r3, #2
 800626c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006272:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006276:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800627c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800627e:	1d3b      	adds	r3, r7, #4
 8006280:	2103      	movs	r1, #3
 8006282:	4618      	mov	r0, r3
 8006284:	f005 fa56 	bl	800b734 <HAL_RCC_ClockConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800628e:	f000 fa0b 	bl	80066a8 <Error_Handler>
  }
}
 8006292:	bf00      	nop
 8006294:	3748      	adds	r7, #72	; 0x48
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <HAL_ADC_ConvCpltCallback+0x5c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d11f      	bne.n	80062ee <HAL_ADC_ConvCpltCallback+0x52>
	{
		ADC_VoutN = ADC_value[0];
 80062ae:	4b13      	ldr	r3, [pc, #76]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062b0:	881a      	ldrh	r2, [r3, #0]
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <HAL_ADC_ConvCpltCallback+0x64>)
 80062b4:	801a      	strh	r2, [r3, #0]
		ADC_VoutP = ADC_value[1];
 80062b6:	4b11      	ldr	r3, [pc, #68]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062b8:	885a      	ldrh	r2, [r3, #2]
 80062ba:	4b12      	ldr	r3, [pc, #72]	; (8006304 <HAL_ADC_ConvCpltCallback+0x68>)
 80062bc:	801a      	strh	r2, [r3, #0]
		ADC_Iin = ADC_value[2];
 80062be:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062c0:	889a      	ldrh	r2, [r3, #4]
 80062c2:	4b11      	ldr	r3, [pc, #68]	; (8006308 <HAL_ADC_ConvCpltCallback+0x6c>)
 80062c4:	801a      	strh	r2, [r3, #0]
		ADC_temp1 = ADC_value[3];
 80062c6:	4b0d      	ldr	r3, [pc, #52]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062c8:	88da      	ldrh	r2, [r3, #6]
 80062ca:	4b10      	ldr	r3, [pc, #64]	; (800630c <HAL_ADC_ConvCpltCallback+0x70>)
 80062cc:	801a      	strh	r2, [r3, #0]
		ADC_temp2 = ADC_value[4];
 80062ce:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062d0:	891a      	ldrh	r2, [r3, #8]
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <HAL_ADC_ConvCpltCallback+0x74>)
 80062d4:	801a      	strh	r2, [r3, #0]
		ADC_VinN = ADC_value[5];
 80062d6:	4b09      	ldr	r3, [pc, #36]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062d8:	895a      	ldrh	r2, [r3, #10]
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <HAL_ADC_ConvCpltCallback+0x78>)
 80062dc:	801a      	strh	r2, [r3, #0]
		ADC_VinP = ADC_value[6];
 80062de:	4b07      	ldr	r3, [pc, #28]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062e0:	899a      	ldrh	r2, [r3, #12]
 80062e2:	4b0d      	ldr	r3, [pc, #52]	; (8006318 <HAL_ADC_ConvCpltCallback+0x7c>)
 80062e4:	801a      	strh	r2, [r3, #0]
		ADC_Iout = ADC_value[7];
 80062e6:	4b05      	ldr	r3, [pc, #20]	; (80062fc <HAL_ADC_ConvCpltCallback+0x60>)
 80062e8:	89da      	ldrh	r2, [r3, #14]
 80062ea:	4b0c      	ldr	r3, [pc, #48]	; (800631c <HAL_ADC_ConvCpltCallback+0x80>)
 80062ec:	801a      	strh	r2, [r3, #0]
	}
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012000 	.word	0x40012000
 80062fc:	20000814 	.word	0x20000814
 8006300:	20000690 	.word	0x20000690
 8006304:	20000800 	.word	0x20000800
 8006308:	200006aa 	.word	0x200006aa
 800630c:	2000080a 	.word	0x2000080a
 8006310:	20000694 	.word	0x20000694
 8006314:	20000a10 	.word	0x20000a10
 8006318:	200006f4 	.word	0x200006f4
 800631c:	200006d8 	.word	0x200006d8

08006320 <CHARGER_ON_Init>:

void CHARGER_ON_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8006324:	f000 f9c6 	bl	80066b4 <SSD1306_Init>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006328:	2000      	movs	r0, #0
 800632a:	f000 fab1 	bl	8006890 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800632e:	f000 fa81 	bl	8006834 <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8006332:	2201      	movs	r2, #1
 8006334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006338:	4831      	ldr	r0, [pc, #196]	; (8006400 <CHARGER_ON_Init+0xe0>)
 800633a:	f004 f81e 	bl	800a37a <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800633e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006342:	f001 ff83 	bl	800824c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800634a:	482d      	ldr	r0, [pc, #180]	; (8006400 <CHARGER_ON_Init+0xe0>)
 800634c:	f004 f82d 	bl	800a3aa <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 8006350:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006354:	f001 ff7a 	bl	800824c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006358:	f44f 7180 	mov.w	r1, #256	; 0x100
 800635c:	4828      	ldr	r0, [pc, #160]	; (8006400 <CHARGER_ON_Init+0xe0>)
 800635e:	f004 f824 	bl	800a3aa <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8006362:	2064      	movs	r0, #100	; 0x64
 8006364:	f001 ff72 	bl	800824c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006368:	f44f 7180 	mov.w	r1, #256	; 0x100
 800636c:	4824      	ldr	r0, [pc, #144]	; (8006400 <CHARGER_ON_Init+0xe0>)
 800636e:	f004 f81c 	bl	800a3aa <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8006372:	2064      	movs	r0, #100	; 0x64
 8006374:	f001 ff6a 	bl	800824c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006378:	f44f 7180 	mov.w	r1, #256	; 0x100
 800637c:	4820      	ldr	r0, [pc, #128]	; (8006400 <CHARGER_ON_Init+0xe0>)
 800637e:	f004 f814 	bl	800a3aa <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8006382:	2064      	movs	r0, #100	; 0x64
 8006384:	f001 ff62 	bl	800824c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800638c:	481c      	ldr	r0, [pc, #112]	; (8006400 <CHARGER_ON_Init+0xe0>)
 800638e:	f004 f80c 	bl	800a3aa <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8006392:	2064      	movs	r0, #100	; 0x64
 8006394:	f001 ff5a 	bl	800824c <HAL_Delay>

	CAN_Setting();
 8006398:	f7ff fa3c 	bl	8005814 <CAN_Setting>

	SSD1306_GotoXY (15,10);
 800639c:	210a      	movs	r1, #10
 800639e:	200f      	movs	r0, #15
 80063a0:	f000 faec 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I Charger", &Font_7x10, 1);
 80063a4:	2201      	movs	r2, #1
 80063a6:	4917      	ldr	r1, [pc, #92]	; (8006404 <CHARGER_ON_Init+0xe4>)
 80063a8:	4817      	ldr	r0, [pc, #92]	; (8006408 <CHARGER_ON_Init+0xe8>)
 80063aa:	f000 fb7d 	bl	8006aa8 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 80063ae:	211e      	movs	r1, #30
 80063b0:	2032      	movs	r0, #50	; 0x32
 80063b2:	f000 fae3 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts ("V1.0", &Font_7x10, 1);
 80063b6:	2201      	movs	r2, #1
 80063b8:	4912      	ldr	r1, [pc, #72]	; (8006404 <CHARGER_ON_Init+0xe4>)
 80063ba:	4814      	ldr	r0, [pc, #80]	; (800640c <CHARGER_ON_Init+0xec>)
 80063bc:	f000 fb74 	bl	8006aa8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80063c0:	f000 fa38 	bl	8006834 <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 80063c4:	2000      	movs	r0, #0
 80063c6:	f000 fa63 	bl	8006890 <SSD1306_Fill>

	HAL_TIM_Base_Start(&htim1);
 80063ca:	4811      	ldr	r0, [pc, #68]	; (8006410 <CHARGER_ON_Init+0xf0>)
 80063cc:	f005 fbc9 	bl	800bb62 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80063d0:	2100      	movs	r1, #0
 80063d2:	480f      	ldr	r0, [pc, #60]	; (8006410 <CHARGER_ON_Init+0xf0>)
 80063d4:	f005 fc40 	bl	800bc58 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 80063d8:	480e      	ldr	r0, [pc, #56]	; (8006414 <CHARGER_ON_Init+0xf4>)
 80063da:	f005 fbe5 	bl	800bba8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80063de:	480e      	ldr	r0, [pc, #56]	; (8006418 <CHARGER_ON_Init+0xf8>)
 80063e0:	f005 fbe2 	bl	800bba8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 80063e4:	480d      	ldr	r0, [pc, #52]	; (800641c <CHARGER_ON_Init+0xfc>)
 80063e6:	f005 fbdf 	bl	800bba8 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_value, 8);
 80063ea:	2208      	movs	r2, #8
 80063ec:	490c      	ldr	r1, [pc, #48]	; (8006420 <CHARGER_ON_Init+0x100>)
 80063ee:	480d      	ldr	r0, [pc, #52]	; (8006424 <CHARGER_ON_Init+0x104>)
 80063f0:	f001 ff92 	bl	8008318 <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 80063f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063f8:	f001 ff28 	bl	800824c <HAL_Delay>
//	Charger_Mode=1;
}
 80063fc:	bf00      	nop
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40020800 	.word	0x40020800
 8006404:	20000048 	.word	0x20000048
 8006408:	0800f7b0 	.word	0x0800f7b0
 800640c:	0800f7c0 	.word	0x0800f7c0
 8006410:	200010f0 	.word	0x200010f0
 8006414:	20001130 	.word	0x20001130
 8006418:	200010b0 	.word	0x200010b0
 800641c:	20001070 	.word	0x20001070
 8006420:	20000814 	.word	0x20000814
 8006424:	20000dc4 	.word	0x20000dc4

08006428 <Display_StanbyMode>:

void Display_StanbyMode(void){
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800642c:	2000      	movs	r0, #0
 800642e:	f000 fa2f 	bl	8006890 <SSD1306_Fill>
	SSD1306_GotoXY (20,30);
 8006432:	211e      	movs	r1, #30
 8006434:	2014      	movs	r0, #20
 8006436:	f000 faa1 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts ("STANBY-Mode", &Font_7x10, 1);
 800643a:	2201      	movs	r2, #1
 800643c:	4903      	ldr	r1, [pc, #12]	; (800644c <Display_StanbyMode+0x24>)
 800643e:	4804      	ldr	r0, [pc, #16]	; (8006450 <Display_StanbyMode+0x28>)
 8006440:	f000 fb32 	bl	8006aa8 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8006444:	f000 f9f6 	bl	8006834 <SSD1306_UpdateScreen>
}
 8006448:	bf00      	nop
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000048 	.word	0x20000048
 8006450:	0800f7c8 	.word	0x0800f7c8

08006454 <Display_ProtectionMode>:

void Display_ProtectionMode(void){
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006458:	2000      	movs	r0, #0
 800645a:	f000 fa19 	bl	8006890 <SSD1306_Fill>
	SSD1306_GotoXY (20,10);
 800645e:	210a      	movs	r1, #10
 8006460:	2014      	movs	r0, #20
 8006462:	f000 fa8b 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts ("FAULT Protect", &Font_7x10, 1);
 8006466:	2201      	movs	r2, #1
 8006468:	490b      	ldr	r1, [pc, #44]	; (8006498 <Display_ProtectionMode+0x44>)
 800646a:	480c      	ldr	r0, [pc, #48]	; (800649c <Display_ProtectionMode+0x48>)
 800646c:	f000 fb1c 	bl	8006aa8 <SSD1306_Puts>

	sprintf(buffer_i2c, "Eror =%2d", Eror_Code);
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <Display_ProtectionMode+0x4c>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	490b      	ldr	r1, [pc, #44]	; (80064a4 <Display_ProtectionMode+0x50>)
 8006478:	480b      	ldr	r0, [pc, #44]	; (80064a8 <Display_ProtectionMode+0x54>)
 800647a:	f007 fb69 	bl	800db50 <siprintf>
	SSD1306_GotoXY (20,30);
 800647e:	211e      	movs	r1, #30
 8006480:	2014      	movs	r0, #20
 8006482:	f000 fa7b 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006486:	2201      	movs	r2, #1
 8006488:	4903      	ldr	r1, [pc, #12]	; (8006498 <Display_ProtectionMode+0x44>)
 800648a:	4807      	ldr	r0, [pc, #28]	; (80064a8 <Display_ProtectionMode+0x54>)
 800648c:	f000 fb0c 	bl	8006aa8 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006490:	f000 f9d0 	bl	8006834 <SSD1306_UpdateScreen>
}
 8006494:	bf00      	nop
 8006496:	bd80      	pop	{r7, pc}
 8006498:	20000048 	.word	0x20000048
 800649c:	0800f7d4 	.word	0x0800f7d4
 80064a0:	20000688 	.word	0x20000688
 80064a4:	0800f7e4 	.word	0x0800f7e4
 80064a8:	20000f5c 	.word	0x20000f5c

080064ac <Display_ChargeMode>:

void Display_ChargeMode(void){
 80064ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af02      	add	r7, sp, #8
	SSD1306_Fill (0);
 80064b2:	2000      	movs	r0, #0
 80064b4:	f000 f9ec 	bl	8006890 <SSD1306_Fill>

	sprintf(buffer_i2c, "Charger - RUN");
 80064b8:	4a64      	ldr	r2, [pc, #400]	; (800664c <Display_ChargeMode+0x1a0>)
 80064ba:	4b65      	ldr	r3, [pc, #404]	; (8006650 <Display_ChargeMode+0x1a4>)
 80064bc:	4614      	mov	r4, r2
 80064be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80064c0:	6020      	str	r0, [r4, #0]
 80064c2:	6061      	str	r1, [r4, #4]
 80064c4:	60a2      	str	r2, [r4, #8]
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY (12,0);
 80064ca:	2100      	movs	r1, #0
 80064cc:	200c      	movs	r0, #12
 80064ce:	f000 fa55 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80064d2:	2201      	movs	r2, #1
 80064d4:	495f      	ldr	r1, [pc, #380]	; (8006654 <Display_ChargeMode+0x1a8>)
 80064d6:	485d      	ldr	r0, [pc, #372]	; (800664c <Display_ChargeMode+0x1a0>)
 80064d8:	f000 fae6 	bl	8006aa8 <SSD1306_Puts>

	sprintf(buffer_i2c, "D = %4.1f | %2d|%2d \r\n", dc, Batt_SOC.m_uint16t, Batt_temp.m_uint16t);
 80064dc:	4b5e      	ldr	r3, [pc, #376]	; (8006658 <Display_ChargeMode+0x1ac>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7f9 ffdd 	bl	80004a0 <__aeabi_f2d>
 80064e6:	4b5d      	ldr	r3, [pc, #372]	; (800665c <Display_ChargeMode+0x1b0>)
 80064e8:	881b      	ldrh	r3, [r3, #0]
 80064ea:	461a      	mov	r2, r3
 80064ec:	4b5c      	ldr	r3, [pc, #368]	; (8006660 <Display_ChargeMode+0x1b4>)
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	9301      	str	r3, [sp, #4]
 80064f2:	9200      	str	r2, [sp, #0]
 80064f4:	4602      	mov	r2, r0
 80064f6:	460b      	mov	r3, r1
 80064f8:	495a      	ldr	r1, [pc, #360]	; (8006664 <Display_ChargeMode+0x1b8>)
 80064fa:	4854      	ldr	r0, [pc, #336]	; (800664c <Display_ChargeMode+0x1a0>)
 80064fc:	f007 fb28 	bl	800db50 <siprintf>
//	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", dc, EEPROM_ReadData(10));
	SSD1306_GotoXY (5,13);
 8006500:	210d      	movs	r1, #13
 8006502:	2005      	movs	r0, #5
 8006504:	f000 fa3a 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006508:	2201      	movs	r2, #1
 800650a:	4952      	ldr	r1, [pc, #328]	; (8006654 <Display_ChargeMode+0x1a8>)
 800650c:	484f      	ldr	r0, [pc, #316]	; (800664c <Display_ChargeMode+0x1a0>)
 800650e:	f000 facb 	bl	8006aa8 <SSD1306_Puts>

	//sprintf(usart_Tx_buffer,"Test USART %d\r\n",(unsigned int)i);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006512:	484e      	ldr	r0, [pc, #312]	; (800664c <Display_ChargeMode+0x1a0>)
 8006514:	f7f9 fe58 	bl	80001c8 <strlen>
 8006518:	4603      	mov	r3, r0
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	494b      	ldr	r1, [pc, #300]	; (800664c <Display_ChargeMode+0x1a0>)
 8006520:	4851      	ldr	r0, [pc, #324]	; (8006668 <Display_ChargeMode+0x1bc>)
 8006522:	f006 fa81 	bl	800ca28 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006526:	4849      	ldr	r0, [pc, #292]	; (800664c <Display_ChargeMode+0x1a0>)
 8006528:	f7f9 fe4e 	bl	80001c8 <strlen>
 800652c:	4603      	mov	r3, r0
 800652e:	b29b      	uxth	r3, r3
 8006530:	461a      	mov	r2, r3
 8006532:	4946      	ldr	r1, [pc, #280]	; (800664c <Display_ChargeMode+0x1a0>)
 8006534:	484d      	ldr	r0, [pc, #308]	; (800666c <Display_ChargeMode+0x1c0>)
 8006536:	f006 fa77 	bl	800ca28 <HAL_UART_Transmit_IT>

	HAL_Delay(10);
 800653a:	200a      	movs	r0, #10
 800653c:	f001 fe86 	bl	800824c <HAL_Delay>

	sprintf(buffer_i2c, "T = %4.1f | %4.1f", Temp_T1, Temp_T2);
 8006540:	4b4b      	ldr	r3, [pc, #300]	; (8006670 <Display_ChargeMode+0x1c4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7f9 ffab 	bl	80004a0 <__aeabi_f2d>
 800654a:	4605      	mov	r5, r0
 800654c:	460e      	mov	r6, r1
 800654e:	4b49      	ldr	r3, [pc, #292]	; (8006674 <Display_ChargeMode+0x1c8>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f7f9 ffa4 	bl	80004a0 <__aeabi_f2d>
 8006558:	4603      	mov	r3, r0
 800655a:	460c      	mov	r4, r1
 800655c:	e9cd 3400 	strd	r3, r4, [sp]
 8006560:	462a      	mov	r2, r5
 8006562:	4633      	mov	r3, r6
 8006564:	4944      	ldr	r1, [pc, #272]	; (8006678 <Display_ChargeMode+0x1cc>)
 8006566:	4839      	ldr	r0, [pc, #228]	; (800664c <Display_ChargeMode+0x1a0>)
 8006568:	f007 faf2 	bl	800db50 <siprintf>
	SSD1306_GotoXY (5,23);
 800656c:	2117      	movs	r1, #23
 800656e:	2005      	movs	r0, #5
 8006570:	f000 fa04 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006574:	2201      	movs	r2, #1
 8006576:	4937      	ldr	r1, [pc, #220]	; (8006654 <Display_ChargeMode+0x1a8>)
 8006578:	4834      	ldr	r0, [pc, #208]	; (800664c <Display_ChargeMode+0x1a0>)
 800657a:	f000 fa95 	bl	8006aa8 <SSD1306_Puts>

	sprintf(buffer_i2c, "V = %4.0f | %4.2f", ADC_VoltageResult, Voltage_Charger);
 800657e:	4b3f      	ldr	r3, [pc, #252]	; (800667c <Display_ChargeMode+0x1d0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7f9 ff8c 	bl	80004a0 <__aeabi_f2d>
 8006588:	4605      	mov	r5, r0
 800658a:	460e      	mov	r6, r1
 800658c:	4b3c      	ldr	r3, [pc, #240]	; (8006680 <Display_ChargeMode+0x1d4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4618      	mov	r0, r3
 8006592:	f7f9 ff85 	bl	80004a0 <__aeabi_f2d>
 8006596:	4603      	mov	r3, r0
 8006598:	460c      	mov	r4, r1
 800659a:	e9cd 3400 	strd	r3, r4, [sp]
 800659e:	462a      	mov	r2, r5
 80065a0:	4633      	mov	r3, r6
 80065a2:	4938      	ldr	r1, [pc, #224]	; (8006684 <Display_ChargeMode+0x1d8>)
 80065a4:	4829      	ldr	r0, [pc, #164]	; (800664c <Display_ChargeMode+0x1a0>)
 80065a6:	f007 fad3 	bl	800db50 <siprintf>
//	sprintf(buffer_i2c, "V = %4.0f | %4.0f", ADC_Average_VoutN, ADC_Average_VoutP);
	SSD1306_GotoXY (5,33);
 80065aa:	2121      	movs	r1, #33	; 0x21
 80065ac:	2005      	movs	r0, #5
 80065ae:	f000 f9e5 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80065b2:	2201      	movs	r2, #1
 80065b4:	4927      	ldr	r1, [pc, #156]	; (8006654 <Display_ChargeMode+0x1a8>)
 80065b6:	4825      	ldr	r0, [pc, #148]	; (800664c <Display_ChargeMode+0x1a0>)
 80065b8:	f000 fa76 	bl	8006aa8 <SSD1306_Puts>

	sprintf(buffer_i2c, "A = %4.0f | %4.2f", ADC_Average_Iout, Current_Charger);
 80065bc:	4b32      	ldr	r3, [pc, #200]	; (8006688 <Display_ChargeMode+0x1dc>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f7f9 ff6d 	bl	80004a0 <__aeabi_f2d>
 80065c6:	4605      	mov	r5, r0
 80065c8:	460e      	mov	r6, r1
 80065ca:	4b30      	ldr	r3, [pc, #192]	; (800668c <Display_ChargeMode+0x1e0>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7f9 ff66 	bl	80004a0 <__aeabi_f2d>
 80065d4:	4603      	mov	r3, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	e9cd 3400 	strd	r3, r4, [sp]
 80065dc:	462a      	mov	r2, r5
 80065de:	4633      	mov	r3, r6
 80065e0:	492b      	ldr	r1, [pc, #172]	; (8006690 <Display_ChargeMode+0x1e4>)
 80065e2:	481a      	ldr	r0, [pc, #104]	; (800664c <Display_ChargeMode+0x1a0>)
 80065e4:	f007 fab4 	bl	800db50 <siprintf>
	//(float)Batt_current.m_uint16t/100);
	SSD1306_GotoXY (5,43);
 80065e8:	212b      	movs	r1, #43	; 0x2b
 80065ea:	2005      	movs	r0, #5
 80065ec:	f000 f9c6 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80065f0:	2201      	movs	r2, #1
 80065f2:	4918      	ldr	r1, [pc, #96]	; (8006654 <Display_ChargeMode+0x1a8>)
 80065f4:	4815      	ldr	r0, [pc, #84]	; (800664c <Display_ChargeMode+0x1a0>)
 80065f6:	f000 fa57 	bl	8006aa8 <SSD1306_Puts>

	sprintf(buffer_i2c, "E =%2d--%2d ", Eror_Code, LastEror_code);
 80065fa:	4b26      	ldr	r3, [pc, #152]	; (8006694 <Display_ChargeMode+0x1e8>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	4b25      	ldr	r3, [pc, #148]	; (8006698 <Display_ChargeMode+0x1ec>)
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	4925      	ldr	r1, [pc, #148]	; (800669c <Display_ChargeMode+0x1f0>)
 8006606:	4811      	ldr	r0, [pc, #68]	; (800664c <Display_ChargeMode+0x1a0>)
 8006608:	f007 faa2 	bl	800db50 <siprintf>
	SSD1306_GotoXY (5,53);
 800660c:	2135      	movs	r1, #53	; 0x35
 800660e:	2005      	movs	r0, #5
 8006610:	f000 f9b4 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006614:	2201      	movs	r2, #1
 8006616:	490f      	ldr	r1, [pc, #60]	; (8006654 <Display_ChargeMode+0x1a8>)
 8006618:	480c      	ldr	r0, [pc, #48]	; (800664c <Display_ChargeMode+0x1a0>)
 800661a:	f000 fa45 	bl	8006aa8 <SSD1306_Puts>

	sprintf(buffer_i2c, "| %lx", UNIQUE_Code);
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <Display_ChargeMode+0x1f4>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	491f      	ldr	r1, [pc, #124]	; (80066a4 <Display_ChargeMode+0x1f8>)
 8006626:	4809      	ldr	r0, [pc, #36]	; (800664c <Display_ChargeMode+0x1a0>)
 8006628:	f007 fa92 	bl	800db50 <siprintf>
	SSD1306_GotoXY (68,53);
 800662c:	2135      	movs	r1, #53	; 0x35
 800662e:	2044      	movs	r0, #68	; 0x44
 8006630:	f000 f9a4 	bl	800697c <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006634:	2201      	movs	r2, #1
 8006636:	4907      	ldr	r1, [pc, #28]	; (8006654 <Display_ChargeMode+0x1a8>)
 8006638:	4804      	ldr	r0, [pc, #16]	; (800664c <Display_ChargeMode+0x1a0>)
 800663a:	f000 fa35 	bl	8006aa8 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 800663e:	f000 f8f9 	bl	8006834 <SSD1306_UpdateScreen>
}
 8006642:	bf00      	nop
 8006644:	3704      	adds	r7, #4
 8006646:	46bd      	mov	sp, r7
 8006648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800664a:	bf00      	nop
 800664c:	20000f5c 	.word	0x20000f5c
 8006650:	0800f7f0 	.word	0x0800f7f0
 8006654:	20000048 	.word	0x20000048
 8006658:	200006b4 	.word	0x200006b4
 800665c:	20000a44 	.word	0x20000a44
 8006660:	20000a8c 	.word	0x20000a8c
 8006664:	0800f800 	.word	0x0800f800
 8006668:	20001170 	.word	0x20001170
 800666c:	200011b0 	.word	0x200011b0
 8006670:	20000a3c 	.word	0x20000a3c
 8006674:	20000698 	.word	0x20000698
 8006678:	0800f818 	.word	0x0800f818
 800667c:	20000a40 	.word	0x20000a40
 8006680:	20000b90 	.word	0x20000b90
 8006684:	0800f82c 	.word	0x0800f82c
 8006688:	20000d74 	.word	0x20000d74
 800668c:	20000d58 	.word	0x20000d58
 8006690:	0800f840 	.word	0x0800f840
 8006694:	20000688 	.word	0x20000688
 8006698:	200006e0 	.word	0x200006e0
 800669c:	0800f854 	.word	0x0800f854
 80066a0:	20000a9c 	.word	0x20000a9c
 80066a4:	0800f864 	.word	0x0800f864

080066a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80066a8:	b480      	push	{r7}
 80066aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80066ac:	bf00      	nop
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80066ba:	f000 fa1b 	bl	8006af4 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80066be:	f644 6320 	movw	r3, #20000	; 0x4e20
 80066c2:	2201      	movs	r2, #1
 80066c4:	2178      	movs	r1, #120	; 0x78
 80066c6:	4858      	ldr	r0, [pc, #352]	; (8006828 <SSD1306_Init+0x174>)
 80066c8:	f004 f9b8 	bl	800aa3c <HAL_I2C_IsDeviceReady>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d001      	beq.n	80066d6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e0a3      	b.n	800681e <SSD1306_Init+0x16a>
	}
	
	/* A little delay */
	uint32_t p = 2500000;
 80066d6:	4b55      	ldr	r3, [pc, #340]	; (800682c <SSD1306_Init+0x178>)
 80066d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80066da:	e002      	b.n	80066e2 <SSD1306_Init+0x2e>
		p--;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	3b01      	subs	r3, #1
 80066e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d1f9      	bne.n	80066dc <SSD1306_Init+0x28>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80066e8:	22ae      	movs	r2, #174	; 0xae
 80066ea:	2100      	movs	r1, #0
 80066ec:	2078      	movs	r0, #120	; 0x78
 80066ee:	f000 fa6f 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80066f2:	2220      	movs	r2, #32
 80066f4:	2100      	movs	r1, #0
 80066f6:	2078      	movs	r0, #120	; 0x78
 80066f8:	f000 fa6a 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80066fc:	2210      	movs	r2, #16
 80066fe:	2100      	movs	r1, #0
 8006700:	2078      	movs	r0, #120	; 0x78
 8006702:	f000 fa65 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006706:	22b0      	movs	r2, #176	; 0xb0
 8006708:	2100      	movs	r1, #0
 800670a:	2078      	movs	r0, #120	; 0x78
 800670c:	f000 fa60 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006710:	22c8      	movs	r2, #200	; 0xc8
 8006712:	2100      	movs	r1, #0
 8006714:	2078      	movs	r0, #120	; 0x78
 8006716:	f000 fa5b 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800671a:	2200      	movs	r2, #0
 800671c:	2100      	movs	r1, #0
 800671e:	2078      	movs	r0, #120	; 0x78
 8006720:	f000 fa56 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006724:	2210      	movs	r2, #16
 8006726:	2100      	movs	r1, #0
 8006728:	2078      	movs	r0, #120	; 0x78
 800672a:	f000 fa51 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800672e:	2240      	movs	r2, #64	; 0x40
 8006730:	2100      	movs	r1, #0
 8006732:	2078      	movs	r0, #120	; 0x78
 8006734:	f000 fa4c 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006738:	2281      	movs	r2, #129	; 0x81
 800673a:	2100      	movs	r1, #0
 800673c:	2078      	movs	r0, #120	; 0x78
 800673e:	f000 fa47 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006742:	22ff      	movs	r2, #255	; 0xff
 8006744:	2100      	movs	r1, #0
 8006746:	2078      	movs	r0, #120	; 0x78
 8006748:	f000 fa42 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800674c:	22a1      	movs	r2, #161	; 0xa1
 800674e:	2100      	movs	r1, #0
 8006750:	2078      	movs	r0, #120	; 0x78
 8006752:	f000 fa3d 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006756:	22a6      	movs	r2, #166	; 0xa6
 8006758:	2100      	movs	r1, #0
 800675a:	2078      	movs	r0, #120	; 0x78
 800675c:	f000 fa38 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006760:	22a8      	movs	r2, #168	; 0xa8
 8006762:	2100      	movs	r1, #0
 8006764:	2078      	movs	r0, #120	; 0x78
 8006766:	f000 fa33 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800676a:	223f      	movs	r2, #63	; 0x3f
 800676c:	2100      	movs	r1, #0
 800676e:	2078      	movs	r0, #120	; 0x78
 8006770:	f000 fa2e 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006774:	22a4      	movs	r2, #164	; 0xa4
 8006776:	2100      	movs	r1, #0
 8006778:	2078      	movs	r0, #120	; 0x78
 800677a:	f000 fa29 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800677e:	22d3      	movs	r2, #211	; 0xd3
 8006780:	2100      	movs	r1, #0
 8006782:	2078      	movs	r0, #120	; 0x78
 8006784:	f000 fa24 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006788:	2200      	movs	r2, #0
 800678a:	2100      	movs	r1, #0
 800678c:	2078      	movs	r0, #120	; 0x78
 800678e:	f000 fa1f 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006792:	22d5      	movs	r2, #213	; 0xd5
 8006794:	2100      	movs	r1, #0
 8006796:	2078      	movs	r0, #120	; 0x78
 8006798:	f000 fa1a 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800679c:	22f0      	movs	r2, #240	; 0xf0
 800679e:	2100      	movs	r1, #0
 80067a0:	2078      	movs	r0, #120	; 0x78
 80067a2:	f000 fa15 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80067a6:	22d9      	movs	r2, #217	; 0xd9
 80067a8:	2100      	movs	r1, #0
 80067aa:	2078      	movs	r0, #120	; 0x78
 80067ac:	f000 fa10 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80067b0:	2222      	movs	r2, #34	; 0x22
 80067b2:	2100      	movs	r1, #0
 80067b4:	2078      	movs	r0, #120	; 0x78
 80067b6:	f000 fa0b 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80067ba:	22da      	movs	r2, #218	; 0xda
 80067bc:	2100      	movs	r1, #0
 80067be:	2078      	movs	r0, #120	; 0x78
 80067c0:	f000 fa06 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80067c4:	2212      	movs	r2, #18
 80067c6:	2100      	movs	r1, #0
 80067c8:	2078      	movs	r0, #120	; 0x78
 80067ca:	f000 fa01 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80067ce:	22db      	movs	r2, #219	; 0xdb
 80067d0:	2100      	movs	r1, #0
 80067d2:	2078      	movs	r0, #120	; 0x78
 80067d4:	f000 f9fc 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80067d8:	2220      	movs	r2, #32
 80067da:	2100      	movs	r1, #0
 80067dc:	2078      	movs	r0, #120	; 0x78
 80067de:	f000 f9f7 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80067e2:	228d      	movs	r2, #141	; 0x8d
 80067e4:	2100      	movs	r1, #0
 80067e6:	2078      	movs	r0, #120	; 0x78
 80067e8:	f000 f9f2 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80067ec:	2214      	movs	r2, #20
 80067ee:	2100      	movs	r1, #0
 80067f0:	2078      	movs	r0, #120	; 0x78
 80067f2:	f000 f9ed 	bl	8006bd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80067f6:	22af      	movs	r2, #175	; 0xaf
 80067f8:	2100      	movs	r1, #0
 80067fa:	2078      	movs	r0, #120	; 0x78
 80067fc:	f000 f9e8 	bl	8006bd0 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006800:	2000      	movs	r0, #0
 8006802:	f000 f845 	bl	8006890 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006806:	f000 f815 	bl	8006834 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800680a:	4b09      	ldr	r3, [pc, #36]	; (8006830 <SSD1306_Init+0x17c>)
 800680c:	2200      	movs	r2, #0
 800680e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006810:	4b07      	ldr	r3, [pc, #28]	; (8006830 <SSD1306_Init+0x17c>)
 8006812:	2200      	movs	r2, #0
 8006814:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006816:	4b06      	ldr	r3, [pc, #24]	; (8006830 <SSD1306_Init+0x17c>)
 8006818:	2201      	movs	r2, #1
 800681a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800681c:	2301      	movs	r3, #1
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	20000efc 	.word	0x20000efc
 800682c:	002625a0 	.word	0x002625a0
 8006830:	20000660 	.word	0x20000660

08006834 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800683a:	2300      	movs	r3, #0
 800683c:	71fb      	strb	r3, [r7, #7]
 800683e:	e01d      	b.n	800687c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	3b50      	subs	r3, #80	; 0x50
 8006844:	b2db      	uxtb	r3, r3
 8006846:	461a      	mov	r2, r3
 8006848:	2100      	movs	r1, #0
 800684a:	2078      	movs	r0, #120	; 0x78
 800684c:	f000 f9c0 	bl	8006bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	2078      	movs	r0, #120	; 0x78
 8006856:	f000 f9bb 	bl	8006bd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800685a:	2210      	movs	r2, #16
 800685c:	2100      	movs	r1, #0
 800685e:	2078      	movs	r0, #120	; 0x78
 8006860:	f000 f9b6 	bl	8006bd0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	01db      	lsls	r3, r3, #7
 8006868:	4a08      	ldr	r2, [pc, #32]	; (800688c <SSD1306_UpdateScreen+0x58>)
 800686a:	441a      	add	r2, r3
 800686c:	2380      	movs	r3, #128	; 0x80
 800686e:	2140      	movs	r1, #64	; 0x40
 8006870:	2078      	movs	r0, #120	; 0x78
 8006872:	f000 f953 	bl	8006b1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	3301      	adds	r3, #1
 800687a:	71fb      	strb	r3, [r7, #7]
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	2b07      	cmp	r3, #7
 8006880:	d9de      	bls.n	8006840 <SSD1306_UpdateScreen+0xc>
	}
}
 8006882:	bf00      	nop
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20000260 	.word	0x20000260

08006890 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	4603      	mov	r3, r0
 8006898:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 800689a:	79fb      	ldrb	r3, [r7, #7]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <SSD1306_Fill+0x14>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e001      	b.n	80068a8 <SSD1306_Fill+0x18>
 80068a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068ac:	4619      	mov	r1, r3
 80068ae:	4803      	ldr	r0, [pc, #12]	; (80068bc <SSD1306_Fill+0x2c>)
 80068b0:	f006 fcf6 	bl	800d2a0 <memset>
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	20000260 	.word	0x20000260

080068c0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	4603      	mov	r3, r0
 80068c8:	80fb      	strh	r3, [r7, #6]
 80068ca:	460b      	mov	r3, r1
 80068cc:	80bb      	strh	r3, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	70fb      	strb	r3, [r7, #3]
	if (
 80068d2:	88fb      	ldrh	r3, [r7, #6]
 80068d4:	2b7f      	cmp	r3, #127	; 0x7f
 80068d6:	d848      	bhi.n	800696a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80068d8:	88bb      	ldrh	r3, [r7, #4]
 80068da:	2b3f      	cmp	r3, #63	; 0x3f
 80068dc:	d845      	bhi.n	800696a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80068de:	4b25      	ldr	r3, [pc, #148]	; (8006974 <SSD1306_DrawPixel+0xb4>)
 80068e0:	791b      	ldrb	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d006      	beq.n	80068f4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	bf0c      	ite	eq
 80068ec:	2301      	moveq	r3, #1
 80068ee:	2300      	movne	r3, #0
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80068f4:	78fb      	ldrb	r3, [r7, #3]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d11a      	bne.n	8006930 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	88bb      	ldrh	r3, [r7, #4]
 80068fe:	08db      	lsrs	r3, r3, #3
 8006900:	b298      	uxth	r0, r3
 8006902:	4603      	mov	r3, r0
 8006904:	01db      	lsls	r3, r3, #7
 8006906:	4413      	add	r3, r2
 8006908:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <SSD1306_DrawPixel+0xb8>)
 800690a:	5cd3      	ldrb	r3, [r2, r3]
 800690c:	b25a      	sxtb	r2, r3
 800690e:	88bb      	ldrh	r3, [r7, #4]
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	2101      	movs	r1, #1
 8006916:	fa01 f303 	lsl.w	r3, r1, r3
 800691a:	b25b      	sxtb	r3, r3
 800691c:	4313      	orrs	r3, r2
 800691e:	b259      	sxtb	r1, r3
 8006920:	88fa      	ldrh	r2, [r7, #6]
 8006922:	4603      	mov	r3, r0
 8006924:	01db      	lsls	r3, r3, #7
 8006926:	4413      	add	r3, r2
 8006928:	b2c9      	uxtb	r1, r1
 800692a:	4a13      	ldr	r2, [pc, #76]	; (8006978 <SSD1306_DrawPixel+0xb8>)
 800692c:	54d1      	strb	r1, [r2, r3]
 800692e:	e01d      	b.n	800696c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006930:	88fa      	ldrh	r2, [r7, #6]
 8006932:	88bb      	ldrh	r3, [r7, #4]
 8006934:	08db      	lsrs	r3, r3, #3
 8006936:	b298      	uxth	r0, r3
 8006938:	4603      	mov	r3, r0
 800693a:	01db      	lsls	r3, r3, #7
 800693c:	4413      	add	r3, r2
 800693e:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <SSD1306_DrawPixel+0xb8>)
 8006940:	5cd3      	ldrb	r3, [r2, r3]
 8006942:	b25a      	sxtb	r2, r3
 8006944:	88bb      	ldrh	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	2101      	movs	r1, #1
 800694c:	fa01 f303 	lsl.w	r3, r1, r3
 8006950:	b25b      	sxtb	r3, r3
 8006952:	43db      	mvns	r3, r3
 8006954:	b25b      	sxtb	r3, r3
 8006956:	4013      	ands	r3, r2
 8006958:	b259      	sxtb	r1, r3
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	4603      	mov	r3, r0
 800695e:	01db      	lsls	r3, r3, #7
 8006960:	4413      	add	r3, r2
 8006962:	b2c9      	uxtb	r1, r1
 8006964:	4a04      	ldr	r2, [pc, #16]	; (8006978 <SSD1306_DrawPixel+0xb8>)
 8006966:	54d1      	strb	r1, [r2, r3]
 8006968:	e000      	b.n	800696c <SSD1306_DrawPixel+0xac>
		return;
 800696a:	bf00      	nop
	}
}
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr
 8006974:	20000660 	.word	0x20000660
 8006978:	20000260 	.word	0x20000260

0800697c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	460a      	mov	r2, r1
 8006986:	80fb      	strh	r3, [r7, #6]
 8006988:	4613      	mov	r3, r2
 800698a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800698c:	4a05      	ldr	r2, [pc, #20]	; (80069a4 <SSD1306_GotoXY+0x28>)
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006992:	4a04      	ldr	r2, [pc, #16]	; (80069a4 <SSD1306_GotoXY+0x28>)
 8006994:	88bb      	ldrh	r3, [r7, #4]
 8006996:	8053      	strh	r3, [r2, #2]
}
 8006998:	bf00      	nop
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	bc80      	pop	{r7}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	20000660 	.word	0x20000660

080069a8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	4603      	mov	r3, r0
 80069b0:	6039      	str	r1, [r7, #0]
 80069b2:	71fb      	strb	r3, [r7, #7]
 80069b4:	4613      	mov	r3, r2
 80069b6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80069b8:	4b3a      	ldr	r3, [pc, #232]	; (8006aa4 <SSD1306_Putc+0xfc>)
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	461a      	mov	r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4413      	add	r3, r2
	if (
 80069c4:	2b7f      	cmp	r3, #127	; 0x7f
 80069c6:	dc07      	bgt.n	80069d8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80069c8:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <SSD1306_Putc+0xfc>)
 80069ca:	885b      	ldrh	r3, [r3, #2]
 80069cc:	461a      	mov	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	785b      	ldrb	r3, [r3, #1]
 80069d2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80069d4:	2b3f      	cmp	r3, #63	; 0x3f
 80069d6:	dd01      	ble.n	80069dc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80069d8:	2300      	movs	r3, #0
 80069da:	e05e      	b.n	8006a9a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80069dc:	2300      	movs	r3, #0
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e04b      	b.n	8006a7a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	3b20      	subs	r3, #32
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	7849      	ldrb	r1, [r1, #1]
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	4619      	mov	r1, r3
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	440b      	add	r3, r1
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4413      	add	r3, r2
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
 8006a04:	e030      	b.n	8006a68 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d010      	beq.n	8006a38 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006a16:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <SSD1306_Putc+0xfc>)
 8006a18:	881a      	ldrh	r2, [r3, #0]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	4413      	add	r3, r2
 8006a20:	b298      	uxth	r0, r3
 8006a22:	4b20      	ldr	r3, [pc, #128]	; (8006aa4 <SSD1306_Putc+0xfc>)
 8006a24:	885a      	ldrh	r2, [r3, #2]
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	4413      	add	r3, r2
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	79ba      	ldrb	r2, [r7, #6]
 8006a30:	4619      	mov	r1, r3
 8006a32:	f7ff ff45 	bl	80068c0 <SSD1306_DrawPixel>
 8006a36:	e014      	b.n	8006a62 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006a38:	4b1a      	ldr	r3, [pc, #104]	; (8006aa4 <SSD1306_Putc+0xfc>)
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4413      	add	r3, r2
 8006a42:	b298      	uxth	r0, r3
 8006a44:	4b17      	ldr	r3, [pc, #92]	; (8006aa4 <SSD1306_Putc+0xfc>)
 8006a46:	885a      	ldrh	r2, [r3, #2]
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	4413      	add	r3, r2
 8006a4e:	b299      	uxth	r1, r3
 8006a50:	79bb      	ldrb	r3, [r7, #6]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	bf0c      	ite	eq
 8006a56:	2301      	moveq	r3, #1
 8006a58:	2300      	movne	r3, #0
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f7ff ff2f 	bl	80068c0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	3301      	adds	r3, #1
 8006a66:	613b      	str	r3, [r7, #16]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d3c8      	bcc.n	8006a06 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	3301      	adds	r3, #1
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	785b      	ldrb	r3, [r3, #1]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d3ad      	bcc.n	80069e2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006a86:	4b07      	ldr	r3, [pc, #28]	; (8006aa4 <SSD1306_Putc+0xfc>)
 8006a88:	881a      	ldrh	r2, [r3, #0]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	4413      	add	r3, r2
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	4b03      	ldr	r3, [pc, #12]	; (8006aa4 <SSD1306_Putc+0xfc>)
 8006a96:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8006a98:	79fb      	ldrb	r3, [r7, #7]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000660 	.word	0x20000660

08006aa8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b084      	sub	sp, #16
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006ab6:	e012      	b.n	8006ade <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	79fa      	ldrb	r2, [r7, #7]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7ff ff71 	bl	80069a8 <SSD1306_Putc>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	461a      	mov	r2, r3
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d002      	beq.n	8006ad8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	e008      	b.n	8006aea <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e8      	bne.n	8006ab8 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8006afa:	4b07      	ldr	r3, [pc, #28]	; (8006b18 <ssd1306_I2C_Init+0x24>)
 8006afc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006afe:	e002      	b.n	8006b06 <ssd1306_I2C_Init+0x12>
		p--;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3b01      	subs	r3, #1
 8006b04:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f9      	bne.n	8006b00 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	00055730 	.word	0x00055730

08006b1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006b1c:	b5b0      	push	{r4, r5, r7, lr}
 8006b1e:	b088      	sub	sp, #32
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	603a      	str	r2, [r7, #0]
 8006b24:	461a      	mov	r2, r3
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	71bb      	strb	r3, [r7, #6]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	80bb      	strh	r3, [r7, #4]
 8006b32:	466b      	mov	r3, sp
 8006b34:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8006b36:	88bb      	ldrh	r3, [r7, #4]
 8006b38:	1c58      	adds	r0, r3, #1
 8006b3a:	1e43      	subs	r3, r0, #1
 8006b3c:	613b      	str	r3, [r7, #16]
 8006b3e:	4603      	mov	r3, r0
 8006b40:	4619      	mov	r1, r3
 8006b42:	f04f 0200 	mov.w	r2, #0
 8006b46:	f04f 0300 	mov.w	r3, #0
 8006b4a:	f04f 0400 	mov.w	r4, #0
 8006b4e:	00d4      	lsls	r4, r2, #3
 8006b50:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006b54:	00cb      	lsls	r3, r1, #3
 8006b56:	4603      	mov	r3, r0
 8006b58:	4619      	mov	r1, r3
 8006b5a:	f04f 0200 	mov.w	r2, #0
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	f04f 0400 	mov.w	r4, #0
 8006b66:	00d4      	lsls	r4, r2, #3
 8006b68:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006b6c:	00cb      	lsls	r3, r1, #3
 8006b6e:	4603      	mov	r3, r0
 8006b70:	3307      	adds	r3, #7
 8006b72:	08db      	lsrs	r3, r3, #3
 8006b74:	00db      	lsls	r3, r3, #3
 8006b76:	ebad 0d03 	sub.w	sp, sp, r3
 8006b7a:	ab02      	add	r3, sp, #8
 8006b7c:	3300      	adds	r3, #0
 8006b7e:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	79ba      	ldrb	r2, [r7, #6]
 8006b84:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8006b86:	2301      	movs	r3, #1
 8006b88:	75fb      	strb	r3, [r7, #23]
 8006b8a:	e00a      	b.n	8006ba2 <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	441a      	add	r2, r3
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	7811      	ldrb	r1, [r2, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	75fb      	strb	r3, [r7, #23]
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	88ba      	ldrh	r2, [r7, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d2ef      	bcs.n	8006b8c <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	b299      	uxth	r1, r3
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	88b8      	ldrh	r0, [r7, #4]
 8006bb4:	230a      	movs	r3, #10
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	4603      	mov	r3, r0
 8006bba:	4804      	ldr	r0, [pc, #16]	; (8006bcc <ssd1306_I2C_WriteMulti+0xb0>)
 8006bbc:	f003 fd46 	bl	800a64c <HAL_I2C_Master_Transmit>
 8006bc0:	46ad      	mov	sp, r5
}
 8006bc2:	bf00      	nop
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000efc 	.word	0x20000efc

08006bd0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b086      	sub	sp, #24
 8006bd4:	af02      	add	r7, sp, #8
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	71bb      	strb	r3, [r7, #6]
 8006bde:	4613      	mov	r3, r2
 8006be0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8006be2:	79bb      	ldrb	r3, [r7, #6]
 8006be4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8006be6:	797b      	ldrb	r3, [r7, #5]
 8006be8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	b299      	uxth	r1, r3
 8006bee:	f107 020c 	add.w	r2, r7, #12
 8006bf2:	230a      	movs	r3, #10
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	2302      	movs	r3, #2
 8006bf8:	4803      	ldr	r0, [pc, #12]	; (8006c08 <ssd1306_I2C_Write+0x38>)
 8006bfa:	f003 fd27 	bl	800a64c <HAL_I2C_Master_Transmit>
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000efc 	.word	0x20000efc

08006c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c12:	2300      	movs	r3, #0
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <HAL_MspInit+0x48>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	4a0e      	ldr	r2, [pc, #56]	; (8006c54 <HAL_MspInit+0x48>)
 8006c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c20:	6453      	str	r3, [r2, #68]	; 0x44
 8006c22:	4b0c      	ldr	r3, [pc, #48]	; (8006c54 <HAL_MspInit+0x48>)
 8006c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2a:	607b      	str	r3, [r7, #4]
 8006c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c2e:	2300      	movs	r3, #0
 8006c30:	603b      	str	r3, [r7, #0]
 8006c32:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <HAL_MspInit+0x48>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	4a07      	ldr	r2, [pc, #28]	; (8006c54 <HAL_MspInit+0x48>)
 8006c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c3e:	4b05      	ldr	r3, [pc, #20]	; (8006c54 <HAL_MspInit+0x48>)
 8006c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c4a:	bf00      	nop
 8006c4c:	370c      	adds	r7, #12
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bc80      	pop	{r7}
 8006c52:	4770      	bx	lr
 8006c54:	40023800 	.word	0x40023800

08006c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr

08006c64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c68:	e7fe      	b.n	8006c68 <HardFault_Handler+0x4>

08006c6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c6e:	e7fe      	b.n	8006c6e <MemManage_Handler+0x4>

08006c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c74:	e7fe      	b.n	8006c74 <BusFault_Handler+0x4>

08006c76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c76:	b480      	push	{r7}
 8006c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c7a:	e7fe      	b.n	8006c7a <UsageFault_Handler+0x4>

08006c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c80:	bf00      	nop
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c8c:	bf00      	nop
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c94:	b480      	push	{r7}
 8006c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr

08006ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ca4:	f001 fab6 	bl	8008214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ca8:	bf00      	nop
 8006caa:	bd80      	pop	{r7, pc}

08006cac <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006cb0:	4802      	ldr	r0, [pc, #8]	; (8006cbc <CAN1_RX1_IRQHandler+0x10>)
 8006cb2:	f002 faeb 	bl	800928c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006cb6:	bf00      	nop
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	20000e80 	.word	0x20000e80

08006cc0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006cc4:	4802      	ldr	r0, [pc, #8]	; (8006cd0 <CAN1_SCE_IRQHandler+0x10>)
 8006cc6:	f002 fae1 	bl	800928c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006cca:	bf00      	nop
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000e80 	.word	0x20000e80
 8006cd4:	00000000 	.word	0x00000000

08006cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006cd8:	b5b0      	push	{r4, r5, r7, lr}
 8006cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	CAN_Rx_Process();	//can receive handle
 8006cdc:	f7fe fdd8 	bl	8005890 <CAN_Rx_Process>

	// *********************** Sensing Process (ADC average) ******************************

	ADC_SUM_Iin = ADC_SUM_Iin - ADC_Array_Iin[i];		//delete old data
 8006ce0:	4ba1      	ldr	r3, [pc, #644]	; (8006f68 <TIM2_IRQHandler+0x290>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4aa1      	ldr	r2, [pc, #644]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	4611      	mov	r1, r2
 8006cea:	4aa1      	ldr	r2, [pc, #644]	; (8006f70 <TIM2_IRQHandler+0x298>)
 8006cec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006cf0:	1a9b      	subs	r3, r3, r2
 8006cf2:	4a9d      	ldr	r2, [pc, #628]	; (8006f68 <TIM2_IRQHandler+0x290>)
 8006cf4:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN - ADC_Array_VinN[i];
 8006cf6:	4b9f      	ldr	r3, [pc, #636]	; (8006f74 <TIM2_IRQHandler+0x29c>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a9c      	ldr	r2, [pc, #624]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006cfc:	7812      	ldrb	r2, [r2, #0]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	4a9d      	ldr	r2, [pc, #628]	; (8006f78 <TIM2_IRQHandler+0x2a0>)
 8006d02:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	4a9a      	ldr	r2, [pc, #616]	; (8006f74 <TIM2_IRQHandler+0x29c>)
 8006d0a:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP - ADC_Array_VinP[i];
 8006d0c:	4b9b      	ldr	r3, [pc, #620]	; (8006f7c <TIM2_IRQHandler+0x2a4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a96      	ldr	r2, [pc, #600]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d12:	7812      	ldrb	r2, [r2, #0]
 8006d14:	4611      	mov	r1, r2
 8006d16:	4a9a      	ldr	r2, [pc, #616]	; (8006f80 <TIM2_IRQHandler+0x2a8>)
 8006d18:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d1c:	1a9b      	subs	r3, r3, r2
 8006d1e:	4a97      	ldr	r2, [pc, #604]	; (8006f7c <TIM2_IRQHandler+0x2a4>)
 8006d20:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout - ADC_Array_Iout[i];
 8006d22:	4b98      	ldr	r3, [pc, #608]	; (8006f84 <TIM2_IRQHandler+0x2ac>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a91      	ldr	r2, [pc, #580]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d28:	7812      	ldrb	r2, [r2, #0]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4a96      	ldr	r2, [pc, #600]	; (8006f88 <TIM2_IRQHandler+0x2b0>)
 8006d2e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	4a93      	ldr	r2, [pc, #588]	; (8006f84 <TIM2_IRQHandler+0x2ac>)
 8006d36:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN - ADC_Array_VoutN[i];
 8006d38:	4b94      	ldr	r3, [pc, #592]	; (8006f8c <TIM2_IRQHandler+0x2b4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a8b      	ldr	r2, [pc, #556]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d3e:	7812      	ldrb	r2, [r2, #0]
 8006d40:	4611      	mov	r1, r2
 8006d42:	4a93      	ldr	r2, [pc, #588]	; (8006f90 <TIM2_IRQHandler+0x2b8>)
 8006d44:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	4a90      	ldr	r2, [pc, #576]	; (8006f8c <TIM2_IRQHandler+0x2b4>)
 8006d4c:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP - ADC_Array_VoutP[i];
 8006d4e:	4b91      	ldr	r3, [pc, #580]	; (8006f94 <TIM2_IRQHandler+0x2bc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a86      	ldr	r2, [pc, #536]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d54:	7812      	ldrb	r2, [r2, #0]
 8006d56:	4611      	mov	r1, r2
 8006d58:	4a8f      	ldr	r2, [pc, #572]	; (8006f98 <TIM2_IRQHandler+0x2c0>)
 8006d5a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	4a8c      	ldr	r2, [pc, #560]	; (8006f94 <TIM2_IRQHandler+0x2bc>)
 8006d62:	6013      	str	r3, [r2, #0]

	ADC_Array_Iin[i] = ADC_Iin;				//save data from ADC read
 8006d64:	4b81      	ldr	r3, [pc, #516]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4b8c      	ldr	r3, [pc, #560]	; (8006f9c <TIM2_IRQHandler+0x2c4>)
 8006d6c:	8819      	ldrh	r1, [r3, #0]
 8006d6e:	4b80      	ldr	r3, [pc, #512]	; (8006f70 <TIM2_IRQHandler+0x298>)
 8006d70:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinN[i] = ADC_VinN;
 8006d74:	4b7d      	ldr	r3, [pc, #500]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4b89      	ldr	r3, [pc, #548]	; (8006fa0 <TIM2_IRQHandler+0x2c8>)
 8006d7c:	8819      	ldrh	r1, [r3, #0]
 8006d7e:	4b7e      	ldr	r3, [pc, #504]	; (8006f78 <TIM2_IRQHandler+0x2a0>)
 8006d80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinP[i] = ADC_VinP;
 8006d84:	4b79      	ldr	r3, [pc, #484]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	461a      	mov	r2, r3
 8006d8a:	4b86      	ldr	r3, [pc, #536]	; (8006fa4 <TIM2_IRQHandler+0x2cc>)
 8006d8c:	8819      	ldrh	r1, [r3, #0]
 8006d8e:	4b7c      	ldr	r3, [pc, #496]	; (8006f80 <TIM2_IRQHandler+0x2a8>)
 8006d90:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Iout[i] = ADC_Iout;
 8006d94:	4b75      	ldr	r3, [pc, #468]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b83      	ldr	r3, [pc, #524]	; (8006fa8 <TIM2_IRQHandler+0x2d0>)
 8006d9c:	8819      	ldrh	r1, [r3, #0]
 8006d9e:	4b7a      	ldr	r3, [pc, #488]	; (8006f88 <TIM2_IRQHandler+0x2b0>)
 8006da0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutN[i] = ADC_VoutN;
 8006da4:	4b71      	ldr	r3, [pc, #452]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	4b80      	ldr	r3, [pc, #512]	; (8006fac <TIM2_IRQHandler+0x2d4>)
 8006dac:	8819      	ldrh	r1, [r3, #0]
 8006dae:	4b78      	ldr	r3, [pc, #480]	; (8006f90 <TIM2_IRQHandler+0x2b8>)
 8006db0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutP[i] = ADC_VoutP;
 8006db4:	4b6d      	ldr	r3, [pc, #436]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	4b7d      	ldr	r3, [pc, #500]	; (8006fb0 <TIM2_IRQHandler+0x2d8>)
 8006dbc:	8819      	ldrh	r1, [r3, #0]
 8006dbe:	4b76      	ldr	r3, [pc, #472]	; (8006f98 <TIM2_IRQHandler+0x2c0>)
 8006dc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	ADC_SUM_Iin = ADC_SUM_Iin + ADC_Array_Iin[i];		//summing data and add new data
 8006dc4:	4b69      	ldr	r3, [pc, #420]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	4b69      	ldr	r3, [pc, #420]	; (8006f70 <TIM2_IRQHandler+0x298>)
 8006dcc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4b65      	ldr	r3, [pc, #404]	; (8006f68 <TIM2_IRQHandler+0x290>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	4a63      	ldr	r2, [pc, #396]	; (8006f68 <TIM2_IRQHandler+0x290>)
 8006dda:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN + ADC_Array_VinN[i];
 8006ddc:	4b63      	ldr	r3, [pc, #396]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b65      	ldr	r3, [pc, #404]	; (8006f78 <TIM2_IRQHandler+0x2a0>)
 8006de4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006de8:	461a      	mov	r2, r3
 8006dea:	4b62      	ldr	r3, [pc, #392]	; (8006f74 <TIM2_IRQHandler+0x29c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4413      	add	r3, r2
 8006df0:	4a60      	ldr	r2, [pc, #384]	; (8006f74 <TIM2_IRQHandler+0x29c>)
 8006df2:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP + ADC_Array_VinP[i];
 8006df4:	4b5d      	ldr	r3, [pc, #372]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	4b61      	ldr	r3, [pc, #388]	; (8006f80 <TIM2_IRQHandler+0x2a8>)
 8006dfc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e00:	461a      	mov	r2, r3
 8006e02:	4b5e      	ldr	r3, [pc, #376]	; (8006f7c <TIM2_IRQHandler+0x2a4>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4413      	add	r3, r2
 8006e08:	4a5c      	ldr	r2, [pc, #368]	; (8006f7c <TIM2_IRQHandler+0x2a4>)
 8006e0a:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout + ADC_Array_Iout[i];
 8006e0c:	4b57      	ldr	r3, [pc, #348]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	461a      	mov	r2, r3
 8006e12:	4b5d      	ldr	r3, [pc, #372]	; (8006f88 <TIM2_IRQHandler+0x2b0>)
 8006e14:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	4b5a      	ldr	r3, [pc, #360]	; (8006f84 <TIM2_IRQHandler+0x2ac>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4413      	add	r3, r2
 8006e20:	4a58      	ldr	r2, [pc, #352]	; (8006f84 <TIM2_IRQHandler+0x2ac>)
 8006e22:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN + ADC_Array_VoutN[i];
 8006e24:	4b51      	ldr	r3, [pc, #324]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4b59      	ldr	r3, [pc, #356]	; (8006f90 <TIM2_IRQHandler+0x2b8>)
 8006e2c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e30:	461a      	mov	r2, r3
 8006e32:	4b56      	ldr	r3, [pc, #344]	; (8006f8c <TIM2_IRQHandler+0x2b4>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4413      	add	r3, r2
 8006e38:	4a54      	ldr	r2, [pc, #336]	; (8006f8c <TIM2_IRQHandler+0x2b4>)
 8006e3a:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP + ADC_Array_VoutP[i];
 8006e3c:	4b4b      	ldr	r3, [pc, #300]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	461a      	mov	r2, r3
 8006e42:	4b55      	ldr	r3, [pc, #340]	; (8006f98 <TIM2_IRQHandler+0x2c0>)
 8006e44:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	4b52      	ldr	r3, [pc, #328]	; (8006f94 <TIM2_IRQHandler+0x2bc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4413      	add	r3, r2
 8006e50:	4a50      	ldr	r2, [pc, #320]	; (8006f94 <TIM2_IRQHandler+0x2bc>)
 8006e52:	6013      	str	r3, [r2, #0]

	ADC_Average_Iin = (float) ADC_SUM_Iin / maxdata;	//calculate average data
 8006e54:	4b44      	ldr	r3, [pc, #272]	; (8006f68 <TIM2_IRQHandler+0x290>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7f9 ff5b 	bl	8000d14 <__aeabi_i2f>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	4954      	ldr	r1, [pc, #336]	; (8006fb4 <TIM2_IRQHandler+0x2dc>)
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7fa f85e 	bl	8000f24 <__aeabi_fdiv>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	4b52      	ldr	r3, [pc, #328]	; (8006fb8 <TIM2_IRQHandler+0x2e0>)
 8006e6e:	601a      	str	r2, [r3, #0]
	ADC_Average_VinN = (float) ADC_SUM_VinN / maxdata;
 8006e70:	4b40      	ldr	r3, [pc, #256]	; (8006f74 <TIM2_IRQHandler+0x29c>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7f9 ff4d 	bl	8000d14 <__aeabi_i2f>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	494d      	ldr	r1, [pc, #308]	; (8006fb4 <TIM2_IRQHandler+0x2dc>)
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fa f850 	bl	8000f24 <__aeabi_fdiv>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	4b4c      	ldr	r3, [pc, #304]	; (8006fbc <TIM2_IRQHandler+0x2e4>)
 8006e8a:	601a      	str	r2, [r3, #0]
	ADC_Average_VinP = (float) ADC_SUM_VinP / maxdata;
 8006e8c:	4b3b      	ldr	r3, [pc, #236]	; (8006f7c <TIM2_IRQHandler+0x2a4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7f9 ff3f 	bl	8000d14 <__aeabi_i2f>
 8006e96:	4603      	mov	r3, r0
 8006e98:	4946      	ldr	r1, [pc, #280]	; (8006fb4 <TIM2_IRQHandler+0x2dc>)
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fa f842 	bl	8000f24 <__aeabi_fdiv>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b46      	ldr	r3, [pc, #280]	; (8006fc0 <TIM2_IRQHandler+0x2e8>)
 8006ea6:	601a      	str	r2, [r3, #0]
	ADC_Average_Iout = (float) ADC_SUM_Iout / maxdata;
 8006ea8:	4b36      	ldr	r3, [pc, #216]	; (8006f84 <TIM2_IRQHandler+0x2ac>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7f9 ff31 	bl	8000d14 <__aeabi_i2f>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	493f      	ldr	r1, [pc, #252]	; (8006fb4 <TIM2_IRQHandler+0x2dc>)
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fa f834 	bl	8000f24 <__aeabi_fdiv>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4b40      	ldr	r3, [pc, #256]	; (8006fc4 <TIM2_IRQHandler+0x2ec>)
 8006ec2:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutN = (float) ADC_SUM_VoutN / maxdata;
 8006ec4:	4b31      	ldr	r3, [pc, #196]	; (8006f8c <TIM2_IRQHandler+0x2b4>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7f9 ff23 	bl	8000d14 <__aeabi_i2f>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4938      	ldr	r1, [pc, #224]	; (8006fb4 <TIM2_IRQHandler+0x2dc>)
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fa f826 	bl	8000f24 <__aeabi_fdiv>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	4b3a      	ldr	r3, [pc, #232]	; (8006fc8 <TIM2_IRQHandler+0x2f0>)
 8006ede:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutP = (float) ADC_SUM_VoutP / maxdata;
 8006ee0:	4b2c      	ldr	r3, [pc, #176]	; (8006f94 <TIM2_IRQHandler+0x2bc>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f7f9 ff15 	bl	8000d14 <__aeabi_i2f>
 8006eea:	4603      	mov	r3, r0
 8006eec:	4931      	ldr	r1, [pc, #196]	; (8006fb4 <TIM2_IRQHandler+0x2dc>)
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fa f818 	bl	8000f24 <__aeabi_fdiv>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	4b34      	ldr	r3, [pc, #208]	; (8006fcc <TIM2_IRQHandler+0x2f4>)
 8006efa:	601a      	str	r2, [r3, #0]

	i++;
 8006efc:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	3301      	adds	r3, #1
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006f06:	701a      	strb	r2, [r3, #0]
	i = i % maxdata;
 8006f08:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <TIM2_IRQHandler+0x2f8>)
 8006f0e:	fba2 1203 	umull	r1, r2, r2, r3
 8006f12:	0952      	lsrs	r2, r2, #5
 8006f14:	2164      	movs	r1, #100	; 0x64
 8006f16:	fb01 f202 	mul.w	r2, r1, r2
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	4b13      	ldr	r3, [pc, #76]	; (8006f6c <TIM2_IRQHandler+0x294>)
 8006f20:	701a      	strb	r2, [r3, #0]

	//Current value calculation and calibration
	Current_Charger = 0.0125*ADC_Average_Iout - 24.845 - OFFSET_CurrentSense;
 8006f22:	4b28      	ldr	r3, [pc, #160]	; (8006fc4 <TIM2_IRQHandler+0x2ec>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7f9 faba 	bl	80004a0 <__aeabi_f2d>
 8006f2c:	a30a      	add	r3, pc, #40	; (adr r3, 8006f58 <TIM2_IRQHandler+0x280>)
 8006f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f32:	f7f9 fb0d 	bl	8000550 <__aeabi_dmul>
 8006f36:	4603      	mov	r3, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	a308      	add	r3, pc, #32	; (adr r3, 8006f60 <TIM2_IRQHandler+0x288>)
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f7f9 f94c 	bl	80001e0 <__aeabi_dsub>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4625      	mov	r5, r4
 8006f4e:	461c      	mov	r4, r3
 8006f50:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <TIM2_IRQHandler+0x2fc>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	e040      	b.n	8006fd8 <TIM2_IRQHandler+0x300>
 8006f56:	bf00      	nop
 8006f58:	9999999a 	.word	0x9999999a
 8006f5c:	3f899999 	.word	0x3f899999
 8006f60:	eb851eb8 	.word	0xeb851eb8
 8006f64:	4038d851 	.word	0x4038d851
 8006f68:	200006e4 	.word	0x200006e4
 8006f6c:	20001060 	.word	0x20001060
 8006f70:	20000704 	.word	0x20000704
 8006f74:	200009e0 	.word	0x200009e0
 8006f78:	20000abc 	.word	0x20000abc
 8006f7c:	20000c7c 	.word	0x20000c7c
 8006f80:	20000ba8 	.word	0x20000ba8
 8006f84:	20000a34 	.word	0x20000a34
 8006f88:	20000918 	.word	0x20000918
 8006f8c:	2000067c 	.word	0x2000067c
 8006f90:	20000830 	.word	0x20000830
 8006f94:	200006ec 	.word	0x200006ec
 8006f98:	20000c90 	.word	0x20000c90
 8006f9c:	200006aa 	.word	0x200006aa
 8006fa0:	20000a10 	.word	0x20000a10
 8006fa4:	200006f4 	.word	0x200006f4
 8006fa8:	200006d8 	.word	0x200006d8
 8006fac:	20000690 	.word	0x20000690
 8006fb0:	20000800 	.word	0x20000800
 8006fb4:	42c80000 	.word	0x42c80000
 8006fb8:	20000910 	.word	0x20000910
 8006fbc:	200007dc 	.word	0x200007dc
 8006fc0:	20000a24 	.word	0x20000a24
 8006fc4:	20000d74 	.word	0x20000d74
 8006fc8:	20000680 	.word	0x20000680
 8006fcc:	200007fc 	.word	0x200007fc
 8006fd0:	51eb851f 	.word	0x51eb851f
 8006fd4:	200007d8 	.word	0x200007d8
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7f9 fa61 	bl	80004a0 <__aeabi_f2d>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 f8fb 	bl	80001e0 <__aeabi_dsub>
 8006fea:	4603      	mov	r3, r0
 8006fec:	460c      	mov	r4, r1
 8006fee:	4618      	mov	r0, r3
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f7f9 fd85 	bl	8000b00 <__aeabi_d2f>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4bb5      	ldr	r3, [pc, #724]	; (80072d0 <TIM2_IRQHandler+0x5f8>)
 8006ffa:	601a      	str	r2, [r3, #0]
	OFFSET_Calibration = 0.0125*ADC_Average_Iout - 24.845;
 8006ffc:	4bb5      	ldr	r3, [pc, #724]	; (80072d4 <TIM2_IRQHandler+0x5fc>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4618      	mov	r0, r3
 8007002:	f7f9 fa4d 	bl	80004a0 <__aeabi_f2d>
 8007006:	a3a4      	add	r3, pc, #656	; (adr r3, 8007298 <TIM2_IRQHandler+0x5c0>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	f7f9 faa0 	bl	8000550 <__aeabi_dmul>
 8007010:	4603      	mov	r3, r0
 8007012:	460c      	mov	r4, r1
 8007014:	4618      	mov	r0, r3
 8007016:	4621      	mov	r1, r4
 8007018:	a3a1      	add	r3, pc, #644	; (adr r3, 80072a0 <TIM2_IRQHandler+0x5c8>)
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f7f9 f8df 	bl	80001e0 <__aeabi_dsub>
 8007022:	4603      	mov	r3, r0
 8007024:	460c      	mov	r4, r1
 8007026:	4618      	mov	r0, r3
 8007028:	4621      	mov	r1, r4
 800702a:	f7f9 fd69 	bl	8000b00 <__aeabi_d2f>
 800702e:	4602      	mov	r2, r0
 8007030:	4ba9      	ldr	r3, [pc, #676]	; (80072d8 <TIM2_IRQHandler+0x600>)
 8007032:	601a      	str	r2, [r3, #0]
	if (Current_Charger<=0)
 8007034:	4ba6      	ldr	r3, [pc, #664]	; (80072d0 <TIM2_IRQHandler+0x5f8>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f04f 0100 	mov.w	r1, #0
 800703c:	4618      	mov	r0, r3
 800703e:	f7fa f865 	bl	800110c <__aeabi_fcmple>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d003      	beq.n	8007050 <TIM2_IRQHandler+0x378>
		Current_Charger = 0;
 8007048:	4ba1      	ldr	r3, [pc, #644]	; (80072d0 <TIM2_IRQHandler+0x5f8>)
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	601a      	str	r2, [r3, #0]

	//Voltage value calculation and calibration
	ADC_VoltageResult = fabs (ADC_Average_VoutN - ADC_Average_VoutP);
 8007050:	4ba2      	ldr	r3, [pc, #648]	; (80072dc <TIM2_IRQHandler+0x604>)
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	4ba2      	ldr	r3, [pc, #648]	; (80072e0 <TIM2_IRQHandler+0x608>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f7f9 fda4 	bl	8000ba8 <__aeabi_fsub>
 8007060:	4603      	mov	r3, r0
 8007062:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007066:	4a9f      	ldr	r2, [pc, #636]	; (80072e4 <TIM2_IRQHandler+0x60c>)
 8007068:	6013      	str	r3, [r2, #0]
	Voltage_Charger = ADC_VoltageResult*0.0275-0.018;
 800706a:	4b9e      	ldr	r3, [pc, #632]	; (80072e4 <TIM2_IRQHandler+0x60c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7f9 fa16 	bl	80004a0 <__aeabi_f2d>
 8007074:	a38c      	add	r3, pc, #560	; (adr r3, 80072a8 <TIM2_IRQHandler+0x5d0>)
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	f7f9 fa69 	bl	8000550 <__aeabi_dmul>
 800707e:	4603      	mov	r3, r0
 8007080:	460c      	mov	r4, r1
 8007082:	4618      	mov	r0, r3
 8007084:	4621      	mov	r1, r4
 8007086:	a38a      	add	r3, pc, #552	; (adr r3, 80072b0 <TIM2_IRQHandler+0x5d8>)
 8007088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708c:	f7f9 f8a8 	bl	80001e0 <__aeabi_dsub>
 8007090:	4603      	mov	r3, r0
 8007092:	460c      	mov	r4, r1
 8007094:	4618      	mov	r0, r3
 8007096:	4621      	mov	r1, r4
 8007098:	f7f9 fd32 	bl	8000b00 <__aeabi_d2f>
 800709c:	4602      	mov	r2, r0
 800709e:	4b92      	ldr	r3, [pc, #584]	; (80072e8 <TIM2_IRQHandler+0x610>)
 80070a0:	601a      	str	r2, [r3, #0]
	if(Voltage_Charger <= 0)
 80070a2:	4b91      	ldr	r3, [pc, #580]	; (80072e8 <TIM2_IRQHandler+0x610>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f04f 0100 	mov.w	r1, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7fa f82e 	bl	800110c <__aeabi_fcmple>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <TIM2_IRQHandler+0x3e6>
		Voltage_Charger = 0;
 80070b6:	4b8c      	ldr	r3, [pc, #560]	; (80072e8 <TIM2_IRQHandler+0x610>)
 80070b8:	f04f 0200 	mov.w	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]

	Temp_delay_calc++;
 80070be:	4b8b      	ldr	r3, [pc, #556]	; (80072ec <TIM2_IRQHandler+0x614>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b2da      	uxtb	r2, r3
 80070c6:	4b89      	ldr	r3, [pc, #548]	; (80072ec <TIM2_IRQHandler+0x614>)
 80070c8:	701a      	strb	r2, [r3, #0]

	if(Temp_delay_calc >= 100)
 80070ca:	4b88      	ldr	r3, [pc, #544]	; (80072ec <TIM2_IRQHandler+0x614>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b63      	cmp	r3, #99	; 0x63
 80070d0:	d96e      	bls.n	80071b0 <TIM2_IRQHandler+0x4d8>
	{
		Temp_delay_calc = 0;
 80070d2:	4b86      	ldr	r3, [pc, #536]	; (80072ec <TIM2_IRQHandler+0x614>)
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
		Res_T1 = ADC_temp1*10000/(3900-ADC_temp1); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 80070d8:	4b85      	ldr	r3, [pc, #532]	; (80072f0 <TIM2_IRQHandler+0x618>)
 80070da:	881b      	ldrh	r3, [r3, #0]
 80070dc:	461a      	mov	r2, r3
 80070de:	f242 7310 	movw	r3, #10000	; 0x2710
 80070e2:	fb03 f202 	mul.w	r2, r3, r2
 80070e6:	4b82      	ldr	r3, [pc, #520]	; (80072f0 <TIM2_IRQHandler+0x618>)
 80070e8:	881b      	ldrh	r3, [r3, #0]
 80070ea:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80070ee:	330c      	adds	r3, #12
 80070f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7f9 fe0d 	bl	8000d14 <__aeabi_i2f>
 80070fa:	4602      	mov	r2, r0
 80070fc:	4b7d      	ldr	r3, [pc, #500]	; (80072f4 <TIM2_IRQHandler+0x61c>)
 80070fe:	601a      	str	r2, [r3, #0]
		Temp_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8007100:	4b7c      	ldr	r3, [pc, #496]	; (80072f4 <TIM2_IRQHandler+0x61c>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7f9 f9cb 	bl	80004a0 <__aeabi_f2d>
 800710a:	4603      	mov	r3, r0
 800710c:	460c      	mov	r4, r1
 800710e:	4618      	mov	r0, r3
 8007110:	4621      	mov	r1, r4
 8007112:	f008 f90b 	bl	800f32c <log>
 8007116:	a368      	add	r3, pc, #416	; (adr r3, 80072b8 <TIM2_IRQHandler+0x5e0>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 fa18 	bl	8000550 <__aeabi_dmul>
 8007120:	4603      	mov	r3, r0
 8007122:	460c      	mov	r4, r1
 8007124:	4618      	mov	r0, r3
 8007126:	4621      	mov	r1, r4
 8007128:	a365      	add	r3, pc, #404	; (adr r3, 80072c0 <TIM2_IRQHandler+0x5e8>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	f7f9 f859 	bl	80001e4 <__adddf3>
 8007132:	4603      	mov	r3, r0
 8007134:	460c      	mov	r4, r1
 8007136:	4618      	mov	r0, r3
 8007138:	4621      	mov	r1, r4
 800713a:	f7f9 fce1 	bl	8000b00 <__aeabi_d2f>
 800713e:	4602      	mov	r2, r0
 8007140:	4b6d      	ldr	r3, [pc, #436]	; (80072f8 <TIM2_IRQHandler+0x620>)
 8007142:	601a      	str	r2, [r3, #0]
		Res_T2 = ADC_temp2*10000/(3900-ADC_temp2);
 8007144:	4b6d      	ldr	r3, [pc, #436]	; (80072fc <TIM2_IRQHandler+0x624>)
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	f242 7310 	movw	r3, #10000	; 0x2710
 800714e:	fb03 f202 	mul.w	r2, r3, r2
 8007152:	4b6a      	ldr	r3, [pc, #424]	; (80072fc <TIM2_IRQHandler+0x624>)
 8007154:	881b      	ldrh	r3, [r3, #0]
 8007156:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 800715a:	330c      	adds	r3, #12
 800715c:	fb92 f3f3 	sdiv	r3, r2, r3
 8007160:	4618      	mov	r0, r3
 8007162:	f7f9 fdd7 	bl	8000d14 <__aeabi_i2f>
 8007166:	4602      	mov	r2, r0
 8007168:	4b65      	ldr	r3, [pc, #404]	; (8007300 <TIM2_IRQHandler+0x628>)
 800716a:	601a      	str	r2, [r3, #0]
		Temp_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 800716c:	4b64      	ldr	r3, [pc, #400]	; (8007300 <TIM2_IRQHandler+0x628>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4618      	mov	r0, r3
 8007172:	f7f9 f995 	bl	80004a0 <__aeabi_f2d>
 8007176:	4603      	mov	r3, r0
 8007178:	460c      	mov	r4, r1
 800717a:	4618      	mov	r0, r3
 800717c:	4621      	mov	r1, r4
 800717e:	f008 f8d5 	bl	800f32c <log>
 8007182:	a34d      	add	r3, pc, #308	; (adr r3, 80072b8 <TIM2_IRQHandler+0x5e0>)
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f7f9 f9e2 	bl	8000550 <__aeabi_dmul>
 800718c:	4603      	mov	r3, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4618      	mov	r0, r3
 8007192:	4621      	mov	r1, r4
 8007194:	a34a      	add	r3, pc, #296	; (adr r3, 80072c0 <TIM2_IRQHandler+0x5e8>)
 8007196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719a:	f7f9 f823 	bl	80001e4 <__adddf3>
 800719e:	4603      	mov	r3, r0
 80071a0:	460c      	mov	r4, r1
 80071a2:	4618      	mov	r0, r3
 80071a4:	4621      	mov	r1, r4
 80071a6:	f7f9 fcab 	bl	8000b00 <__aeabi_d2f>
 80071aa:	4602      	mov	r2, r0
 80071ac:	4b55      	ldr	r3, [pc, #340]	; (8007304 <TIM2_IRQHandler+0x62c>)
 80071ae:	601a      	str	r2, [r3, #0]
	// *********************** end of Sensing Process (ADC average) ******************************


	// ***********************Charge or standby State ******************************

	if (Charger_Mode == 1){	//charge mode
 80071b0:	4b55      	ldr	r3, [pc, #340]	; (8007308 <TIM2_IRQHandler+0x630>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	f040 8104 	bne.w	80073c2 <TIM2_IRQHandler+0x6ea>

		if(	flag_trip_overvoltage == 1		||
 80071ba:	4b54      	ldr	r3, [pc, #336]	; (800730c <TIM2_IRQHandler+0x634>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d027      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			flag_trip_overtemperature == 1	||
 80071c2:	4b53      	ldr	r3, [pc, #332]	; (8007310 <TIM2_IRQHandler+0x638>)
 80071c4:	781b      	ldrb	r3, [r3, #0]
		if(	flag_trip_overvoltage == 1		||
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d023      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			flag_trip_undertemperature == 1	||
 80071ca:	4b52      	ldr	r3, [pc, #328]	; (8007314 <TIM2_IRQHandler+0x63c>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature == 1	||
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d01f      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			flag_trip_overcurrentcharge == 1||
 80071d2:	4b51      	ldr	r3, [pc, #324]	; (8007318 <TIM2_IRQHandler+0x640>)
 80071d4:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature == 1	||
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d01b      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			flag_trip_SOCOverCharge == 1	||
 80071da:	4b50      	ldr	r3, [pc, #320]	; (800731c <TIM2_IRQHandler+0x644>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge == 1||
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d017      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			flag_trip_shortcircuit == 1		||
 80071e2:	4b4f      	ldr	r3, [pc, #316]	; (8007320 <TIM2_IRQHandler+0x648>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge == 1	||
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d013      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			flag_trip_systemfailure == 1	||
 80071ea:	4b4e      	ldr	r3, [pc, #312]	; (8007324 <TIM2_IRQHandler+0x64c>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit == 1		||
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d00f      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			Flag_ChargerShortCircuit == 1	||
 80071f2:	4b4d      	ldr	r3, [pc, #308]	; (8007328 <TIM2_IRQHandler+0x650>)
 80071f4:	781b      	ldrb	r3, [r3, #0]
			flag_trip_systemfailure == 1	||
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d00b      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverCurrent == 1	||
 80071fa:	4b4c      	ldr	r3, [pc, #304]	; (800732c <TIM2_IRQHandler+0x654>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerShortCircuit == 1	||
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d007      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverTemperature == 1||
 8007202:	4b4b      	ldr	r3, [pc, #300]	; (8007330 <TIM2_IRQHandler+0x658>)
 8007204:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverCurrent == 1	||
 8007206:	2b01      	cmp	r3, #1
 8007208:	d003      	beq.n	8007212 <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverVoltage == 1	)
 800720a:	4b4a      	ldr	r3, [pc, #296]	; (8007334 <TIM2_IRQHandler+0x65c>)
 800720c:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverTemperature == 1||
 800720e:	2b01      	cmp	r3, #1
 8007210:	d11b      	bne.n	800724a <TIM2_IRQHandler+0x572>
			{
				duty=0;
 8007212:	4b49      	ldr	r3, [pc, #292]	; (8007338 <TIM2_IRQHandler+0x660>)
 8007214:	f04f 0200 	mov.w	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
				htim1.Instance->CCR1=duty*TIM1->ARR;
 800721a:	4b48      	ldr	r3, [pc, #288]	; (800733c <TIM2_IRQHandler+0x664>)
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	4618      	mov	r0, r3
 8007220:	f7f9 fd74 	bl	8000d0c <__aeabi_ui2f>
 8007224:	4602      	mov	r2, r0
 8007226:	4b44      	ldr	r3, [pc, #272]	; (8007338 <TIM2_IRQHandler+0x660>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	4610      	mov	r0, r2
 800722e:	f7f9 fdc5 	bl	8000dbc <__aeabi_fmul>
 8007232:	4603      	mov	r3, r0
 8007234:	461a      	mov	r2, r3
 8007236:	4b42      	ldr	r3, [pc, #264]	; (8007340 <TIM2_IRQHandler+0x668>)
 8007238:	681c      	ldr	r4, [r3, #0]
 800723a:	4610      	mov	r0, r2
 800723c:	f7f9 ff84 	bl	8001148 <__aeabi_f2uiz>
 8007240:	4603      	mov	r3, r0
 8007242:	6363      	str	r3, [r4, #52]	; 0x34
				Charger_Mode = 2;
 8007244:	4b30      	ldr	r3, [pc, #192]	; (8007308 <TIM2_IRQHandler+0x630>)
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
			}

		Fault_Check();
 800724a:	f000 faa5 	bl	8007798 <Fault_Check>
		htim1.Instance->CCR1=duty*TIM1->ARR;
 800724e:	4b3b      	ldr	r3, [pc, #236]	; (800733c <TIM2_IRQHandler+0x664>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	4618      	mov	r0, r3
 8007254:	f7f9 fd5a 	bl	8000d0c <__aeabi_ui2f>
 8007258:	4602      	mov	r2, r0
 800725a:	4b37      	ldr	r3, [pc, #220]	; (8007338 <TIM2_IRQHandler+0x660>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f7f9 fdab 	bl	8000dbc <__aeabi_fmul>
 8007266:	4603      	mov	r3, r0
 8007268:	461a      	mov	r2, r3
 800726a:	4b35      	ldr	r3, [pc, #212]	; (8007340 <TIM2_IRQHandler+0x668>)
 800726c:	681c      	ldr	r4, [r3, #0]
 800726e:	4610      	mov	r0, r2
 8007270:	f7f9 ff6a 	bl	8001148 <__aeabi_f2uiz>
 8007274:	4603      	mov	r3, r0
 8007276:	6363      	str	r3, [r4, #52]	; 0x34
		if(duty>=0.9)
 8007278:	4b2f      	ldr	r3, [pc, #188]	; (8007338 <TIM2_IRQHandler+0x660>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4618      	mov	r0, r3
 800727e:	f7f9 f90f 	bl	80004a0 <__aeabi_f2d>
 8007282:	a311      	add	r3, pc, #68	; (adr r3, 80072c8 <TIM2_IRQHandler+0x5f0>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	f7f9 fbe8 	bl	8000a5c <__aeabi_dcmpge>
 800728c:	4603      	mov	r3, r0
 800728e:	2b00      	cmp	r3, #0
 8007290:	e058      	b.n	8007344 <TIM2_IRQHandler+0x66c>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	9999999a 	.word	0x9999999a
 800729c:	3f899999 	.word	0x3f899999
 80072a0:	eb851eb8 	.word	0xeb851eb8
 80072a4:	4038d851 	.word	0x4038d851
 80072a8:	c28f5c29 	.word	0xc28f5c29
 80072ac:	3f9c28f5 	.word	0x3f9c28f5
 80072b0:	8d4fdf3b 	.word	0x8d4fdf3b
 80072b4:	3f926e97 	.word	0x3f926e97
 80072b8:	cccccccd 	.word	0xcccccccd
 80072bc:	c0380ccc 	.word	0xc0380ccc
 80072c0:	b851eb85 	.word	0xb851eb85
 80072c4:	406ecd1e 	.word	0x406ecd1e
 80072c8:	cccccccd 	.word	0xcccccccd
 80072cc:	3feccccc 	.word	0x3feccccc
 80072d0:	20000d58 	.word	0x20000d58
 80072d4:	20000d74 	.word	0x20000d74
 80072d8:	200006d0 	.word	0x200006d0
 80072dc:	20000680 	.word	0x20000680
 80072e0:	200007fc 	.word	0x200007fc
 80072e4:	20000a40 	.word	0x20000a40
 80072e8:	20000b90 	.word	0x20000b90
 80072ec:	20001068 	.word	0x20001068
 80072f0:	2000080a 	.word	0x2000080a
 80072f4:	20000810 	.word	0x20000810
 80072f8:	20000a3c 	.word	0x20000a3c
 80072fc:	20000694 	.word	0x20000694
 8007300:	20000ab8 	.word	0x20000ab8
 8007304:	20000698 	.word	0x20000698
 8007308:	20000700 	.word	0x20000700
 800730c:	20000d90 	.word	0x20000d90
 8007310:	200007cc 	.word	0x200007cc
 8007314:	20000908 	.word	0x20000908
 8007318:	20000a98 	.word	0x20000a98
 800731c:	20000693 	.word	0x20000693
 8007320:	200006a8 	.word	0x200006a8
 8007324:	200006c4 	.word	0x200006c4
 8007328:	20000808 	.word	0x20000808
 800732c:	200007ec 	.word	0x200007ec
 8007330:	200006e1 	.word	0x200006e1
 8007334:	2000080c 	.word	0x2000080c
 8007338:	20000d5c 	.word	0x20000d5c
 800733c:	40010000 	.word	0x40010000
 8007340:	200010f0 	.word	0x200010f0
 8007344:	d003      	beq.n	800734e <TIM2_IRQHandler+0x676>
			duty=0;
 8007346:	4b76      	ldr	r3, [pc, #472]	; (8007520 <TIM2_IRQHandler+0x848>)
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

		if(Batt_SOC.m_uint16t>70){
 800734e:	4b75      	ldr	r3, [pc, #468]	; (8007524 <TIM2_IRQHandler+0x84c>)
 8007350:	881b      	ldrh	r3, [r3, #0]
 8007352:	2b46      	cmp	r3, #70	; 0x46
 8007354:	d901      	bls.n	800735a <TIM2_IRQHandler+0x682>
			Constant_Voltage();
 8007356:	f7fc f8c5 	bl	80034e4 <Constant_Voltage>
		}

		if(Batt_SOC.m_uint16t<=70){
 800735a:	4b72      	ldr	r3, [pc, #456]	; (8007524 <TIM2_IRQHandler+0x84c>)
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	2b46      	cmp	r3, #70	; 0x46
 8007360:	d801      	bhi.n	8007366 <TIM2_IRQHandler+0x68e>
			Constant_Current();
 8007362:	f7fa f895 	bl	8001490 <Constant_Current>
		}

		//Clearing Charger Decrease rating flag
		if (flag_Derating == 1 && Temp_T1<=(SetProtection_Temp1-15) && Temp_T2<=(SetProtection_Temp2-25)){
 8007366:	4b70      	ldr	r3, [pc, #448]	; (8007528 <TIM2_IRQHandler+0x850>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d122      	bne.n	80073b4 <TIM2_IRQHandler+0x6dc>
 800736e:	4b6f      	ldr	r3, [pc, #444]	; (800752c <TIM2_IRQHandler+0x854>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	3b0f      	subs	r3, #15
 8007374:	4618      	mov	r0, r3
 8007376:	f7f9 fccd 	bl	8000d14 <__aeabi_i2f>
 800737a:	4602      	mov	r2, r0
 800737c:	4b6c      	ldr	r3, [pc, #432]	; (8007530 <TIM2_IRQHandler+0x858>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4619      	mov	r1, r3
 8007382:	4610      	mov	r0, r2
 8007384:	f7f9 fecc 	bl	8001120 <__aeabi_fcmpge>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d012      	beq.n	80073b4 <TIM2_IRQHandler+0x6dc>
 800738e:	4b69      	ldr	r3, [pc, #420]	; (8007534 <TIM2_IRQHandler+0x85c>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	3b19      	subs	r3, #25
 8007394:	4618      	mov	r0, r3
 8007396:	f7f9 fcbd 	bl	8000d14 <__aeabi_i2f>
 800739a:	4602      	mov	r2, r0
 800739c:	4b66      	ldr	r3, [pc, #408]	; (8007538 <TIM2_IRQHandler+0x860>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4619      	mov	r1, r3
 80073a2:	4610      	mov	r0, r2
 80073a4:	f7f9 febc 	bl	8001120 <__aeabi_fcmpge>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <TIM2_IRQHandler+0x6dc>
			flag_Derating = 0;
 80073ae:	4b5e      	ldr	r3, [pc, #376]	; (8007528 <TIM2_IRQHandler+0x850>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
		}

		L=0; Tbuzz=999;
 80073b4:	4b61      	ldr	r3, [pc, #388]	; (800753c <TIM2_IRQHandler+0x864>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	4b61      	ldr	r3, [pc, #388]	; (8007540 <TIM2_IRQHandler+0x868>)
 80073bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80073c0:	801a      	strh	r2, [r3, #0]
	}

	if(Charger_Mode == 0){	//standby mode
 80073c2:	4b60      	ldr	r3, [pc, #384]	; (8007544 <TIM2_IRQHandler+0x86c>)
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d121      	bne.n	800740e <TIM2_IRQHandler+0x736>
		duty=0;
 80073ca:	4b55      	ldr	r3, [pc, #340]	; (8007520 <TIM2_IRQHandler+0x848>)
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR1=duty*TIM1->ARR;
 80073d2:	4b5d      	ldr	r3, [pc, #372]	; (8007548 <TIM2_IRQHandler+0x870>)
 80073d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7f9 fc98 	bl	8000d0c <__aeabi_ui2f>
 80073dc:	4602      	mov	r2, r0
 80073de:	4b50      	ldr	r3, [pc, #320]	; (8007520 <TIM2_IRQHandler+0x848>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f7f9 fce9 	bl	8000dbc <__aeabi_fmul>
 80073ea:	4603      	mov	r3, r0
 80073ec:	461a      	mov	r2, r3
 80073ee:	4b57      	ldr	r3, [pc, #348]	; (800754c <TIM2_IRQHandler+0x874>)
 80073f0:	681c      	ldr	r4, [r3, #0]
 80073f2:	4610      	mov	r0, r2
 80073f4:	f7f9 fea8 	bl	8001148 <__aeabi_f2uiz>
 80073f8:	4603      	mov	r3, r0
 80073fa:	6363      	str	r3, [r4, #52]	; 0x34
		Clear_ProtectionFlag();
 80073fc:	f000 f98e 	bl	800771c <Clear_ProtectionFlag>
		Eror_Code = 0;
 8007400:	4b53      	ldr	r3, [pc, #332]	; (8007550 <TIM2_IRQHandler+0x878>)
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
		OFFSET_CurrentSense = OFFSET_Calibration;
 8007406:	4b53      	ldr	r3, [pc, #332]	; (8007554 <TIM2_IRQHandler+0x87c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a53      	ldr	r2, [pc, #332]	; (8007558 <TIM2_IRQHandler+0x880>)
 800740c:	6013      	str	r3, [r2, #0]
	}

	if(Charger_Mode == 2){	//Protection mode
 800740e:	4b4d      	ldr	r3, [pc, #308]	; (8007544 <TIM2_IRQHandler+0x86c>)
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d17c      	bne.n	8007510 <TIM2_IRQHandler+0x838>
		Tbuzz=Tbuzz+1;
 8007416:	4b4a      	ldr	r3, [pc, #296]	; (8007540 <TIM2_IRQHandler+0x868>)
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	3301      	adds	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	4b48      	ldr	r3, [pc, #288]	; (8007540 <TIM2_IRQHandler+0x868>)
 8007420:	801a      	strh	r2, [r3, #0]
		if (Tbuzz==1000 && L<=5){
 8007422:	4b47      	ldr	r3, [pc, #284]	; (8007540 <TIM2_IRQHandler+0x868>)
 8007424:	881b      	ldrh	r3, [r3, #0]
 8007426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742a:	d116      	bne.n	800745a <TIM2_IRQHandler+0x782>
 800742c:	4b43      	ldr	r3, [pc, #268]	; (800753c <TIM2_IRQHandler+0x864>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b05      	cmp	r3, #5
 8007432:	d812      	bhi.n	800745a <TIM2_IRQHandler+0x782>
			HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8007434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007438:	4848      	ldr	r0, [pc, #288]	; (800755c <TIM2_IRQHandler+0x884>)
 800743a:	f002 ffb6 	bl	800a3aa <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 800743e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007442:	4847      	ldr	r0, [pc, #284]	; (8007560 <TIM2_IRQHandler+0x888>)
 8007444:	f002 ffb1 	bl	800a3aa <HAL_GPIO_TogglePin>
			Tbuzz=0; L+=1;
 8007448:	4b3d      	ldr	r3, [pc, #244]	; (8007540 <TIM2_IRQHandler+0x868>)
 800744a:	2200      	movs	r2, #0
 800744c:	801a      	strh	r2, [r3, #0]
 800744e:	4b3b      	ldr	r3, [pc, #236]	; (800753c <TIM2_IRQHandler+0x864>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	3301      	adds	r3, #1
 8007454:	b2da      	uxtb	r2, r3
 8007456:	4b39      	ldr	r3, [pc, #228]	; (800753c <TIM2_IRQHandler+0x864>)
 8007458:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1){
 800745a:	2180      	movs	r1, #128	; 0x80
 800745c:	483f      	ldr	r0, [pc, #252]	; (800755c <TIM2_IRQHandler+0x884>)
 800745e:	f002 ff75 	bl	800a34c <HAL_GPIO_ReadPin>
 8007462:	4603      	mov	r3, r0
 8007464:	2b01      	cmp	r3, #1
 8007466:	d112      	bne.n	800748e <TIM2_IRQHandler+0x7b6>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 8007468:	2140      	movs	r1, #64	; 0x40
 800746a:	483c      	ldr	r0, [pc, #240]	; (800755c <TIM2_IRQHandler+0x884>)
 800746c:	f002 ff9d 	bl	800a3aa <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8007470:	2200      	movs	r2, #0
 8007472:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007476:	4839      	ldr	r0, [pc, #228]	; (800755c <TIM2_IRQHandler+0x884>)
 8007478:	f002 ff7f 	bl	800a37a <HAL_GPIO_WritePin>
			Clear_ProtectionFlag();
 800747c:	f000 f94e 	bl	800771c <Clear_ProtectionFlag>
			dc=0; Charger_Mode =1;
 8007480:	4b38      	ldr	r3, [pc, #224]	; (8007564 <TIM2_IRQHandler+0x88c>)
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	601a      	str	r2, [r3, #0]
 8007488:	4b2e      	ldr	r3, [pc, #184]	; (8007544 <TIM2_IRQHandler+0x86c>)
 800748a:	2201      	movs	r2, #1
 800748c:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Charger Over Temperature
		if (Flag_ChargerOverTemperature == 1 && Temp_T1<=(SetProtection_Temp1-10) && Temp_T2<=(SetProtection_Temp2-10) && L>5){
 800748e:	4b36      	ldr	r3, [pc, #216]	; (8007568 <TIM2_IRQHandler+0x890>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d12d      	bne.n	80074f2 <TIM2_IRQHandler+0x81a>
 8007496:	4b25      	ldr	r3, [pc, #148]	; (800752c <TIM2_IRQHandler+0x854>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	3b0a      	subs	r3, #10
 800749c:	4618      	mov	r0, r3
 800749e:	f7f9 fc39 	bl	8000d14 <__aeabi_i2f>
 80074a2:	4602      	mov	r2, r0
 80074a4:	4b22      	ldr	r3, [pc, #136]	; (8007530 <TIM2_IRQHandler+0x858>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f7f9 fe38 	bl	8001120 <__aeabi_fcmpge>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d01d      	beq.n	80074f2 <TIM2_IRQHandler+0x81a>
 80074b6:	4b1f      	ldr	r3, [pc, #124]	; (8007534 <TIM2_IRQHandler+0x85c>)
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	3b0a      	subs	r3, #10
 80074bc:	4618      	mov	r0, r3
 80074be:	f7f9 fc29 	bl	8000d14 <__aeabi_i2f>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4b1c      	ldr	r3, [pc, #112]	; (8007538 <TIM2_IRQHandler+0x860>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4619      	mov	r1, r3
 80074ca:	4610      	mov	r0, r2
 80074cc:	f7f9 fe28 	bl	8001120 <__aeabi_fcmpge>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <TIM2_IRQHandler+0x81a>
 80074d6:	4b19      	ldr	r3, [pc, #100]	; (800753c <TIM2_IRQHandler+0x864>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b05      	cmp	r3, #5
 80074dc:	d909      	bls.n	80074f2 <TIM2_IRQHandler+0x81a>
			Flag_ChargerOverTemperature = 0;
 80074de:	4b22      	ldr	r3, [pc, #136]	; (8007568 <TIM2_IRQHandler+0x890>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	701a      	strb	r2, [r3, #0]
			dc=0; Charger_Mode =1;
 80074e4:	4b1f      	ldr	r3, [pc, #124]	; (8007564 <TIM2_IRQHandler+0x88c>)
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	601a      	str	r2, [r3, #0]
 80074ec:	4b15      	ldr	r3, [pc, #84]	; (8007544 <TIM2_IRQHandler+0x86c>)
 80074ee:	2201      	movs	r2, #1
 80074f0:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Battery Over Temperature
		if (flag_trip_overtemperature == 0 && LastFlag_OverTemperature == 1){
 80074f2:	4b1e      	ldr	r3, [pc, #120]	; (800756c <TIM2_IRQHandler+0x894>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10a      	bne.n	8007510 <TIM2_IRQHandler+0x838>
 80074fa:	4b1d      	ldr	r3, [pc, #116]	; (8007570 <TIM2_IRQHandler+0x898>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d106      	bne.n	8007510 <TIM2_IRQHandler+0x838>
			dc=0; Charger_Mode =1;
 8007502:	4b18      	ldr	r3, [pc, #96]	; (8007564 <TIM2_IRQHandler+0x88c>)
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	4b0e      	ldr	r3, [pc, #56]	; (8007544 <TIM2_IRQHandler+0x86c>)
 800750c:	2201      	movs	r2, #1
 800750e:	701a      	strb	r2, [r3, #0]
		}
	}

	Eror_CodeCheck();
 8007510:	f000 f86c 	bl	80075ec <Eror_CodeCheck>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007514:	4817      	ldr	r0, [pc, #92]	; (8007574 <TIM2_IRQHandler+0x89c>)
 8007516:	f004 fbdd 	bl	800bcd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800751a:	bf00      	nop
 800751c:	bdb0      	pop	{r4, r5, r7, pc}
 800751e:	bf00      	nop
 8007520:	20000d5c 	.word	0x20000d5c
 8007524:	20000a44 	.word	0x20000a44
 8007528:	20000c80 	.word	0x20000c80
 800752c:	20000056 	.word	0x20000056
 8007530:	20000a3c 	.word	0x20000a3c
 8007534:	20000055 	.word	0x20000055
 8007538:	20000698 	.word	0x20000698
 800753c:	20000666 	.word	0x20000666
 8007540:	20000050 	.word	0x20000050
 8007544:	20000700 	.word	0x20000700
 8007548:	40010000 	.word	0x40010000
 800754c:	200010f0 	.word	0x200010f0
 8007550:	20000688 	.word	0x20000688
 8007554:	200006d0 	.word	0x200006d0
 8007558:	200007d8 	.word	0x200007d8
 800755c:	40020800 	.word	0x40020800
 8007560:	40020400 	.word	0x40020400
 8007564:	200006b4 	.word	0x200006b4
 8007568:	200006e1 	.word	0x200006e1
 800756c:	200007cc 	.word	0x200007cc
 8007570:	20000a18 	.word	0x20000a18
 8007574:	20001130 	.word	0x20001130

08007578 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
//	CAN_Tx_Process();
	SS+=1;
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <TIM3_IRQHandler+0x1c>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	4b03      	ldr	r3, [pc, #12]	; (8007594 <TIM3_IRQHandler+0x1c>)
 8007586:	701a      	strb	r2, [r3, #0]



  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007588:	4803      	ldr	r0, [pc, #12]	; (8007598 <TIM3_IRQHandler+0x20>)
 800758a:	f004 fba3 	bl	800bcd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800758e:	bf00      	nop
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	20000667 	.word	0x20000667
 8007598:	200010b0 	.word	0x200010b0

0800759c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//	CAN_Rx_Process();	//can receive handle

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80075a0:	4802      	ldr	r0, [pc, #8]	; (80075ac <TIM4_IRQHandler+0x10>)
 80075a2:	f004 fb97 	bl	800bcd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80075a6:	bf00      	nop
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20001070 	.word	0x20001070

080075b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80075b4:	4802      	ldr	r0, [pc, #8]	; (80075c0 <USART1_IRQHandler+0x10>)
 80075b6:	f005 fa7b 	bl	800cab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80075ba:	bf00      	nop
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	200011b0 	.word	0x200011b0

080075c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80075c8:	4802      	ldr	r0, [pc, #8]	; (80075d4 <USART3_IRQHandler+0x10>)
 80075ca:	f005 fa71 	bl	800cab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80075ce:	bf00      	nop
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20001170 	.word	0x20001170

080075d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80075dc:	4802      	ldr	r0, [pc, #8]	; (80075e8 <DMA2_Stream0_IRQHandler+0x10>)
 80075de:	f002 fab1 	bl	8009b44 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80075e2:	bf00      	nop
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	20000e0c 	.word	0x20000e0c

080075ec <Eror_CodeCheck>:

/* USER CODE BEGIN 1 */

void Eror_CodeCheck(void)
{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
	if (flag_trip_shortcircuit==1)
 80075f0:	4b3a      	ldr	r3, [pc, #232]	; (80076dc <Eror_CodeCheck+0xf0>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d103      	bne.n	8007600 <Eror_CodeCheck+0x14>
		Eror_Code=1;	//Battery Pack short circuit
 80075f8:	4b39      	ldr	r3, [pc, #228]	; (80076e0 <Eror_CodeCheck+0xf4>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	701a      	strb	r2, [r3, #0]
		Eror_Code=18;	//Charger Over Current
	else if(Flag_ChargerLostCommunication==1)
		Eror_Code=19;
//	else
//		Eror_Code=0;
}
 80075fe:	e069      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_overcurrentcharge==1)
 8007600:	4b38      	ldr	r3, [pc, #224]	; (80076e4 <Eror_CodeCheck+0xf8>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d103      	bne.n	8007610 <Eror_CodeCheck+0x24>
		Eror_Code=3;	//Battery Pack over current charge
 8007608:	4b35      	ldr	r3, [pc, #212]	; (80076e0 <Eror_CodeCheck+0xf4>)
 800760a:	2203      	movs	r2, #3
 800760c:	701a      	strb	r2, [r3, #0]
}
 800760e:	e061      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_overtemperature==1){
 8007610:	4b35      	ldr	r3, [pc, #212]	; (80076e8 <Eror_CodeCheck+0xfc>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d106      	bne.n	8007626 <Eror_CodeCheck+0x3a>
		Eror_Code=4;	//Battery Pack over temperature
 8007618:	4b31      	ldr	r3, [pc, #196]	; (80076e0 <Eror_CodeCheck+0xf4>)
 800761a:	2204      	movs	r2, #4
 800761c:	701a      	strb	r2, [r3, #0]
		LastFlag_OverTemperature = 1;
 800761e:	4b33      	ldr	r3, [pc, #204]	; (80076ec <Eror_CodeCheck+0x100>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
}
 8007624:	e056      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_undertemperature==1)
 8007626:	4b32      	ldr	r3, [pc, #200]	; (80076f0 <Eror_CodeCheck+0x104>)
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d103      	bne.n	8007636 <Eror_CodeCheck+0x4a>
		Eror_Code=5;	//Battery Pack under temperature
 800762e:	4b2c      	ldr	r3, [pc, #176]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007630:	2205      	movs	r2, #5
 8007632:	701a      	strb	r2, [r3, #0]
}
 8007634:	e04e      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_unbalance==1)
 8007636:	4b2f      	ldr	r3, [pc, #188]	; (80076f4 <Eror_CodeCheck+0x108>)
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	2b01      	cmp	r3, #1
 800763c:	d103      	bne.n	8007646 <Eror_CodeCheck+0x5a>
		Eror_Code=8;	//Battery Pack unbalance
 800763e:	4b28      	ldr	r3, [pc, #160]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007640:	2208      	movs	r2, #8
 8007642:	701a      	strb	r2, [r3, #0]
}
 8007644:	e046      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_undervoltage==1)
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <Eror_CodeCheck+0x10c>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d103      	bne.n	8007656 <Eror_CodeCheck+0x6a>
		Eror_Code=9;	//Battery Pack under voltage
 800764e:	4b24      	ldr	r3, [pc, #144]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007650:	2209      	movs	r2, #9
 8007652:	701a      	strb	r2, [r3, #0]
}
 8007654:	e03e      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_overvoltage==1)
 8007656:	4b29      	ldr	r3, [pc, #164]	; (80076fc <Eror_CodeCheck+0x110>)
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d103      	bne.n	8007666 <Eror_CodeCheck+0x7a>
		Eror_Code=10;	//Battery Pack over voltage
 800765e:	4b20      	ldr	r3, [pc, #128]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007660:	220a      	movs	r2, #10
 8007662:	701a      	strb	r2, [r3, #0]
}
 8007664:	e036      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (flag_trip_systemfailure==1)
 8007666:	4b26      	ldr	r3, [pc, #152]	; (8007700 <Eror_CodeCheck+0x114>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d103      	bne.n	8007676 <Eror_CodeCheck+0x8a>
			Eror_Code=12;	//Battery Pack system failure
 800766e:	4b1c      	ldr	r3, [pc, #112]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007670:	220c      	movs	r2, #12
 8007672:	701a      	strb	r2, [r3, #0]
}
 8007674:	e02e      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerUnderVoltage==1)
 8007676:	4b23      	ldr	r3, [pc, #140]	; (8007704 <Eror_CodeCheck+0x118>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d103      	bne.n	8007686 <Eror_CodeCheck+0x9a>
		Eror_Code=13;	//Charger Under Voltage
 800767e:	4b18      	ldr	r3, [pc, #96]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007680:	220d      	movs	r2, #13
 8007682:	701a      	strb	r2, [r3, #0]
}
 8007684:	e026      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerUnderTemperature==1)
 8007686:	4b20      	ldr	r3, [pc, #128]	; (8007708 <Eror_CodeCheck+0x11c>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d103      	bne.n	8007696 <Eror_CodeCheck+0xaa>
		Eror_Code=15;	//Charger Under Temperature
 800768e:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <Eror_CodeCheck+0xf4>)
 8007690:	220f      	movs	r2, #15
 8007692:	701a      	strb	r2, [r3, #0]
}
 8007694:	e01e      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerShortCircuit==1)
 8007696:	4b1d      	ldr	r3, [pc, #116]	; (800770c <Eror_CodeCheck+0x120>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d103      	bne.n	80076a6 <Eror_CodeCheck+0xba>
		Eror_Code=16;	//Charger Short Circuit
 800769e:	4b10      	ldr	r3, [pc, #64]	; (80076e0 <Eror_CodeCheck+0xf4>)
 80076a0:	2210      	movs	r2, #16
 80076a2:	701a      	strb	r2, [r3, #0]
}
 80076a4:	e016      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerOverCurrent==1)
 80076a6:	4b1a      	ldr	r3, [pc, #104]	; (8007710 <Eror_CodeCheck+0x124>)
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d103      	bne.n	80076b6 <Eror_CodeCheck+0xca>
		Eror_Code=17;	//Charger Over Current
 80076ae:	4b0c      	ldr	r3, [pc, #48]	; (80076e0 <Eror_CodeCheck+0xf4>)
 80076b0:	2211      	movs	r2, #17
 80076b2:	701a      	strb	r2, [r3, #0]
}
 80076b4:	e00e      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if (Flag_ChargerOverVoltage==1)
 80076b6:	4b17      	ldr	r3, [pc, #92]	; (8007714 <Eror_CodeCheck+0x128>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d103      	bne.n	80076c6 <Eror_CodeCheck+0xda>
		Eror_Code=18;	//Charger Over Current
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <Eror_CodeCheck+0xf4>)
 80076c0:	2212      	movs	r2, #18
 80076c2:	701a      	strb	r2, [r3, #0]
}
 80076c4:	e006      	b.n	80076d4 <Eror_CodeCheck+0xe8>
	else if(Flag_ChargerLostCommunication==1)
 80076c6:	4b14      	ldr	r3, [pc, #80]	; (8007718 <Eror_CodeCheck+0x12c>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d102      	bne.n	80076d4 <Eror_CodeCheck+0xe8>
		Eror_Code=19;
 80076ce:	4b04      	ldr	r3, [pc, #16]	; (80076e0 <Eror_CodeCheck+0xf4>)
 80076d0:	2213      	movs	r2, #19
 80076d2:	701a      	strb	r2, [r3, #0]
}
 80076d4:	bf00      	nop
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr
 80076dc:	200006a8 	.word	0x200006a8
 80076e0:	20000688 	.word	0x20000688
 80076e4:	20000a98 	.word	0x20000a98
 80076e8:	200007cc 	.word	0x200007cc
 80076ec:	20000a18 	.word	0x20000a18
 80076f0:	20000908 	.word	0x20000908
 80076f4:	20000692 	.word	0x20000692
 80076f8:	20000909 	.word	0x20000909
 80076fc:	20000d90 	.word	0x20000d90
 8007700:	200006c4 	.word	0x200006c4
 8007704:	200007d4 	.word	0x200007d4
 8007708:	20000dac 	.word	0x20000dac
 800770c:	20000808 	.word	0x20000808
 8007710:	200007ec 	.word	0x200007ec
 8007714:	2000080c 	.word	0x2000080c
 8007718:	20000a08 	.word	0x20000a08

0800771c <Clear_ProtectionFlag>:

void Clear_ProtectionFlag(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
	flag_trip_overvoltage = 0;
 8007720:	4b12      	ldr	r3, [pc, #72]	; (800776c <Clear_ProtectionFlag+0x50>)
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
	flag_trip_overtemperature = 0;
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <Clear_ProtectionFlag+0x54>)
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature = 0;
 800772c:	4b11      	ldr	r3, [pc, #68]	; (8007774 <Clear_ProtectionFlag+0x58>)
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge = 0;
 8007732:	4b11      	ldr	r3, [pc, #68]	; (8007778 <Clear_ProtectionFlag+0x5c>)
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge = 0;
 8007738:	4b10      	ldr	r3, [pc, #64]	; (800777c <Clear_ProtectionFlag+0x60>)
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit = 0;
 800773e:	4b10      	ldr	r3, [pc, #64]	; (8007780 <Clear_ProtectionFlag+0x64>)
 8007740:	2200      	movs	r2, #0
 8007742:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure = 0;
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <Clear_ProtectionFlag+0x68>)
 8007746:	2200      	movs	r2, #0
 8007748:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverCurrent = 0;
 800774a:	4b0f      	ldr	r3, [pc, #60]	; (8007788 <Clear_ProtectionFlag+0x6c>)
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverTemperature = 0;
 8007750:	4b0e      	ldr	r3, [pc, #56]	; (800778c <Clear_ProtectionFlag+0x70>)
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverVoltage = 0;
 8007756:	4b0e      	ldr	r3, [pc, #56]	; (8007790 <Clear_ProtectionFlag+0x74>)
 8007758:	2200      	movs	r2, #0
 800775a:	701a      	strb	r2, [r3, #0]
	Flag_ChargerLostCommunication = 0;
 800775c:	4b0d      	ldr	r3, [pc, #52]	; (8007794 <Clear_ProtectionFlag+0x78>)
 800775e:	2200      	movs	r2, #0
 8007760:	701a      	strb	r2, [r3, #0]
}
 8007762:	bf00      	nop
 8007764:	46bd      	mov	sp, r7
 8007766:	bc80      	pop	{r7}
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	20000d90 	.word	0x20000d90
 8007770:	200007cc 	.word	0x200007cc
 8007774:	20000908 	.word	0x20000908
 8007778:	20000a98 	.word	0x20000a98
 800777c:	20000693 	.word	0x20000693
 8007780:	200006a8 	.word	0x200006a8
 8007784:	200006c4 	.word	0x200006c4
 8007788:	200007ec 	.word	0x200007ec
 800778c:	200006e1 	.word	0x200006e1
 8007790:	2000080c 	.word	0x2000080c
 8007794:	20000a08 	.word	0x20000a08

08007798 <Fault_Check>:

void Fault_Check(void)
{
 8007798:	b5b0      	push	{r4, r5, r7, lr}
 800779a:	af00      	add	r7, sp, #0
	if(Current_Charger >= SetProtection_ShortCircuit){
 800779c:	4b90      	ldr	r3, [pc, #576]	; (80079e0 <Fault_Check+0x248>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7f9 fab7 	bl	8000d14 <__aeabi_i2f>
 80077a6:	4602      	mov	r2, r0
 80077a8:	4b8e      	ldr	r3, [pc, #568]	; (80079e4 <Fault_Check+0x24c>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f7f9 fcac 	bl	800110c <__aeabi_fcmple>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d009      	beq.n	80077ce <Fault_Check+0x36>
		Flag_ChargerShortCircuit=1;
 80077ba:	4b8b      	ldr	r3, [pc, #556]	; (80079e8 <Fault_Check+0x250>)
 80077bc:	2201      	movs	r2, #1
 80077be:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 80077c0:	2201      	movs	r2, #1
 80077c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077c6:	4889      	ldr	r0, [pc, #548]	; (80079ec <Fault_Check+0x254>)
 80077c8:	f002 fdd7 	bl	800a37a <HAL_GPIO_WritePin>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
		Eror_Code = 0;
		TripTime_OverCurrent = 0;
		Count_TripTime -= 0.001;
	}
}
 80077cc:	e0fb      	b.n	80079c6 <Fault_Check+0x22e>
	else if((SetProtection_OverCurrent - Current_Charger)<=0 && Flag_ChargerOverCurrent==0 ){
 80077ce:	4b88      	ldr	r3, [pc, #544]	; (80079f0 <Fault_Check+0x258>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f7f9 fa9e 	bl	8000d14 <__aeabi_i2f>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b82      	ldr	r3, [pc, #520]	; (80079e4 <Fault_Check+0x24c>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f7f9 f9e1 	bl	8000ba8 <__aeabi_fsub>
 80077e6:	4603      	mov	r3, r0
 80077e8:	f04f 0100 	mov.w	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7f9 fc8d 	bl	800110c <__aeabi_fcmple>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d064      	beq.n	80078c2 <Fault_Check+0x12a>
 80077f8:	4b7e      	ldr	r3, [pc, #504]	; (80079f4 <Fault_Check+0x25c>)
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d160      	bne.n	80078c2 <Fault_Check+0x12a>
		Eror_Code=17;
 8007800:	4b7d      	ldr	r3, [pc, #500]	; (80079f8 <Fault_Check+0x260>)
 8007802:	2211      	movs	r2, #17
 8007804:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 1.8/(((Current_Charger/SetProtection_OverCurrent)*(Current_Charger/SetProtection_OverCurrent))-1);
 8007806:	4b77      	ldr	r3, [pc, #476]	; (80079e4 <Fault_Check+0x24c>)
 8007808:	681c      	ldr	r4, [r3, #0]
 800780a:	4b79      	ldr	r3, [pc, #484]	; (80079f0 <Fault_Check+0x258>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	4618      	mov	r0, r3
 8007810:	f7f9 fa80 	bl	8000d14 <__aeabi_i2f>
 8007814:	4603      	mov	r3, r0
 8007816:	4619      	mov	r1, r3
 8007818:	4620      	mov	r0, r4
 800781a:	f7f9 fb83 	bl	8000f24 <__aeabi_fdiv>
 800781e:	4603      	mov	r3, r0
 8007820:	461d      	mov	r5, r3
 8007822:	4b70      	ldr	r3, [pc, #448]	; (80079e4 <Fault_Check+0x24c>)
 8007824:	681c      	ldr	r4, [r3, #0]
 8007826:	4b72      	ldr	r3, [pc, #456]	; (80079f0 <Fault_Check+0x258>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	4618      	mov	r0, r3
 800782c:	f7f9 fa72 	bl	8000d14 <__aeabi_i2f>
 8007830:	4603      	mov	r3, r0
 8007832:	4619      	mov	r1, r3
 8007834:	4620      	mov	r0, r4
 8007836:	f7f9 fb75 	bl	8000f24 <__aeabi_fdiv>
 800783a:	4603      	mov	r3, r0
 800783c:	4619      	mov	r1, r3
 800783e:	4628      	mov	r0, r5
 8007840:	f7f9 fabc 	bl	8000dbc <__aeabi_fmul>
 8007844:	4603      	mov	r3, r0
 8007846:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800784a:	4618      	mov	r0, r3
 800784c:	f7f9 f9ac 	bl	8000ba8 <__aeabi_fsub>
 8007850:	4603      	mov	r3, r0
 8007852:	4618      	mov	r0, r3
 8007854:	f7f8 fe24 	bl	80004a0 <__aeabi_f2d>
 8007858:	4603      	mov	r3, r0
 800785a:	460c      	mov	r4, r1
 800785c:	461a      	mov	r2, r3
 800785e:	4623      	mov	r3, r4
 8007860:	a15b      	add	r1, pc, #364	; (adr r1, 80079d0 <Fault_Check+0x238>)
 8007862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007866:	f7f8 ff9d 	bl	80007a4 <__aeabi_ddiv>
 800786a:	4603      	mov	r3, r0
 800786c:	460c      	mov	r4, r1
 800786e:	4618      	mov	r0, r3
 8007870:	4621      	mov	r1, r4
 8007872:	f7f9 f945 	bl	8000b00 <__aeabi_d2f>
 8007876:	4602      	mov	r2, r0
 8007878:	4b60      	ldr	r3, [pc, #384]	; (80079fc <Fault_Check+0x264>)
 800787a:	601a      	str	r2, [r3, #0]
		Count_TripTime += 0.001;
 800787c:	4b60      	ldr	r3, [pc, #384]	; (8007a00 <Fault_Check+0x268>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f7f8 fe0d 	bl	80004a0 <__aeabi_f2d>
 8007886:	a354      	add	r3, pc, #336	; (adr r3, 80079d8 <Fault_Check+0x240>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f8 fcaa 	bl	80001e4 <__adddf3>
 8007890:	4603      	mov	r3, r0
 8007892:	460c      	mov	r4, r1
 8007894:	4618      	mov	r0, r3
 8007896:	4621      	mov	r1, r4
 8007898:	f7f9 f932 	bl	8000b00 <__aeabi_d2f>
 800789c:	4602      	mov	r2, r0
 800789e:	4b58      	ldr	r3, [pc, #352]	; (8007a00 <Fault_Check+0x268>)
 80078a0:	601a      	str	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 80078a2:	4b57      	ldr	r3, [pc, #348]	; (8007a00 <Fault_Check+0x268>)
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	4b55      	ldr	r3, [pc, #340]	; (80079fc <Fault_Check+0x264>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4619      	mov	r1, r3
 80078ac:	4610      	mov	r0, r2
 80078ae:	f7f9 fc37 	bl	8001120 <__aeabi_fcmpge>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f000 8086 	beq.w	80079c6 <Fault_Check+0x22e>
			Flag_ChargerOverCurrent=1;
 80078ba:	4b4e      	ldr	r3, [pc, #312]	; (80079f4 <Fault_Check+0x25c>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 80078c0:	e081      	b.n	80079c6 <Fault_Check+0x22e>
	else if ( Temp_T1 >= (SetProtection_Temp1-15)  || Temp_T2 >= (SetProtection_Temp2-15)){
 80078c2:	4b50      	ldr	r3, [pc, #320]	; (8007a04 <Fault_Check+0x26c>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	3b0f      	subs	r3, #15
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7f9 fa23 	bl	8000d14 <__aeabi_i2f>
 80078ce:	4602      	mov	r2, r0
 80078d0:	4b4d      	ldr	r3, [pc, #308]	; (8007a08 <Fault_Check+0x270>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f7f9 fc18 	bl	800110c <__aeabi_fcmple>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10f      	bne.n	8007902 <Fault_Check+0x16a>
 80078e2:	4b4a      	ldr	r3, [pc, #296]	; (8007a0c <Fault_Check+0x274>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	3b0f      	subs	r3, #15
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7f9 fa13 	bl	8000d14 <__aeabi_i2f>
 80078ee:	4602      	mov	r2, r0
 80078f0:	4b47      	ldr	r3, [pc, #284]	; (8007a10 <Fault_Check+0x278>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7f9 fc08 	bl	800110c <__aeabi_fcmple>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d02b      	beq.n	800795a <Fault_Check+0x1c2>
		flag_Derating = 1;
 8007902:	4b44      	ldr	r3, [pc, #272]	; (8007a14 <Fault_Check+0x27c>)
 8007904:	2201      	movs	r2, #1
 8007906:	701a      	strb	r2, [r3, #0]
		Eror_Code = 14;
 8007908:	4b3b      	ldr	r3, [pc, #236]	; (80079f8 <Fault_Check+0x260>)
 800790a:	220e      	movs	r2, #14
 800790c:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 800790e:	4b3d      	ldr	r3, [pc, #244]	; (8007a04 <Fault_Check+0x26c>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	4618      	mov	r0, r3
 8007914:	f7f9 f9fe 	bl	8000d14 <__aeabi_i2f>
 8007918:	4602      	mov	r2, r0
 800791a:	4b3b      	ldr	r3, [pc, #236]	; (8007a08 <Fault_Check+0x270>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4619      	mov	r1, r3
 8007920:	4610      	mov	r0, r2
 8007922:	f7f9 fbf3 	bl	800110c <__aeabi_fcmple>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10f      	bne.n	800794c <Fault_Check+0x1b4>
 800792c:	4b37      	ldr	r3, [pc, #220]	; (8007a0c <Fault_Check+0x274>)
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f7f9 f9ef 	bl	8000d14 <__aeabi_i2f>
 8007936:	4602      	mov	r2, r0
 8007938:	4b35      	ldr	r3, [pc, #212]	; (8007a10 <Fault_Check+0x278>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4619      	mov	r1, r3
 800793e:	4610      	mov	r0, r2
 8007940:	f7f9 fbe4 	bl	800110c <__aeabi_fcmple>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d100      	bne.n	800794c <Fault_Check+0x1b4>
 800794a:	e03c      	b.n	80079c6 <Fault_Check+0x22e>
			Flag_ChargerOverTemperature = 1;
 800794c:	4b32      	ldr	r3, [pc, #200]	; (8007a18 <Fault_Check+0x280>)
 800794e:	2201      	movs	r2, #1
 8007950:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 2;
 8007952:	4b32      	ldr	r3, [pc, #200]	; (8007a1c <Fault_Check+0x284>)
 8007954:	2202      	movs	r2, #2
 8007956:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 8007958:	e035      	b.n	80079c6 <Fault_Check+0x22e>
	else if(Voltage_Charger >= SetProtection_OverVoltage){
 800795a:	4b31      	ldr	r3, [pc, #196]	; (8007a20 <Fault_Check+0x288>)
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7f9 f9d8 	bl	8000d14 <__aeabi_i2f>
 8007964:	4602      	mov	r2, r0
 8007966:	4b2f      	ldr	r3, [pc, #188]	; (8007a24 <Fault_Check+0x28c>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7f9 fbcd 	bl	800110c <__aeabi_fcmple>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <Fault_Check+0x1e8>
		Flag_ChargerOverVoltage=1;
 8007978:	4b2b      	ldr	r3, [pc, #172]	; (8007a28 <Fault_Check+0x290>)
 800797a:	2201      	movs	r2, #1
 800797c:	701a      	strb	r2, [r3, #0]
}
 800797e:	e022      	b.n	80079c6 <Fault_Check+0x22e>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
 8007980:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <Fault_Check+0x260>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d003      	beq.n	8007990 <Fault_Check+0x1f8>
 8007988:	4b1b      	ldr	r3, [pc, #108]	; (80079f8 <Fault_Check+0x260>)
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <Fault_Check+0x294>)
 800798e:	701a      	strb	r2, [r3, #0]
		Eror_Code = 0;
 8007990:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <Fault_Check+0x260>)
 8007992:	2200      	movs	r2, #0
 8007994:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 0;
 8007996:	4b19      	ldr	r3, [pc, #100]	; (80079fc <Fault_Check+0x264>)
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
		Count_TripTime -= 0.001;
 800799e:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <Fault_Check+0x268>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7f8 fd7c 	bl	80004a0 <__aeabi_f2d>
 80079a8:	a30b      	add	r3, pc, #44	; (adr r3, 80079d8 <Fault_Check+0x240>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fc17 	bl	80001e0 <__aeabi_dsub>
 80079b2:	4603      	mov	r3, r0
 80079b4:	460c      	mov	r4, r1
 80079b6:	4618      	mov	r0, r3
 80079b8:	4621      	mov	r1, r4
 80079ba:	f7f9 f8a1 	bl	8000b00 <__aeabi_d2f>
 80079be:	4602      	mov	r2, r0
 80079c0:	4b0f      	ldr	r3, [pc, #60]	; (8007a00 <Fault_Check+0x268>)
 80079c2:	601a      	str	r2, [r3, #0]
}
 80079c4:	e7ff      	b.n	80079c6 <Fault_Check+0x22e>
 80079c6:	bf00      	nop
 80079c8:	bdb0      	pop	{r4, r5, r7, pc}
 80079ca:	bf00      	nop
 80079cc:	f3af 8000 	nop.w
 80079d0:	cccccccd 	.word	0xcccccccd
 80079d4:	3ffccccc 	.word	0x3ffccccc
 80079d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80079dc:	3f50624d 	.word	0x3f50624d
 80079e0:	20000052 	.word	0x20000052
 80079e4:	20000d58 	.word	0x20000d58
 80079e8:	20000808 	.word	0x20000808
 80079ec:	40020800 	.word	0x40020800
 80079f0:	20000053 	.word	0x20000053
 80079f4:	200007ec 	.word	0x200007ec
 80079f8:	20000688 	.word	0x20000688
 80079fc:	20001064 	.word	0x20001064
 8007a00:	2000106c 	.word	0x2000106c
 8007a04:	20000056 	.word	0x20000056
 8007a08:	20000a3c 	.word	0x20000a3c
 8007a0c:	20000055 	.word	0x20000055
 8007a10:	20000698 	.word	0x20000698
 8007a14:	20000c80 	.word	0x20000c80
 8007a18:	200006e1 	.word	0x200006e1
 8007a1c:	20000700 	.word	0x20000700
 8007a20:	20000054 	.word	0x20000054
 8007a24:	20000b90 	.word	0x20000b90
 8007a28:	2000080c 	.word	0x2000080c
 8007a2c:	200006e0 	.word	0x200006e0

08007a30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007a38:	4b11      	ldr	r3, [pc, #68]	; (8007a80 <_sbrk+0x50>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d102      	bne.n	8007a46 <_sbrk+0x16>
		heap_end = &end;
 8007a40:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <_sbrk+0x50>)
 8007a42:	4a10      	ldr	r2, [pc, #64]	; (8007a84 <_sbrk+0x54>)
 8007a44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007a46:	4b0e      	ldr	r3, [pc, #56]	; (8007a80 <_sbrk+0x50>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <_sbrk+0x50>)
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	466a      	mov	r2, sp
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d907      	bls.n	8007a6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007a5a:	f005 fbf7 	bl	800d24c <__errno>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	230c      	movs	r3, #12
 8007a62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007a64:	f04f 33ff 	mov.w	r3, #4294967295
 8007a68:	e006      	b.n	8007a78 <_sbrk+0x48>
	}

	heap_end += incr;
 8007a6a:	4b05      	ldr	r3, [pc, #20]	; (8007a80 <_sbrk+0x50>)
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4413      	add	r3, r2
 8007a72:	4a03      	ldr	r2, [pc, #12]	; (8007a80 <_sbrk+0x50>)
 8007a74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007a76:	68fb      	ldr	r3, [r7, #12]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	20000668 	.word	0x20000668
 8007a84:	200011f8 	.word	0x200011f8

08007a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007a8c:	4b12      	ldr	r3, [pc, #72]	; (8007ad8 <SystemInit+0x50>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a11      	ldr	r2, [pc, #68]	; (8007ad8 <SystemInit+0x50>)
 8007a92:	f043 0301 	orr.w	r3, r3, #1
 8007a96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007a98:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <SystemInit+0x50>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007a9e:	4b0e      	ldr	r3, [pc, #56]	; (8007ad8 <SystemInit+0x50>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a0d      	ldr	r2, [pc, #52]	; (8007ad8 <SystemInit+0x50>)
 8007aa4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007aae:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <SystemInit+0x50>)
 8007ab0:	4a0a      	ldr	r2, [pc, #40]	; (8007adc <SystemInit+0x54>)
 8007ab2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007ab4:	4b08      	ldr	r3, [pc, #32]	; (8007ad8 <SystemInit+0x50>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a07      	ldr	r2, [pc, #28]	; (8007ad8 <SystemInit+0x50>)
 8007aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007abe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007ac0:	4b05      	ldr	r3, [pc, #20]	; (8007ad8 <SystemInit+0x50>)
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007ac6:	4b06      	ldr	r3, [pc, #24]	; (8007ae0 <SystemInit+0x58>)
 8007ac8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007acc:	609a      	str	r2, [r3, #8]
#endif
}
 8007ace:	bf00      	nop
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr
 8007ad6:	bf00      	nop
 8007ad8:	40023800 	.word	0x40023800
 8007adc:	24003010 	.word	0x24003010
 8007ae0:	e000ed00 	.word	0xe000ed00

08007ae4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b096      	sub	sp, #88	; 0x58
 8007ae8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007aea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007aee:	2200      	movs	r2, #0
 8007af0:	601a      	str	r2, [r3, #0]
 8007af2:	605a      	str	r2, [r3, #4]
 8007af4:	609a      	str	r2, [r3, #8]
 8007af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007af8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b06:	2200      	movs	r2, #0
 8007b08:	601a      	str	r2, [r3, #0]
 8007b0a:	605a      	str	r2, [r3, #4]
 8007b0c:	609a      	str	r2, [r3, #8]
 8007b0e:	60da      	str	r2, [r3, #12]
 8007b10:	611a      	str	r2, [r3, #16]
 8007b12:	615a      	str	r2, [r3, #20]
 8007b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007b16:	1d3b      	adds	r3, r7, #4
 8007b18:	2220      	movs	r2, #32
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f005 fbbf 	bl	800d2a0 <memset>

  htim1.Instance = TIM1;
 8007b22:	4b3e      	ldr	r3, [pc, #248]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b24:	4a3e      	ldr	r2, [pc, #248]	; (8007c20 <MX_TIM1_Init+0x13c>)
 8007b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007b28:	4b3c      	ldr	r3, [pc, #240]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b2e:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 8007b34:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b36:	f241 726f 	movw	r2, #5999	; 0x176f
 8007b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b3c:	4b37      	ldr	r3, [pc, #220]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b3e:	2200      	movs	r2, #0
 8007b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007b42:	4b36      	ldr	r3, [pc, #216]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b48:	4b34      	ldr	r3, [pc, #208]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007b4e:	4833      	ldr	r0, [pc, #204]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b50:	f003 ffdc 	bl	800bb0c <HAL_TIM_Base_Init>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007b5a:	f7fe fda5 	bl	80066a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007b64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007b68:	4619      	mov	r1, r3
 8007b6a:	482c      	ldr	r0, [pc, #176]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b6c:	f004 fa80 	bl	800c070 <HAL_TIM_ConfigClockSource>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007b76:	f7fe fd97 	bl	80066a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007b7a:	4828      	ldr	r0, [pc, #160]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b7c:	f004 f837 	bl	800bbee <HAL_TIM_PWM_Init>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007b86:	f7fe fd8f 	bl	80066a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007b92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007b96:	4619      	mov	r1, r3
 8007b98:	4820      	ldr	r0, [pc, #128]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007b9a:	f004 fe51 	bl	800c840 <HAL_TIMEx_MasterConfigSynchronization>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007ba4:	f7fe fd80 	bl	80066a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007ba8:	2360      	movs	r3, #96	; 0x60
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007bac:	2300      	movs	r3, #0
 8007bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007bc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bc8:	2200      	movs	r2, #0
 8007bca:	4619      	mov	r1, r3
 8007bcc:	4813      	ldr	r0, [pc, #76]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007bce:	f004 f989 	bl	800bee4 <HAL_TIM_PWM_ConfigChannel>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d001      	beq.n	8007bdc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007bd8:	f7fe fd66 	bl	80066a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007be8:	2300      	movs	r3, #0
 8007bea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bf4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007bfa:	1d3b      	adds	r3, r7, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4807      	ldr	r0, [pc, #28]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007c00:	f004 fe62 	bl	800c8c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8007c0a:	f7fe fd4d 	bl	80066a8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007c0e:	4803      	ldr	r0, [pc, #12]	; (8007c1c <MX_TIM1_Init+0x138>)
 8007c10:	f000 f968 	bl	8007ee4 <HAL_TIM_MspPostInit>

}
 8007c14:	bf00      	nop
 8007c16:	3758      	adds	r7, #88	; 0x58
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	200010f0 	.word	0x200010f0
 8007c20:	40010000 	.word	0x40010000

08007c24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007c2a:	f107 0308 	add.w	r3, r7, #8
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	605a      	str	r2, [r3, #4]
 8007c34:	609a      	str	r2, [r3, #8]
 8007c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007c38:	463b      	mov	r3, r7
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8007c40:	4b1d      	ldr	r3, [pc, #116]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007c46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 8007c48:	4b1b      	ldr	r3, [pc, #108]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c4a:	223b      	movs	r2, #59	; 0x3b
 8007c4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c4e:	4b1a      	ldr	r3, [pc, #104]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007c54:	4b18      	ldr	r3, [pc, #96]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007c5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c5c:	4b16      	ldr	r3, [pc, #88]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c62:	4b15      	ldr	r3, [pc, #84]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007c68:	4813      	ldr	r0, [pc, #76]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c6a:	f003 ff4f 	bl	800bb0c <HAL_TIM_Base_Init>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d001      	beq.n	8007c78 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007c74:	f7fe fd18 	bl	80066a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007c78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007c7e:	f107 0308 	add.w	r3, r7, #8
 8007c82:	4619      	mov	r1, r3
 8007c84:	480c      	ldr	r0, [pc, #48]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007c86:	f004 f9f3 	bl	800c070 <HAL_TIM_ConfigClockSource>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d001      	beq.n	8007c94 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007c90:	f7fe fd0a 	bl	80066a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c94:	2300      	movs	r3, #0
 8007c96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007c9c:	463b      	mov	r3, r7
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	4805      	ldr	r0, [pc, #20]	; (8007cb8 <MX_TIM2_Init+0x94>)
 8007ca2:	f004 fdcd 	bl	800c840 <HAL_TIMEx_MasterConfigSynchronization>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007cac:	f7fe fcfc 	bl	80066a8 <Error_Handler>
  }

}
 8007cb0:	bf00      	nop
 8007cb2:	3718      	adds	r7, #24
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	20001130 	.word	0x20001130

08007cbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cc2:	f107 0308 	add.w	r3, r7, #8
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	605a      	str	r2, [r3, #4]
 8007ccc:	609a      	str	r2, [r3, #8]
 8007cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cd0:	463b      	mov	r3, r7
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007cda:	4a1e      	ldr	r2, [pc, #120]	; (8007d54 <MX_TIM3_Init+0x98>)
 8007cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 8007cde:	4b1c      	ldr	r3, [pc, #112]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007ce0:	f240 2257 	movw	r2, #599	; 0x257
 8007ce4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ce6:	4b1a      	ldr	r3, [pc, #104]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007cec:	4b18      	ldr	r3, [pc, #96]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007cee:	f242 720f 	movw	r2, #9999	; 0x270f
 8007cf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007cf4:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cfa:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007d00:	4813      	ldr	r0, [pc, #76]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007d02:	f003 ff03 	bl	800bb0c <HAL_TIM_Base_Init>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007d0c:	f7fe fccc 	bl	80066a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007d16:	f107 0308 	add.w	r3, r7, #8
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	480c      	ldr	r0, [pc, #48]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007d1e:	f004 f9a7 	bl	800c070 <HAL_TIM_ConfigClockSource>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007d28:	f7fe fcbe 	bl	80066a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d30:	2300      	movs	r3, #0
 8007d32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007d34:	463b      	mov	r3, r7
 8007d36:	4619      	mov	r1, r3
 8007d38:	4805      	ldr	r0, [pc, #20]	; (8007d50 <MX_TIM3_Init+0x94>)
 8007d3a:	f004 fd81 	bl	800c840 <HAL_TIMEx_MasterConfigSynchronization>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007d44:	f7fe fcb0 	bl	80066a8 <Error_Handler>
  }

}
 8007d48:	bf00      	nop
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	200010b0 	.word	0x200010b0
 8007d54:	40000400 	.word	0x40000400

08007d58 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d5e:	f107 0308 	add.w	r3, r7, #8
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	605a      	str	r2, [r3, #4]
 8007d68:	609a      	str	r2, [r3, #8]
 8007d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d6c:	463b      	mov	r3, r7
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
 8007d72:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8007d74:	4b1d      	ldr	r3, [pc, #116]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <MX_TIM4_Init+0x98>)
 8007d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8007d7a:	4b1c      	ldr	r3, [pc, #112]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d80:	4b1a      	ldr	r3, [pc, #104]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5900;
 8007d86:	4b19      	ldr	r3, [pc, #100]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d88:	f241 720c 	movw	r2, #5900	; 0x170c
 8007d8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d8e:	4b17      	ldr	r3, [pc, #92]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007d9a:	4814      	ldr	r0, [pc, #80]	; (8007dec <MX_TIM4_Init+0x94>)
 8007d9c:	f003 feb6 	bl	800bb0c <HAL_TIM_Base_Init>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8007da6:	f7fe fc7f 	bl	80066a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007daa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007db0:	f107 0308 	add.w	r3, r7, #8
 8007db4:	4619      	mov	r1, r3
 8007db6:	480d      	ldr	r0, [pc, #52]	; (8007dec <MX_TIM4_Init+0x94>)
 8007db8:	f004 f95a 	bl	800c070 <HAL_TIM_ConfigClockSource>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8007dc2:	f7fe fc71 	bl	80066a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007dce:	463b      	mov	r3, r7
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4806      	ldr	r0, [pc, #24]	; (8007dec <MX_TIM4_Init+0x94>)
 8007dd4:	f004 fd34 	bl	800c840 <HAL_TIMEx_MasterConfigSynchronization>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8007dde:	f7fe fc63 	bl	80066a8 <Error_Handler>
  }

}
 8007de2:	bf00      	nop
 8007de4:	3718      	adds	r7, #24
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20001070 	.word	0x20001070
 8007df0:	40000800 	.word	0x40000800

08007df4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a34      	ldr	r2, [pc, #208]	; (8007ed4 <HAL_TIM_Base_MspInit+0xe0>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d10e      	bne.n	8007e24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]
 8007e0a:	4b33      	ldr	r3, [pc, #204]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	4a32      	ldr	r2, [pc, #200]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	6453      	str	r3, [r2, #68]	; 0x44
 8007e16:	4b30      	ldr	r3, [pc, #192]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007e22:	e052      	b.n	8007eca <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2c:	d116      	bne.n	8007e5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007e2e:	2300      	movs	r3, #0
 8007e30:	613b      	str	r3, [r7, #16]
 8007e32:	4b29      	ldr	r3, [pc, #164]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	4a28      	ldr	r2, [pc, #160]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e38:	f043 0301 	orr.w	r3, r3, #1
 8007e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007e3e:	4b26      	ldr	r3, [pc, #152]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e42:	f003 0301 	and.w	r3, r3, #1
 8007e46:	613b      	str	r3, [r7, #16]
 8007e48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	201c      	movs	r0, #28
 8007e50:	f001 fd19 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007e54:	201c      	movs	r0, #28
 8007e56:	f001 fd32 	bl	80098be <HAL_NVIC_EnableIRQ>
}
 8007e5a:	e036      	b.n	8007eca <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <HAL_TIM_Base_MspInit+0xe8>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d116      	bne.n	8007e94 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	4b1b      	ldr	r3, [pc, #108]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	4a1a      	ldr	r2, [pc, #104]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e70:	f043 0302 	orr.w	r3, r3, #2
 8007e74:	6413      	str	r3, [r2, #64]	; 0x40
 8007e76:	4b18      	ldr	r3, [pc, #96]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f003 0302 	and.w	r3, r3, #2
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	201d      	movs	r0, #29
 8007e88:	f001 fcfd 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8007e8c:	201d      	movs	r0, #29
 8007e8e:	f001 fd16 	bl	80098be <HAL_NVIC_EnableIRQ>
}
 8007e92:	e01a      	b.n	8007eca <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a11      	ldr	r2, [pc, #68]	; (8007ee0 <HAL_TIM_Base_MspInit+0xec>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d115      	bne.n	8007eca <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea6:	4a0c      	ldr	r2, [pc, #48]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007ea8:	f043 0304 	orr.w	r3, r3, #4
 8007eac:	6413      	str	r3, [r2, #64]	; 0x40
 8007eae:	4b0a      	ldr	r3, [pc, #40]	; (8007ed8 <HAL_TIM_Base_MspInit+0xe4>)
 8007eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb2:	f003 0304 	and.w	r3, r3, #4
 8007eb6:	60bb      	str	r3, [r7, #8]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	201e      	movs	r0, #30
 8007ec0:	f001 fce1 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8007ec4:	201e      	movs	r0, #30
 8007ec6:	f001 fcfa 	bl	80098be <HAL_NVIC_EnableIRQ>
}
 8007eca:	bf00      	nop
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	40010000 	.word	0x40010000
 8007ed8:	40023800 	.word	0x40023800
 8007edc:	40000400 	.word	0x40000400
 8007ee0:	40000800 	.word	0x40000800

08007ee4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007eec:	f107 030c 	add.w	r3, r7, #12
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	605a      	str	r2, [r3, #4]
 8007ef6:	609a      	str	r2, [r3, #8]
 8007ef8:	60da      	str	r2, [r3, #12]
 8007efa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a12      	ldr	r2, [pc, #72]	; (8007f4c <HAL_TIM_MspPostInit+0x68>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d11e      	bne.n	8007f44 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f06:	2300      	movs	r3, #0
 8007f08:	60bb      	str	r3, [r7, #8]
 8007f0a:	4b11      	ldr	r3, [pc, #68]	; (8007f50 <HAL_TIM_MspPostInit+0x6c>)
 8007f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f0e:	4a10      	ldr	r2, [pc, #64]	; (8007f50 <HAL_TIM_MspPostInit+0x6c>)
 8007f10:	f043 0301 	orr.w	r3, r3, #1
 8007f14:	6313      	str	r3, [r2, #48]	; 0x30
 8007f16:	4b0e      	ldr	r3, [pc, #56]	; (8007f50 <HAL_TIM_MspPostInit+0x6c>)
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	f003 0301 	and.w	r3, r3, #1
 8007f1e:	60bb      	str	r3, [r7, #8]
 8007f20:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f30:	2303      	movs	r3, #3
 8007f32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007f34:	2301      	movs	r3, #1
 8007f36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4805      	ldr	r0, [pc, #20]	; (8007f54 <HAL_TIM_MspPostInit+0x70>)
 8007f40:	f002 f866 	bl	800a010 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8007f44:	bf00      	nop
 8007f46:	3720      	adds	r7, #32
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	40010000 	.word	0x40010000
 8007f50:	40023800 	.word	0x40023800
 8007f54:	40020000 	.word	0x40020000

08007f58 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8007f5c:	4b11      	ldr	r3, [pc, #68]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f5e:	4a12      	ldr	r2, [pc, #72]	; (8007fa8 <MX_USART1_UART_Init+0x50>)
 8007f60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007f62:	4b10      	ldr	r3, [pc, #64]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007f6a:	4b0e      	ldr	r3, [pc, #56]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f70:	4b0c      	ldr	r3, [pc, #48]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f76:	4b0b      	ldr	r3, [pc, #44]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f7c:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f7e:	220c      	movs	r2, #12
 8007f80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f82:	4b08      	ldr	r3, [pc, #32]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f8e:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <MX_USART1_UART_Init+0x4c>)
 8007f90:	f004 fcfd 	bl	800c98e <HAL_UART_Init>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f9a:	f7fe fb85 	bl	80066a8 <Error_Handler>
  }

}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	200011b0 	.word	0x200011b0
 8007fa8:	40011000 	.word	0x40011000

08007fac <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8007fb0:	4b11      	ldr	r3, [pc, #68]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fb2:	4a12      	ldr	r2, [pc, #72]	; (8007ffc <MX_USART3_UART_Init+0x50>)
 8007fb4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007fb6:	4b10      	ldr	r3, [pc, #64]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007fbc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007fbe:	4b0e      	ldr	r3, [pc, #56]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007fca:	4b0b      	ldr	r3, [pc, #44]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007fd0:	4b09      	ldr	r3, [pc, #36]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fd2:	220c      	movs	r2, #12
 8007fd4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007fd6:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007fdc:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007fe2:	4805      	ldr	r0, [pc, #20]	; (8007ff8 <MX_USART3_UART_Init+0x4c>)
 8007fe4:	f004 fcd3 	bl	800c98e <HAL_UART_Init>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007fee:	f7fe fb5b 	bl	80066a8 <Error_Handler>
  }

}
 8007ff2:	bf00      	nop
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	20001170 	.word	0x20001170
 8007ffc:	40004800 	.word	0x40004800

08008000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	; 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008008:	f107 031c 	add.w	r3, r7, #28
 800800c:	2200      	movs	r2, #0
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	605a      	str	r2, [r3, #4]
 8008012:	609a      	str	r2, [r3, #8]
 8008014:	60da      	str	r2, [r3, #12]
 8008016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a3a      	ldr	r2, [pc, #232]	; (8008108 <HAL_UART_MspInit+0x108>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d134      	bne.n	800808c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	4b39      	ldr	r3, [pc, #228]	; (800810c <HAL_UART_MspInit+0x10c>)
 8008028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802a:	4a38      	ldr	r2, [pc, #224]	; (800810c <HAL_UART_MspInit+0x10c>)
 800802c:	f043 0310 	orr.w	r3, r3, #16
 8008030:	6453      	str	r3, [r2, #68]	; 0x44
 8008032:	4b36      	ldr	r3, [pc, #216]	; (800810c <HAL_UART_MspInit+0x10c>)
 8008034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008036:	f003 0310 	and.w	r3, r3, #16
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	4b32      	ldr	r3, [pc, #200]	; (800810c <HAL_UART_MspInit+0x10c>)
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	4a31      	ldr	r2, [pc, #196]	; (800810c <HAL_UART_MspInit+0x10c>)
 8008048:	f043 0302 	orr.w	r3, r3, #2
 800804c:	6313      	str	r3, [r2, #48]	; 0x30
 800804e:	4b2f      	ldr	r3, [pc, #188]	; (800810c <HAL_UART_MspInit+0x10c>)
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800805a:	23c0      	movs	r3, #192	; 0xc0
 800805c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800805e:	2302      	movs	r3, #2
 8008060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008062:	2300      	movs	r3, #0
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008066:	2303      	movs	r3, #3
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800806a:	2307      	movs	r3, #7
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800806e:	f107 031c 	add.w	r3, r7, #28
 8008072:	4619      	mov	r1, r3
 8008074:	4826      	ldr	r0, [pc, #152]	; (8008110 <HAL_UART_MspInit+0x110>)
 8008076:	f001 ffcb 	bl	800a010 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800807a:	2200      	movs	r2, #0
 800807c:	2101      	movs	r1, #1
 800807e:	2025      	movs	r0, #37	; 0x25
 8008080:	f001 fc01 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008084:	2025      	movs	r0, #37	; 0x25
 8008086:	f001 fc1a 	bl	80098be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800808a:	e039      	b.n	8008100 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a20      	ldr	r2, [pc, #128]	; (8008114 <HAL_UART_MspInit+0x114>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d134      	bne.n	8008100 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008096:	2300      	movs	r3, #0
 8008098:	613b      	str	r3, [r7, #16]
 800809a:	4b1c      	ldr	r3, [pc, #112]	; (800810c <HAL_UART_MspInit+0x10c>)
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	4a1b      	ldr	r2, [pc, #108]	; (800810c <HAL_UART_MspInit+0x10c>)
 80080a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80080a4:	6413      	str	r3, [r2, #64]	; 0x40
 80080a6:	4b19      	ldr	r3, [pc, #100]	; (800810c <HAL_UART_MspInit+0x10c>)
 80080a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ae:	613b      	str	r3, [r7, #16]
 80080b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
 80080b6:	4b15      	ldr	r3, [pc, #84]	; (800810c <HAL_UART_MspInit+0x10c>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ba:	4a14      	ldr	r2, [pc, #80]	; (800810c <HAL_UART_MspInit+0x10c>)
 80080bc:	f043 0304 	orr.w	r3, r3, #4
 80080c0:	6313      	str	r3, [r2, #48]	; 0x30
 80080c2:	4b12      	ldr	r3, [pc, #72]	; (800810c <HAL_UART_MspInit+0x10c>)
 80080c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c6:	f003 0304 	and.w	r3, r3, #4
 80080ca:	60fb      	str	r3, [r7, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80080ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80080d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080d4:	2302      	movs	r3, #2
 80080d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080d8:	2300      	movs	r3, #0
 80080da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080dc:	2303      	movs	r3, #3
 80080de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80080e0:	2307      	movs	r3, #7
 80080e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080e4:	f107 031c 	add.w	r3, r7, #28
 80080e8:	4619      	mov	r1, r3
 80080ea:	480b      	ldr	r0, [pc, #44]	; (8008118 <HAL_UART_MspInit+0x118>)
 80080ec:	f001 ff90 	bl	800a010 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2101      	movs	r1, #1
 80080f4:	2027      	movs	r0, #39	; 0x27
 80080f6:	f001 fbc6 	bl	8009886 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80080fa:	2027      	movs	r0, #39	; 0x27
 80080fc:	f001 fbdf 	bl	80098be <HAL_NVIC_EnableIRQ>
}
 8008100:	bf00      	nop
 8008102:	3730      	adds	r7, #48	; 0x30
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	40011000 	.word	0x40011000
 800810c:	40023800 	.word	0x40023800
 8008110:	40020400 	.word	0x40020400
 8008114:	40004800 	.word	0x40004800
 8008118:	40020800 	.word	0x40020800

0800811c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800811c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008122:	e003      	b.n	800812c <LoopCopyDataInit>

08008124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008124:	4b0c      	ldr	r3, [pc, #48]	; (8008158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800812a:	3104      	adds	r1, #4

0800812c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800812c:	480b      	ldr	r0, [pc, #44]	; (800815c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800812e:	4b0c      	ldr	r3, [pc, #48]	; (8008160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008134:	d3f6      	bcc.n	8008124 <CopyDataInit>
  ldr  r2, =_sbss
 8008136:	4a0b      	ldr	r2, [pc, #44]	; (8008164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008138:	e002      	b.n	8008140 <LoopFillZerobss>

0800813a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800813a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800813c:	f842 3b04 	str.w	r3, [r2], #4

08008140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008140:	4b09      	ldr	r3, [pc, #36]	; (8008168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008144:	d3f9      	bcc.n	800813a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008146:	f7ff fc9f 	bl	8007a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800814a:	f005 f885 	bl	800d258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800814e:	f7fe f811 	bl	8006174 <main>
  bx  lr    
 8008152:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008154:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008158:	0801026c 	.word	0x0801026c
  ldr  r0, =_sdata
 800815c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008160:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8008164:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8008168:	200011f8 	.word	0x200011f8

0800816c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800816c:	e7fe      	b.n	800816c <ADC_IRQHandler>
	...

08008170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008174:	4b0e      	ldr	r3, [pc, #56]	; (80081b0 <HAL_Init+0x40>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a0d      	ldr	r2, [pc, #52]	; (80081b0 <HAL_Init+0x40>)
 800817a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800817e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8008180:	4b0b      	ldr	r3, [pc, #44]	; (80081b0 <HAL_Init+0x40>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a0a      	ldr	r2, [pc, #40]	; (80081b0 <HAL_Init+0x40>)
 8008186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800818a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800818c:	4b08      	ldr	r3, [pc, #32]	; (80081b0 <HAL_Init+0x40>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a07      	ldr	r2, [pc, #28]	; (80081b0 <HAL_Init+0x40>)
 8008192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008196:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008198:	2003      	movs	r0, #3
 800819a:	f001 fb69 	bl	8009870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800819e:	2000      	movs	r0, #0
 80081a0:	f000 f808 	bl	80081b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80081a4:	f7fe fd32 	bl	8006c0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	bd80      	pop	{r7, pc}
 80081ae:	bf00      	nop
 80081b0:	40023c00 	.word	0x40023c00

080081b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80081bc:	4b12      	ldr	r3, [pc, #72]	; (8008208 <HAL_InitTick+0x54>)
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	4b12      	ldr	r3, [pc, #72]	; (800820c <HAL_InitTick+0x58>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	4619      	mov	r1, r3
 80081c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80081ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80081d2:	4618      	mov	r0, r3
 80081d4:	f001 fb81 	bl	80098da <HAL_SYSTICK_Config>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e00e      	b.n	8008200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2b0f      	cmp	r3, #15
 80081e6:	d80a      	bhi.n	80081fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081e8:	2200      	movs	r2, #0
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	f04f 30ff 	mov.w	r0, #4294967295
 80081f0:	f001 fb49 	bl	8009886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081f4:	4a06      	ldr	r2, [pc, #24]	; (8008210 <HAL_InitTick+0x5c>)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e000      	b.n	8008200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	20000058 	.word	0x20000058
 800820c:	20000060 	.word	0x20000060
 8008210:	2000005c 	.word	0x2000005c

08008214 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008214:	b480      	push	{r7}
 8008216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <HAL_IncTick+0x1c>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	461a      	mov	r2, r3
 800821e:	4b05      	ldr	r3, [pc, #20]	; (8008234 <HAL_IncTick+0x20>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4413      	add	r3, r2
 8008224:	4a03      	ldr	r2, [pc, #12]	; (8008234 <HAL_IncTick+0x20>)
 8008226:	6013      	str	r3, [r2, #0]
}
 8008228:	bf00      	nop
 800822a:	46bd      	mov	sp, r7
 800822c:	bc80      	pop	{r7}
 800822e:	4770      	bx	lr
 8008230:	20000060 	.word	0x20000060
 8008234:	200011f0 	.word	0x200011f0

08008238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008238:	b480      	push	{r7}
 800823a:	af00      	add	r7, sp, #0
  return uwTick;
 800823c:	4b02      	ldr	r3, [pc, #8]	; (8008248 <HAL_GetTick+0x10>)
 800823e:	681b      	ldr	r3, [r3, #0]
}
 8008240:	4618      	mov	r0, r3
 8008242:	46bd      	mov	sp, r7
 8008244:	bc80      	pop	{r7}
 8008246:	4770      	bx	lr
 8008248:	200011f0 	.word	0x200011f0

0800824c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008254:	f7ff fff0 	bl	8008238 <HAL_GetTick>
 8008258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008264:	d005      	beq.n	8008272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008266:	4b09      	ldr	r3, [pc, #36]	; (800828c <HAL_Delay+0x40>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4413      	add	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008272:	bf00      	nop
 8008274:	f7ff ffe0 	bl	8008238 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	429a      	cmp	r2, r3
 8008282:	d8f7      	bhi.n	8008274 <HAL_Delay+0x28>
  {
  }
}
 8008284:	bf00      	nop
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	20000060 	.word	0x20000060

08008290 <HAL_ADC_Init>:
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	2300      	movs	r3, #0
 800829a:	73fb      	strb	r3, [r7, #15]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <HAL_ADC_Init+0x16>
 80082a2:	2301      	movs	r3, #1
 80082a4:	e033      	b.n	800830e <HAL_ADC_Init+0x7e>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d109      	bne.n	80082c2 <HAL_ADC_Init+0x32>
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7fd f970 	bl	8005594 <HAL_ADC_MspInit>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	645a      	str	r2, [r3, #68]	; 0x44
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d118      	bne.n	8008300 <HAL_ADC_Init+0x70>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80082d6:	f023 0302 	bic.w	r3, r3, #2
 80082da:	f043 0202 	orr.w	r2, r3, #2
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	641a      	str	r2, [r3, #64]	; 0x40
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fa1c 	bl	8008720 <ADC_Init>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	645a      	str	r2, [r3, #68]	; 0x44
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f2:	f023 0303 	bic.w	r3, r3, #3
 80082f6:	f043 0201 	orr.w	r2, r3, #1
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	641a      	str	r2, [r3, #64]	; 0x40
 80082fe:	e001      	b.n	8008304 <HAL_ADC_Init+0x74>
 8008300:	2301      	movs	r3, #1
 8008302:	73fb      	strb	r3, [r7, #15]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <HAL_ADC_Start_DMA>:
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800832e:	2b01      	cmp	r3, #1
 8008330:	d101      	bne.n	8008336 <HAL_ADC_Start_DMA+0x1e>
 8008332:	2302      	movs	r3, #2
 8008334:	e0af      	b.n	8008496 <HAL_ADC_Start_DMA+0x17e>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f003 0301 	and.w	r3, r3, #1
 8008348:	2b01      	cmp	r3, #1
 800834a:	d018      	beq.n	800837e <HAL_ADC_Start_DMA+0x66>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689a      	ldr	r2, [r3, #8]
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f042 0201 	orr.w	r2, r2, #1
 800835a:	609a      	str	r2, [r3, #8]
 800835c:	4b50      	ldr	r3, [pc, #320]	; (80084a0 <HAL_ADC_Start_DMA+0x188>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a50      	ldr	r2, [pc, #320]	; (80084a4 <HAL_ADC_Start_DMA+0x18c>)
 8008362:	fba2 2303 	umull	r2, r3, r2, r3
 8008366:	0c9a      	lsrs	r2, r3, #18
 8008368:	4613      	mov	r3, r2
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	4413      	add	r3, r2
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	e002      	b.n	8008378 <HAL_ADC_Start_DMA+0x60>
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	3b01      	subs	r3, #1
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1f9      	bne.n	8008372 <HAL_ADC_Start_DMA+0x5a>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b01      	cmp	r3, #1
 800838a:	f040 8083 	bne.w	8008494 <HAL_ADC_Start_DMA+0x17c>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008392:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008396:	f023 0301 	bic.w	r3, r3, #1
 800839a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	641a      	str	r2, [r3, #64]	; 0x40
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <HAL_ADC_Start_DMA+0xa8>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80083b8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083cc:	d106      	bne.n	80083dc <HAL_ADC_Start_DMA+0xc4>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083d2:	f023 0206 	bic.w	r2, r3, #6
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	645a      	str	r2, [r3, #68]	; 0x44
 80083da:	e002      	b.n	80083e2 <HAL_ADC_Start_DMA+0xca>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	645a      	str	r2, [r3, #68]	; 0x44
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ee:	4a2e      	ldr	r2, [pc, #184]	; (80084a8 <HAL_ADC_Start_DMA+0x190>)
 80083f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f6:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <HAL_ADC_Start_DMA+0x194>)
 80083f8:	641a      	str	r2, [r3, #64]	; 0x40
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fe:	4a2c      	ldr	r2, [pc, #176]	; (80084b0 <HAL_ADC_Start_DMA+0x198>)
 8008400:	64da      	str	r2, [r3, #76]	; 0x4c
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800841a:	605a      	str	r2, [r3, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800842a:	609a      	str	r2, [r3, #8]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	334c      	adds	r3, #76	; 0x4c
 8008436:	4619      	mov	r1, r3
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f001 fb08 	bl	8009a50 <HAL_DMA_Start_IT>
 8008440:	4b1c      	ldr	r3, [pc, #112]	; (80084b4 <HAL_ADC_Start_DMA+0x19c>)
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f003 031f 	and.w	r3, r3, #31
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10f      	bne.n	800846c <HAL_ADC_Start_DMA+0x154>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d11c      	bne.n	8008494 <HAL_ADC_Start_DMA+0x17c>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	689a      	ldr	r2, [r3, #8]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008468:	609a      	str	r2, [r3, #8]
 800846a:	e013      	b.n	8008494 <HAL_ADC_Start_DMA+0x17c>
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <HAL_ADC_Start_DMA+0x1a0>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d10e      	bne.n	8008494 <HAL_ADC_Start_DMA+0x17c>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d107      	bne.n	8008494 <HAL_ADC_Start_DMA+0x17c>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689a      	ldr	r2, [r3, #8]
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008492:	609a      	str	r2, [r3, #8]
 8008494:	2300      	movs	r3, #0
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	20000058 	.word	0x20000058
 80084a4:	431bde83 	.word	0x431bde83
 80084a8:	08008929 	.word	0x08008929
 80084ac:	080089e3 	.word	0x080089e3
 80084b0:	080089ff 	.word	0x080089ff
 80084b4:	40012300 	.word	0x40012300
 80084b8:	40012000 	.word	0x40012000

080084bc <HAL_ADC_ConvHalfCpltCallback>:
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr

080084ce <HAL_ADC_ErrorCallback>:
 80084ce:	b480      	push	{r7}
 80084d0:	b083      	sub	sp, #12
 80084d2:	af00      	add	r7, sp, #0
 80084d4:	6078      	str	r0, [r7, #4]
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	bc80      	pop	{r7}
 80084de:	4770      	bx	lr

080084e0 <HAL_ADC_ConfigChannel>:
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d101      	bne.n	80084fc <HAL_ADC_ConfigChannel+0x1c>
 80084f8:	2302      	movs	r3, #2
 80084fa:	e103      	b.n	8008704 <HAL_ADC_ConfigChannel+0x224>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b09      	cmp	r3, #9
 800850a:	d925      	bls.n	8008558 <HAL_ADC_ConfigChannel+0x78>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68d9      	ldr	r1, [r3, #12]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	4613      	mov	r3, r2
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	4413      	add	r3, r2
 8008520:	3b1e      	subs	r3, #30
 8008522:	2207      	movs	r2, #7
 8008524:	fa02 f303 	lsl.w	r3, r2, r3
 8008528:	43da      	mvns	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	400a      	ands	r2, r1
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68d9      	ldr	r1, [r3, #12]
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	689a      	ldr	r2, [r3, #8]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	b29b      	uxth	r3, r3
 8008542:	4618      	mov	r0, r3
 8008544:	4603      	mov	r3, r0
 8008546:	005b      	lsls	r3, r3, #1
 8008548:	4403      	add	r3, r0
 800854a:	3b1e      	subs	r3, #30
 800854c:	409a      	lsls	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	60da      	str	r2, [r3, #12]
 8008556:	e022      	b.n	800859e <HAL_ADC_ConfigChannel+0xbe>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6919      	ldr	r1, [r3, #16]
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	4613      	mov	r3, r2
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	4413      	add	r3, r2
 800856c:	2207      	movs	r2, #7
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	43da      	mvns	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	400a      	ands	r2, r1
 800857a:	611a      	str	r2, [r3, #16]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6919      	ldr	r1, [r3, #16]
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	4618      	mov	r0, r3
 800858e:	4603      	mov	r3, r0
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	4403      	add	r3, r0
 8008594:	409a      	lsls	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	611a      	str	r2, [r3, #16]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b06      	cmp	r3, #6
 80085a4:	d824      	bhi.n	80085f0 <HAL_ADC_ConfigChannel+0x110>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685a      	ldr	r2, [r3, #4]
 80085b0:	4613      	mov	r3, r2
 80085b2:	009b      	lsls	r3, r3, #2
 80085b4:	4413      	add	r3, r2
 80085b6:	3b05      	subs	r3, #5
 80085b8:	221f      	movs	r2, #31
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	43da      	mvns	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	400a      	ands	r2, r1
 80085c6:	635a      	str	r2, [r3, #52]	; 0x34
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	4618      	mov	r0, r3
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	3b05      	subs	r3, #5
 80085e2:	fa00 f203 	lsl.w	r2, r0, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	635a      	str	r2, [r3, #52]	; 0x34
 80085ee:	e04c      	b.n	800868a <HAL_ADC_ConfigChannel+0x1aa>
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b0c      	cmp	r3, #12
 80085f6:	d824      	bhi.n	8008642 <HAL_ADC_ConfigChannel+0x162>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	4613      	mov	r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	4413      	add	r3, r2
 8008608:	3b23      	subs	r3, #35	; 0x23
 800860a:	221f      	movs	r2, #31
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	43da      	mvns	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	400a      	ands	r2, r1
 8008618:	631a      	str	r2, [r3, #48]	; 0x30
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	4618      	mov	r0, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685a      	ldr	r2, [r3, #4]
 800862c:	4613      	mov	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	3b23      	subs	r3, #35	; 0x23
 8008634:	fa00 f203 	lsl.w	r2, r0, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
 8008640:	e023      	b.n	800868a <HAL_ADC_ConfigChannel+0x1aa>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	4613      	mov	r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	4413      	add	r3, r2
 8008652:	3b41      	subs	r3, #65	; 0x41
 8008654:	221f      	movs	r2, #31
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	43da      	mvns	r2, r3
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	400a      	ands	r2, r1
 8008662:	62da      	str	r2, [r3, #44]	; 0x2c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	4618      	mov	r0, r3
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	685a      	ldr	r2, [r3, #4]
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	3b41      	subs	r3, #65	; 0x41
 800867e:	fa00 f203 	lsl.w	r2, r0, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	430a      	orrs	r2, r1
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a20      	ldr	r2, [pc, #128]	; (8008710 <HAL_ADC_ConfigChannel+0x230>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d109      	bne.n	80086a8 <HAL_ADC_ConfigChannel+0x1c8>
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	2b12      	cmp	r3, #18
 800869a:	d105      	bne.n	80086a8 <HAL_ADC_ConfigChannel+0x1c8>
 800869c:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <HAL_ADC_ConfigChannel+0x234>)
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <HAL_ADC_ConfigChannel+0x234>)
 80086a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80086a6:	6053      	str	r3, [r2, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a18      	ldr	r2, [pc, #96]	; (8008710 <HAL_ADC_ConfigChannel+0x230>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d123      	bne.n	80086fa <HAL_ADC_ConfigChannel+0x21a>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b10      	cmp	r3, #16
 80086b8:	d003      	beq.n	80086c2 <HAL_ADC_ConfigChannel+0x1e2>
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b11      	cmp	r3, #17
 80086c0:	d11b      	bne.n	80086fa <HAL_ADC_ConfigChannel+0x21a>
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <HAL_ADC_ConfigChannel+0x234>)
 80086c4:	685b      	ldr	r3, [r3, #4]
 80086c6:	4a13      	ldr	r2, [pc, #76]	; (8008714 <HAL_ADC_ConfigChannel+0x234>)
 80086c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80086cc:	6053      	str	r3, [r2, #4]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b10      	cmp	r3, #16
 80086d4:	d111      	bne.n	80086fa <HAL_ADC_ConfigChannel+0x21a>
 80086d6:	4b10      	ldr	r3, [pc, #64]	; (8008718 <HAL_ADC_ConfigChannel+0x238>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a10      	ldr	r2, [pc, #64]	; (800871c <HAL_ADC_ConfigChannel+0x23c>)
 80086dc:	fba2 2303 	umull	r2, r3, r2, r3
 80086e0:	0c9a      	lsrs	r2, r3, #18
 80086e2:	4613      	mov	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4413      	add	r3, r2
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	e002      	b.n	80086f4 <HAL_ADC_ConfigChannel+0x214>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1f9      	bne.n	80086ee <HAL_ADC_ConfigChannel+0x20e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008702:	2300      	movs	r3, #0
 8008704:	4618      	mov	r0, r3
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	bc80      	pop	{r7}
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	40012000 	.word	0x40012000
 8008714:	40012300 	.word	0x40012300
 8008718:	20000058 	.word	0x20000058
 800871c:	431bde83 	.word	0x431bde83

08008720 <ADC_Init>:
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	4b7d      	ldr	r3, [pc, #500]	; (8008920 <ADC_Init+0x200>)
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	4a7c      	ldr	r2, [pc, #496]	; (8008920 <ADC_Init+0x200>)
 800872e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008732:	6053      	str	r3, [r2, #4]
 8008734:	4b7a      	ldr	r3, [pc, #488]	; (8008920 <ADC_Init+0x200>)
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	4978      	ldr	r1, [pc, #480]	; (8008920 <ADC_Init+0x200>)
 800873e:	4313      	orrs	r3, r2
 8008740:	604b      	str	r3, [r1, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008750:	605a      	str	r2, [r3, #4]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6859      	ldr	r1, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	021a      	lsls	r2, r3, #8
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	430a      	orrs	r2, r1
 8008764:	605a      	str	r2, [r3, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	6859      	ldr	r1, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	689a      	ldr	r2, [r3, #8]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	605a      	str	r2, [r3, #4]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	689a      	ldr	r2, [r3, #8]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008796:	609a      	str	r2, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6899      	ldr	r1, [r3, #8]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	609a      	str	r2, [r3, #8]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	4a5d      	ldr	r2, [pc, #372]	; (8008924 <ADC_Init+0x204>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d022      	beq.n	80087fa <ADC_Init+0xda>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	689a      	ldr	r2, [r3, #8]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80087c2:	609a      	str	r2, [r3, #8]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6899      	ldr	r1, [r3, #8]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	609a      	str	r2, [r3, #8]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689a      	ldr	r2, [r3, #8]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80087e4:	609a      	str	r2, [r3, #8]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	6899      	ldr	r1, [r3, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	609a      	str	r2, [r3, #8]
 80087f8:	e00f      	b.n	800881a <ADC_Init+0xfa>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689a      	ldr	r2, [r3, #8]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008808:	609a      	str	r2, [r3, #8]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008818:	609a      	str	r2, [r3, #8]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689a      	ldr	r2, [r3, #8]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f022 0202 	bic.w	r2, r2, #2
 8008828:	609a      	str	r2, [r3, #8]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	6899      	ldr	r1, [r3, #8]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	699b      	ldr	r3, [r3, #24]
 8008834:	005a      	lsls	r2, r3, #1
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	430a      	orrs	r2, r1
 800883c:	609a      	str	r2, [r3, #8]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a1b      	ldr	r3, [r3, #32]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d027      	beq.n	8008896 <ADC_Init+0x176>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	685a      	ldr	r2, [r3, #4]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008854:	605a      	str	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008864:	605a      	str	r2, [r3, #4]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	3b01      	subs	r3, #1
 800886c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8008870:	60fa      	str	r2, [r7, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	fa92 f2a2 	rbit	r2, r2
 8008878:	60ba      	str	r2, [r7, #8]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	fab2 f282 	clz	r2, r2
 8008880:	b2d2      	uxtb	r2, r2
 8008882:	fa03 f102 	lsl.w	r1, r3, r2
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685a      	ldr	r2, [r3, #4]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
 8008894:	e007      	b.n	80088a6 <ADC_Init+0x186>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	685a      	ldr	r2, [r3, #4]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80088a4:	605a      	str	r2, [r3, #4]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80088b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	3b01      	subs	r3, #1
 80088c2:	051a      	lsls	r2, r3, #20
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	430a      	orrs	r2, r1
 80088ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80088da:	609a      	str	r2, [r3, #8]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6899      	ldr	r1, [r3, #8]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e6:	025a      	lsls	r2, r3, #9
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088fe:	609a      	str	r2, [r3, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6899      	ldr	r1, [r3, #8]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	029a      	lsls	r2, r3, #10
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	609a      	str	r2, [r3, #8]
 8008914:	bf00      	nop
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40012300 	.word	0x40012300
 8008924:	0f000001 	.word	0x0f000001

08008928 <ADC_DMAConvCplt>:
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800893e:	2b00      	cmp	r3, #0
 8008940:	d13c      	bne.n	80089bc <ADC_DMAConvCplt+0x94>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	641a      	str	r2, [r3, #64]	; 0x40
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008958:	2b00      	cmp	r3, #0
 800895a:	d12b      	bne.n	80089b4 <ADC_DMAConvCplt+0x8c>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d127      	bne.n	80089b4 <ADC_DMAConvCplt+0x8c>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d006      	beq.n	8008980 <ADC_DMAConvCplt+0x58>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800897c:	2b00      	cmp	r3, #0
 800897e:	d119      	bne.n	80089b4 <ADC_DMAConvCplt+0x8c>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0220 	bic.w	r2, r2, #32
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008994:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	641a      	str	r2, [r3, #64]	; 0x40
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d105      	bne.n	80089b4 <ADC_DMAConvCplt+0x8c>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ac:	f043 0201 	orr.w	r2, r3, #1
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	641a      	str	r2, [r3, #64]	; 0x40
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f7fd fc71 	bl	800629c <HAL_ADC_ConvCpltCallback>
 80089ba:	e00e      	b.n	80089da <ADC_DMAConvCplt+0xb2>
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d003      	beq.n	80089d0 <ADC_DMAConvCplt+0xa8>
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7ff fd80 	bl	80084ce <HAL_ADC_ErrorCallback>
 80089ce:	e004      	b.n	80089da <ADC_DMAConvCplt+0xb2>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	4798      	blx	r3
 80089da:	bf00      	nop
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <ADC_DMAHalfConvCplt>:
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b084      	sub	sp, #16
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7ff fd63 	bl	80084bc <HAL_ADC_ConvHalfCpltCallback>
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <ADC_DMAError>:
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2240      	movs	r2, #64	; 0x40
 8008a10:	641a      	str	r2, [r3, #64]	; 0x40
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a16:	f043 0204 	orr.w	r2, r3, #4
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	645a      	str	r2, [r3, #68]	; 0x44
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fd55 	bl	80084ce <HAL_ADC_ErrorCallback>
 8008a24:	bf00      	nop
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e0ed      	b.n	8008c1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d102      	bne.n	8008a50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fc fe8a 	bl	8005764 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0202 	bic.w	r2, r2, #2
 8008a5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008a60:	f7ff fbea 	bl	8008238 <HAL_GetTick>
 8008a64:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a66:	e012      	b.n	8008a8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008a68:	f7ff fbe6 	bl	8008238 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b0a      	cmp	r3, #10
 8008a74:	d90b      	bls.n	8008a8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2205      	movs	r2, #5
 8008a86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e0c5      	b.n	8008c1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f003 0302 	and.w	r3, r3, #2
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1e5      	bne.n	8008a68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0201 	orr.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008aac:	f7ff fbc4 	bl	8008238 <HAL_GetTick>
 8008ab0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008ab2:	e012      	b.n	8008ada <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008ab4:	f7ff fbc0 	bl	8008238 <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b0a      	cmp	r3, #10
 8008ac0:	d90b      	bls.n	8008ada <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ac6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2205      	movs	r2, #5
 8008ad2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e09f      	b.n	8008c1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0e5      	beq.n	8008ab4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	7e1b      	ldrb	r3, [r3, #24]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d108      	bne.n	8008b02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008afe:	601a      	str	r2, [r3, #0]
 8008b00:	e007      	b.n	8008b12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	7e5b      	ldrb	r3, [r3, #25]
 8008b16:	2b01      	cmp	r3, #1
 8008b18:	d108      	bne.n	8008b2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e007      	b.n	8008b3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	7e9b      	ldrb	r3, [r3, #26]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d108      	bne.n	8008b56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f042 0220 	orr.w	r2, r2, #32
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e007      	b.n	8008b66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0220 	bic.w	r2, r2, #32
 8008b64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7edb      	ldrb	r3, [r3, #27]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d108      	bne.n	8008b80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f022 0210 	bic.w	r2, r2, #16
 8008b7c:	601a      	str	r2, [r3, #0]
 8008b7e:	e007      	b.n	8008b90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f042 0210 	orr.w	r2, r2, #16
 8008b8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	7f1b      	ldrb	r3, [r3, #28]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d108      	bne.n	8008baa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f042 0208 	orr.w	r2, r2, #8
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	e007      	b.n	8008bba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0208 	bic.w	r2, r2, #8
 8008bb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	7f5b      	ldrb	r3, [r3, #29]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d108      	bne.n	8008bd4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f042 0204 	orr.w	r2, r2, #4
 8008bd0:	601a      	str	r2, [r3, #0]
 8008bd2:	e007      	b.n	8008be4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0204 	bic.w	r2, r2, #4
 8008be2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	689a      	ldr	r2, [r3, #8]
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	ea42 0103 	orr.w	r1, r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	1e5a      	subs	r2, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2201      	movs	r2, #1
 8008c14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
	...

08008c24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c3a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008c3c:	7cfb      	ldrb	r3, [r7, #19]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d003      	beq.n	8008c4a <HAL_CAN_ConfigFilter+0x26>
 8008c42:	7cfb      	ldrb	r3, [r7, #19]
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	f040 80be 	bne.w	8008dc6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8008c4a:	4b65      	ldr	r3, [pc, #404]	; (8008de0 <HAL_CAN_ConfigFilter+0x1bc>)
 8008c4c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c54:	f043 0201 	orr.w	r2, r3, #1
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008c64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	021b      	lsls	r3, r3, #8
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	695b      	ldr	r3, [r3, #20]
 8008c86:	f003 031f 	and.w	r3, r3, #31
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	401a      	ands	r2, r3
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	69db      	ldr	r3, [r3, #28]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d123      	bne.n	8008cf4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	43db      	mvns	r3, r3
 8008cb6:	401a      	ands	r2, r3
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008cca:	683a      	ldr	r2, [r7, #0]
 8008ccc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008cce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	3248      	adds	r2, #72	; 0x48
 8008cd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008ce8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008cea:	6979      	ldr	r1, [r7, #20]
 8008cec:	3348      	adds	r3, #72	; 0x48
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	440b      	add	r3, r1
 8008cf2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d122      	bne.n	8008d42 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	431a      	orrs	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008d1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	3248      	adds	r2, #72	; 0x48
 8008d22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008d36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008d38:	6979      	ldr	r1, [r7, #20]
 8008d3a:	3348      	adds	r3, #72	; 0x48
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	440b      	add	r3, r1
 8008d40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d109      	bne.n	8008d5e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	43db      	mvns	r3, r3
 8008d54:	401a      	ands	r2, r3
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8008d5c:	e007      	b.n	8008d6e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d109      	bne.n	8008d8a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	401a      	ands	r2, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8008d88:	e007      	b.n	8008d9a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	431a      	orrs	r2, r3
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d107      	bne.n	8008db2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	431a      	orrs	r2, r3
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008db8:	f023 0201 	bic.w	r2, r3, #1
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e006      	b.n	8008dd4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
  }
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	371c      	adds	r7, #28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	40006400 	.word	0x40006400

08008de4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d12e      	bne.n	8008e56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0201 	bic.w	r2, r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e10:	f7ff fa12 	bl	8008238 <HAL_GetTick>
 8008e14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008e16:	e012      	b.n	8008e3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e18:	f7ff fa0e 	bl	8008238 <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	2b0a      	cmp	r3, #10
 8008e24:	d90b      	bls.n	8008e3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2205      	movs	r2, #5
 8008e36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e012      	b.n	8008e64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	f003 0301 	and.w	r3, r3, #1
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	e006      	b.n	8008e64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
  }
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}

08008e6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b089      	sub	sp, #36	; 0x24
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	60f8      	str	r0, [r7, #12]
 8008e74:	60b9      	str	r1, [r7, #8]
 8008e76:	607a      	str	r2, [r7, #4]
 8008e78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8008e8a:	7ffb      	ldrb	r3, [r7, #31]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d003      	beq.n	8008e98 <HAL_CAN_AddTxMessage+0x2c>
 8008e90:	7ffb      	ldrb	r3, [r7, #31]
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	f040 80b8 	bne.w	8009008 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10a      	bne.n	8008eb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d105      	bne.n	8008eb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 80a0 	beq.w	8008ff8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	0e1b      	lsrs	r3, r3, #24
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	2b02      	cmp	r3, #2
 8008ec6:	d907      	bls.n	8008ed8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ecc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e09e      	b.n	8009016 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8008ed8:	2201      	movs	r2, #1
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	409a      	lsls	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10d      	bne.n	8008f06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8008ef4:	68f9      	ldr	r1, [r7, #12]
 8008ef6:	6809      	ldr	r1, [r1, #0]
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	3318      	adds	r3, #24
 8008efe:	011b      	lsls	r3, r3, #4
 8008f00:	440b      	add	r3, r1
 8008f02:	601a      	str	r2, [r3, #0]
 8008f04:	e00f      	b.n	8008f26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8008f1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	3318      	adds	r3, #24
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	440b      	add	r3, r1
 8008f24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6819      	ldr	r1, [r3, #0]
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	3318      	adds	r3, #24
 8008f32:	011b      	lsls	r3, r3, #4
 8008f34:	440b      	add	r3, r1
 8008f36:	3304      	adds	r3, #4
 8008f38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	7d1b      	ldrb	r3, [r3, #20]
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d111      	bne.n	8008f66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	3318      	adds	r3, #24
 8008f4a:	011b      	lsls	r3, r3, #4
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3304      	adds	r3, #4
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	6811      	ldr	r1, [r2, #0]
 8008f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	3318      	adds	r3, #24
 8008f5e:	011b      	lsls	r3, r3, #4
 8008f60:	440b      	add	r3, r1
 8008f62:	3304      	adds	r3, #4
 8008f64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	3307      	adds	r3, #7
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	061a      	lsls	r2, r3, #24
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3306      	adds	r3, #6
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	041b      	lsls	r3, r3, #16
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	3305      	adds	r3, #5
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	4313      	orrs	r3, r2
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	3204      	adds	r2, #4
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	4610      	mov	r0, r2
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	6811      	ldr	r1, [r2, #0]
 8008f8e:	ea43 0200 	orr.w	r2, r3, r0
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	440b      	add	r3, r1
 8008f98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8008f9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3303      	adds	r3, #3
 8008fa2:	781b      	ldrb	r3, [r3, #0]
 8008fa4:	061a      	lsls	r2, r3, #24
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3302      	adds	r3, #2
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	041b      	lsls	r3, r3, #16
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	021b      	lsls	r3, r3, #8
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	7812      	ldrb	r2, [r2, #0]
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	6811      	ldr	r1, [r2, #0]
 8008fc4:	ea43 0200 	orr.w	r2, r3, r0
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	011b      	lsls	r3, r3, #4
 8008fcc:	440b      	add	r3, r1
 8008fce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8008fd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	3318      	adds	r3, #24
 8008fdc:	011b      	lsls	r3, r3, #4
 8008fde:	4413      	add	r3, r2
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	6811      	ldr	r1, [r2, #0]
 8008fe6:	f043 0201 	orr.w	r2, r3, #1
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	3318      	adds	r3, #24
 8008fee:	011b      	lsls	r3, r3, #4
 8008ff0:	440b      	add	r3, r1
 8008ff2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	e00e      	b.n	8009016 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e006      	b.n	8009016 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
  }
}
 8009016:	4618      	mov	r0, r3
 8009018:	3724      	adds	r7, #36	; 0x24
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr

08009020 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
 800902c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009034:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d003      	beq.n	8009044 <HAL_CAN_GetRxMessage+0x24>
 800903c:	7dfb      	ldrb	r3, [r7, #23]
 800903e:	2b02      	cmp	r3, #2
 8009040:	f040 80f3 	bne.w	800922a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10e      	bne.n	8009068 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68db      	ldr	r3, [r3, #12]
 8009050:	f003 0303 	and.w	r3, r3, #3
 8009054:	2b00      	cmp	r3, #0
 8009056:	d116      	bne.n	8009086 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e0e7      	b.n	8009238 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	2b00      	cmp	r3, #0
 8009074:	d107      	bne.n	8009086 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	e0d8      	b.n	8009238 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	331b      	adds	r3, #27
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	4413      	add	r3, r2
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 0204 	and.w	r2, r3, #4
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d10c      	bne.n	80090be <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	331b      	adds	r3, #27
 80090ac:	011b      	lsls	r3, r3, #4
 80090ae:	4413      	add	r3, r2
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	0d5b      	lsrs	r3, r3, #21
 80090b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	e00b      	b.n	80090d6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	331b      	adds	r3, #27
 80090c6:	011b      	lsls	r3, r3, #4
 80090c8:	4413      	add	r3, r2
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	08db      	lsrs	r3, r3, #3
 80090ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	331b      	adds	r3, #27
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	4413      	add	r3, r2
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 0202 	and.w	r2, r3, #2
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	331b      	adds	r3, #27
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	4413      	add	r3, r2
 80090f8:	3304      	adds	r3, #4
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 020f 	and.w	r2, r3, #15
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	331b      	adds	r3, #27
 800910c:	011b      	lsls	r3, r3, #4
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	0a1b      	lsrs	r3, r3, #8
 8009116:	b2da      	uxtb	r2, r3
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	331b      	adds	r3, #27
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	4413      	add	r3, r2
 8009128:	3304      	adds	r3, #4
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	0c1b      	lsrs	r3, r3, #16
 800912e:	b29a      	uxth	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	4413      	add	r3, r2
 800913e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	b2da      	uxtb	r2, r3
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	011b      	lsls	r3, r3, #4
 8009152:	4413      	add	r3, r2
 8009154:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	0a1a      	lsrs	r2, r3, #8
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	3301      	adds	r3, #1
 8009160:	b2d2      	uxtb	r2, r2
 8009162:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	4413      	add	r3, r2
 800916e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	0c1a      	lsrs	r2, r3, #16
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	3302      	adds	r3, #2
 800917a:	b2d2      	uxtb	r2, r2
 800917c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	011b      	lsls	r3, r3, #4
 8009186:	4413      	add	r3, r2
 8009188:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	0e1a      	lsrs	r2, r3, #24
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	3303      	adds	r3, #3
 8009194:	b2d2      	uxtb	r2, r2
 8009196:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	011b      	lsls	r3, r3, #4
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	b2d2      	uxtb	r2, r2
 80091ae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	011b      	lsls	r3, r3, #4
 80091b8:	4413      	add	r3, r2
 80091ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	0a1a      	lsrs	r2, r3, #8
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	3305      	adds	r3, #5
 80091c6:	b2d2      	uxtb	r2, r2
 80091c8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	011b      	lsls	r3, r3, #4
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	0c1a      	lsrs	r2, r3, #16
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	3306      	adds	r3, #6
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	011b      	lsls	r3, r3, #4
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	0e1a      	lsrs	r2, r3, #24
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	3307      	adds	r3, #7
 80091fa:	b2d2      	uxtb	r2, r2
 80091fc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d108      	bne.n	8009216 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0220 	orr.w	r2, r2, #32
 8009212:	60da      	str	r2, [r3, #12]
 8009214:	e007      	b.n	8009226 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f042 0220 	orr.w	r2, r2, #32
 8009224:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e006      	b.n	8009238 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
  }
}
 8009238:	4618      	mov	r0, r3
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	bc80      	pop	{r7}
 8009240:	4770      	bx	lr

08009242 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009242:	b480      	push	{r7}
 8009244:	b085      	sub	sp, #20
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009252:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d002      	beq.n	8009260 <HAL_CAN_ActivateNotification+0x1e>
 800925a:	7bfb      	ldrb	r3, [r7, #15]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d109      	bne.n	8009274 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6959      	ldr	r1, [r3, #20]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	430a      	orrs	r2, r1
 800926e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	e006      	b.n	8009282 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009278:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
  }
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	bc80      	pop	{r7}
 800928a:	4770      	bx	lr

0800928c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b08a      	sub	sp, #40	; 0x28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009294:	2300      	movs	r3, #0
 8009296:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	691b      	ldr	r3, [r3, #16]
 80092be:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699b      	ldr	r3, [r3, #24]
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d07c      	beq.n	80093cc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d023      	beq.n	8009324 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2201      	movs	r2, #1
 80092e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d003      	beq.n	80092f6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f97d 	bl	80095ee <HAL_CAN_TxMailbox0CompleteCallback>
 80092f4:	e016      	b.n	8009324 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d004      	beq.n	800930a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009302:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009306:	627b      	str	r3, [r7, #36]	; 0x24
 8009308:	e00c      	b.n	8009324 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	f003 0308 	and.w	r3, r3, #8
 8009310:	2b00      	cmp	r3, #0
 8009312:	d004      	beq.n	800931e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800931a:	627b      	str	r3, [r7, #36]	; 0x24
 800931c:	e002      	b.n	8009324 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f980 	bl	8009624 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800932a:	2b00      	cmp	r3, #0
 800932c:	d024      	beq.n	8009378 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009336:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800933e:	2b00      	cmp	r3, #0
 8009340:	d003      	beq.n	800934a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f000 f95c 	bl	8009600 <HAL_CAN_TxMailbox1CompleteCallback>
 8009348:	e016      	b.n	8009378 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009350:	2b00      	cmp	r3, #0
 8009352:	d004      	beq.n	800935e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800935a:	627b      	str	r3, [r7, #36]	; 0x24
 800935c:	e00c      	b.n	8009378 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800936e:	627b      	str	r3, [r7, #36]	; 0x24
 8009370:	e002      	b.n	8009378 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f95f 	bl	8009636 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800937e:	2b00      	cmp	r3, #0
 8009380:	d024      	beq.n	80093cc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800938a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d003      	beq.n	800939e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f93b 	bl	8009612 <HAL_CAN_TxMailbox2CompleteCallback>
 800939c:	e016      	b.n	80093cc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800939e:	69bb      	ldr	r3, [r7, #24]
 80093a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d004      	beq.n	80093b2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
 80093b0:	e00c      	b.n	80093cc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80093b2:	69bb      	ldr	r3, [r7, #24]
 80093b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d004      	beq.n	80093c6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093c2:	627b      	str	r3, [r7, #36]	; 0x24
 80093c4:	e002      	b.n	80093cc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f93e 	bl	8009648 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	f003 0308 	and.w	r3, r3, #8
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d00c      	beq.n	80093f0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f003 0310 	and.w	r3, r3, #16
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d007      	beq.n	80093f0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2210      	movs	r2, #16
 80093ee:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80093f0:	6a3b      	ldr	r3, [r7, #32]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d006      	beq.n	8009412 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2208      	movs	r2, #8
 800940a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f000 f92d 	bl	800966c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	f003 0302 	and.w	r3, r3, #2
 8009418:	2b00      	cmp	r3, #0
 800941a:	d009      	beq.n	8009430 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f003 0303 	and.w	r3, r3, #3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 f915 	bl	800965a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009436:	2b00      	cmp	r3, #0
 8009438:	d00c      	beq.n	8009454 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f003 0310 	and.w	r3, r3, #16
 8009440:	2b00      	cmp	r3, #0
 8009442:	d007      	beq.n	8009454 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800944a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2210      	movs	r2, #16
 8009452:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00b      	beq.n	8009476 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f003 0308 	and.w	r3, r3, #8
 8009464:	2b00      	cmp	r3, #0
 8009466:	d006      	beq.n	8009476 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2208      	movs	r2, #8
 800946e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f90d 	bl	8009690 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	f003 0310 	and.w	r3, r3, #16
 800947c:	2b00      	cmp	r3, #0
 800947e:	d009      	beq.n	8009494 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d002      	beq.n	8009494 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f8f5 	bl	800967e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00b      	beq.n	80094b6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	f003 0310 	and.w	r3, r3, #16
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d006      	beq.n	80094b6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2210      	movs	r2, #16
 80094ae:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f8f6 	bl	80096a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f003 0308 	and.w	r3, r3, #8
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d006      	beq.n	80094d8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	2208      	movs	r2, #8
 80094d0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f8ee 	bl	80096b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80094d8:	6a3b      	ldr	r3, [r7, #32]
 80094da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d075      	beq.n	80095ce <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d06c      	beq.n	80095c6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d008      	beq.n	8009508 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d003      	beq.n	8009508 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009508:	6a3b      	ldr	r3, [r7, #32]
 800950a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800950e:	2b00      	cmp	r3, #0
 8009510:	d008      	beq.n	8009524 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009518:	2b00      	cmp	r3, #0
 800951a:	d003      	beq.n	8009524 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800951c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951e:	f043 0302 	orr.w	r3, r3, #2
 8009522:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009534:	2b00      	cmp	r3, #0
 8009536:	d003      	beq.n	8009540 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800953a:	f043 0304 	orr.w	r3, r3, #4
 800953e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009546:	2b00      	cmp	r3, #0
 8009548:	d03d      	beq.n	80095c6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009550:	2b00      	cmp	r3, #0
 8009552:	d038      	beq.n	80095c6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800955a:	2b30      	cmp	r3, #48	; 0x30
 800955c:	d017      	beq.n	800958e <HAL_CAN_IRQHandler+0x302>
 800955e:	2b30      	cmp	r3, #48	; 0x30
 8009560:	d804      	bhi.n	800956c <HAL_CAN_IRQHandler+0x2e0>
 8009562:	2b10      	cmp	r3, #16
 8009564:	d009      	beq.n	800957a <HAL_CAN_IRQHandler+0x2ee>
 8009566:	2b20      	cmp	r3, #32
 8009568:	d00c      	beq.n	8009584 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800956a:	e024      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800956c:	2b50      	cmp	r3, #80	; 0x50
 800956e:	d018      	beq.n	80095a2 <HAL_CAN_IRQHandler+0x316>
 8009570:	2b60      	cmp	r3, #96	; 0x60
 8009572:	d01b      	beq.n	80095ac <HAL_CAN_IRQHandler+0x320>
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	d00f      	beq.n	8009598 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009578:	e01d      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	f043 0308 	orr.w	r3, r3, #8
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009582:	e018      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009586:	f043 0310 	orr.w	r3, r3, #16
 800958a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800958c:	e013      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800958e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009590:	f043 0320 	orr.w	r3, r3, #32
 8009594:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009596:	e00e      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80095a0:	e009      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80095aa:	e004      	b.n	80095b6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80095b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80095c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2204      	movs	r2, #4
 80095cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d008      	beq.n	80095e6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095da:	431a      	orrs	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 f870 	bl	80096c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80095e6:	bf00      	nop
 80095e8:	3728      	adds	r7, #40	; 0x28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr

08009600 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr

08009612 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009612:	b480      	push	{r7}
 8009614:	b083      	sub	sp, #12
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800961a:	bf00      	nop
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	bc80      	pop	{r7}
 8009622:	4770      	bx	lr

08009624 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800962c:	bf00      	nop
 800962e:	370c      	adds	r7, #12
 8009630:	46bd      	mov	sp, r7
 8009632:	bc80      	pop	{r7}
 8009634:	4770      	bx	lr

08009636 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800963e:	bf00      	nop
 8009640:	370c      	adds	r7, #12
 8009642:	46bd      	mov	sp, r7
 8009644:	bc80      	pop	{r7}
 8009646:	4770      	bx	lr

08009648 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	bc80      	pop	{r7}
 8009658:	4770      	bx	lr

0800965a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8009662:	bf00      	nop
 8009664:	370c      	adds	r7, #12
 8009666:	46bd      	mov	sp, r7
 8009668:	bc80      	pop	{r7}
 800966a:	4770      	bx	lr

0800966c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	bc80      	pop	{r7}
 800967c:	4770      	bx	lr

0800967e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800967e:	b480      	push	{r7}
 8009680:	b083      	sub	sp, #12
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr

08009690 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	bc80      	pop	{r7}
 80096a0:	4770      	bx	lr

080096a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80096a2:	b480      	push	{r7}
 80096a4:	b083      	sub	sp, #12
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80096aa:	bf00      	nop
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bc80      	pop	{r7}
 80096b2:	4770      	bx	lr

080096b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80096bc:	bf00      	nop
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bc80      	pop	{r7}
 80096c4:	4770      	bx	lr

080096c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc80      	pop	{r7}
 80096d6:	4770      	bx	lr

080096d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80096d8:	b480      	push	{r7}
 80096da:	b085      	sub	sp, #20
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f003 0307 	and.w	r3, r3, #7
 80096e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096e8:	4b0c      	ldr	r3, [pc, #48]	; (800971c <__NVIC_SetPriorityGrouping+0x44>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096f4:	4013      	ands	r3, r2
 80096f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800970a:	4a04      	ldr	r2, [pc, #16]	; (800971c <__NVIC_SetPriorityGrouping+0x44>)
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	60d3      	str	r3, [r2, #12]
}
 8009710:	bf00      	nop
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	bc80      	pop	{r7}
 8009718:	4770      	bx	lr
 800971a:	bf00      	nop
 800971c:	e000ed00 	.word	0xe000ed00

08009720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <__NVIC_GetPriorityGrouping+0x18>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	0a1b      	lsrs	r3, r3, #8
 800972a:	f003 0307 	and.w	r3, r3, #7
}
 800972e:	4618      	mov	r0, r3
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	e000ed00 	.word	0xe000ed00

0800973c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	4603      	mov	r3, r0
 8009744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800974a:	2b00      	cmp	r3, #0
 800974c:	db0b      	blt.n	8009766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800974e:	79fb      	ldrb	r3, [r7, #7]
 8009750:	f003 021f 	and.w	r2, r3, #31
 8009754:	4906      	ldr	r1, [pc, #24]	; (8009770 <__NVIC_EnableIRQ+0x34>)
 8009756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800975a:	095b      	lsrs	r3, r3, #5
 800975c:	2001      	movs	r0, #1
 800975e:	fa00 f202 	lsl.w	r2, r0, r2
 8009762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr
 8009770:	e000e100 	.word	0xe000e100

08009774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	4603      	mov	r3, r0
 800977c:	6039      	str	r1, [r7, #0]
 800977e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009784:	2b00      	cmp	r3, #0
 8009786:	db0a      	blt.n	800979e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	b2da      	uxtb	r2, r3
 800978c:	490c      	ldr	r1, [pc, #48]	; (80097c0 <__NVIC_SetPriority+0x4c>)
 800978e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009792:	0112      	lsls	r2, r2, #4
 8009794:	b2d2      	uxtb	r2, r2
 8009796:	440b      	add	r3, r1
 8009798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800979c:	e00a      	b.n	80097b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	4908      	ldr	r1, [pc, #32]	; (80097c4 <__NVIC_SetPriority+0x50>)
 80097a4:	79fb      	ldrb	r3, [r7, #7]
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	3b04      	subs	r3, #4
 80097ac:	0112      	lsls	r2, r2, #4
 80097ae:	b2d2      	uxtb	r2, r2
 80097b0:	440b      	add	r3, r1
 80097b2:	761a      	strb	r2, [r3, #24]
}
 80097b4:	bf00      	nop
 80097b6:	370c      	adds	r7, #12
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bc80      	pop	{r7}
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	e000e100 	.word	0xe000e100
 80097c4:	e000ed00 	.word	0xe000ed00

080097c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b089      	sub	sp, #36	; 0x24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097dc:	69fb      	ldr	r3, [r7, #28]
 80097de:	f1c3 0307 	rsb	r3, r3, #7
 80097e2:	2b04      	cmp	r3, #4
 80097e4:	bf28      	it	cs
 80097e6:	2304      	movcs	r3, #4
 80097e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097ea:	69fb      	ldr	r3, [r7, #28]
 80097ec:	3304      	adds	r3, #4
 80097ee:	2b06      	cmp	r3, #6
 80097f0:	d902      	bls.n	80097f8 <NVIC_EncodePriority+0x30>
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	3b03      	subs	r3, #3
 80097f6:	e000      	b.n	80097fa <NVIC_EncodePriority+0x32>
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	fa02 f303 	lsl.w	r3, r2, r3
 8009806:	43da      	mvns	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	401a      	ands	r2, r3
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009810:	f04f 31ff 	mov.w	r1, #4294967295
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	fa01 f303 	lsl.w	r3, r1, r3
 800981a:	43d9      	mvns	r1, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009820:	4313      	orrs	r3, r2
         );
}
 8009822:	4618      	mov	r0, r3
 8009824:	3724      	adds	r7, #36	; 0x24
 8009826:	46bd      	mov	sp, r7
 8009828:	bc80      	pop	{r7}
 800982a:	4770      	bx	lr

0800982c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3b01      	subs	r3, #1
 8009838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800983c:	d301      	bcc.n	8009842 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800983e:	2301      	movs	r3, #1
 8009840:	e00f      	b.n	8009862 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009842:	4a0a      	ldr	r2, [pc, #40]	; (800986c <SysTick_Config+0x40>)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	3b01      	subs	r3, #1
 8009848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800984a:	210f      	movs	r1, #15
 800984c:	f04f 30ff 	mov.w	r0, #4294967295
 8009850:	f7ff ff90 	bl	8009774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <SysTick_Config+0x40>)
 8009856:	2200      	movs	r2, #0
 8009858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800985a:	4b04      	ldr	r3, [pc, #16]	; (800986c <SysTick_Config+0x40>)
 800985c:	2207      	movs	r2, #7
 800985e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	e000e010 	.word	0xe000e010

08009870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7ff ff2d 	bl	80096d8 <__NVIC_SetPriorityGrouping>
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009886:	b580      	push	{r7, lr}
 8009888:	b086      	sub	sp, #24
 800988a:	af00      	add	r7, sp, #0
 800988c:	4603      	mov	r3, r0
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	607a      	str	r2, [r7, #4]
 8009892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009898:	f7ff ff42 	bl	8009720 <__NVIC_GetPriorityGrouping>
 800989c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	68b9      	ldr	r1, [r7, #8]
 80098a2:	6978      	ldr	r0, [r7, #20]
 80098a4:	f7ff ff90 	bl	80097c8 <NVIC_EncodePriority>
 80098a8:	4602      	mov	r2, r0
 80098aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098ae:	4611      	mov	r1, r2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ff5f 	bl	8009774 <__NVIC_SetPriority>
}
 80098b6:	bf00      	nop
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b082      	sub	sp, #8
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	4603      	mov	r3, r0
 80098c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7ff ff35 	bl	800973c <__NVIC_EnableIRQ>
}
 80098d2:	bf00      	nop
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b082      	sub	sp, #8
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f7ff ffa2 	bl	800982c <SysTick_Config>
 80098e8:	4603      	mov	r3, r0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3708      	adds	r7, #8
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bd80      	pop	{r7, pc}
	...

080098f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b086      	sub	sp, #24
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009900:	f7fe fc9a 	bl	8008238 <HAL_GetTick>
 8009904:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e099      	b.n	8009a44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 0201 	bic.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009930:	e00f      	b.n	8009952 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009932:	f7fe fc81 	bl	8008238 <HAL_GetTick>
 8009936:	4602      	mov	r2, r0
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b05      	cmp	r3, #5
 800993e:	d908      	bls.n	8009952 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2220      	movs	r2, #32
 8009944:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2203      	movs	r2, #3
 800994a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e078      	b.n	8009a44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e8      	bne.n	8009932 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	4b38      	ldr	r3, [pc, #224]	; (8009a4c <HAL_DMA_Init+0x158>)
 800996c:	4013      	ands	r3, r2
 800996e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800997e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800998a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009996:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d107      	bne.n	80099bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b4:	4313      	orrs	r3, r2
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f023 0307 	bic.w	r3, r3, #7
 80099d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	697a      	ldr	r2, [r7, #20]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d117      	bne.n	8009a16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00e      	beq.n	8009a16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fa8f 	bl	8009f1c <DMA_CheckFifoParam>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d008      	beq.n	8009a16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2240      	movs	r2, #64	; 0x40
 8009a08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009a12:	2301      	movs	r3, #1
 8009a14:	e016      	b.n	8009a44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	697a      	ldr	r2, [r7, #20]
 8009a1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fa48 	bl	8009eb4 <DMA_CalcBaseAndBitshift>
 8009a24:	4603      	mov	r3, r0
 8009a26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2c:	223f      	movs	r2, #63	; 0x3f
 8009a2e:	409a      	lsls	r2, r3
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3718      	adds	r7, #24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	f010803f 	.word	0xf010803f

08009a50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	607a      	str	r2, [r7, #4]
 8009a5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_DMA_Start_IT+0x26>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e040      	b.n	8009af8 <HAL_DMA_Start_IT+0xa8>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2201      	movs	r2, #1
 8009a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009a84:	b2db      	uxtb	r3, r3
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d12f      	bne.n	8009aea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f000 f9da 	bl	8009e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa8:	223f      	movs	r2, #63	; 0x3f
 8009aaa:	409a      	lsls	r2, r3
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681a      	ldr	r2, [r3, #0]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f042 0216 	orr.w	r2, r2, #22
 8009abe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0208 	orr.w	r2, r2, #8
 8009ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0201 	orr.w	r2, r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	e005      	b.n	8009af6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2200      	movs	r2, #0
 8009aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009af2:	2302      	movs	r3, #2
 8009af4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d004      	beq.n	8009b1e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2280      	movs	r2, #128	; 0x80
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e00c      	b.n	8009b38 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2205      	movs	r2, #5
 8009b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f022 0201 	bic.w	r2, r2, #1
 8009b34:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bc80      	pop	{r7}
 8009b40:	4770      	bx	lr
	...

08009b44 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b086      	sub	sp, #24
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009b50:	4b92      	ldr	r3, [pc, #584]	; (8009d9c <HAL_DMA_IRQHandler+0x258>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a92      	ldr	r2, [pc, #584]	; (8009da0 <HAL_DMA_IRQHandler+0x25c>)
 8009b56:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5a:	0a9b      	lsrs	r3, r3, #10
 8009b5c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b62:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b6e:	2208      	movs	r2, #8
 8009b70:	409a      	lsls	r2, r3
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4013      	ands	r3, r2
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d01a      	beq.n	8009bb0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d013      	beq.n	8009bb0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f022 0204 	bic.w	r2, r2, #4
 8009b96:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b9c:	2208      	movs	r2, #8
 8009b9e:	409a      	lsls	r2, r3
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba8:	f043 0201 	orr.w	r2, r3, #1
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	409a      	lsls	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4013      	ands	r3, r2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d012      	beq.n	8009be6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	695b      	ldr	r3, [r3, #20]
 8009bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	409a      	lsls	r2, r3
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bde:	f043 0202 	orr.w	r2, r3, #2
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bea:	2204      	movs	r2, #4
 8009bec:	409a      	lsls	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d012      	beq.n	8009c1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d00b      	beq.n	8009c1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c08:	2204      	movs	r2, #4
 8009c0a:	409a      	lsls	r2, r3
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c14:	f043 0204 	orr.w	r2, r3, #4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c20:	2210      	movs	r2, #16
 8009c22:	409a      	lsls	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4013      	ands	r3, r2
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d043      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f003 0308 	and.w	r3, r3, #8
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d03c      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c3e:	2210      	movs	r2, #16
 8009c40:	409a      	lsls	r2, r3
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d018      	beq.n	8009c86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d108      	bne.n	8009c74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d024      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	4798      	blx	r3
 8009c72:	e01f      	b.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01b      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	4798      	blx	r3
 8009c84:	e016      	b.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d107      	bne.n	8009ca4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0208 	bic.w	r2, r2, #8
 8009ca2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb8:	2220      	movs	r2, #32
 8009cba:	409a      	lsls	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 808e 	beq.w	8009de2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 8086 	beq.w	8009de2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cda:	2220      	movs	r2, #32
 8009cdc:	409a      	lsls	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b05      	cmp	r3, #5
 8009cec:	d136      	bne.n	8009d5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0216 	bic.w	r2, r2, #22
 8009cfc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	695a      	ldr	r2, [r3, #20]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d103      	bne.n	8009d1e <HAL_DMA_IRQHandler+0x1da>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f022 0208 	bic.w	r2, r2, #8
 8009d2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d32:	223f      	movs	r2, #63	; 0x3f
 8009d34:	409a      	lsls	r2, r3
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d07d      	beq.n	8009e4e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	4798      	blx	r3
        }
        return;
 8009d5a:	e078      	b.n	8009e4e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d01c      	beq.n	8009da4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d108      	bne.n	8009d8a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d030      	beq.n	8009de2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	4798      	blx	r3
 8009d88:	e02b      	b.n	8009de2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d027      	beq.n	8009de2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	4798      	blx	r3
 8009d9a:	e022      	b.n	8009de2 <HAL_DMA_IRQHandler+0x29e>
 8009d9c:	20000058 	.word	0x20000058
 8009da0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10f      	bne.n	8009dd2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 0210 	bic.w	r2, r2, #16
 8009dc0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2201      	movs	r2, #1
 8009dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d032      	beq.n	8009e50 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d022      	beq.n	8009e3c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2205      	movs	r2, #5
 8009dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	681a      	ldr	r2, [r3, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f022 0201 	bic.w	r2, r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	3301      	adds	r3, #1
 8009e12:	60bb      	str	r3, [r7, #8]
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d307      	bcc.n	8009e2a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f003 0301 	and.w	r3, r3, #1
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d1f2      	bne.n	8009e0e <HAL_DMA_IRQHandler+0x2ca>
 8009e28:	e000      	b.n	8009e2c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009e2a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d005      	beq.n	8009e50 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4798      	blx	r3
 8009e4c:	e000      	b.n	8009e50 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009e4e:	bf00      	nop
    }
  }
}
 8009e50:	3718      	adds	r7, #24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop

08009e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	60f8      	str	r0, [r7, #12]
 8009e60:	60b9      	str	r1, [r7, #8]
 8009e62:	607a      	str	r2, [r7, #4]
 8009e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	683a      	ldr	r2, [r7, #0]
 8009e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	2b40      	cmp	r3, #64	; 0x40
 8009e84:	d108      	bne.n	8009e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68ba      	ldr	r2, [r7, #8]
 8009e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009e96:	e007      	b.n	8009ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68ba      	ldr	r2, [r7, #8]
 8009e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	60da      	str	r2, [r3, #12]
}
 8009ea8:	bf00      	nop
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bc80      	pop	{r7}
 8009eb0:	4770      	bx	lr
	...

08009eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	3b10      	subs	r3, #16
 8009ec4:	4a13      	ldr	r2, [pc, #76]	; (8009f14 <DMA_CalcBaseAndBitshift+0x60>)
 8009ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eca:	091b      	lsrs	r3, r3, #4
 8009ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009ece:	4a12      	ldr	r2, [pc, #72]	; (8009f18 <DMA_CalcBaseAndBitshift+0x64>)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d909      	bls.n	8009ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	1d1a      	adds	r2, r3, #4
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8009ef4:	e007      	b.n	8009f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009efe:	f023 0303 	bic.w	r3, r3, #3
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3714      	adds	r7, #20
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bc80      	pop	{r7}
 8009f12:	4770      	bx	lr
 8009f14:	aaaaaaab 	.word	0xaaaaaaab
 8009f18:	0800fff0 	.word	0x0800fff0

08009f1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b085      	sub	sp, #20
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	699b      	ldr	r3, [r3, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d11f      	bne.n	8009f76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	2b03      	cmp	r3, #3
 8009f3a:	d855      	bhi.n	8009fe8 <DMA_CheckFifoParam+0xcc>
 8009f3c:	a201      	add	r2, pc, #4	; (adr r2, 8009f44 <DMA_CheckFifoParam+0x28>)
 8009f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f42:	bf00      	nop
 8009f44:	08009f55 	.word	0x08009f55
 8009f48:	08009f67 	.word	0x08009f67
 8009f4c:	08009f55 	.word	0x08009f55
 8009f50:	08009fe9 	.word	0x08009fe9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d045      	beq.n	8009fec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f64:	e042      	b.n	8009fec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009f6e:	d13f      	bne.n	8009ff0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009f74:	e03c      	b.n	8009ff0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	699b      	ldr	r3, [r3, #24]
 8009f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f7e:	d121      	bne.n	8009fc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	2b03      	cmp	r3, #3
 8009f84:	d836      	bhi.n	8009ff4 <DMA_CheckFifoParam+0xd8>
 8009f86:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <DMA_CheckFifoParam+0x70>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009f9d 	.word	0x08009f9d
 8009f90:	08009fa3 	.word	0x08009fa3
 8009f94:	08009f9d 	.word	0x08009f9d
 8009f98:	08009fb5 	.word	0x08009fb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa0:	e02f      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d024      	beq.n	8009ff8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009fae:	2301      	movs	r3, #1
 8009fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009fb2:	e021      	b.n	8009ff8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009fbc:	d11e      	bne.n	8009ffc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009fc2:	e01b      	b.n	8009ffc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d902      	bls.n	8009fd0 <DMA_CheckFifoParam+0xb4>
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d003      	beq.n	8009fd6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009fce:	e018      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fd4:	e015      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d00e      	beq.n	800a000 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fe6:	e00b      	b.n	800a000 <DMA_CheckFifoParam+0xe4>
      break;
 8009fe8:	bf00      	nop
 8009fea:	e00a      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      break;
 8009fec:	bf00      	nop
 8009fee:	e008      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      break;
 8009ff0:	bf00      	nop
 8009ff2:	e006      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      break;
 8009ff4:	bf00      	nop
 8009ff6:	e004      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e002      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      break;   
 8009ffc:	bf00      	nop
 8009ffe:	e000      	b.n	800a002 <DMA_CheckFifoParam+0xe6>
      break;
 800a000:	bf00      	nop
    }
  } 
  
  return status; 
 800a002:	7bfb      	ldrb	r3, [r7, #15]
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	bc80      	pop	{r7}
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop

0800a010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a010:	b480      	push	{r7}
 800a012:	b087      	sub	sp, #28
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a01e:	e16f      	b.n	800a300 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	2101      	movs	r1, #1
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	fa01 f303 	lsl.w	r3, r1, r3
 800a02c:	4013      	ands	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 8161 	beq.w	800a2fa <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	2b01      	cmp	r3, #1
 800a03e:	d00b      	beq.n	800a058 <HAL_GPIO_Init+0x48>
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2b02      	cmp	r3, #2
 800a046:	d007      	beq.n	800a058 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a04c:	2b11      	cmp	r3, #17
 800a04e:	d003      	beq.n	800a058 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	2b12      	cmp	r3, #18
 800a056:	d130      	bne.n	800a0ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	005b      	lsls	r3, r3, #1
 800a062:	2203      	movs	r2, #3
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	43db      	mvns	r3, r3
 800a06a:	693a      	ldr	r2, [r7, #16]
 800a06c:	4013      	ands	r3, r2
 800a06e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68da      	ldr	r2, [r3, #12]
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	005b      	lsls	r3, r3, #1
 800a078:	fa02 f303 	lsl.w	r3, r2, r3
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	4313      	orrs	r3, r2
 800a080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	693a      	ldr	r2, [r7, #16]
 800a086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a08e:	2201      	movs	r2, #1
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	fa02 f303 	lsl.w	r3, r2, r3
 800a096:	43db      	mvns	r3, r3
 800a098:	693a      	ldr	r2, [r7, #16]
 800a09a:	4013      	ands	r3, r2
 800a09c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	091b      	lsrs	r3, r3, #4
 800a0a4:	f003 0201 	and.w	r2, r3, #1
 800a0a8:	697b      	ldr	r3, [r7, #20]
 800a0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ae:	693a      	ldr	r2, [r7, #16]
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	2203      	movs	r2, #3
 800a0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ca:	43db      	mvns	r3, r3
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	689a      	ldr	r2, [r3, #8]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	005b      	lsls	r3, r3, #1
 800a0da:	fa02 f303 	lsl.w	r3, r2, r3
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	d003      	beq.n	800a0fa <HAL_GPIO_Init+0xea>
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	2b12      	cmp	r3, #18
 800a0f8:	d123      	bne.n	800a142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	08da      	lsrs	r2, r3, #3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3208      	adds	r2, #8
 800a102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	f003 0307 	and.w	r3, r3, #7
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	220f      	movs	r2, #15
 800a112:	fa02 f303 	lsl.w	r3, r2, r3
 800a116:	43db      	mvns	r3, r3
 800a118:	693a      	ldr	r2, [r7, #16]
 800a11a:	4013      	ands	r3, r2
 800a11c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	691a      	ldr	r2, [r3, #16]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f003 0307 	and.w	r3, r3, #7
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	fa02 f303 	lsl.w	r3, r2, r3
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	4313      	orrs	r3, r2
 800a132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	08da      	lsrs	r2, r3, #3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3208      	adds	r2, #8
 800a13c:	6939      	ldr	r1, [r7, #16]
 800a13e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	005b      	lsls	r3, r3, #1
 800a14c:	2203      	movs	r2, #3
 800a14e:	fa02 f303 	lsl.w	r3, r2, r3
 800a152:	43db      	mvns	r3, r3
 800a154:	693a      	ldr	r2, [r7, #16]
 800a156:	4013      	ands	r3, r2
 800a158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f003 0203 	and.w	r2, r3, #3
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	005b      	lsls	r3, r3, #1
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	4313      	orrs	r3, r2
 800a16e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 80bb 	beq.w	800a2fa <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a184:	2300      	movs	r3, #0
 800a186:	60bb      	str	r3, [r7, #8]
 800a188:	4b64      	ldr	r3, [pc, #400]	; (800a31c <HAL_GPIO_Init+0x30c>)
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	4a63      	ldr	r2, [pc, #396]	; (800a31c <HAL_GPIO_Init+0x30c>)
 800a18e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a192:	6453      	str	r3, [r2, #68]	; 0x44
 800a194:	4b61      	ldr	r3, [pc, #388]	; (800a31c <HAL_GPIO_Init+0x30c>)
 800a196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a19c:	60bb      	str	r3, [r7, #8]
 800a19e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a1a0:	4a5f      	ldr	r2, [pc, #380]	; (800a320 <HAL_GPIO_Init+0x310>)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	089b      	lsrs	r3, r3, #2
 800a1a6:	3302      	adds	r3, #2
 800a1a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f003 0303 	and.w	r3, r3, #3
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	220f      	movs	r2, #15
 800a1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1bc:	43db      	mvns	r3, r3
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	4a57      	ldr	r2, [pc, #348]	; (800a324 <HAL_GPIO_Init+0x314>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d031      	beq.n	800a230 <HAL_GPIO_Init+0x220>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a56      	ldr	r2, [pc, #344]	; (800a328 <HAL_GPIO_Init+0x318>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d02b      	beq.n	800a22c <HAL_GPIO_Init+0x21c>
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a55      	ldr	r2, [pc, #340]	; (800a32c <HAL_GPIO_Init+0x31c>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d025      	beq.n	800a228 <HAL_GPIO_Init+0x218>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a54      	ldr	r2, [pc, #336]	; (800a330 <HAL_GPIO_Init+0x320>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d01f      	beq.n	800a224 <HAL_GPIO_Init+0x214>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	4a53      	ldr	r2, [pc, #332]	; (800a334 <HAL_GPIO_Init+0x324>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d019      	beq.n	800a220 <HAL_GPIO_Init+0x210>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	4a52      	ldr	r2, [pc, #328]	; (800a338 <HAL_GPIO_Init+0x328>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d013      	beq.n	800a21c <HAL_GPIO_Init+0x20c>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a51      	ldr	r2, [pc, #324]	; (800a33c <HAL_GPIO_Init+0x32c>)
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d00d      	beq.n	800a218 <HAL_GPIO_Init+0x208>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	4a50      	ldr	r2, [pc, #320]	; (800a340 <HAL_GPIO_Init+0x330>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d007      	beq.n	800a214 <HAL_GPIO_Init+0x204>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a4f      	ldr	r2, [pc, #316]	; (800a344 <HAL_GPIO_Init+0x334>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d101      	bne.n	800a210 <HAL_GPIO_Init+0x200>
 800a20c:	2308      	movs	r3, #8
 800a20e:	e010      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a210:	2309      	movs	r3, #9
 800a212:	e00e      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a214:	2307      	movs	r3, #7
 800a216:	e00c      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a218:	2306      	movs	r3, #6
 800a21a:	e00a      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a21c:	2305      	movs	r3, #5
 800a21e:	e008      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a220:	2304      	movs	r3, #4
 800a222:	e006      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a224:	2303      	movs	r3, #3
 800a226:	e004      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a228:	2302      	movs	r3, #2
 800a22a:	e002      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <HAL_GPIO_Init+0x222>
 800a230:	2300      	movs	r3, #0
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	f002 0203 	and.w	r2, r2, #3
 800a238:	0092      	lsls	r2, r2, #2
 800a23a:	4093      	lsls	r3, r2
 800a23c:	461a      	mov	r2, r3
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	4313      	orrs	r3, r2
 800a242:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a244:	4936      	ldr	r1, [pc, #216]	; (800a320 <HAL_GPIO_Init+0x310>)
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	089b      	lsrs	r3, r3, #2
 800a24a:	3302      	adds	r3, #2
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a252:	4b3d      	ldr	r3, [pc, #244]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	43db      	mvns	r3, r3
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4013      	ands	r3, r2
 800a260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d003      	beq.n	800a276 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a26e:	693a      	ldr	r2, [r7, #16]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a276:	4a34      	ldr	r2, [pc, #208]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a27c:	4b32      	ldr	r3, [pc, #200]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	43db      	mvns	r3, r3
 800a286:	693a      	ldr	r2, [r7, #16]
 800a288:	4013      	ands	r3, r2
 800a28a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a298:	693a      	ldr	r2, [r7, #16]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a2a6:	4b28      	ldr	r3, [pc, #160]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	43db      	mvns	r3, r3
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d003      	beq.n	800a2ca <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a2ca:	4a1f      	ldr	r2, [pc, #124]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a2d0:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	43db      	mvns	r3, r3
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	4013      	ands	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a2f4:	4a14      	ldr	r2, [pc, #80]	; (800a348 <HAL_GPIO_Init+0x338>)
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	fa22 f303 	lsr.w	r3, r2, r3
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	f47f ae88 	bne.w	800a020 <HAL_GPIO_Init+0x10>
  }
}
 800a310:	bf00      	nop
 800a312:	371c      	adds	r7, #28
 800a314:	46bd      	mov	sp, r7
 800a316:	bc80      	pop	{r7}
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	40023800 	.word	0x40023800
 800a320:	40013800 	.word	0x40013800
 800a324:	40020000 	.word	0x40020000
 800a328:	40020400 	.word	0x40020400
 800a32c:	40020800 	.word	0x40020800
 800a330:	40020c00 	.word	0x40020c00
 800a334:	40021000 	.word	0x40021000
 800a338:	40021400 	.word	0x40021400
 800a33c:	40021800 	.word	0x40021800
 800a340:	40021c00 	.word	0x40021c00
 800a344:	40022000 	.word	0x40022000
 800a348:	40013c00 	.word	0x40013c00

0800a34c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	691a      	ldr	r2, [r3, #16]
 800a35c:	887b      	ldrh	r3, [r7, #2]
 800a35e:	4013      	ands	r3, r2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d002      	beq.n	800a36a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a364:	2301      	movs	r3, #1
 800a366:	73fb      	strb	r3, [r7, #15]
 800a368:	e001      	b.n	800a36e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a36e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a370:	4618      	mov	r0, r3
 800a372:	3714      	adds	r7, #20
 800a374:	46bd      	mov	sp, r7
 800a376:	bc80      	pop	{r7}
 800a378:	4770      	bx	lr

0800a37a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b083      	sub	sp, #12
 800a37e:	af00      	add	r7, sp, #0
 800a380:	6078      	str	r0, [r7, #4]
 800a382:	460b      	mov	r3, r1
 800a384:	807b      	strh	r3, [r7, #2]
 800a386:	4613      	mov	r3, r2
 800a388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a38a:	787b      	ldrb	r3, [r7, #1]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a390:	887a      	ldrh	r2, [r7, #2]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a396:	e003      	b.n	800a3a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a398:	887b      	ldrh	r3, [r7, #2]
 800a39a:	041a      	lsls	r2, r3, #16
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	619a      	str	r2, [r3, #24]
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bc80      	pop	{r7}
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695a      	ldr	r2, [r3, #20]
 800a3ba:	887b      	ldrh	r3, [r7, #2]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d004      	beq.n	800a3cc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a3c2:	887b      	ldrh	r3, [r7, #2]
 800a3c4:	041a      	lsls	r2, r3, #16
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800a3ca:	e002      	b.n	800a3d2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a3cc:	887a      	ldrh	r2, [r7, #2]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	619a      	str	r2, [r3, #24]
}
 800a3d2:	bf00      	nop
 800a3d4:	370c      	adds	r7, #12
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e11f      	b.n	800a62e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d106      	bne.n	800a408 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7fb fe1e 	bl	8006044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2224      	movs	r2, #36	; 0x24
 800a40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 0201 	bic.w	r2, r2, #1
 800a41e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a42e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a43e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a440:	f001 fb20 	bl	800ba84 <HAL_RCC_GetPCLK1Freq>
 800a444:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	4a7b      	ldr	r2, [pc, #492]	; (800a638 <HAL_I2C_Init+0x25c>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d807      	bhi.n	800a460 <HAL_I2C_Init+0x84>
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4a7a      	ldr	r2, [pc, #488]	; (800a63c <HAL_I2C_Init+0x260>)
 800a454:	4293      	cmp	r3, r2
 800a456:	bf94      	ite	ls
 800a458:	2301      	movls	r3, #1
 800a45a:	2300      	movhi	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	e006      	b.n	800a46e <HAL_I2C_Init+0x92>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a77      	ldr	r2, [pc, #476]	; (800a640 <HAL_I2C_Init+0x264>)
 800a464:	4293      	cmp	r3, r2
 800a466:	bf94      	ite	ls
 800a468:	2301      	movls	r3, #1
 800a46a:	2300      	movhi	r3, #0
 800a46c:	b2db      	uxtb	r3, r3
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d001      	beq.n	800a476 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e0db      	b.n	800a62e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	4a72      	ldr	r2, [pc, #456]	; (800a644 <HAL_I2C_Init+0x268>)
 800a47a:	fba2 2303 	umull	r2, r3, r2, r3
 800a47e:	0c9b      	lsrs	r3, r3, #18
 800a480:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	68ba      	ldr	r2, [r7, #8]
 800a492:	430a      	orrs	r2, r1
 800a494:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	4a64      	ldr	r2, [pc, #400]	; (800a638 <HAL_I2C_Init+0x25c>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d802      	bhi.n	800a4b0 <HAL_I2C_Init+0xd4>
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	3301      	adds	r3, #1
 800a4ae:	e009      	b.n	800a4c4 <HAL_I2C_Init+0xe8>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a4b6:	fb02 f303 	mul.w	r3, r2, r3
 800a4ba:	4a63      	ldr	r2, [pc, #396]	; (800a648 <HAL_I2C_Init+0x26c>)
 800a4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a4c0:	099b      	lsrs	r3, r3, #6
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	6812      	ldr	r2, [r2, #0]
 800a4c8:	430b      	orrs	r3, r1
 800a4ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a4d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	4956      	ldr	r1, [pc, #344]	; (800a638 <HAL_I2C_Init+0x25c>)
 800a4e0:	428b      	cmp	r3, r1
 800a4e2:	d80d      	bhi.n	800a500 <HAL_I2C_Init+0x124>
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	1e59      	subs	r1, r3, #1
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	005b      	lsls	r3, r3, #1
 800a4ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4f8:	2b04      	cmp	r3, #4
 800a4fa:	bf38      	it	cc
 800a4fc:	2304      	movcc	r3, #4
 800a4fe:	e04f      	b.n	800a5a0 <HAL_I2C_Init+0x1c4>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d111      	bne.n	800a52c <HAL_I2C_Init+0x150>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	1e58      	subs	r0, r3, #1
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6859      	ldr	r1, [r3, #4]
 800a510:	460b      	mov	r3, r1
 800a512:	005b      	lsls	r3, r3, #1
 800a514:	440b      	add	r3, r1
 800a516:	fbb0 f3f3 	udiv	r3, r0, r3
 800a51a:	3301      	adds	r3, #1
 800a51c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a520:	2b00      	cmp	r3, #0
 800a522:	bf0c      	ite	eq
 800a524:	2301      	moveq	r3, #1
 800a526:	2300      	movne	r3, #0
 800a528:	b2db      	uxtb	r3, r3
 800a52a:	e012      	b.n	800a552 <HAL_I2C_Init+0x176>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	1e58      	subs	r0, r3, #1
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6859      	ldr	r1, [r3, #4]
 800a534:	460b      	mov	r3, r1
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	440b      	add	r3, r1
 800a53a:	0099      	lsls	r1, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a542:	3301      	adds	r3, #1
 800a544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bf0c      	ite	eq
 800a54c:	2301      	moveq	r3, #1
 800a54e:	2300      	movne	r3, #0
 800a550:	b2db      	uxtb	r3, r3
 800a552:	2b00      	cmp	r3, #0
 800a554:	d001      	beq.n	800a55a <HAL_I2C_Init+0x17e>
 800a556:	2301      	movs	r3, #1
 800a558:	e022      	b.n	800a5a0 <HAL_I2C_Init+0x1c4>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10e      	bne.n	800a580 <HAL_I2C_Init+0x1a4>
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1e58      	subs	r0, r3, #1
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6859      	ldr	r1, [r3, #4]
 800a56a:	460b      	mov	r3, r1
 800a56c:	005b      	lsls	r3, r3, #1
 800a56e:	440b      	add	r3, r1
 800a570:	fbb0 f3f3 	udiv	r3, r0, r3
 800a574:	3301      	adds	r3, #1
 800a576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a57a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a57e:	e00f      	b.n	800a5a0 <HAL_I2C_Init+0x1c4>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	1e58      	subs	r0, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6859      	ldr	r1, [r3, #4]
 800a588:	460b      	mov	r3, r1
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	440b      	add	r3, r1
 800a58e:	0099      	lsls	r1, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	fbb0 f3f3 	udiv	r3, r0, r3
 800a596:	3301      	adds	r3, #1
 800a598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a59c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a5a0:	6879      	ldr	r1, [r7, #4]
 800a5a2:	6809      	ldr	r1, [r1, #0]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	69da      	ldr	r2, [r3, #28]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	430a      	orrs	r2, r1
 800a5c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	689b      	ldr	r3, [r3, #8]
 800a5ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a5ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	6911      	ldr	r1, [r2, #16]
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	68d2      	ldr	r2, [r2, #12]
 800a5da:	4311      	orrs	r1, r2
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	6812      	ldr	r2, [r2, #0]
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68db      	ldr	r3, [r3, #12]
 800a5ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	695a      	ldr	r2, [r3, #20]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699b      	ldr	r3, [r3, #24]
 800a5f6:	431a      	orrs	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	430a      	orrs	r2, r1
 800a5fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0201 	orr.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2200      	movs	r2, #0
 800a614:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2200      	movs	r2, #0
 800a628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a62c:	2300      	movs	r3, #0
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3710      	adds	r7, #16
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
 800a636:	bf00      	nop
 800a638:	000186a0 	.word	0x000186a0
 800a63c:	001e847f 	.word	0x001e847f
 800a640:	003d08ff 	.word	0x003d08ff
 800a644:	431bde83 	.word	0x431bde83
 800a648:	10624dd3 	.word	0x10624dd3

0800a64c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b088      	sub	sp, #32
 800a650:	af02      	add	r7, sp, #8
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	461a      	mov	r2, r3
 800a658:	460b      	mov	r3, r1
 800a65a:	817b      	strh	r3, [r7, #10]
 800a65c:	4613      	mov	r3, r2
 800a65e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a660:	f7fd fdea 	bl	8008238 <HAL_GetTick>
 800a664:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b20      	cmp	r3, #32
 800a670:	f040 80e0 	bne.w	800a834 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	2319      	movs	r3, #25
 800a67a:	2201      	movs	r2, #1
 800a67c:	4970      	ldr	r1, [pc, #448]	; (800a840 <HAL_I2C_Master_Transmit+0x1f4>)
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fc20 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a68a:	2302      	movs	r3, #2
 800a68c:	e0d3      	b.n	800a836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a694:	2b01      	cmp	r3, #1
 800a696:	d101      	bne.n	800a69c <HAL_I2C_Master_Transmit+0x50>
 800a698:	2302      	movs	r3, #2
 800a69a:	e0cc      	b.n	800a836 <HAL_I2C_Master_Transmit+0x1ea>
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2201      	movs	r2, #1
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d007      	beq.n	800a6c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f042 0201 	orr.w	r2, r2, #1
 800a6c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2221      	movs	r2, #33	; 0x21
 800a6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2210      	movs	r2, #16
 800a6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	893a      	ldrh	r2, [r7, #8]
 800a6f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	4a50      	ldr	r2, [pc, #320]	; (800a844 <HAL_I2C_Master_Transmit+0x1f8>)
 800a702:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a704:	8979      	ldrh	r1, [r7, #10]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	6a3a      	ldr	r2, [r7, #32]
 800a70a:	68f8      	ldr	r0, [r7, #12]
 800a70c:	f000 fac4 	bl	800ac98 <I2C_MasterRequestWrite>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	d001      	beq.n	800a71a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e08d      	b.n	800a836 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a71a:	2300      	movs	r3, #0
 800a71c:	613b      	str	r3, [r7, #16]
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	695b      	ldr	r3, [r3, #20]
 800a724:	613b      	str	r3, [r7, #16]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	699b      	ldr	r3, [r3, #24]
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a730:	e066      	b.n	800a800 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	6a39      	ldr	r1, [r7, #32]
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f000 fc9a 	bl	800b070 <I2C_WaitOnTXEFlagUntilTimeout>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00d      	beq.n	800a75e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	2b04      	cmp	r3, #4
 800a748:	d107      	bne.n	800a75a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a758:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a75a:	2301      	movs	r3, #1
 800a75c:	e06b      	b.n	800a836 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a762:	781a      	ldrb	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a778:	b29b      	uxth	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a786:	3b01      	subs	r3, #1
 800a788:	b29a      	uxth	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	f003 0304 	and.w	r3, r3, #4
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d11b      	bne.n	800a7d4 <HAL_I2C_Master_Transmit+0x188>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d017      	beq.n	800a7d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a8:	781a      	ldrb	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	3b01      	subs	r3, #1
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	6a39      	ldr	r1, [r7, #32]
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 fc8a 	bl	800b0f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00d      	beq.n	800a800 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e8:	2b04      	cmp	r3, #4
 800a7ea:	d107      	bne.n	800a7fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e01a      	b.n	800a836 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a804:	2b00      	cmp	r3, #0
 800a806:	d194      	bne.n	800a732 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a830:	2300      	movs	r3, #0
 800a832:	e000      	b.n	800a836 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a834:	2302      	movs	r3, #2
  }
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	00100002 	.word	0x00100002
 800a844:	ffff0000 	.word	0xffff0000

0800a848 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af02      	add	r7, sp, #8
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	461a      	mov	r2, r3
 800a856:	4603      	mov	r3, r0
 800a858:	817b      	strh	r3, [r7, #10]
 800a85a:	460b      	mov	r3, r1
 800a85c:	813b      	strh	r3, [r7, #8]
 800a85e:	4613      	mov	r3, r2
 800a860:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a862:	f7fd fce9 	bl	8008238 <HAL_GetTick>
 800a866:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b20      	cmp	r3, #32
 800a872:	f040 80d9 	bne.w	800aa28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	2319      	movs	r3, #25
 800a87c:	2201      	movs	r2, #1
 800a87e:	496d      	ldr	r1, [pc, #436]	; (800aa34 <HAL_I2C_Mem_Write+0x1ec>)
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fb1f 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d001      	beq.n	800a890 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a88c:	2302      	movs	r3, #2
 800a88e:	e0cc      	b.n	800aa2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_I2C_Mem_Write+0x56>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e0c5      	b.n	800aa2a <HAL_I2C_Mem_Write+0x1e2>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f003 0301 	and.w	r3, r3, #1
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d007      	beq.n	800a8c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f042 0201 	orr.w	r2, r2, #1
 800a8c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	681a      	ldr	r2, [r3, #0]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a8d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	2221      	movs	r2, #33	; 0x21
 800a8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2240      	movs	r2, #64	; 0x40
 800a8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6a3a      	ldr	r2, [r7, #32]
 800a8ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	4a4d      	ldr	r2, [pc, #308]	; (800aa38 <HAL_I2C_Mem_Write+0x1f0>)
 800a904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a906:	88f8      	ldrh	r0, [r7, #6]
 800a908:	893a      	ldrh	r2, [r7, #8]
 800a90a:	8979      	ldrh	r1, [r7, #10]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	4603      	mov	r3, r0
 800a916:	68f8      	ldr	r0, [r7, #12]
 800a918:	f000 fa40 	bl	800ad9c <I2C_RequestMemoryWrite>
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d052      	beq.n	800a9c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e081      	b.n	800aa2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a926:	697a      	ldr	r2, [r7, #20]
 800a928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 fba0 	bl	800b070 <I2C_WaitOnTXEFlagUntilTimeout>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d107      	bne.n	800a94e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a94c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e06b      	b.n	800aa2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a96c:	3b01      	subs	r3, #1
 800a96e:	b29a      	uxth	r2, r3
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a978:	b29b      	uxth	r3, r3
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	695b      	ldr	r3, [r3, #20]
 800a988:	f003 0304 	and.w	r3, r3, #4
 800a98c:	2b04      	cmp	r3, #4
 800a98e:	d11b      	bne.n	800a9c8 <HAL_I2C_Mem_Write+0x180>
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a994:	2b00      	cmp	r3, #0
 800a996:	d017      	beq.n	800a9c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99c:	781a      	ldrb	r2, [r3, #0]
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9b2:	3b01      	subs	r3, #1
 800a9b4:	b29a      	uxth	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1aa      	bne.n	800a926 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 fb8c 	bl	800b0f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d00d      	beq.n	800a9fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e4:	2b04      	cmp	r3, #4
 800a9e6:	d107      	bne.n	800a9f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	e016      	b.n	800aa2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2220      	movs	r2, #32
 800aa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aa24:	2300      	movs	r3, #0
 800aa26:	e000      	b.n	800aa2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aa28:	2302      	movs	r3, #2
  }
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3718      	adds	r7, #24
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	00100002 	.word	0x00100002
 800aa38:	ffff0000 	.word	0xffff0000

0800aa3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08a      	sub	sp, #40	; 0x28
 800aa40:	af02      	add	r7, sp, #8
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	607a      	str	r2, [r7, #4]
 800aa46:	603b      	str	r3, [r7, #0]
 800aa48:	460b      	mov	r3, r1
 800aa4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800aa4c:	f7fd fbf4 	bl	8008238 <HAL_GetTick>
 800aa50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800aa52:	2301      	movs	r3, #1
 800aa54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	f040 8110 	bne.w	800ac84 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa64:	69fb      	ldr	r3, [r7, #28]
 800aa66:	9300      	str	r3, [sp, #0]
 800aa68:	2319      	movs	r3, #25
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	4988      	ldr	r1, [pc, #544]	; (800ac90 <HAL_I2C_IsDeviceReady+0x254>)
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f000 fa28 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d001      	beq.n	800aa7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	e103      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d101      	bne.n	800aa8c <HAL_I2C_IsDeviceReady+0x50>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	e0fc      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 0301 	and.w	r3, r3, #1
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d007      	beq.n	800aab2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f042 0201 	orr.w	r2, r2, #1
 800aab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	681a      	ldr	r2, [r3, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2224      	movs	r2, #36	; 0x24
 800aac6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2200      	movs	r2, #0
 800aace:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	4a70      	ldr	r2, [pc, #448]	; (800ac94 <HAL_I2C_IsDeviceReady+0x258>)
 800aad4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aae4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800aae6:	69fb      	ldr	r3, [r7, #28]
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 f9e6 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00c      	beq.n	800ab18 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d003      	beq.n	800ab14 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab12:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e0b6      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab18:	897b      	ldrh	r3, [r7, #10]
 800ab1a:	b2db      	uxtb	r3, r3
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab26:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800ab28:	f7fd fb86 	bl	8008238 <HAL_GetTick>
 800ab2c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	695b      	ldr	r3, [r3, #20]
 800ab34:	f003 0302 	and.w	r3, r3, #2
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	bf0c      	ite	eq
 800ab3c:	2301      	moveq	r3, #1
 800ab3e:	2300      	movne	r3, #0
 800ab40:	b2db      	uxtb	r3, r3
 800ab42:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	695b      	ldr	r3, [r3, #20]
 800ab4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab52:	bf0c      	ite	eq
 800ab54:	2301      	moveq	r3, #1
 800ab56:	2300      	movne	r3, #0
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800ab5c:	e025      	b.n	800abaa <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ab5e:	f7fd fb6b 	bl	8008238 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	69fb      	ldr	r3, [r7, #28]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d302      	bcc.n	800ab74 <HAL_I2C_IsDeviceReady+0x138>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	22a0      	movs	r2, #160	; 0xa0
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	bf0c      	ite	eq
 800ab8a:	2301      	moveq	r3, #1
 800ab8c:	2300      	movne	r3, #0
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aba0:	bf0c      	ite	eq
 800aba2:	2301      	moveq	r3, #1
 800aba4:	2300      	movne	r3, #0
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abb0:	b2db      	uxtb	r3, r3
 800abb2:	2ba0      	cmp	r3, #160	; 0xa0
 800abb4:	d005      	beq.n	800abc2 <HAL_I2C_IsDeviceReady+0x186>
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d102      	bne.n	800abc2 <HAL_I2C_IsDeviceReady+0x186>
 800abbc:	7dbb      	ldrb	r3, [r7, #22]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0cd      	beq.n	800ab5e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2220      	movs	r2, #32
 800abc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	f003 0302 	and.w	r3, r3, #2
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d129      	bne.n	800ac2c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abe6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abe8:	2300      	movs	r3, #0
 800abea:	613b      	str	r3, [r7, #16]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	613b      	str	r3, [r7, #16]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	613b      	str	r3, [r7, #16]
 800abfc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	9300      	str	r3, [sp, #0]
 800ac02:	2319      	movs	r3, #25
 800ac04:	2201      	movs	r2, #1
 800ac06:	4922      	ldr	r1, [pc, #136]	; (800ac90 <HAL_I2C_IsDeviceReady+0x254>)
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f000 f95b 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800ac14:	2301      	movs	r3, #1
 800ac16:	e036      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2220      	movs	r2, #32
 800ac1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	e02c      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac3a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac44:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	2319      	movs	r3, #25
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	4910      	ldr	r1, [pc, #64]	; (800ac90 <HAL_I2C_IsDeviceReady+0x254>)
 800ac50:	68f8      	ldr	r0, [r7, #12]
 800ac52:	f000 f937 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e012      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	3301      	adds	r3, #1
 800ac64:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	f4ff af33 	bcc.w	800aad6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2220      	movs	r2, #32
 800ac74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e000      	b.n	800ac86 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800ac84:	2302      	movs	r3, #2
  }
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3720      	adds	r7, #32
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}
 800ac8e:	bf00      	nop
 800ac90:	00100002 	.word	0x00100002
 800ac94:	ffff0000 	.word	0xffff0000

0800ac98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	607a      	str	r2, [r7, #4]
 800aca2:	603b      	str	r3, [r7, #0]
 800aca4:	460b      	mov	r3, r1
 800aca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d006      	beq.n	800acc2 <I2C_MasterRequestWrite+0x2a>
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d003      	beq.n	800acc2 <I2C_MasterRequestWrite+0x2a>
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800acc0:	d108      	bne.n	800acd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	681a      	ldr	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acd0:	601a      	str	r2, [r3, #0]
 800acd2:	e00b      	b.n	800acec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acd8:	2b12      	cmp	r3, #18
 800acda:	d107      	bne.n	800acec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	681a      	ldr	r2, [r3, #0]
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f8e3 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00c      	beq.n	800ad1e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d003      	beq.n	800ad1a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e035      	b.n	800ad8a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad26:	d108      	bne.n	800ad3a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad28:	897b      	ldrh	r3, [r7, #10]
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad36:	611a      	str	r2, [r3, #16]
 800ad38:	e01b      	b.n	800ad72 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ad3a:	897b      	ldrh	r3, [r7, #10]
 800ad3c:	11db      	asrs	r3, r3, #7
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	f003 0306 	and.w	r3, r3, #6
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	f063 030f 	orn	r3, r3, #15
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	490f      	ldr	r1, [pc, #60]	; (800ad94 <I2C_MasterRequestWrite+0xfc>)
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f90a 	bl	800af72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d001      	beq.n	800ad68 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e010      	b.n	800ad8a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad68:	897b      	ldrh	r3, [r7, #10]
 800ad6a:	b2da      	uxtb	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	4908      	ldr	r1, [pc, #32]	; (800ad98 <I2C_MasterRequestWrite+0x100>)
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 f8fa 	bl	800af72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3718      	adds	r7, #24
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	00010008 	.word	0x00010008
 800ad98:	00010002 	.word	0x00010002

0800ad9c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af02      	add	r7, sp, #8
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	4608      	mov	r0, r1
 800ada6:	4611      	mov	r1, r2
 800ada8:	461a      	mov	r2, r3
 800adaa:	4603      	mov	r3, r0
 800adac:	817b      	strh	r3, [r7, #10]
 800adae:	460b      	mov	r3, r1
 800adb0:	813b      	strh	r3, [r7, #8]
 800adb2:	4613      	mov	r3, r2
 800adb4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adc4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	6a3b      	ldr	r3, [r7, #32]
 800adcc:	2200      	movs	r2, #0
 800adce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800add2:	68f8      	ldr	r0, [r7, #12]
 800add4:	f000 f876 	bl	800aec4 <I2C_WaitOnFlagUntilTimeout>
 800add8:	4603      	mov	r3, r0
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00c      	beq.n	800adf8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f44f 7200 	mov.w	r2, #512	; 0x200
 800adf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e05f      	b.n	800aeb8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adf8:	897b      	ldrh	r3, [r7, #10]
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	461a      	mov	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ae06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	6a3a      	ldr	r2, [r7, #32]
 800ae0c:	492c      	ldr	r1, [pc, #176]	; (800aec0 <I2C_RequestMemoryWrite+0x124>)
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 f8af 	bl	800af72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e04c      	b.n	800aeb8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	695b      	ldr	r3, [r3, #20]
 800ae28:	617b      	str	r3, [r7, #20]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	699b      	ldr	r3, [r3, #24]
 800ae30:	617b      	str	r3, [r7, #20]
 800ae32:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae36:	6a39      	ldr	r1, [r7, #32]
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 f919 	bl	800b070 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00d      	beq.n	800ae60 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d107      	bne.n	800ae5c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	681a      	ldr	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e02b      	b.n	800aeb8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d105      	bne.n	800ae72 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae66:	893b      	ldrh	r3, [r7, #8]
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	611a      	str	r2, [r3, #16]
 800ae70:	e021      	b.n	800aeb6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae72:	893b      	ldrh	r3, [r7, #8]
 800ae74:	0a1b      	lsrs	r3, r3, #8
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae82:	6a39      	ldr	r1, [r7, #32]
 800ae84:	68f8      	ldr	r0, [r7, #12]
 800ae86:	f000 f8f3 	bl	800b070 <I2C_WaitOnTXEFlagUntilTimeout>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00d      	beq.n	800aeac <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d107      	bne.n	800aea8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aea6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	e005      	b.n	800aeb8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aeac:	893b      	ldrh	r3, [r7, #8]
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aeb6:	2300      	movs	r3, #0
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3718      	adds	r7, #24
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	00010002 	.word	0x00010002

0800aec4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	603b      	str	r3, [r7, #0]
 800aed0:	4613      	mov	r3, r2
 800aed2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aed4:	e025      	b.n	800af22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aedc:	d021      	beq.n	800af22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aede:	f7fd f9ab 	bl	8008238 <HAL_GetTick>
 800aee2:	4602      	mov	r2, r0
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	1ad3      	subs	r3, r2, r3
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d302      	bcc.n	800aef4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d116      	bne.n	800af22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	2200      	movs	r2, #0
 800aef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2220      	movs	r2, #32
 800aefe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af0e:	f043 0220 	orr.w	r2, r3, #32
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	e023      	b.n	800af6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	0c1b      	lsrs	r3, r3, #16
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d10d      	bne.n	800af48 <I2C_WaitOnFlagUntilTimeout+0x84>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	43da      	mvns	r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	4013      	ands	r3, r2
 800af38:	b29b      	uxth	r3, r3
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	bf0c      	ite	eq
 800af3e:	2301      	moveq	r3, #1
 800af40:	2300      	movne	r3, #0
 800af42:	b2db      	uxtb	r3, r3
 800af44:	461a      	mov	r2, r3
 800af46:	e00c      	b.n	800af62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	43da      	mvns	r2, r3
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	4013      	ands	r3, r2
 800af54:	b29b      	uxth	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	bf0c      	ite	eq
 800af5a:	2301      	moveq	r3, #1
 800af5c:	2300      	movne	r3, #0
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	461a      	mov	r2, r3
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	429a      	cmp	r2, r3
 800af66:	d0b6      	beq.n	800aed6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	3710      	adds	r7, #16
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	60f8      	str	r0, [r7, #12]
 800af7a:	60b9      	str	r1, [r7, #8]
 800af7c:	607a      	str	r2, [r7, #4]
 800af7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af80:	e051      	b.n	800b026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	695b      	ldr	r3, [r3, #20]
 800af88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af90:	d123      	bne.n	800afda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afa0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800afaa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2220      	movs	r2, #32
 800afb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc6:	f043 0204 	orr.w	r2, r3, #4
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e046      	b.n	800b068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afe0:	d021      	beq.n	800b026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afe2:	f7fd f929 	bl	8008238 <HAL_GetTick>
 800afe6:	4602      	mov	r2, r0
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d302      	bcc.n	800aff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d116      	bne.n	800b026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2220      	movs	r2, #32
 800b002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b012:	f043 0220 	orr.w	r2, r3, #32
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e020      	b.n	800b068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	0c1b      	lsrs	r3, r3, #16
 800b02a:	b2db      	uxtb	r3, r3
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d10c      	bne.n	800b04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	43da      	mvns	r2, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	4013      	ands	r3, r2
 800b03c:	b29b      	uxth	r3, r3
 800b03e:	2b00      	cmp	r3, #0
 800b040:	bf14      	ite	ne
 800b042:	2301      	movne	r3, #1
 800b044:	2300      	moveq	r3, #0
 800b046:	b2db      	uxtb	r3, r3
 800b048:	e00b      	b.n	800b062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	43da      	mvns	r2, r3
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	4013      	ands	r3, r2
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	bf14      	ite	ne
 800b05c:	2301      	movne	r3, #1
 800b05e:	2300      	moveq	r3, #0
 800b060:	b2db      	uxtb	r3, r3
 800b062:	2b00      	cmp	r3, #0
 800b064:	d18d      	bne.n	800af82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b070:	b580      	push	{r7, lr}
 800b072:	b084      	sub	sp, #16
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b07c:	e02d      	b.n	800b0da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 f878 	bl	800b174 <I2C_IsAcknowledgeFailed>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d001      	beq.n	800b08e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e02d      	b.n	800b0ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b094:	d021      	beq.n	800b0da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b096:	f7fd f8cf 	bl	8008238 <HAL_GetTick>
 800b09a:	4602      	mov	r2, r0
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	1ad3      	subs	r3, r2, r3
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d302      	bcc.n	800b0ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d116      	bne.n	800b0da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2220      	movs	r2, #32
 800b0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c6:	f043 0220 	orr.w	r2, r3, #32
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e007      	b.n	800b0ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0e4:	2b80      	cmp	r3, #128	; 0x80
 800b0e6:	d1ca      	bne.n	800b07e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b0fe:	e02d      	b.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f000 f837 	bl	800b174 <I2C_IsAcknowledgeFailed>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e02d      	b.n	800b16c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b116:	d021      	beq.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b118:	f7fd f88e 	bl	8008238 <HAL_GetTick>
 800b11c:	4602      	mov	r2, r0
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	1ad3      	subs	r3, r2, r3
 800b122:	68ba      	ldr	r2, [r7, #8]
 800b124:	429a      	cmp	r2, r3
 800b126:	d302      	bcc.n	800b12e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d116      	bne.n	800b15c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2220      	movs	r2, #32
 800b138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2200      	movs	r2, #0
 800b140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b148:	f043 0220 	orr.w	r2, r3, #32
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e007      	b.n	800b16c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	f003 0304 	and.w	r3, r3, #4
 800b166:	2b04      	cmp	r3, #4
 800b168:	d1ca      	bne.n	800b100 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b16a:	2300      	movs	r3, #0
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b18a:	d11b      	bne.n	800b1c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b194:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2220      	movs	r2, #32
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b0:	f043 0204 	orr.w	r2, r3, #4
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e000      	b.n	800b1c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	370c      	adds	r7, #12
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bc80      	pop	{r7}
 800b1ce:	4770      	bx	lr

0800b1d0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e02b      	b.n	800b23a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800b1ea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f245 5255 	movw	r2, #21845	; 0x5555
 800b1f4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	6852      	ldr	r2, [r2, #4]
 800b1fe:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	687a      	ldr	r2, [r7, #4]
 800b206:	6892      	ldr	r2, [r2, #8]
 800b208:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b20a:	f7fd f815 	bl	8008238 <HAL_GetTick>
 800b20e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != 0x00u)
 800b210:	e008      	b.n	800b224 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b212:	f7fd f811 	bl	8008238 <HAL_GetTick>
 800b216:	4602      	mov	r2, r0
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	1ad3      	subs	r3, r2, r3
 800b21c:	2b30      	cmp	r3, #48	; 0x30
 800b21e:	d901      	bls.n	800b224 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800b220:	2303      	movs	r3, #3
 800b222:	e00a      	b.n	800b23a <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != 0x00u)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68db      	ldr	r3, [r3, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1f1      	bne.n	800b212 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b236:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b242:	b480      	push	{r7}
 800b244:	b083      	sub	sp, #12
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b252:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr

0800b260 <HAL_RCC_OscConfig>:
 800b260:	b580      	push	{r7, lr}
 800b262:	b090      	sub	sp, #64	; 0x40
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d101      	bne.n	800b272 <HAL_RCC_OscConfig+0x12>
 800b26e:	2301      	movs	r3, #1
 800b270:	e253      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d050      	beq.n	800b320 <HAL_RCC_OscConfig+0xc0>
 800b27e:	4ba3      	ldr	r3, [pc, #652]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b280:	689b      	ldr	r3, [r3, #8]
 800b282:	f003 030c 	and.w	r3, r3, #12
 800b286:	2b04      	cmp	r3, #4
 800b288:	d00c      	beq.n	800b2a4 <HAL_RCC_OscConfig+0x44>
 800b28a:	4ba0      	ldr	r3, [pc, #640]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 030c 	and.w	r3, r3, #12
 800b292:	2b08      	cmp	r3, #8
 800b294:	d112      	bne.n	800b2bc <HAL_RCC_OscConfig+0x5c>
 800b296:	4b9d      	ldr	r3, [pc, #628]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b29e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2a2:	d10b      	bne.n	800b2bc <HAL_RCC_OscConfig+0x5c>
 800b2a4:	4b99      	ldr	r3, [pc, #612]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d036      	beq.n	800b31e <HAL_RCC_OscConfig+0xbe>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d132      	bne.n	800b31e <HAL_RCC_OscConfig+0xbe>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e22e      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	4b93      	ldr	r3, [pc, #588]	; (800b510 <HAL_RCC_OscConfig+0x2b0>)
 800b2c2:	b2d2      	uxtb	r2, r2
 800b2c4:	701a      	strb	r2, [r3, #0]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d013      	beq.n	800b2f6 <HAL_RCC_OscConfig+0x96>
 800b2ce:	f7fc ffb3 	bl	8008238 <HAL_GetTick>
 800b2d2:	63b8      	str	r0, [r7, #56]	; 0x38
 800b2d4:	e008      	b.n	800b2e8 <HAL_RCC_OscConfig+0x88>
 800b2d6:	f7fc ffaf 	bl	8008238 <HAL_GetTick>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	2b64      	cmp	r3, #100	; 0x64
 800b2e2:	d901      	bls.n	800b2e8 <HAL_RCC_OscConfig+0x88>
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e218      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b2e8:	4b88      	ldr	r3, [pc, #544]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0f0      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x76>
 800b2f4:	e014      	b.n	800b320 <HAL_RCC_OscConfig+0xc0>
 800b2f6:	f7fc ff9f 	bl	8008238 <HAL_GetTick>
 800b2fa:	63b8      	str	r0, [r7, #56]	; 0x38
 800b2fc:	e008      	b.n	800b310 <HAL_RCC_OscConfig+0xb0>
 800b2fe:	f7fc ff9b 	bl	8008238 <HAL_GetTick>
 800b302:	4602      	mov	r2, r0
 800b304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	2b64      	cmp	r3, #100	; 0x64
 800b30a:	d901      	bls.n	800b310 <HAL_RCC_OscConfig+0xb0>
 800b30c:	2303      	movs	r3, #3
 800b30e:	e204      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b310:	4b7e      	ldr	r3, [pc, #504]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d1f0      	bne.n	800b2fe <HAL_RCC_OscConfig+0x9e>
 800b31c:	e000      	b.n	800b320 <HAL_RCC_OscConfig+0xc0>
 800b31e:	bf00      	nop
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0302 	and.w	r3, r3, #2
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d077      	beq.n	800b41c <HAL_RCC_OscConfig+0x1bc>
 800b32c:	4b77      	ldr	r3, [pc, #476]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f003 030c 	and.w	r3, r3, #12
 800b334:	2b00      	cmp	r3, #0
 800b336:	d00b      	beq.n	800b350 <HAL_RCC_OscConfig+0xf0>
 800b338:	4b74      	ldr	r3, [pc, #464]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	f003 030c 	and.w	r3, r3, #12
 800b340:	2b08      	cmp	r3, #8
 800b342:	d126      	bne.n	800b392 <HAL_RCC_OscConfig+0x132>
 800b344:	4b71      	ldr	r3, [pc, #452]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d120      	bne.n	800b392 <HAL_RCC_OscConfig+0x132>
 800b350:	4b6e      	ldr	r3, [pc, #440]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0302 	and.w	r3, r3, #2
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d005      	beq.n	800b368 <HAL_RCC_OscConfig+0x108>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d001      	beq.n	800b368 <HAL_RCC_OscConfig+0x108>
 800b364:	2301      	movs	r3, #1
 800b366:	e1d8      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b368:	4b68      	ldr	r3, [pc, #416]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	21f8      	movs	r1, #248	; 0xf8
 800b376:	6339      	str	r1, [r7, #48]	; 0x30
 800b378:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b37a:	fa91 f1a1 	rbit	r1, r1
 800b37e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b380:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b382:	fab1 f181 	clz	r1, r1
 800b386:	b2c9      	uxtb	r1, r1
 800b388:	408b      	lsls	r3, r1
 800b38a:	4960      	ldr	r1, [pc, #384]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b38c:	4313      	orrs	r3, r2
 800b38e:	600b      	str	r3, [r1, #0]
 800b390:	e044      	b.n	800b41c <HAL_RCC_OscConfig+0x1bc>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	68db      	ldr	r3, [r3, #12]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d02a      	beq.n	800b3f0 <HAL_RCC_OscConfig+0x190>
 800b39a:	4b5e      	ldr	r3, [pc, #376]	; (800b514 <HAL_RCC_OscConfig+0x2b4>)
 800b39c:	2201      	movs	r2, #1
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	f7fc ff4a 	bl	8008238 <HAL_GetTick>
 800b3a4:	63b8      	str	r0, [r7, #56]	; 0x38
 800b3a6:	e008      	b.n	800b3ba <HAL_RCC_OscConfig+0x15a>
 800b3a8:	f7fc ff46 	bl	8008238 <HAL_GetTick>
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d901      	bls.n	800b3ba <HAL_RCC_OscConfig+0x15a>
 800b3b6:	2303      	movs	r3, #3
 800b3b8:	e1af      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b3ba:	4b54      	ldr	r3, [pc, #336]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0f0      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x148>
 800b3c6:	4b51      	ldr	r3, [pc, #324]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	691b      	ldr	r3, [r3, #16]
 800b3d2:	21f8      	movs	r1, #248	; 0xf8
 800b3d4:	62b9      	str	r1, [r7, #40]	; 0x28
 800b3d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3d8:	fa91 f1a1 	rbit	r1, r1
 800b3dc:	6279      	str	r1, [r7, #36]	; 0x24
 800b3de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b3e0:	fab1 f181 	clz	r1, r1
 800b3e4:	b2c9      	uxtb	r1, r1
 800b3e6:	408b      	lsls	r3, r1
 800b3e8:	4948      	ldr	r1, [pc, #288]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	600b      	str	r3, [r1, #0]
 800b3ee:	e015      	b.n	800b41c <HAL_RCC_OscConfig+0x1bc>
 800b3f0:	4b48      	ldr	r3, [pc, #288]	; (800b514 <HAL_RCC_OscConfig+0x2b4>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]
 800b3f6:	f7fc ff1f 	bl	8008238 <HAL_GetTick>
 800b3fa:	63b8      	str	r0, [r7, #56]	; 0x38
 800b3fc:	e008      	b.n	800b410 <HAL_RCC_OscConfig+0x1b0>
 800b3fe:	f7fc ff1b 	bl	8008238 <HAL_GetTick>
 800b402:	4602      	mov	r2, r0
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	2b02      	cmp	r3, #2
 800b40a:	d901      	bls.n	800b410 <HAL_RCC_OscConfig+0x1b0>
 800b40c:	2303      	movs	r3, #3
 800b40e:	e184      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b410:	4b3e      	ldr	r3, [pc, #248]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 0302 	and.w	r3, r3, #2
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1f0      	bne.n	800b3fe <HAL_RCC_OscConfig+0x19e>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f003 0308 	and.w	r3, r3, #8
 800b424:	2b00      	cmp	r3, #0
 800b426:	d030      	beq.n	800b48a <HAL_RCC_OscConfig+0x22a>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	695b      	ldr	r3, [r3, #20]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d016      	beq.n	800b45e <HAL_RCC_OscConfig+0x1fe>
 800b430:	4b39      	ldr	r3, [pc, #228]	; (800b518 <HAL_RCC_OscConfig+0x2b8>)
 800b432:	2201      	movs	r2, #1
 800b434:	601a      	str	r2, [r3, #0]
 800b436:	f7fc feff 	bl	8008238 <HAL_GetTick>
 800b43a:	63b8      	str	r0, [r7, #56]	; 0x38
 800b43c:	e008      	b.n	800b450 <HAL_RCC_OscConfig+0x1f0>
 800b43e:	f7fc fefb 	bl	8008238 <HAL_GetTick>
 800b442:	4602      	mov	r2, r0
 800b444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b446:	1ad3      	subs	r3, r2, r3
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d901      	bls.n	800b450 <HAL_RCC_OscConfig+0x1f0>
 800b44c:	2303      	movs	r3, #3
 800b44e:	e164      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b450:	4b2e      	ldr	r3, [pc, #184]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b454:	f003 0302 	and.w	r3, r3, #2
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d0f0      	beq.n	800b43e <HAL_RCC_OscConfig+0x1de>
 800b45c:	e015      	b.n	800b48a <HAL_RCC_OscConfig+0x22a>
 800b45e:	4b2e      	ldr	r3, [pc, #184]	; (800b518 <HAL_RCC_OscConfig+0x2b8>)
 800b460:	2200      	movs	r2, #0
 800b462:	601a      	str	r2, [r3, #0]
 800b464:	f7fc fee8 	bl	8008238 <HAL_GetTick>
 800b468:	63b8      	str	r0, [r7, #56]	; 0x38
 800b46a:	e008      	b.n	800b47e <HAL_RCC_OscConfig+0x21e>
 800b46c:	f7fc fee4 	bl	8008238 <HAL_GetTick>
 800b470:	4602      	mov	r2, r0
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	1ad3      	subs	r3, r2, r3
 800b476:	2b02      	cmp	r3, #2
 800b478:	d901      	bls.n	800b47e <HAL_RCC_OscConfig+0x21e>
 800b47a:	2303      	movs	r3, #3
 800b47c:	e14d      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b47e:	4b23      	ldr	r3, [pc, #140]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b482:	f003 0302 	and.w	r3, r3, #2
 800b486:	2b00      	cmp	r3, #0
 800b488:	d1f0      	bne.n	800b46c <HAL_RCC_OscConfig+0x20c>
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0304 	and.w	r3, r3, #4
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 8088 	beq.w	800b5a8 <HAL_RCC_OscConfig+0x348>
 800b498:	2300      	movs	r3, #0
 800b49a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b49e:	4b1b      	ldr	r3, [pc, #108]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d110      	bne.n	800b4cc <HAL_RCC_OscConfig+0x26c>
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	60bb      	str	r3, [r7, #8]
 800b4ae:	4b17      	ldr	r3, [pc, #92]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4b2:	4a16      	ldr	r2, [pc, #88]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b4b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b4ba:	4b14      	ldr	r3, [pc, #80]	; (800b50c <HAL_RCC_OscConfig+0x2ac>)
 800b4bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4c2:	60bb      	str	r3, [r7, #8]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b4cc:	4b13      	ldr	r3, [pc, #76]	; (800b51c <HAL_RCC_OscConfig+0x2bc>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a12      	ldr	r2, [pc, #72]	; (800b51c <HAL_RCC_OscConfig+0x2bc>)
 800b4d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4d6:	6013      	str	r3, [r2, #0]
 800b4d8:	4b10      	ldr	r3, [pc, #64]	; (800b51c <HAL_RCC_OscConfig+0x2bc>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d123      	bne.n	800b52c <HAL_RCC_OscConfig+0x2cc>
 800b4e4:	4b0d      	ldr	r3, [pc, #52]	; (800b51c <HAL_RCC_OscConfig+0x2bc>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a0c      	ldr	r2, [pc, #48]	; (800b51c <HAL_RCC_OscConfig+0x2bc>)
 800b4ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4ee:	6013      	str	r3, [r2, #0]
 800b4f0:	f7fc fea2 	bl	8008238 <HAL_GetTick>
 800b4f4:	63b8      	str	r0, [r7, #56]	; 0x38
 800b4f6:	e013      	b.n	800b520 <HAL_RCC_OscConfig+0x2c0>
 800b4f8:	f7fc fe9e 	bl	8008238 <HAL_GetTick>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d90c      	bls.n	800b520 <HAL_RCC_OscConfig+0x2c0>
 800b506:	2303      	movs	r3, #3
 800b508:	e107      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b50a:	bf00      	nop
 800b50c:	40023800 	.word	0x40023800
 800b510:	40023802 	.word	0x40023802
 800b514:	42470000 	.word	0x42470000
 800b518:	42470e80 	.word	0x42470e80
 800b51c:	40007000 	.word	0x40007000
 800b520:	4b80      	ldr	r3, [pc, #512]	; (800b724 <HAL_RCC_OscConfig+0x4c4>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0e5      	beq.n	800b4f8 <HAL_RCC_OscConfig+0x298>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	4b7d      	ldr	r3, [pc, #500]	; (800b728 <HAL_RCC_OscConfig+0x4c8>)
 800b532:	b2d2      	uxtb	r2, r2
 800b534:	701a      	strb	r2, [r3, #0]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d015      	beq.n	800b56a <HAL_RCC_OscConfig+0x30a>
 800b53e:	f7fc fe7b 	bl	8008238 <HAL_GetTick>
 800b542:	63b8      	str	r0, [r7, #56]	; 0x38
 800b544:	e00a      	b.n	800b55c <HAL_RCC_OscConfig+0x2fc>
 800b546:	f7fc fe77 	bl	8008238 <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	f241 3288 	movw	r2, #5000	; 0x1388
 800b554:	4293      	cmp	r3, r2
 800b556:	d901      	bls.n	800b55c <HAL_RCC_OscConfig+0x2fc>
 800b558:	2303      	movs	r3, #3
 800b55a:	e0de      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b55c:	4b73      	ldr	r3, [pc, #460]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0ee      	beq.n	800b546 <HAL_RCC_OscConfig+0x2e6>
 800b568:	e014      	b.n	800b594 <HAL_RCC_OscConfig+0x334>
 800b56a:	f7fc fe65 	bl	8008238 <HAL_GetTick>
 800b56e:	63b8      	str	r0, [r7, #56]	; 0x38
 800b570:	e00a      	b.n	800b588 <HAL_RCC_OscConfig+0x328>
 800b572:	f7fc fe61 	bl	8008238 <HAL_GetTick>
 800b576:	4602      	mov	r2, r0
 800b578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b580:	4293      	cmp	r3, r2
 800b582:	d901      	bls.n	800b588 <HAL_RCC_OscConfig+0x328>
 800b584:	2303      	movs	r3, #3
 800b586:	e0c8      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b588:	4b68      	ldr	r3, [pc, #416]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b58c:	f003 0302 	and.w	r3, r3, #2
 800b590:	2b00      	cmp	r3, #0
 800b592:	d1ee      	bne.n	800b572 <HAL_RCC_OscConfig+0x312>
 800b594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d105      	bne.n	800b5a8 <HAL_RCC_OscConfig+0x348>
 800b59c:	4b63      	ldr	r3, [pc, #396]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b59e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a0:	4a62      	ldr	r2, [pc, #392]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b5a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5a6:	6413      	str	r3, [r2, #64]	; 0x40
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	699b      	ldr	r3, [r3, #24]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 80b3 	beq.w	800b718 <HAL_RCC_OscConfig+0x4b8>
 800b5b2:	4b5e      	ldr	r3, [pc, #376]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f003 030c 	and.w	r3, r3, #12
 800b5ba:	2b08      	cmp	r3, #8
 800b5bc:	d07d      	beq.n	800b6ba <HAL_RCC_OscConfig+0x45a>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d162      	bne.n	800b68c <HAL_RCC_OscConfig+0x42c>
 800b5c6:	4b5a      	ldr	r3, [pc, #360]	; (800b730 <HAL_RCC_OscConfig+0x4d0>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]
 800b5cc:	f7fc fe34 	bl	8008238 <HAL_GetTick>
 800b5d0:	63b8      	str	r0, [r7, #56]	; 0x38
 800b5d2:	e008      	b.n	800b5e6 <HAL_RCC_OscConfig+0x386>
 800b5d4:	f7fc fe30 	bl	8008238 <HAL_GetTick>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	2b64      	cmp	r3, #100	; 0x64
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_OscConfig+0x386>
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e099      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b5e6:	4b51      	ldr	r3, [pc, #324]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f0      	bne.n	800b5d4 <HAL_RCC_OscConfig+0x374>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	69da      	ldr	r2, [r3, #28]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6a1b      	ldr	r3, [r3, #32]
 800b5fa:	431a      	orrs	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b600:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800b604:	6139      	str	r1, [r7, #16]
 800b606:	6939      	ldr	r1, [r7, #16]
 800b608:	fa91 f1a1 	rbit	r1, r1
 800b60c:	60f9      	str	r1, [r7, #12]
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	fab1 f181 	clz	r1, r1
 800b614:	b2c9      	uxtb	r1, r1
 800b616:	408b      	lsls	r3, r1
 800b618:	431a      	orrs	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	085b      	lsrs	r3, r3, #1
 800b620:	3b01      	subs	r3, #1
 800b622:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800b626:	61b9      	str	r1, [r7, #24]
 800b628:	69b9      	ldr	r1, [r7, #24]
 800b62a:	fa91 f1a1 	rbit	r1, r1
 800b62e:	6179      	str	r1, [r7, #20]
 800b630:	6979      	ldr	r1, [r7, #20]
 800b632:	fab1 f181 	clz	r1, r1
 800b636:	b2c9      	uxtb	r1, r1
 800b638:	408b      	lsls	r3, r1
 800b63a:	431a      	orrs	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b640:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800b644:	6239      	str	r1, [r7, #32]
 800b646:	6a39      	ldr	r1, [r7, #32]
 800b648:	fa91 f1a1 	rbit	r1, r1
 800b64c:	61f9      	str	r1, [r7, #28]
 800b64e:	69f9      	ldr	r1, [r7, #28]
 800b650:	fab1 f181 	clz	r1, r1
 800b654:	b2c9      	uxtb	r1, r1
 800b656:	408b      	lsls	r3, r1
 800b658:	4934      	ldr	r1, [pc, #208]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b65a:	4313      	orrs	r3, r2
 800b65c:	604b      	str	r3, [r1, #4]
 800b65e:	4b34      	ldr	r3, [pc, #208]	; (800b730 <HAL_RCC_OscConfig+0x4d0>)
 800b660:	2201      	movs	r2, #1
 800b662:	601a      	str	r2, [r3, #0]
 800b664:	f7fc fde8 	bl	8008238 <HAL_GetTick>
 800b668:	63b8      	str	r0, [r7, #56]	; 0x38
 800b66a:	e008      	b.n	800b67e <HAL_RCC_OscConfig+0x41e>
 800b66c:	f7fc fde4 	bl	8008238 <HAL_GetTick>
 800b670:	4602      	mov	r2, r0
 800b672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	2b64      	cmp	r3, #100	; 0x64
 800b678:	d901      	bls.n	800b67e <HAL_RCC_OscConfig+0x41e>
 800b67a:	2303      	movs	r3, #3
 800b67c:	e04d      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b67e:	4b2b      	ldr	r3, [pc, #172]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b686:	2b00      	cmp	r3, #0
 800b688:	d0f0      	beq.n	800b66c <HAL_RCC_OscConfig+0x40c>
 800b68a:	e045      	b.n	800b718 <HAL_RCC_OscConfig+0x4b8>
 800b68c:	4b28      	ldr	r3, [pc, #160]	; (800b730 <HAL_RCC_OscConfig+0x4d0>)
 800b68e:	2200      	movs	r2, #0
 800b690:	601a      	str	r2, [r3, #0]
 800b692:	f7fc fdd1 	bl	8008238 <HAL_GetTick>
 800b696:	63b8      	str	r0, [r7, #56]	; 0x38
 800b698:	e008      	b.n	800b6ac <HAL_RCC_OscConfig+0x44c>
 800b69a:	f7fc fdcd 	bl	8008238 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b64      	cmp	r3, #100	; 0x64
 800b6a6:	d901      	bls.n	800b6ac <HAL_RCC_OscConfig+0x44c>
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e036      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b6ac:	4b1f      	ldr	r3, [pc, #124]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d1f0      	bne.n	800b69a <HAL_RCC_OscConfig+0x43a>
 800b6b8:	e02e      	b.n	800b718 <HAL_RCC_OscConfig+0x4b8>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	2b01      	cmp	r3, #1
 800b6c0:	d101      	bne.n	800b6c6 <HAL_RCC_OscConfig+0x466>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	e029      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b6c6:	4b19      	ldr	r3, [pc, #100]	; (800b72c <HAL_RCC_OscConfig+0x4cc>)
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d11c      	bne.n	800b714 <HAL_RCC_OscConfig+0x4b4>
 800b6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6a1b      	ldr	r3, [r3, #32]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d115      	bne.n	800b714 <HAL_RCC_OscConfig+0x4b4>
 800b6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ea:	099b      	lsrs	r3, r3, #6
 800b6ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d10d      	bne.n	800b714 <HAL_RCC_OscConfig+0x4b4>
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b702:	429a      	cmp	r2, r3
 800b704:	d106      	bne.n	800b714 <HAL_RCC_OscConfig+0x4b4>
 800b706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b708:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	429a      	cmp	r2, r3
 800b712:	d001      	beq.n	800b718 <HAL_RCC_OscConfig+0x4b8>
 800b714:	2301      	movs	r3, #1
 800b716:	e000      	b.n	800b71a <HAL_RCC_OscConfig+0x4ba>
 800b718:	2300      	movs	r3, #0
 800b71a:	4618      	mov	r0, r3
 800b71c:	3740      	adds	r7, #64	; 0x40
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	40007000 	.word	0x40007000
 800b728:	40023870 	.word	0x40023870
 800b72c:	40023800 	.word	0x40023800
 800b730:	42470060 	.word	0x42470060

0800b734 <HAL_RCC_ClockConfig>:
 800b734:	b580      	push	{r7, lr}
 800b736:	b086      	sub	sp, #24
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d101      	bne.n	800b748 <HAL_RCC_ClockConfig+0x14>
 800b744:	2301      	movs	r3, #1
 800b746:	e0d2      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b748:	4b6b      	ldr	r3, [pc, #428]	; (800b8f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 030f 	and.w	r3, r3, #15
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d90c      	bls.n	800b770 <HAL_RCC_ClockConfig+0x3c>
 800b756:	4b68      	ldr	r3, [pc, #416]	; (800b8f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b758:	683a      	ldr	r2, [r7, #0]
 800b75a:	b2d2      	uxtb	r2, r2
 800b75c:	701a      	strb	r2, [r3, #0]
 800b75e:	4b66      	ldr	r3, [pc, #408]	; (800b8f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f003 030f 	and.w	r3, r3, #15
 800b766:	683a      	ldr	r2, [r7, #0]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d001      	beq.n	800b770 <HAL_RCC_ClockConfig+0x3c>
 800b76c:	2301      	movs	r3, #1
 800b76e:	e0be      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0302 	and.w	r3, r3, #2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d020      	beq.n	800b7be <HAL_RCC_ClockConfig+0x8a>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0304 	and.w	r3, r3, #4
 800b784:	2b00      	cmp	r3, #0
 800b786:	d005      	beq.n	800b794 <HAL_RCC_ClockConfig+0x60>
 800b788:	4b5c      	ldr	r3, [pc, #368]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	4a5b      	ldr	r2, [pc, #364]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b78e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b792:	6093      	str	r3, [r2, #8]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0308 	and.w	r3, r3, #8
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d005      	beq.n	800b7ac <HAL_RCC_ClockConfig+0x78>
 800b7a0:	4b56      	ldr	r3, [pc, #344]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	4a55      	ldr	r2, [pc, #340]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b7aa:	6093      	str	r3, [r2, #8]
 800b7ac:	4b53      	ldr	r3, [pc, #332]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	4950      	ldr	r1, [pc, #320]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	608b      	str	r3, [r1, #8]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d040      	beq.n	800b84c <HAL_RCC_ClockConfig+0x118>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d107      	bne.n	800b7e2 <HAL_RCC_ClockConfig+0xae>
 800b7d2:	4b4a      	ldr	r3, [pc, #296]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d115      	bne.n	800b80a <HAL_RCC_ClockConfig+0xd6>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e085      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d107      	bne.n	800b7fa <HAL_RCC_ClockConfig+0xc6>
 800b7ea:	4b44      	ldr	r3, [pc, #272]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d109      	bne.n	800b80a <HAL_RCC_ClockConfig+0xd6>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e079      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b7fa:	4b40      	ldr	r3, [pc, #256]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f003 0302 	and.w	r3, r3, #2
 800b802:	2b00      	cmp	r3, #0
 800b804:	d101      	bne.n	800b80a <HAL_RCC_ClockConfig+0xd6>
 800b806:	2301      	movs	r3, #1
 800b808:	e071      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b80a:	4b3c      	ldr	r3, [pc, #240]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	f023 0203 	bic.w	r2, r3, #3
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	4939      	ldr	r1, [pc, #228]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b818:	4313      	orrs	r3, r2
 800b81a:	608b      	str	r3, [r1, #8]
 800b81c:	f7fc fd0c 	bl	8008238 <HAL_GetTick>
 800b820:	6178      	str	r0, [r7, #20]
 800b822:	e00a      	b.n	800b83a <HAL_RCC_ClockConfig+0x106>
 800b824:	f7fc fd08 	bl	8008238 <HAL_GetTick>
 800b828:	4602      	mov	r2, r0
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	1ad3      	subs	r3, r2, r3
 800b82e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b832:	4293      	cmp	r3, r2
 800b834:	d901      	bls.n	800b83a <HAL_RCC_ClockConfig+0x106>
 800b836:	2303      	movs	r3, #3
 800b838:	e059      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b83a:	4b30      	ldr	r3, [pc, #192]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f003 020c 	and.w	r2, r3, #12
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	009b      	lsls	r3, r3, #2
 800b848:	429a      	cmp	r2, r3
 800b84a:	d1eb      	bne.n	800b824 <HAL_RCC_ClockConfig+0xf0>
 800b84c:	4b2a      	ldr	r3, [pc, #168]	; (800b8f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 030f 	and.w	r3, r3, #15
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d20c      	bcs.n	800b874 <HAL_RCC_ClockConfig+0x140>
 800b85a:	4b27      	ldr	r3, [pc, #156]	; (800b8f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	b2d2      	uxtb	r2, r2
 800b860:	701a      	strb	r2, [r3, #0]
 800b862:	4b25      	ldr	r3, [pc, #148]	; (800b8f8 <HAL_RCC_ClockConfig+0x1c4>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d001      	beq.n	800b874 <HAL_RCC_ClockConfig+0x140>
 800b870:	2301      	movs	r3, #1
 800b872:	e03c      	b.n	800b8ee <HAL_RCC_ClockConfig+0x1ba>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0304 	and.w	r3, r3, #4
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d008      	beq.n	800b892 <HAL_RCC_ClockConfig+0x15e>
 800b880:	4b1e      	ldr	r3, [pc, #120]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	491b      	ldr	r1, [pc, #108]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b88e:	4313      	orrs	r3, r2
 800b890:	608b      	str	r3, [r1, #8]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f003 0308 	and.w	r3, r3, #8
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d009      	beq.n	800b8b2 <HAL_RCC_ClockConfig+0x17e>
 800b89e:	4b17      	ldr	r3, [pc, #92]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b8a0:	689b      	ldr	r3, [r3, #8]
 800b8a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	00db      	lsls	r3, r3, #3
 800b8ac:	4913      	ldr	r1, [pc, #76]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	608b      	str	r3, [r1, #8]
 800b8b2:	f000 f82b 	bl	800b90c <HAL_RCC_GetSysClockFreq>
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	4b10      	ldr	r3, [pc, #64]	; (800b8fc <HAL_RCC_ClockConfig+0x1c8>)
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8c0:	22f0      	movs	r2, #240	; 0xf0
 800b8c2:	613a      	str	r2, [r7, #16]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	fa92 f2a2 	rbit	r2, r2
 800b8ca:	60fa      	str	r2, [r7, #12]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	fab2 f282 	clz	r2, r2
 800b8d2:	b2d2      	uxtb	r2, r2
 800b8d4:	40d3      	lsrs	r3, r2
 800b8d6:	4a0a      	ldr	r2, [pc, #40]	; (800b900 <HAL_RCC_ClockConfig+0x1cc>)
 800b8d8:	5cd3      	ldrb	r3, [r2, r3]
 800b8da:	fa21 f303 	lsr.w	r3, r1, r3
 800b8de:	4a09      	ldr	r2, [pc, #36]	; (800b904 <HAL_RCC_ClockConfig+0x1d0>)
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	4b09      	ldr	r3, [pc, #36]	; (800b908 <HAL_RCC_ClockConfig+0x1d4>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fc fc64 	bl	80081b4 <HAL_InitTick>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	40023c00 	.word	0x40023c00
 800b8fc:	40023800 	.word	0x40023800
 800b900:	0800ffd8 	.word	0x0800ffd8
 800b904:	20000058 	.word	0x20000058
 800b908:	2000005c 	.word	0x2000005c

0800b90c <HAL_RCC_GetSysClockFreq>:
 800b90c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	2300      	movs	r3, #0
 800b914:	607b      	str	r3, [r7, #4]
 800b916:	2300      	movs	r3, #0
 800b918:	60fb      	str	r3, [r7, #12]
 800b91a:	2300      	movs	r3, #0
 800b91c:	603b      	str	r3, [r7, #0]
 800b91e:	2300      	movs	r3, #0
 800b920:	60bb      	str	r3, [r7, #8]
 800b922:	4b50      	ldr	r3, [pc, #320]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x158>)
 800b924:	689b      	ldr	r3, [r3, #8]
 800b926:	f003 030c 	and.w	r3, r3, #12
 800b92a:	2b04      	cmp	r3, #4
 800b92c:	d007      	beq.n	800b93e <HAL_RCC_GetSysClockFreq+0x32>
 800b92e:	2b08      	cmp	r3, #8
 800b930:	d008      	beq.n	800b944 <HAL_RCC_GetSysClockFreq+0x38>
 800b932:	2b00      	cmp	r3, #0
 800b934:	f040 808d 	bne.w	800ba52 <HAL_RCC_GetSysClockFreq+0x146>
 800b938:	4b4b      	ldr	r3, [pc, #300]	; (800ba68 <HAL_RCC_GetSysClockFreq+0x15c>)
 800b93a:	60bb      	str	r3, [r7, #8]
 800b93c:	e08c      	b.n	800ba58 <HAL_RCC_GetSysClockFreq+0x14c>
 800b93e:	4b4b      	ldr	r3, [pc, #300]	; (800ba6c <HAL_RCC_GetSysClockFreq+0x160>)
 800b940:	60bb      	str	r3, [r7, #8]
 800b942:	e089      	b.n	800ba58 <HAL_RCC_GetSysClockFreq+0x14c>
 800b944:	4b47      	ldr	r3, [pc, #284]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x158>)
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b94c:	607b      	str	r3, [r7, #4]
 800b94e:	4b45      	ldr	r3, [pc, #276]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x158>)
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d023      	beq.n	800b9a2 <HAL_RCC_GetSysClockFreq+0x96>
 800b95a:	4b42      	ldr	r3, [pc, #264]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x158>)
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	099b      	lsrs	r3, r3, #6
 800b960:	f04f 0400 	mov.w	r4, #0
 800b964:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	ea03 0501 	and.w	r5, r3, r1
 800b970:	ea04 0602 	and.w	r6, r4, r2
 800b974:	4a3d      	ldr	r2, [pc, #244]	; (800ba6c <HAL_RCC_GetSysClockFreq+0x160>)
 800b976:	fb02 f106 	mul.w	r1, r2, r6
 800b97a:	2200      	movs	r2, #0
 800b97c:	fb02 f205 	mul.w	r2, r2, r5
 800b980:	440a      	add	r2, r1
 800b982:	493a      	ldr	r1, [pc, #232]	; (800ba6c <HAL_RCC_GetSysClockFreq+0x160>)
 800b984:	fba5 0101 	umull	r0, r1, r5, r1
 800b988:	1853      	adds	r3, r2, r1
 800b98a:	4619      	mov	r1, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f04f 0400 	mov.w	r4, #0
 800b992:	461a      	mov	r2, r3
 800b994:	4623      	mov	r3, r4
 800b996:	f7f5 fbf7 	bl	8001188 <__aeabi_uldivmod>
 800b99a:	4603      	mov	r3, r0
 800b99c:	460c      	mov	r4, r1
 800b99e:	60fb      	str	r3, [r7, #12]
 800b9a0:	e049      	b.n	800ba36 <HAL_RCC_GetSysClockFreq+0x12a>
 800b9a2:	4b30      	ldr	r3, [pc, #192]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x158>)
 800b9a4:	685b      	ldr	r3, [r3, #4]
 800b9a6:	099b      	lsrs	r3, r3, #6
 800b9a8:	f04f 0400 	mov.w	r4, #0
 800b9ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b9b0:	f04f 0200 	mov.w	r2, #0
 800b9b4:	ea03 0501 	and.w	r5, r3, r1
 800b9b8:	ea04 0602 	and.w	r6, r4, r2
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4632      	mov	r2, r6
 800b9c0:	f04f 0300 	mov.w	r3, #0
 800b9c4:	f04f 0400 	mov.w	r4, #0
 800b9c8:	0154      	lsls	r4, r2, #5
 800b9ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b9ce:	014b      	lsls	r3, r1, #5
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4622      	mov	r2, r4
 800b9d4:	1b49      	subs	r1, r1, r5
 800b9d6:	eb62 0206 	sbc.w	r2, r2, r6
 800b9da:	f04f 0300 	mov.w	r3, #0
 800b9de:	f04f 0400 	mov.w	r4, #0
 800b9e2:	0194      	lsls	r4, r2, #6
 800b9e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b9e8:	018b      	lsls	r3, r1, #6
 800b9ea:	1a5b      	subs	r3, r3, r1
 800b9ec:	eb64 0402 	sbc.w	r4, r4, r2
 800b9f0:	f04f 0100 	mov.w	r1, #0
 800b9f4:	f04f 0200 	mov.w	r2, #0
 800b9f8:	00e2      	lsls	r2, r4, #3
 800b9fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b9fe:	00d9      	lsls	r1, r3, #3
 800ba00:	460b      	mov	r3, r1
 800ba02:	4614      	mov	r4, r2
 800ba04:	195b      	adds	r3, r3, r5
 800ba06:	eb44 0406 	adc.w	r4, r4, r6
 800ba0a:	f04f 0100 	mov.w	r1, #0
 800ba0e:	f04f 0200 	mov.w	r2, #0
 800ba12:	02a2      	lsls	r2, r4, #10
 800ba14:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ba18:	0299      	lsls	r1, r3, #10
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4614      	mov	r4, r2
 800ba1e:	4618      	mov	r0, r3
 800ba20:	4621      	mov	r1, r4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f04f 0400 	mov.w	r4, #0
 800ba28:	461a      	mov	r2, r3
 800ba2a:	4623      	mov	r3, r4
 800ba2c:	f7f5 fbac 	bl	8001188 <__aeabi_uldivmod>
 800ba30:	4603      	mov	r3, r0
 800ba32:	460c      	mov	r4, r1
 800ba34:	60fb      	str	r3, [r7, #12]
 800ba36:	4b0b      	ldr	r3, [pc, #44]	; (800ba64 <HAL_RCC_GetSysClockFreq+0x158>)
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	0c1b      	lsrs	r3, r3, #16
 800ba3c:	f003 0303 	and.w	r3, r3, #3
 800ba40:	3301      	adds	r3, #1
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	603b      	str	r3, [r7, #0]
 800ba46:	68fa      	ldr	r2, [r7, #12]
 800ba48:	683b      	ldr	r3, [r7, #0]
 800ba4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba4e:	60bb      	str	r3, [r7, #8]
 800ba50:	e002      	b.n	800ba58 <HAL_RCC_GetSysClockFreq+0x14c>
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <HAL_RCC_GetSysClockFreq+0x15c>)
 800ba54:	60bb      	str	r3, [r7, #8]
 800ba56:	bf00      	nop
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba62:	bf00      	nop
 800ba64:	40023800 	.word	0x40023800
 800ba68:	00f42400 	.word	0x00f42400
 800ba6c:	017d7840 	.word	0x017d7840

0800ba70 <HAL_RCC_GetHCLKFreq>:
 800ba70:	b480      	push	{r7}
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	4b02      	ldr	r3, [pc, #8]	; (800ba80 <HAL_RCC_GetHCLKFreq+0x10>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bc80      	pop	{r7}
 800ba7e:	4770      	bx	lr
 800ba80:	20000058 	.word	0x20000058

0800ba84 <HAL_RCC_GetPCLK1Freq>:
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	f7ff fff1 	bl	800ba70 <HAL_RCC_GetHCLKFreq>
 800ba8e:	4601      	mov	r1, r0
 800ba90:	4b0b      	ldr	r3, [pc, #44]	; (800bac0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800ba98:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800ba9c:	607a      	str	r2, [r7, #4]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	fa92 f2a2 	rbit	r2, r2
 800baa4:	603a      	str	r2, [r7, #0]
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	fab2 f282 	clz	r2, r2
 800baac:	b2d2      	uxtb	r2, r2
 800baae:	40d3      	lsrs	r3, r2
 800bab0:	4a04      	ldr	r2, [pc, #16]	; (800bac4 <HAL_RCC_GetPCLK1Freq+0x40>)
 800bab2:	5cd3      	ldrb	r3, [r2, r3]
 800bab4:	fa21 f303 	lsr.w	r3, r1, r3
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}
 800bac0:	40023800 	.word	0x40023800
 800bac4:	0800ffe8 	.word	0x0800ffe8

0800bac8 <HAL_RCC_GetPCLK2Freq>:
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	f7ff ffcf 	bl	800ba70 <HAL_RCC_GetHCLKFreq>
 800bad2:	4601      	mov	r1, r0
 800bad4:	4b0b      	ldr	r3, [pc, #44]	; (800bb04 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800badc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800bae0:	607a      	str	r2, [r7, #4]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	fa92 f2a2 	rbit	r2, r2
 800bae8:	603a      	str	r2, [r7, #0]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	fab2 f282 	clz	r2, r2
 800baf0:	b2d2      	uxtb	r2, r2
 800baf2:	40d3      	lsrs	r3, r2
 800baf4:	4a04      	ldr	r2, [pc, #16]	; (800bb08 <HAL_RCC_GetPCLK2Freq+0x40>)
 800baf6:	5cd3      	ldrb	r3, [r2, r3]
 800baf8:	fa21 f303 	lsr.w	r3, r1, r3
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	40023800 	.word	0x40023800
 800bb08:	0800ffe8 	.word	0x0800ffe8

0800bb0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b082      	sub	sp, #8
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	e01d      	b.n	800bb5a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d106      	bne.n	800bb38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7fc f95e 	bl	8007df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	3304      	adds	r3, #4
 800bb48:	4619      	mov	r1, r3
 800bb4a:	4610      	mov	r0, r2
 800bb4c:	f000 fb74 	bl	800c238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b085      	sub	sp, #20
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f003 0307 	and.w	r3, r3, #7
 800bb7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2b06      	cmp	r3, #6
 800bb82:	d007      	beq.n	800bb94 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f042 0201 	orr.w	r2, r2, #1
 800bb92:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3714      	adds	r7, #20
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bc80      	pop	{r7}
 800bba6:	4770      	bx	lr

0800bba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b085      	sub	sp, #20
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0201 	orr.w	r2, r2, #1
 800bbbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f003 0307 	and.w	r3, r3, #7
 800bbca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2b06      	cmp	r3, #6
 800bbd0:	d007      	beq.n	800bbe2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f042 0201 	orr.w	r2, r2, #1
 800bbe0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bc80      	pop	{r7}
 800bbec:	4770      	bx	lr

0800bbee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e01d      	b.n	800bc3c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc06:	b2db      	uxtb	r3, r3
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d106      	bne.n	800bc1a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f815 	bl	800bc44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2202      	movs	r2, #2
 800bc1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	3304      	adds	r3, #4
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	f000 fb03 	bl	800c238 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}

0800bc44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bc80      	pop	{r7}
 800bc54:	4770      	bx	lr
	...

0800bc58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	2201      	movs	r2, #1
 800bc68:	6839      	ldr	r1, [r7, #0]
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f000 fdc4 	bl	800c7f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a15      	ldr	r2, [pc, #84]	; (800bccc <HAL_TIM_PWM_Start+0x74>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d004      	beq.n	800bc84 <HAL_TIM_PWM_Start+0x2c>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a14      	ldr	r2, [pc, #80]	; (800bcd0 <HAL_TIM_PWM_Start+0x78>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d101      	bne.n	800bc88 <HAL_TIM_PWM_Start+0x30>
 800bc84:	2301      	movs	r3, #1
 800bc86:	e000      	b.n	800bc8a <HAL_TIM_PWM_Start+0x32>
 800bc88:	2300      	movs	r3, #0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d007      	beq.n	800bc9e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bc9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	f003 0307 	and.w	r3, r3, #7
 800bca8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2b06      	cmp	r3, #6
 800bcae:	d007      	beq.n	800bcc0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 0201 	orr.w	r2, r2, #1
 800bcbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3710      	adds	r7, #16
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	40010000 	.word	0x40010000
 800bcd0:	40010400 	.word	0x40010400

0800bcd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0302 	and.w	r3, r3, #2
 800bce6:	2b02      	cmp	r3, #2
 800bce8:	d122      	bne.n	800bd30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f003 0302 	and.w	r3, r3, #2
 800bcf4:	2b02      	cmp	r3, #2
 800bcf6:	d11b      	bne.n	800bd30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f06f 0202 	mvn.w	r2, #2
 800bd00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2201      	movs	r2, #1
 800bd06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f003 0303 	and.w	r3, r3, #3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fa73 	bl	800c202 <HAL_TIM_IC_CaptureCallback>
 800bd1c:	e005      	b.n	800bd2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fa66 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fa75 	bl	800c214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	d122      	bne.n	800bd84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f003 0304 	and.w	r3, r3, #4
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d11b      	bne.n	800bd84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f06f 0204 	mvn.w	r2, #4
 800bd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2202      	movs	r2, #2
 800bd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 fa49 	bl	800c202 <HAL_TIM_IC_CaptureCallback>
 800bd70:	e005      	b.n	800bd7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 fa3c 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fa4b 	bl	800c214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0308 	and.w	r3, r3, #8
 800bd8e:	2b08      	cmp	r3, #8
 800bd90:	d122      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f003 0308 	and.w	r3, r3, #8
 800bd9c:	2b08      	cmp	r3, #8
 800bd9e:	d11b      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f06f 0208 	mvn.w	r2, #8
 800bda8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2204      	movs	r2, #4
 800bdae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	f003 0303 	and.w	r3, r3, #3
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 fa1f 	bl	800c202 <HAL_TIM_IC_CaptureCallback>
 800bdc4:	e005      	b.n	800bdd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 fa12 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fa21 	bl	800c214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0310 	and.w	r3, r3, #16
 800bde2:	2b10      	cmp	r3, #16
 800bde4:	d122      	bne.n	800be2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f003 0310 	and.w	r3, r3, #16
 800bdf0:	2b10      	cmp	r3, #16
 800bdf2:	d11b      	bne.n	800be2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f06f 0210 	mvn.w	r2, #16
 800bdfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2208      	movs	r2, #8
 800be02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	69db      	ldr	r3, [r3, #28]
 800be0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 f9f5 	bl	800c202 <HAL_TIM_IC_CaptureCallback>
 800be18:	e005      	b.n	800be26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f000 f9e8 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be20:	6878      	ldr	r0, [r7, #4]
 800be22:	f000 f9f7 	bl	800c214 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2200      	movs	r2, #0
 800be2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b01      	cmp	r3, #1
 800be38:	d10e      	bne.n	800be58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68db      	ldr	r3, [r3, #12]
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b01      	cmp	r3, #1
 800be46:	d107      	bne.n	800be58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f06f 0201 	mvn.w	r2, #1
 800be50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f9c3 	bl	800c1de <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	691b      	ldr	r3, [r3, #16]
 800be5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be62:	2b80      	cmp	r3, #128	; 0x80
 800be64:	d10e      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be70:	2b80      	cmp	r3, #128	; 0x80
 800be72:	d107      	bne.n	800be84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fd7c 	bl	800c97c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be8e:	2b40      	cmp	r3, #64	; 0x40
 800be90:	d10e      	bne.n	800beb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	d107      	bne.n	800beb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 f9bb 	bl	800c226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	f003 0320 	and.w	r3, r3, #32
 800beba:	2b20      	cmp	r3, #32
 800bebc:	d10e      	bne.n	800bedc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	f003 0320 	and.w	r3, r3, #32
 800bec8:	2b20      	cmp	r3, #32
 800beca:	d107      	bne.n	800bedc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f06f 0220 	mvn.w	r2, #32
 800bed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fd47 	bl	800c96a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bedc:	bf00      	nop
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef6:	2b01      	cmp	r3, #1
 800bef8:	d101      	bne.n	800befe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800befa:	2302      	movs	r3, #2
 800befc:	e0b4      	b.n	800c068 <HAL_TIM_PWM_ConfigChannel+0x184>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2201      	movs	r2, #1
 800bf02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b0c      	cmp	r3, #12
 800bf12:	f200 809f 	bhi.w	800c054 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bf16:	a201      	add	r2, pc, #4	; (adr r2, 800bf1c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf1c:	0800bf51 	.word	0x0800bf51
 800bf20:	0800c055 	.word	0x0800c055
 800bf24:	0800c055 	.word	0x0800c055
 800bf28:	0800c055 	.word	0x0800c055
 800bf2c:	0800bf91 	.word	0x0800bf91
 800bf30:	0800c055 	.word	0x0800c055
 800bf34:	0800c055 	.word	0x0800c055
 800bf38:	0800c055 	.word	0x0800c055
 800bf3c:	0800bfd3 	.word	0x0800bfd3
 800bf40:	0800c055 	.word	0x0800c055
 800bf44:	0800c055 	.word	0x0800c055
 800bf48:	0800c055 	.word	0x0800c055
 800bf4c:	0800c013 	.word	0x0800c013
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 fa0c 	bl	800c374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	699a      	ldr	r2, [r3, #24]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f042 0208 	orr.w	r2, r2, #8
 800bf6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0204 	bic.w	r2, r2, #4
 800bf7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6999      	ldr	r1, [r3, #24]
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	691a      	ldr	r2, [r3, #16]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	619a      	str	r2, [r3, #24]
      break;
 800bf8e:	e062      	b.n	800c056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68b9      	ldr	r1, [r7, #8]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fa5c 	bl	800c454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	699a      	ldr	r2, [r3, #24]
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bfaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	699a      	ldr	r2, [r3, #24]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bfba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6999      	ldr	r1, [r3, #24]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	021a      	lsls	r2, r3, #8
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	619a      	str	r2, [r3, #24]
      break;
 800bfd0:	e041      	b.n	800c056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	68b9      	ldr	r1, [r7, #8]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 faaf 	bl	800c53c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	69da      	ldr	r2, [r3, #28]
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f042 0208 	orr.w	r2, r2, #8
 800bfec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69da      	ldr	r2, [r3, #28]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f022 0204 	bic.w	r2, r2, #4
 800bffc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69d9      	ldr	r1, [r3, #28]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	691a      	ldr	r2, [r3, #16]
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	430a      	orrs	r2, r1
 800c00e:	61da      	str	r2, [r3, #28]
      break;
 800c010:	e021      	b.n	800c056 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68b9      	ldr	r1, [r7, #8]
 800c018:	4618      	mov	r0, r3
 800c01a:	f000 fb03 	bl	800c624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	69da      	ldr	r2, [r3, #28]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c02c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	69da      	ldr	r2, [r3, #28]
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c03c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69d9      	ldr	r1, [r3, #28]
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	691b      	ldr	r3, [r3, #16]
 800c048:	021a      	lsls	r2, r3, #8
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	430a      	orrs	r2, r1
 800c050:	61da      	str	r2, [r3, #28]
      break;
 800c052:	e000      	b.n	800c056 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c054:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	2201      	movs	r2, #1
 800c05a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3710      	adds	r7, #16
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c080:	2b01      	cmp	r3, #1
 800c082:	d101      	bne.n	800c088 <HAL_TIM_ConfigClockSource+0x18>
 800c084:	2302      	movs	r3, #2
 800c086:	e0a6      	b.n	800c1d6 <HAL_TIM_ConfigClockSource+0x166>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2201      	movs	r2, #1
 800c08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2202      	movs	r2, #2
 800c094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b40      	cmp	r3, #64	; 0x40
 800c0be:	d067      	beq.n	800c190 <HAL_TIM_ConfigClockSource+0x120>
 800c0c0:	2b40      	cmp	r3, #64	; 0x40
 800c0c2:	d80b      	bhi.n	800c0dc <HAL_TIM_ConfigClockSource+0x6c>
 800c0c4:	2b10      	cmp	r3, #16
 800c0c6:	d073      	beq.n	800c1b0 <HAL_TIM_ConfigClockSource+0x140>
 800c0c8:	2b10      	cmp	r3, #16
 800c0ca:	d802      	bhi.n	800c0d2 <HAL_TIM_ConfigClockSource+0x62>
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d06f      	beq.n	800c1b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c0d0:	e078      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c0d2:	2b20      	cmp	r3, #32
 800c0d4:	d06c      	beq.n	800c1b0 <HAL_TIM_ConfigClockSource+0x140>
 800c0d6:	2b30      	cmp	r3, #48	; 0x30
 800c0d8:	d06a      	beq.n	800c1b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c0da:	e073      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c0dc:	2b70      	cmp	r3, #112	; 0x70
 800c0de:	d00d      	beq.n	800c0fc <HAL_TIM_ConfigClockSource+0x8c>
 800c0e0:	2b70      	cmp	r3, #112	; 0x70
 800c0e2:	d804      	bhi.n	800c0ee <HAL_TIM_ConfigClockSource+0x7e>
 800c0e4:	2b50      	cmp	r3, #80	; 0x50
 800c0e6:	d033      	beq.n	800c150 <HAL_TIM_ConfigClockSource+0xe0>
 800c0e8:	2b60      	cmp	r3, #96	; 0x60
 800c0ea:	d041      	beq.n	800c170 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c0ec:	e06a      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c0ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0f2:	d066      	beq.n	800c1c2 <HAL_TIM_ConfigClockSource+0x152>
 800c0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0f8:	d017      	beq.n	800c12a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c0fa:	e063      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6818      	ldr	r0, [r3, #0]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	6899      	ldr	r1, [r3, #8]
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f000 fb55 	bl	800c7ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689b      	ldr	r3, [r3, #8]
 800c116:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c11e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	68fa      	ldr	r2, [r7, #12]
 800c126:	609a      	str	r2, [r3, #8]
      break;
 800c128:	e04c      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	6899      	ldr	r1, [r3, #8]
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	68db      	ldr	r3, [r3, #12]
 800c13a:	f000 fb3e 	bl	800c7ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c14c:	609a      	str	r2, [r3, #8]
      break;
 800c14e:	e039      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	6859      	ldr	r1, [r3, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	461a      	mov	r2, r3
 800c15e:	f000 fab5 	bl	800c6cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2150      	movs	r1, #80	; 0x50
 800c168:	4618      	mov	r0, r3
 800c16a:	f000 fb0c 	bl	800c786 <TIM_ITRx_SetConfig>
      break;
 800c16e:	e029      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6818      	ldr	r0, [r3, #0]
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	6859      	ldr	r1, [r3, #4]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	461a      	mov	r2, r3
 800c17e:	f000 fad3 	bl	800c728 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2160      	movs	r1, #96	; 0x60
 800c188:	4618      	mov	r0, r3
 800c18a:	f000 fafc 	bl	800c786 <TIM_ITRx_SetConfig>
      break;
 800c18e:	e019      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6818      	ldr	r0, [r3, #0]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	6859      	ldr	r1, [r3, #4]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	461a      	mov	r2, r3
 800c19e:	f000 fa95 	bl	800c6cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2140      	movs	r1, #64	; 0x40
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f000 faec 	bl	800c786 <TIM_ITRx_SetConfig>
      break;
 800c1ae:	e009      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681a      	ldr	r2, [r3, #0]
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f000 fae3 	bl	800c786 <TIM_ITRx_SetConfig>
      break;
 800c1c0:	e000      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c1c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bc80      	pop	{r7}
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bc80      	pop	{r7}
 800c200:	4770      	bx	lr

0800c202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c202:	b480      	push	{r7}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c20a:	bf00      	nop
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bc80      	pop	{r7}
 800c212:	4770      	bx	lr

0800c214 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c214:	b480      	push	{r7}
 800c216:	b083      	sub	sp, #12
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c21c:	bf00      	nop
 800c21e:	370c      	adds	r7, #12
 800c220:	46bd      	mov	sp, r7
 800c222:	bc80      	pop	{r7}
 800c224:	4770      	bx	lr

0800c226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c226:	b480      	push	{r7}
 800c228:	b083      	sub	sp, #12
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c22e:	bf00      	nop
 800c230:	370c      	adds	r7, #12
 800c232:	46bd      	mov	sp, r7
 800c234:	bc80      	pop	{r7}
 800c236:	4770      	bx	lr

0800c238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a3f      	ldr	r2, [pc, #252]	; (800c348 <TIM_Base_SetConfig+0x110>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d013      	beq.n	800c278 <TIM_Base_SetConfig+0x40>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c256:	d00f      	beq.n	800c278 <TIM_Base_SetConfig+0x40>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a3c      	ldr	r2, [pc, #240]	; (800c34c <TIM_Base_SetConfig+0x114>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00b      	beq.n	800c278 <TIM_Base_SetConfig+0x40>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a3b      	ldr	r2, [pc, #236]	; (800c350 <TIM_Base_SetConfig+0x118>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d007      	beq.n	800c278 <TIM_Base_SetConfig+0x40>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a3a      	ldr	r2, [pc, #232]	; (800c354 <TIM_Base_SetConfig+0x11c>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d003      	beq.n	800c278 <TIM_Base_SetConfig+0x40>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a39      	ldr	r2, [pc, #228]	; (800c358 <TIM_Base_SetConfig+0x120>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d108      	bne.n	800c28a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c27e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	68fa      	ldr	r2, [r7, #12]
 800c286:	4313      	orrs	r3, r2
 800c288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a2e      	ldr	r2, [pc, #184]	; (800c348 <TIM_Base_SetConfig+0x110>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d02b      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c298:	d027      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a2b      	ldr	r2, [pc, #172]	; (800c34c <TIM_Base_SetConfig+0x114>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d023      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a2a      	ldr	r2, [pc, #168]	; (800c350 <TIM_Base_SetConfig+0x118>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d01f      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a29      	ldr	r2, [pc, #164]	; (800c354 <TIM_Base_SetConfig+0x11c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d01b      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a28      	ldr	r2, [pc, #160]	; (800c358 <TIM_Base_SetConfig+0x120>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d017      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	4a27      	ldr	r2, [pc, #156]	; (800c35c <TIM_Base_SetConfig+0x124>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d013      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	4a26      	ldr	r2, [pc, #152]	; (800c360 <TIM_Base_SetConfig+0x128>)
 800c2c6:	4293      	cmp	r3, r2
 800c2c8:	d00f      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4a25      	ldr	r2, [pc, #148]	; (800c364 <TIM_Base_SetConfig+0x12c>)
 800c2ce:	4293      	cmp	r3, r2
 800c2d0:	d00b      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	4a24      	ldr	r2, [pc, #144]	; (800c368 <TIM_Base_SetConfig+0x130>)
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d007      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	4a23      	ldr	r2, [pc, #140]	; (800c36c <TIM_Base_SetConfig+0x134>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d003      	beq.n	800c2ea <TIM_Base_SetConfig+0xb2>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	4a22      	ldr	r2, [pc, #136]	; (800c370 <TIM_Base_SetConfig+0x138>)
 800c2e6:	4293      	cmp	r3, r2
 800c2e8:	d108      	bne.n	800c2fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	68db      	ldr	r3, [r3, #12]
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	4313      	orrs	r3, r2
 800c308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	68fa      	ldr	r2, [r7, #12]
 800c30e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	689a      	ldr	r2, [r3, #8]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	4a09      	ldr	r2, [pc, #36]	; (800c348 <TIM_Base_SetConfig+0x110>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d003      	beq.n	800c330 <TIM_Base_SetConfig+0xf8>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4a0b      	ldr	r2, [pc, #44]	; (800c358 <TIM_Base_SetConfig+0x120>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d103      	bne.n	800c338 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	691a      	ldr	r2, [r3, #16]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	615a      	str	r2, [r3, #20]
}
 800c33e:	bf00      	nop
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	bc80      	pop	{r7}
 800c346:	4770      	bx	lr
 800c348:	40010000 	.word	0x40010000
 800c34c:	40000400 	.word	0x40000400
 800c350:	40000800 	.word	0x40000800
 800c354:	40000c00 	.word	0x40000c00
 800c358:	40010400 	.word	0x40010400
 800c35c:	40014000 	.word	0x40014000
 800c360:	40014400 	.word	0x40014400
 800c364:	40014800 	.word	0x40014800
 800c368:	40001800 	.word	0x40001800
 800c36c:	40001c00 	.word	0x40001c00
 800c370:	40002000 	.word	0x40002000

0800c374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c374:	b480      	push	{r7}
 800c376:	b087      	sub	sp, #28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	f023 0201 	bic.w	r2, r3, #1
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6a1b      	ldr	r3, [r3, #32]
 800c38e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f023 0303 	bic.w	r3, r3, #3
 800c3aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	f023 0302 	bic.w	r3, r3, #2
 800c3bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a20      	ldr	r2, [pc, #128]	; (800c44c <TIM_OC1_SetConfig+0xd8>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d003      	beq.n	800c3d8 <TIM_OC1_SetConfig+0x64>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a1f      	ldr	r2, [pc, #124]	; (800c450 <TIM_OC1_SetConfig+0xdc>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d10c      	bne.n	800c3f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f023 0308 	bic.w	r3, r3, #8
 800c3de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	f023 0304 	bic.w	r3, r3, #4
 800c3f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a15      	ldr	r2, [pc, #84]	; (800c44c <TIM_OC1_SetConfig+0xd8>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d003      	beq.n	800c402 <TIM_OC1_SetConfig+0x8e>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a14      	ldr	r2, [pc, #80]	; (800c450 <TIM_OC1_SetConfig+0xdc>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d111      	bne.n	800c426 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	695b      	ldr	r3, [r3, #20]
 800c416:	693a      	ldr	r2, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	699b      	ldr	r3, [r3, #24]
 800c420:	693a      	ldr	r2, [r7, #16]
 800c422:	4313      	orrs	r3, r2
 800c424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	685a      	ldr	r2, [r3, #4]
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	697a      	ldr	r2, [r7, #20]
 800c43e:	621a      	str	r2, [r3, #32]
}
 800c440:	bf00      	nop
 800c442:	371c      	adds	r7, #28
 800c444:	46bd      	mov	sp, r7
 800c446:	bc80      	pop	{r7}
 800c448:	4770      	bx	lr
 800c44a:	bf00      	nop
 800c44c:	40010000 	.word	0x40010000
 800c450:	40010400 	.word	0x40010400

0800c454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	f023 0210 	bic.w	r2, r3, #16
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6a1b      	ldr	r3, [r3, #32]
 800c46e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	699b      	ldr	r3, [r3, #24]
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c48a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	021b      	lsls	r3, r3, #8
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	f023 0320 	bic.w	r3, r3, #32
 800c49e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	011b      	lsls	r3, r3, #4
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a21      	ldr	r2, [pc, #132]	; (800c534 <TIM_OC2_SetConfig+0xe0>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d003      	beq.n	800c4bc <TIM_OC2_SetConfig+0x68>
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	4a20      	ldr	r2, [pc, #128]	; (800c538 <TIM_OC2_SetConfig+0xe4>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d10d      	bne.n	800c4d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	011b      	lsls	r3, r3, #4
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4a16      	ldr	r2, [pc, #88]	; (800c534 <TIM_OC2_SetConfig+0xe0>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d003      	beq.n	800c4e8 <TIM_OC2_SetConfig+0x94>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	4a15      	ldr	r2, [pc, #84]	; (800c538 <TIM_OC2_SetConfig+0xe4>)
 800c4e4:	4293      	cmp	r3, r2
 800c4e6:	d113      	bne.n	800c510 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4e8:	693b      	ldr	r3, [r7, #16]
 800c4ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	693a      	ldr	r2, [r7, #16]
 800c500:	4313      	orrs	r3, r2
 800c502:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	693a      	ldr	r2, [r7, #16]
 800c50c:	4313      	orrs	r3, r2
 800c50e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	693a      	ldr	r2, [r7, #16]
 800c514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	621a      	str	r2, [r3, #32]
}
 800c52a:	bf00      	nop
 800c52c:	371c      	adds	r7, #28
 800c52e:	46bd      	mov	sp, r7
 800c530:	bc80      	pop	{r7}
 800c532:	4770      	bx	lr
 800c534:	40010000 	.word	0x40010000
 800c538:	40010400 	.word	0x40010400

0800c53c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b087      	sub	sp, #28
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	6a1b      	ldr	r3, [r3, #32]
 800c556:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	685b      	ldr	r3, [r3, #4]
 800c55c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	69db      	ldr	r3, [r3, #28]
 800c562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c56a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 0303 	bic.w	r3, r3, #3
 800c572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	68fa      	ldr	r2, [r7, #12]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c584:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	021b      	lsls	r3, r3, #8
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	4313      	orrs	r3, r2
 800c590:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a21      	ldr	r2, [pc, #132]	; (800c61c <TIM_OC3_SetConfig+0xe0>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d003      	beq.n	800c5a2 <TIM_OC3_SetConfig+0x66>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a20      	ldr	r2, [pc, #128]	; (800c620 <TIM_OC3_SetConfig+0xe4>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d10d      	bne.n	800c5be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	68db      	ldr	r3, [r3, #12]
 800c5ae:	021b      	lsls	r3, r3, #8
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a16      	ldr	r2, [pc, #88]	; (800c61c <TIM_OC3_SetConfig+0xe0>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d003      	beq.n	800c5ce <TIM_OC3_SetConfig+0x92>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	4a15      	ldr	r2, [pc, #84]	; (800c620 <TIM_OC3_SetConfig+0xe4>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d113      	bne.n	800c5f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	695b      	ldr	r3, [r3, #20]
 800c5e2:	011b      	lsls	r3, r3, #4
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	011b      	lsls	r3, r3, #4
 800c5f0:	693a      	ldr	r2, [r7, #16]
 800c5f2:	4313      	orrs	r3, r2
 800c5f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	68fa      	ldr	r2, [r7, #12]
 800c600:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	685a      	ldr	r2, [r3, #4]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	697a      	ldr	r2, [r7, #20]
 800c60e:	621a      	str	r2, [r3, #32]
}
 800c610:	bf00      	nop
 800c612:	371c      	adds	r7, #28
 800c614:	46bd      	mov	sp, r7
 800c616:	bc80      	pop	{r7}
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	40010000 	.word	0x40010000
 800c620:	40010400 	.word	0x40010400

0800c624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c624:	b480      	push	{r7}
 800c626:	b087      	sub	sp, #28
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	685b      	ldr	r3, [r3, #4]
 800c644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	69db      	ldr	r3, [r3, #28]
 800c64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	021b      	lsls	r3, r3, #8
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	4313      	orrs	r3, r2
 800c666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c66e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	689b      	ldr	r3, [r3, #8]
 800c674:	031b      	lsls	r3, r3, #12
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	4313      	orrs	r3, r2
 800c67a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a11      	ldr	r2, [pc, #68]	; (800c6c4 <TIM_OC4_SetConfig+0xa0>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d003      	beq.n	800c68c <TIM_OC4_SetConfig+0x68>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a10      	ldr	r2, [pc, #64]	; (800c6c8 <TIM_OC4_SetConfig+0xa4>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d109      	bne.n	800c6a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c692:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	695b      	ldr	r3, [r3, #20]
 800c698:	019b      	lsls	r3, r3, #6
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	697a      	ldr	r2, [r7, #20]
 800c6a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	621a      	str	r2, [r3, #32]
}
 800c6ba:	bf00      	nop
 800c6bc:	371c      	adds	r7, #28
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bc80      	pop	{r7}
 800c6c2:	4770      	bx	lr
 800c6c4:	40010000 	.word	0x40010000
 800c6c8:	40010400 	.word	0x40010400

0800c6cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b087      	sub	sp, #28
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	6a1b      	ldr	r3, [r3, #32]
 800c6dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6a1b      	ldr	r3, [r3, #32]
 800c6e2:	f023 0201 	bic.w	r2, r3, #1
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	699b      	ldr	r3, [r3, #24]
 800c6ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	011b      	lsls	r3, r3, #4
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f023 030a 	bic.w	r3, r3, #10
 800c708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	693a      	ldr	r2, [r7, #16]
 800c716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	621a      	str	r2, [r3, #32]
}
 800c71e:	bf00      	nop
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	bc80      	pop	{r7}
 800c726:	4770      	bx	lr

0800c728 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6a1b      	ldr	r3, [r3, #32]
 800c738:	f023 0210 	bic.w	r2, r3, #16
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	699b      	ldr	r3, [r3, #24]
 800c744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	6a1b      	ldr	r3, [r3, #32]
 800c74a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	031b      	lsls	r3, r3, #12
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	011b      	lsls	r3, r3, #4
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	697a      	ldr	r2, [r7, #20]
 800c774:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	693a      	ldr	r2, [r7, #16]
 800c77a:	621a      	str	r2, [r3, #32]
}
 800c77c:	bf00      	nop
 800c77e:	371c      	adds	r7, #28
 800c780:	46bd      	mov	sp, r7
 800c782:	bc80      	pop	{r7}
 800c784:	4770      	bx	lr

0800c786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c786:	b480      	push	{r7}
 800c788:	b085      	sub	sp, #20
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c79c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c79e:	683a      	ldr	r2, [r7, #0]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	f043 0307 	orr.w	r3, r3, #7
 800c7a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	609a      	str	r2, [r3, #8]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bc80      	pop	{r7}
 800c7b8:	4770      	bx	lr

0800c7ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7ba:	b480      	push	{r7}
 800c7bc:	b087      	sub	sp, #28
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	607a      	str	r2, [r7, #4]
 800c7c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	021a      	lsls	r2, r3, #8
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	431a      	orrs	r2, r3
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	697a      	ldr	r2, [r7, #20]
 800c7e4:	4313      	orrs	r3, r2
 800c7e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	609a      	str	r2, [r3, #8]
}
 800c7ee:	bf00      	nop
 800c7f0:	371c      	adds	r7, #28
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bc80      	pop	{r7}
 800c7f6:	4770      	bx	lr

0800c7f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b087      	sub	sp, #28
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	60b9      	str	r1, [r7, #8]
 800c802:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	f003 031f 	and.w	r3, r3, #31
 800c80a:	2201      	movs	r2, #1
 800c80c:	fa02 f303 	lsl.w	r3, r2, r3
 800c810:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	6a1a      	ldr	r2, [r3, #32]
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	43db      	mvns	r3, r3
 800c81a:	401a      	ands	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	6a1a      	ldr	r2, [r3, #32]
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	f003 031f 	and.w	r3, r3, #31
 800c82a:	6879      	ldr	r1, [r7, #4]
 800c82c:	fa01 f303 	lsl.w	r3, r1, r3
 800c830:	431a      	orrs	r2, r3
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	621a      	str	r2, [r3, #32]
}
 800c836:	bf00      	nop
 800c838:	371c      	adds	r7, #28
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bc80      	pop	{r7}
 800c83e:	4770      	bx	lr

0800c840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c850:	2b01      	cmp	r3, #1
 800c852:	d101      	bne.n	800c858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c854:	2302      	movs	r3, #2
 800c856:	e032      	b.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2202      	movs	r2, #2
 800c864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c87e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	68fa      	ldr	r2, [r7, #12]
 800c886:	4313      	orrs	r3, r2
 800c888:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800c88a:	68bb      	ldr	r3, [r7, #8]
 800c88c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c890:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bc80      	pop	{r7}
 800c8c6:	4770      	bx	lr

0800c8c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d101      	bne.n	800c8e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c8e0:	2302      	movs	r3, #2
 800c8e2:	e03d      	b.n	800c960 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2201      	movs	r2, #1
 800c8e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	4313      	orrs	r3, r2
 800c906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	4313      	orrs	r3, r2
 800c914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4313      	orrs	r3, r2
 800c922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	4313      	orrs	r3, r2
 800c930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	69db      	ldr	r3, [r3, #28]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	bc80      	pop	{r7}
 800c968:	4770      	bx	lr

0800c96a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b083      	sub	sp, #12
 800c96e:	af00      	add	r7, sp, #0
 800c970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c972:	bf00      	nop
 800c974:	370c      	adds	r7, #12
 800c976:	46bd      	mov	sp, r7
 800c978:	bc80      	pop	{r7}
 800c97a:	4770      	bx	lr

0800c97c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	bc80      	pop	{r7}
 800c98c:	4770      	bx	lr

0800c98e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c98e:	b580      	push	{r7, lr}
 800c990:	b082      	sub	sp, #8
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d101      	bne.n	800c9a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c99c:	2301      	movs	r3, #1
 800c99e:	e03f      	b.n	800ca20 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d106      	bne.n	800c9ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f7fb fb23 	bl	8008000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2224      	movs	r2, #36	; 0x24
 800c9be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68da      	ldr	r2, [r3, #12]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c9d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 faa6 	bl	800cf24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	691a      	ldr	r2, [r3, #16]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c9e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	695a      	ldr	r2, [r3, #20]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c9f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ca06:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2220      	movs	r2, #32
 800ca12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2220      	movs	r2, #32
 800ca1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3708      	adds	r7, #8
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	b085      	sub	sp, #20
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	4613      	mov	r3, r2
 800ca34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b20      	cmp	r3, #32
 800ca40:	d130      	bne.n	800caa4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <HAL_UART_Transmit_IT+0x26>
 800ca48:	88fb      	ldrh	r3, [r7, #6]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d101      	bne.n	800ca52 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	e029      	b.n	800caa6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d101      	bne.n	800ca60 <HAL_UART_Transmit_IT+0x38>
 800ca5c:	2302      	movs	r3, #2
 800ca5e:	e022      	b.n	800caa6 <HAL_UART_Transmit_IT+0x7e>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2201      	movs	r2, #1
 800ca64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	88fa      	ldrh	r2, [r7, #6]
 800ca72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	88fa      	ldrh	r2, [r7, #6]
 800ca78:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2221      	movs	r2, #33	; 0x21
 800ca84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	68da      	ldr	r2, [r3, #12]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ca9e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800caa0:	2300      	movs	r3, #0
 800caa2:	e000      	b.n	800caa6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800caa4:	2302      	movs	r3, #2
  }
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3714      	adds	r7, #20
 800caaa:	46bd      	mov	sp, r7
 800caac:	bc80      	pop	{r7}
 800caae:	4770      	bx	lr

0800cab0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	b088      	sub	sp, #32
 800cab4:	af00      	add	r7, sp, #0
 800cab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cad0:	2300      	movs	r3, #0
 800cad2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cad4:	2300      	movs	r3, #0
 800cad6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	f003 030f 	and.w	r3, r3, #15
 800cade:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d10d      	bne.n	800cb02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	f003 0320 	and.w	r3, r3, #32
 800caec:	2b00      	cmp	r3, #0
 800caee:	d008      	beq.n	800cb02 <HAL_UART_IRQHandler+0x52>
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	f003 0320 	and.w	r3, r3, #32
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f991 	bl	800ce22 <UART_Receive_IT>
      return;
 800cb00:	e0d1      	b.n	800cca6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80b0 	beq.w	800cc6a <HAL_UART_IRQHandler+0x1ba>
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f003 0301 	and.w	r3, r3, #1
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d105      	bne.n	800cb20 <HAL_UART_IRQHandler+0x70>
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 80a5 	beq.w	800cc6a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cb20:	69fb      	ldr	r3, [r7, #28]
 800cb22:	f003 0301 	and.w	r3, r3, #1
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00a      	beq.n	800cb40 <HAL_UART_IRQHandler+0x90>
 800cb2a:	69bb      	ldr	r3, [r7, #24]
 800cb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d005      	beq.n	800cb40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb38:	f043 0201 	orr.w	r2, r3, #1
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	f003 0304 	and.w	r3, r3, #4
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00a      	beq.n	800cb60 <HAL_UART_IRQHandler+0xb0>
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	f003 0301 	and.w	r3, r3, #1
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb58:	f043 0202 	orr.w	r2, r3, #2
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	f003 0302 	and.w	r3, r3, #2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <HAL_UART_IRQHandler+0xd0>
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d005      	beq.n	800cb80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb78:	f043 0204 	orr.w	r2, r3, #4
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800cb80:	69fb      	ldr	r3, [r7, #28]
 800cb82:	f003 0308 	and.w	r3, r3, #8
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00f      	beq.n	800cbaa <HAL_UART_IRQHandler+0xfa>
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	f003 0320 	and.w	r3, r3, #32
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d104      	bne.n	800cb9e <HAL_UART_IRQHandler+0xee>
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d005      	beq.n	800cbaa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cba2:	f043 0208 	orr.w	r2, r3, #8
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d078      	beq.n	800cca4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cbb2:	69fb      	ldr	r3, [r7, #28]
 800cbb4:	f003 0320 	and.w	r3, r3, #32
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d007      	beq.n	800cbcc <HAL_UART_IRQHandler+0x11c>
 800cbbc:	69bb      	ldr	r3, [r7, #24]
 800cbbe:	f003 0320 	and.w	r3, r3, #32
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800cbc6:	6878      	ldr	r0, [r7, #4]
 800cbc8:	f000 f92b 	bl	800ce22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd6:	2b40      	cmp	r3, #64	; 0x40
 800cbd8:	bf0c      	ite	eq
 800cbda:	2301      	moveq	r3, #1
 800cbdc:	2300      	movne	r3, #0
 800cbde:	b2db      	uxtb	r3, r3
 800cbe0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbe6:	f003 0308 	and.w	r3, r3, #8
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d102      	bne.n	800cbf4 <HAL_UART_IRQHandler+0x144>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d031      	beq.n	800cc58 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 f876 	bl	800cce6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc04:	2b40      	cmp	r3, #64	; 0x40
 800cc06:	d123      	bne.n	800cc50 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	695a      	ldr	r2, [r3, #20]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc16:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d013      	beq.n	800cc48 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc24:	4a21      	ldr	r2, [pc, #132]	; (800ccac <HAL_UART_IRQHandler+0x1fc>)
 800cc26:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7fc ff67 	bl	8009b00 <HAL_DMA_Abort_IT>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d016      	beq.n	800cc66 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cc42:	4610      	mov	r0, r2
 800cc44:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc46:	e00e      	b.n	800cc66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f843 	bl	800ccd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc4e:	e00a      	b.n	800cc66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	f000 f83f 	bl	800ccd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc56:	e006      	b.n	800cc66 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 f83b 	bl	800ccd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800cc64:	e01e      	b.n	800cca4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc66:	bf00      	nop
    return;
 800cc68:	e01c      	b.n	800cca4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cc6a:	69fb      	ldr	r3, [r7, #28]
 800cc6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d008      	beq.n	800cc86 <HAL_UART_IRQHandler+0x1d6>
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d003      	beq.n	800cc86 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 f862 	bl	800cd48 <UART_Transmit_IT>
    return;
 800cc84:	e00f      	b.n	800cca6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <HAL_UART_IRQHandler+0x1f6>
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d005      	beq.n	800cca6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 f8a9 	bl	800cdf2 <UART_EndTransmit_IT>
    return;
 800cca0:	bf00      	nop
 800cca2:	e000      	b.n	800cca6 <HAL_UART_IRQHandler+0x1f6>
    return;
 800cca4:	bf00      	nop
  }
}
 800cca6:	3720      	adds	r7, #32
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	0800cd21 	.word	0x0800cd21

0800ccb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ccb8:	bf00      	nop
 800ccba:	370c      	adds	r7, #12
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bc80      	pop	{r7}
 800ccc0:	4770      	bx	lr

0800ccc2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ccc2:	b480      	push	{r7}
 800ccc4:	b083      	sub	sp, #12
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ccca:	bf00      	nop
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bc80      	pop	{r7}
 800ccd2:	4770      	bx	lr

0800ccd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ccdc:	bf00      	nop
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bc80      	pop	{r7}
 800cce4:	4770      	bx	lr

0800cce6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cce6:	b480      	push	{r7}
 800cce8:	b083      	sub	sp, #12
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	68da      	ldr	r2, [r3, #12]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ccfc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	695a      	ldr	r2, [r3, #20]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	f022 0201 	bic.w	r2, r2, #1
 800cd0c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2220      	movs	r2, #32
 800cd12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800cd16:	bf00      	nop
 800cd18:	370c      	adds	r7, #12
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bc80      	pop	{r7}
 800cd1e:	4770      	bx	lr

0800cd20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2200      	movs	r2, #0
 800cd38:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cd3a:	68f8      	ldr	r0, [r7, #12]
 800cd3c:	f7ff ffca 	bl	800ccd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cd40:	bf00      	nop
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	2b21      	cmp	r3, #33	; 0x21
 800cd5a:	d144      	bne.n	800cde6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd64:	d11a      	bne.n	800cd9c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	461a      	mov	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd7a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d105      	bne.n	800cd90 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6a1b      	ldr	r3, [r3, #32]
 800cd88:	1c9a      	adds	r2, r3, #2
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	621a      	str	r2, [r3, #32]
 800cd8e:	e00e      	b.n	800cdae <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	1c5a      	adds	r2, r3, #1
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	621a      	str	r2, [r3, #32]
 800cd9a:	e008      	b.n	800cdae <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a1b      	ldr	r3, [r3, #32]
 800cda0:	1c59      	adds	r1, r3, #1
 800cda2:	687a      	ldr	r2, [r7, #4]
 800cda4:	6211      	str	r1, [r2, #32]
 800cda6:	781a      	ldrb	r2, [r3, #0]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	4619      	mov	r1, r3
 800cdbc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d10f      	bne.n	800cde2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	68da      	ldr	r2, [r3, #12]
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdd0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68da      	ldr	r2, [r3, #12]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cde0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cde2:	2300      	movs	r3, #0
 800cde4:	e000      	b.n	800cde8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cde6:	2302      	movs	r3, #2
  }
}
 800cde8:	4618      	mov	r0, r3
 800cdea:	3714      	adds	r7, #20
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bc80      	pop	{r7}
 800cdf0:	4770      	bx	lr

0800cdf2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b082      	sub	sp, #8
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	68da      	ldr	r2, [r3, #12]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7ff ff4c 	bl	800ccb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3708      	adds	r7, #8
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	2b22      	cmp	r3, #34	; 0x22
 800ce34:	d171      	bne.n	800cf1a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce3e:	d123      	bne.n	800ce88 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce44:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	691b      	ldr	r3, [r3, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10e      	bne.n	800ce6c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce64:	1c9a      	adds	r2, r3, #2
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	629a      	str	r2, [r3, #40]	; 0x28
 800ce6a:	e029      	b.n	800cec0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	b2db      	uxtb	r3, r3
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce80:	1c5a      	adds	r2, r3, #1
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	629a      	str	r2, [r3, #40]	; 0x28
 800ce86:	e01b      	b.n	800cec0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	691b      	ldr	r3, [r3, #16]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10a      	bne.n	800cea6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	6858      	ldr	r0, [r3, #4]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce9a:	1c59      	adds	r1, r3, #1
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	6291      	str	r1, [r2, #40]	; 0x28
 800cea0:	b2c2      	uxtb	r2, r0
 800cea2:	701a      	strb	r2, [r3, #0]
 800cea4:	e00c      	b.n	800cec0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceb2:	1c58      	adds	r0, r3, #1
 800ceb4:	6879      	ldr	r1, [r7, #4]
 800ceb6:	6288      	str	r0, [r1, #40]	; 0x28
 800ceb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cebc:	b2d2      	uxtb	r2, r2
 800cebe:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	3b01      	subs	r3, #1
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	4619      	mov	r1, r3
 800cece:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d120      	bne.n	800cf16 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	68da      	ldr	r2, [r3, #12]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f022 0220 	bic.w	r2, r2, #32
 800cee2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	68da      	ldr	r2, [r3, #12]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cef2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	695a      	ldr	r2, [r3, #20]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	f022 0201 	bic.w	r2, r2, #1
 800cf02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2220      	movs	r2, #32
 800cf08:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff fed8 	bl	800ccc2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	e002      	b.n	800cf1c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800cf16:	2300      	movs	r3, #0
 800cf18:	e000      	b.n	800cf1c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800cf1a:	2302      	movs	r3, #2
  }
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	68da      	ldr	r2, [r3, #12]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	430a      	orrs	r2, r1
 800cf40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	689a      	ldr	r2, [r3, #8]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	431a      	orrs	r2, r3
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	431a      	orrs	r2, r3
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	69db      	ldr	r3, [r3, #28]
 800cf56:	4313      	orrs	r3, r2
 800cf58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800cf64:	f023 030c 	bic.w	r3, r3, #12
 800cf68:	687a      	ldr	r2, [r7, #4]
 800cf6a:	6812      	ldr	r2, [r2, #0]
 800cf6c:	68f9      	ldr	r1, [r7, #12]
 800cf6e:	430b      	orrs	r3, r1
 800cf70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	695b      	ldr	r3, [r3, #20]
 800cf78:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	699a      	ldr	r2, [r3, #24]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	430a      	orrs	r2, r1
 800cf86:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	69db      	ldr	r3, [r3, #28]
 800cf8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf90:	f040 80aa 	bne.w	800d0e8 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	4aa9      	ldr	r2, [pc, #676]	; (800d240 <UART_SetConfig+0x31c>)
 800cf9a:	4293      	cmp	r3, r2
 800cf9c:	d004      	beq.n	800cfa8 <UART_SetConfig+0x84>
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	4aa8      	ldr	r2, [pc, #672]	; (800d244 <UART_SetConfig+0x320>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d14f      	bne.n	800d048 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cfa8:	f7fe fd8e 	bl	800bac8 <HAL_RCC_GetPCLK2Freq>
 800cfac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cfae:	68ba      	ldr	r2, [r7, #8]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	009a      	lsls	r2, r3, #2
 800cfb8:	441a      	add	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	005b      	lsls	r3, r3, #1
 800cfc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc4:	4aa0      	ldr	r2, [pc, #640]	; (800d248 <UART_SetConfig+0x324>)
 800cfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfca:	095b      	lsrs	r3, r3, #5
 800cfcc:	0119      	lsls	r1, r3, #4
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	009a      	lsls	r2, r3, #2
 800cfd8:	441a      	add	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	685b      	ldr	r3, [r3, #4]
 800cfde:	005b      	lsls	r3, r3, #1
 800cfe0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfe4:	4b98      	ldr	r3, [pc, #608]	; (800d248 <UART_SetConfig+0x324>)
 800cfe6:	fba3 0302 	umull	r0, r3, r3, r2
 800cfea:	095b      	lsrs	r3, r3, #5
 800cfec:	2064      	movs	r0, #100	; 0x64
 800cfee:	fb00 f303 	mul.w	r3, r0, r3
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	3332      	adds	r3, #50	; 0x32
 800cff8:	4a93      	ldr	r2, [pc, #588]	; (800d248 <UART_SetConfig+0x324>)
 800cffa:	fba2 2303 	umull	r2, r3, r2, r3
 800cffe:	095b      	lsrs	r3, r3, #5
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d006:	4419      	add	r1, r3
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009a      	lsls	r2, r3, #2
 800d012:	441a      	add	r2, r3
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d01e:	4b8a      	ldr	r3, [pc, #552]	; (800d248 <UART_SetConfig+0x324>)
 800d020:	fba3 0302 	umull	r0, r3, r3, r2
 800d024:	095b      	lsrs	r3, r3, #5
 800d026:	2064      	movs	r0, #100	; 0x64
 800d028:	fb00 f303 	mul.w	r3, r0, r3
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	00db      	lsls	r3, r3, #3
 800d030:	3332      	adds	r3, #50	; 0x32
 800d032:	4a85      	ldr	r2, [pc, #532]	; (800d248 <UART_SetConfig+0x324>)
 800d034:	fba2 2303 	umull	r2, r3, r2, r3
 800d038:	095b      	lsrs	r3, r3, #5
 800d03a:	f003 0207 	and.w	r2, r3, #7
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	440a      	add	r2, r1
 800d044:	609a      	str	r2, [r3, #8]
 800d046:	e0f7      	b.n	800d238 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d048:	f7fe fd1c 	bl	800ba84 <HAL_RCC_GetPCLK1Freq>
 800d04c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009a      	lsls	r2, r3, #2
 800d058:	441a      	add	r2, r3
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	005b      	lsls	r3, r3, #1
 800d060:	fbb2 f3f3 	udiv	r3, r2, r3
 800d064:	4a78      	ldr	r2, [pc, #480]	; (800d248 <UART_SetConfig+0x324>)
 800d066:	fba2 2303 	umull	r2, r3, r2, r3
 800d06a:	095b      	lsrs	r3, r3, #5
 800d06c:	0119      	lsls	r1, r3, #4
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	4613      	mov	r3, r2
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	009a      	lsls	r2, r3, #2
 800d078:	441a      	add	r2, r3
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	685b      	ldr	r3, [r3, #4]
 800d07e:	005b      	lsls	r3, r3, #1
 800d080:	fbb2 f2f3 	udiv	r2, r2, r3
 800d084:	4b70      	ldr	r3, [pc, #448]	; (800d248 <UART_SetConfig+0x324>)
 800d086:	fba3 0302 	umull	r0, r3, r3, r2
 800d08a:	095b      	lsrs	r3, r3, #5
 800d08c:	2064      	movs	r0, #100	; 0x64
 800d08e:	fb00 f303 	mul.w	r3, r0, r3
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	00db      	lsls	r3, r3, #3
 800d096:	3332      	adds	r3, #50	; 0x32
 800d098:	4a6b      	ldr	r2, [pc, #428]	; (800d248 <UART_SetConfig+0x324>)
 800d09a:	fba2 2303 	umull	r2, r3, r2, r3
 800d09e:	095b      	lsrs	r3, r3, #5
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d0a6:	4419      	add	r1, r3
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4413      	add	r3, r2
 800d0b0:	009a      	lsls	r2, r3, #2
 800d0b2:	441a      	add	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	685b      	ldr	r3, [r3, #4]
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	fbb2 f2f3 	udiv	r2, r2, r3
 800d0be:	4b62      	ldr	r3, [pc, #392]	; (800d248 <UART_SetConfig+0x324>)
 800d0c0:	fba3 0302 	umull	r0, r3, r3, r2
 800d0c4:	095b      	lsrs	r3, r3, #5
 800d0c6:	2064      	movs	r0, #100	; 0x64
 800d0c8:	fb00 f303 	mul.w	r3, r0, r3
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	3332      	adds	r3, #50	; 0x32
 800d0d2:	4a5d      	ldr	r2, [pc, #372]	; (800d248 <UART_SetConfig+0x324>)
 800d0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800d0d8:	095b      	lsrs	r3, r3, #5
 800d0da:	f003 0207 	and.w	r2, r3, #7
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	440a      	add	r2, r1
 800d0e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d0e6:	e0a7      	b.n	800d238 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a54      	ldr	r2, [pc, #336]	; (800d240 <UART_SetConfig+0x31c>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d004      	beq.n	800d0fc <UART_SetConfig+0x1d8>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a53      	ldr	r2, [pc, #332]	; (800d244 <UART_SetConfig+0x320>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d14e      	bne.n	800d19a <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d0fc:	f7fe fce4 	bl	800bac8 <HAL_RCC_GetPCLK2Freq>
 800d100:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d102:	68ba      	ldr	r2, [r7, #8]
 800d104:	4613      	mov	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	009a      	lsls	r2, r3, #2
 800d10c:	441a      	add	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	fbb2 f3f3 	udiv	r3, r2, r3
 800d118:	4a4b      	ldr	r2, [pc, #300]	; (800d248 <UART_SetConfig+0x324>)
 800d11a:	fba2 2303 	umull	r2, r3, r2, r3
 800d11e:	095b      	lsrs	r3, r3, #5
 800d120:	0119      	lsls	r1, r3, #4
 800d122:	68ba      	ldr	r2, [r7, #8]
 800d124:	4613      	mov	r3, r2
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	4413      	add	r3, r2
 800d12a:	009a      	lsls	r2, r3, #2
 800d12c:	441a      	add	r2, r3
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	fbb2 f2f3 	udiv	r2, r2, r3
 800d138:	4b43      	ldr	r3, [pc, #268]	; (800d248 <UART_SetConfig+0x324>)
 800d13a:	fba3 0302 	umull	r0, r3, r3, r2
 800d13e:	095b      	lsrs	r3, r3, #5
 800d140:	2064      	movs	r0, #100	; 0x64
 800d142:	fb00 f303 	mul.w	r3, r0, r3
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	011b      	lsls	r3, r3, #4
 800d14a:	3332      	adds	r3, #50	; 0x32
 800d14c:	4a3e      	ldr	r2, [pc, #248]	; (800d248 <UART_SetConfig+0x324>)
 800d14e:	fba2 2303 	umull	r2, r3, r2, r3
 800d152:	095b      	lsrs	r3, r3, #5
 800d154:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d158:	4419      	add	r1, r3
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	4613      	mov	r3, r2
 800d15e:	009b      	lsls	r3, r3, #2
 800d160:	4413      	add	r3, r2
 800d162:	009a      	lsls	r2, r3, #2
 800d164:	441a      	add	r2, r3
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d170:	4b35      	ldr	r3, [pc, #212]	; (800d248 <UART_SetConfig+0x324>)
 800d172:	fba3 0302 	umull	r0, r3, r3, r2
 800d176:	095b      	lsrs	r3, r3, #5
 800d178:	2064      	movs	r0, #100	; 0x64
 800d17a:	fb00 f303 	mul.w	r3, r0, r3
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	011b      	lsls	r3, r3, #4
 800d182:	3332      	adds	r3, #50	; 0x32
 800d184:	4a30      	ldr	r2, [pc, #192]	; (800d248 <UART_SetConfig+0x324>)
 800d186:	fba2 2303 	umull	r2, r3, r2, r3
 800d18a:	095b      	lsrs	r3, r3, #5
 800d18c:	f003 020f 	and.w	r2, r3, #15
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	440a      	add	r2, r1
 800d196:	609a      	str	r2, [r3, #8]
 800d198:	e04e      	b.n	800d238 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d19a:	f7fe fc73 	bl	800ba84 <HAL_RCC_GetPCLK1Freq>
 800d19e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d1a0:	68ba      	ldr	r2, [r7, #8]
 800d1a2:	4613      	mov	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4413      	add	r3, r2
 800d1a8:	009a      	lsls	r2, r3, #2
 800d1aa:	441a      	add	r2, r3
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	009b      	lsls	r3, r3, #2
 800d1b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1b6:	4a24      	ldr	r2, [pc, #144]	; (800d248 <UART_SetConfig+0x324>)
 800d1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800d1bc:	095b      	lsrs	r3, r3, #5
 800d1be:	0119      	lsls	r1, r3, #4
 800d1c0:	68ba      	ldr	r2, [r7, #8]
 800d1c2:	4613      	mov	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	4413      	add	r3, r2
 800d1c8:	009a      	lsls	r2, r3, #2
 800d1ca:	441a      	add	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	009b      	lsls	r3, r3, #2
 800d1d2:	fbb2 f2f3 	udiv	r2, r2, r3
 800d1d6:	4b1c      	ldr	r3, [pc, #112]	; (800d248 <UART_SetConfig+0x324>)
 800d1d8:	fba3 0302 	umull	r0, r3, r3, r2
 800d1dc:	095b      	lsrs	r3, r3, #5
 800d1de:	2064      	movs	r0, #100	; 0x64
 800d1e0:	fb00 f303 	mul.w	r3, r0, r3
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	011b      	lsls	r3, r3, #4
 800d1e8:	3332      	adds	r3, #50	; 0x32
 800d1ea:	4a17      	ldr	r2, [pc, #92]	; (800d248 <UART_SetConfig+0x324>)
 800d1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f0:	095b      	lsrs	r3, r3, #5
 800d1f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d1f6:	4419      	add	r1, r3
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	009a      	lsls	r2, r3, #2
 800d202:	441a      	add	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d20e:	4b0e      	ldr	r3, [pc, #56]	; (800d248 <UART_SetConfig+0x324>)
 800d210:	fba3 0302 	umull	r0, r3, r3, r2
 800d214:	095b      	lsrs	r3, r3, #5
 800d216:	2064      	movs	r0, #100	; 0x64
 800d218:	fb00 f303 	mul.w	r3, r0, r3
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	011b      	lsls	r3, r3, #4
 800d220:	3332      	adds	r3, #50	; 0x32
 800d222:	4a09      	ldr	r2, [pc, #36]	; (800d248 <UART_SetConfig+0x324>)
 800d224:	fba2 2303 	umull	r2, r3, r2, r3
 800d228:	095b      	lsrs	r3, r3, #5
 800d22a:	f003 020f 	and.w	r2, r3, #15
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	440a      	add	r2, r1
 800d234:	609a      	str	r2, [r3, #8]
}
 800d236:	e7ff      	b.n	800d238 <UART_SetConfig+0x314>
 800d238:	bf00      	nop
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	40011000 	.word	0x40011000
 800d244:	40011400 	.word	0x40011400
 800d248:	51eb851f 	.word	0x51eb851f

0800d24c <__errno>:
 800d24c:	4b01      	ldr	r3, [pc, #4]	; (800d254 <__errno+0x8>)
 800d24e:	6818      	ldr	r0, [r3, #0]
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	20000064 	.word	0x20000064

0800d258 <__libc_init_array>:
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	2500      	movs	r5, #0
 800d25c:	4e0c      	ldr	r6, [pc, #48]	; (800d290 <__libc_init_array+0x38>)
 800d25e:	4c0d      	ldr	r4, [pc, #52]	; (800d294 <__libc_init_array+0x3c>)
 800d260:	1ba4      	subs	r4, r4, r6
 800d262:	10a4      	asrs	r4, r4, #2
 800d264:	42a5      	cmp	r5, r4
 800d266:	d109      	bne.n	800d27c <__libc_init_array+0x24>
 800d268:	f002 fa94 	bl	800f794 <_init>
 800d26c:	2500      	movs	r5, #0
 800d26e:	4e0a      	ldr	r6, [pc, #40]	; (800d298 <__libc_init_array+0x40>)
 800d270:	4c0a      	ldr	r4, [pc, #40]	; (800d29c <__libc_init_array+0x44>)
 800d272:	1ba4      	subs	r4, r4, r6
 800d274:	10a4      	asrs	r4, r4, #2
 800d276:	42a5      	cmp	r5, r4
 800d278:	d105      	bne.n	800d286 <__libc_init_array+0x2e>
 800d27a:	bd70      	pop	{r4, r5, r6, pc}
 800d27c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d280:	4798      	blx	r3
 800d282:	3501      	adds	r5, #1
 800d284:	e7ee      	b.n	800d264 <__libc_init_array+0xc>
 800d286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d28a:	4798      	blx	r3
 800d28c:	3501      	adds	r5, #1
 800d28e:	e7f2      	b.n	800d276 <__libc_init_array+0x1e>
 800d290:	08010264 	.word	0x08010264
 800d294:	08010264 	.word	0x08010264
 800d298:	08010264 	.word	0x08010264
 800d29c:	08010268 	.word	0x08010268

0800d2a0 <memset>:
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	4402      	add	r2, r0
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d100      	bne.n	800d2aa <memset+0xa>
 800d2a8:	4770      	bx	lr
 800d2aa:	f803 1b01 	strb.w	r1, [r3], #1
 800d2ae:	e7f9      	b.n	800d2a4 <memset+0x4>

0800d2b0 <__cvt>:
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b6:	461e      	mov	r6, r3
 800d2b8:	bfbb      	ittet	lt
 800d2ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d2be:	461e      	movlt	r6, r3
 800d2c0:	2300      	movge	r3, #0
 800d2c2:	232d      	movlt	r3, #45	; 0x2d
 800d2c4:	b088      	sub	sp, #32
 800d2c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d2c8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800d2cc:	f027 0720 	bic.w	r7, r7, #32
 800d2d0:	2f46      	cmp	r7, #70	; 0x46
 800d2d2:	4614      	mov	r4, r2
 800d2d4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d2d6:	700b      	strb	r3, [r1, #0]
 800d2d8:	d004      	beq.n	800d2e4 <__cvt+0x34>
 800d2da:	2f45      	cmp	r7, #69	; 0x45
 800d2dc:	d100      	bne.n	800d2e0 <__cvt+0x30>
 800d2de:	3501      	adds	r5, #1
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	e000      	b.n	800d2e6 <__cvt+0x36>
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	aa07      	add	r2, sp, #28
 800d2e8:	9204      	str	r2, [sp, #16]
 800d2ea:	aa06      	add	r2, sp, #24
 800d2ec:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d2f0:	e9cd 3500 	strd	r3, r5, [sp]
 800d2f4:	4622      	mov	r2, r4
 800d2f6:	4633      	mov	r3, r6
 800d2f8:	f000 fcda 	bl	800dcb0 <_dtoa_r>
 800d2fc:	2f47      	cmp	r7, #71	; 0x47
 800d2fe:	4680      	mov	r8, r0
 800d300:	d102      	bne.n	800d308 <__cvt+0x58>
 800d302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d304:	07db      	lsls	r3, r3, #31
 800d306:	d526      	bpl.n	800d356 <__cvt+0xa6>
 800d308:	2f46      	cmp	r7, #70	; 0x46
 800d30a:	eb08 0905 	add.w	r9, r8, r5
 800d30e:	d111      	bne.n	800d334 <__cvt+0x84>
 800d310:	f898 3000 	ldrb.w	r3, [r8]
 800d314:	2b30      	cmp	r3, #48	; 0x30
 800d316:	d10a      	bne.n	800d32e <__cvt+0x7e>
 800d318:	2200      	movs	r2, #0
 800d31a:	2300      	movs	r3, #0
 800d31c:	4620      	mov	r0, r4
 800d31e:	4631      	mov	r1, r6
 800d320:	f7f3 fb7e 	bl	8000a20 <__aeabi_dcmpeq>
 800d324:	b918      	cbnz	r0, 800d32e <__cvt+0x7e>
 800d326:	f1c5 0501 	rsb	r5, r5, #1
 800d32a:	f8ca 5000 	str.w	r5, [sl]
 800d32e:	f8da 3000 	ldr.w	r3, [sl]
 800d332:	4499      	add	r9, r3
 800d334:	2200      	movs	r2, #0
 800d336:	2300      	movs	r3, #0
 800d338:	4620      	mov	r0, r4
 800d33a:	4631      	mov	r1, r6
 800d33c:	f7f3 fb70 	bl	8000a20 <__aeabi_dcmpeq>
 800d340:	b938      	cbnz	r0, 800d352 <__cvt+0xa2>
 800d342:	2230      	movs	r2, #48	; 0x30
 800d344:	9b07      	ldr	r3, [sp, #28]
 800d346:	454b      	cmp	r3, r9
 800d348:	d205      	bcs.n	800d356 <__cvt+0xa6>
 800d34a:	1c59      	adds	r1, r3, #1
 800d34c:	9107      	str	r1, [sp, #28]
 800d34e:	701a      	strb	r2, [r3, #0]
 800d350:	e7f8      	b.n	800d344 <__cvt+0x94>
 800d352:	f8cd 901c 	str.w	r9, [sp, #28]
 800d356:	4640      	mov	r0, r8
 800d358:	9b07      	ldr	r3, [sp, #28]
 800d35a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d35c:	eba3 0308 	sub.w	r3, r3, r8
 800d360:	6013      	str	r3, [r2, #0]
 800d362:	b008      	add	sp, #32
 800d364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d368 <__exponent>:
 800d368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d36a:	2900      	cmp	r1, #0
 800d36c:	bfb4      	ite	lt
 800d36e:	232d      	movlt	r3, #45	; 0x2d
 800d370:	232b      	movge	r3, #43	; 0x2b
 800d372:	4604      	mov	r4, r0
 800d374:	bfb8      	it	lt
 800d376:	4249      	neglt	r1, r1
 800d378:	2909      	cmp	r1, #9
 800d37a:	f804 2b02 	strb.w	r2, [r4], #2
 800d37e:	7043      	strb	r3, [r0, #1]
 800d380:	dd21      	ble.n	800d3c6 <__exponent+0x5e>
 800d382:	f10d 0307 	add.w	r3, sp, #7
 800d386:	461f      	mov	r7, r3
 800d388:	260a      	movs	r6, #10
 800d38a:	fb91 f5f6 	sdiv	r5, r1, r6
 800d38e:	fb06 1115 	mls	r1, r6, r5, r1
 800d392:	2d09      	cmp	r5, #9
 800d394:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800d398:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d39c:	f103 32ff 	add.w	r2, r3, #4294967295
 800d3a0:	4629      	mov	r1, r5
 800d3a2:	dc09      	bgt.n	800d3b8 <__exponent+0x50>
 800d3a4:	3130      	adds	r1, #48	; 0x30
 800d3a6:	3b02      	subs	r3, #2
 800d3a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d3ac:	42bb      	cmp	r3, r7
 800d3ae:	4622      	mov	r2, r4
 800d3b0:	d304      	bcc.n	800d3bc <__exponent+0x54>
 800d3b2:	1a10      	subs	r0, r2, r0
 800d3b4:	b003      	add	sp, #12
 800d3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3b8:	4613      	mov	r3, r2
 800d3ba:	e7e6      	b.n	800d38a <__exponent+0x22>
 800d3bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3c0:	f804 2b01 	strb.w	r2, [r4], #1
 800d3c4:	e7f2      	b.n	800d3ac <__exponent+0x44>
 800d3c6:	2330      	movs	r3, #48	; 0x30
 800d3c8:	4419      	add	r1, r3
 800d3ca:	7083      	strb	r3, [r0, #2]
 800d3cc:	1d02      	adds	r2, r0, #4
 800d3ce:	70c1      	strb	r1, [r0, #3]
 800d3d0:	e7ef      	b.n	800d3b2 <__exponent+0x4a>
	...

0800d3d4 <_printf_float>:
 800d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d8:	b091      	sub	sp, #68	; 0x44
 800d3da:	460c      	mov	r4, r1
 800d3dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d3de:	4693      	mov	fp, r2
 800d3e0:	461e      	mov	r6, r3
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	f001 fa18 	bl	800e818 <_localeconv_r>
 800d3e8:	6803      	ldr	r3, [r0, #0]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d3ee:	f7f2 feeb 	bl	80001c8 <strlen>
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	930e      	str	r3, [sp, #56]	; 0x38
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	900a      	str	r0, [sp, #40]	; 0x28
 800d3fa:	3307      	adds	r3, #7
 800d3fc:	f023 0307 	bic.w	r3, r3, #7
 800d400:	f103 0208 	add.w	r2, r3, #8
 800d404:	f894 8018 	ldrb.w	r8, [r4, #24]
 800d408:	f8d4 a000 	ldr.w	sl, [r4]
 800d40c:	603a      	str	r2, [r7, #0]
 800d40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d412:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d416:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800d41a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d41e:	930b      	str	r3, [sp, #44]	; 0x2c
 800d420:	f04f 32ff 	mov.w	r2, #4294967295
 800d424:	4ba6      	ldr	r3, [pc, #664]	; (800d6c0 <_printf_float+0x2ec>)
 800d426:	4638      	mov	r0, r7
 800d428:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d42a:	f7f3 fb2b 	bl	8000a84 <__aeabi_dcmpun>
 800d42e:	bb68      	cbnz	r0, 800d48c <_printf_float+0xb8>
 800d430:	f04f 32ff 	mov.w	r2, #4294967295
 800d434:	4ba2      	ldr	r3, [pc, #648]	; (800d6c0 <_printf_float+0x2ec>)
 800d436:	4638      	mov	r0, r7
 800d438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d43a:	f7f3 fb05 	bl	8000a48 <__aeabi_dcmple>
 800d43e:	bb28      	cbnz	r0, 800d48c <_printf_float+0xb8>
 800d440:	2200      	movs	r2, #0
 800d442:	2300      	movs	r3, #0
 800d444:	4638      	mov	r0, r7
 800d446:	4649      	mov	r1, r9
 800d448:	f7f3 faf4 	bl	8000a34 <__aeabi_dcmplt>
 800d44c:	b110      	cbz	r0, 800d454 <_printf_float+0x80>
 800d44e:	232d      	movs	r3, #45	; 0x2d
 800d450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d454:	4f9b      	ldr	r7, [pc, #620]	; (800d6c4 <_printf_float+0x2f0>)
 800d456:	4b9c      	ldr	r3, [pc, #624]	; (800d6c8 <_printf_float+0x2f4>)
 800d458:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d45c:	bf98      	it	ls
 800d45e:	461f      	movls	r7, r3
 800d460:	2303      	movs	r3, #3
 800d462:	f04f 0900 	mov.w	r9, #0
 800d466:	6123      	str	r3, [r4, #16]
 800d468:	f02a 0304 	bic.w	r3, sl, #4
 800d46c:	6023      	str	r3, [r4, #0]
 800d46e:	9600      	str	r6, [sp, #0]
 800d470:	465b      	mov	r3, fp
 800d472:	aa0f      	add	r2, sp, #60	; 0x3c
 800d474:	4621      	mov	r1, r4
 800d476:	4628      	mov	r0, r5
 800d478:	f000 f9e2 	bl	800d840 <_printf_common>
 800d47c:	3001      	adds	r0, #1
 800d47e:	f040 8090 	bne.w	800d5a2 <_printf_float+0x1ce>
 800d482:	f04f 30ff 	mov.w	r0, #4294967295
 800d486:	b011      	add	sp, #68	; 0x44
 800d488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d48c:	463a      	mov	r2, r7
 800d48e:	464b      	mov	r3, r9
 800d490:	4638      	mov	r0, r7
 800d492:	4649      	mov	r1, r9
 800d494:	f7f3 faf6 	bl	8000a84 <__aeabi_dcmpun>
 800d498:	b110      	cbz	r0, 800d4a0 <_printf_float+0xcc>
 800d49a:	4f8c      	ldr	r7, [pc, #560]	; (800d6cc <_printf_float+0x2f8>)
 800d49c:	4b8c      	ldr	r3, [pc, #560]	; (800d6d0 <_printf_float+0x2fc>)
 800d49e:	e7db      	b.n	800d458 <_printf_float+0x84>
 800d4a0:	6863      	ldr	r3, [r4, #4]
 800d4a2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800d4a6:	1c59      	adds	r1, r3, #1
 800d4a8:	a80d      	add	r0, sp, #52	; 0x34
 800d4aa:	a90e      	add	r1, sp, #56	; 0x38
 800d4ac:	d140      	bne.n	800d530 <_printf_float+0x15c>
 800d4ae:	2306      	movs	r3, #6
 800d4b0:	6063      	str	r3, [r4, #4]
 800d4b2:	f04f 0c00 	mov.w	ip, #0
 800d4b6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800d4ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d4be:	6863      	ldr	r3, [r4, #4]
 800d4c0:	6022      	str	r2, [r4, #0]
 800d4c2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	463a      	mov	r2, r7
 800d4ca:	464b      	mov	r3, r9
 800d4cc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	f7ff feed 	bl	800d2b0 <__cvt>
 800d4d6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800d4da:	2b47      	cmp	r3, #71	; 0x47
 800d4dc:	4607      	mov	r7, r0
 800d4de:	d109      	bne.n	800d4f4 <_printf_float+0x120>
 800d4e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4e2:	1cd8      	adds	r0, r3, #3
 800d4e4:	db02      	blt.n	800d4ec <_printf_float+0x118>
 800d4e6:	6862      	ldr	r2, [r4, #4]
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	dd47      	ble.n	800d57c <_printf_float+0x1a8>
 800d4ec:	f1a8 0802 	sub.w	r8, r8, #2
 800d4f0:	fa5f f888 	uxtb.w	r8, r8
 800d4f4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800d4f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d4fa:	d824      	bhi.n	800d546 <_printf_float+0x172>
 800d4fc:	3901      	subs	r1, #1
 800d4fe:	4642      	mov	r2, r8
 800d500:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d504:	910d      	str	r1, [sp, #52]	; 0x34
 800d506:	f7ff ff2f 	bl	800d368 <__exponent>
 800d50a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d50c:	4681      	mov	r9, r0
 800d50e:	1813      	adds	r3, r2, r0
 800d510:	2a01      	cmp	r2, #1
 800d512:	6123      	str	r3, [r4, #16]
 800d514:	dc02      	bgt.n	800d51c <_printf_float+0x148>
 800d516:	6822      	ldr	r2, [r4, #0]
 800d518:	07d1      	lsls	r1, r2, #31
 800d51a:	d501      	bpl.n	800d520 <_printf_float+0x14c>
 800d51c:	3301      	adds	r3, #1
 800d51e:	6123      	str	r3, [r4, #16]
 800d520:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d524:	2b00      	cmp	r3, #0
 800d526:	d0a2      	beq.n	800d46e <_printf_float+0x9a>
 800d528:	232d      	movs	r3, #45	; 0x2d
 800d52a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d52e:	e79e      	b.n	800d46e <_printf_float+0x9a>
 800d530:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800d534:	f000 816e 	beq.w	800d814 <_printf_float+0x440>
 800d538:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d53c:	d1b9      	bne.n	800d4b2 <_printf_float+0xde>
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1b7      	bne.n	800d4b2 <_printf_float+0xde>
 800d542:	2301      	movs	r3, #1
 800d544:	e7b4      	b.n	800d4b0 <_printf_float+0xdc>
 800d546:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800d54a:	d119      	bne.n	800d580 <_printf_float+0x1ac>
 800d54c:	2900      	cmp	r1, #0
 800d54e:	6863      	ldr	r3, [r4, #4]
 800d550:	dd0c      	ble.n	800d56c <_printf_float+0x198>
 800d552:	6121      	str	r1, [r4, #16]
 800d554:	b913      	cbnz	r3, 800d55c <_printf_float+0x188>
 800d556:	6822      	ldr	r2, [r4, #0]
 800d558:	07d2      	lsls	r2, r2, #31
 800d55a:	d502      	bpl.n	800d562 <_printf_float+0x18e>
 800d55c:	3301      	adds	r3, #1
 800d55e:	440b      	add	r3, r1
 800d560:	6123      	str	r3, [r4, #16]
 800d562:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d564:	f04f 0900 	mov.w	r9, #0
 800d568:	65a3      	str	r3, [r4, #88]	; 0x58
 800d56a:	e7d9      	b.n	800d520 <_printf_float+0x14c>
 800d56c:	b913      	cbnz	r3, 800d574 <_printf_float+0x1a0>
 800d56e:	6822      	ldr	r2, [r4, #0]
 800d570:	07d0      	lsls	r0, r2, #31
 800d572:	d501      	bpl.n	800d578 <_printf_float+0x1a4>
 800d574:	3302      	adds	r3, #2
 800d576:	e7f3      	b.n	800d560 <_printf_float+0x18c>
 800d578:	2301      	movs	r3, #1
 800d57a:	e7f1      	b.n	800d560 <_printf_float+0x18c>
 800d57c:	f04f 0867 	mov.w	r8, #103	; 0x67
 800d580:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d584:	4293      	cmp	r3, r2
 800d586:	db05      	blt.n	800d594 <_printf_float+0x1c0>
 800d588:	6822      	ldr	r2, [r4, #0]
 800d58a:	6123      	str	r3, [r4, #16]
 800d58c:	07d1      	lsls	r1, r2, #31
 800d58e:	d5e8      	bpl.n	800d562 <_printf_float+0x18e>
 800d590:	3301      	adds	r3, #1
 800d592:	e7e5      	b.n	800d560 <_printf_float+0x18c>
 800d594:	2b00      	cmp	r3, #0
 800d596:	bfcc      	ite	gt
 800d598:	2301      	movgt	r3, #1
 800d59a:	f1c3 0302 	rsble	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	e7de      	b.n	800d560 <_printf_float+0x18c>
 800d5a2:	6823      	ldr	r3, [r4, #0]
 800d5a4:	055a      	lsls	r2, r3, #21
 800d5a6:	d407      	bmi.n	800d5b8 <_printf_float+0x1e4>
 800d5a8:	6923      	ldr	r3, [r4, #16]
 800d5aa:	463a      	mov	r2, r7
 800d5ac:	4659      	mov	r1, fp
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	47b0      	blx	r6
 800d5b2:	3001      	adds	r0, #1
 800d5b4:	d129      	bne.n	800d60a <_printf_float+0x236>
 800d5b6:	e764      	b.n	800d482 <_printf_float+0xae>
 800d5b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800d5bc:	f240 80d7 	bls.w	800d76e <_printf_float+0x39a>
 800d5c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	f7f3 fa2a 	bl	8000a20 <__aeabi_dcmpeq>
 800d5cc:	b388      	cbz	r0, 800d632 <_printf_float+0x25e>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	4a40      	ldr	r2, [pc, #256]	; (800d6d4 <_printf_float+0x300>)
 800d5d2:	4659      	mov	r1, fp
 800d5d4:	4628      	mov	r0, r5
 800d5d6:	47b0      	blx	r6
 800d5d8:	3001      	adds	r0, #1
 800d5da:	f43f af52 	beq.w	800d482 <_printf_float+0xae>
 800d5de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	db02      	blt.n	800d5ec <_printf_float+0x218>
 800d5e6:	6823      	ldr	r3, [r4, #0]
 800d5e8:	07d8      	lsls	r0, r3, #31
 800d5ea:	d50e      	bpl.n	800d60a <_printf_float+0x236>
 800d5ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5f0:	4659      	mov	r1, fp
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	47b0      	blx	r6
 800d5f6:	3001      	adds	r0, #1
 800d5f8:	f43f af43 	beq.w	800d482 <_printf_float+0xae>
 800d5fc:	2700      	movs	r7, #0
 800d5fe:	f104 081a 	add.w	r8, r4, #26
 800d602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d604:	3b01      	subs	r3, #1
 800d606:	42bb      	cmp	r3, r7
 800d608:	dc09      	bgt.n	800d61e <_printf_float+0x24a>
 800d60a:	6823      	ldr	r3, [r4, #0]
 800d60c:	079f      	lsls	r7, r3, #30
 800d60e:	f100 80fd 	bmi.w	800d80c <_printf_float+0x438>
 800d612:	68e0      	ldr	r0, [r4, #12]
 800d614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d616:	4298      	cmp	r0, r3
 800d618:	bfb8      	it	lt
 800d61a:	4618      	movlt	r0, r3
 800d61c:	e733      	b.n	800d486 <_printf_float+0xb2>
 800d61e:	2301      	movs	r3, #1
 800d620:	4642      	mov	r2, r8
 800d622:	4659      	mov	r1, fp
 800d624:	4628      	mov	r0, r5
 800d626:	47b0      	blx	r6
 800d628:	3001      	adds	r0, #1
 800d62a:	f43f af2a 	beq.w	800d482 <_printf_float+0xae>
 800d62e:	3701      	adds	r7, #1
 800d630:	e7e7      	b.n	800d602 <_printf_float+0x22e>
 800d632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d634:	2b00      	cmp	r3, #0
 800d636:	dc2b      	bgt.n	800d690 <_printf_float+0x2bc>
 800d638:	2301      	movs	r3, #1
 800d63a:	4a26      	ldr	r2, [pc, #152]	; (800d6d4 <_printf_float+0x300>)
 800d63c:	4659      	mov	r1, fp
 800d63e:	4628      	mov	r0, r5
 800d640:	47b0      	blx	r6
 800d642:	3001      	adds	r0, #1
 800d644:	f43f af1d 	beq.w	800d482 <_printf_float+0xae>
 800d648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64a:	b923      	cbnz	r3, 800d656 <_printf_float+0x282>
 800d64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d64e:	b913      	cbnz	r3, 800d656 <_printf_float+0x282>
 800d650:	6823      	ldr	r3, [r4, #0]
 800d652:	07d9      	lsls	r1, r3, #31
 800d654:	d5d9      	bpl.n	800d60a <_printf_float+0x236>
 800d656:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d65a:	4659      	mov	r1, fp
 800d65c:	4628      	mov	r0, r5
 800d65e:	47b0      	blx	r6
 800d660:	3001      	adds	r0, #1
 800d662:	f43f af0e 	beq.w	800d482 <_printf_float+0xae>
 800d666:	f04f 0800 	mov.w	r8, #0
 800d66a:	f104 091a 	add.w	r9, r4, #26
 800d66e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d670:	425b      	negs	r3, r3
 800d672:	4543      	cmp	r3, r8
 800d674:	dc01      	bgt.n	800d67a <_printf_float+0x2a6>
 800d676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d678:	e797      	b.n	800d5aa <_printf_float+0x1d6>
 800d67a:	2301      	movs	r3, #1
 800d67c:	464a      	mov	r2, r9
 800d67e:	4659      	mov	r1, fp
 800d680:	4628      	mov	r0, r5
 800d682:	47b0      	blx	r6
 800d684:	3001      	adds	r0, #1
 800d686:	f43f aefc 	beq.w	800d482 <_printf_float+0xae>
 800d68a:	f108 0801 	add.w	r8, r8, #1
 800d68e:	e7ee      	b.n	800d66e <_printf_float+0x29a>
 800d690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d692:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d694:	429a      	cmp	r2, r3
 800d696:	bfa8      	it	ge
 800d698:	461a      	movge	r2, r3
 800d69a:	2a00      	cmp	r2, #0
 800d69c:	4690      	mov	r8, r2
 800d69e:	dd07      	ble.n	800d6b0 <_printf_float+0x2dc>
 800d6a0:	4613      	mov	r3, r2
 800d6a2:	4659      	mov	r1, fp
 800d6a4:	463a      	mov	r2, r7
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	47b0      	blx	r6
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	f43f aee9 	beq.w	800d482 <_printf_float+0xae>
 800d6b0:	f104 031a 	add.w	r3, r4, #26
 800d6b4:	f04f 0a00 	mov.w	sl, #0
 800d6b8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800d6bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6be:	e015      	b.n	800d6ec <_printf_float+0x318>
 800d6c0:	7fefffff 	.word	0x7fefffff
 800d6c4:	0800fffc 	.word	0x0800fffc
 800d6c8:	0800fff8 	.word	0x0800fff8
 800d6cc:	08010004 	.word	0x08010004
 800d6d0:	08010000 	.word	0x08010000
 800d6d4:	08010008 	.word	0x08010008
 800d6d8:	2301      	movs	r3, #1
 800d6da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6dc:	4659      	mov	r1, fp
 800d6de:	4628      	mov	r0, r5
 800d6e0:	47b0      	blx	r6
 800d6e2:	3001      	adds	r0, #1
 800d6e4:	f43f aecd 	beq.w	800d482 <_printf_float+0xae>
 800d6e8:	f10a 0a01 	add.w	sl, sl, #1
 800d6ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800d6f0:	eba9 0308 	sub.w	r3, r9, r8
 800d6f4:	4553      	cmp	r3, sl
 800d6f6:	dcef      	bgt.n	800d6d8 <_printf_float+0x304>
 800d6f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d6fc:	429a      	cmp	r2, r3
 800d6fe:	444f      	add	r7, r9
 800d700:	db14      	blt.n	800d72c <_printf_float+0x358>
 800d702:	6823      	ldr	r3, [r4, #0]
 800d704:	07da      	lsls	r2, r3, #31
 800d706:	d411      	bmi.n	800d72c <_printf_float+0x358>
 800d708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d70a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d70c:	eba3 0209 	sub.w	r2, r3, r9
 800d710:	eba3 0901 	sub.w	r9, r3, r1
 800d714:	4591      	cmp	r9, r2
 800d716:	bfa8      	it	ge
 800d718:	4691      	movge	r9, r2
 800d71a:	f1b9 0f00 	cmp.w	r9, #0
 800d71e:	dc0d      	bgt.n	800d73c <_printf_float+0x368>
 800d720:	2700      	movs	r7, #0
 800d722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d726:	f104 081a 	add.w	r8, r4, #26
 800d72a:	e018      	b.n	800d75e <_printf_float+0x38a>
 800d72c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d730:	4659      	mov	r1, fp
 800d732:	4628      	mov	r0, r5
 800d734:	47b0      	blx	r6
 800d736:	3001      	adds	r0, #1
 800d738:	d1e6      	bne.n	800d708 <_printf_float+0x334>
 800d73a:	e6a2      	b.n	800d482 <_printf_float+0xae>
 800d73c:	464b      	mov	r3, r9
 800d73e:	463a      	mov	r2, r7
 800d740:	4659      	mov	r1, fp
 800d742:	4628      	mov	r0, r5
 800d744:	47b0      	blx	r6
 800d746:	3001      	adds	r0, #1
 800d748:	d1ea      	bne.n	800d720 <_printf_float+0x34c>
 800d74a:	e69a      	b.n	800d482 <_printf_float+0xae>
 800d74c:	2301      	movs	r3, #1
 800d74e:	4642      	mov	r2, r8
 800d750:	4659      	mov	r1, fp
 800d752:	4628      	mov	r0, r5
 800d754:	47b0      	blx	r6
 800d756:	3001      	adds	r0, #1
 800d758:	f43f ae93 	beq.w	800d482 <_printf_float+0xae>
 800d75c:	3701      	adds	r7, #1
 800d75e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d762:	1a9b      	subs	r3, r3, r2
 800d764:	eba3 0309 	sub.w	r3, r3, r9
 800d768:	42bb      	cmp	r3, r7
 800d76a:	dcef      	bgt.n	800d74c <_printf_float+0x378>
 800d76c:	e74d      	b.n	800d60a <_printf_float+0x236>
 800d76e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d770:	2a01      	cmp	r2, #1
 800d772:	dc01      	bgt.n	800d778 <_printf_float+0x3a4>
 800d774:	07db      	lsls	r3, r3, #31
 800d776:	d538      	bpl.n	800d7ea <_printf_float+0x416>
 800d778:	2301      	movs	r3, #1
 800d77a:	463a      	mov	r2, r7
 800d77c:	4659      	mov	r1, fp
 800d77e:	4628      	mov	r0, r5
 800d780:	47b0      	blx	r6
 800d782:	3001      	adds	r0, #1
 800d784:	f43f ae7d 	beq.w	800d482 <_printf_float+0xae>
 800d788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d78c:	4659      	mov	r1, fp
 800d78e:	4628      	mov	r0, r5
 800d790:	47b0      	blx	r6
 800d792:	3001      	adds	r0, #1
 800d794:	f107 0701 	add.w	r7, r7, #1
 800d798:	f43f ae73 	beq.w	800d482 <_printf_float+0xae>
 800d79c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	f103 38ff 	add.w	r8, r3, #4294967295
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	f7f3 f939 	bl	8000a20 <__aeabi_dcmpeq>
 800d7ae:	b9c0      	cbnz	r0, 800d7e2 <_printf_float+0x40e>
 800d7b0:	4643      	mov	r3, r8
 800d7b2:	463a      	mov	r2, r7
 800d7b4:	4659      	mov	r1, fp
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	47b0      	blx	r6
 800d7ba:	3001      	adds	r0, #1
 800d7bc:	d10d      	bne.n	800d7da <_printf_float+0x406>
 800d7be:	e660      	b.n	800d482 <_printf_float+0xae>
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	4642      	mov	r2, r8
 800d7c4:	4659      	mov	r1, fp
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	47b0      	blx	r6
 800d7ca:	3001      	adds	r0, #1
 800d7cc:	f43f ae59 	beq.w	800d482 <_printf_float+0xae>
 800d7d0:	3701      	adds	r7, #1
 800d7d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d7d4:	3b01      	subs	r3, #1
 800d7d6:	42bb      	cmp	r3, r7
 800d7d8:	dcf2      	bgt.n	800d7c0 <_printf_float+0x3ec>
 800d7da:	464b      	mov	r3, r9
 800d7dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d7e0:	e6e4      	b.n	800d5ac <_printf_float+0x1d8>
 800d7e2:	2700      	movs	r7, #0
 800d7e4:	f104 081a 	add.w	r8, r4, #26
 800d7e8:	e7f3      	b.n	800d7d2 <_printf_float+0x3fe>
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e7e1      	b.n	800d7b2 <_printf_float+0x3de>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4642      	mov	r2, r8
 800d7f2:	4659      	mov	r1, fp
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	47b0      	blx	r6
 800d7f8:	3001      	adds	r0, #1
 800d7fa:	f43f ae42 	beq.w	800d482 <_printf_float+0xae>
 800d7fe:	3701      	adds	r7, #1
 800d800:	68e3      	ldr	r3, [r4, #12]
 800d802:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d804:	1a9b      	subs	r3, r3, r2
 800d806:	42bb      	cmp	r3, r7
 800d808:	dcf1      	bgt.n	800d7ee <_printf_float+0x41a>
 800d80a:	e702      	b.n	800d612 <_printf_float+0x23e>
 800d80c:	2700      	movs	r7, #0
 800d80e:	f104 0819 	add.w	r8, r4, #25
 800d812:	e7f5      	b.n	800d800 <_printf_float+0x42c>
 800d814:	2b00      	cmp	r3, #0
 800d816:	f43f ae94 	beq.w	800d542 <_printf_float+0x16e>
 800d81a:	f04f 0c00 	mov.w	ip, #0
 800d81e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800d822:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800d826:	6022      	str	r2, [r4, #0]
 800d828:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800d82c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	463a      	mov	r2, r7
 800d834:	464b      	mov	r3, r9
 800d836:	4628      	mov	r0, r5
 800d838:	f7ff fd3a 	bl	800d2b0 <__cvt>
 800d83c:	4607      	mov	r7, r0
 800d83e:	e64f      	b.n	800d4e0 <_printf_float+0x10c>

0800d840 <_printf_common>:
 800d840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d844:	4691      	mov	r9, r2
 800d846:	461f      	mov	r7, r3
 800d848:	688a      	ldr	r2, [r1, #8]
 800d84a:	690b      	ldr	r3, [r1, #16]
 800d84c:	4606      	mov	r6, r0
 800d84e:	4293      	cmp	r3, r2
 800d850:	bfb8      	it	lt
 800d852:	4613      	movlt	r3, r2
 800d854:	f8c9 3000 	str.w	r3, [r9]
 800d858:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d85c:	460c      	mov	r4, r1
 800d85e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d862:	b112      	cbz	r2, 800d86a <_printf_common+0x2a>
 800d864:	3301      	adds	r3, #1
 800d866:	f8c9 3000 	str.w	r3, [r9]
 800d86a:	6823      	ldr	r3, [r4, #0]
 800d86c:	0699      	lsls	r1, r3, #26
 800d86e:	bf42      	ittt	mi
 800d870:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d874:	3302      	addmi	r3, #2
 800d876:	f8c9 3000 	strmi.w	r3, [r9]
 800d87a:	6825      	ldr	r5, [r4, #0]
 800d87c:	f015 0506 	ands.w	r5, r5, #6
 800d880:	d107      	bne.n	800d892 <_printf_common+0x52>
 800d882:	f104 0a19 	add.w	sl, r4, #25
 800d886:	68e3      	ldr	r3, [r4, #12]
 800d888:	f8d9 2000 	ldr.w	r2, [r9]
 800d88c:	1a9b      	subs	r3, r3, r2
 800d88e:	42ab      	cmp	r3, r5
 800d890:	dc29      	bgt.n	800d8e6 <_printf_common+0xa6>
 800d892:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d896:	6822      	ldr	r2, [r4, #0]
 800d898:	3300      	adds	r3, #0
 800d89a:	bf18      	it	ne
 800d89c:	2301      	movne	r3, #1
 800d89e:	0692      	lsls	r2, r2, #26
 800d8a0:	d42e      	bmi.n	800d900 <_printf_common+0xc0>
 800d8a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8a6:	4639      	mov	r1, r7
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	47c0      	blx	r8
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d021      	beq.n	800d8f4 <_printf_common+0xb4>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	68e5      	ldr	r5, [r4, #12]
 800d8b4:	f003 0306 	and.w	r3, r3, #6
 800d8b8:	2b04      	cmp	r3, #4
 800d8ba:	bf18      	it	ne
 800d8bc:	2500      	movne	r5, #0
 800d8be:	f8d9 2000 	ldr.w	r2, [r9]
 800d8c2:	f04f 0900 	mov.w	r9, #0
 800d8c6:	bf08      	it	eq
 800d8c8:	1aad      	subeq	r5, r5, r2
 800d8ca:	68a3      	ldr	r3, [r4, #8]
 800d8cc:	6922      	ldr	r2, [r4, #16]
 800d8ce:	bf08      	it	eq
 800d8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	bfc4      	itt	gt
 800d8d8:	1a9b      	subgt	r3, r3, r2
 800d8da:	18ed      	addgt	r5, r5, r3
 800d8dc:	341a      	adds	r4, #26
 800d8de:	454d      	cmp	r5, r9
 800d8e0:	d11a      	bne.n	800d918 <_printf_common+0xd8>
 800d8e2:	2000      	movs	r0, #0
 800d8e4:	e008      	b.n	800d8f8 <_printf_common+0xb8>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	4652      	mov	r2, sl
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	4630      	mov	r0, r6
 800d8ee:	47c0      	blx	r8
 800d8f0:	3001      	adds	r0, #1
 800d8f2:	d103      	bne.n	800d8fc <_printf_common+0xbc>
 800d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8fc:	3501      	adds	r5, #1
 800d8fe:	e7c2      	b.n	800d886 <_printf_common+0x46>
 800d900:	2030      	movs	r0, #48	; 0x30
 800d902:	18e1      	adds	r1, r4, r3
 800d904:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d908:	1c5a      	adds	r2, r3, #1
 800d90a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d90e:	4422      	add	r2, r4
 800d910:	3302      	adds	r3, #2
 800d912:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d916:	e7c4      	b.n	800d8a2 <_printf_common+0x62>
 800d918:	2301      	movs	r3, #1
 800d91a:	4622      	mov	r2, r4
 800d91c:	4639      	mov	r1, r7
 800d91e:	4630      	mov	r0, r6
 800d920:	47c0      	blx	r8
 800d922:	3001      	adds	r0, #1
 800d924:	d0e6      	beq.n	800d8f4 <_printf_common+0xb4>
 800d926:	f109 0901 	add.w	r9, r9, #1
 800d92a:	e7d8      	b.n	800d8de <_printf_common+0x9e>

0800d92c <_printf_i>:
 800d92c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d930:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d934:	460c      	mov	r4, r1
 800d936:	7e09      	ldrb	r1, [r1, #24]
 800d938:	b085      	sub	sp, #20
 800d93a:	296e      	cmp	r1, #110	; 0x6e
 800d93c:	4617      	mov	r7, r2
 800d93e:	4606      	mov	r6, r0
 800d940:	4698      	mov	r8, r3
 800d942:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d944:	f000 80b3 	beq.w	800daae <_printf_i+0x182>
 800d948:	d822      	bhi.n	800d990 <_printf_i+0x64>
 800d94a:	2963      	cmp	r1, #99	; 0x63
 800d94c:	d036      	beq.n	800d9bc <_printf_i+0x90>
 800d94e:	d80a      	bhi.n	800d966 <_printf_i+0x3a>
 800d950:	2900      	cmp	r1, #0
 800d952:	f000 80b9 	beq.w	800dac8 <_printf_i+0x19c>
 800d956:	2958      	cmp	r1, #88	; 0x58
 800d958:	f000 8083 	beq.w	800da62 <_printf_i+0x136>
 800d95c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d960:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d964:	e032      	b.n	800d9cc <_printf_i+0xa0>
 800d966:	2964      	cmp	r1, #100	; 0x64
 800d968:	d001      	beq.n	800d96e <_printf_i+0x42>
 800d96a:	2969      	cmp	r1, #105	; 0x69
 800d96c:	d1f6      	bne.n	800d95c <_printf_i+0x30>
 800d96e:	6820      	ldr	r0, [r4, #0]
 800d970:	6813      	ldr	r3, [r2, #0]
 800d972:	0605      	lsls	r5, r0, #24
 800d974:	f103 0104 	add.w	r1, r3, #4
 800d978:	d52a      	bpl.n	800d9d0 <_printf_i+0xa4>
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6011      	str	r1, [r2, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	da03      	bge.n	800d98a <_printf_i+0x5e>
 800d982:	222d      	movs	r2, #45	; 0x2d
 800d984:	425b      	negs	r3, r3
 800d986:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d98a:	486f      	ldr	r0, [pc, #444]	; (800db48 <_printf_i+0x21c>)
 800d98c:	220a      	movs	r2, #10
 800d98e:	e039      	b.n	800da04 <_printf_i+0xd8>
 800d990:	2973      	cmp	r1, #115	; 0x73
 800d992:	f000 809d 	beq.w	800dad0 <_printf_i+0x1a4>
 800d996:	d808      	bhi.n	800d9aa <_printf_i+0x7e>
 800d998:	296f      	cmp	r1, #111	; 0x6f
 800d99a:	d020      	beq.n	800d9de <_printf_i+0xb2>
 800d99c:	2970      	cmp	r1, #112	; 0x70
 800d99e:	d1dd      	bne.n	800d95c <_printf_i+0x30>
 800d9a0:	6823      	ldr	r3, [r4, #0]
 800d9a2:	f043 0320 	orr.w	r3, r3, #32
 800d9a6:	6023      	str	r3, [r4, #0]
 800d9a8:	e003      	b.n	800d9b2 <_printf_i+0x86>
 800d9aa:	2975      	cmp	r1, #117	; 0x75
 800d9ac:	d017      	beq.n	800d9de <_printf_i+0xb2>
 800d9ae:	2978      	cmp	r1, #120	; 0x78
 800d9b0:	d1d4      	bne.n	800d95c <_printf_i+0x30>
 800d9b2:	2378      	movs	r3, #120	; 0x78
 800d9b4:	4865      	ldr	r0, [pc, #404]	; (800db4c <_printf_i+0x220>)
 800d9b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d9ba:	e055      	b.n	800da68 <_printf_i+0x13c>
 800d9bc:	6813      	ldr	r3, [r2, #0]
 800d9be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9c2:	1d19      	adds	r1, r3, #4
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	6011      	str	r1, [r2, #0]
 800d9c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9cc:	2301      	movs	r3, #1
 800d9ce:	e08c      	b.n	800daea <_printf_i+0x1be>
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d9d6:	6011      	str	r1, [r2, #0]
 800d9d8:	bf18      	it	ne
 800d9da:	b21b      	sxthne	r3, r3
 800d9dc:	e7cf      	b.n	800d97e <_printf_i+0x52>
 800d9de:	6813      	ldr	r3, [r2, #0]
 800d9e0:	6825      	ldr	r5, [r4, #0]
 800d9e2:	1d18      	adds	r0, r3, #4
 800d9e4:	6010      	str	r0, [r2, #0]
 800d9e6:	0628      	lsls	r0, r5, #24
 800d9e8:	d501      	bpl.n	800d9ee <_printf_i+0xc2>
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	e002      	b.n	800d9f4 <_printf_i+0xc8>
 800d9ee:	0668      	lsls	r0, r5, #25
 800d9f0:	d5fb      	bpl.n	800d9ea <_printf_i+0xbe>
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	296f      	cmp	r1, #111	; 0x6f
 800d9f6:	bf14      	ite	ne
 800d9f8:	220a      	movne	r2, #10
 800d9fa:	2208      	moveq	r2, #8
 800d9fc:	4852      	ldr	r0, [pc, #328]	; (800db48 <_printf_i+0x21c>)
 800d9fe:	2100      	movs	r1, #0
 800da00:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da04:	6865      	ldr	r5, [r4, #4]
 800da06:	2d00      	cmp	r5, #0
 800da08:	60a5      	str	r5, [r4, #8]
 800da0a:	f2c0 8095 	blt.w	800db38 <_printf_i+0x20c>
 800da0e:	6821      	ldr	r1, [r4, #0]
 800da10:	f021 0104 	bic.w	r1, r1, #4
 800da14:	6021      	str	r1, [r4, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d13d      	bne.n	800da96 <_printf_i+0x16a>
 800da1a:	2d00      	cmp	r5, #0
 800da1c:	f040 808e 	bne.w	800db3c <_printf_i+0x210>
 800da20:	4665      	mov	r5, ip
 800da22:	2a08      	cmp	r2, #8
 800da24:	d10b      	bne.n	800da3e <_printf_i+0x112>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	07db      	lsls	r3, r3, #31
 800da2a:	d508      	bpl.n	800da3e <_printf_i+0x112>
 800da2c:	6923      	ldr	r3, [r4, #16]
 800da2e:	6862      	ldr	r2, [r4, #4]
 800da30:	429a      	cmp	r2, r3
 800da32:	bfde      	ittt	le
 800da34:	2330      	movle	r3, #48	; 0x30
 800da36:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da3a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da3e:	ebac 0305 	sub.w	r3, ip, r5
 800da42:	6123      	str	r3, [r4, #16]
 800da44:	f8cd 8000 	str.w	r8, [sp]
 800da48:	463b      	mov	r3, r7
 800da4a:	aa03      	add	r2, sp, #12
 800da4c:	4621      	mov	r1, r4
 800da4e:	4630      	mov	r0, r6
 800da50:	f7ff fef6 	bl	800d840 <_printf_common>
 800da54:	3001      	adds	r0, #1
 800da56:	d14d      	bne.n	800daf4 <_printf_i+0x1c8>
 800da58:	f04f 30ff 	mov.w	r0, #4294967295
 800da5c:	b005      	add	sp, #20
 800da5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da62:	4839      	ldr	r0, [pc, #228]	; (800db48 <_printf_i+0x21c>)
 800da64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800da68:	6813      	ldr	r3, [r2, #0]
 800da6a:	6821      	ldr	r1, [r4, #0]
 800da6c:	1d1d      	adds	r5, r3, #4
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	6015      	str	r5, [r2, #0]
 800da72:	060a      	lsls	r2, r1, #24
 800da74:	d50b      	bpl.n	800da8e <_printf_i+0x162>
 800da76:	07ca      	lsls	r2, r1, #31
 800da78:	bf44      	itt	mi
 800da7a:	f041 0120 	orrmi.w	r1, r1, #32
 800da7e:	6021      	strmi	r1, [r4, #0]
 800da80:	b91b      	cbnz	r3, 800da8a <_printf_i+0x15e>
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	f022 0220 	bic.w	r2, r2, #32
 800da88:	6022      	str	r2, [r4, #0]
 800da8a:	2210      	movs	r2, #16
 800da8c:	e7b7      	b.n	800d9fe <_printf_i+0xd2>
 800da8e:	064d      	lsls	r5, r1, #25
 800da90:	bf48      	it	mi
 800da92:	b29b      	uxthmi	r3, r3
 800da94:	e7ef      	b.n	800da76 <_printf_i+0x14a>
 800da96:	4665      	mov	r5, ip
 800da98:	fbb3 f1f2 	udiv	r1, r3, r2
 800da9c:	fb02 3311 	mls	r3, r2, r1, r3
 800daa0:	5cc3      	ldrb	r3, [r0, r3]
 800daa2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800daa6:	460b      	mov	r3, r1
 800daa8:	2900      	cmp	r1, #0
 800daaa:	d1f5      	bne.n	800da98 <_printf_i+0x16c>
 800daac:	e7b9      	b.n	800da22 <_printf_i+0xf6>
 800daae:	6813      	ldr	r3, [r2, #0]
 800dab0:	6825      	ldr	r5, [r4, #0]
 800dab2:	1d18      	adds	r0, r3, #4
 800dab4:	6961      	ldr	r1, [r4, #20]
 800dab6:	6010      	str	r0, [r2, #0]
 800dab8:	0628      	lsls	r0, r5, #24
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	d501      	bpl.n	800dac2 <_printf_i+0x196>
 800dabe:	6019      	str	r1, [r3, #0]
 800dac0:	e002      	b.n	800dac8 <_printf_i+0x19c>
 800dac2:	066a      	lsls	r2, r5, #25
 800dac4:	d5fb      	bpl.n	800dabe <_printf_i+0x192>
 800dac6:	8019      	strh	r1, [r3, #0]
 800dac8:	2300      	movs	r3, #0
 800daca:	4665      	mov	r5, ip
 800dacc:	6123      	str	r3, [r4, #16]
 800dace:	e7b9      	b.n	800da44 <_printf_i+0x118>
 800dad0:	6813      	ldr	r3, [r2, #0]
 800dad2:	1d19      	adds	r1, r3, #4
 800dad4:	6011      	str	r1, [r2, #0]
 800dad6:	681d      	ldr	r5, [r3, #0]
 800dad8:	6862      	ldr	r2, [r4, #4]
 800dada:	2100      	movs	r1, #0
 800dadc:	4628      	mov	r0, r5
 800dade:	f000 feb1 	bl	800e844 <memchr>
 800dae2:	b108      	cbz	r0, 800dae8 <_printf_i+0x1bc>
 800dae4:	1b40      	subs	r0, r0, r5
 800dae6:	6060      	str	r0, [r4, #4]
 800dae8:	6863      	ldr	r3, [r4, #4]
 800daea:	6123      	str	r3, [r4, #16]
 800daec:	2300      	movs	r3, #0
 800daee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daf2:	e7a7      	b.n	800da44 <_printf_i+0x118>
 800daf4:	6923      	ldr	r3, [r4, #16]
 800daf6:	462a      	mov	r2, r5
 800daf8:	4639      	mov	r1, r7
 800dafa:	4630      	mov	r0, r6
 800dafc:	47c0      	blx	r8
 800dafe:	3001      	adds	r0, #1
 800db00:	d0aa      	beq.n	800da58 <_printf_i+0x12c>
 800db02:	6823      	ldr	r3, [r4, #0]
 800db04:	079b      	lsls	r3, r3, #30
 800db06:	d413      	bmi.n	800db30 <_printf_i+0x204>
 800db08:	68e0      	ldr	r0, [r4, #12]
 800db0a:	9b03      	ldr	r3, [sp, #12]
 800db0c:	4298      	cmp	r0, r3
 800db0e:	bfb8      	it	lt
 800db10:	4618      	movlt	r0, r3
 800db12:	e7a3      	b.n	800da5c <_printf_i+0x130>
 800db14:	2301      	movs	r3, #1
 800db16:	464a      	mov	r2, r9
 800db18:	4639      	mov	r1, r7
 800db1a:	4630      	mov	r0, r6
 800db1c:	47c0      	blx	r8
 800db1e:	3001      	adds	r0, #1
 800db20:	d09a      	beq.n	800da58 <_printf_i+0x12c>
 800db22:	3501      	adds	r5, #1
 800db24:	68e3      	ldr	r3, [r4, #12]
 800db26:	9a03      	ldr	r2, [sp, #12]
 800db28:	1a9b      	subs	r3, r3, r2
 800db2a:	42ab      	cmp	r3, r5
 800db2c:	dcf2      	bgt.n	800db14 <_printf_i+0x1e8>
 800db2e:	e7eb      	b.n	800db08 <_printf_i+0x1dc>
 800db30:	2500      	movs	r5, #0
 800db32:	f104 0919 	add.w	r9, r4, #25
 800db36:	e7f5      	b.n	800db24 <_printf_i+0x1f8>
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1ac      	bne.n	800da96 <_printf_i+0x16a>
 800db3c:	7803      	ldrb	r3, [r0, #0]
 800db3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db46:	e76c      	b.n	800da22 <_printf_i+0xf6>
 800db48:	0801000a 	.word	0x0801000a
 800db4c:	0801001b 	.word	0x0801001b

0800db50 <siprintf>:
 800db50:	b40e      	push	{r1, r2, r3}
 800db52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800db56:	b500      	push	{lr}
 800db58:	b09c      	sub	sp, #112	; 0x70
 800db5a:	ab1d      	add	r3, sp, #116	; 0x74
 800db5c:	9002      	str	r0, [sp, #8]
 800db5e:	9006      	str	r0, [sp, #24]
 800db60:	9107      	str	r1, [sp, #28]
 800db62:	9104      	str	r1, [sp, #16]
 800db64:	4808      	ldr	r0, [pc, #32]	; (800db88 <siprintf+0x38>)
 800db66:	4909      	ldr	r1, [pc, #36]	; (800db8c <siprintf+0x3c>)
 800db68:	f853 2b04 	ldr.w	r2, [r3], #4
 800db6c:	9105      	str	r1, [sp, #20]
 800db6e:	6800      	ldr	r0, [r0, #0]
 800db70:	a902      	add	r1, sp, #8
 800db72:	9301      	str	r3, [sp, #4]
 800db74:	f001 fa6a 	bl	800f04c <_svfiprintf_r>
 800db78:	2200      	movs	r2, #0
 800db7a:	9b02      	ldr	r3, [sp, #8]
 800db7c:	701a      	strb	r2, [r3, #0]
 800db7e:	b01c      	add	sp, #112	; 0x70
 800db80:	f85d eb04 	ldr.w	lr, [sp], #4
 800db84:	b003      	add	sp, #12
 800db86:	4770      	bx	lr
 800db88:	20000064 	.word	0x20000064
 800db8c:	ffff0208 	.word	0xffff0208

0800db90 <quorem>:
 800db90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db94:	6903      	ldr	r3, [r0, #16]
 800db96:	690c      	ldr	r4, [r1, #16]
 800db98:	4680      	mov	r8, r0
 800db9a:	42a3      	cmp	r3, r4
 800db9c:	f2c0 8084 	blt.w	800dca8 <quorem+0x118>
 800dba0:	3c01      	subs	r4, #1
 800dba2:	f101 0714 	add.w	r7, r1, #20
 800dba6:	f100 0614 	add.w	r6, r0, #20
 800dbaa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dbae:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dbb2:	3501      	adds	r5, #1
 800dbb4:	fbb0 f5f5 	udiv	r5, r0, r5
 800dbb8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dbbc:	eb06 030c 	add.w	r3, r6, ip
 800dbc0:	eb07 090c 	add.w	r9, r7, ip
 800dbc4:	9301      	str	r3, [sp, #4]
 800dbc6:	b39d      	cbz	r5, 800dc30 <quorem+0xa0>
 800dbc8:	f04f 0a00 	mov.w	sl, #0
 800dbcc:	4638      	mov	r0, r7
 800dbce:	46b6      	mov	lr, r6
 800dbd0:	46d3      	mov	fp, sl
 800dbd2:	f850 2b04 	ldr.w	r2, [r0], #4
 800dbd6:	b293      	uxth	r3, r2
 800dbd8:	fb05 a303 	mla	r3, r5, r3, sl
 800dbdc:	0c12      	lsrs	r2, r2, #16
 800dbde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dbe2:	fb05 a202 	mla	r2, r5, r2, sl
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	ebab 0303 	sub.w	r3, fp, r3
 800dbec:	f8de b000 	ldr.w	fp, [lr]
 800dbf0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dbf4:	fa1f fb8b 	uxth.w	fp, fp
 800dbf8:	445b      	add	r3, fp
 800dbfa:	fa1f fb82 	uxth.w	fp, r2
 800dbfe:	f8de 2000 	ldr.w	r2, [lr]
 800dc02:	4581      	cmp	r9, r0
 800dc04:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dc08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc0c:	b29b      	uxth	r3, r3
 800dc0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc12:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dc16:	f84e 3b04 	str.w	r3, [lr], #4
 800dc1a:	d2da      	bcs.n	800dbd2 <quorem+0x42>
 800dc1c:	f856 300c 	ldr.w	r3, [r6, ip]
 800dc20:	b933      	cbnz	r3, 800dc30 <quorem+0xa0>
 800dc22:	9b01      	ldr	r3, [sp, #4]
 800dc24:	3b04      	subs	r3, #4
 800dc26:	429e      	cmp	r6, r3
 800dc28:	461a      	mov	r2, r3
 800dc2a:	d331      	bcc.n	800dc90 <quorem+0x100>
 800dc2c:	f8c8 4010 	str.w	r4, [r8, #16]
 800dc30:	4640      	mov	r0, r8
 800dc32:	f001 f835 	bl	800eca0 <__mcmp>
 800dc36:	2800      	cmp	r0, #0
 800dc38:	db26      	blt.n	800dc88 <quorem+0xf8>
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f04f 0c00 	mov.w	ip, #0
 800dc40:	3501      	adds	r5, #1
 800dc42:	f857 1b04 	ldr.w	r1, [r7], #4
 800dc46:	f8d0 e000 	ldr.w	lr, [r0]
 800dc4a:	b28b      	uxth	r3, r1
 800dc4c:	ebac 0303 	sub.w	r3, ip, r3
 800dc50:	fa1f f28e 	uxth.w	r2, lr
 800dc54:	4413      	add	r3, r2
 800dc56:	0c0a      	lsrs	r2, r1, #16
 800dc58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dc5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dc66:	45b9      	cmp	r9, r7
 800dc68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dc6c:	f840 3b04 	str.w	r3, [r0], #4
 800dc70:	d2e7      	bcs.n	800dc42 <quorem+0xb2>
 800dc72:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800dc76:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800dc7a:	b92a      	cbnz	r2, 800dc88 <quorem+0xf8>
 800dc7c:	3b04      	subs	r3, #4
 800dc7e:	429e      	cmp	r6, r3
 800dc80:	461a      	mov	r2, r3
 800dc82:	d30b      	bcc.n	800dc9c <quorem+0x10c>
 800dc84:	f8c8 4010 	str.w	r4, [r8, #16]
 800dc88:	4628      	mov	r0, r5
 800dc8a:	b003      	add	sp, #12
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	6812      	ldr	r2, [r2, #0]
 800dc92:	3b04      	subs	r3, #4
 800dc94:	2a00      	cmp	r2, #0
 800dc96:	d1c9      	bne.n	800dc2c <quorem+0x9c>
 800dc98:	3c01      	subs	r4, #1
 800dc9a:	e7c4      	b.n	800dc26 <quorem+0x96>
 800dc9c:	6812      	ldr	r2, [r2, #0]
 800dc9e:	3b04      	subs	r3, #4
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	d1ef      	bne.n	800dc84 <quorem+0xf4>
 800dca4:	3c01      	subs	r4, #1
 800dca6:	e7ea      	b.n	800dc7e <quorem+0xee>
 800dca8:	2000      	movs	r0, #0
 800dcaa:	e7ee      	b.n	800dc8a <quorem+0xfa>
 800dcac:	0000      	movs	r0, r0
	...

0800dcb0 <_dtoa_r>:
 800dcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcb4:	4616      	mov	r6, r2
 800dcb6:	461f      	mov	r7, r3
 800dcb8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dcba:	b095      	sub	sp, #84	; 0x54
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800dcc2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800dcc6:	b93d      	cbnz	r5, 800dcd8 <_dtoa_r+0x28>
 800dcc8:	2010      	movs	r0, #16
 800dcca:	f000 fdb3 	bl	800e834 <malloc>
 800dcce:	6260      	str	r0, [r4, #36]	; 0x24
 800dcd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dcd4:	6005      	str	r5, [r0, #0]
 800dcd6:	60c5      	str	r5, [r0, #12]
 800dcd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcda:	6819      	ldr	r1, [r3, #0]
 800dcdc:	b151      	cbz	r1, 800dcf4 <_dtoa_r+0x44>
 800dcde:	685a      	ldr	r2, [r3, #4]
 800dce0:	2301      	movs	r3, #1
 800dce2:	4093      	lsls	r3, r2
 800dce4:	604a      	str	r2, [r1, #4]
 800dce6:	608b      	str	r3, [r1, #8]
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 fdf8 	bl	800e8de <_Bfree>
 800dcee:	2200      	movs	r2, #0
 800dcf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcf2:	601a      	str	r2, [r3, #0]
 800dcf4:	1e3b      	subs	r3, r7, #0
 800dcf6:	bfaf      	iteee	ge
 800dcf8:	2300      	movge	r3, #0
 800dcfa:	2201      	movlt	r2, #1
 800dcfc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dd00:	9303      	strlt	r3, [sp, #12]
 800dd02:	bfac      	ite	ge
 800dd04:	f8c8 3000 	strge.w	r3, [r8]
 800dd08:	f8c8 2000 	strlt.w	r2, [r8]
 800dd0c:	4bae      	ldr	r3, [pc, #696]	; (800dfc8 <_dtoa_r+0x318>)
 800dd0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dd12:	ea33 0308 	bics.w	r3, r3, r8
 800dd16:	d11b      	bne.n	800dd50 <_dtoa_r+0xa0>
 800dd18:	f242 730f 	movw	r3, #9999	; 0x270f
 800dd1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	9b02      	ldr	r3, [sp, #8]
 800dd22:	b923      	cbnz	r3, 800dd2e <_dtoa_r+0x7e>
 800dd24:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dd28:	2800      	cmp	r0, #0
 800dd2a:	f000 8545 	beq.w	800e7b8 <_dtoa_r+0xb08>
 800dd2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd30:	b953      	cbnz	r3, 800dd48 <_dtoa_r+0x98>
 800dd32:	4ba6      	ldr	r3, [pc, #664]	; (800dfcc <_dtoa_r+0x31c>)
 800dd34:	e021      	b.n	800dd7a <_dtoa_r+0xca>
 800dd36:	4ba6      	ldr	r3, [pc, #664]	; (800dfd0 <_dtoa_r+0x320>)
 800dd38:	9306      	str	r3, [sp, #24]
 800dd3a:	3308      	adds	r3, #8
 800dd3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dd3e:	6013      	str	r3, [r2, #0]
 800dd40:	9806      	ldr	r0, [sp, #24]
 800dd42:	b015      	add	sp, #84	; 0x54
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd48:	4ba0      	ldr	r3, [pc, #640]	; (800dfcc <_dtoa_r+0x31c>)
 800dd4a:	9306      	str	r3, [sp, #24]
 800dd4c:	3303      	adds	r3, #3
 800dd4e:	e7f5      	b.n	800dd3c <_dtoa_r+0x8c>
 800dd50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dd54:	2200      	movs	r2, #0
 800dd56:	2300      	movs	r3, #0
 800dd58:	4630      	mov	r0, r6
 800dd5a:	4639      	mov	r1, r7
 800dd5c:	f7f2 fe60 	bl	8000a20 <__aeabi_dcmpeq>
 800dd60:	4682      	mov	sl, r0
 800dd62:	b160      	cbz	r0, 800dd7e <_dtoa_r+0xce>
 800dd64:	2301      	movs	r3, #1
 800dd66:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dd68:	6013      	str	r3, [r2, #0]
 800dd6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	f000 8520 	beq.w	800e7b2 <_dtoa_r+0xb02>
 800dd72:	4b98      	ldr	r3, [pc, #608]	; (800dfd4 <_dtoa_r+0x324>)
 800dd74:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800dd76:	6013      	str	r3, [r2, #0]
 800dd78:	3b01      	subs	r3, #1
 800dd7a:	9306      	str	r3, [sp, #24]
 800dd7c:	e7e0      	b.n	800dd40 <_dtoa_r+0x90>
 800dd7e:	ab12      	add	r3, sp, #72	; 0x48
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	ab13      	add	r3, sp, #76	; 0x4c
 800dd84:	9300      	str	r3, [sp, #0]
 800dd86:	4632      	mov	r2, r6
 800dd88:	463b      	mov	r3, r7
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f001 f800 	bl	800ed90 <__d2b>
 800dd90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dd94:	4683      	mov	fp, r0
 800dd96:	2d00      	cmp	r5, #0
 800dd98:	d07d      	beq.n	800de96 <_dtoa_r+0x1e6>
 800dd9a:	46b0      	mov	r8, r6
 800dd9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dda0:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800dda4:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800dda8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ddac:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4b89      	ldr	r3, [pc, #548]	; (800dfd8 <_dtoa_r+0x328>)
 800ddb4:	4640      	mov	r0, r8
 800ddb6:	4649      	mov	r1, r9
 800ddb8:	f7f2 fa12 	bl	80001e0 <__aeabi_dsub>
 800ddbc:	a37c      	add	r3, pc, #496	; (adr r3, 800dfb0 <_dtoa_r+0x300>)
 800ddbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddc2:	f7f2 fbc5 	bl	8000550 <__aeabi_dmul>
 800ddc6:	a37c      	add	r3, pc, #496	; (adr r3, 800dfb8 <_dtoa_r+0x308>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fa0a 	bl	80001e4 <__adddf3>
 800ddd0:	4606      	mov	r6, r0
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	460f      	mov	r7, r1
 800ddd6:	f7f2 fb51 	bl	800047c <__aeabi_i2d>
 800ddda:	a379      	add	r3, pc, #484	; (adr r3, 800dfc0 <_dtoa_r+0x310>)
 800dddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde0:	f7f2 fbb6 	bl	8000550 <__aeabi_dmul>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	4630      	mov	r0, r6
 800ddea:	4639      	mov	r1, r7
 800ddec:	f7f2 f9fa 	bl	80001e4 <__adddf3>
 800ddf0:	4606      	mov	r6, r0
 800ddf2:	460f      	mov	r7, r1
 800ddf4:	f7f2 fe5c 	bl	8000ab0 <__aeabi_d2iz>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	4682      	mov	sl, r0
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	4630      	mov	r0, r6
 800de00:	4639      	mov	r1, r7
 800de02:	f7f2 fe17 	bl	8000a34 <__aeabi_dcmplt>
 800de06:	b148      	cbz	r0, 800de1c <_dtoa_r+0x16c>
 800de08:	4650      	mov	r0, sl
 800de0a:	f7f2 fb37 	bl	800047c <__aeabi_i2d>
 800de0e:	4632      	mov	r2, r6
 800de10:	463b      	mov	r3, r7
 800de12:	f7f2 fe05 	bl	8000a20 <__aeabi_dcmpeq>
 800de16:	b908      	cbnz	r0, 800de1c <_dtoa_r+0x16c>
 800de18:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de1c:	f1ba 0f16 	cmp.w	sl, #22
 800de20:	d85a      	bhi.n	800ded8 <_dtoa_r+0x228>
 800de22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800de26:	496d      	ldr	r1, [pc, #436]	; (800dfdc <_dtoa_r+0x32c>)
 800de28:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800de2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de30:	f7f2 fe1e 	bl	8000a70 <__aeabi_dcmpgt>
 800de34:	2800      	cmp	r0, #0
 800de36:	d051      	beq.n	800dedc <_dtoa_r+0x22c>
 800de38:	2300      	movs	r3, #0
 800de3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de3e:	930d      	str	r3, [sp, #52]	; 0x34
 800de40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de42:	1b5d      	subs	r5, r3, r5
 800de44:	1e6b      	subs	r3, r5, #1
 800de46:	9307      	str	r3, [sp, #28]
 800de48:	bf43      	ittte	mi
 800de4a:	2300      	movmi	r3, #0
 800de4c:	f1c5 0901 	rsbmi	r9, r5, #1
 800de50:	9307      	strmi	r3, [sp, #28]
 800de52:	f04f 0900 	movpl.w	r9, #0
 800de56:	f1ba 0f00 	cmp.w	sl, #0
 800de5a:	db41      	blt.n	800dee0 <_dtoa_r+0x230>
 800de5c:	9b07      	ldr	r3, [sp, #28]
 800de5e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800de62:	4453      	add	r3, sl
 800de64:	9307      	str	r3, [sp, #28]
 800de66:	2300      	movs	r3, #0
 800de68:	9308      	str	r3, [sp, #32]
 800de6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de6c:	2b09      	cmp	r3, #9
 800de6e:	f200 808f 	bhi.w	800df90 <_dtoa_r+0x2e0>
 800de72:	2b05      	cmp	r3, #5
 800de74:	bfc4      	itt	gt
 800de76:	3b04      	subgt	r3, #4
 800de78:	931e      	strgt	r3, [sp, #120]	; 0x78
 800de7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800de7c:	bfc8      	it	gt
 800de7e:	2500      	movgt	r5, #0
 800de80:	f1a3 0302 	sub.w	r3, r3, #2
 800de84:	bfd8      	it	le
 800de86:	2501      	movle	r5, #1
 800de88:	2b03      	cmp	r3, #3
 800de8a:	f200 808d 	bhi.w	800dfa8 <_dtoa_r+0x2f8>
 800de8e:	e8df f003 	tbb	[pc, r3]
 800de92:	7d7b      	.short	0x7d7b
 800de94:	6f2f      	.short	0x6f2f
 800de96:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800de9a:	441d      	add	r5, r3
 800de9c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dea0:	2820      	cmp	r0, #32
 800dea2:	dd13      	ble.n	800decc <_dtoa_r+0x21c>
 800dea4:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dea8:	9b02      	ldr	r3, [sp, #8]
 800deaa:	fa08 f800 	lsl.w	r8, r8, r0
 800deae:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800deb2:	fa23 f000 	lsr.w	r0, r3, r0
 800deb6:	ea48 0000 	orr.w	r0, r8, r0
 800deba:	f7f2 facf 	bl	800045c <__aeabi_ui2d>
 800debe:	2301      	movs	r3, #1
 800dec0:	4680      	mov	r8, r0
 800dec2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800dec6:	3d01      	subs	r5, #1
 800dec8:	9310      	str	r3, [sp, #64]	; 0x40
 800deca:	e771      	b.n	800ddb0 <_dtoa_r+0x100>
 800decc:	9b02      	ldr	r3, [sp, #8]
 800dece:	f1c0 0020 	rsb	r0, r0, #32
 800ded2:	fa03 f000 	lsl.w	r0, r3, r0
 800ded6:	e7f0      	b.n	800deba <_dtoa_r+0x20a>
 800ded8:	2301      	movs	r3, #1
 800deda:	e7b0      	b.n	800de3e <_dtoa_r+0x18e>
 800dedc:	900d      	str	r0, [sp, #52]	; 0x34
 800dede:	e7af      	b.n	800de40 <_dtoa_r+0x190>
 800dee0:	f1ca 0300 	rsb	r3, sl, #0
 800dee4:	9308      	str	r3, [sp, #32]
 800dee6:	2300      	movs	r3, #0
 800dee8:	eba9 090a 	sub.w	r9, r9, sl
 800deec:	930c      	str	r3, [sp, #48]	; 0x30
 800deee:	e7bc      	b.n	800de6a <_dtoa_r+0x1ba>
 800def0:	2301      	movs	r3, #1
 800def2:	9309      	str	r3, [sp, #36]	; 0x24
 800def4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800def6:	2b00      	cmp	r3, #0
 800def8:	dd74      	ble.n	800dfe4 <_dtoa_r+0x334>
 800defa:	4698      	mov	r8, r3
 800defc:	9304      	str	r3, [sp, #16]
 800defe:	2200      	movs	r2, #0
 800df00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800df02:	6072      	str	r2, [r6, #4]
 800df04:	2204      	movs	r2, #4
 800df06:	f102 0014 	add.w	r0, r2, #20
 800df0a:	4298      	cmp	r0, r3
 800df0c:	6871      	ldr	r1, [r6, #4]
 800df0e:	d96e      	bls.n	800dfee <_dtoa_r+0x33e>
 800df10:	4620      	mov	r0, r4
 800df12:	f000 fcb0 	bl	800e876 <_Balloc>
 800df16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df18:	6030      	str	r0, [r6, #0]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	f1b8 0f0e 	cmp.w	r8, #14
 800df20:	9306      	str	r3, [sp, #24]
 800df22:	f200 80ed 	bhi.w	800e100 <_dtoa_r+0x450>
 800df26:	2d00      	cmp	r5, #0
 800df28:	f000 80ea 	beq.w	800e100 <_dtoa_r+0x450>
 800df2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df30:	f1ba 0f00 	cmp.w	sl, #0
 800df34:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800df38:	dd77      	ble.n	800e02a <_dtoa_r+0x37a>
 800df3a:	4a28      	ldr	r2, [pc, #160]	; (800dfdc <_dtoa_r+0x32c>)
 800df3c:	f00a 030f 	and.w	r3, sl, #15
 800df40:	ea4f 162a 	mov.w	r6, sl, asr #4
 800df44:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800df48:	06f0      	lsls	r0, r6, #27
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800df52:	d568      	bpl.n	800e026 <_dtoa_r+0x376>
 800df54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800df58:	4b21      	ldr	r3, [pc, #132]	; (800dfe0 <_dtoa_r+0x330>)
 800df5a:	2503      	movs	r5, #3
 800df5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df60:	f7f2 fc20 	bl	80007a4 <__aeabi_ddiv>
 800df64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df68:	f006 060f 	and.w	r6, r6, #15
 800df6c:	4f1c      	ldr	r7, [pc, #112]	; (800dfe0 <_dtoa_r+0x330>)
 800df6e:	e04f      	b.n	800e010 <_dtoa_r+0x360>
 800df70:	2301      	movs	r3, #1
 800df72:	9309      	str	r3, [sp, #36]	; 0x24
 800df74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800df76:	4453      	add	r3, sl
 800df78:	f103 0801 	add.w	r8, r3, #1
 800df7c:	9304      	str	r3, [sp, #16]
 800df7e:	4643      	mov	r3, r8
 800df80:	2b01      	cmp	r3, #1
 800df82:	bfb8      	it	lt
 800df84:	2301      	movlt	r3, #1
 800df86:	e7ba      	b.n	800defe <_dtoa_r+0x24e>
 800df88:	2300      	movs	r3, #0
 800df8a:	e7b2      	b.n	800def2 <_dtoa_r+0x242>
 800df8c:	2300      	movs	r3, #0
 800df8e:	e7f0      	b.n	800df72 <_dtoa_r+0x2c2>
 800df90:	2501      	movs	r5, #1
 800df92:	2300      	movs	r3, #0
 800df94:	9509      	str	r5, [sp, #36]	; 0x24
 800df96:	931e      	str	r3, [sp, #120]	; 0x78
 800df98:	f04f 33ff 	mov.w	r3, #4294967295
 800df9c:	2200      	movs	r2, #0
 800df9e:	9304      	str	r3, [sp, #16]
 800dfa0:	4698      	mov	r8, r3
 800dfa2:	2312      	movs	r3, #18
 800dfa4:	921f      	str	r2, [sp, #124]	; 0x7c
 800dfa6:	e7aa      	b.n	800defe <_dtoa_r+0x24e>
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	9309      	str	r3, [sp, #36]	; 0x24
 800dfac:	e7f4      	b.n	800df98 <_dtoa_r+0x2e8>
 800dfae:	bf00      	nop
 800dfb0:	636f4361 	.word	0x636f4361
 800dfb4:	3fd287a7 	.word	0x3fd287a7
 800dfb8:	8b60c8b3 	.word	0x8b60c8b3
 800dfbc:	3fc68a28 	.word	0x3fc68a28
 800dfc0:	509f79fb 	.word	0x509f79fb
 800dfc4:	3fd34413 	.word	0x3fd34413
 800dfc8:	7ff00000 	.word	0x7ff00000
 800dfcc:	08010035 	.word	0x08010035
 800dfd0:	0801002c 	.word	0x0801002c
 800dfd4:	08010009 	.word	0x08010009
 800dfd8:	3ff80000 	.word	0x3ff80000
 800dfdc:	08010068 	.word	0x08010068
 800dfe0:	08010040 	.word	0x08010040
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	9304      	str	r3, [sp, #16]
 800dfe8:	4698      	mov	r8, r3
 800dfea:	461a      	mov	r2, r3
 800dfec:	e7da      	b.n	800dfa4 <_dtoa_r+0x2f4>
 800dfee:	3101      	adds	r1, #1
 800dff0:	6071      	str	r1, [r6, #4]
 800dff2:	0052      	lsls	r2, r2, #1
 800dff4:	e787      	b.n	800df06 <_dtoa_r+0x256>
 800dff6:	07f1      	lsls	r1, r6, #31
 800dff8:	d508      	bpl.n	800e00c <_dtoa_r+0x35c>
 800dffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e002:	f7f2 faa5 	bl	8000550 <__aeabi_dmul>
 800e006:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e00a:	3501      	adds	r5, #1
 800e00c:	1076      	asrs	r6, r6, #1
 800e00e:	3708      	adds	r7, #8
 800e010:	2e00      	cmp	r6, #0
 800e012:	d1f0      	bne.n	800dff6 <_dtoa_r+0x346>
 800e014:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e01c:	f7f2 fbc2 	bl	80007a4 <__aeabi_ddiv>
 800e020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e024:	e01b      	b.n	800e05e <_dtoa_r+0x3ae>
 800e026:	2502      	movs	r5, #2
 800e028:	e7a0      	b.n	800df6c <_dtoa_r+0x2bc>
 800e02a:	f000 80a4 	beq.w	800e176 <_dtoa_r+0x4c6>
 800e02e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e032:	f1ca 0600 	rsb	r6, sl, #0
 800e036:	4ba0      	ldr	r3, [pc, #640]	; (800e2b8 <_dtoa_r+0x608>)
 800e038:	f006 020f 	and.w	r2, r6, #15
 800e03c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f7f2 fa84 	bl	8000550 <__aeabi_dmul>
 800e048:	2502      	movs	r5, #2
 800e04a:	2300      	movs	r3, #0
 800e04c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e050:	4f9a      	ldr	r7, [pc, #616]	; (800e2bc <_dtoa_r+0x60c>)
 800e052:	1136      	asrs	r6, r6, #4
 800e054:	2e00      	cmp	r6, #0
 800e056:	f040 8083 	bne.w	800e160 <_dtoa_r+0x4b0>
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1e0      	bne.n	800e020 <_dtoa_r+0x370>
 800e05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e060:	2b00      	cmp	r3, #0
 800e062:	f000 808a 	beq.w	800e17a <_dtoa_r+0x4ca>
 800e066:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e06a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e06e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e072:	2200      	movs	r2, #0
 800e074:	4b92      	ldr	r3, [pc, #584]	; (800e2c0 <_dtoa_r+0x610>)
 800e076:	f7f2 fcdd 	bl	8000a34 <__aeabi_dcmplt>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d07d      	beq.n	800e17a <_dtoa_r+0x4ca>
 800e07e:	f1b8 0f00 	cmp.w	r8, #0
 800e082:	d07a      	beq.n	800e17a <_dtoa_r+0x4ca>
 800e084:	9b04      	ldr	r3, [sp, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	dd36      	ble.n	800e0f8 <_dtoa_r+0x448>
 800e08a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e08e:	2200      	movs	r2, #0
 800e090:	4b8c      	ldr	r3, [pc, #560]	; (800e2c4 <_dtoa_r+0x614>)
 800e092:	f7f2 fa5d 	bl	8000550 <__aeabi_dmul>
 800e096:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e09a:	9e04      	ldr	r6, [sp, #16]
 800e09c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800e0a0:	3501      	adds	r5, #1
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	f7f2 f9ea 	bl	800047c <__aeabi_i2d>
 800e0a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0ac:	f7f2 fa50 	bl	8000550 <__aeabi_dmul>
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	4b85      	ldr	r3, [pc, #532]	; (800e2c8 <_dtoa_r+0x618>)
 800e0b4:	f7f2 f896 	bl	80001e4 <__adddf3>
 800e0b8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800e0bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e0c0:	950b      	str	r5, [sp, #44]	; 0x2c
 800e0c2:	2e00      	cmp	r6, #0
 800e0c4:	d15c      	bne.n	800e180 <_dtoa_r+0x4d0>
 800e0c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	4b7f      	ldr	r3, [pc, #508]	; (800e2cc <_dtoa_r+0x61c>)
 800e0ce:	f7f2 f887 	bl	80001e0 <__aeabi_dsub>
 800e0d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0da:	f7f2 fcc9 	bl	8000a70 <__aeabi_dcmpgt>
 800e0de:	2800      	cmp	r0, #0
 800e0e0:	f040 8281 	bne.w	800e5e6 <_dtoa_r+0x936>
 800e0e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e0ee:	f7f2 fca1 	bl	8000a34 <__aeabi_dcmplt>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	f040 8275 	bne.w	800e5e2 <_dtoa_r+0x932>
 800e0f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e0fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e100:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e102:	2b00      	cmp	r3, #0
 800e104:	f2c0 814b 	blt.w	800e39e <_dtoa_r+0x6ee>
 800e108:	f1ba 0f0e 	cmp.w	sl, #14
 800e10c:	f300 8147 	bgt.w	800e39e <_dtoa_r+0x6ee>
 800e110:	4b69      	ldr	r3, [pc, #420]	; (800e2b8 <_dtoa_r+0x608>)
 800e112:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e11a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e11e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e120:	2b00      	cmp	r3, #0
 800e122:	f280 80d7 	bge.w	800e2d4 <_dtoa_r+0x624>
 800e126:	f1b8 0f00 	cmp.w	r8, #0
 800e12a:	f300 80d3 	bgt.w	800e2d4 <_dtoa_r+0x624>
 800e12e:	f040 8257 	bne.w	800e5e0 <_dtoa_r+0x930>
 800e132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e136:	2200      	movs	r2, #0
 800e138:	4b64      	ldr	r3, [pc, #400]	; (800e2cc <_dtoa_r+0x61c>)
 800e13a:	f7f2 fa09 	bl	8000550 <__aeabi_dmul>
 800e13e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e142:	f7f2 fc8b 	bl	8000a5c <__aeabi_dcmpge>
 800e146:	4646      	mov	r6, r8
 800e148:	4647      	mov	r7, r8
 800e14a:	2800      	cmp	r0, #0
 800e14c:	f040 822d 	bne.w	800e5aa <_dtoa_r+0x8fa>
 800e150:	9b06      	ldr	r3, [sp, #24]
 800e152:	9a06      	ldr	r2, [sp, #24]
 800e154:	1c5d      	adds	r5, r3, #1
 800e156:	2331      	movs	r3, #49	; 0x31
 800e158:	f10a 0a01 	add.w	sl, sl, #1
 800e15c:	7013      	strb	r3, [r2, #0]
 800e15e:	e228      	b.n	800e5b2 <_dtoa_r+0x902>
 800e160:	07f2      	lsls	r2, r6, #31
 800e162:	d505      	bpl.n	800e170 <_dtoa_r+0x4c0>
 800e164:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e168:	f7f2 f9f2 	bl	8000550 <__aeabi_dmul>
 800e16c:	2301      	movs	r3, #1
 800e16e:	3501      	adds	r5, #1
 800e170:	1076      	asrs	r6, r6, #1
 800e172:	3708      	adds	r7, #8
 800e174:	e76e      	b.n	800e054 <_dtoa_r+0x3a4>
 800e176:	2502      	movs	r5, #2
 800e178:	e771      	b.n	800e05e <_dtoa_r+0x3ae>
 800e17a:	4657      	mov	r7, sl
 800e17c:	4646      	mov	r6, r8
 800e17e:	e790      	b.n	800e0a2 <_dtoa_r+0x3f2>
 800e180:	4b4d      	ldr	r3, [pc, #308]	; (800e2b8 <_dtoa_r+0x608>)
 800e182:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e186:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d048      	beq.n	800e222 <_dtoa_r+0x572>
 800e190:	4602      	mov	r2, r0
 800e192:	460b      	mov	r3, r1
 800e194:	2000      	movs	r0, #0
 800e196:	494e      	ldr	r1, [pc, #312]	; (800e2d0 <_dtoa_r+0x620>)
 800e198:	f7f2 fb04 	bl	80007a4 <__aeabi_ddiv>
 800e19c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1a0:	f7f2 f81e 	bl	80001e0 <__aeabi_dsub>
 800e1a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e1a8:	9d06      	ldr	r5, [sp, #24]
 800e1aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1ae:	f7f2 fc7f 	bl	8000ab0 <__aeabi_d2iz>
 800e1b2:	9011      	str	r0, [sp, #68]	; 0x44
 800e1b4:	f7f2 f962 	bl	800047c <__aeabi_i2d>
 800e1b8:	4602      	mov	r2, r0
 800e1ba:	460b      	mov	r3, r1
 800e1bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1c0:	f7f2 f80e 	bl	80001e0 <__aeabi_dsub>
 800e1c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e1c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ca:	3330      	adds	r3, #48	; 0x30
 800e1cc:	f805 3b01 	strb.w	r3, [r5], #1
 800e1d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1d4:	f7f2 fc2e 	bl	8000a34 <__aeabi_dcmplt>
 800e1d8:	2800      	cmp	r0, #0
 800e1da:	d163      	bne.n	800e2a4 <_dtoa_r+0x5f4>
 800e1dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	4937      	ldr	r1, [pc, #220]	; (800e2c0 <_dtoa_r+0x610>)
 800e1e4:	f7f1 fffc 	bl	80001e0 <__aeabi_dsub>
 800e1e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e1ec:	f7f2 fc22 	bl	8000a34 <__aeabi_dcmplt>
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	f040 80b5 	bne.w	800e360 <_dtoa_r+0x6b0>
 800e1f6:	9b06      	ldr	r3, [sp, #24]
 800e1f8:	1aeb      	subs	r3, r5, r3
 800e1fa:	429e      	cmp	r6, r3
 800e1fc:	f77f af7c 	ble.w	800e0f8 <_dtoa_r+0x448>
 800e200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e204:	2200      	movs	r2, #0
 800e206:	4b2f      	ldr	r3, [pc, #188]	; (800e2c4 <_dtoa_r+0x614>)
 800e208:	f7f2 f9a2 	bl	8000550 <__aeabi_dmul>
 800e20c:	2200      	movs	r2, #0
 800e20e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e216:	4b2b      	ldr	r3, [pc, #172]	; (800e2c4 <_dtoa_r+0x614>)
 800e218:	f7f2 f99a 	bl	8000550 <__aeabi_dmul>
 800e21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e220:	e7c3      	b.n	800e1aa <_dtoa_r+0x4fa>
 800e222:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e226:	f7f2 f993 	bl	8000550 <__aeabi_dmul>
 800e22a:	9b06      	ldr	r3, [sp, #24]
 800e22c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e230:	199d      	adds	r5, r3, r6
 800e232:	461e      	mov	r6, r3
 800e234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e238:	f7f2 fc3a 	bl	8000ab0 <__aeabi_d2iz>
 800e23c:	9011      	str	r0, [sp, #68]	; 0x44
 800e23e:	f7f2 f91d 	bl	800047c <__aeabi_i2d>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e24a:	f7f1 ffc9 	bl	80001e0 <__aeabi_dsub>
 800e24e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e254:	3330      	adds	r3, #48	; 0x30
 800e256:	f806 3b01 	strb.w	r3, [r6], #1
 800e25a:	42ae      	cmp	r6, r5
 800e25c:	f04f 0200 	mov.w	r2, #0
 800e260:	d124      	bne.n	800e2ac <_dtoa_r+0x5fc>
 800e262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e266:	4b1a      	ldr	r3, [pc, #104]	; (800e2d0 <_dtoa_r+0x620>)
 800e268:	f7f1 ffbc 	bl	80001e4 <__adddf3>
 800e26c:	4602      	mov	r2, r0
 800e26e:	460b      	mov	r3, r1
 800e270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e274:	f7f2 fbfc 	bl	8000a70 <__aeabi_dcmpgt>
 800e278:	2800      	cmp	r0, #0
 800e27a:	d171      	bne.n	800e360 <_dtoa_r+0x6b0>
 800e27c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e280:	2000      	movs	r0, #0
 800e282:	4913      	ldr	r1, [pc, #76]	; (800e2d0 <_dtoa_r+0x620>)
 800e284:	f7f1 ffac 	bl	80001e0 <__aeabi_dsub>
 800e288:	4602      	mov	r2, r0
 800e28a:	460b      	mov	r3, r1
 800e28c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e290:	f7f2 fbd0 	bl	8000a34 <__aeabi_dcmplt>
 800e294:	2800      	cmp	r0, #0
 800e296:	f43f af2f 	beq.w	800e0f8 <_dtoa_r+0x448>
 800e29a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e29e:	1e6a      	subs	r2, r5, #1
 800e2a0:	2b30      	cmp	r3, #48	; 0x30
 800e2a2:	d001      	beq.n	800e2a8 <_dtoa_r+0x5f8>
 800e2a4:	46ba      	mov	sl, r7
 800e2a6:	e04a      	b.n	800e33e <_dtoa_r+0x68e>
 800e2a8:	4615      	mov	r5, r2
 800e2aa:	e7f6      	b.n	800e29a <_dtoa_r+0x5ea>
 800e2ac:	4b05      	ldr	r3, [pc, #20]	; (800e2c4 <_dtoa_r+0x614>)
 800e2ae:	f7f2 f94f 	bl	8000550 <__aeabi_dmul>
 800e2b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2b6:	e7bd      	b.n	800e234 <_dtoa_r+0x584>
 800e2b8:	08010068 	.word	0x08010068
 800e2bc:	08010040 	.word	0x08010040
 800e2c0:	3ff00000 	.word	0x3ff00000
 800e2c4:	40240000 	.word	0x40240000
 800e2c8:	401c0000 	.word	0x401c0000
 800e2cc:	40140000 	.word	0x40140000
 800e2d0:	3fe00000 	.word	0x3fe00000
 800e2d4:	9d06      	ldr	r5, [sp, #24]
 800e2d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e2da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2de:	4630      	mov	r0, r6
 800e2e0:	4639      	mov	r1, r7
 800e2e2:	f7f2 fa5f 	bl	80007a4 <__aeabi_ddiv>
 800e2e6:	f7f2 fbe3 	bl	8000ab0 <__aeabi_d2iz>
 800e2ea:	4681      	mov	r9, r0
 800e2ec:	f7f2 f8c6 	bl	800047c <__aeabi_i2d>
 800e2f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2f4:	f7f2 f92c 	bl	8000550 <__aeabi_dmul>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	460b      	mov	r3, r1
 800e2fc:	4630      	mov	r0, r6
 800e2fe:	4639      	mov	r1, r7
 800e300:	f7f1 ff6e 	bl	80001e0 <__aeabi_dsub>
 800e304:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800e308:	f805 6b01 	strb.w	r6, [r5], #1
 800e30c:	9e06      	ldr	r6, [sp, #24]
 800e30e:	4602      	mov	r2, r0
 800e310:	1bae      	subs	r6, r5, r6
 800e312:	45b0      	cmp	r8, r6
 800e314:	460b      	mov	r3, r1
 800e316:	d135      	bne.n	800e384 <_dtoa_r+0x6d4>
 800e318:	f7f1 ff64 	bl	80001e4 <__adddf3>
 800e31c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e320:	4606      	mov	r6, r0
 800e322:	460f      	mov	r7, r1
 800e324:	f7f2 fba4 	bl	8000a70 <__aeabi_dcmpgt>
 800e328:	b9c8      	cbnz	r0, 800e35e <_dtoa_r+0x6ae>
 800e32a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e32e:	4630      	mov	r0, r6
 800e330:	4639      	mov	r1, r7
 800e332:	f7f2 fb75 	bl	8000a20 <__aeabi_dcmpeq>
 800e336:	b110      	cbz	r0, 800e33e <_dtoa_r+0x68e>
 800e338:	f019 0f01 	tst.w	r9, #1
 800e33c:	d10f      	bne.n	800e35e <_dtoa_r+0x6ae>
 800e33e:	4659      	mov	r1, fp
 800e340:	4620      	mov	r0, r4
 800e342:	f000 facc 	bl	800e8de <_Bfree>
 800e346:	2300      	movs	r3, #0
 800e348:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e34a:	702b      	strb	r3, [r5, #0]
 800e34c:	f10a 0301 	add.w	r3, sl, #1
 800e350:	6013      	str	r3, [r2, #0]
 800e352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e354:	2b00      	cmp	r3, #0
 800e356:	f43f acf3 	beq.w	800dd40 <_dtoa_r+0x90>
 800e35a:	601d      	str	r5, [r3, #0]
 800e35c:	e4f0      	b.n	800dd40 <_dtoa_r+0x90>
 800e35e:	4657      	mov	r7, sl
 800e360:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e364:	1e6b      	subs	r3, r5, #1
 800e366:	2a39      	cmp	r2, #57	; 0x39
 800e368:	d106      	bne.n	800e378 <_dtoa_r+0x6c8>
 800e36a:	9a06      	ldr	r2, [sp, #24]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d107      	bne.n	800e380 <_dtoa_r+0x6d0>
 800e370:	2330      	movs	r3, #48	; 0x30
 800e372:	7013      	strb	r3, [r2, #0]
 800e374:	4613      	mov	r3, r2
 800e376:	3701      	adds	r7, #1
 800e378:	781a      	ldrb	r2, [r3, #0]
 800e37a:	3201      	adds	r2, #1
 800e37c:	701a      	strb	r2, [r3, #0]
 800e37e:	e791      	b.n	800e2a4 <_dtoa_r+0x5f4>
 800e380:	461d      	mov	r5, r3
 800e382:	e7ed      	b.n	800e360 <_dtoa_r+0x6b0>
 800e384:	2200      	movs	r2, #0
 800e386:	4b99      	ldr	r3, [pc, #612]	; (800e5ec <_dtoa_r+0x93c>)
 800e388:	f7f2 f8e2 	bl	8000550 <__aeabi_dmul>
 800e38c:	2200      	movs	r2, #0
 800e38e:	2300      	movs	r3, #0
 800e390:	4606      	mov	r6, r0
 800e392:	460f      	mov	r7, r1
 800e394:	f7f2 fb44 	bl	8000a20 <__aeabi_dcmpeq>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d09e      	beq.n	800e2da <_dtoa_r+0x62a>
 800e39c:	e7cf      	b.n	800e33e <_dtoa_r+0x68e>
 800e39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3a0:	2a00      	cmp	r2, #0
 800e3a2:	f000 8088 	beq.w	800e4b6 <_dtoa_r+0x806>
 800e3a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e3a8:	2a01      	cmp	r2, #1
 800e3aa:	dc6d      	bgt.n	800e488 <_dtoa_r+0x7d8>
 800e3ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e3ae:	2a00      	cmp	r2, #0
 800e3b0:	d066      	beq.n	800e480 <_dtoa_r+0x7d0>
 800e3b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e3b6:	464d      	mov	r5, r9
 800e3b8:	9e08      	ldr	r6, [sp, #32]
 800e3ba:	9a07      	ldr	r2, [sp, #28]
 800e3bc:	2101      	movs	r1, #1
 800e3be:	441a      	add	r2, r3
 800e3c0:	4620      	mov	r0, r4
 800e3c2:	4499      	add	r9, r3
 800e3c4:	9207      	str	r2, [sp, #28]
 800e3c6:	f000 fb2a 	bl	800ea1e <__i2b>
 800e3ca:	4607      	mov	r7, r0
 800e3cc:	2d00      	cmp	r5, #0
 800e3ce:	dd0b      	ble.n	800e3e8 <_dtoa_r+0x738>
 800e3d0:	9b07      	ldr	r3, [sp, #28]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	dd08      	ble.n	800e3e8 <_dtoa_r+0x738>
 800e3d6:	42ab      	cmp	r3, r5
 800e3d8:	bfa8      	it	ge
 800e3da:	462b      	movge	r3, r5
 800e3dc:	9a07      	ldr	r2, [sp, #28]
 800e3de:	eba9 0903 	sub.w	r9, r9, r3
 800e3e2:	1aed      	subs	r5, r5, r3
 800e3e4:	1ad3      	subs	r3, r2, r3
 800e3e6:	9307      	str	r3, [sp, #28]
 800e3e8:	9b08      	ldr	r3, [sp, #32]
 800e3ea:	b1eb      	cbz	r3, 800e428 <_dtoa_r+0x778>
 800e3ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d065      	beq.n	800e4be <_dtoa_r+0x80e>
 800e3f2:	b18e      	cbz	r6, 800e418 <_dtoa_r+0x768>
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	4632      	mov	r2, r6
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f000 fbaf 	bl	800eb5c <__pow5mult>
 800e3fe:	465a      	mov	r2, fp
 800e400:	4601      	mov	r1, r0
 800e402:	4607      	mov	r7, r0
 800e404:	4620      	mov	r0, r4
 800e406:	f000 fb13 	bl	800ea30 <__multiply>
 800e40a:	4659      	mov	r1, fp
 800e40c:	900a      	str	r0, [sp, #40]	; 0x28
 800e40e:	4620      	mov	r0, r4
 800e410:	f000 fa65 	bl	800e8de <_Bfree>
 800e414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e416:	469b      	mov	fp, r3
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	1b9a      	subs	r2, r3, r6
 800e41c:	d004      	beq.n	800e428 <_dtoa_r+0x778>
 800e41e:	4659      	mov	r1, fp
 800e420:	4620      	mov	r0, r4
 800e422:	f000 fb9b 	bl	800eb5c <__pow5mult>
 800e426:	4683      	mov	fp, r0
 800e428:	2101      	movs	r1, #1
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 faf7 	bl	800ea1e <__i2b>
 800e430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e432:	4606      	mov	r6, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	f000 81c6 	beq.w	800e7c6 <_dtoa_r+0xb16>
 800e43a:	461a      	mov	r2, r3
 800e43c:	4601      	mov	r1, r0
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 fb8c 	bl	800eb5c <__pow5mult>
 800e444:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e446:	4606      	mov	r6, r0
 800e448:	2b01      	cmp	r3, #1
 800e44a:	dc3e      	bgt.n	800e4ca <_dtoa_r+0x81a>
 800e44c:	9b02      	ldr	r3, [sp, #8]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d137      	bne.n	800e4c2 <_dtoa_r+0x812>
 800e452:	9b03      	ldr	r3, [sp, #12]
 800e454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d134      	bne.n	800e4c6 <_dtoa_r+0x816>
 800e45c:	9b03      	ldr	r3, [sp, #12]
 800e45e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e462:	0d1b      	lsrs	r3, r3, #20
 800e464:	051b      	lsls	r3, r3, #20
 800e466:	b12b      	cbz	r3, 800e474 <_dtoa_r+0x7c4>
 800e468:	9b07      	ldr	r3, [sp, #28]
 800e46a:	f109 0901 	add.w	r9, r9, #1
 800e46e:	3301      	adds	r3, #1
 800e470:	9307      	str	r3, [sp, #28]
 800e472:	2301      	movs	r3, #1
 800e474:	9308      	str	r3, [sp, #32]
 800e476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d128      	bne.n	800e4ce <_dtoa_r+0x81e>
 800e47c:	2001      	movs	r0, #1
 800e47e:	e02e      	b.n	800e4de <_dtoa_r+0x82e>
 800e480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e482:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e486:	e796      	b.n	800e3b6 <_dtoa_r+0x706>
 800e488:	9b08      	ldr	r3, [sp, #32]
 800e48a:	f108 36ff 	add.w	r6, r8, #4294967295
 800e48e:	42b3      	cmp	r3, r6
 800e490:	bfb7      	itett	lt
 800e492:	9b08      	ldrlt	r3, [sp, #32]
 800e494:	1b9e      	subge	r6, r3, r6
 800e496:	1af2      	sublt	r2, r6, r3
 800e498:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800e49a:	bfbf      	itttt	lt
 800e49c:	9608      	strlt	r6, [sp, #32]
 800e49e:	189b      	addlt	r3, r3, r2
 800e4a0:	930c      	strlt	r3, [sp, #48]	; 0x30
 800e4a2:	2600      	movlt	r6, #0
 800e4a4:	f1b8 0f00 	cmp.w	r8, #0
 800e4a8:	bfb9      	ittee	lt
 800e4aa:	eba9 0508 	sublt.w	r5, r9, r8
 800e4ae:	2300      	movlt	r3, #0
 800e4b0:	464d      	movge	r5, r9
 800e4b2:	4643      	movge	r3, r8
 800e4b4:	e781      	b.n	800e3ba <_dtoa_r+0x70a>
 800e4b6:	9e08      	ldr	r6, [sp, #32]
 800e4b8:	464d      	mov	r5, r9
 800e4ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e4bc:	e786      	b.n	800e3cc <_dtoa_r+0x71c>
 800e4be:	9a08      	ldr	r2, [sp, #32]
 800e4c0:	e7ad      	b.n	800e41e <_dtoa_r+0x76e>
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	e7d6      	b.n	800e474 <_dtoa_r+0x7c4>
 800e4c6:	9b02      	ldr	r3, [sp, #8]
 800e4c8:	e7d4      	b.n	800e474 <_dtoa_r+0x7c4>
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9308      	str	r3, [sp, #32]
 800e4ce:	6933      	ldr	r3, [r6, #16]
 800e4d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e4d4:	6918      	ldr	r0, [r3, #16]
 800e4d6:	f000 fa54 	bl	800e982 <__hi0bits>
 800e4da:	f1c0 0020 	rsb	r0, r0, #32
 800e4de:	9b07      	ldr	r3, [sp, #28]
 800e4e0:	4418      	add	r0, r3
 800e4e2:	f010 001f 	ands.w	r0, r0, #31
 800e4e6:	d047      	beq.n	800e578 <_dtoa_r+0x8c8>
 800e4e8:	f1c0 0320 	rsb	r3, r0, #32
 800e4ec:	2b04      	cmp	r3, #4
 800e4ee:	dd3b      	ble.n	800e568 <_dtoa_r+0x8b8>
 800e4f0:	9b07      	ldr	r3, [sp, #28]
 800e4f2:	f1c0 001c 	rsb	r0, r0, #28
 800e4f6:	4481      	add	r9, r0
 800e4f8:	4405      	add	r5, r0
 800e4fa:	4403      	add	r3, r0
 800e4fc:	9307      	str	r3, [sp, #28]
 800e4fe:	f1b9 0f00 	cmp.w	r9, #0
 800e502:	dd05      	ble.n	800e510 <_dtoa_r+0x860>
 800e504:	4659      	mov	r1, fp
 800e506:	464a      	mov	r2, r9
 800e508:	4620      	mov	r0, r4
 800e50a:	f000 fb75 	bl	800ebf8 <__lshift>
 800e50e:	4683      	mov	fp, r0
 800e510:	9b07      	ldr	r3, [sp, #28]
 800e512:	2b00      	cmp	r3, #0
 800e514:	dd05      	ble.n	800e522 <_dtoa_r+0x872>
 800e516:	4631      	mov	r1, r6
 800e518:	461a      	mov	r2, r3
 800e51a:	4620      	mov	r0, r4
 800e51c:	f000 fb6c 	bl	800ebf8 <__lshift>
 800e520:	4606      	mov	r6, r0
 800e522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e524:	b353      	cbz	r3, 800e57c <_dtoa_r+0x8cc>
 800e526:	4631      	mov	r1, r6
 800e528:	4658      	mov	r0, fp
 800e52a:	f000 fbb9 	bl	800eca0 <__mcmp>
 800e52e:	2800      	cmp	r0, #0
 800e530:	da24      	bge.n	800e57c <_dtoa_r+0x8cc>
 800e532:	2300      	movs	r3, #0
 800e534:	4659      	mov	r1, fp
 800e536:	220a      	movs	r2, #10
 800e538:	4620      	mov	r0, r4
 800e53a:	f000 f9e7 	bl	800e90c <__multadd>
 800e53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e540:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e544:	4683      	mov	fp, r0
 800e546:	2b00      	cmp	r3, #0
 800e548:	f000 8144 	beq.w	800e7d4 <_dtoa_r+0xb24>
 800e54c:	2300      	movs	r3, #0
 800e54e:	4639      	mov	r1, r7
 800e550:	220a      	movs	r2, #10
 800e552:	4620      	mov	r0, r4
 800e554:	f000 f9da 	bl	800e90c <__multadd>
 800e558:	9b04      	ldr	r3, [sp, #16]
 800e55a:	4607      	mov	r7, r0
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	dc4d      	bgt.n	800e5fc <_dtoa_r+0x94c>
 800e560:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e562:	2b02      	cmp	r3, #2
 800e564:	dd4a      	ble.n	800e5fc <_dtoa_r+0x94c>
 800e566:	e011      	b.n	800e58c <_dtoa_r+0x8dc>
 800e568:	d0c9      	beq.n	800e4fe <_dtoa_r+0x84e>
 800e56a:	9a07      	ldr	r2, [sp, #28]
 800e56c:	331c      	adds	r3, #28
 800e56e:	441a      	add	r2, r3
 800e570:	4499      	add	r9, r3
 800e572:	441d      	add	r5, r3
 800e574:	4613      	mov	r3, r2
 800e576:	e7c1      	b.n	800e4fc <_dtoa_r+0x84c>
 800e578:	4603      	mov	r3, r0
 800e57a:	e7f6      	b.n	800e56a <_dtoa_r+0x8ba>
 800e57c:	f1b8 0f00 	cmp.w	r8, #0
 800e580:	dc36      	bgt.n	800e5f0 <_dtoa_r+0x940>
 800e582:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e584:	2b02      	cmp	r3, #2
 800e586:	dd33      	ble.n	800e5f0 <_dtoa_r+0x940>
 800e588:	f8cd 8010 	str.w	r8, [sp, #16]
 800e58c:	9b04      	ldr	r3, [sp, #16]
 800e58e:	b963      	cbnz	r3, 800e5aa <_dtoa_r+0x8fa>
 800e590:	4631      	mov	r1, r6
 800e592:	2205      	movs	r2, #5
 800e594:	4620      	mov	r0, r4
 800e596:	f000 f9b9 	bl	800e90c <__multadd>
 800e59a:	4601      	mov	r1, r0
 800e59c:	4606      	mov	r6, r0
 800e59e:	4658      	mov	r0, fp
 800e5a0:	f000 fb7e 	bl	800eca0 <__mcmp>
 800e5a4:	2800      	cmp	r0, #0
 800e5a6:	f73f add3 	bgt.w	800e150 <_dtoa_r+0x4a0>
 800e5aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5ac:	9d06      	ldr	r5, [sp, #24]
 800e5ae:	ea6f 0a03 	mvn.w	sl, r3
 800e5b2:	f04f 0900 	mov.w	r9, #0
 800e5b6:	4631      	mov	r1, r6
 800e5b8:	4620      	mov	r0, r4
 800e5ba:	f000 f990 	bl	800e8de <_Bfree>
 800e5be:	2f00      	cmp	r7, #0
 800e5c0:	f43f aebd 	beq.w	800e33e <_dtoa_r+0x68e>
 800e5c4:	f1b9 0f00 	cmp.w	r9, #0
 800e5c8:	d005      	beq.n	800e5d6 <_dtoa_r+0x926>
 800e5ca:	45b9      	cmp	r9, r7
 800e5cc:	d003      	beq.n	800e5d6 <_dtoa_r+0x926>
 800e5ce:	4649      	mov	r1, r9
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	f000 f984 	bl	800e8de <_Bfree>
 800e5d6:	4639      	mov	r1, r7
 800e5d8:	4620      	mov	r0, r4
 800e5da:	f000 f980 	bl	800e8de <_Bfree>
 800e5de:	e6ae      	b.n	800e33e <_dtoa_r+0x68e>
 800e5e0:	2600      	movs	r6, #0
 800e5e2:	4637      	mov	r7, r6
 800e5e4:	e7e1      	b.n	800e5aa <_dtoa_r+0x8fa>
 800e5e6:	46ba      	mov	sl, r7
 800e5e8:	4637      	mov	r7, r6
 800e5ea:	e5b1      	b.n	800e150 <_dtoa_r+0x4a0>
 800e5ec:	40240000 	.word	0x40240000
 800e5f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	f000 80f3 	beq.w	800e7e2 <_dtoa_r+0xb32>
 800e5fc:	2d00      	cmp	r5, #0
 800e5fe:	dd05      	ble.n	800e60c <_dtoa_r+0x95c>
 800e600:	4639      	mov	r1, r7
 800e602:	462a      	mov	r2, r5
 800e604:	4620      	mov	r0, r4
 800e606:	f000 faf7 	bl	800ebf8 <__lshift>
 800e60a:	4607      	mov	r7, r0
 800e60c:	9b08      	ldr	r3, [sp, #32]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d04c      	beq.n	800e6ac <_dtoa_r+0x9fc>
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	4620      	mov	r0, r4
 800e616:	f000 f92e 	bl	800e876 <_Balloc>
 800e61a:	4605      	mov	r5, r0
 800e61c:	693a      	ldr	r2, [r7, #16]
 800e61e:	f107 010c 	add.w	r1, r7, #12
 800e622:	3202      	adds	r2, #2
 800e624:	0092      	lsls	r2, r2, #2
 800e626:	300c      	adds	r0, #12
 800e628:	f000 f91a 	bl	800e860 <memcpy>
 800e62c:	2201      	movs	r2, #1
 800e62e:	4629      	mov	r1, r5
 800e630:	4620      	mov	r0, r4
 800e632:	f000 fae1 	bl	800ebf8 <__lshift>
 800e636:	46b9      	mov	r9, r7
 800e638:	4607      	mov	r7, r0
 800e63a:	9b06      	ldr	r3, [sp, #24]
 800e63c:	9307      	str	r3, [sp, #28]
 800e63e:	9b02      	ldr	r3, [sp, #8]
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	9308      	str	r3, [sp, #32]
 800e646:	4631      	mov	r1, r6
 800e648:	4658      	mov	r0, fp
 800e64a:	f7ff faa1 	bl	800db90 <quorem>
 800e64e:	4649      	mov	r1, r9
 800e650:	4605      	mov	r5, r0
 800e652:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e656:	4658      	mov	r0, fp
 800e658:	f000 fb22 	bl	800eca0 <__mcmp>
 800e65c:	463a      	mov	r2, r7
 800e65e:	9002      	str	r0, [sp, #8]
 800e660:	4631      	mov	r1, r6
 800e662:	4620      	mov	r0, r4
 800e664:	f000 fb36 	bl	800ecd4 <__mdiff>
 800e668:	68c3      	ldr	r3, [r0, #12]
 800e66a:	4602      	mov	r2, r0
 800e66c:	bb03      	cbnz	r3, 800e6b0 <_dtoa_r+0xa00>
 800e66e:	4601      	mov	r1, r0
 800e670:	9009      	str	r0, [sp, #36]	; 0x24
 800e672:	4658      	mov	r0, fp
 800e674:	f000 fb14 	bl	800eca0 <__mcmp>
 800e678:	4603      	mov	r3, r0
 800e67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e67c:	4611      	mov	r1, r2
 800e67e:	4620      	mov	r0, r4
 800e680:	9309      	str	r3, [sp, #36]	; 0x24
 800e682:	f000 f92c 	bl	800e8de <_Bfree>
 800e686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e688:	b9a3      	cbnz	r3, 800e6b4 <_dtoa_r+0xa04>
 800e68a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e68c:	b992      	cbnz	r2, 800e6b4 <_dtoa_r+0xa04>
 800e68e:	9a08      	ldr	r2, [sp, #32]
 800e690:	b982      	cbnz	r2, 800e6b4 <_dtoa_r+0xa04>
 800e692:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e696:	d029      	beq.n	800e6ec <_dtoa_r+0xa3c>
 800e698:	9b02      	ldr	r3, [sp, #8]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	dd01      	ble.n	800e6a2 <_dtoa_r+0x9f2>
 800e69e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e6a2:	9b07      	ldr	r3, [sp, #28]
 800e6a4:	1c5d      	adds	r5, r3, #1
 800e6a6:	f883 8000 	strb.w	r8, [r3]
 800e6aa:	e784      	b.n	800e5b6 <_dtoa_r+0x906>
 800e6ac:	4638      	mov	r0, r7
 800e6ae:	e7c2      	b.n	800e636 <_dtoa_r+0x986>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	e7e3      	b.n	800e67c <_dtoa_r+0x9cc>
 800e6b4:	9a02      	ldr	r2, [sp, #8]
 800e6b6:	2a00      	cmp	r2, #0
 800e6b8:	db04      	blt.n	800e6c4 <_dtoa_r+0xa14>
 800e6ba:	d123      	bne.n	800e704 <_dtoa_r+0xa54>
 800e6bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e6be:	bb0a      	cbnz	r2, 800e704 <_dtoa_r+0xa54>
 800e6c0:	9a08      	ldr	r2, [sp, #32]
 800e6c2:	b9fa      	cbnz	r2, 800e704 <_dtoa_r+0xa54>
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	ddec      	ble.n	800e6a2 <_dtoa_r+0x9f2>
 800e6c8:	4659      	mov	r1, fp
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	4620      	mov	r0, r4
 800e6ce:	f000 fa93 	bl	800ebf8 <__lshift>
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	4683      	mov	fp, r0
 800e6d6:	f000 fae3 	bl	800eca0 <__mcmp>
 800e6da:	2800      	cmp	r0, #0
 800e6dc:	dc03      	bgt.n	800e6e6 <_dtoa_r+0xa36>
 800e6de:	d1e0      	bne.n	800e6a2 <_dtoa_r+0x9f2>
 800e6e0:	f018 0f01 	tst.w	r8, #1
 800e6e4:	d0dd      	beq.n	800e6a2 <_dtoa_r+0x9f2>
 800e6e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e6ea:	d1d8      	bne.n	800e69e <_dtoa_r+0x9ee>
 800e6ec:	9b07      	ldr	r3, [sp, #28]
 800e6ee:	9a07      	ldr	r2, [sp, #28]
 800e6f0:	1c5d      	adds	r5, r3, #1
 800e6f2:	2339      	movs	r3, #57	; 0x39
 800e6f4:	7013      	strb	r3, [r2, #0]
 800e6f6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e6fa:	1e6a      	subs	r2, r5, #1
 800e6fc:	2b39      	cmp	r3, #57	; 0x39
 800e6fe:	d04d      	beq.n	800e79c <_dtoa_r+0xaec>
 800e700:	3301      	adds	r3, #1
 800e702:	e052      	b.n	800e7aa <_dtoa_r+0xafa>
 800e704:	9a07      	ldr	r2, [sp, #28]
 800e706:	2b00      	cmp	r3, #0
 800e708:	f102 0501 	add.w	r5, r2, #1
 800e70c:	dd06      	ble.n	800e71c <_dtoa_r+0xa6c>
 800e70e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e712:	d0eb      	beq.n	800e6ec <_dtoa_r+0xa3c>
 800e714:	f108 0801 	add.w	r8, r8, #1
 800e718:	9b07      	ldr	r3, [sp, #28]
 800e71a:	e7c4      	b.n	800e6a6 <_dtoa_r+0x9f6>
 800e71c:	9b06      	ldr	r3, [sp, #24]
 800e71e:	9a04      	ldr	r2, [sp, #16]
 800e720:	1aeb      	subs	r3, r5, r3
 800e722:	4293      	cmp	r3, r2
 800e724:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e728:	d021      	beq.n	800e76e <_dtoa_r+0xabe>
 800e72a:	4659      	mov	r1, fp
 800e72c:	2300      	movs	r3, #0
 800e72e:	220a      	movs	r2, #10
 800e730:	4620      	mov	r0, r4
 800e732:	f000 f8eb 	bl	800e90c <__multadd>
 800e736:	45b9      	cmp	r9, r7
 800e738:	4683      	mov	fp, r0
 800e73a:	f04f 0300 	mov.w	r3, #0
 800e73e:	f04f 020a 	mov.w	r2, #10
 800e742:	4649      	mov	r1, r9
 800e744:	4620      	mov	r0, r4
 800e746:	d105      	bne.n	800e754 <_dtoa_r+0xaa4>
 800e748:	f000 f8e0 	bl	800e90c <__multadd>
 800e74c:	4681      	mov	r9, r0
 800e74e:	4607      	mov	r7, r0
 800e750:	9507      	str	r5, [sp, #28]
 800e752:	e778      	b.n	800e646 <_dtoa_r+0x996>
 800e754:	f000 f8da 	bl	800e90c <__multadd>
 800e758:	4639      	mov	r1, r7
 800e75a:	4681      	mov	r9, r0
 800e75c:	2300      	movs	r3, #0
 800e75e:	220a      	movs	r2, #10
 800e760:	4620      	mov	r0, r4
 800e762:	f000 f8d3 	bl	800e90c <__multadd>
 800e766:	4607      	mov	r7, r0
 800e768:	e7f2      	b.n	800e750 <_dtoa_r+0xaa0>
 800e76a:	f04f 0900 	mov.w	r9, #0
 800e76e:	4659      	mov	r1, fp
 800e770:	2201      	movs	r2, #1
 800e772:	4620      	mov	r0, r4
 800e774:	f000 fa40 	bl	800ebf8 <__lshift>
 800e778:	4631      	mov	r1, r6
 800e77a:	4683      	mov	fp, r0
 800e77c:	f000 fa90 	bl	800eca0 <__mcmp>
 800e780:	2800      	cmp	r0, #0
 800e782:	dcb8      	bgt.n	800e6f6 <_dtoa_r+0xa46>
 800e784:	d102      	bne.n	800e78c <_dtoa_r+0xadc>
 800e786:	f018 0f01 	tst.w	r8, #1
 800e78a:	d1b4      	bne.n	800e6f6 <_dtoa_r+0xa46>
 800e78c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e790:	1e6a      	subs	r2, r5, #1
 800e792:	2b30      	cmp	r3, #48	; 0x30
 800e794:	f47f af0f 	bne.w	800e5b6 <_dtoa_r+0x906>
 800e798:	4615      	mov	r5, r2
 800e79a:	e7f7      	b.n	800e78c <_dtoa_r+0xadc>
 800e79c:	9b06      	ldr	r3, [sp, #24]
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d105      	bne.n	800e7ae <_dtoa_r+0xafe>
 800e7a2:	2331      	movs	r3, #49	; 0x31
 800e7a4:	9a06      	ldr	r2, [sp, #24]
 800e7a6:	f10a 0a01 	add.w	sl, sl, #1
 800e7aa:	7013      	strb	r3, [r2, #0]
 800e7ac:	e703      	b.n	800e5b6 <_dtoa_r+0x906>
 800e7ae:	4615      	mov	r5, r2
 800e7b0:	e7a1      	b.n	800e6f6 <_dtoa_r+0xa46>
 800e7b2:	4b17      	ldr	r3, [pc, #92]	; (800e810 <_dtoa_r+0xb60>)
 800e7b4:	f7ff bae1 	b.w	800dd7a <_dtoa_r+0xca>
 800e7b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f47f aabb 	bne.w	800dd36 <_dtoa_r+0x86>
 800e7c0:	4b14      	ldr	r3, [pc, #80]	; (800e814 <_dtoa_r+0xb64>)
 800e7c2:	f7ff bada 	b.w	800dd7a <_dtoa_r+0xca>
 800e7c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e7c8:	2b01      	cmp	r3, #1
 800e7ca:	f77f ae3f 	ble.w	800e44c <_dtoa_r+0x79c>
 800e7ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e7d0:	9308      	str	r3, [sp, #32]
 800e7d2:	e653      	b.n	800e47c <_dtoa_r+0x7cc>
 800e7d4:	9b04      	ldr	r3, [sp, #16]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	dc03      	bgt.n	800e7e2 <_dtoa_r+0xb32>
 800e7da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e7dc:	2b02      	cmp	r3, #2
 800e7de:	f73f aed5 	bgt.w	800e58c <_dtoa_r+0x8dc>
 800e7e2:	9d06      	ldr	r5, [sp, #24]
 800e7e4:	4631      	mov	r1, r6
 800e7e6:	4658      	mov	r0, fp
 800e7e8:	f7ff f9d2 	bl	800db90 <quorem>
 800e7ec:	9b06      	ldr	r3, [sp, #24]
 800e7ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e7f2:	f805 8b01 	strb.w	r8, [r5], #1
 800e7f6:	9a04      	ldr	r2, [sp, #16]
 800e7f8:	1aeb      	subs	r3, r5, r3
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	ddb5      	ble.n	800e76a <_dtoa_r+0xaba>
 800e7fe:	4659      	mov	r1, fp
 800e800:	2300      	movs	r3, #0
 800e802:	220a      	movs	r2, #10
 800e804:	4620      	mov	r0, r4
 800e806:	f000 f881 	bl	800e90c <__multadd>
 800e80a:	4683      	mov	fp, r0
 800e80c:	e7ea      	b.n	800e7e4 <_dtoa_r+0xb34>
 800e80e:	bf00      	nop
 800e810:	08010008 	.word	0x08010008
 800e814:	0801002c 	.word	0x0801002c

0800e818 <_localeconv_r>:
 800e818:	4b04      	ldr	r3, [pc, #16]	; (800e82c <_localeconv_r+0x14>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6a18      	ldr	r0, [r3, #32]
 800e81e:	4b04      	ldr	r3, [pc, #16]	; (800e830 <_localeconv_r+0x18>)
 800e820:	2800      	cmp	r0, #0
 800e822:	bf08      	it	eq
 800e824:	4618      	moveq	r0, r3
 800e826:	30f0      	adds	r0, #240	; 0xf0
 800e828:	4770      	bx	lr
 800e82a:	bf00      	nop
 800e82c:	20000064 	.word	0x20000064
 800e830:	200000c8 	.word	0x200000c8

0800e834 <malloc>:
 800e834:	4b02      	ldr	r3, [pc, #8]	; (800e840 <malloc+0xc>)
 800e836:	4601      	mov	r1, r0
 800e838:	6818      	ldr	r0, [r3, #0]
 800e83a:	f000 bb53 	b.w	800eee4 <_malloc_r>
 800e83e:	bf00      	nop
 800e840:	20000064 	.word	0x20000064

0800e844 <memchr>:
 800e844:	b510      	push	{r4, lr}
 800e846:	b2c9      	uxtb	r1, r1
 800e848:	4402      	add	r2, r0
 800e84a:	4290      	cmp	r0, r2
 800e84c:	4603      	mov	r3, r0
 800e84e:	d101      	bne.n	800e854 <memchr+0x10>
 800e850:	2300      	movs	r3, #0
 800e852:	e003      	b.n	800e85c <memchr+0x18>
 800e854:	781c      	ldrb	r4, [r3, #0]
 800e856:	3001      	adds	r0, #1
 800e858:	428c      	cmp	r4, r1
 800e85a:	d1f6      	bne.n	800e84a <memchr+0x6>
 800e85c:	4618      	mov	r0, r3
 800e85e:	bd10      	pop	{r4, pc}

0800e860 <memcpy>:
 800e860:	b510      	push	{r4, lr}
 800e862:	1e43      	subs	r3, r0, #1
 800e864:	440a      	add	r2, r1
 800e866:	4291      	cmp	r1, r2
 800e868:	d100      	bne.n	800e86c <memcpy+0xc>
 800e86a:	bd10      	pop	{r4, pc}
 800e86c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e870:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e874:	e7f7      	b.n	800e866 <memcpy+0x6>

0800e876 <_Balloc>:
 800e876:	b570      	push	{r4, r5, r6, lr}
 800e878:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e87a:	4604      	mov	r4, r0
 800e87c:	460e      	mov	r6, r1
 800e87e:	b93d      	cbnz	r5, 800e890 <_Balloc+0x1a>
 800e880:	2010      	movs	r0, #16
 800e882:	f7ff ffd7 	bl	800e834 <malloc>
 800e886:	6260      	str	r0, [r4, #36]	; 0x24
 800e888:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e88c:	6005      	str	r5, [r0, #0]
 800e88e:	60c5      	str	r5, [r0, #12]
 800e890:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e892:	68eb      	ldr	r3, [r5, #12]
 800e894:	b183      	cbz	r3, 800e8b8 <_Balloc+0x42>
 800e896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e89e:	b9b8      	cbnz	r0, 800e8d0 <_Balloc+0x5a>
 800e8a0:	2101      	movs	r1, #1
 800e8a2:	fa01 f506 	lsl.w	r5, r1, r6
 800e8a6:	1d6a      	adds	r2, r5, #5
 800e8a8:	0092      	lsls	r2, r2, #2
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 fabf 	bl	800ee2e <_calloc_r>
 800e8b0:	b160      	cbz	r0, 800e8cc <_Balloc+0x56>
 800e8b2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e8b6:	e00e      	b.n	800e8d6 <_Balloc+0x60>
 800e8b8:	2221      	movs	r2, #33	; 0x21
 800e8ba:	2104      	movs	r1, #4
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f000 fab6 	bl	800ee2e <_calloc_r>
 800e8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e8c4:	60e8      	str	r0, [r5, #12]
 800e8c6:	68db      	ldr	r3, [r3, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d1e4      	bne.n	800e896 <_Balloc+0x20>
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	bd70      	pop	{r4, r5, r6, pc}
 800e8d0:	6802      	ldr	r2, [r0, #0]
 800e8d2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e8dc:	e7f7      	b.n	800e8ce <_Balloc+0x58>

0800e8de <_Bfree>:
 800e8de:	b570      	push	{r4, r5, r6, lr}
 800e8e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e8e2:	4606      	mov	r6, r0
 800e8e4:	460d      	mov	r5, r1
 800e8e6:	b93c      	cbnz	r4, 800e8f8 <_Bfree+0x1a>
 800e8e8:	2010      	movs	r0, #16
 800e8ea:	f7ff ffa3 	bl	800e834 <malloc>
 800e8ee:	6270      	str	r0, [r6, #36]	; 0x24
 800e8f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e8f4:	6004      	str	r4, [r0, #0]
 800e8f6:	60c4      	str	r4, [r0, #12]
 800e8f8:	b13d      	cbz	r5, 800e90a <_Bfree+0x2c>
 800e8fa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e8fc:	686a      	ldr	r2, [r5, #4]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e904:	6029      	str	r1, [r5, #0]
 800e906:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e90a:	bd70      	pop	{r4, r5, r6, pc}

0800e90c <__multadd>:
 800e90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e910:	461f      	mov	r7, r3
 800e912:	4606      	mov	r6, r0
 800e914:	460c      	mov	r4, r1
 800e916:	2300      	movs	r3, #0
 800e918:	690d      	ldr	r5, [r1, #16]
 800e91a:	f101 0c14 	add.w	ip, r1, #20
 800e91e:	f8dc 0000 	ldr.w	r0, [ip]
 800e922:	3301      	adds	r3, #1
 800e924:	b281      	uxth	r1, r0
 800e926:	fb02 7101 	mla	r1, r2, r1, r7
 800e92a:	0c00      	lsrs	r0, r0, #16
 800e92c:	0c0f      	lsrs	r7, r1, #16
 800e92e:	fb02 7000 	mla	r0, r2, r0, r7
 800e932:	b289      	uxth	r1, r1
 800e934:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e938:	429d      	cmp	r5, r3
 800e93a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e93e:	f84c 1b04 	str.w	r1, [ip], #4
 800e942:	dcec      	bgt.n	800e91e <__multadd+0x12>
 800e944:	b1d7      	cbz	r7, 800e97c <__multadd+0x70>
 800e946:	68a3      	ldr	r3, [r4, #8]
 800e948:	42ab      	cmp	r3, r5
 800e94a:	dc12      	bgt.n	800e972 <__multadd+0x66>
 800e94c:	6861      	ldr	r1, [r4, #4]
 800e94e:	4630      	mov	r0, r6
 800e950:	3101      	adds	r1, #1
 800e952:	f7ff ff90 	bl	800e876 <_Balloc>
 800e956:	4680      	mov	r8, r0
 800e958:	6922      	ldr	r2, [r4, #16]
 800e95a:	f104 010c 	add.w	r1, r4, #12
 800e95e:	3202      	adds	r2, #2
 800e960:	0092      	lsls	r2, r2, #2
 800e962:	300c      	adds	r0, #12
 800e964:	f7ff ff7c 	bl	800e860 <memcpy>
 800e968:	4621      	mov	r1, r4
 800e96a:	4630      	mov	r0, r6
 800e96c:	f7ff ffb7 	bl	800e8de <_Bfree>
 800e970:	4644      	mov	r4, r8
 800e972:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e976:	3501      	adds	r5, #1
 800e978:	615f      	str	r7, [r3, #20]
 800e97a:	6125      	str	r5, [r4, #16]
 800e97c:	4620      	mov	r0, r4
 800e97e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e982 <__hi0bits>:
 800e982:	0c02      	lsrs	r2, r0, #16
 800e984:	0412      	lsls	r2, r2, #16
 800e986:	4603      	mov	r3, r0
 800e988:	b9b2      	cbnz	r2, 800e9b8 <__hi0bits+0x36>
 800e98a:	0403      	lsls	r3, r0, #16
 800e98c:	2010      	movs	r0, #16
 800e98e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e992:	bf04      	itt	eq
 800e994:	021b      	lsleq	r3, r3, #8
 800e996:	3008      	addeq	r0, #8
 800e998:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e99c:	bf04      	itt	eq
 800e99e:	011b      	lsleq	r3, r3, #4
 800e9a0:	3004      	addeq	r0, #4
 800e9a2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e9a6:	bf04      	itt	eq
 800e9a8:	009b      	lsleq	r3, r3, #2
 800e9aa:	3002      	addeq	r0, #2
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	db06      	blt.n	800e9be <__hi0bits+0x3c>
 800e9b0:	005b      	lsls	r3, r3, #1
 800e9b2:	d503      	bpl.n	800e9bc <__hi0bits+0x3a>
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	4770      	bx	lr
 800e9b8:	2000      	movs	r0, #0
 800e9ba:	e7e8      	b.n	800e98e <__hi0bits+0xc>
 800e9bc:	2020      	movs	r0, #32
 800e9be:	4770      	bx	lr

0800e9c0 <__lo0bits>:
 800e9c0:	6803      	ldr	r3, [r0, #0]
 800e9c2:	4601      	mov	r1, r0
 800e9c4:	f013 0207 	ands.w	r2, r3, #7
 800e9c8:	d00b      	beq.n	800e9e2 <__lo0bits+0x22>
 800e9ca:	07da      	lsls	r2, r3, #31
 800e9cc:	d423      	bmi.n	800ea16 <__lo0bits+0x56>
 800e9ce:	0798      	lsls	r0, r3, #30
 800e9d0:	bf49      	itett	mi
 800e9d2:	085b      	lsrmi	r3, r3, #1
 800e9d4:	089b      	lsrpl	r3, r3, #2
 800e9d6:	2001      	movmi	r0, #1
 800e9d8:	600b      	strmi	r3, [r1, #0]
 800e9da:	bf5c      	itt	pl
 800e9dc:	600b      	strpl	r3, [r1, #0]
 800e9de:	2002      	movpl	r0, #2
 800e9e0:	4770      	bx	lr
 800e9e2:	b298      	uxth	r0, r3
 800e9e4:	b9a8      	cbnz	r0, 800ea12 <__lo0bits+0x52>
 800e9e6:	2010      	movs	r0, #16
 800e9e8:	0c1b      	lsrs	r3, r3, #16
 800e9ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e9ee:	bf04      	itt	eq
 800e9f0:	0a1b      	lsreq	r3, r3, #8
 800e9f2:	3008      	addeq	r0, #8
 800e9f4:	071a      	lsls	r2, r3, #28
 800e9f6:	bf04      	itt	eq
 800e9f8:	091b      	lsreq	r3, r3, #4
 800e9fa:	3004      	addeq	r0, #4
 800e9fc:	079a      	lsls	r2, r3, #30
 800e9fe:	bf04      	itt	eq
 800ea00:	089b      	lsreq	r3, r3, #2
 800ea02:	3002      	addeq	r0, #2
 800ea04:	07da      	lsls	r2, r3, #31
 800ea06:	d402      	bmi.n	800ea0e <__lo0bits+0x4e>
 800ea08:	085b      	lsrs	r3, r3, #1
 800ea0a:	d006      	beq.n	800ea1a <__lo0bits+0x5a>
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	600b      	str	r3, [r1, #0]
 800ea10:	4770      	bx	lr
 800ea12:	4610      	mov	r0, r2
 800ea14:	e7e9      	b.n	800e9ea <__lo0bits+0x2a>
 800ea16:	2000      	movs	r0, #0
 800ea18:	4770      	bx	lr
 800ea1a:	2020      	movs	r0, #32
 800ea1c:	4770      	bx	lr

0800ea1e <__i2b>:
 800ea1e:	b510      	push	{r4, lr}
 800ea20:	460c      	mov	r4, r1
 800ea22:	2101      	movs	r1, #1
 800ea24:	f7ff ff27 	bl	800e876 <_Balloc>
 800ea28:	2201      	movs	r2, #1
 800ea2a:	6144      	str	r4, [r0, #20]
 800ea2c:	6102      	str	r2, [r0, #16]
 800ea2e:	bd10      	pop	{r4, pc}

0800ea30 <__multiply>:
 800ea30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea34:	4614      	mov	r4, r2
 800ea36:	690a      	ldr	r2, [r1, #16]
 800ea38:	6923      	ldr	r3, [r4, #16]
 800ea3a:	4688      	mov	r8, r1
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	bfbe      	ittt	lt
 800ea40:	460b      	movlt	r3, r1
 800ea42:	46a0      	movlt	r8, r4
 800ea44:	461c      	movlt	r4, r3
 800ea46:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ea4a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ea4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea52:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea56:	eb07 0609 	add.w	r6, r7, r9
 800ea5a:	42b3      	cmp	r3, r6
 800ea5c:	bfb8      	it	lt
 800ea5e:	3101      	addlt	r1, #1
 800ea60:	f7ff ff09 	bl	800e876 <_Balloc>
 800ea64:	f100 0514 	add.w	r5, r0, #20
 800ea68:	462b      	mov	r3, r5
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ea70:	4573      	cmp	r3, lr
 800ea72:	d316      	bcc.n	800eaa2 <__multiply+0x72>
 800ea74:	f104 0214 	add.w	r2, r4, #20
 800ea78:	f108 0114 	add.w	r1, r8, #20
 800ea7c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ea80:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ea84:	9300      	str	r3, [sp, #0]
 800ea86:	9b00      	ldr	r3, [sp, #0]
 800ea88:	9201      	str	r2, [sp, #4]
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d80c      	bhi.n	800eaa8 <__multiply+0x78>
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	dd03      	ble.n	800ea9a <__multiply+0x6a>
 800ea92:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d05d      	beq.n	800eb56 <__multiply+0x126>
 800ea9a:	6106      	str	r6, [r0, #16]
 800ea9c:	b003      	add	sp, #12
 800ea9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa2:	f843 2b04 	str.w	r2, [r3], #4
 800eaa6:	e7e3      	b.n	800ea70 <__multiply+0x40>
 800eaa8:	f8b2 b000 	ldrh.w	fp, [r2]
 800eaac:	f1bb 0f00 	cmp.w	fp, #0
 800eab0:	d023      	beq.n	800eafa <__multiply+0xca>
 800eab2:	4689      	mov	r9, r1
 800eab4:	46ac      	mov	ip, r5
 800eab6:	f04f 0800 	mov.w	r8, #0
 800eaba:	f859 4b04 	ldr.w	r4, [r9], #4
 800eabe:	f8dc a000 	ldr.w	sl, [ip]
 800eac2:	b2a3      	uxth	r3, r4
 800eac4:	fa1f fa8a 	uxth.w	sl, sl
 800eac8:	fb0b a303 	mla	r3, fp, r3, sl
 800eacc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ead0:	f8dc 4000 	ldr.w	r4, [ip]
 800ead4:	4443      	add	r3, r8
 800ead6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eada:	fb0b 840a 	mla	r4, fp, sl, r8
 800eade:	46e2      	mov	sl, ip
 800eae0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eaea:	454f      	cmp	r7, r9
 800eaec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eaf0:	f84a 3b04 	str.w	r3, [sl], #4
 800eaf4:	d82b      	bhi.n	800eb4e <__multiply+0x11e>
 800eaf6:	f8cc 8004 	str.w	r8, [ip, #4]
 800eafa:	9b01      	ldr	r3, [sp, #4]
 800eafc:	3204      	adds	r2, #4
 800eafe:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800eb02:	f1ba 0f00 	cmp.w	sl, #0
 800eb06:	d020      	beq.n	800eb4a <__multiply+0x11a>
 800eb08:	4689      	mov	r9, r1
 800eb0a:	46a8      	mov	r8, r5
 800eb0c:	f04f 0b00 	mov.w	fp, #0
 800eb10:	682b      	ldr	r3, [r5, #0]
 800eb12:	f8b9 c000 	ldrh.w	ip, [r9]
 800eb16:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	fb0a 440c 	mla	r4, sl, ip, r4
 800eb20:	46c4      	mov	ip, r8
 800eb22:	445c      	add	r4, fp
 800eb24:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eb28:	f84c 3b04 	str.w	r3, [ip], #4
 800eb2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800eb30:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800eb34:	0c1b      	lsrs	r3, r3, #16
 800eb36:	fb0a b303 	mla	r3, sl, r3, fp
 800eb3a:	454f      	cmp	r7, r9
 800eb3c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800eb40:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800eb44:	d805      	bhi.n	800eb52 <__multiply+0x122>
 800eb46:	f8c8 3004 	str.w	r3, [r8, #4]
 800eb4a:	3504      	adds	r5, #4
 800eb4c:	e79b      	b.n	800ea86 <__multiply+0x56>
 800eb4e:	46d4      	mov	ip, sl
 800eb50:	e7b3      	b.n	800eaba <__multiply+0x8a>
 800eb52:	46e0      	mov	r8, ip
 800eb54:	e7dd      	b.n	800eb12 <__multiply+0xe2>
 800eb56:	3e01      	subs	r6, #1
 800eb58:	e799      	b.n	800ea8e <__multiply+0x5e>
	...

0800eb5c <__pow5mult>:
 800eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb60:	4615      	mov	r5, r2
 800eb62:	f012 0203 	ands.w	r2, r2, #3
 800eb66:	4606      	mov	r6, r0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	d007      	beq.n	800eb7c <__pow5mult+0x20>
 800eb6c:	4c21      	ldr	r4, [pc, #132]	; (800ebf4 <__pow5mult+0x98>)
 800eb6e:	3a01      	subs	r2, #1
 800eb70:	2300      	movs	r3, #0
 800eb72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb76:	f7ff fec9 	bl	800e90c <__multadd>
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	10ad      	asrs	r5, r5, #2
 800eb7e:	d035      	beq.n	800ebec <__pow5mult+0x90>
 800eb80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb82:	b93c      	cbnz	r4, 800eb94 <__pow5mult+0x38>
 800eb84:	2010      	movs	r0, #16
 800eb86:	f7ff fe55 	bl	800e834 <malloc>
 800eb8a:	6270      	str	r0, [r6, #36]	; 0x24
 800eb8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb90:	6004      	str	r4, [r0, #0]
 800eb92:	60c4      	str	r4, [r0, #12]
 800eb94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb9c:	b94c      	cbnz	r4, 800ebb2 <__pow5mult+0x56>
 800eb9e:	f240 2171 	movw	r1, #625	; 0x271
 800eba2:	4630      	mov	r0, r6
 800eba4:	f7ff ff3b 	bl	800ea1e <__i2b>
 800eba8:	2300      	movs	r3, #0
 800ebaa:	4604      	mov	r4, r0
 800ebac:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebb0:	6003      	str	r3, [r0, #0]
 800ebb2:	f04f 0800 	mov.w	r8, #0
 800ebb6:	07eb      	lsls	r3, r5, #31
 800ebb8:	d50a      	bpl.n	800ebd0 <__pow5mult+0x74>
 800ebba:	4639      	mov	r1, r7
 800ebbc:	4622      	mov	r2, r4
 800ebbe:	4630      	mov	r0, r6
 800ebc0:	f7ff ff36 	bl	800ea30 <__multiply>
 800ebc4:	4681      	mov	r9, r0
 800ebc6:	4639      	mov	r1, r7
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f7ff fe88 	bl	800e8de <_Bfree>
 800ebce:	464f      	mov	r7, r9
 800ebd0:	106d      	asrs	r5, r5, #1
 800ebd2:	d00b      	beq.n	800ebec <__pow5mult+0x90>
 800ebd4:	6820      	ldr	r0, [r4, #0]
 800ebd6:	b938      	cbnz	r0, 800ebe8 <__pow5mult+0x8c>
 800ebd8:	4622      	mov	r2, r4
 800ebda:	4621      	mov	r1, r4
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7ff ff27 	bl	800ea30 <__multiply>
 800ebe2:	6020      	str	r0, [r4, #0]
 800ebe4:	f8c0 8000 	str.w	r8, [r0]
 800ebe8:	4604      	mov	r4, r0
 800ebea:	e7e4      	b.n	800ebb6 <__pow5mult+0x5a>
 800ebec:	4638      	mov	r0, r7
 800ebee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebf2:	bf00      	nop
 800ebf4:	08010130 	.word	0x08010130

0800ebf8 <__lshift>:
 800ebf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	4607      	mov	r7, r0
 800ec00:	4616      	mov	r6, r2
 800ec02:	6923      	ldr	r3, [r4, #16]
 800ec04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec08:	eb0a 0903 	add.w	r9, sl, r3
 800ec0c:	6849      	ldr	r1, [r1, #4]
 800ec0e:	68a3      	ldr	r3, [r4, #8]
 800ec10:	f109 0501 	add.w	r5, r9, #1
 800ec14:	42ab      	cmp	r3, r5
 800ec16:	db32      	blt.n	800ec7e <__lshift+0x86>
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7ff fe2c 	bl	800e876 <_Balloc>
 800ec1e:	2300      	movs	r3, #0
 800ec20:	4680      	mov	r8, r0
 800ec22:	461a      	mov	r2, r3
 800ec24:	f100 0114 	add.w	r1, r0, #20
 800ec28:	4553      	cmp	r3, sl
 800ec2a:	db2b      	blt.n	800ec84 <__lshift+0x8c>
 800ec2c:	6920      	ldr	r0, [r4, #16]
 800ec2e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec32:	f104 0314 	add.w	r3, r4, #20
 800ec36:	f016 021f 	ands.w	r2, r6, #31
 800ec3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec3e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec42:	d025      	beq.n	800ec90 <__lshift+0x98>
 800ec44:	2000      	movs	r0, #0
 800ec46:	f1c2 0e20 	rsb	lr, r2, #32
 800ec4a:	468a      	mov	sl, r1
 800ec4c:	681e      	ldr	r6, [r3, #0]
 800ec4e:	4096      	lsls	r6, r2
 800ec50:	4330      	orrs	r0, r6
 800ec52:	f84a 0b04 	str.w	r0, [sl], #4
 800ec56:	f853 0b04 	ldr.w	r0, [r3], #4
 800ec5a:	459c      	cmp	ip, r3
 800ec5c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ec60:	d814      	bhi.n	800ec8c <__lshift+0x94>
 800ec62:	6048      	str	r0, [r1, #4]
 800ec64:	b108      	cbz	r0, 800ec6a <__lshift+0x72>
 800ec66:	f109 0502 	add.w	r5, r9, #2
 800ec6a:	3d01      	subs	r5, #1
 800ec6c:	4638      	mov	r0, r7
 800ec6e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ec72:	4621      	mov	r1, r4
 800ec74:	f7ff fe33 	bl	800e8de <_Bfree>
 800ec78:	4640      	mov	r0, r8
 800ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7e:	3101      	adds	r1, #1
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	e7c7      	b.n	800ec14 <__lshift+0x1c>
 800ec84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ec88:	3301      	adds	r3, #1
 800ec8a:	e7cd      	b.n	800ec28 <__lshift+0x30>
 800ec8c:	4651      	mov	r1, sl
 800ec8e:	e7dc      	b.n	800ec4a <__lshift+0x52>
 800ec90:	3904      	subs	r1, #4
 800ec92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec96:	459c      	cmp	ip, r3
 800ec98:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec9c:	d8f9      	bhi.n	800ec92 <__lshift+0x9a>
 800ec9e:	e7e4      	b.n	800ec6a <__lshift+0x72>

0800eca0 <__mcmp>:
 800eca0:	6903      	ldr	r3, [r0, #16]
 800eca2:	690a      	ldr	r2, [r1, #16]
 800eca4:	b530      	push	{r4, r5, lr}
 800eca6:	1a9b      	subs	r3, r3, r2
 800eca8:	d10c      	bne.n	800ecc4 <__mcmp+0x24>
 800ecaa:	0092      	lsls	r2, r2, #2
 800ecac:	3014      	adds	r0, #20
 800ecae:	3114      	adds	r1, #20
 800ecb0:	1884      	adds	r4, r0, r2
 800ecb2:	4411      	add	r1, r2
 800ecb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ecb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ecbc:	4295      	cmp	r5, r2
 800ecbe:	d003      	beq.n	800ecc8 <__mcmp+0x28>
 800ecc0:	d305      	bcc.n	800ecce <__mcmp+0x2e>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	bd30      	pop	{r4, r5, pc}
 800ecc8:	42a0      	cmp	r0, r4
 800ecca:	d3f3      	bcc.n	800ecb4 <__mcmp+0x14>
 800eccc:	e7fa      	b.n	800ecc4 <__mcmp+0x24>
 800ecce:	f04f 33ff 	mov.w	r3, #4294967295
 800ecd2:	e7f7      	b.n	800ecc4 <__mcmp+0x24>

0800ecd4 <__mdiff>:
 800ecd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd8:	460d      	mov	r5, r1
 800ecda:	4607      	mov	r7, r0
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4628      	mov	r0, r5
 800ece0:	4614      	mov	r4, r2
 800ece2:	f7ff ffdd 	bl	800eca0 <__mcmp>
 800ece6:	1e06      	subs	r6, r0, #0
 800ece8:	d108      	bne.n	800ecfc <__mdiff+0x28>
 800ecea:	4631      	mov	r1, r6
 800ecec:	4638      	mov	r0, r7
 800ecee:	f7ff fdc2 	bl	800e876 <_Balloc>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ecf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecfc:	bfa4      	itt	ge
 800ecfe:	4623      	movge	r3, r4
 800ed00:	462c      	movge	r4, r5
 800ed02:	4638      	mov	r0, r7
 800ed04:	6861      	ldr	r1, [r4, #4]
 800ed06:	bfa6      	itte	ge
 800ed08:	461d      	movge	r5, r3
 800ed0a:	2600      	movge	r6, #0
 800ed0c:	2601      	movlt	r6, #1
 800ed0e:	f7ff fdb2 	bl	800e876 <_Balloc>
 800ed12:	f04f 0e00 	mov.w	lr, #0
 800ed16:	60c6      	str	r6, [r0, #12]
 800ed18:	692b      	ldr	r3, [r5, #16]
 800ed1a:	6926      	ldr	r6, [r4, #16]
 800ed1c:	f104 0214 	add.w	r2, r4, #20
 800ed20:	f105 0914 	add.w	r9, r5, #20
 800ed24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ed28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ed2c:	f100 0114 	add.w	r1, r0, #20
 800ed30:	f852 ab04 	ldr.w	sl, [r2], #4
 800ed34:	f859 5b04 	ldr.w	r5, [r9], #4
 800ed38:	fa1f f38a 	uxth.w	r3, sl
 800ed3c:	4473      	add	r3, lr
 800ed3e:	b2ac      	uxth	r4, r5
 800ed40:	1b1b      	subs	r3, r3, r4
 800ed42:	0c2c      	lsrs	r4, r5, #16
 800ed44:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800ed48:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800ed52:	45c8      	cmp	r8, r9
 800ed54:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800ed58:	4694      	mov	ip, r2
 800ed5a:	f841 4b04 	str.w	r4, [r1], #4
 800ed5e:	d8e7      	bhi.n	800ed30 <__mdiff+0x5c>
 800ed60:	45bc      	cmp	ip, r7
 800ed62:	d304      	bcc.n	800ed6e <__mdiff+0x9a>
 800ed64:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800ed68:	b183      	cbz	r3, 800ed8c <__mdiff+0xb8>
 800ed6a:	6106      	str	r6, [r0, #16]
 800ed6c:	e7c4      	b.n	800ecf8 <__mdiff+0x24>
 800ed6e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800ed72:	b2a2      	uxth	r2, r4
 800ed74:	4472      	add	r2, lr
 800ed76:	1413      	asrs	r3, r2, #16
 800ed78:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ed7c:	b292      	uxth	r2, r2
 800ed7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ed82:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ed86:	f841 2b04 	str.w	r2, [r1], #4
 800ed8a:	e7e9      	b.n	800ed60 <__mdiff+0x8c>
 800ed8c:	3e01      	subs	r6, #1
 800ed8e:	e7e9      	b.n	800ed64 <__mdiff+0x90>

0800ed90 <__d2b>:
 800ed90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ed94:	461c      	mov	r4, r3
 800ed96:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800ed9a:	2101      	movs	r1, #1
 800ed9c:	4690      	mov	r8, r2
 800ed9e:	f7ff fd6a 	bl	800e876 <_Balloc>
 800eda2:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800eda6:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800edaa:	4607      	mov	r7, r0
 800edac:	bb34      	cbnz	r4, 800edfc <__d2b+0x6c>
 800edae:	9201      	str	r2, [sp, #4]
 800edb0:	f1b8 0200 	subs.w	r2, r8, #0
 800edb4:	d027      	beq.n	800ee06 <__d2b+0x76>
 800edb6:	a802      	add	r0, sp, #8
 800edb8:	f840 2d08 	str.w	r2, [r0, #-8]!
 800edbc:	f7ff fe00 	bl	800e9c0 <__lo0bits>
 800edc0:	9900      	ldr	r1, [sp, #0]
 800edc2:	b1f0      	cbz	r0, 800ee02 <__d2b+0x72>
 800edc4:	9a01      	ldr	r2, [sp, #4]
 800edc6:	f1c0 0320 	rsb	r3, r0, #32
 800edca:	fa02 f303 	lsl.w	r3, r2, r3
 800edce:	430b      	orrs	r3, r1
 800edd0:	40c2      	lsrs	r2, r0
 800edd2:	617b      	str	r3, [r7, #20]
 800edd4:	9201      	str	r2, [sp, #4]
 800edd6:	9b01      	ldr	r3, [sp, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	bf14      	ite	ne
 800eddc:	2102      	movne	r1, #2
 800edde:	2101      	moveq	r1, #1
 800ede0:	61bb      	str	r3, [r7, #24]
 800ede2:	6139      	str	r1, [r7, #16]
 800ede4:	b1c4      	cbz	r4, 800ee18 <__d2b+0x88>
 800ede6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800edea:	4404      	add	r4, r0
 800edec:	6034      	str	r4, [r6, #0]
 800edee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800edf2:	6028      	str	r0, [r5, #0]
 800edf4:	4638      	mov	r0, r7
 800edf6:	b002      	add	sp, #8
 800edf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edfc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ee00:	e7d5      	b.n	800edae <__d2b+0x1e>
 800ee02:	6179      	str	r1, [r7, #20]
 800ee04:	e7e7      	b.n	800edd6 <__d2b+0x46>
 800ee06:	a801      	add	r0, sp, #4
 800ee08:	f7ff fdda 	bl	800e9c0 <__lo0bits>
 800ee0c:	2101      	movs	r1, #1
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	6139      	str	r1, [r7, #16]
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	3020      	adds	r0, #32
 800ee16:	e7e5      	b.n	800ede4 <__d2b+0x54>
 800ee18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ee20:	6030      	str	r0, [r6, #0]
 800ee22:	6918      	ldr	r0, [r3, #16]
 800ee24:	f7ff fdad 	bl	800e982 <__hi0bits>
 800ee28:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ee2c:	e7e1      	b.n	800edf2 <__d2b+0x62>

0800ee2e <_calloc_r>:
 800ee2e:	b538      	push	{r3, r4, r5, lr}
 800ee30:	fb02 f401 	mul.w	r4, r2, r1
 800ee34:	4621      	mov	r1, r4
 800ee36:	f000 f855 	bl	800eee4 <_malloc_r>
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	b118      	cbz	r0, 800ee46 <_calloc_r+0x18>
 800ee3e:	4622      	mov	r2, r4
 800ee40:	2100      	movs	r1, #0
 800ee42:	f7fe fa2d 	bl	800d2a0 <memset>
 800ee46:	4628      	mov	r0, r5
 800ee48:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ee4c <_free_r>:
 800ee4c:	b538      	push	{r3, r4, r5, lr}
 800ee4e:	4605      	mov	r5, r0
 800ee50:	2900      	cmp	r1, #0
 800ee52:	d043      	beq.n	800eedc <_free_r+0x90>
 800ee54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee58:	1f0c      	subs	r4, r1, #4
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	bfb8      	it	lt
 800ee5e:	18e4      	addlt	r4, r4, r3
 800ee60:	f000 fa27 	bl	800f2b2 <__malloc_lock>
 800ee64:	4a1e      	ldr	r2, [pc, #120]	; (800eee0 <_free_r+0x94>)
 800ee66:	6813      	ldr	r3, [r2, #0]
 800ee68:	4610      	mov	r0, r2
 800ee6a:	b933      	cbnz	r3, 800ee7a <_free_r+0x2e>
 800ee6c:	6063      	str	r3, [r4, #4]
 800ee6e:	6014      	str	r4, [r2, #0]
 800ee70:	4628      	mov	r0, r5
 800ee72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee76:	f000 ba1d 	b.w	800f2b4 <__malloc_unlock>
 800ee7a:	42a3      	cmp	r3, r4
 800ee7c:	d90b      	bls.n	800ee96 <_free_r+0x4a>
 800ee7e:	6821      	ldr	r1, [r4, #0]
 800ee80:	1862      	adds	r2, r4, r1
 800ee82:	4293      	cmp	r3, r2
 800ee84:	bf01      	itttt	eq
 800ee86:	681a      	ldreq	r2, [r3, #0]
 800ee88:	685b      	ldreq	r3, [r3, #4]
 800ee8a:	1852      	addeq	r2, r2, r1
 800ee8c:	6022      	streq	r2, [r4, #0]
 800ee8e:	6063      	str	r3, [r4, #4]
 800ee90:	6004      	str	r4, [r0, #0]
 800ee92:	e7ed      	b.n	800ee70 <_free_r+0x24>
 800ee94:	4613      	mov	r3, r2
 800ee96:	685a      	ldr	r2, [r3, #4]
 800ee98:	b10a      	cbz	r2, 800ee9e <_free_r+0x52>
 800ee9a:	42a2      	cmp	r2, r4
 800ee9c:	d9fa      	bls.n	800ee94 <_free_r+0x48>
 800ee9e:	6819      	ldr	r1, [r3, #0]
 800eea0:	1858      	adds	r0, r3, r1
 800eea2:	42a0      	cmp	r0, r4
 800eea4:	d10b      	bne.n	800eebe <_free_r+0x72>
 800eea6:	6820      	ldr	r0, [r4, #0]
 800eea8:	4401      	add	r1, r0
 800eeaa:	1858      	adds	r0, r3, r1
 800eeac:	4282      	cmp	r2, r0
 800eeae:	6019      	str	r1, [r3, #0]
 800eeb0:	d1de      	bne.n	800ee70 <_free_r+0x24>
 800eeb2:	6810      	ldr	r0, [r2, #0]
 800eeb4:	6852      	ldr	r2, [r2, #4]
 800eeb6:	4401      	add	r1, r0
 800eeb8:	6019      	str	r1, [r3, #0]
 800eeba:	605a      	str	r2, [r3, #4]
 800eebc:	e7d8      	b.n	800ee70 <_free_r+0x24>
 800eebe:	d902      	bls.n	800eec6 <_free_r+0x7a>
 800eec0:	230c      	movs	r3, #12
 800eec2:	602b      	str	r3, [r5, #0]
 800eec4:	e7d4      	b.n	800ee70 <_free_r+0x24>
 800eec6:	6820      	ldr	r0, [r4, #0]
 800eec8:	1821      	adds	r1, r4, r0
 800eeca:	428a      	cmp	r2, r1
 800eecc:	bf01      	itttt	eq
 800eece:	6811      	ldreq	r1, [r2, #0]
 800eed0:	6852      	ldreq	r2, [r2, #4]
 800eed2:	1809      	addeq	r1, r1, r0
 800eed4:	6021      	streq	r1, [r4, #0]
 800eed6:	6062      	str	r2, [r4, #4]
 800eed8:	605c      	str	r4, [r3, #4]
 800eeda:	e7c9      	b.n	800ee70 <_free_r+0x24>
 800eedc:	bd38      	pop	{r3, r4, r5, pc}
 800eede:	bf00      	nop
 800eee0:	2000066c 	.word	0x2000066c

0800eee4 <_malloc_r>:
 800eee4:	b570      	push	{r4, r5, r6, lr}
 800eee6:	1ccd      	adds	r5, r1, #3
 800eee8:	f025 0503 	bic.w	r5, r5, #3
 800eeec:	3508      	adds	r5, #8
 800eeee:	2d0c      	cmp	r5, #12
 800eef0:	bf38      	it	cc
 800eef2:	250c      	movcc	r5, #12
 800eef4:	2d00      	cmp	r5, #0
 800eef6:	4606      	mov	r6, r0
 800eef8:	db01      	blt.n	800eefe <_malloc_r+0x1a>
 800eefa:	42a9      	cmp	r1, r5
 800eefc:	d903      	bls.n	800ef06 <_malloc_r+0x22>
 800eefe:	230c      	movs	r3, #12
 800ef00:	6033      	str	r3, [r6, #0]
 800ef02:	2000      	movs	r0, #0
 800ef04:	bd70      	pop	{r4, r5, r6, pc}
 800ef06:	f000 f9d4 	bl	800f2b2 <__malloc_lock>
 800ef0a:	4a21      	ldr	r2, [pc, #132]	; (800ef90 <_malloc_r+0xac>)
 800ef0c:	6814      	ldr	r4, [r2, #0]
 800ef0e:	4621      	mov	r1, r4
 800ef10:	b991      	cbnz	r1, 800ef38 <_malloc_r+0x54>
 800ef12:	4c20      	ldr	r4, [pc, #128]	; (800ef94 <_malloc_r+0xb0>)
 800ef14:	6823      	ldr	r3, [r4, #0]
 800ef16:	b91b      	cbnz	r3, 800ef20 <_malloc_r+0x3c>
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f000 f98f 	bl	800f23c <_sbrk_r>
 800ef1e:	6020      	str	r0, [r4, #0]
 800ef20:	4629      	mov	r1, r5
 800ef22:	4630      	mov	r0, r6
 800ef24:	f000 f98a 	bl	800f23c <_sbrk_r>
 800ef28:	1c43      	adds	r3, r0, #1
 800ef2a:	d124      	bne.n	800ef76 <_malloc_r+0x92>
 800ef2c:	230c      	movs	r3, #12
 800ef2e:	4630      	mov	r0, r6
 800ef30:	6033      	str	r3, [r6, #0]
 800ef32:	f000 f9bf 	bl	800f2b4 <__malloc_unlock>
 800ef36:	e7e4      	b.n	800ef02 <_malloc_r+0x1e>
 800ef38:	680b      	ldr	r3, [r1, #0]
 800ef3a:	1b5b      	subs	r3, r3, r5
 800ef3c:	d418      	bmi.n	800ef70 <_malloc_r+0x8c>
 800ef3e:	2b0b      	cmp	r3, #11
 800ef40:	d90f      	bls.n	800ef62 <_malloc_r+0x7e>
 800ef42:	600b      	str	r3, [r1, #0]
 800ef44:	18cc      	adds	r4, r1, r3
 800ef46:	50cd      	str	r5, [r1, r3]
 800ef48:	4630      	mov	r0, r6
 800ef4a:	f000 f9b3 	bl	800f2b4 <__malloc_unlock>
 800ef4e:	f104 000b 	add.w	r0, r4, #11
 800ef52:	1d23      	adds	r3, r4, #4
 800ef54:	f020 0007 	bic.w	r0, r0, #7
 800ef58:	1ac3      	subs	r3, r0, r3
 800ef5a:	d0d3      	beq.n	800ef04 <_malloc_r+0x20>
 800ef5c:	425a      	negs	r2, r3
 800ef5e:	50e2      	str	r2, [r4, r3]
 800ef60:	e7d0      	b.n	800ef04 <_malloc_r+0x20>
 800ef62:	684b      	ldr	r3, [r1, #4]
 800ef64:	428c      	cmp	r4, r1
 800ef66:	bf16      	itet	ne
 800ef68:	6063      	strne	r3, [r4, #4]
 800ef6a:	6013      	streq	r3, [r2, #0]
 800ef6c:	460c      	movne	r4, r1
 800ef6e:	e7eb      	b.n	800ef48 <_malloc_r+0x64>
 800ef70:	460c      	mov	r4, r1
 800ef72:	6849      	ldr	r1, [r1, #4]
 800ef74:	e7cc      	b.n	800ef10 <_malloc_r+0x2c>
 800ef76:	1cc4      	adds	r4, r0, #3
 800ef78:	f024 0403 	bic.w	r4, r4, #3
 800ef7c:	42a0      	cmp	r0, r4
 800ef7e:	d005      	beq.n	800ef8c <_malloc_r+0xa8>
 800ef80:	1a21      	subs	r1, r4, r0
 800ef82:	4630      	mov	r0, r6
 800ef84:	f000 f95a 	bl	800f23c <_sbrk_r>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	d0cf      	beq.n	800ef2c <_malloc_r+0x48>
 800ef8c:	6025      	str	r5, [r4, #0]
 800ef8e:	e7db      	b.n	800ef48 <_malloc_r+0x64>
 800ef90:	2000066c 	.word	0x2000066c
 800ef94:	20000670 	.word	0x20000670

0800ef98 <__ssputs_r>:
 800ef98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef9c:	688e      	ldr	r6, [r1, #8]
 800ef9e:	4682      	mov	sl, r0
 800efa0:	429e      	cmp	r6, r3
 800efa2:	460c      	mov	r4, r1
 800efa4:	4690      	mov	r8, r2
 800efa6:	4699      	mov	r9, r3
 800efa8:	d837      	bhi.n	800f01a <__ssputs_r+0x82>
 800efaa:	898a      	ldrh	r2, [r1, #12]
 800efac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efb0:	d031      	beq.n	800f016 <__ssputs_r+0x7e>
 800efb2:	2302      	movs	r3, #2
 800efb4:	6825      	ldr	r5, [r4, #0]
 800efb6:	6909      	ldr	r1, [r1, #16]
 800efb8:	1a6f      	subs	r7, r5, r1
 800efba:	6965      	ldr	r5, [r4, #20]
 800efbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efc0:	fb95 f5f3 	sdiv	r5, r5, r3
 800efc4:	f109 0301 	add.w	r3, r9, #1
 800efc8:	443b      	add	r3, r7
 800efca:	429d      	cmp	r5, r3
 800efcc:	bf38      	it	cc
 800efce:	461d      	movcc	r5, r3
 800efd0:	0553      	lsls	r3, r2, #21
 800efd2:	d530      	bpl.n	800f036 <__ssputs_r+0x9e>
 800efd4:	4629      	mov	r1, r5
 800efd6:	f7ff ff85 	bl	800eee4 <_malloc_r>
 800efda:	4606      	mov	r6, r0
 800efdc:	b950      	cbnz	r0, 800eff4 <__ssputs_r+0x5c>
 800efde:	230c      	movs	r3, #12
 800efe0:	f04f 30ff 	mov.w	r0, #4294967295
 800efe4:	f8ca 3000 	str.w	r3, [sl]
 800efe8:	89a3      	ldrh	r3, [r4, #12]
 800efea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efee:	81a3      	strh	r3, [r4, #12]
 800eff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff4:	463a      	mov	r2, r7
 800eff6:	6921      	ldr	r1, [r4, #16]
 800eff8:	f7ff fc32 	bl	800e860 <memcpy>
 800effc:	89a3      	ldrh	r3, [r4, #12]
 800effe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f006:	81a3      	strh	r3, [r4, #12]
 800f008:	6126      	str	r6, [r4, #16]
 800f00a:	443e      	add	r6, r7
 800f00c:	6026      	str	r6, [r4, #0]
 800f00e:	464e      	mov	r6, r9
 800f010:	6165      	str	r5, [r4, #20]
 800f012:	1bed      	subs	r5, r5, r7
 800f014:	60a5      	str	r5, [r4, #8]
 800f016:	454e      	cmp	r6, r9
 800f018:	d900      	bls.n	800f01c <__ssputs_r+0x84>
 800f01a:	464e      	mov	r6, r9
 800f01c:	4632      	mov	r2, r6
 800f01e:	4641      	mov	r1, r8
 800f020:	6820      	ldr	r0, [r4, #0]
 800f022:	f000 f92d 	bl	800f280 <memmove>
 800f026:	68a3      	ldr	r3, [r4, #8]
 800f028:	2000      	movs	r0, #0
 800f02a:	1b9b      	subs	r3, r3, r6
 800f02c:	60a3      	str	r3, [r4, #8]
 800f02e:	6823      	ldr	r3, [r4, #0]
 800f030:	441e      	add	r6, r3
 800f032:	6026      	str	r6, [r4, #0]
 800f034:	e7dc      	b.n	800eff0 <__ssputs_r+0x58>
 800f036:	462a      	mov	r2, r5
 800f038:	f000 f93d 	bl	800f2b6 <_realloc_r>
 800f03c:	4606      	mov	r6, r0
 800f03e:	2800      	cmp	r0, #0
 800f040:	d1e2      	bne.n	800f008 <__ssputs_r+0x70>
 800f042:	6921      	ldr	r1, [r4, #16]
 800f044:	4650      	mov	r0, sl
 800f046:	f7ff ff01 	bl	800ee4c <_free_r>
 800f04a:	e7c8      	b.n	800efde <__ssputs_r+0x46>

0800f04c <_svfiprintf_r>:
 800f04c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f050:	461d      	mov	r5, r3
 800f052:	898b      	ldrh	r3, [r1, #12]
 800f054:	b09d      	sub	sp, #116	; 0x74
 800f056:	061f      	lsls	r7, r3, #24
 800f058:	4680      	mov	r8, r0
 800f05a:	460c      	mov	r4, r1
 800f05c:	4616      	mov	r6, r2
 800f05e:	d50f      	bpl.n	800f080 <_svfiprintf_r+0x34>
 800f060:	690b      	ldr	r3, [r1, #16]
 800f062:	b96b      	cbnz	r3, 800f080 <_svfiprintf_r+0x34>
 800f064:	2140      	movs	r1, #64	; 0x40
 800f066:	f7ff ff3d 	bl	800eee4 <_malloc_r>
 800f06a:	6020      	str	r0, [r4, #0]
 800f06c:	6120      	str	r0, [r4, #16]
 800f06e:	b928      	cbnz	r0, 800f07c <_svfiprintf_r+0x30>
 800f070:	230c      	movs	r3, #12
 800f072:	f8c8 3000 	str.w	r3, [r8]
 800f076:	f04f 30ff 	mov.w	r0, #4294967295
 800f07a:	e0c8      	b.n	800f20e <_svfiprintf_r+0x1c2>
 800f07c:	2340      	movs	r3, #64	; 0x40
 800f07e:	6163      	str	r3, [r4, #20]
 800f080:	2300      	movs	r3, #0
 800f082:	9309      	str	r3, [sp, #36]	; 0x24
 800f084:	2320      	movs	r3, #32
 800f086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f08a:	2330      	movs	r3, #48	; 0x30
 800f08c:	f04f 0b01 	mov.w	fp, #1
 800f090:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f094:	9503      	str	r5, [sp, #12]
 800f096:	4637      	mov	r7, r6
 800f098:	463d      	mov	r5, r7
 800f09a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f09e:	b10b      	cbz	r3, 800f0a4 <_svfiprintf_r+0x58>
 800f0a0:	2b25      	cmp	r3, #37	; 0x25
 800f0a2:	d13e      	bne.n	800f122 <_svfiprintf_r+0xd6>
 800f0a4:	ebb7 0a06 	subs.w	sl, r7, r6
 800f0a8:	d00b      	beq.n	800f0c2 <_svfiprintf_r+0x76>
 800f0aa:	4653      	mov	r3, sl
 800f0ac:	4632      	mov	r2, r6
 800f0ae:	4621      	mov	r1, r4
 800f0b0:	4640      	mov	r0, r8
 800f0b2:	f7ff ff71 	bl	800ef98 <__ssputs_r>
 800f0b6:	3001      	adds	r0, #1
 800f0b8:	f000 80a4 	beq.w	800f204 <_svfiprintf_r+0x1b8>
 800f0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0be:	4453      	add	r3, sl
 800f0c0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0c2:	783b      	ldrb	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f000 809d 	beq.w	800f204 <_svfiprintf_r+0x1b8>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	f04f 32ff 	mov.w	r2, #4294967295
 800f0d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0d4:	9304      	str	r3, [sp, #16]
 800f0d6:	9307      	str	r3, [sp, #28]
 800f0d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0dc:	931a      	str	r3, [sp, #104]	; 0x68
 800f0de:	462f      	mov	r7, r5
 800f0e0:	2205      	movs	r2, #5
 800f0e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f0e6:	4850      	ldr	r0, [pc, #320]	; (800f228 <_svfiprintf_r+0x1dc>)
 800f0e8:	f7ff fbac 	bl	800e844 <memchr>
 800f0ec:	9b04      	ldr	r3, [sp, #16]
 800f0ee:	b9d0      	cbnz	r0, 800f126 <_svfiprintf_r+0xda>
 800f0f0:	06d9      	lsls	r1, r3, #27
 800f0f2:	bf44      	itt	mi
 800f0f4:	2220      	movmi	r2, #32
 800f0f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f0fa:	071a      	lsls	r2, r3, #28
 800f0fc:	bf44      	itt	mi
 800f0fe:	222b      	movmi	r2, #43	; 0x2b
 800f100:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f104:	782a      	ldrb	r2, [r5, #0]
 800f106:	2a2a      	cmp	r2, #42	; 0x2a
 800f108:	d015      	beq.n	800f136 <_svfiprintf_r+0xea>
 800f10a:	462f      	mov	r7, r5
 800f10c:	2000      	movs	r0, #0
 800f10e:	250a      	movs	r5, #10
 800f110:	9a07      	ldr	r2, [sp, #28]
 800f112:	4639      	mov	r1, r7
 800f114:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f118:	3b30      	subs	r3, #48	; 0x30
 800f11a:	2b09      	cmp	r3, #9
 800f11c:	d94d      	bls.n	800f1ba <_svfiprintf_r+0x16e>
 800f11e:	b1b8      	cbz	r0, 800f150 <_svfiprintf_r+0x104>
 800f120:	e00f      	b.n	800f142 <_svfiprintf_r+0xf6>
 800f122:	462f      	mov	r7, r5
 800f124:	e7b8      	b.n	800f098 <_svfiprintf_r+0x4c>
 800f126:	4a40      	ldr	r2, [pc, #256]	; (800f228 <_svfiprintf_r+0x1dc>)
 800f128:	463d      	mov	r5, r7
 800f12a:	1a80      	subs	r0, r0, r2
 800f12c:	fa0b f000 	lsl.w	r0, fp, r0
 800f130:	4318      	orrs	r0, r3
 800f132:	9004      	str	r0, [sp, #16]
 800f134:	e7d3      	b.n	800f0de <_svfiprintf_r+0x92>
 800f136:	9a03      	ldr	r2, [sp, #12]
 800f138:	1d11      	adds	r1, r2, #4
 800f13a:	6812      	ldr	r2, [r2, #0]
 800f13c:	9103      	str	r1, [sp, #12]
 800f13e:	2a00      	cmp	r2, #0
 800f140:	db01      	blt.n	800f146 <_svfiprintf_r+0xfa>
 800f142:	9207      	str	r2, [sp, #28]
 800f144:	e004      	b.n	800f150 <_svfiprintf_r+0x104>
 800f146:	4252      	negs	r2, r2
 800f148:	f043 0302 	orr.w	r3, r3, #2
 800f14c:	9207      	str	r2, [sp, #28]
 800f14e:	9304      	str	r3, [sp, #16]
 800f150:	783b      	ldrb	r3, [r7, #0]
 800f152:	2b2e      	cmp	r3, #46	; 0x2e
 800f154:	d10c      	bne.n	800f170 <_svfiprintf_r+0x124>
 800f156:	787b      	ldrb	r3, [r7, #1]
 800f158:	2b2a      	cmp	r3, #42	; 0x2a
 800f15a:	d133      	bne.n	800f1c4 <_svfiprintf_r+0x178>
 800f15c:	9b03      	ldr	r3, [sp, #12]
 800f15e:	3702      	adds	r7, #2
 800f160:	1d1a      	adds	r2, r3, #4
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	9203      	str	r2, [sp, #12]
 800f166:	2b00      	cmp	r3, #0
 800f168:	bfb8      	it	lt
 800f16a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f16e:	9305      	str	r3, [sp, #20]
 800f170:	4d2e      	ldr	r5, [pc, #184]	; (800f22c <_svfiprintf_r+0x1e0>)
 800f172:	2203      	movs	r2, #3
 800f174:	7839      	ldrb	r1, [r7, #0]
 800f176:	4628      	mov	r0, r5
 800f178:	f7ff fb64 	bl	800e844 <memchr>
 800f17c:	b138      	cbz	r0, 800f18e <_svfiprintf_r+0x142>
 800f17e:	2340      	movs	r3, #64	; 0x40
 800f180:	1b40      	subs	r0, r0, r5
 800f182:	fa03 f000 	lsl.w	r0, r3, r0
 800f186:	9b04      	ldr	r3, [sp, #16]
 800f188:	3701      	adds	r7, #1
 800f18a:	4303      	orrs	r3, r0
 800f18c:	9304      	str	r3, [sp, #16]
 800f18e:	7839      	ldrb	r1, [r7, #0]
 800f190:	2206      	movs	r2, #6
 800f192:	4827      	ldr	r0, [pc, #156]	; (800f230 <_svfiprintf_r+0x1e4>)
 800f194:	1c7e      	adds	r6, r7, #1
 800f196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f19a:	f7ff fb53 	bl	800e844 <memchr>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	d038      	beq.n	800f214 <_svfiprintf_r+0x1c8>
 800f1a2:	4b24      	ldr	r3, [pc, #144]	; (800f234 <_svfiprintf_r+0x1e8>)
 800f1a4:	bb13      	cbnz	r3, 800f1ec <_svfiprintf_r+0x1a0>
 800f1a6:	9b03      	ldr	r3, [sp, #12]
 800f1a8:	3307      	adds	r3, #7
 800f1aa:	f023 0307 	bic.w	r3, r3, #7
 800f1ae:	3308      	adds	r3, #8
 800f1b0:	9303      	str	r3, [sp, #12]
 800f1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1b4:	444b      	add	r3, r9
 800f1b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f1b8:	e76d      	b.n	800f096 <_svfiprintf_r+0x4a>
 800f1ba:	fb05 3202 	mla	r2, r5, r2, r3
 800f1be:	2001      	movs	r0, #1
 800f1c0:	460f      	mov	r7, r1
 800f1c2:	e7a6      	b.n	800f112 <_svfiprintf_r+0xc6>
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	250a      	movs	r5, #10
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	3701      	adds	r7, #1
 800f1cc:	9305      	str	r3, [sp, #20]
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1d4:	3a30      	subs	r2, #48	; 0x30
 800f1d6:	2a09      	cmp	r2, #9
 800f1d8:	d903      	bls.n	800f1e2 <_svfiprintf_r+0x196>
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d0c8      	beq.n	800f170 <_svfiprintf_r+0x124>
 800f1de:	9105      	str	r1, [sp, #20]
 800f1e0:	e7c6      	b.n	800f170 <_svfiprintf_r+0x124>
 800f1e2:	fb05 2101 	mla	r1, r5, r1, r2
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	4607      	mov	r7, r0
 800f1ea:	e7f0      	b.n	800f1ce <_svfiprintf_r+0x182>
 800f1ec:	ab03      	add	r3, sp, #12
 800f1ee:	9300      	str	r3, [sp, #0]
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	4b11      	ldr	r3, [pc, #68]	; (800f238 <_svfiprintf_r+0x1ec>)
 800f1f4:	a904      	add	r1, sp, #16
 800f1f6:	4640      	mov	r0, r8
 800f1f8:	f7fe f8ec 	bl	800d3d4 <_printf_float>
 800f1fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f200:	4681      	mov	r9, r0
 800f202:	d1d6      	bne.n	800f1b2 <_svfiprintf_r+0x166>
 800f204:	89a3      	ldrh	r3, [r4, #12]
 800f206:	065b      	lsls	r3, r3, #25
 800f208:	f53f af35 	bmi.w	800f076 <_svfiprintf_r+0x2a>
 800f20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f20e:	b01d      	add	sp, #116	; 0x74
 800f210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f214:	ab03      	add	r3, sp, #12
 800f216:	9300      	str	r3, [sp, #0]
 800f218:	4622      	mov	r2, r4
 800f21a:	4b07      	ldr	r3, [pc, #28]	; (800f238 <_svfiprintf_r+0x1ec>)
 800f21c:	a904      	add	r1, sp, #16
 800f21e:	4640      	mov	r0, r8
 800f220:	f7fe fb84 	bl	800d92c <_printf_i>
 800f224:	e7ea      	b.n	800f1fc <_svfiprintf_r+0x1b0>
 800f226:	bf00      	nop
 800f228:	0801013c 	.word	0x0801013c
 800f22c:	08010142 	.word	0x08010142
 800f230:	08010146 	.word	0x08010146
 800f234:	0800d3d5 	.word	0x0800d3d5
 800f238:	0800ef99 	.word	0x0800ef99

0800f23c <_sbrk_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	2300      	movs	r3, #0
 800f240:	4c05      	ldr	r4, [pc, #20]	; (800f258 <_sbrk_r+0x1c>)
 800f242:	4605      	mov	r5, r0
 800f244:	4608      	mov	r0, r1
 800f246:	6023      	str	r3, [r4, #0]
 800f248:	f7f8 fbf2 	bl	8007a30 <_sbrk>
 800f24c:	1c43      	adds	r3, r0, #1
 800f24e:	d102      	bne.n	800f256 <_sbrk_r+0x1a>
 800f250:	6823      	ldr	r3, [r4, #0]
 800f252:	b103      	cbz	r3, 800f256 <_sbrk_r+0x1a>
 800f254:	602b      	str	r3, [r5, #0]
 800f256:	bd38      	pop	{r3, r4, r5, pc}
 800f258:	200011f4 	.word	0x200011f4

0800f25c <__ascii_mbtowc>:
 800f25c:	b082      	sub	sp, #8
 800f25e:	b901      	cbnz	r1, 800f262 <__ascii_mbtowc+0x6>
 800f260:	a901      	add	r1, sp, #4
 800f262:	b142      	cbz	r2, 800f276 <__ascii_mbtowc+0x1a>
 800f264:	b14b      	cbz	r3, 800f27a <__ascii_mbtowc+0x1e>
 800f266:	7813      	ldrb	r3, [r2, #0]
 800f268:	600b      	str	r3, [r1, #0]
 800f26a:	7812      	ldrb	r2, [r2, #0]
 800f26c:	1c10      	adds	r0, r2, #0
 800f26e:	bf18      	it	ne
 800f270:	2001      	movne	r0, #1
 800f272:	b002      	add	sp, #8
 800f274:	4770      	bx	lr
 800f276:	4610      	mov	r0, r2
 800f278:	e7fb      	b.n	800f272 <__ascii_mbtowc+0x16>
 800f27a:	f06f 0001 	mvn.w	r0, #1
 800f27e:	e7f8      	b.n	800f272 <__ascii_mbtowc+0x16>

0800f280 <memmove>:
 800f280:	4288      	cmp	r0, r1
 800f282:	b510      	push	{r4, lr}
 800f284:	eb01 0302 	add.w	r3, r1, r2
 800f288:	d807      	bhi.n	800f29a <memmove+0x1a>
 800f28a:	1e42      	subs	r2, r0, #1
 800f28c:	4299      	cmp	r1, r3
 800f28e:	d00a      	beq.n	800f2a6 <memmove+0x26>
 800f290:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f294:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f298:	e7f8      	b.n	800f28c <memmove+0xc>
 800f29a:	4283      	cmp	r3, r0
 800f29c:	d9f5      	bls.n	800f28a <memmove+0xa>
 800f29e:	1881      	adds	r1, r0, r2
 800f2a0:	1ad2      	subs	r2, r2, r3
 800f2a2:	42d3      	cmn	r3, r2
 800f2a4:	d100      	bne.n	800f2a8 <memmove+0x28>
 800f2a6:	bd10      	pop	{r4, pc}
 800f2a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f2b0:	e7f7      	b.n	800f2a2 <memmove+0x22>

0800f2b2 <__malloc_lock>:
 800f2b2:	4770      	bx	lr

0800f2b4 <__malloc_unlock>:
 800f2b4:	4770      	bx	lr

0800f2b6 <_realloc_r>:
 800f2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b8:	4607      	mov	r7, r0
 800f2ba:	4614      	mov	r4, r2
 800f2bc:	460e      	mov	r6, r1
 800f2be:	b921      	cbnz	r1, 800f2ca <_realloc_r+0x14>
 800f2c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	f7ff be0d 	b.w	800eee4 <_malloc_r>
 800f2ca:	b922      	cbnz	r2, 800f2d6 <_realloc_r+0x20>
 800f2cc:	f7ff fdbe 	bl	800ee4c <_free_r>
 800f2d0:	4625      	mov	r5, r4
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d6:	f000 f821 	bl	800f31c <_malloc_usable_size_r>
 800f2da:	42a0      	cmp	r0, r4
 800f2dc:	d20f      	bcs.n	800f2fe <_realloc_r+0x48>
 800f2de:	4621      	mov	r1, r4
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	f7ff fdff 	bl	800eee4 <_malloc_r>
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	2800      	cmp	r0, #0
 800f2ea:	d0f2      	beq.n	800f2d2 <_realloc_r+0x1c>
 800f2ec:	4631      	mov	r1, r6
 800f2ee:	4622      	mov	r2, r4
 800f2f0:	f7ff fab6 	bl	800e860 <memcpy>
 800f2f4:	4631      	mov	r1, r6
 800f2f6:	4638      	mov	r0, r7
 800f2f8:	f7ff fda8 	bl	800ee4c <_free_r>
 800f2fc:	e7e9      	b.n	800f2d2 <_realloc_r+0x1c>
 800f2fe:	4635      	mov	r5, r6
 800f300:	e7e7      	b.n	800f2d2 <_realloc_r+0x1c>

0800f302 <__ascii_wctomb>:
 800f302:	b149      	cbz	r1, 800f318 <__ascii_wctomb+0x16>
 800f304:	2aff      	cmp	r2, #255	; 0xff
 800f306:	bf8b      	itete	hi
 800f308:	238a      	movhi	r3, #138	; 0x8a
 800f30a:	700a      	strbls	r2, [r1, #0]
 800f30c:	6003      	strhi	r3, [r0, #0]
 800f30e:	2001      	movls	r0, #1
 800f310:	bf88      	it	hi
 800f312:	f04f 30ff 	movhi.w	r0, #4294967295
 800f316:	4770      	bx	lr
 800f318:	4608      	mov	r0, r1
 800f31a:	4770      	bx	lr

0800f31c <_malloc_usable_size_r>:
 800f31c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f320:	1f18      	subs	r0, r3, #4
 800f322:	2b00      	cmp	r3, #0
 800f324:	bfbc      	itt	lt
 800f326:	580b      	ldrlt	r3, [r1, r0]
 800f328:	18c0      	addlt	r0, r0, r3
 800f32a:	4770      	bx	lr

0800f32c <log>:
 800f32c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800f330:	b08a      	sub	sp, #40	; 0x28
 800f332:	4604      	mov	r4, r0
 800f334:	460d      	mov	r5, r1
 800f336:	f000 f873 	bl	800f420 <__ieee754_log>
 800f33a:	4b34      	ldr	r3, [pc, #208]	; (800f40c <log+0xe0>)
 800f33c:	4680      	mov	r8, r0
 800f33e:	f993 6000 	ldrsb.w	r6, [r3]
 800f342:	4689      	mov	r9, r1
 800f344:	1c73      	adds	r3, r6, #1
 800f346:	d05b      	beq.n	800f400 <log+0xd4>
 800f348:	4622      	mov	r2, r4
 800f34a:	462b      	mov	r3, r5
 800f34c:	4620      	mov	r0, r4
 800f34e:	4629      	mov	r1, r5
 800f350:	f7f1 fb98 	bl	8000a84 <__aeabi_dcmpun>
 800f354:	2800      	cmp	r0, #0
 800f356:	d153      	bne.n	800f400 <log+0xd4>
 800f358:	2200      	movs	r2, #0
 800f35a:	2300      	movs	r3, #0
 800f35c:	4620      	mov	r0, r4
 800f35e:	4629      	mov	r1, r5
 800f360:	f7f1 fb86 	bl	8000a70 <__aeabi_dcmpgt>
 800f364:	2800      	cmp	r0, #0
 800f366:	d14b      	bne.n	800f400 <log+0xd4>
 800f368:	4b29      	ldr	r3, [pc, #164]	; (800f410 <log+0xe4>)
 800f36a:	9008      	str	r0, [sp, #32]
 800f36c:	9301      	str	r3, [sp, #4]
 800f36e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f372:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f376:	b9a6      	cbnz	r6, 800f3a2 <log+0x76>
 800f378:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f37c:	4b25      	ldr	r3, [pc, #148]	; (800f414 <log+0xe8>)
 800f37e:	4620      	mov	r0, r4
 800f380:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f384:	4629      	mov	r1, r5
 800f386:	2200      	movs	r2, #0
 800f388:	2300      	movs	r3, #0
 800f38a:	f7f1 fb49 	bl	8000a20 <__aeabi_dcmpeq>
 800f38e:	bb40      	cbnz	r0, 800f3e2 <log+0xb6>
 800f390:	2301      	movs	r3, #1
 800f392:	2e02      	cmp	r6, #2
 800f394:	9300      	str	r3, [sp, #0]
 800f396:	d119      	bne.n	800f3cc <log+0xa0>
 800f398:	f7fd ff58 	bl	800d24c <__errno>
 800f39c:	2321      	movs	r3, #33	; 0x21
 800f39e:	6003      	str	r3, [r0, #0]
 800f3a0:	e019      	b.n	800f3d6 <log+0xaa>
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	4b1c      	ldr	r3, [pc, #112]	; (800f418 <log+0xec>)
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f3ac:	4629      	mov	r1, r5
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	f7f1 fb35 	bl	8000a20 <__aeabi_dcmpeq>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	d0ea      	beq.n	800f390 <log+0x64>
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	429e      	cmp	r6, r3
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	d111      	bne.n	800f3e6 <log+0xba>
 800f3c2:	f7fd ff43 	bl	800d24c <__errno>
 800f3c6:	2322      	movs	r3, #34	; 0x22
 800f3c8:	6003      	str	r3, [r0, #0]
 800f3ca:	e011      	b.n	800f3f0 <log+0xc4>
 800f3cc:	4668      	mov	r0, sp
 800f3ce:	f000 f9d9 	bl	800f784 <matherr>
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	d0e0      	beq.n	800f398 <log+0x6c>
 800f3d6:	4811      	ldr	r0, [pc, #68]	; (800f41c <log+0xf0>)
 800f3d8:	f000 f9d6 	bl	800f788 <nan>
 800f3dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f3e0:	e006      	b.n	800f3f0 <log+0xc4>
 800f3e2:	2302      	movs	r3, #2
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4668      	mov	r0, sp
 800f3e8:	f000 f9cc 	bl	800f784 <matherr>
 800f3ec:	2800      	cmp	r0, #0
 800f3ee:	d0e8      	beq.n	800f3c2 <log+0x96>
 800f3f0:	9b08      	ldr	r3, [sp, #32]
 800f3f2:	b11b      	cbz	r3, 800f3fc <log+0xd0>
 800f3f4:	f7fd ff2a 	bl	800d24c <__errno>
 800f3f8:	9b08      	ldr	r3, [sp, #32]
 800f3fa:	6003      	str	r3, [r0, #0]
 800f3fc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800f400:	4640      	mov	r0, r8
 800f402:	4649      	mov	r1, r9
 800f404:	b00a      	add	sp, #40	; 0x28
 800f406:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f40a:	bf00      	nop
 800f40c:	20000234 	.word	0x20000234
 800f410:	08010258 	.word	0x08010258
 800f414:	c7efffff 	.word	0xc7efffff
 800f418:	fff00000 	.word	0xfff00000
 800f41c:	08010141 	.word	0x08010141

0800f420 <__ieee754_log>:
 800f420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f424:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f428:	b087      	sub	sp, #28
 800f42a:	4602      	mov	r2, r0
 800f42c:	460b      	mov	r3, r1
 800f42e:	460d      	mov	r5, r1
 800f430:	da24      	bge.n	800f47c <__ieee754_log+0x5c>
 800f432:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800f436:	4304      	orrs	r4, r0
 800f438:	d108      	bne.n	800f44c <__ieee754_log+0x2c>
 800f43a:	2200      	movs	r2, #0
 800f43c:	2300      	movs	r3, #0
 800f43e:	2000      	movs	r0, #0
 800f440:	49cb      	ldr	r1, [pc, #812]	; (800f770 <__ieee754_log+0x350>)
 800f442:	f7f1 f9af 	bl	80007a4 <__aeabi_ddiv>
 800f446:	b007      	add	sp, #28
 800f448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f44c:	2900      	cmp	r1, #0
 800f44e:	da04      	bge.n	800f45a <__ieee754_log+0x3a>
 800f450:	f7f0 fec6 	bl	80001e0 <__aeabi_dsub>
 800f454:	2200      	movs	r2, #0
 800f456:	2300      	movs	r3, #0
 800f458:	e7f3      	b.n	800f442 <__ieee754_log+0x22>
 800f45a:	2200      	movs	r2, #0
 800f45c:	4bc5      	ldr	r3, [pc, #788]	; (800f774 <__ieee754_log+0x354>)
 800f45e:	f7f1 f877 	bl	8000550 <__aeabi_dmul>
 800f462:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800f466:	4602      	mov	r2, r0
 800f468:	460b      	mov	r3, r1
 800f46a:	460d      	mov	r5, r1
 800f46c:	49c2      	ldr	r1, [pc, #776]	; (800f778 <__ieee754_log+0x358>)
 800f46e:	428d      	cmp	r5, r1
 800f470:	dd06      	ble.n	800f480 <__ieee754_log+0x60>
 800f472:	4610      	mov	r0, r2
 800f474:	4619      	mov	r1, r3
 800f476:	f7f0 feb5 	bl	80001e4 <__adddf3>
 800f47a:	e7e4      	b.n	800f446 <__ieee754_log+0x26>
 800f47c:	2600      	movs	r6, #0
 800f47e:	e7f5      	b.n	800f46c <__ieee754_log+0x4c>
 800f480:	152c      	asrs	r4, r5, #20
 800f482:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f486:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800f48a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f48e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800f492:	4426      	add	r6, r4
 800f494:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800f498:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800f49c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800f4a0:	ea41 0305 	orr.w	r3, r1, r5
 800f4a4:	4610      	mov	r0, r2
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	4bb4      	ldr	r3, [pc, #720]	; (800f77c <__ieee754_log+0x35c>)
 800f4ac:	f7f0 fe98 	bl	80001e0 <__aeabi_dsub>
 800f4b0:	1cab      	adds	r3, r5, #2
 800f4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4b6:	2b02      	cmp	r3, #2
 800f4b8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800f4bc:	4682      	mov	sl, r0
 800f4be:	468b      	mov	fp, r1
 800f4c0:	f04f 0200 	mov.w	r2, #0
 800f4c4:	dc53      	bgt.n	800f56e <__ieee754_log+0x14e>
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f7f1 faaa 	bl	8000a20 <__aeabi_dcmpeq>
 800f4cc:	b1d0      	cbz	r0, 800f504 <__ieee754_log+0xe4>
 800f4ce:	2c00      	cmp	r4, #0
 800f4d0:	f000 8120 	beq.w	800f714 <__ieee754_log+0x2f4>
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f7f0 ffd1 	bl	800047c <__aeabi_i2d>
 800f4da:	a391      	add	r3, pc, #580	; (adr r3, 800f720 <__ieee754_log+0x300>)
 800f4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	460f      	mov	r7, r1
 800f4e4:	f7f1 f834 	bl	8000550 <__aeabi_dmul>
 800f4e8:	a38f      	add	r3, pc, #572	; (adr r3, 800f728 <__ieee754_log+0x308>)
 800f4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	460d      	mov	r5, r1
 800f4f2:	4630      	mov	r0, r6
 800f4f4:	4639      	mov	r1, r7
 800f4f6:	f7f1 f82b 	bl	8000550 <__aeabi_dmul>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	4620      	mov	r0, r4
 800f500:	4629      	mov	r1, r5
 800f502:	e7b8      	b.n	800f476 <__ieee754_log+0x56>
 800f504:	a38a      	add	r3, pc, #552	; (adr r3, 800f730 <__ieee754_log+0x310>)
 800f506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f50a:	4650      	mov	r0, sl
 800f50c:	4659      	mov	r1, fp
 800f50e:	f7f1 f81f 	bl	8000550 <__aeabi_dmul>
 800f512:	4602      	mov	r2, r0
 800f514:	460b      	mov	r3, r1
 800f516:	2000      	movs	r0, #0
 800f518:	4999      	ldr	r1, [pc, #612]	; (800f780 <__ieee754_log+0x360>)
 800f51a:	f7f0 fe61 	bl	80001e0 <__aeabi_dsub>
 800f51e:	4652      	mov	r2, sl
 800f520:	4606      	mov	r6, r0
 800f522:	460f      	mov	r7, r1
 800f524:	465b      	mov	r3, fp
 800f526:	4650      	mov	r0, sl
 800f528:	4659      	mov	r1, fp
 800f52a:	f7f1 f811 	bl	8000550 <__aeabi_dmul>
 800f52e:	4602      	mov	r2, r0
 800f530:	460b      	mov	r3, r1
 800f532:	4630      	mov	r0, r6
 800f534:	4639      	mov	r1, r7
 800f536:	f7f1 f80b 	bl	8000550 <__aeabi_dmul>
 800f53a:	4606      	mov	r6, r0
 800f53c:	460f      	mov	r7, r1
 800f53e:	b914      	cbnz	r4, 800f546 <__ieee754_log+0x126>
 800f540:	4632      	mov	r2, r6
 800f542:	463b      	mov	r3, r7
 800f544:	e0a0      	b.n	800f688 <__ieee754_log+0x268>
 800f546:	4620      	mov	r0, r4
 800f548:	f7f0 ff98 	bl	800047c <__aeabi_i2d>
 800f54c:	a374      	add	r3, pc, #464	; (adr r3, 800f720 <__ieee754_log+0x300>)
 800f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f552:	4680      	mov	r8, r0
 800f554:	4689      	mov	r9, r1
 800f556:	f7f0 fffb 	bl	8000550 <__aeabi_dmul>
 800f55a:	a373      	add	r3, pc, #460	; (adr r3, 800f728 <__ieee754_log+0x308>)
 800f55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f560:	4604      	mov	r4, r0
 800f562:	460d      	mov	r5, r1
 800f564:	4640      	mov	r0, r8
 800f566:	4649      	mov	r1, r9
 800f568:	f7f0 fff2 	bl	8000550 <__aeabi_dmul>
 800f56c:	e0a5      	b.n	800f6ba <__ieee754_log+0x29a>
 800f56e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f572:	f7f0 fe37 	bl	80001e4 <__adddf3>
 800f576:	4602      	mov	r2, r0
 800f578:	460b      	mov	r3, r1
 800f57a:	4650      	mov	r0, sl
 800f57c:	4659      	mov	r1, fp
 800f57e:	f7f1 f911 	bl	80007a4 <__aeabi_ddiv>
 800f582:	e9cd 0100 	strd	r0, r1, [sp]
 800f586:	4620      	mov	r0, r4
 800f588:	f7f0 ff78 	bl	800047c <__aeabi_i2d>
 800f58c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f594:	4610      	mov	r0, r2
 800f596:	4619      	mov	r1, r3
 800f598:	f7f0 ffda 	bl	8000550 <__aeabi_dmul>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5a4:	f7f0 ffd4 	bl	8000550 <__aeabi_dmul>
 800f5a8:	a363      	add	r3, pc, #396	; (adr r3, 800f738 <__ieee754_log+0x318>)
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	4680      	mov	r8, r0
 800f5b0:	4689      	mov	r9, r1
 800f5b2:	f7f0 ffcd 	bl	8000550 <__aeabi_dmul>
 800f5b6:	a362      	add	r3, pc, #392	; (adr r3, 800f740 <__ieee754_log+0x320>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	f7f0 fe12 	bl	80001e4 <__adddf3>
 800f5c0:	4642      	mov	r2, r8
 800f5c2:	464b      	mov	r3, r9
 800f5c4:	f7f0 ffc4 	bl	8000550 <__aeabi_dmul>
 800f5c8:	a35f      	add	r3, pc, #380	; (adr r3, 800f748 <__ieee754_log+0x328>)
 800f5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ce:	f7f0 fe09 	bl	80001e4 <__adddf3>
 800f5d2:	4642      	mov	r2, r8
 800f5d4:	464b      	mov	r3, r9
 800f5d6:	f7f0 ffbb 	bl	8000550 <__aeabi_dmul>
 800f5da:	a35d      	add	r3, pc, #372	; (adr r3, 800f750 <__ieee754_log+0x330>)
 800f5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e0:	f7f0 fe00 	bl	80001e4 <__adddf3>
 800f5e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f5e8:	f7f0 ffb2 	bl	8000550 <__aeabi_dmul>
 800f5ec:	a35a      	add	r3, pc, #360	; (adr r3, 800f758 <__ieee754_log+0x338>)
 800f5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f5f6:	4640      	mov	r0, r8
 800f5f8:	4649      	mov	r1, r9
 800f5fa:	f7f0 ffa9 	bl	8000550 <__aeabi_dmul>
 800f5fe:	a358      	add	r3, pc, #352	; (adr r3, 800f760 <__ieee754_log+0x340>)
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	f7f0 fdee 	bl	80001e4 <__adddf3>
 800f608:	4642      	mov	r2, r8
 800f60a:	464b      	mov	r3, r9
 800f60c:	f7f0 ffa0 	bl	8000550 <__aeabi_dmul>
 800f610:	a355      	add	r3, pc, #340	; (adr r3, 800f768 <__ieee754_log+0x348>)
 800f612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f616:	f7f0 fde5 	bl	80001e4 <__adddf3>
 800f61a:	4642      	mov	r2, r8
 800f61c:	464b      	mov	r3, r9
 800f61e:	f7f0 ff97 	bl	8000550 <__aeabi_dmul>
 800f622:	4602      	mov	r2, r0
 800f624:	460b      	mov	r3, r1
 800f626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f62a:	f7f0 fddb 	bl	80001e4 <__adddf3>
 800f62e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800f632:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f636:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800f63a:	3551      	adds	r5, #81	; 0x51
 800f63c:	4335      	orrs	r5, r6
 800f63e:	2d00      	cmp	r5, #0
 800f640:	4680      	mov	r8, r0
 800f642:	4689      	mov	r9, r1
 800f644:	dd48      	ble.n	800f6d8 <__ieee754_log+0x2b8>
 800f646:	2200      	movs	r2, #0
 800f648:	4b4d      	ldr	r3, [pc, #308]	; (800f780 <__ieee754_log+0x360>)
 800f64a:	4650      	mov	r0, sl
 800f64c:	4659      	mov	r1, fp
 800f64e:	f7f0 ff7f 	bl	8000550 <__aeabi_dmul>
 800f652:	4652      	mov	r2, sl
 800f654:	465b      	mov	r3, fp
 800f656:	f7f0 ff7b 	bl	8000550 <__aeabi_dmul>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	4606      	mov	r6, r0
 800f660:	460f      	mov	r7, r1
 800f662:	4640      	mov	r0, r8
 800f664:	4649      	mov	r1, r9
 800f666:	f7f0 fdbd 	bl	80001e4 <__adddf3>
 800f66a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f66e:	f7f0 ff6f 	bl	8000550 <__aeabi_dmul>
 800f672:	4680      	mov	r8, r0
 800f674:	4689      	mov	r9, r1
 800f676:	b964      	cbnz	r4, 800f692 <__ieee754_log+0x272>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	4630      	mov	r0, r6
 800f67e:	4639      	mov	r1, r7
 800f680:	f7f0 fdae 	bl	80001e0 <__aeabi_dsub>
 800f684:	4602      	mov	r2, r0
 800f686:	460b      	mov	r3, r1
 800f688:	4650      	mov	r0, sl
 800f68a:	4659      	mov	r1, fp
 800f68c:	f7f0 fda8 	bl	80001e0 <__aeabi_dsub>
 800f690:	e6d9      	b.n	800f446 <__ieee754_log+0x26>
 800f692:	a323      	add	r3, pc, #140	; (adr r3, 800f720 <__ieee754_log+0x300>)
 800f694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f698:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f69c:	f7f0 ff58 	bl	8000550 <__aeabi_dmul>
 800f6a0:	a321      	add	r3, pc, #132	; (adr r3, 800f728 <__ieee754_log+0x308>)
 800f6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	460d      	mov	r5, r1
 800f6aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ae:	f7f0 ff4f 	bl	8000550 <__aeabi_dmul>
 800f6b2:	4642      	mov	r2, r8
 800f6b4:	464b      	mov	r3, r9
 800f6b6:	f7f0 fd95 	bl	80001e4 <__adddf3>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	4630      	mov	r0, r6
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	f7f0 fd8d 	bl	80001e0 <__aeabi_dsub>
 800f6c6:	4652      	mov	r2, sl
 800f6c8:	465b      	mov	r3, fp
 800f6ca:	f7f0 fd89 	bl	80001e0 <__aeabi_dsub>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	e7d9      	b.n	800f68c <__ieee754_log+0x26c>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	460b      	mov	r3, r1
 800f6dc:	4650      	mov	r0, sl
 800f6de:	4659      	mov	r1, fp
 800f6e0:	f7f0 fd7e 	bl	80001e0 <__aeabi_dsub>
 800f6e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6e8:	f7f0 ff32 	bl	8000550 <__aeabi_dmul>
 800f6ec:	4606      	mov	r6, r0
 800f6ee:	460f      	mov	r7, r1
 800f6f0:	2c00      	cmp	r4, #0
 800f6f2:	f43f af25 	beq.w	800f540 <__ieee754_log+0x120>
 800f6f6:	a30a      	add	r3, pc, #40	; (adr r3, 800f720 <__ieee754_log+0x300>)
 800f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f700:	f7f0 ff26 	bl	8000550 <__aeabi_dmul>
 800f704:	a308      	add	r3, pc, #32	; (adr r3, 800f728 <__ieee754_log+0x308>)
 800f706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f70a:	4604      	mov	r4, r0
 800f70c:	460d      	mov	r5, r1
 800f70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f712:	e729      	b.n	800f568 <__ieee754_log+0x148>
 800f714:	2000      	movs	r0, #0
 800f716:	2100      	movs	r1, #0
 800f718:	e695      	b.n	800f446 <__ieee754_log+0x26>
 800f71a:	bf00      	nop
 800f71c:	f3af 8000 	nop.w
 800f720:	fee00000 	.word	0xfee00000
 800f724:	3fe62e42 	.word	0x3fe62e42
 800f728:	35793c76 	.word	0x35793c76
 800f72c:	3dea39ef 	.word	0x3dea39ef
 800f730:	55555555 	.word	0x55555555
 800f734:	3fd55555 	.word	0x3fd55555
 800f738:	df3e5244 	.word	0xdf3e5244
 800f73c:	3fc2f112 	.word	0x3fc2f112
 800f740:	96cb03de 	.word	0x96cb03de
 800f744:	3fc74664 	.word	0x3fc74664
 800f748:	94229359 	.word	0x94229359
 800f74c:	3fd24924 	.word	0x3fd24924
 800f750:	55555593 	.word	0x55555593
 800f754:	3fe55555 	.word	0x3fe55555
 800f758:	d078c69f 	.word	0xd078c69f
 800f75c:	3fc39a09 	.word	0x3fc39a09
 800f760:	1d8e78af 	.word	0x1d8e78af
 800f764:	3fcc71c5 	.word	0x3fcc71c5
 800f768:	9997fa04 	.word	0x9997fa04
 800f76c:	3fd99999 	.word	0x3fd99999
 800f770:	c3500000 	.word	0xc3500000
 800f774:	43500000 	.word	0x43500000
 800f778:	7fefffff 	.word	0x7fefffff
 800f77c:	3ff00000 	.word	0x3ff00000
 800f780:	3fe00000 	.word	0x3fe00000

0800f784 <matherr>:
 800f784:	2000      	movs	r0, #0
 800f786:	4770      	bx	lr

0800f788 <nan>:
 800f788:	2000      	movs	r0, #0
 800f78a:	4901      	ldr	r1, [pc, #4]	; (800f790 <nan+0x8>)
 800f78c:	4770      	bx	lr
 800f78e:	bf00      	nop
 800f790:	7ff80000 	.word	0x7ff80000

0800f794 <_init>:
 800f794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f796:	bf00      	nop
 800f798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f79a:	bc08      	pop	{r3}
 800f79c:	469e      	mov	lr, r3
 800f79e:	4770      	bx	lr

0800f7a0 <_fini>:
 800f7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7a2:	bf00      	nop
 800f7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7a6:	bc08      	pop	{r3}
 800f7a8:	469e      	mov	lr, r3
 800f7aa:	4770      	bx	lr
