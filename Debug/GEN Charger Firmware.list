
GEN Charger Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8f4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0800fa80  0800fa80  0001fa80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801052c  0801052c  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  0801052c  0801052c  0002052c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010534  08010534  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010534  08010534  00020534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010538  08010538  00020538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0801053c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fe4  20000238  08010774  00030238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000121c  08010774  0003121c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb9b  00000000  00000000  00030261  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000395a  00000000  00000000  0004fdfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00053758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f8  00000000  00000000  00054b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b90  00000000  00000000  00055d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b5c  00000000  00000000  000778a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c22c1  00000000  00000000  0008b3fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014d6bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf4  00000000  00000000  0014d738  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000238 	.word	0x20000238
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fa64 	.word	0x0800fa64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000023c 	.word	0x2000023c
 80001c4:	0800fa64 	.word	0x0800fa64

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <Constant_Current>:
float 	SetPoint_CC;
float	CC_Value = 0.3*Battery_Capacity;

//test git2
void Constant_Current()
{
 8001490:	b598      	push	{r3, r4, r7, lr}
 8001492:	af00      	add	r7, sp, #0
	if(Batt_SOC.m_uint16t <= 15)
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <Constant_Current+0x44>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	2b0f      	cmp	r3, #15
 800149a:	d80b      	bhi.n	80014b4 <Constant_Current+0x24>
		SetPoint_CC = 0.5*CC_Value;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <Constant_Current+0x48>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fc89 	bl	8000dbc <__aeabi_fmul>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <Constant_Current+0x4c>)
 80014b0:	601a      	str	r2, [r3, #0]
 80014b2:	e0a0      	b.n	80015f6 <Constant_Current+0x166>
	else {
		if(flag_Derating==1)
 80014b4:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <Constant_Current+0x50>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d113      	bne.n	80014e4 <Constant_Current+0x54>
			SetPoint_CC = 0.5*CC_Value;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <Constant_Current+0x48>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fc79 	bl	8000dbc <__aeabi_fmul>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b03      	ldr	r3, [pc, #12]	; (80014dc <Constant_Current+0x4c>)
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	e090      	b.n	80015f6 <Constant_Current+0x166>
 80014d4:	20000a5c 	.word	0x20000a5c
 80014d8:	20000020 	.word	0x20000020
 80014dc:	200009f8 	.word	0x200009f8
 80014e0:	20000c9c 	.word	0x20000c9c
		else {
			if(BPack_Temp <= 10)
 80014e4:	4b92      	ldr	r3, [pc, #584]	; (8001730 <Constant_Current+0x2a0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4992      	ldr	r1, [pc, #584]	; (8001734 <Constant_Current+0x2a4>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fe0e 	bl	800110c <__aeabi_fcmple>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00a      	beq.n	800150c <Constant_Current+0x7c>
				SetPoint_CC = 0.5*CC_Value;
 80014f6:	4b90      	ldr	r3, [pc, #576]	; (8001738 <Constant_Current+0x2a8>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc5c 	bl	8000dbc <__aeabi_fmul>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b8c      	ldr	r3, [pc, #560]	; (800173c <Constant_Current+0x2ac>)
 800150a:	601a      	str	r2, [r3, #0]

			if(BPack_Temp >10 && BPack_Temp < 20) // Temperature 10 ~ 20
 800150c:	4b88      	ldr	r3, [pc, #544]	; (8001730 <Constant_Current+0x2a0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4988      	ldr	r1, [pc, #544]	; (8001734 <Constant_Current+0x2a4>)
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fe0e 	bl	8001134 <__aeabi_fcmpgt>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d013      	beq.n	8001546 <Constant_Current+0xb6>
 800151e:	4b84      	ldr	r3, [pc, #528]	; (8001730 <Constant_Current+0x2a0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4987      	ldr	r1, [pc, #540]	; (8001740 <Constant_Current+0x2b0>)
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fde7 	bl	80010f8 <__aeabi_fcmplt>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00a      	beq.n	8001546 <Constant_Current+0xb6>
				SetPoint_CC = 0.5*CC_Value;
 8001530:	4b81      	ldr	r3, [pc, #516]	; (8001738 <Constant_Current+0x2a8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc3f 	bl	8000dbc <__aeabi_fmul>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b7e      	ldr	r3, [pc, #504]	; (800173c <Constant_Current+0x2ac>)
 8001544:	601a      	str	r2, [r3, #0]

			if(BPack_Temp >= 20 && BPack_Temp < 30) // Temperature 20 ~ 30
 8001546:	4b7a      	ldr	r3, [pc, #488]	; (8001730 <Constant_Current+0x2a0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	497d      	ldr	r1, [pc, #500]	; (8001740 <Constant_Current+0x2b0>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fde7 	bl	8001120 <__aeabi_fcmpge>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01b      	beq.n	8001590 <Constant_Current+0x100>
 8001558:	4b75      	ldr	r3, [pc, #468]	; (8001730 <Constant_Current+0x2a0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4979      	ldr	r1, [pc, #484]	; (8001744 <Constant_Current+0x2b4>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fdca 	bl	80010f8 <__aeabi_fcmplt>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d012      	beq.n	8001590 <Constant_Current+0x100>
				SetPoint_CC = 0.7*CC_Value;
 800156a:	4b73      	ldr	r3, [pc, #460]	; (8001738 <Constant_Current+0x2a8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe ff96 	bl	80004a0 <__aeabi_f2d>
 8001574:	a36c      	add	r3, pc, #432	; (adr r3, 8001728 <Constant_Current+0x298>)
 8001576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157a:	f7fe ffe9 	bl	8000550 <__aeabi_dmul>
 800157e:	4603      	mov	r3, r0
 8001580:	460c      	mov	r4, r1
 8001582:	4618      	mov	r0, r3
 8001584:	4621      	mov	r1, r4
 8001586:	f7ff fabb 	bl	8000b00 <__aeabi_d2f>
 800158a:	4602      	mov	r2, r0
 800158c:	4b6b      	ldr	r3, [pc, #428]	; (800173c <Constant_Current+0x2ac>)
 800158e:	601a      	str	r2, [r3, #0]

			if(BPack_Temp >= 30 && BPack_Temp <= 40)
 8001590:	4b67      	ldr	r3, [pc, #412]	; (8001730 <Constant_Current+0x2a0>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	496b      	ldr	r1, [pc, #428]	; (8001744 <Constant_Current+0x2b4>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fdc2 	bl	8001120 <__aeabi_fcmpge>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <Constant_Current+0x12c>
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <Constant_Current+0x2a0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4968      	ldr	r1, [pc, #416]	; (8001748 <Constant_Current+0x2b8>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fdaf 	bl	800110c <__aeabi_fcmple>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <Constant_Current+0x12c>
				SetPoint_CC = CC_Value;
 80015b4:	4b60      	ldr	r3, [pc, #384]	; (8001738 <Constant_Current+0x2a8>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a60      	ldr	r2, [pc, #384]	; (800173c <Constant_Current+0x2ac>)
 80015ba:	6013      	str	r3, [r2, #0]

			if(BPack_Temp > 40 && BPack_Temp <= 50)
 80015bc:	4b5c      	ldr	r3, [pc, #368]	; (8001730 <Constant_Current+0x2a0>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4961      	ldr	r1, [pc, #388]	; (8001748 <Constant_Current+0x2b8>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fdb6 	bl	8001134 <__aeabi_fcmpgt>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d013      	beq.n	80015f6 <Constant_Current+0x166>
 80015ce:	4b58      	ldr	r3, [pc, #352]	; (8001730 <Constant_Current+0x2a0>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	495e      	ldr	r1, [pc, #376]	; (800174c <Constant_Current+0x2bc>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd99 	bl	800110c <__aeabi_fcmple>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d00a      	beq.n	80015f6 <Constant_Current+0x166>
				SetPoint_CC = 0.5*CC_Value;
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <Constant_Current+0x2a8>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff fbe7 	bl	8000dbc <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b52      	ldr	r3, [pc, #328]	; (800173c <Constant_Current+0x2ac>)
 80015f4:	601a      	str	r2, [r3, #0]
		}
	}

	sp = SetPoint_CC;
 80015f6:	4b51      	ldr	r3, [pc, #324]	; (800173c <Constant_Current+0x2ac>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a55      	ldr	r2, [pc, #340]	; (8001750 <Constant_Current+0x2c0>)
 80015fc:	6013      	str	r3, [r2, #0]
	pv = Current_Charger;
 80015fe:	4b55      	ldr	r3, [pc, #340]	; (8001754 <Constant_Current+0x2c4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a55      	ldr	r2, [pc, #340]	; (8001758 <Constant_Current+0x2c8>)
 8001604:	6013      	str	r3, [r2, #0]
	e = sp-pv;
 8001606:	4b52      	ldr	r3, [pc, #328]	; (8001750 <Constant_Current+0x2c0>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b53      	ldr	r3, [pc, #332]	; (8001758 <Constant_Current+0x2c8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f7ff fac9 	bl	8000ba8 <__aeabi_fsub>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <Constant_Current+0x2cc>)
 800161c:	601a      	str	r2, [r3, #0]
	d = e-esblm;
 800161e:	4b4f      	ldr	r3, [pc, #316]	; (800175c <Constant_Current+0x2cc>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b4f      	ldr	r3, [pc, #316]	; (8001760 <Constant_Current+0x2d0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4610      	mov	r0, r2
 800162a:	f7ff fabd 	bl	8000ba8 <__aeabi_fsub>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b4c      	ldr	r3, [pc, #304]	; (8001764 <Constant_Current+0x2d4>)
 8001634:	601a      	str	r2, [r3, #0]
	esblm = e;
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <Constant_Current+0x2cc>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a49      	ldr	r2, [pc, #292]	; (8001760 <Constant_Current+0x2d0>)
 800163c:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-6)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <Constant_Current+0x2cc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4949      	ldr	r1, [pc, #292]	; (8001768 <Constant_Current+0x2d8>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd61 	bl	800110c <__aeabi_fcmple>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d01b      	beq.n	8001688 <Constant_Current+0x1f8>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <Constant_Current+0x2dc>)
 8001652:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	4b45      	ldr	r3, [pc, #276]	; (8001770 <Constant_Current+0x2e0>)
 800165a:	f04f 0200 	mov.w	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	4b43      	ldr	r3, [pc, #268]	; (8001770 <Constant_Current+0x2e0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a43      	ldr	r2, [pc, #268]	; (8001774 <Constant_Current+0x2e4>)
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <Constant_Current+0x2e4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a42      	ldr	r2, [pc, #264]	; (8001778 <Constant_Current+0x2e8>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <Constant_Current+0x2e8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a41      	ldr	r2, [pc, #260]	; (800177c <Constant_Current+0x2ec>)
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b40      	ldr	r3, [pc, #256]	; (800177c <Constant_Current+0x2ec>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a40      	ldr	r2, [pc, #256]	; (8001780 <Constant_Current+0x2f0>)
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <Constant_Current+0x2f0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <Constant_Current+0x2f4>)
 8001686:	6013      	str	r3, [r2, #0]

	if(e>=-6&&e<=-4)
 8001688:	4b34      	ldr	r3, [pc, #208]	; (800175c <Constant_Current+0x2cc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4936      	ldr	r1, [pc, #216]	; (8001768 <Constant_Current+0x2d8>)
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fd46 	bl	8001120 <__aeabi_fcmpge>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d07a      	beq.n	8001790 <Constant_Current+0x300>
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <Constant_Current+0x2cc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	493a      	ldr	r1, [pc, #232]	; (8001788 <Constant_Current+0x2f8>)
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fd33 	bl	800110c <__aeabi_fcmple>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d071      	beq.n	8001790 <Constant_Current+0x300>
	{ eNB=(-(e+6)/2)+1;
 80016ac:	4b2b      	ldr	r3, [pc, #172]	; (800175c <Constant_Current+0x2cc>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4936      	ldr	r1, [pc, #216]	; (800178c <Constant_Current+0x2fc>)
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fa7a 	bl	8000bac <__addsf3>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016be:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fc2e 	bl	8000f24 <__aeabi_fdiv>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fa6c 	bl	8000bac <__addsf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b24      	ldr	r3, [pc, #144]	; (800176c <Constant_Current+0x2dc>)
 80016da:	601a      	str	r2, [r3, #0]
	   eNM=(e+6)/2;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	; (800175c <Constant_Current+0x2cc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	492a      	ldr	r1, [pc, #168]	; (800178c <Constant_Current+0x2fc>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa62 	bl	8000bac <__addsf3>
 80016e8:	4603      	mov	r3, r0
 80016ea:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fc18 	bl	8000f24 <__aeabi_fdiv>
 80016f4:	4603      	mov	r3, r0
 80016f6:	461a      	mov	r2, r3
 80016f8:	4b22      	ldr	r3, [pc, #136]	; (8001784 <Constant_Current+0x2f4>)
 80016fa:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <Constant_Current+0x2e0>)
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <Constant_Current+0x2e0>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <Constant_Current+0x2e4>)
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b19      	ldr	r3, [pc, #100]	; (8001774 <Constant_Current+0x2e4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a19      	ldr	r2, [pc, #100]	; (8001778 <Constant_Current+0x2e8>)
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b18      	ldr	r3, [pc, #96]	; (8001778 <Constant_Current+0x2e8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a18      	ldr	r2, [pc, #96]	; (800177c <Constant_Current+0x2ec>)
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <Constant_Current+0x2ec>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a17      	ldr	r2, [pc, #92]	; (8001780 <Constant_Current+0x2f0>)
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e1fb      	b.n	8001b1e <Constant_Current+0x68e>
 8001726:	bf00      	nop
 8001728:	66666666 	.word	0x66666666
 800172c:	3fe66666 	.word	0x3fe66666
 8001730:	20000a54 	.word	0x20000a54
 8001734:	41200000 	.word	0x41200000
 8001738:	20000020 	.word	0x20000020
 800173c:	200009f8 	.word	0x200009f8
 8001740:	41a00000 	.word	0x41a00000
 8001744:	41f00000 	.word	0x41f00000
 8001748:	42200000 	.word	0x42200000
 800174c:	42480000 	.word	0x42480000
 8001750:	20000bb4 	.word	0x20000bb4
 8001754:	20000d78 	.word	0x20000d78
 8001758:	20000ca0 	.word	0x20000ca0
 800175c:	20000d84 	.word	0x20000d84
 8001760:	20000d88 	.word	0x20000d88
 8001764:	20000ab8 	.word	0x20000ab8
 8001768:	c0c00000 	.word	0xc0c00000
 800176c:	20000d8c 	.word	0x20000d8c
 8001770:	200009fc 	.word	0x200009fc
 8001774:	20000ac0 	.word	0x20000ac0
 8001778:	20000a38 	.word	0x20000a38
 800177c:	20000dd8 	.word	0x20000dd8
 8001780:	200006b4 	.word	0x200006b4
 8001784:	20000dc4 	.word	0x20000dc4
 8001788:	c0800000 	.word	0xc0800000
 800178c:	40c00000 	.word	0x40c00000
	}

	else if(e>=-4&&e<=-2)
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <Constant_Current+0x57c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	499e      	ldr	r1, [pc, #632]	; (8001a10 <Constant_Current+0x580>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fcc2 	bl	8001120 <__aeabi_fcmpge>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d048      	beq.n	8001834 <Constant_Current+0x3a4>
 80017a2:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <Constant_Current+0x57c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fcae 	bl	800110c <__aeabi_fcmple>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03e      	beq.n	8001834 <Constant_Current+0x3a4>
	{ eNM=(-(e+4)/2)+1;
 80017b6:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <Constant_Current+0x57c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f9f4 	bl	8000bac <__addsf3>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fba8 	bl	8000f24 <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9e6 	bl	8000bac <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <Constant_Current+0x584>)
 80017e6:	601a      	str	r2, [r3, #0]
	   eNS=(e+4)/2;
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <Constant_Current+0x57c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f9db 	bl	8000bac <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb91 	bl	8000f24 <__aeabi_fdiv>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b84      	ldr	r3, [pc, #528]	; (8001a18 <Constant_Current+0x588>)
 8001808:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <Constant_Current+0x58c>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <Constant_Current+0x58c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a82      	ldr	r2, [pc, #520]	; (8001a20 <Constant_Current+0x590>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <Constant_Current+0x590>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <Constant_Current+0x594>)
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <Constant_Current+0x594>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <Constant_Current+0x598>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <Constant_Current+0x598>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <Constant_Current+0x59c>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e174      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=-2&&e<=0)
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <Constant_Current+0x57c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc6f 	bl	8001120 <__aeabi_fcmpge>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d048      	beq.n	80018da <Constant_Current+0x44a>
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <Constant_Current+0x57c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc5b 	bl	800110c <__aeabi_fcmple>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03e      	beq.n	80018da <Constant_Current+0x44a>
	{ eNS=(-(e+2)/2)+1;
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <Constant_Current+0x57c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f9a1 	bl	8000bac <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001870:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb55 	bl	8000f24 <__aeabi_fdiv>
 800187a:	4603      	mov	r3, r0
 800187c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f993 	bl	8000bac <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <Constant_Current+0x588>)
 800188c:	601a      	str	r2, [r3, #0]
	   eZ=(e/2)+1;
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <Constant_Current+0x57c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb44 	bl	8000f24 <__aeabi_fdiv>
 800189c:	4603      	mov	r3, r0
 800189e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f982 	bl	8000bac <__addsf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <Constant_Current+0x598>)
 80018ae:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <Constant_Current+0x58c>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <Constant_Current+0x58c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <Constant_Current+0x590>)
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <Constant_Current+0x590>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <Constant_Current+0x594>)
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <Constant_Current+0x594>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <Constant_Current+0x584>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <Constant_Current+0x584>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <Constant_Current+0x59c>)
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e121      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=0&&e<=2)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <Constant_Current+0x57c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc1c 	bl	8001120 <__aeabi_fcmpge>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03a      	beq.n	8001964 <Constant_Current+0x4d4>
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <Constant_Current+0x57c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fc08 	bl	800110c <__aeabi_fcmple>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d030      	beq.n	8001964 <Constant_Current+0x4d4>
	{ eZ=-(e/2)+1;
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <Constant_Current+0x57c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb0a 	bl	8000f24 <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001918:	f7ff f946 	bl	8000ba8 <__aeabi_fsub>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <Constant_Current+0x598>)
 8001922:	601a      	str	r2, [r3, #0]
	   ePS=e/2;
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <Constant_Current+0x57c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faf9 	bl	8000f24 <__aeabi_fdiv>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <Constant_Current+0x594>)
 8001938:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <Constant_Current+0x58c>)
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <Constant_Current+0x58c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <Constant_Current+0x590>)
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <Constant_Current+0x590>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <Constant_Current+0x588>)
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <Constant_Current+0x588>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <Constant_Current+0x584>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <Constant_Current+0x584>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a33      	ldr	r2, [pc, #204]	; (8001a2c <Constant_Current+0x59c>)
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e0dc      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=2&&e<=4)
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <Constant_Current+0x57c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbd7 	bl	8001120 <__aeabi_fcmpge>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d05b      	beq.n	8001a30 <Constant_Current+0x5a0>
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <Constant_Current+0x57c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fbc3 	bl	800110c <__aeabi_fcmple>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d051      	beq.n	8001a30 <Constant_Current+0x5a0>
	{ ePS=(-(e-2)/2)+1;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <Constant_Current+0x57c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f907 	bl	8000ba8 <__aeabi_fsub>
 800199a:	4603      	mov	r3, r0
 800199c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fabd 	bl	8000f24 <__aeabi_fdiv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f8fb 	bl	8000bac <__addsf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <Constant_Current+0x594>)
 80019bc:	601a      	str	r2, [r3, #0]
	   ePM=(e-2)/2;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <Constant_Current+0x57c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f8ee 	bl	8000ba8 <__aeabi_fsub>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff faa6 	bl	8000f24 <__aeabi_fdiv>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <Constant_Current+0x590>)
 80019de:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <Constant_Current+0x58c>)
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <Constant_Current+0x58c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <Constant_Current+0x598>)
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <Constant_Current+0x598>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <Constant_Current+0x588>)
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <Constant_Current+0x588>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <Constant_Current+0x584>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <Constant_Current+0x584>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <Constant_Current+0x59c>)
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e089      	b.n	8001b1e <Constant_Current+0x68e>
 8001a0a:	bf00      	nop
 8001a0c:	20000d84 	.word	0x20000d84
 8001a10:	c0800000 	.word	0xc0800000
 8001a14:	20000dc4 	.word	0x20000dc4
 8001a18:	200006b4 	.word	0x200006b4
 8001a1c:	200009fc 	.word	0x200009fc
 8001a20:	20000ac0 	.word	0x20000ac0
 8001a24:	20000a38 	.word	0x20000a38
 8001a28:	20000dd8 	.word	0x20000dd8
 8001a2c:	20000d8c 	.word	0x20000d8c
	}

	else if(e>=4&&e<=6)
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <Constant_Current+0x778>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fb71 	bl	8001120 <__aeabi_fcmpge>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d047      	beq.n	8001ad4 <Constant_Current+0x644>
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <Constant_Current+0x778>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4970      	ldr	r1, [pc, #448]	; (8001c0c <Constant_Current+0x77c>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb5e 	bl	800110c <__aeabi_fcmple>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03e      	beq.n	8001ad4 <Constant_Current+0x644>
	{ ePM=(-(e-4)/2)+1;
 8001a56:	4b6c      	ldr	r3, [pc, #432]	; (8001c08 <Constant_Current+0x778>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f8a2 	bl	8000ba8 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa58 	bl	8000f24 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f896 	bl	8000bac <__addsf3>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <Constant_Current+0x780>)
 8001a86:	601a      	str	r2, [r3, #0]
	   ePB=(e-4)/2;
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <Constant_Current+0x778>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f889 	bl	8000ba8 <__aeabi_fsub>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa41 	bl	8000f24 <__aeabi_fdiv>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <Constant_Current+0x784>)
 8001aa8:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <Constant_Current+0x788>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <Constant_Current+0x788>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a59      	ldr	r2, [pc, #356]	; (8001c1c <Constant_Current+0x78c>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <Constant_Current+0x78c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <Constant_Current+0x790>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <Constant_Current+0x790>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <Constant_Current+0x794>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <Constant_Current+0x794>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <Constant_Current+0x798>)
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e024      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=6)
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <Constant_Current+0x778>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	494c      	ldr	r1, [pc, #304]	; (8001c0c <Constant_Current+0x77c>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb20 	bl	8001120 <__aeabi_fcmpge>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01b      	beq.n	8001b1e <Constant_Current+0x68e>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <Constant_Current+0x784>)
 8001ae8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <Constant_Current+0x780>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <Constant_Current+0x780>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <Constant_Current+0x788>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <Constant_Current+0x788>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <Constant_Current+0x78c>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <Constant_Current+0x78c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <Constant_Current+0x790>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <Constant_Current+0x790>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <Constant_Current+0x794>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <Constant_Current+0x794>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a43      	ldr	r2, [pc, #268]	; (8001c28 <Constant_Current+0x798>)
 8001b1c:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-6)
 8001b1e:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <Constant_Current+0x79c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4943      	ldr	r1, [pc, #268]	; (8001c30 <Constant_Current+0x7a0>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff faf1 	bl	800110c <__aeabi_fcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <Constant_Current+0x6d8>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <Constant_Current+0x7a4>)
 8001b32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <Constant_Current+0x7a8>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <Constant_Current+0x7a8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3d      	ldr	r2, [pc, #244]	; (8001c3c <Constant_Current+0x7ac>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <Constant_Current+0x7ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a3c      	ldr	r2, [pc, #240]	; (8001c40 <Constant_Current+0x7b0>)
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <Constant_Current+0x7b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <Constant_Current+0x7b4>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <Constant_Current+0x7b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <Constant_Current+0x7b8>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <Constant_Current+0x7b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <Constant_Current+0x7bc>)
 8001b66:	6013      	str	r3, [r2, #0]

	if(d>=-6&&d<=-4)
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <Constant_Current+0x79c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4930      	ldr	r1, [pc, #192]	; (8001c30 <Constant_Current+0x7a0>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fad6 	bl	8001120 <__aeabi_fcmpge>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d06c      	beq.n	8001c54 <Constant_Current+0x7c4>
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <Constant_Current+0x79c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <Constant_Current+0x7c0>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fac3 	bl	800110c <__aeabi_fcmple>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d063      	beq.n	8001c54 <Constant_Current+0x7c4>
	{ dNB=(-(d+6)/2)+1;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <Constant_Current+0x79c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	491e      	ldr	r1, [pc, #120]	; (8001c0c <Constant_Current+0x77c>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f80a 	bl	8000bac <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f9be 	bl	8000f24 <__aeabi_fdiv>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fffc 	bl	8000bac <__addsf3>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <Constant_Current+0x7a4>)
 8001bba:	601a      	str	r2, [r3, #0]
	   dNM=(d+6)/2;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <Constant_Current+0x79c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4912      	ldr	r1, [pc, #72]	; (8001c0c <Constant_Current+0x77c>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fff2 	bl	8000bac <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9a8 	bl	8000f24 <__aeabi_fdiv>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <Constant_Current+0x7bc>)
 8001bda:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <Constant_Current+0x7a8>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <Constant_Current+0x7a8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <Constant_Current+0x7ac>)
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <Constant_Current+0x7ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <Constant_Current+0x7b0>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <Constant_Current+0x7b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <Constant_Current+0x7b4>)
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <Constant_Current+0x7b4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <Constant_Current+0x7b8>)
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e1ff      	b.n	8002006 <Constant_Current+0xb76>
 8001c06:	bf00      	nop
 8001c08:	20000d84 	.word	0x20000d84
 8001c0c:	40c00000 	.word	0x40c00000
 8001c10:	20000ac0 	.word	0x20000ac0
 8001c14:	200009fc 	.word	0x200009fc
 8001c18:	20000a38 	.word	0x20000a38
 8001c1c:	20000dd8 	.word	0x20000dd8
 8001c20:	200006b4 	.word	0x200006b4
 8001c24:	20000dc4 	.word	0x20000dc4
 8001c28:	20000d8c 	.word	0x20000d8c
 8001c2c:	20000ab8 	.word	0x20000ab8
 8001c30:	c0c00000 	.word	0xc0c00000
 8001c34:	200006dc 	.word	0x200006dc
 8001c38:	20000ac8 	.word	0x20000ac8
 8001c3c:	200006f0 	.word	0x200006f0
 8001c40:	20000da0 	.word	0x20000da0
 8001c44:	20000db8 	.word	0x20000db8
 8001c48:	20000830 	.word	0x20000830
 8001c4c:	20000a34 	.word	0x20000a34
 8001c50:	c0800000 	.word	0xc0800000
	}

	else if(d>=-4&&d<=-2)
 8001c54:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <Constant_Current+0xa40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	499e      	ldr	r1, [pc, #632]	; (8001ed4 <Constant_Current+0xa44>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fa60 	bl	8001120 <__aeabi_fcmpge>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d048      	beq.n	8001cf8 <Constant_Current+0x868>
 8001c66:	4b9a      	ldr	r3, [pc, #616]	; (8001ed0 <Constant_Current+0xa40>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa4c 	bl	800110c <__aeabi_fcmple>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03e      	beq.n	8001cf8 <Constant_Current+0x868>
	{ dNM=(-(d+4)/2)+1;
 8001c7a:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <Constant_Current+0xa40>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff92 	bl	8000bac <__addsf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f946 	bl	8000f24 <__aeabi_fdiv>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff84 	bl	8000bac <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <Constant_Current+0xa48>)
 8001caa:	601a      	str	r2, [r3, #0]
	   dNS=(d+4)/2;
 8001cac:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <Constant_Current+0xa40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe ff79 	bl	8000bac <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f92f 	bl	8000f24 <__aeabi_fdiv>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b84      	ldr	r3, [pc, #528]	; (8001edc <Constant_Current+0xa4c>)
 8001ccc:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8001cce:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <Constant_Current+0xa50>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <Constant_Current+0xa50>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a82      	ldr	r2, [pc, #520]	; (8001ee4 <Constant_Current+0xa54>)
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <Constant_Current+0xa54>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	; (8001ee8 <Constant_Current+0xa58>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <Constant_Current+0xa58>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a80      	ldr	r2, [pc, #512]	; (8001eec <Constant_Current+0xa5c>)
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <Constant_Current+0xa5c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <Constant_Current+0xa60>)
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e186      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=-2&&d<=0)
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <Constant_Current+0xa40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa0d 	bl	8001120 <__aeabi_fcmpge>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d048      	beq.n	8001d9e <Constant_Current+0x90e>
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <Constant_Current+0xa40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f9f9 	bl	800110c <__aeabi_fcmple>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03e      	beq.n	8001d9e <Constant_Current+0x90e>
	{ dNS=(-(d+2)/2)+1;
 8001d20:	4b6b      	ldr	r3, [pc, #428]	; (8001ed0 <Constant_Current+0xa40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff3f 	bl	8000bac <__addsf3>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f8f3 	bl	8000f24 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ff31 	bl	8000bac <__addsf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <Constant_Current+0xa4c>)
 8001d50:	601a      	str	r2, [r3, #0]
	   dZ=(d+2)/2;
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <Constant_Current+0xa40>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ff26 	bl	8000bac <__addsf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f8dc 	bl	8000f24 <__aeabi_fdiv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <Constant_Current+0xa5c>)
 8001d72:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8001d74:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <Constant_Current+0xa50>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <Constant_Current+0xa50>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <Constant_Current+0xa54>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <Constant_Current+0xa54>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <Constant_Current+0xa58>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <Constant_Current+0xa58>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <Constant_Current+0xa48>)
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <Constant_Current+0xa48>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <Constant_Current+0xa60>)
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e133      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=0&&d<=2)
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <Constant_Current+0xa40>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f9ba 	bl	8001120 <__aeabi_fcmpge>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <Constant_Current+0x998>
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <Constant_Current+0xa40>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9a6 	bl	800110c <__aeabi_fcmple>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <Constant_Current+0x998>
	{ dZ=-(d/2)+1;
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <Constant_Current+0xa40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8a8 	bl	8000f24 <__aeabi_fdiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ddc:	f7fe fee4 	bl	8000ba8 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <Constant_Current+0xa5c>)
 8001de6:	601a      	str	r2, [r3, #0]
	   dPS=d/2;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <Constant_Current+0xa40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f897 	bl	8000f24 <__aeabi_fdiv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <Constant_Current+0xa58>)
 8001dfc:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <Constant_Current+0xa50>)
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <Constant_Current+0xa50>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a36      	ldr	r2, [pc, #216]	; (8001ee4 <Constant_Current+0xa54>)
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <Constant_Current+0xa54>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <Constant_Current+0xa4c>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <Constant_Current+0xa4c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <Constant_Current+0xa48>)
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <Constant_Current+0xa48>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <Constant_Current+0xa60>)
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e0ee      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=2&&d<=4)
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <Constant_Current+0xa40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f975 	bl	8001120 <__aeabi_fcmpge>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05b      	beq.n	8001ef4 <Constant_Current+0xa64>
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <Constant_Current+0xa40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f961 	bl	800110c <__aeabi_fcmple>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d051      	beq.n	8001ef4 <Constant_Current+0xa64>
	{ dPS=(-(d-2)/2)+1;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <Constant_Current+0xa40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fea5 	bl	8000ba8 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f85b 	bl	8000f24 <__aeabi_fdiv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe99 	bl	8000bac <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <Constant_Current+0xa58>)
 8001e80:	601a      	str	r2, [r3, #0]
	   dPM=(d-2)/2;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <Constant_Current+0xa40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe8c 	bl	8000ba8 <__aeabi_fsub>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f844 	bl	8000f24 <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <Constant_Current+0xa54>)
 8001ea2:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <Constant_Current+0xa50>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <Constant_Current+0xa50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <Constant_Current+0xa5c>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <Constant_Current+0xa5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <Constant_Current+0xa4c>)
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <Constant_Current+0xa4c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <Constant_Current+0xa48>)
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <Constant_Current+0xa48>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <Constant_Current+0xa60>)
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e09b      	b.n	8002006 <Constant_Current+0xb76>
 8001ece:	bf00      	nop
 8001ed0:	20000ab8 	.word	0x20000ab8
 8001ed4:	c0800000 	.word	0xc0800000
 8001ed8:	20000a34 	.word	0x20000a34
 8001edc:	20000830 	.word	0x20000830
 8001ee0:	20000ac8 	.word	0x20000ac8
 8001ee4:	200006f0 	.word	0x200006f0
 8001ee8:	20000da0 	.word	0x20000da0
 8001eec:	20000db8 	.word	0x20000db8
 8001ef0:	200006dc 	.word	0x200006dc
	}

	else if(d>=4&&d<=6)
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <Constant_Current+0xb08>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f90f 	bl	8001120 <__aeabi_fcmpge>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d059      	beq.n	8001fbc <Constant_Current+0xb2c>
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <Constant_Current+0xb08>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4923      	ldr	r1, [pc, #140]	; (8001f9c <Constant_Current+0xb0c>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8fc 	bl	800110c <__aeabi_fcmple>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d050      	beq.n	8001fbc <Constant_Current+0xb2c>
	{ dPM=(-(d-4)/2)+1;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <Constant_Current+0xb08>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fe40 	bl	8000ba8 <__aeabi_fsub>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fff6 	bl	8000f24 <__aeabi_fdiv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fe34 	bl	8000bac <__addsf3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <Constant_Current+0xb10>)
 8001f4a:	601a      	str	r2, [r3, #0]
	   dPB=(d-4)/2;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <Constant_Current+0xb08>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fe27 	bl	8000ba8 <__aeabi_fsub>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffdf 	bl	8000f24 <__aeabi_fdiv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <Constant_Current+0xb14>)
 8001f6c:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <Constant_Current+0xb18>)
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <Constant_Current+0xb18>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <Constant_Current+0xb1c>)
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <Constant_Current+0xb1c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <Constant_Current+0xb20>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <Constant_Current+0xb20>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <Constant_Current+0xb24>)
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <Constant_Current+0xb24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <Constant_Current+0xb28>)
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e036      	b.n	8002006 <Constant_Current+0xb76>
 8001f98:	20000ab8 	.word	0x20000ab8
 8001f9c:	40c00000 	.word	0x40c00000
 8001fa0:	200006f0 	.word	0x200006f0
 8001fa4:	20000ac8 	.word	0x20000ac8
 8001fa8:	20000da0 	.word	0x20000da0
 8001fac:	20000db8 	.word	0x20000db8
 8001fb0:	20000830 	.word	0x20000830
 8001fb4:	20000a34 	.word	0x20000a34
 8001fb8:	200006dc 	.word	0x200006dc
	}

	else if(d>=6)
 8001fbc:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <Constant_Current+0xd64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	498d      	ldr	r1, [pc, #564]	; (80021f8 <Constant_Current+0xd68>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f8ac 	bl	8001120 <__aeabi_fcmpge>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01b      	beq.n	8002006 <Constant_Current+0xb76>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <Constant_Current+0xd6c>)
 8001fd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <Constant_Current+0xd70>)
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <Constant_Current+0xd70>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a88      	ldr	r2, [pc, #544]	; (8002204 <Constant_Current+0xd74>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b87      	ldr	r3, [pc, #540]	; (8002204 <Constant_Current+0xd74>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <Constant_Current+0xd78>)
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b86      	ldr	r3, [pc, #536]	; (8002208 <Constant_Current+0xd78>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a86      	ldr	r2, [pc, #536]	; (800220c <Constant_Current+0xd7c>)
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <Constant_Current+0xd7c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a85      	ldr	r2, [pc, #532]	; (8002210 <Constant_Current+0xd80>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b84      	ldr	r3, [pc, #528]	; (8002210 <Constant_Current+0xd80>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a84      	ldr	r2, [pc, #528]	; (8002214 <Constant_Current+0xd84>)
 8002004:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <Constant_Current+0xd6c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a83      	ldr	r2, [pc, #524]	; (8002218 <Constant_Current+0xd88>)
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <Constant_Current+0xd8c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <Constant_Current+0xd6c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff f86d 	bl	80010f8 <__aeabi_fcmplt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <Constant_Current+0xb9c>
 8002024:	4b7d      	ldr	r3, [pc, #500]	; (800221c <Constant_Current+0xd8c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a7b      	ldr	r2, [pc, #492]	; (8002218 <Constant_Current+0xd88>)
 800202a:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 800202c:	4b73      	ldr	r3, [pc, #460]	; (80021fc <Constant_Current+0xd6c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7b      	ldr	r2, [pc, #492]	; (8002220 <Constant_Current+0xd90>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <Constant_Current+0xd94>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b70      	ldr	r3, [pc, #448]	; (80021fc <Constant_Current+0xd6c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f7ff f85a 	bl	80010f8 <__aeabi_fcmplt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <Constant_Current+0xbc2>
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <Constant_Current+0xd94>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a74      	ldr	r2, [pc, #464]	; (8002220 <Constant_Current+0xd90>)
 8002050:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8002052:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <Constant_Current+0xd6c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a74      	ldr	r2, [pc, #464]	; (8002228 <Constant_Current+0xd98>)
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <Constant_Current+0xd9c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <Constant_Current+0xd6c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7ff f847 	bl	80010f8 <__aeabi_fcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <Constant_Current+0xbe8>
 8002070:	4b6e      	ldr	r3, [pc, #440]	; (800222c <Constant_Current+0xd9c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <Constant_Current+0xd98>)
 8002076:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8002078:	4b60      	ldr	r3, [pc, #384]	; (80021fc <Constant_Current+0xd6c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a6c      	ldr	r2, [pc, #432]	; (8002230 <Constant_Current+0xda0>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <Constant_Current+0xda4>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <Constant_Current+0xd6c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7ff f834 	bl	80010f8 <__aeabi_fcmplt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <Constant_Current+0xc0e>
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <Constant_Current+0xda4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a65      	ldr	r2, [pc, #404]	; (8002230 <Constant_Current+0xda0>)
 800209c:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <Constant_Current+0xd6c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a65      	ldr	r2, [pc, #404]	; (8002238 <Constant_Current+0xda8>)
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <Constant_Current+0xdac>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <Constant_Current+0xd6c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7ff f821 	bl	80010f8 <__aeabi_fcmplt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <Constant_Current+0xc34>
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <Constant_Current+0xdac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5d      	ldr	r2, [pc, #372]	; (8002238 <Constant_Current+0xda8>)
 80020c2:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <Constant_Current+0xd6c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <Constant_Current+0xdb0>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <Constant_Current+0xdb4>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <Constant_Current+0xd6c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7ff f80e 	bl	80010f8 <__aeabi_fcmplt>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <Constant_Current+0xc5a>
 80020e2:	4b58      	ldr	r3, [pc, #352]	; (8002244 <Constant_Current+0xdb4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a56      	ldr	r2, [pc, #344]	; (8002240 <Constant_Current+0xdb0>)
 80020e8:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <Constant_Current+0xd6c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a56      	ldr	r2, [pc, #344]	; (8002248 <Constant_Current+0xdb8>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <Constant_Current+0xdbc>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <Constant_Current+0xd6c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe fffb 	bl	80010f8 <__aeabi_fcmplt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <Constant_Current+0xc80>
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <Constant_Current+0xdbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <Constant_Current+0xdb8>)
 800210e:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <Constant_Current+0xd70>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <Constant_Current+0xdc0>)
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b40      	ldr	r3, [pc, #256]	; (800221c <Constant_Current+0xd8c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <Constant_Current+0xd70>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f7fe ffe8 	bl	80010f8 <__aeabi_fcmplt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <Constant_Current+0xca6>
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <Constant_Current+0xd8c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a47      	ldr	r2, [pc, #284]	; (8002250 <Constant_Current+0xdc0>)
 8002134:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <Constant_Current+0xd70>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a46      	ldr	r2, [pc, #280]	; (8002254 <Constant_Current+0xdc4>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <Constant_Current+0xd94>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <Constant_Current+0xd70>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7fe ffd5 	bl	80010f8 <__aeabi_fcmplt>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <Constant_Current+0xccc>
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <Constant_Current+0xd94>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <Constant_Current+0xdc4>)
 800215a:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <Constant_Current+0xd70>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3d      	ldr	r2, [pc, #244]	; (8002258 <Constant_Current+0xdc8>)
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <Constant_Current+0xd9c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <Constant_Current+0xd70>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f7fe ffc2 	bl	80010f8 <__aeabi_fcmplt>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <Constant_Current+0xcf2>
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <Constant_Current+0xd9c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <Constant_Current+0xdc8>)
 8002180:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <Constant_Current+0xd70>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a35      	ldr	r2, [pc, #212]	; (800225c <Constant_Current+0xdcc>)
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <Constant_Current+0xda4>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <Constant_Current+0xd70>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f7fe ffaf 	bl	80010f8 <__aeabi_fcmplt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <Constant_Current+0xd18>
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <Constant_Current+0xda4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <Constant_Current+0xdcc>)
 80021a6:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <Constant_Current+0xd70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <Constant_Current+0xdd0>)
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <Constant_Current+0xdac>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <Constant_Current+0xd70>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe ff9c 	bl	80010f8 <__aeabi_fcmplt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <Constant_Current+0xd3e>
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <Constant_Current+0xdac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a25      	ldr	r2, [pc, #148]	; (8002260 <Constant_Current+0xdd0>)
 80021cc:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <Constant_Current+0xd70>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a24      	ldr	r2, [pc, #144]	; (8002264 <Constant_Current+0xdd4>)
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <Constant_Current+0xdb4>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <Constant_Current+0xd70>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe ff89 	bl	80010f8 <__aeabi_fcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03f      	beq.n	800226c <Constant_Current+0xddc>
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <Constant_Current+0xdb4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e03a      	b.n	8002268 <Constant_Current+0xdd8>
 80021f2:	bf00      	nop
 80021f4:	20000ab8 	.word	0x20000ab8
 80021f8:	40c00000 	.word	0x40c00000
 80021fc:	20000ac8 	.word	0x20000ac8
 8002200:	200006f0 	.word	0x200006f0
 8002204:	20000da0 	.word	0x20000da0
 8002208:	20000db8 	.word	0x20000db8
 800220c:	20000830 	.word	0x20000830
 8002210:	20000a34 	.word	0x20000a34
 8002214:	200006dc 	.word	0x200006dc
 8002218:	20000ddc 	.word	0x20000ddc
 800221c:	20000d8c 	.word	0x20000d8c
 8002220:	20000bbc 	.word	0x20000bbc
 8002224:	20000dc4 	.word	0x20000dc4
 8002228:	200006d0 	.word	0x200006d0
 800222c:	200006b4 	.word	0x200006b4
 8002230:	2000080c 	.word	0x2000080c
 8002234:	20000dd8 	.word	0x20000dd8
 8002238:	20000dcc 	.word	0x20000dcc
 800223c:	20000a38 	.word	0x20000a38
 8002240:	200007f8 	.word	0x200007f8
 8002244:	20000ac0 	.word	0x20000ac0
 8002248:	20000aa8 	.word	0x20000aa8
 800224c:	200009fc 	.word	0x200009fc
 8002250:	20000a0c 	.word	0x20000a0c
 8002254:	20000700 	.word	0x20000700
 8002258:	200009f0 	.word	0x200009f0
 800225c:	20000bb8 	.word	0x20000bb8
 8002260:	20000dac 	.word	0x20000dac
 8002264:	20000de0 	.word	0x20000de0
 8002268:	4a8d      	ldr	r2, [pc, #564]	; (80024a0 <Constant_Current+0x1010>)
 800226a:	6013      	str	r3, [r2, #0]
	r14=dPM; if(ePB<dPM) r14=ePB;	//r14=max(dPM,ePB);
 800226c:	4b8d      	ldr	r3, [pc, #564]	; (80024a4 <Constant_Current+0x1014>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a8d      	ldr	r2, [pc, #564]	; (80024a8 <Constant_Current+0x1018>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <Constant_Current+0x101c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b8a      	ldr	r3, [pc, #552]	; (80024a4 <Constant_Current+0x1014>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7fe ff3a 	bl	80010f8 <__aeabi_fcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <Constant_Current+0xe02>
 800228a:	4b88      	ldr	r3, [pc, #544]	; (80024ac <Constant_Current+0x101c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <Constant_Current+0x1018>)
 8002290:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 8002292:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <Constant_Current+0x1020>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <Constant_Current+0x1024>)
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <Constant_Current+0x1028>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <Constant_Current+0x1020>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7fe ff27 	bl	80010f8 <__aeabi_fcmplt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <Constant_Current+0xe28>
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <Constant_Current+0x1028>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <Constant_Current+0x1024>)
 80022b6:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 80022b8:	4b7d      	ldr	r3, [pc, #500]	; (80024b0 <Constant_Current+0x1020>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <Constant_Current+0x102c>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <Constant_Current+0x1030>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b7a      	ldr	r3, [pc, #488]	; (80024b0 <Constant_Current+0x1020>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f7fe ff14 	bl	80010f8 <__aeabi_fcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <Constant_Current+0xe4e>
 80022d6:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <Constant_Current+0x1030>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a78      	ldr	r2, [pc, #480]	; (80024bc <Constant_Current+0x102c>)
 80022dc:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <Constant_Current+0x1020>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a78      	ldr	r2, [pc, #480]	; (80024c4 <Constant_Current+0x1034>)
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <Constant_Current+0x1038>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <Constant_Current+0x1020>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4610      	mov	r0, r2
 80022f2:	f7fe ff01 	bl	80010f8 <__aeabi_fcmplt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <Constant_Current+0xe74>
 80022fc:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <Constant_Current+0x1038>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a70      	ldr	r2, [pc, #448]	; (80024c4 <Constant_Current+0x1034>)
 8002302:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <Constant_Current+0x1020>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a70      	ldr	r2, [pc, #448]	; (80024cc <Constant_Current+0x103c>)
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <Constant_Current+0x1040>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <Constant_Current+0x1020>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7fe feee 	bl	80010f8 <__aeabi_fcmplt>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <Constant_Current+0xe9a>
 8002322:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <Constant_Current+0x1040>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <Constant_Current+0x103c>)
 8002328:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 800232a:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <Constant_Current+0x1020>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <Constant_Current+0x1044>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b69      	ldr	r3, [pc, #420]	; (80024d8 <Constant_Current+0x1048>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <Constant_Current+0x1020>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7fe fedb 	bl	80010f8 <__aeabi_fcmplt>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <Constant_Current+0xec0>
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <Constant_Current+0x1048>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a61      	ldr	r2, [pc, #388]	; (80024d4 <Constant_Current+0x1044>)
 800234e:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 8002350:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <Constant_Current+0x1020>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a61      	ldr	r2, [pc, #388]	; (80024dc <Constant_Current+0x104c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <Constant_Current+0x1050>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <Constant_Current+0x1020>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7fe fec8 	bl	80010f8 <__aeabi_fcmplt>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <Constant_Current+0xee6>
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <Constant_Current+0x1050>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <Constant_Current+0x104c>)
 8002374:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <Constant_Current+0x1020>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <Constant_Current+0x1054>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <Constant_Current+0x101c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <Constant_Current+0x1020>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7fe feb5 	bl	80010f8 <__aeabi_fcmplt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <Constant_Current+0xf0c>
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <Constant_Current+0x101c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <Constant_Current+0x1054>)
 800239a:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 800239c:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <Constant_Current+0x1058>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <Constant_Current+0x105c>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <Constant_Current+0x1028>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <Constant_Current+0x1058>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f7fe fea2 	bl	80010f8 <__aeabi_fcmplt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <Constant_Current+0xf32>
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <Constant_Current+0x1028>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <Constant_Current+0x105c>)
 80023c0:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <Constant_Current+0x1058>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <Constant_Current+0x1060>)
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <Constant_Current+0x1030>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <Constant_Current+0x1058>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7fe fe8f 	bl	80010f8 <__aeabi_fcmplt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <Constant_Current+0xf58>
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <Constant_Current+0x1030>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a42      	ldr	r2, [pc, #264]	; (80024f0 <Constant_Current+0x1060>)
 80023e6:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <Constant_Current+0x1058>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <Constant_Current+0x1064>)
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <Constant_Current+0x1038>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <Constant_Current+0x1058>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe fe7c 	bl	80010f8 <__aeabi_fcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <Constant_Current+0xf7e>
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <Constant_Current+0x1038>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <Constant_Current+0x1064>)
 800240c:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <Constant_Current+0x1058>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <Constant_Current+0x1068>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <Constant_Current+0x1040>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <Constant_Current+0x1058>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fe fe69 	bl	80010f8 <__aeabi_fcmplt>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <Constant_Current+0xfa4>
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <Constant_Current+0x1040>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <Constant_Current+0x1068>)
 8002432:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <Constant_Current+0x1058>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a30      	ldr	r2, [pc, #192]	; (80024fc <Constant_Current+0x106c>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <Constant_Current+0x1048>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <Constant_Current+0x1058>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f7fe fe56 	bl	80010f8 <__aeabi_fcmplt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <Constant_Current+0xfca>
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <Constant_Current+0x1048>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <Constant_Current+0x106c>)
 8002458:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <Constant_Current+0x1058>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <Constant_Current+0x1070>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <Constant_Current+0x1050>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <Constant_Current+0x1058>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7fe fe43 	bl	80010f8 <__aeabi_fcmplt>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <Constant_Current+0xff0>
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <Constant_Current+0x1050>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <Constant_Current+0x1070>)
 800247e:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <Constant_Current+0x1058>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <Constant_Current+0x1074>)
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <Constant_Current+0x101c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <Constant_Current+0x1058>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f7fe fe30 	bl	80010f8 <__aeabi_fcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d038      	beq.n	8002510 <Constant_Current+0x1080>
 800249e:	e033      	b.n	8002508 <Constant_Current+0x1078>
 80024a0:	20000de0 	.word	0x20000de0
 80024a4:	200006f0 	.word	0x200006f0
 80024a8:	20000678 	.word	0x20000678
 80024ac:	200009fc 	.word	0x200009fc
 80024b0:	20000da0 	.word	0x20000da0
 80024b4:	20000db0 	.word	0x20000db0
 80024b8:	20000d8c 	.word	0x20000d8c
 80024bc:	20000abc 	.word	0x20000abc
 80024c0:	20000dc4 	.word	0x20000dc4
 80024c4:	200007e8 	.word	0x200007e8
 80024c8:	200006b4 	.word	0x200006b4
 80024cc:	20000a3c 	.word	0x20000a3c
 80024d0:	20000dd8 	.word	0x20000dd8
 80024d4:	20000da8 	.word	0x20000da8
 80024d8:	20000a38 	.word	0x20000a38
 80024dc:	20000a04 	.word	0x20000a04
 80024e0:	20000ac0 	.word	0x20000ac0
 80024e4:	20000800 	.word	0x20000800
 80024e8:	20000db8 	.word	0x20000db8
 80024ec:	20000ca8 	.word	0x20000ca8
 80024f0:	20000dc0 	.word	0x20000dc0
 80024f4:	20000dd4 	.word	0x20000dd4
 80024f8:	200006b0 	.word	0x200006b0
 80024fc:	200007d8 	.word	0x200007d8
 8002500:	20000a20 	.word	0x20000a20
 8002504:	20000684 	.word	0x20000684
 8002508:	4b8d      	ldr	r3, [pc, #564]	; (8002740 <Constant_Current+0x12b0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a8d      	ldr	r2, [pc, #564]	; (8002744 <Constant_Current+0x12b4>)
 800250e:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 8002510:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <Constant_Current+0x12b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a8d      	ldr	r2, [pc, #564]	; (800274c <Constant_Current+0x12bc>)
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <Constant_Current+0x12c0>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <Constant_Current+0x12b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f7fe fde8 	bl	80010f8 <__aeabi_fcmplt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <Constant_Current+0x10a6>
 800252e:	4b88      	ldr	r3, [pc, #544]	; (8002750 <Constant_Current+0x12c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a86      	ldr	r2, [pc, #536]	; (800274c <Constant_Current+0x12bc>)
 8002534:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 8002536:	4b84      	ldr	r3, [pc, #528]	; (8002748 <Constant_Current+0x12b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a86      	ldr	r2, [pc, #536]	; (8002754 <Constant_Current+0x12c4>)
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b86      	ldr	r3, [pc, #536]	; (8002758 <Constant_Current+0x12c8>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b81      	ldr	r3, [pc, #516]	; (8002748 <Constant_Current+0x12b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7fe fdd5 	bl	80010f8 <__aeabi_fcmplt>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <Constant_Current+0x10cc>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <Constant_Current+0x12c8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <Constant_Current+0x12c4>)
 800255a:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 800255c:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <Constant_Current+0x12b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7e      	ldr	r2, [pc, #504]	; (800275c <Constant_Current+0x12cc>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <Constant_Current+0x12d0>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b77      	ldr	r3, [pc, #476]	; (8002748 <Constant_Current+0x12b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f7fe fdc2 	bl	80010f8 <__aeabi_fcmplt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <Constant_Current+0x10f2>
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <Constant_Current+0x12d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	; (800275c <Constant_Current+0x12cc>)
 8002580:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 8002582:	4b71      	ldr	r3, [pc, #452]	; (8002748 <Constant_Current+0x12b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <Constant_Current+0x12d4>)
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b77      	ldr	r3, [pc, #476]	; (8002768 <Constant_Current+0x12d8>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <Constant_Current+0x12b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f7fe fdaf 	bl	80010f8 <__aeabi_fcmplt>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <Constant_Current+0x1118>
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <Constant_Current+0x12d8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6f      	ldr	r2, [pc, #444]	; (8002764 <Constant_Current+0x12d4>)
 80025a6:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 80025a8:	4b67      	ldr	r3, [pc, #412]	; (8002748 <Constant_Current+0x12b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6f      	ldr	r2, [pc, #444]	; (800276c <Constant_Current+0x12dc>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <Constant_Current+0x12e0>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b64      	ldr	r3, [pc, #400]	; (8002748 <Constant_Current+0x12b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7fe fd9c 	bl	80010f8 <__aeabi_fcmplt>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <Constant_Current+0x113e>
 80025c6:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <Constant_Current+0x12e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a68      	ldr	r2, [pc, #416]	; (800276c <Constant_Current+0x12dc>)
 80025cc:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 80025ce:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <Constant_Current+0x12b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a68      	ldr	r2, [pc, #416]	; (8002774 <Constant_Current+0x12e4>)
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <Constant_Current+0x12e8>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <Constant_Current+0x12b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7fe fd89 	bl	80010f8 <__aeabi_fcmplt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <Constant_Current+0x1164>
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <Constant_Current+0x12e8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a60      	ldr	r2, [pc, #384]	; (8002774 <Constant_Current+0x12e4>)
 80025f2:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 80025f4:	4b54      	ldr	r3, [pc, #336]	; (8002748 <Constant_Current+0x12b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a60      	ldr	r2, [pc, #384]	; (800277c <Constant_Current+0x12ec>)
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <Constant_Current+0x12b0>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b51      	ldr	r3, [pc, #324]	; (8002748 <Constant_Current+0x12b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7fe fd76 	bl	80010f8 <__aeabi_fcmplt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <Constant_Current+0x118a>
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <Constant_Current+0x12b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a59      	ldr	r2, [pc, #356]	; (800277c <Constant_Current+0x12ec>)
 8002618:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 800261a:	4b59      	ldr	r3, [pc, #356]	; (8002780 <Constant_Current+0x12f0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a59      	ldr	r2, [pc, #356]	; (8002784 <Constant_Current+0x12f4>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <Constant_Current+0x12c0>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <Constant_Current+0x12f0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7fe fd63 	bl	80010f8 <__aeabi_fcmplt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <Constant_Current+0x11b0>
 8002638:	4b45      	ldr	r3, [pc, #276]	; (8002750 <Constant_Current+0x12c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a51      	ldr	r2, [pc, #324]	; (8002784 <Constant_Current+0x12f4>)
 800263e:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <Constant_Current+0x12f0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <Constant_Current+0x12f8>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <Constant_Current+0x12c8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <Constant_Current+0x12f0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7fe fd50 	bl	80010f8 <__aeabi_fcmplt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <Constant_Current+0x11d6>
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <Constant_Current+0x12c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a49      	ldr	r2, [pc, #292]	; (8002788 <Constant_Current+0x12f8>)
 8002664:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <Constant_Current+0x12f0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a48      	ldr	r2, [pc, #288]	; (800278c <Constant_Current+0x12fc>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <Constant_Current+0x12d0>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b43      	ldr	r3, [pc, #268]	; (8002780 <Constant_Current+0x12f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f7fe fd3d 	bl	80010f8 <__aeabi_fcmplt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <Constant_Current+0x11fc>
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <Constant_Current+0x12d0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <Constant_Current+0x12fc>)
 800268a:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <Constant_Current+0x12f0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <Constant_Current+0x1300>)
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <Constant_Current+0x12d8>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <Constant_Current+0x12f0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7fe fd2a 	bl	80010f8 <__aeabi_fcmplt>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <Constant_Current+0x1222>
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <Constant_Current+0x12d8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a38      	ldr	r2, [pc, #224]	; (8002790 <Constant_Current+0x1300>)
 80026b0:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <Constant_Current+0x12f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <Constant_Current+0x1304>)
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <Constant_Current+0x12e0>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <Constant_Current+0x12f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe fd17 	bl	80010f8 <__aeabi_fcmplt>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <Constant_Current+0x1248>
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <Constant_Current+0x12e0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <Constant_Current+0x1304>)
 80026d6:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <Constant_Current+0x12f0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <Constant_Current+0x1308>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <Constant_Current+0x12e8>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <Constant_Current+0x12f0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7fe fd04 	bl	80010f8 <__aeabi_fcmplt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <Constant_Current+0x126e>
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <Constant_Current+0x12e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <Constant_Current+0x1308>)
 80026fc:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <Constant_Current+0x12f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <Constant_Current+0x130c>)
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <Constant_Current+0x12b0>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <Constant_Current+0x12f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f7fe fcf1 	bl	80010f8 <__aeabi_fcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <Constant_Current+0x1294>
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <Constant_Current+0x12b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <Constant_Current+0x130c>)
 8002722:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <Constant_Current+0x1310>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <Constant_Current+0x1314>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <Constant_Current+0x12c0>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <Constant_Current+0x1310>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f7fe fcde 	bl	80010f8 <__aeabi_fcmplt>
 800273c:	e034      	b.n	80027a8 <Constant_Current+0x1318>
 800273e:	bf00      	nop
 8002740:	200009fc 	.word	0x200009fc
 8002744:	20000684 	.word	0x20000684
 8002748:	20000830 	.word	0x20000830
 800274c:	200006a8 	.word	0x200006a8
 8002750:	20000d8c 	.word	0x20000d8c
 8002754:	20000ba4 	.word	0x20000ba4
 8002758:	20000dc4 	.word	0x20000dc4
 800275c:	200007f0 	.word	0x200007f0
 8002760:	200006b4 	.word	0x200006b4
 8002764:	20000834 	.word	0x20000834
 8002768:	20000dd8 	.word	0x20000dd8
 800276c:	20000a2c 	.word	0x20000a2c
 8002770:	20000a38 	.word	0x20000a38
 8002774:	20000ba0 	.word	0x20000ba0
 8002778:	20000ac0 	.word	0x20000ac0
 800277c:	20000ca4 	.word	0x20000ca4
 8002780:	20000a34 	.word	0x20000a34
 8002784:	200006d4 	.word	0x200006d4
 8002788:	20000914 	.word	0x20000914
 800278c:	20000a00 	.word	0x20000a00
 8002790:	20000d9c 	.word	0x20000d9c
 8002794:	20000aa0 	.word	0x20000aa0
 8002798:	200006c0 	.word	0x200006c0
 800279c:	200006c8 	.word	0x200006c8
 80027a0:	200006dc 	.word	0x200006dc
 80027a4:	20000da4 	.word	0x20000da4
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <Constant_Current+0x1326>
 80027ae:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <Constant_Current+0x155c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <Constant_Current+0x1560>)
 80027b4:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 80027b6:	4b8f      	ldr	r3, [pc, #572]	; (80029f4 <Constant_Current+0x1564>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a8f      	ldr	r2, [pc, #572]	; (80029f8 <Constant_Current+0x1568>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <Constant_Current+0x156c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <Constant_Current+0x1564>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fc95 	bl	80010f8 <__aeabi_fcmplt>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <Constant_Current+0x134c>
 80027d4:	4b89      	ldr	r3, [pc, #548]	; (80029fc <Constant_Current+0x156c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <Constant_Current+0x1568>)
 80027da:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 80027dc:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <Constant_Current+0x1564>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <Constant_Current+0x1570>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <Constant_Current+0x1574>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <Constant_Current+0x1564>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7fe fc82 	bl	80010f8 <__aeabi_fcmplt>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <Constant_Current+0x1372>
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <Constant_Current+0x1574>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <Constant_Current+0x1570>)
 8002800:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <Constant_Current+0x1564>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <Constant_Current+0x1578>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <Constant_Current+0x157c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <Constant_Current+0x1564>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7fe fc6f 	bl	80010f8 <__aeabi_fcmplt>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <Constant_Current+0x1398>
 8002820:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <Constant_Current+0x157c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <Constant_Current+0x1578>)
 8002826:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 8002828:	4b72      	ldr	r3, [pc, #456]	; (80029f4 <Constant_Current+0x1564>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a78      	ldr	r2, [pc, #480]	; (8002a10 <Constant_Current+0x1580>)
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <Constant_Current+0x1584>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <Constant_Current+0x1564>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f7fe fc5c 	bl	80010f8 <__aeabi_fcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <Constant_Current+0x13be>
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <Constant_Current+0x1584>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a71      	ldr	r2, [pc, #452]	; (8002a10 <Constant_Current+0x1580>)
 800284c:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 800284e:	4b69      	ldr	r3, [pc, #420]	; (80029f4 <Constant_Current+0x1564>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <Constant_Current+0x1588>)
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <Constant_Current+0x158c>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <Constant_Current+0x1564>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe fc49 	bl	80010f8 <__aeabi_fcmplt>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <Constant_Current+0x13e4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <Constant_Current+0x158c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <Constant_Current+0x1588>)
 8002872:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8002874:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <Constant_Current+0x1564>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <Constant_Current+0x1590>)
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <Constant_Current+0x1594>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <Constant_Current+0x1564>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe fc36 	bl	80010f8 <__aeabi_fcmplt>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <Constant_Current+0x140a>
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <Constant_Current+0x1594>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <Constant_Current+0x1590>)
 8002898:	6013      	str	r3, [r2, #0]

	///////////////////////////////DEFUZZIFIKASI///////////////////////////////////

	A=(r1*outZ)+(r2*outPS)+(r3*outPM)+(r4*outPB)+(r5*outPH)+(r6*outPH)+(r7*outPH);
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <Constant_Current+0x1598>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <Constant_Current+0x159c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7fe fa89 	bl	8000dbc <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461c      	mov	r4, r3
 80028ae:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <Constant_Current+0x15a0>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <Constant_Current+0x15a4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe fa7f 	bl	8000dbc <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe f972 	bl	8000bac <__addsf3>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461c      	mov	r4, r3
 80028cc:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <Constant_Current+0x15a8>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <Constant_Current+0x15ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7fe fa70 	bl	8000dbc <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7fe f963 	bl	8000bac <__addsf3>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <Constant_Current+0x15b0>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <Constant_Current+0x15b4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7fe fa61 	bl	8000dbc <__aeabi_fmul>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fe f954 	bl	8000bac <__addsf3>
 8002904:	4603      	mov	r3, r0
 8002906:	461c      	mov	r4, r3
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <Constant_Current+0x15b8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <Constant_Current+0x15bc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7fe fa52 	bl	8000dbc <__aeabi_fmul>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe f945 	bl	8000bac <__addsf3>
 8002922:	4603      	mov	r3, r0
 8002924:	461c      	mov	r4, r3
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <Constant_Current+0x15c0>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <Constant_Current+0x15bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fe fa43 	bl	8000dbc <__aeabi_fmul>
 8002936:	4603      	mov	r3, r0
 8002938:	4619      	mov	r1, r3
 800293a:	4620      	mov	r0, r4
 800293c:	f7fe f936 	bl	8000bac <__addsf3>
 8002940:	4603      	mov	r3, r0
 8002942:	461c      	mov	r4, r3
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <Constant_Current+0x15c4>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <Constant_Current+0x15bc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f7fe fa34 	bl	8000dbc <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	4619      	mov	r1, r3
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe f927 	bl	8000bac <__addsf3>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <Constant_Current+0x15c8>)
 8002964:	601a      	str	r2, [r3, #0]
	B=(r8*outNS)+(r9*outZ)+(r10*outPS)+(r11*outPM)+(r12*outPB)+(r13*outPH)+(r14*outPH);
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <Constant_Current+0x15cc>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <Constant_Current+0x15d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7fe fa23 	bl	8000dbc <__aeabi_fmul>
 8002976:	4603      	mov	r3, r0
 8002978:	461c      	mov	r4, r3
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <Constant_Current+0x15d4>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <Constant_Current+0x159c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe fa19 	bl	8000dbc <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	4620      	mov	r0, r4
 8002990:	f7fe f90c 	bl	8000bac <__addsf3>
 8002994:	4603      	mov	r3, r0
 8002996:	461c      	mov	r4, r3
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <Constant_Current+0x15d8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <Constant_Current+0x15a4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7fe fa0a 	bl	8000dbc <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7fe f8fd 	bl	8000bac <__addsf3>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461c      	mov	r4, r3
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <Constant_Current+0x15dc>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <Constant_Current+0x15ac>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe f9fb 	bl	8000dbc <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4619      	mov	r1, r3
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7fe f8ee 	bl	8000bac <__addsf3>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461c      	mov	r4, r3
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <Constant_Current+0x15e0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <Constant_Current+0x15b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7fe f9ec 	bl	8000dbc <__aeabi_fmul>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4619      	mov	r1, r3
 80029e8:	4620      	mov	r0, r4
 80029ea:	e043      	b.n	8002a74 <Constant_Current+0x15e4>
 80029ec:	20000d8c 	.word	0x20000d8c
 80029f0:	20000da4 	.word	0x20000da4
 80029f4:	200006dc 	.word	0x200006dc
 80029f8:	20000904 	.word	0x20000904
 80029fc:	20000dc4 	.word	0x20000dc4
 8002a00:	2000082c 	.word	0x2000082c
 8002a04:	200006b4 	.word	0x200006b4
 8002a08:	20000704 	.word	0x20000704
 8002a0c:	20000dd8 	.word	0x20000dd8
 8002a10:	20000d94 	.word	0x20000d94
 8002a14:	20000a38 	.word	0x20000a38
 8002a18:	20000aac 	.word	0x20000aac
 8002a1c:	20000ac0 	.word	0x20000ac0
 8002a20:	20000a28 	.word	0x20000a28
 8002a24:	200009fc 	.word	0x200009fc
 8002a28:	20000ddc 	.word	0x20000ddc
 8002a2c:	20000254 	.word	0x20000254
 8002a30:	20000bbc 	.word	0x20000bbc
 8002a34:	20000010 	.word	0x20000010
 8002a38:	200006d0 	.word	0x200006d0
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	2000080c 	.word	0x2000080c
 8002a44:	20000018 	.word	0x20000018
 8002a48:	20000dcc 	.word	0x20000dcc
 8002a4c:	2000001c 	.word	0x2000001c
 8002a50:	200007f8 	.word	0x200007f8
 8002a54:	20000aa8 	.word	0x20000aa8
 8002a58:	200006f8 	.word	0x200006f8
 8002a5c:	20000a0c 	.word	0x20000a0c
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	20000700 	.word	0x20000700
 8002a68:	200009f0 	.word	0x200009f0
 8002a6c:	20000bb8 	.word	0x20000bb8
 8002a70:	20000dac 	.word	0x20000dac
 8002a74:	f7fe f89a 	bl	8000bac <__addsf3>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <Constant_Current+0x1834>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b91      	ldr	r3, [pc, #580]	; (8002cc8 <Constant_Current+0x1838>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7fe f998 	bl	8000dbc <__aeabi_fmul>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe f88b 	bl	8000bac <__addsf3>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461c      	mov	r4, r3
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <Constant_Current+0x183c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8a      	ldr	r3, [pc, #552]	; (8002cc8 <Constant_Current+0x1838>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7fe f989 	bl	8000dbc <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f87c 	bl	8000bac <__addsf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <Constant_Current+0x1840>)
 8002aba:	601a      	str	r2, [r3, #0]
	C=(r15*outNM)+(r16*outNS)+(r17*outZ)+(r18*outPS)+(r19*outPM)+(r20*outPB)+(r21*outPH);
 8002abc:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <Constant_Current+0x1844>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <Constant_Current+0x1848>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7fe f978 	bl	8000dbc <__aeabi_fmul>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461c      	mov	r4, r3
 8002ad0:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <Constant_Current+0x184c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <Constant_Current+0x1850>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7fe f96e 	bl	8000dbc <__aeabi_fmul>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7fe f861 	bl	8000bac <__addsf3>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461c      	mov	r4, r3
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <Constant_Current+0x1854>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <Constant_Current+0x1858>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7fe f95f 	bl	8000dbc <__aeabi_fmul>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7fe f852 	bl	8000bac <__addsf3>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	4b77      	ldr	r3, [pc, #476]	; (8002cec <Constant_Current+0x185c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <Constant_Current+0x1860>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7fe f950 	bl	8000dbc <__aeabi_fmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7fe f843 	bl	8000bac <__addsf3>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461c      	mov	r4, r3
 8002b2a:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <Constant_Current+0x1864>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b72      	ldr	r3, [pc, #456]	; (8002cf8 <Constant_Current+0x1868>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7fe f941 	bl	8000dbc <__aeabi_fmul>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f834 	bl	8000bac <__addsf3>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461c      	mov	r4, r3
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <Constant_Current+0x186c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <Constant_Current+0x1870>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f7fe f932 	bl	8000dbc <__aeabi_fmul>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7fe f825 	bl	8000bac <__addsf3>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461c      	mov	r4, r3
 8002b66:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <Constant_Current+0x1874>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <Constant_Current+0x1838>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fe f923 	bl	8000dbc <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe f816 	bl	8000bac <__addsf3>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <Constant_Current+0x1878>)
 8002b86:	601a      	str	r2, [r3, #0]
	D=(r22*outNB)+(r23*outNM)+(r24*outNS)+(r25*outZ)+(r26*outPS)+(r27*outPM)+(r28*outPB);
 8002b88:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <Constant_Current+0x187c>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <Constant_Current+0x1880>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f7fe f912 	bl	8000dbc <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461c      	mov	r4, r3
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <Constant_Current+0x1884>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <Constant_Current+0x1848>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f7fe f908 	bl	8000dbc <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7fd fffb 	bl	8000bac <__addsf3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461c      	mov	r4, r3
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <Constant_Current+0x1888>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <Constant_Current+0x1850>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f7fe f8f9 	bl	8000dbc <__aeabi_fmul>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7fd ffec 	bl	8000bac <__addsf3>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <Constant_Current+0x188c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <Constant_Current+0x1858>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7fe f8ea 	bl	8000dbc <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7fd ffdd 	bl	8000bac <__addsf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461c      	mov	r4, r3
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <Constant_Current+0x1890>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <Constant_Current+0x1860>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7fe f8db 	bl	8000dbc <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7fd ffce 	bl	8000bac <__addsf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461c      	mov	r4, r3
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <Constant_Current+0x1894>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <Constant_Current+0x1868>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7fe f8cc 	bl	8000dbc <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4619      	mov	r1, r3
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7fd ffbf 	bl	8000bac <__addsf3>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461c      	mov	r4, r3
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <Constant_Current+0x1898>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <Constant_Current+0x1870>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe f8bd 	bl	8000dbc <__aeabi_fmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fd ffb0 	bl	8000bac <__addsf3>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <Constant_Current+0x189c>)
 8002c52:	601a      	str	r2, [r3, #0]
	E=(r29*outNH)+(r30*outNB)+(r31*outNM)+(r32*outNS)+(r33*outZ)+(r34*outPS)+(r35*outPM);
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <Constant_Current+0x18a0>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <Constant_Current+0x18a4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f7fe f8ac 	bl	8000dbc <__aeabi_fmul>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461c      	mov	r4, r3
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <Constant_Current+0x18a8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <Constant_Current+0x1880>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe f8a2 	bl	8000dbc <__aeabi_fmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f7fd ff95 	bl	8000bac <__addsf3>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461c      	mov	r4, r3
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <Constant_Current+0x18ac>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <Constant_Current+0x1848>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7fe f893 	bl	8000dbc <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7fd ff86 	bl	8000bac <__addsf3>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <Constant_Current+0x18b0>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <Constant_Current+0x1850>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7fe f884 	bl	8000dbc <__aeabi_fmul>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7fd ff77 	bl	8000bac <__addsf3>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	e040      	b.n	8002d44 <Constant_Current+0x18b4>
 8002cc2:	bf00      	nop
 8002cc4:	20000de0 	.word	0x20000de0
 8002cc8:	2000001c 	.word	0x2000001c
 8002ccc:	20000678 	.word	0x20000678
 8002cd0:	20000900 	.word	0x20000900
 8002cd4:	20000db0 	.word	0x20000db0
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	20000abc 	.word	0x20000abc
 8002ce0:	2000000c 	.word	0x2000000c
 8002ce4:	200007e8 	.word	0x200007e8
 8002ce8:	20000254 	.word	0x20000254
 8002cec:	20000a3c 	.word	0x20000a3c
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	20000da8 	.word	0x20000da8
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	20000a04 	.word	0x20000a04
 8002d00:	20000018 	.word	0x20000018
 8002d04:	20000800 	.word	0x20000800
 8002d08:	2000091c 	.word	0x2000091c
 8002d0c:	20000ca8 	.word	0x20000ca8
 8002d10:	20000004 	.word	0x20000004
 8002d14:	20000dc0 	.word	0x20000dc0
 8002d18:	20000dd4 	.word	0x20000dd4
 8002d1c:	200006b0 	.word	0x200006b0
 8002d20:	200007d8 	.word	0x200007d8
 8002d24:	20000a20 	.word	0x20000a20
 8002d28:	20000684 	.word	0x20000684
 8002d2c:	20000674 	.word	0x20000674
 8002d30:	200006a8 	.word	0x200006a8
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000ba4 	.word	0x20000ba4
 8002d3c:	200007f0 	.word	0x200007f0
 8002d40:	20000834 	.word	0x20000834
 8002d44:	461c      	mov	r4, r3
 8002d46:	4b91      	ldr	r3, [pc, #580]	; (8002f8c <Constant_Current+0x1afc>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <Constant_Current+0x1b00>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7fe f833 	bl	8000dbc <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd ff26 	bl	8000bac <__addsf3>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461c      	mov	r4, r3
 8002d64:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <Constant_Current+0x1b04>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <Constant_Current+0x1b08>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7fe f824 	bl	8000dbc <__aeabi_fmul>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd ff17 	bl	8000bac <__addsf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461c      	mov	r4, r3
 8002d82:	4b86      	ldr	r3, [pc, #536]	; (8002f9c <Constant_Current+0x1b0c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b86      	ldr	r3, [pc, #536]	; (8002fa0 <Constant_Current+0x1b10>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f7fe f815 	bl	8000dbc <__aeabi_fmul>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7fd ff08 	bl	8000bac <__addsf3>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <Constant_Current+0x1b14>)
 8002da2:	601a      	str	r2, [r3, #0]
	F=(r36*outNH)+(r37*outNH)+(r38*outNB)+(r39*outNM)+(r40*outNS)+(r41*outZ)+(r42*outPS);
 8002da4:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <Constant_Current+0x1b18>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b80      	ldr	r3, [pc, #512]	; (8002fac <Constant_Current+0x1b1c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe f804 	bl	8000dbc <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461c      	mov	r4, r3
 8002db8:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <Constant_Current+0x1b20>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <Constant_Current+0x1b1c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fd fffa 	bl	8000dbc <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7fd feed 	bl	8000bac <__addsf3>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	4b77      	ldr	r3, [pc, #476]	; (8002fb4 <Constant_Current+0x1b24>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b77      	ldr	r3, [pc, #476]	; (8002fb8 <Constant_Current+0x1b28>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7fd ffeb 	bl	8000dbc <__aeabi_fmul>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4619      	mov	r1, r3
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7fd fede 	bl	8000bac <__addsf3>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461c      	mov	r4, r3
 8002df4:	4b71      	ldr	r3, [pc, #452]	; (8002fbc <Constant_Current+0x1b2c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <Constant_Current+0x1b30>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fd ffdc 	bl	8000dbc <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fd fecf 	bl	8000bac <__addsf3>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <Constant_Current+0x1b34>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <Constant_Current+0x1b38>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fd ffcd 	bl	8000dbc <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7fd fec0 	bl	8000bac <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461c      	mov	r4, r3
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <Constant_Current+0x1b3c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <Constant_Current+0x1b00>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fd ffbe 	bl	8000dbc <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4619      	mov	r1, r3
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd feb1 	bl	8000bac <__addsf3>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <Constant_Current+0x1b40>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <Constant_Current+0x1b08>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fd ffaf 	bl	8000dbc <__aeabi_fmul>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4619      	mov	r1, r3
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7fd fea2 	bl	8000bac <__addsf3>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <Constant_Current+0x1b44>)
 8002e6e:	601a      	str	r2, [r3, #0]
	G=(r43*outNH)+(r44*outNH)+(r45*outNH)+(r46*outNB)+(r47*outNM)+(r48*outNS)+(r49*outZ);
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <Constant_Current+0x1b48>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <Constant_Current+0x1b1c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fd ff9e 	bl	8000dbc <__aeabi_fmul>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461c      	mov	r4, r3
 8002e84:	4b55      	ldr	r3, [pc, #340]	; (8002fdc <Constant_Current+0x1b4c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <Constant_Current+0x1b1c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd ff94 	bl	8000dbc <__aeabi_fmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7fd fe87 	bl	8000bac <__addsf3>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <Constant_Current+0x1b50>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <Constant_Current+0x1b1c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fd ff85 	bl	8000dbc <__aeabi_fmul>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7fd fe78 	bl	8000bac <__addsf3>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <Constant_Current+0x1b54>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <Constant_Current+0x1b28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7fd ff76 	bl	8000dbc <__aeabi_fmul>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7fd fe69 	bl	8000bac <__addsf3>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461c      	mov	r4, r3
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <Constant_Current+0x1b58>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <Constant_Current+0x1b30>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fd ff67 	bl	8000dbc <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7fd fe5a 	bl	8000bac <__addsf3>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461c      	mov	r4, r3
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <Constant_Current+0x1b5c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <Constant_Current+0x1b38>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7fd ff58 	bl	8000dbc <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7fd fe4b 	bl	8000bac <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461c      	mov	r4, r3
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <Constant_Current+0x1b60>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <Constant_Current+0x1b00>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7fd ff49 	bl	8000dbc <__aeabi_fmul>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7fd fe3c 	bl	8000bac <__addsf3>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <Constant_Current+0x1b64>)
 8002f3a:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <Constant_Current+0x1b68>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <Constant_Current+0x1b6c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fd fe30 	bl	8000bac <__addsf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <Constant_Current+0x1b70>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7fd fe28 	bl	8000bac <__addsf3>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <Constant_Current+0x1b74>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7fd fe20 	bl	8000bac <__addsf3>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <Constant_Current+0x1b78>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f7fd fe18 	bl	8000bac <__addsf3>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <Constant_Current+0x1b7c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	e042      	b.n	8003010 <Constant_Current+0x1b80>
 8002f8a:	bf00      	nop
 8002f8c:	20000a2c 	.word	0x20000a2c
 8002f90:	20000254 	.word	0x20000254
 8002f94:	20000ba0 	.word	0x20000ba0
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	20000ca4 	.word	0x20000ca4
 8002fa0:	20000014 	.word	0x20000014
 8002fa4:	20000c90 	.word	0x20000c90
 8002fa8:	200006d4 	.word	0x200006d4
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000914 	.word	0x20000914
 8002fb4:	20000a00 	.word	0x20000a00
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	20000d9c 	.word	0x20000d9c
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	20000aa0 	.word	0x20000aa0
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	200006c0 	.word	0x200006c0
 8002fd0:	200006c8 	.word	0x200006c8
 8002fd4:	20000dc8 	.word	0x20000dc8
 8002fd8:	20000da4 	.word	0x20000da4
 8002fdc:	20000904 	.word	0x20000904
 8002fe0:	2000082c 	.word	0x2000082c
 8002fe4:	20000704 	.word	0x20000704
 8002fe8:	20000d94 	.word	0x20000d94
 8002fec:	20000aac 	.word	0x20000aac
 8002ff0:	20000a28 	.word	0x20000a28
 8002ff4:	20000a10 	.word	0x20000a10
 8002ff8:	20000ddc 	.word	0x20000ddc
 8002ffc:	20000bbc 	.word	0x20000bbc
 8003000:	200006d0 	.word	0x200006d0
 8003004:	2000080c 	.word	0x2000080c
 8003008:	20000dcc 	.word	0x20000dcc
 800300c:	200007f8 	.word	0x200007f8
 8003010:	f7fd fdcc 	bl	8000bac <__addsf3>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b90      	ldr	r3, [pc, #576]	; (800325c <Constant_Current+0x1dcc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7fd fdc4 	bl	8000bac <__addsf3>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <Constant_Current+0x1dd0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7fd fdbc 	bl	8000bac <__addsf3>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	4b8a      	ldr	r3, [pc, #552]	; (8003264 <Constant_Current+0x1dd4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f7fd fdb4 	bl	8000bac <__addsf3>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <Constant_Current+0x1dd8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7fd fdac 	bl	8000bac <__addsf3>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	4b84      	ldr	r3, [pc, #528]	; (800326c <Constant_Current+0x1ddc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7fd fda4 	bl	8000bac <__addsf3>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b81      	ldr	r3, [pc, #516]	; (8003270 <Constant_Current+0x1de0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fd fd9c 	bl	8000bac <__addsf3>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <Constant_Current+0x1de4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7fd fd94 	bl	8000bac <__addsf3>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <Constant_Current+0x1de8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd fd8c 	bl	8000bac <__addsf3>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b78      	ldr	r3, [pc, #480]	; (800327c <Constant_Current+0x1dec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fd fd84 	bl	8000bac <__addsf3>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b75      	ldr	r3, [pc, #468]	; (8003280 <Constant_Current+0x1df0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7fd fd7c 	bl	8000bac <__addsf3>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b72      	ldr	r3, [pc, #456]	; (8003284 <Constant_Current+0x1df4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f7fd fd74 	bl	8000bac <__addsf3>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <Constant_Current+0x1df8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fd fd6c 	bl	8000bac <__addsf3>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b6c      	ldr	r3, [pc, #432]	; (800328c <Constant_Current+0x1dfc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7fd fd64 	bl	8000bac <__addsf3>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <Constant_Current+0x1e00>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7fd fd5c 	bl	8000bac <__addsf3>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b66      	ldr	r3, [pc, #408]	; (8003294 <Constant_Current+0x1e04>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fd fd54 	bl	8000bac <__addsf3>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <Constant_Current+0x1e08>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7fd fd4c 	bl	8000bac <__addsf3>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <Constant_Current+0x1e0c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7fd fd44 	bl	8000bac <__addsf3>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <Constant_Current+0x1e10>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7fd fd3c 	bl	8000bac <__addsf3>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <Constant_Current+0x1e14>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7fd fd34 	bl	8000bac <__addsf3>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <Constant_Current+0x1e18>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7fd fd2c 	bl	8000bac <__addsf3>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	4b54      	ldr	r3, [pc, #336]	; (80032ac <Constant_Current+0x1e1c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f7fd fd24 	bl	8000bac <__addsf3>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <Constant_Current+0x1e20>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7fd fd1c 	bl	8000bac <__addsf3>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <Constant_Current+0x1e24>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fd fd14 	bl	8000bac <__addsf3>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <Constant_Current+0x1e28>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fd fd0c 	bl	8000bac <__addsf3>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	4b48      	ldr	r3, [pc, #288]	; (80032bc <Constant_Current+0x1e2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7fd fd04 	bl	8000bac <__addsf3>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <Constant_Current+0x1e30>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f7fd fcfc 	bl	8000bac <__addsf3>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <Constant_Current+0x1e34>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fd fcf4 	bl	8000bac <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <Constant_Current+0x1e38>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7fd fcec 	bl	8000bac <__addsf3>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <Constant_Current+0x1e3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7fd fce4 	bl	8000bac <__addsf3>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <Constant_Current+0x1e40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7fd fcdc 	bl	8000bac <__addsf3>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <Constant_Current+0x1e44>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fd fcd4 	bl	8000bac <__addsf3>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <Constant_Current+0x1e48>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fd fccc 	bl	8000bac <__addsf3>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <Constant_Current+0x1e4c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7fd fcc4 	bl	8000bac <__addsf3>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <Constant_Current+0x1e50>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7fd fcbc 	bl	8000bac <__addsf3>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <Constant_Current+0x1e54>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fd fcb4 	bl	8000bac <__addsf3>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <Constant_Current+0x1e58>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f7fd fcac 	bl	8000bac <__addsf3>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	e048      	b.n	80032ec <Constant_Current+0x1e5c>
 800325a:	bf00      	nop
 800325c:	20000aa8 	.word	0x20000aa8
 8003260:	20000a0c 	.word	0x20000a0c
 8003264:	20000700 	.word	0x20000700
 8003268:	200009f0 	.word	0x200009f0
 800326c:	20000bb8 	.word	0x20000bb8
 8003270:	20000dac 	.word	0x20000dac
 8003274:	20000de0 	.word	0x20000de0
 8003278:	20000678 	.word	0x20000678
 800327c:	20000db0 	.word	0x20000db0
 8003280:	20000abc 	.word	0x20000abc
 8003284:	200007e8 	.word	0x200007e8
 8003288:	20000a3c 	.word	0x20000a3c
 800328c:	20000da8 	.word	0x20000da8
 8003290:	20000a04 	.word	0x20000a04
 8003294:	20000800 	.word	0x20000800
 8003298:	20000ca8 	.word	0x20000ca8
 800329c:	20000dc0 	.word	0x20000dc0
 80032a0:	20000dd4 	.word	0x20000dd4
 80032a4:	200006b0 	.word	0x200006b0
 80032a8:	200007d8 	.word	0x200007d8
 80032ac:	20000a20 	.word	0x20000a20
 80032b0:	20000684 	.word	0x20000684
 80032b4:	200006a8 	.word	0x200006a8
 80032b8:	20000ba4 	.word	0x20000ba4
 80032bc:	200007f0 	.word	0x200007f0
 80032c0:	20000834 	.word	0x20000834
 80032c4:	20000a2c 	.word	0x20000a2c
 80032c8:	20000ba0 	.word	0x20000ba0
 80032cc:	20000ca4 	.word	0x20000ca4
 80032d0:	200006d4 	.word	0x200006d4
 80032d4:	20000914 	.word	0x20000914
 80032d8:	20000a00 	.word	0x20000a00
 80032dc:	20000d9c 	.word	0x20000d9c
 80032e0:	20000aa0 	.word	0x20000aa0
 80032e4:	200006c0 	.word	0x200006c0
 80032e8:	200006c8 	.word	0x200006c8
 80032ec:	4b84      	ldr	r3, [pc, #528]	; (8003500 <Constant_Current+0x2070>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fd fc5a 	bl	8000bac <__addsf3>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b81      	ldr	r3, [pc, #516]	; (8003504 <Constant_Current+0x2074>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7fd fc52 	bl	8000bac <__addsf3>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	4b7e      	ldr	r3, [pc, #504]	; (8003508 <Constant_Current+0x2078>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7fd fc4a 	bl	8000bac <__addsf3>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	4b7b      	ldr	r3, [pc, #492]	; (800350c <Constant_Current+0x207c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7fd fc42 	bl	8000bac <__addsf3>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	4b78      	ldr	r3, [pc, #480]	; (8003510 <Constant_Current+0x2080>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7fd fc3a 	bl	8000bac <__addsf3>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b75      	ldr	r3, [pc, #468]	; (8003514 <Constant_Current+0x2084>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7fd fc32 	bl	8000bac <__addsf3>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	4b72      	ldr	r3, [pc, #456]	; (8003518 <Constant_Current+0x2088>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7fd fc2a 	bl	8000bac <__addsf3>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	4b6f      	ldr	r3, [pc, #444]	; (800351c <Constant_Current+0x208c>)
 800335e:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 8003360:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <Constant_Current+0x2090>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b6f      	ldr	r3, [pc, #444]	; (8003524 <Constant_Current+0x2094>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7fd fc1e 	bl	8000bac <__addsf3>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	4b6c      	ldr	r3, [pc, #432]	; (8003528 <Constant_Current+0x2098>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7fd fc16 	bl	8000bac <__addsf3>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	4b69      	ldr	r3, [pc, #420]	; (800352c <Constant_Current+0x209c>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7fd fc0e 	bl	8000bac <__addsf3>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4b66      	ldr	r3, [pc, #408]	; (8003530 <Constant_Current+0x20a0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fd fc06 	bl	8000bac <__addsf3>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b63      	ldr	r3, [pc, #396]	; (8003534 <Constant_Current+0x20a4>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7fd fbfe 	bl	8000bac <__addsf3>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b60      	ldr	r3, [pc, #384]	; (8003538 <Constant_Current+0x20a8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fd fbf6 	bl	8000bac <__addsf3>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b55      	ldr	r3, [pc, #340]	; (800351c <Constant_Current+0x208c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fd fdaa 	bl	8000f24 <__aeabi_fdiv>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b59      	ldr	r3, [pc, #356]	; (800353c <Constant_Current+0x20ac>)
 80033d6:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <Constant_Current+0x20b0>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b57      	ldr	r3, [pc, #348]	; (800353c <Constant_Current+0x20ac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fd fbe2 	bl	8000bac <__addsf3>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b54      	ldr	r3, [pc, #336]	; (8003540 <Constant_Current+0x20b0>)
 80033ee:	601a      	str	r2, [r3, #0]

	if(dc>=90)
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <Constant_Current+0x20b0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4953      	ldr	r1, [pc, #332]	; (8003544 <Constant_Current+0x20b4>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fe92 	bl	8001120 <__aeabi_fcmpge>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <Constant_Current+0x1f78>
		dc=90;
 8003402:	4b4f      	ldr	r3, [pc, #316]	; (8003540 <Constant_Current+0x20b0>)
 8003404:	4a4f      	ldr	r2, [pc, #316]	; (8003544 <Constant_Current+0x20b4>)
 8003406:	601a      	str	r2, [r3, #0]
	if(dc<=0)
 8003408:	4b4d      	ldr	r3, [pc, #308]	; (8003540 <Constant_Current+0x20b0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fe7b 	bl	800110c <__aeabi_fcmple>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <Constant_Current+0x1f94>
		dc=0;
 800341c:	4b48      	ldr	r3, [pc, #288]	; (8003540 <Constant_Current+0x20b0>)
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 8003424:	4b46      	ldr	r3, [pc, #280]	; (8003540 <Constant_Current+0x20b0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4947      	ldr	r1, [pc, #284]	; (8003548 <Constant_Current+0x20b8>)
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fd7a 	bl	8000f24 <__aeabi_fdiv>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4b45      	ldr	r3, [pc, #276]	; (800354c <Constant_Current+0x20bc>)
 8003436:	601a      	str	r2, [r3, #0]

	if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1 && Eror_Code==0){
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	4845      	ldr	r0, [pc, #276]	; (8003550 <Constant_Current+0x20c0>)
 800343c:	f007 f8ee 	bl	800a61c <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d10f      	bne.n	8003466 <Constant_Current+0x1fd6>
 8003446:	4b43      	ldr	r3, [pc, #268]	; (8003554 <Constant_Current+0x20c4>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10b      	bne.n	8003466 <Constant_Current+0x1fd6>
		Charger_Mode = 0;
 800344e:	4b42      	ldr	r3, [pc, #264]	; (8003558 <Constant_Current+0x20c8>)
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
		Handshaking = 0;
 8003454:	4b41      	ldr	r3, [pc, #260]	; (800355c <Constant_Current+0x20cc>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
		identified = 0;
 800345a:	4b41      	ldr	r3, [pc, #260]	; (8003560 <Constant_Current+0x20d0>)
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
		UNIQUE_Code = 0;
 8003460:	4b40      	ldr	r3, [pc, #256]	; (8003564 <Constant_Current+0x20d4>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
//			  	while(p>0)
//			  		p--;
//			  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//		}

	if(	flag_trip_overvoltage == 1		||
 8003466:	4b40      	ldr	r3, [pc, #256]	; (8003568 <Constant_Current+0x20d8>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d02b      	beq.n	80034c6 <Constant_Current+0x2036>
		flag_trip_overtemperature == 1	||
 800346e:	4b3f      	ldr	r3, [pc, #252]	; (800356c <Constant_Current+0x20dc>)
 8003470:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8003472:	2b01      	cmp	r3, #1
 8003474:	d027      	beq.n	80034c6 <Constant_Current+0x2036>
		flag_trip_undertemperature == 1	||
 8003476:	4b3e      	ldr	r3, [pc, #248]	; (8003570 <Constant_Current+0x20e0>)
 8003478:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 800347a:	2b01      	cmp	r3, #1
 800347c:	d023      	beq.n	80034c6 <Constant_Current+0x2036>
		flag_trip_overcurrentcharge == 1||
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <Constant_Current+0x20e4>)
 8003480:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8003482:	2b01      	cmp	r3, #1
 8003484:	d01f      	beq.n	80034c6 <Constant_Current+0x2036>
		flag_trip_SOCOverCharge == 1	||
 8003486:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <Constant_Current+0x20e8>)
 8003488:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 800348a:	2b01      	cmp	r3, #1
 800348c:	d01b      	beq.n	80034c6 <Constant_Current+0x2036>
		flag_trip_shortcircuit == 1		||
 800348e:	4b3b      	ldr	r3, [pc, #236]	; (800357c <Constant_Current+0x20ec>)
 8003490:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8003492:	2b01      	cmp	r3, #1
 8003494:	d017      	beq.n	80034c6 <Constant_Current+0x2036>
		flag_trip_systemfailure == 1	||
 8003496:	4b3a      	ldr	r3, [pc, #232]	; (8003580 <Constant_Current+0x20f0>)
 8003498:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 800349a:	2b01      	cmp	r3, #1
 800349c:	d013      	beq.n	80034c6 <Constant_Current+0x2036>
		Flag_ChargerShortCircuit == 1	||
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <Constant_Current+0x20f4>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d00f      	beq.n	80034c6 <Constant_Current+0x2036>
		Flag_ChargerOverCurrent == 1	||
 80034a6:	4b38      	ldr	r3, [pc, #224]	; (8003588 <Constant_Current+0x20f8>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d00b      	beq.n	80034c6 <Constant_Current+0x2036>
		Flag_ChargerOverTemperature == 1||
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <Constant_Current+0x20fc>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d007      	beq.n	80034c6 <Constant_Current+0x2036>
		Flag_ChargerOverVoltage == 1	||
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <Constant_Current+0x2100>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d003      	beq.n	80034c6 <Constant_Current+0x2036>
		Flag_ChargerLostCommunication==1)
 80034be:	4b35      	ldr	r3, [pc, #212]	; (8003594 <Constant_Current+0x2104>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d106      	bne.n	80034d4 <Constant_Current+0x2044>
		{
			duty=0;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <Constant_Current+0x20bc>)
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 80034ce:	4b22      	ldr	r3, [pc, #136]	; (8003558 <Constant_Current+0x20c8>)
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
		}

	TIM1->CCR1=duty*TIM1->ARR;
 80034d4:	4b30      	ldr	r3, [pc, #192]	; (8003598 <Constant_Current+0x2108>)
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	4618      	mov	r0, r3
 80034da:	f7fd fc17 	bl	8000d0c <__aeabi_ui2f>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b1a      	ldr	r3, [pc, #104]	; (800354c <Constant_Current+0x20bc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7fd fc68 	bl	8000dbc <__aeabi_fmul>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4c2a      	ldr	r4, [pc, #168]	; (8003598 <Constant_Current+0x2108>)
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7fd fe29 	bl	8001148 <__aeabi_f2uiz>
 80034f6:	4603      	mov	r3, r0
 80034f8:	6363      	str	r3, [r4, #52]	; 0x34

}
 80034fa:	bf00      	nop
 80034fc:	bd98      	pop	{r3, r4, r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000da4 	.word	0x20000da4
 8003504:	20000904 	.word	0x20000904
 8003508:	2000082c 	.word	0x2000082c
 800350c:	20000704 	.word	0x20000704
 8003510:	20000d94 	.word	0x20000d94
 8003514:	20000aac 	.word	0x20000aac
 8003518:	20000a28 	.word	0x20000a28
 800351c:	20000a9c 	.word	0x20000a9c
 8003520:	200006f8 	.word	0x200006f8
 8003524:	20000900 	.word	0x20000900
 8003528:	2000091c 	.word	0x2000091c
 800352c:	20000674 	.word	0x20000674
 8003530:	20000c90 	.word	0x20000c90
 8003534:	20000dc8 	.word	0x20000dc8
 8003538:	20000a10 	.word	0x20000a10
 800353c:	20000c88 	.word	0x20000c88
 8003540:	200006bc 	.word	0x200006bc
 8003544:	42b40000 	.word	0x42b40000
 8003548:	42c80000 	.word	0x42c80000
 800354c:	20000d7c 	.word	0x20000d7c
 8003550:	40020800 	.word	0x40020800
 8003554:	20000688 	.word	0x20000688
 8003558:	20000708 	.word	0x20000708
 800355c:	20000acc 	.word	0x20000acc
 8003560:	20000920 	.word	0x20000920
 8003564:	20000ab4 	.word	0x20000ab4
 8003568:	20000db4 	.word	0x20000db4
 800356c:	200007d4 	.word	0x200007d4
 8003570:	20000910 	.word	0x20000910
 8003574:	20000ab0 	.word	0x20000ab0
 8003578:	20000693 	.word	0x20000693
 800357c:	200006ac 	.word	0x200006ac
 8003580:	200006cc 	.word	0x200006cc
 8003584:	20000810 	.word	0x20000810
 8003588:	200007f4 	.word	0x200007f4
 800358c:	200006e9 	.word	0x200006e9
 8003590:	20000814 	.word	0x20000814
 8003594:	20000a14 	.word	0x20000a14
 8003598:	40010000 	.word	0x40010000

0800359c <Constant_Voltage>:
float oNH=-0.05, oNB=-0.025, oNM=-0.01, oNS=-0.0075, oZ=0, oPS=0.0075, oPM=0.01, oPB=0.025, oPH=0.05;
float SetPoint_CV = 61.5;
extern float Voltage_Charger;

void Constant_Voltage(void)
{
 800359c:	b598      	push	{r3, r4, r7, lr}
 800359e:	af00      	add	r7, sp, #0

	sp=SetPoint_CV;
 80035a0:	4b71      	ldr	r3, [pc, #452]	; (8003768 <Constant_Voltage+0x1cc>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a71      	ldr	r2, [pc, #452]	; (800376c <Constant_Voltage+0x1d0>)
 80035a6:	6013      	str	r3, [r2, #0]
	pv=Voltage_Charger;
 80035a8:	4b71      	ldr	r3, [pc, #452]	; (8003770 <Constant_Voltage+0x1d4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a71      	ldr	r2, [pc, #452]	; (8003774 <Constant_Voltage+0x1d8>)
 80035ae:	6013      	str	r3, [r2, #0]
	e=sp-pv;
 80035b0:	4b6e      	ldr	r3, [pc, #440]	; (800376c <Constant_Voltage+0x1d0>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	4b6f      	ldr	r3, [pc, #444]	; (8003774 <Constant_Voltage+0x1d8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4619      	mov	r1, r3
 80035ba:	4610      	mov	r0, r2
 80035bc:	f7fd faf4 	bl	8000ba8 <__aeabi_fsub>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <Constant_Voltage+0x1dc>)
 80035c6:	601a      	str	r2, [r3, #0]
	d=e-esblm;
 80035c8:	4b6b      	ldr	r3, [pc, #428]	; (8003778 <Constant_Voltage+0x1dc>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <Constant_Voltage+0x1e0>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4619      	mov	r1, r3
 80035d2:	4610      	mov	r0, r2
 80035d4:	f7fd fae8 	bl	8000ba8 <__aeabi_fsub>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b68      	ldr	r3, [pc, #416]	; (8003780 <Constant_Voltage+0x1e4>)
 80035de:	601a      	str	r2, [r3, #0]
	esblm=e;
 80035e0:	4b65      	ldr	r3, [pc, #404]	; (8003778 <Constant_Voltage+0x1dc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a65      	ldr	r2, [pc, #404]	; (800377c <Constant_Voltage+0x1e0>)
 80035e6:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-75)
 80035e8:	4b63      	ldr	r3, [pc, #396]	; (8003778 <Constant_Voltage+0x1dc>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4965      	ldr	r1, [pc, #404]	; (8003784 <Constant_Voltage+0x1e8>)
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7fd fd8c 	bl	800110c <__aeabi_fcmple>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d01b      	beq.n	8003632 <Constant_Voltage+0x96>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 80035fa:	4b63      	ldr	r3, [pc, #396]	; (8003788 <Constant_Voltage+0x1ec>)
 80035fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	4b62      	ldr	r3, [pc, #392]	; (800378c <Constant_Voltage+0x1f0>)
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	4b60      	ldr	r3, [pc, #384]	; (800378c <Constant_Voltage+0x1f0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a60      	ldr	r2, [pc, #384]	; (8003790 <Constant_Voltage+0x1f4>)
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b5f      	ldr	r3, [pc, #380]	; (8003790 <Constant_Voltage+0x1f4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a5f      	ldr	r2, [pc, #380]	; (8003794 <Constant_Voltage+0x1f8>)
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b5e      	ldr	r3, [pc, #376]	; (8003794 <Constant_Voltage+0x1f8>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a5e      	ldr	r2, [pc, #376]	; (8003798 <Constant_Voltage+0x1fc>)
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <Constant_Voltage+0x1fc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a5d      	ldr	r2, [pc, #372]	; (800379c <Constant_Voltage+0x200>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b5c      	ldr	r3, [pc, #368]	; (800379c <Constant_Voltage+0x200>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a5c      	ldr	r2, [pc, #368]	; (80037a0 <Constant_Voltage+0x204>)
 8003630:	6013      	str	r3, [r2, #0]

	if(e>=-75&&e<=-50)
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <Constant_Voltage+0x1dc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4953      	ldr	r1, [pc, #332]	; (8003784 <Constant_Voltage+0x1e8>)
 8003638:	4618      	mov	r0, r3
 800363a:	f7fd fd71 	bl	8001120 <__aeabi_fcmpge>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d043      	beq.n	80036cc <Constant_Voltage+0x130>
 8003644:	4b4c      	ldr	r3, [pc, #304]	; (8003778 <Constant_Voltage+0x1dc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4956      	ldr	r1, [pc, #344]	; (80037a4 <Constant_Voltage+0x208>)
 800364a:	4618      	mov	r0, r3
 800364c:	f7fd fd5e 	bl	800110c <__aeabi_fcmple>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03a      	beq.n	80036cc <Constant_Voltage+0x130>
	{ eNB=(-(e+75)/25)+1;
 8003656:	4b48      	ldr	r3, [pc, #288]	; (8003778 <Constant_Voltage+0x1dc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4953      	ldr	r1, [pc, #332]	; (80037a8 <Constant_Voltage+0x20c>)
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd faa5 	bl	8000bac <__addsf3>
 8003662:	4603      	mov	r3, r0
 8003664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003668:	4950      	ldr	r1, [pc, #320]	; (80037ac <Constant_Voltage+0x210>)
 800366a:	4618      	mov	r0, r3
 800366c:	f7fd fc5a 	bl	8000f24 <__aeabi_fdiv>
 8003670:	4603      	mov	r3, r0
 8003672:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003676:	4618      	mov	r0, r3
 8003678:	f7fd fa98 	bl	8000bac <__addsf3>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4b41      	ldr	r3, [pc, #260]	; (8003788 <Constant_Voltage+0x1ec>)
 8003682:	601a      	str	r2, [r3, #0]
	   eNM=(e+75)/25;
 8003684:	4b3c      	ldr	r3, [pc, #240]	; (8003778 <Constant_Voltage+0x1dc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4947      	ldr	r1, [pc, #284]	; (80037a8 <Constant_Voltage+0x20c>)
 800368a:	4618      	mov	r0, r3
 800368c:	f7fd fa8e 	bl	8000bac <__addsf3>
 8003690:	4603      	mov	r3, r0
 8003692:	4946      	ldr	r1, [pc, #280]	; (80037ac <Constant_Voltage+0x210>)
 8003694:	4618      	mov	r0, r3
 8003696:	f7fd fc45 	bl	8000f24 <__aeabi_fdiv>
 800369a:	4603      	mov	r3, r0
 800369c:	461a      	mov	r2, r3
 800369e:	4b40      	ldr	r3, [pc, #256]	; (80037a0 <Constant_Voltage+0x204>)
 80036a0:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 80036a2:	4b3a      	ldr	r3, [pc, #232]	; (800378c <Constant_Voltage+0x1f0>)
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	4b38      	ldr	r3, [pc, #224]	; (800378c <Constant_Voltage+0x1f0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a38      	ldr	r2, [pc, #224]	; (8003790 <Constant_Voltage+0x1f4>)
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b37      	ldr	r3, [pc, #220]	; (8003790 <Constant_Voltage+0x1f4>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a37      	ldr	r2, [pc, #220]	; (8003794 <Constant_Voltage+0x1f8>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	4b36      	ldr	r3, [pc, #216]	; (8003794 <Constant_Voltage+0x1f8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a36      	ldr	r2, [pc, #216]	; (8003798 <Constant_Voltage+0x1fc>)
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	4b35      	ldr	r3, [pc, #212]	; (8003798 <Constant_Voltage+0x1fc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a35      	ldr	r2, [pc, #212]	; (800379c <Constant_Voltage+0x200>)
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e1de      	b.n	8003a8a <Constant_Voltage+0x4ee>
	}

	else if(e>=-50&&e<=-25)
 80036cc:	4b2a      	ldr	r3, [pc, #168]	; (8003778 <Constant_Voltage+0x1dc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4934      	ldr	r1, [pc, #208]	; (80037a4 <Constant_Voltage+0x208>)
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fd24 	bl	8001120 <__aeabi_fcmpge>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d06c      	beq.n	80037b8 <Constant_Voltage+0x21c>
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <Constant_Voltage+0x1dc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4933      	ldr	r1, [pc, #204]	; (80037b0 <Constant_Voltage+0x214>)
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7fd fd11 	bl	800110c <__aeabi_fcmple>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d063      	beq.n	80037b8 <Constant_Voltage+0x21c>
	{ eNM=(-(e+50)/25)+1;
 80036f0:	4b21      	ldr	r3, [pc, #132]	; (8003778 <Constant_Voltage+0x1dc>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	492f      	ldr	r1, [pc, #188]	; (80037b4 <Constant_Voltage+0x218>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fa58 	bl	8000bac <__addsf3>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003702:	492a      	ldr	r1, [pc, #168]	; (80037ac <Constant_Voltage+0x210>)
 8003704:	4618      	mov	r0, r3
 8003706:	f7fd fc0d 	bl	8000f24 <__aeabi_fdiv>
 800370a:	4603      	mov	r3, r0
 800370c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003710:	4618      	mov	r0, r3
 8003712:	f7fd fa4b 	bl	8000bac <__addsf3>
 8003716:	4603      	mov	r3, r0
 8003718:	461a      	mov	r2, r3
 800371a:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <Constant_Voltage+0x204>)
 800371c:	601a      	str	r2, [r3, #0]
	   eNS=(e+50)/25;
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <Constant_Voltage+0x1dc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4924      	ldr	r1, [pc, #144]	; (80037b4 <Constant_Voltage+0x218>)
 8003724:	4618      	mov	r0, r3
 8003726:	f7fd fa41 	bl	8000bac <__addsf3>
 800372a:	4603      	mov	r3, r0
 800372c:	491f      	ldr	r1, [pc, #124]	; (80037ac <Constant_Voltage+0x210>)
 800372e:	4618      	mov	r0, r3
 8003730:	f7fd fbf8 	bl	8000f24 <__aeabi_fdiv>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <Constant_Voltage+0x200>)
 800373a:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 800373c:	4b13      	ldr	r3, [pc, #76]	; (800378c <Constant_Voltage+0x1f0>)
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	4b11      	ldr	r3, [pc, #68]	; (800378c <Constant_Voltage+0x1f0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a11      	ldr	r2, [pc, #68]	; (8003790 <Constant_Voltage+0x1f4>)
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b10      	ldr	r3, [pc, #64]	; (8003790 <Constant_Voltage+0x1f4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a10      	ldr	r2, [pc, #64]	; (8003794 <Constant_Voltage+0x1f8>)
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <Constant_Voltage+0x1f8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <Constant_Voltage+0x1fc>)
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <Constant_Voltage+0x1fc>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <Constant_Voltage+0x1ec>)
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	e191      	b.n	8003a8a <Constant_Voltage+0x4ee>
 8003766:	bf00      	nop
 8003768:	20000044 	.word	0x20000044
 800376c:	20000bb4 	.word	0x20000bb4
 8003770:	20000ba8 	.word	0x20000ba8
 8003774:	20000ca0 	.word	0x20000ca0
 8003778:	20000d84 	.word	0x20000d84
 800377c:	20000d88 	.word	0x20000d88
 8003780:	20000ab8 	.word	0x20000ab8
 8003784:	c2960000 	.word	0xc2960000
 8003788:	20000d8c 	.word	0x20000d8c
 800378c:	200009fc 	.word	0x200009fc
 8003790:	20000ac0 	.word	0x20000ac0
 8003794:	20000a38 	.word	0x20000a38
 8003798:	20000dd8 	.word	0x20000dd8
 800379c:	200006b4 	.word	0x200006b4
 80037a0:	20000dc4 	.word	0x20000dc4
 80037a4:	c2480000 	.word	0xc2480000
 80037a8:	42960000 	.word	0x42960000
 80037ac:	41c80000 	.word	0x41c80000
 80037b0:	c1c80000 	.word	0xc1c80000
 80037b4:	42480000 	.word	0x42480000
	}

	else if(e>=-25&&e<=0)
 80037b8:	4b95      	ldr	r3, [pc, #596]	; (8003a10 <Constant_Voltage+0x474>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4995      	ldr	r1, [pc, #596]	; (8003a14 <Constant_Voltage+0x478>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fd fcae 	bl	8001120 <__aeabi_fcmpge>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d045      	beq.n	8003856 <Constant_Voltage+0x2ba>
 80037ca:	4b91      	ldr	r3, [pc, #580]	; (8003a10 <Constant_Voltage+0x474>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fc9a 	bl	800110c <__aeabi_fcmple>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d03b      	beq.n	8003856 <Constant_Voltage+0x2ba>
	{ eNS=(-(e+25)/25)+1;
 80037de:	4b8c      	ldr	r3, [pc, #560]	; (8003a10 <Constant_Voltage+0x474>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	498d      	ldr	r1, [pc, #564]	; (8003a18 <Constant_Voltage+0x47c>)
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd f9e1 	bl	8000bac <__addsf3>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037f0:	4989      	ldr	r1, [pc, #548]	; (8003a18 <Constant_Voltage+0x47c>)
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fd fb96 	bl	8000f24 <__aeabi_fdiv>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fd f9d4 	bl	8000bac <__addsf3>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b84      	ldr	r3, [pc, #528]	; (8003a1c <Constant_Voltage+0x480>)
 800380a:	601a      	str	r2, [r3, #0]
	   eZ=(e/25)+1;
 800380c:	4b80      	ldr	r3, [pc, #512]	; (8003a10 <Constant_Voltage+0x474>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4981      	ldr	r1, [pc, #516]	; (8003a18 <Constant_Voltage+0x47c>)
 8003812:	4618      	mov	r0, r3
 8003814:	f7fd fb86 	bl	8000f24 <__aeabi_fdiv>
 8003818:	4603      	mov	r3, r0
 800381a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800381e:	4618      	mov	r0, r3
 8003820:	f7fd f9c4 	bl	8000bac <__addsf3>
 8003824:	4603      	mov	r3, r0
 8003826:	461a      	mov	r2, r3
 8003828:	4b7d      	ldr	r3, [pc, #500]	; (8003a20 <Constant_Voltage+0x484>)
 800382a:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 800382c:	4b7d      	ldr	r3, [pc, #500]	; (8003a24 <Constant_Voltage+0x488>)
 800382e:	f04f 0200 	mov.w	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <Constant_Voltage+0x488>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a7b      	ldr	r2, [pc, #492]	; (8003a28 <Constant_Voltage+0x48c>)
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4b7a      	ldr	r3, [pc, #488]	; (8003a28 <Constant_Voltage+0x48c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a7a      	ldr	r2, [pc, #488]	; (8003a2c <Constant_Voltage+0x490>)
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b79      	ldr	r3, [pc, #484]	; (8003a2c <Constant_Voltage+0x490>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a79      	ldr	r2, [pc, #484]	; (8003a30 <Constant_Voltage+0x494>)
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b78      	ldr	r3, [pc, #480]	; (8003a30 <Constant_Voltage+0x494>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a78      	ldr	r2, [pc, #480]	; (8003a34 <Constant_Voltage+0x498>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e119      	b.n	8003a8a <Constant_Voltage+0x4ee>
	}

	else if(e>=0&&e<=25)
 8003856:	4b6e      	ldr	r3, [pc, #440]	; (8003a10 <Constant_Voltage+0x474>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f04f 0100 	mov.w	r1, #0
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fc5e 	bl	8001120 <__aeabi_fcmpge>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d037      	beq.n	80038da <Constant_Voltage+0x33e>
 800386a:	4b69      	ldr	r3, [pc, #420]	; (8003a10 <Constant_Voltage+0x474>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	496a      	ldr	r1, [pc, #424]	; (8003a18 <Constant_Voltage+0x47c>)
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd fc4b 	bl	800110c <__aeabi_fcmple>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d02e      	beq.n	80038da <Constant_Voltage+0x33e>
	{ eZ=-(e/25)+1;
 800387c:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <Constant_Voltage+0x474>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4965      	ldr	r1, [pc, #404]	; (8003a18 <Constant_Voltage+0x47c>)
 8003882:	4618      	mov	r0, r3
 8003884:	f7fd fb4e 	bl	8000f24 <__aeabi_fdiv>
 8003888:	4603      	mov	r3, r0
 800388a:	4619      	mov	r1, r3
 800388c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003890:	f7fd f98a 	bl	8000ba8 <__aeabi_fsub>
 8003894:	4603      	mov	r3, r0
 8003896:	461a      	mov	r2, r3
 8003898:	4b61      	ldr	r3, [pc, #388]	; (8003a20 <Constant_Voltage+0x484>)
 800389a:	601a      	str	r2, [r3, #0]
	   ePS=e/25;
 800389c:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <Constant_Voltage+0x474>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	495d      	ldr	r1, [pc, #372]	; (8003a18 <Constant_Voltage+0x47c>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7fd fb3e 	bl	8000f24 <__aeabi_fdiv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	461a      	mov	r2, r3
 80038ac:	4b5f      	ldr	r3, [pc, #380]	; (8003a2c <Constant_Voltage+0x490>)
 80038ae:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 80038b0:	4b5c      	ldr	r3, [pc, #368]	; (8003a24 <Constant_Voltage+0x488>)
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	4b5a      	ldr	r3, [pc, #360]	; (8003a24 <Constant_Voltage+0x488>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a5a      	ldr	r2, [pc, #360]	; (8003a28 <Constant_Voltage+0x48c>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <Constant_Voltage+0x48c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a55      	ldr	r2, [pc, #340]	; (8003a1c <Constant_Voltage+0x480>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b54      	ldr	r3, [pc, #336]	; (8003a1c <Constant_Voltage+0x480>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <Constant_Voltage+0x494>)
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b57      	ldr	r3, [pc, #348]	; (8003a30 <Constant_Voltage+0x494>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a57      	ldr	r2, [pc, #348]	; (8003a34 <Constant_Voltage+0x498>)
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e0d7      	b.n	8003a8a <Constant_Voltage+0x4ee>
	}

	else if(e>=25&&e<=50)
 80038da:	4b4d      	ldr	r3, [pc, #308]	; (8003a10 <Constant_Voltage+0x474>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	494e      	ldr	r1, [pc, #312]	; (8003a18 <Constant_Voltage+0x47c>)
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fd fc1d 	bl	8001120 <__aeabi_fcmpge>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d043      	beq.n	8003974 <Constant_Voltage+0x3d8>
 80038ec:	4b48      	ldr	r3, [pc, #288]	; (8003a10 <Constant_Voltage+0x474>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4951      	ldr	r1, [pc, #324]	; (8003a38 <Constant_Voltage+0x49c>)
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fc0a 	bl	800110c <__aeabi_fcmple>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d03a      	beq.n	8003974 <Constant_Voltage+0x3d8>
	{ ePS=(-(e-25)/25)+1;
 80038fe:	4b44      	ldr	r3, [pc, #272]	; (8003a10 <Constant_Voltage+0x474>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4945      	ldr	r1, [pc, #276]	; (8003a18 <Constant_Voltage+0x47c>)
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd f94f 	bl	8000ba8 <__aeabi_fsub>
 800390a:	4603      	mov	r3, r0
 800390c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003910:	4941      	ldr	r1, [pc, #260]	; (8003a18 <Constant_Voltage+0x47c>)
 8003912:	4618      	mov	r0, r3
 8003914:	f7fd fb06 	bl	8000f24 <__aeabi_fdiv>
 8003918:	4603      	mov	r3, r0
 800391a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd f944 	bl	8000bac <__addsf3>
 8003924:	4603      	mov	r3, r0
 8003926:	461a      	mov	r2, r3
 8003928:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <Constant_Voltage+0x490>)
 800392a:	601a      	str	r2, [r3, #0]
	   ePM=(e-25)/25;
 800392c:	4b38      	ldr	r3, [pc, #224]	; (8003a10 <Constant_Voltage+0x474>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4939      	ldr	r1, [pc, #228]	; (8003a18 <Constant_Voltage+0x47c>)
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f938 	bl	8000ba8 <__aeabi_fsub>
 8003938:	4603      	mov	r3, r0
 800393a:	4937      	ldr	r1, [pc, #220]	; (8003a18 <Constant_Voltage+0x47c>)
 800393c:	4618      	mov	r0, r3
 800393e:	f7fd faf1 	bl	8000f24 <__aeabi_fdiv>
 8003942:	4603      	mov	r3, r0
 8003944:	461a      	mov	r2, r3
 8003946:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <Constant_Voltage+0x48c>)
 8003948:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 800394a:	4b36      	ldr	r3, [pc, #216]	; (8003a24 <Constant_Voltage+0x488>)
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	4b34      	ldr	r3, [pc, #208]	; (8003a24 <Constant_Voltage+0x488>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a32      	ldr	r2, [pc, #200]	; (8003a20 <Constant_Voltage+0x484>)
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <Constant_Voltage+0x484>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2f      	ldr	r2, [pc, #188]	; (8003a1c <Constant_Voltage+0x480>)
 8003960:	6013      	str	r3, [r2, #0]
 8003962:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <Constant_Voltage+0x480>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a32      	ldr	r2, [pc, #200]	; (8003a30 <Constant_Voltage+0x494>)
 8003968:	6013      	str	r3, [r2, #0]
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <Constant_Voltage+0x494>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a31      	ldr	r2, [pc, #196]	; (8003a34 <Constant_Voltage+0x498>)
 8003970:	6013      	str	r3, [r2, #0]
 8003972:	e08a      	b.n	8003a8a <Constant_Voltage+0x4ee>
	}

	else if(e>=50&&e<=75)
 8003974:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <Constant_Voltage+0x474>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	492f      	ldr	r1, [pc, #188]	; (8003a38 <Constant_Voltage+0x49c>)
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fbd0 	bl	8001120 <__aeabi_fcmpge>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d05c      	beq.n	8003a40 <Constant_Voltage+0x4a4>
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <Constant_Voltage+0x474>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	492c      	ldr	r1, [pc, #176]	; (8003a3c <Constant_Voltage+0x4a0>)
 800398c:	4618      	mov	r0, r3
 800398e:	f7fd fbbd 	bl	800110c <__aeabi_fcmple>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d053      	beq.n	8003a40 <Constant_Voltage+0x4a4>
	{ ePM=(-(e-50)/25)+1;
 8003998:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <Constant_Voltage+0x474>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4926      	ldr	r1, [pc, #152]	; (8003a38 <Constant_Voltage+0x49c>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd f902 	bl	8000ba8 <__aeabi_fsub>
 80039a4:	4603      	mov	r3, r0
 80039a6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80039aa:	491b      	ldr	r1, [pc, #108]	; (8003a18 <Constant_Voltage+0x47c>)
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fd fab9 	bl	8000f24 <__aeabi_fdiv>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7fd f8f7 	bl	8000bac <__addsf3>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <Constant_Voltage+0x48c>)
 80039c4:	601a      	str	r2, [r3, #0]
	   ePB=(e-50)/25;
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <Constant_Voltage+0x474>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	491b      	ldr	r1, [pc, #108]	; (8003a38 <Constant_Voltage+0x49c>)
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f8eb 	bl	8000ba8 <__aeabi_fsub>
 80039d2:	4603      	mov	r3, r0
 80039d4:	4910      	ldr	r1, [pc, #64]	; (8003a18 <Constant_Voltage+0x47c>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd faa4 	bl	8000f24 <__aeabi_fdiv>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <Constant_Voltage+0x488>)
 80039e2:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 80039e4:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <Constant_Voltage+0x490>)
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <Constant_Voltage+0x490>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <Constant_Voltage+0x484>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <Constant_Voltage+0x484>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <Constant_Voltage+0x480>)
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <Constant_Voltage+0x480>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <Constant_Voltage+0x494>)
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <Constant_Voltage+0x494>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0a      	ldr	r2, [pc, #40]	; (8003a34 <Constant_Voltage+0x498>)
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e03d      	b.n	8003a8a <Constant_Voltage+0x4ee>
 8003a0e:	bf00      	nop
 8003a10:	20000d84 	.word	0x20000d84
 8003a14:	c1c80000 	.word	0xc1c80000
 8003a18:	41c80000 	.word	0x41c80000
 8003a1c:	200006b4 	.word	0x200006b4
 8003a20:	20000dd8 	.word	0x20000dd8
 8003a24:	200009fc 	.word	0x200009fc
 8003a28:	20000ac0 	.word	0x20000ac0
 8003a2c:	20000a38 	.word	0x20000a38
 8003a30:	20000dc4 	.word	0x20000dc4
 8003a34:	20000d8c 	.word	0x20000d8c
 8003a38:	42480000 	.word	0x42480000
 8003a3c:	42960000 	.word	0x42960000
	}

	else if(e>=75)
 8003a40:	4b71      	ldr	r3, [pc, #452]	; (8003c08 <Constant_Voltage+0x66c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4971      	ldr	r1, [pc, #452]	; (8003c0c <Constant_Voltage+0x670>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fd fb6a 	bl	8001120 <__aeabi_fcmpge>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d01b      	beq.n	8003a8a <Constant_Voltage+0x4ee>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8003a52:	4b6f      	ldr	r3, [pc, #444]	; (8003c10 <Constant_Voltage+0x674>)
 8003a54:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	4b6e      	ldr	r3, [pc, #440]	; (8003c14 <Constant_Voltage+0x678>)
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	4b6c      	ldr	r3, [pc, #432]	; (8003c14 <Constant_Voltage+0x678>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a6c      	ldr	r2, [pc, #432]	; (8003c18 <Constant_Voltage+0x67c>)
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b6b      	ldr	r3, [pc, #428]	; (8003c18 <Constant_Voltage+0x67c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6b      	ldr	r2, [pc, #428]	; (8003c1c <Constant_Voltage+0x680>)
 8003a70:	6013      	str	r3, [r2, #0]
 8003a72:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <Constant_Voltage+0x680>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6a      	ldr	r2, [pc, #424]	; (8003c20 <Constant_Voltage+0x684>)
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b69      	ldr	r3, [pc, #420]	; (8003c20 <Constant_Voltage+0x684>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a69      	ldr	r2, [pc, #420]	; (8003c24 <Constant_Voltage+0x688>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	4b68      	ldr	r3, [pc, #416]	; (8003c24 <Constant_Voltage+0x688>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a68      	ldr	r2, [pc, #416]	; (8003c28 <Constant_Voltage+0x68c>)
 8003a88:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-30)
 8003a8a:	4b68      	ldr	r3, [pc, #416]	; (8003c2c <Constant_Voltage+0x690>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4968      	ldr	r1, [pc, #416]	; (8003c30 <Constant_Voltage+0x694>)
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7fd fb3b 	bl	800110c <__aeabi_fcmple>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d01b      	beq.n	8003ad4 <Constant_Voltage+0x538>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8003a9c:	4b65      	ldr	r3, [pc, #404]	; (8003c34 <Constant_Voltage+0x698>)
 8003a9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <Constant_Voltage+0x69c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
 8003aac:	4b62      	ldr	r3, [pc, #392]	; (8003c38 <Constant_Voltage+0x69c>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a62      	ldr	r2, [pc, #392]	; (8003c3c <Constant_Voltage+0x6a0>)
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b61      	ldr	r3, [pc, #388]	; (8003c3c <Constant_Voltage+0x6a0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a61      	ldr	r2, [pc, #388]	; (8003c40 <Constant_Voltage+0x6a4>)
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b60      	ldr	r3, [pc, #384]	; (8003c40 <Constant_Voltage+0x6a4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a60      	ldr	r2, [pc, #384]	; (8003c44 <Constant_Voltage+0x6a8>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <Constant_Voltage+0x6a8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5f      	ldr	r2, [pc, #380]	; (8003c48 <Constant_Voltage+0x6ac>)
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <Constant_Voltage+0x6ac>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a5e      	ldr	r2, [pc, #376]	; (8003c4c <Constant_Voltage+0x6b0>)
 8003ad2:	6013      	str	r3, [r2, #0]

	if(d>=-30&&d<=-20)
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <Constant_Voltage+0x690>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4955      	ldr	r1, [pc, #340]	; (8003c30 <Constant_Voltage+0x694>)
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fd fb20 	bl	8001120 <__aeabi_fcmpge>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d043      	beq.n	8003b6e <Constant_Voltage+0x5d2>
 8003ae6:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <Constant_Voltage+0x690>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4959      	ldr	r1, [pc, #356]	; (8003c50 <Constant_Voltage+0x6b4>)
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7fd fb0d 	bl	800110c <__aeabi_fcmple>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03a      	beq.n	8003b6e <Constant_Voltage+0x5d2>
	{ dNB=(-(d+30)/10)+1;
 8003af8:	4b4c      	ldr	r3, [pc, #304]	; (8003c2c <Constant_Voltage+0x690>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4955      	ldr	r1, [pc, #340]	; (8003c54 <Constant_Voltage+0x6b8>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd f854 	bl	8000bac <__addsf3>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b0a:	4953      	ldr	r1, [pc, #332]	; (8003c58 <Constant_Voltage+0x6bc>)
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fa09 	bl	8000f24 <__aeabi_fdiv>
 8003b12:	4603      	mov	r3, r0
 8003b14:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7fd f847 	bl	8000bac <__addsf3>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b44      	ldr	r3, [pc, #272]	; (8003c34 <Constant_Voltage+0x698>)
 8003b24:	601a      	str	r2, [r3, #0]
	   dNM=(d+30)/10;
 8003b26:	4b41      	ldr	r3, [pc, #260]	; (8003c2c <Constant_Voltage+0x690>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	494a      	ldr	r1, [pc, #296]	; (8003c54 <Constant_Voltage+0x6b8>)
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fd f83d 	bl	8000bac <__addsf3>
 8003b32:	4603      	mov	r3, r0
 8003b34:	4948      	ldr	r1, [pc, #288]	; (8003c58 <Constant_Voltage+0x6bc>)
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd f9f4 	bl	8000f24 <__aeabi_fdiv>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b42      	ldr	r3, [pc, #264]	; (8003c4c <Constant_Voltage+0x6b0>)
 8003b42:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <Constant_Voltage+0x69c>)
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	601a      	str	r2, [r3, #0]
 8003b4c:	4b3a      	ldr	r3, [pc, #232]	; (8003c38 <Constant_Voltage+0x69c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a3a      	ldr	r2, [pc, #232]	; (8003c3c <Constant_Voltage+0x6a0>)
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <Constant_Voltage+0x6a0>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <Constant_Voltage+0x6a4>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <Constant_Voltage+0x6a4>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a38      	ldr	r2, [pc, #224]	; (8003c44 <Constant_Voltage+0x6a8>)
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b37      	ldr	r3, [pc, #220]	; (8003c44 <Constant_Voltage+0x6a8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a37      	ldr	r2, [pc, #220]	; (8003c48 <Constant_Voltage+0x6ac>)
 8003b6a:	6013      	str	r3, [r2, #0]
 8003b6c:	e1e1      	b.n	8003f32 <Constant_Voltage+0x996>
	}

	else if(d>=-20&&d<=-10)
 8003b6e:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <Constant_Voltage+0x690>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4937      	ldr	r1, [pc, #220]	; (8003c50 <Constant_Voltage+0x6b4>)
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd fad3 	bl	8001120 <__aeabi_fcmpge>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d071      	beq.n	8003c64 <Constant_Voltage+0x6c8>
 8003b80:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <Constant_Voltage+0x690>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4935      	ldr	r1, [pc, #212]	; (8003c5c <Constant_Voltage+0x6c0>)
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd fac0 	bl	800110c <__aeabi_fcmple>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d068      	beq.n	8003c64 <Constant_Voltage+0x6c8>
	{ dNM=(-(d+20)/10)+1;
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <Constant_Voltage+0x690>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4932      	ldr	r1, [pc, #200]	; (8003c60 <Constant_Voltage+0x6c4>)
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd f807 	bl	8000bac <__addsf3>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ba4:	492c      	ldr	r1, [pc, #176]	; (8003c58 <Constant_Voltage+0x6bc>)
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fd f9bc 	bl	8000f24 <__aeabi_fdiv>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fc fffa 	bl	8000bac <__addsf3>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <Constant_Voltage+0x6b0>)
 8003bbe:	601a      	str	r2, [r3, #0]
	   dNS=(d+20)/10;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <Constant_Voltage+0x690>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4926      	ldr	r1, [pc, #152]	; (8003c60 <Constant_Voltage+0x6c4>)
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7fc fff0 	bl	8000bac <__addsf3>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4922      	ldr	r1, [pc, #136]	; (8003c58 <Constant_Voltage+0x6bc>)
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7fd f9a7 	bl	8000f24 <__aeabi_fdiv>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <Constant_Voltage+0x6ac>)
 8003bdc:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <Constant_Voltage+0x69c>)
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	4b14      	ldr	r3, [pc, #80]	; (8003c38 <Constant_Voltage+0x69c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a14      	ldr	r2, [pc, #80]	; (8003c3c <Constant_Voltage+0x6a0>)
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <Constant_Voltage+0x6a0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a13      	ldr	r2, [pc, #76]	; (8003c40 <Constant_Voltage+0x6a4>)
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b12      	ldr	r3, [pc, #72]	; (8003c40 <Constant_Voltage+0x6a4>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <Constant_Voltage+0x6a8>)
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <Constant_Voltage+0x6a8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <Constant_Voltage+0x698>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e194      	b.n	8003f32 <Constant_Voltage+0x996>
 8003c08:	20000d84 	.word	0x20000d84
 8003c0c:	42960000 	.word	0x42960000
 8003c10:	200009fc 	.word	0x200009fc
 8003c14:	20000ac0 	.word	0x20000ac0
 8003c18:	20000a38 	.word	0x20000a38
 8003c1c:	20000dd8 	.word	0x20000dd8
 8003c20:	200006b4 	.word	0x200006b4
 8003c24:	20000dc4 	.word	0x20000dc4
 8003c28:	20000d8c 	.word	0x20000d8c
 8003c2c:	20000ab8 	.word	0x20000ab8
 8003c30:	c1f00000 	.word	0xc1f00000
 8003c34:	200006dc 	.word	0x200006dc
 8003c38:	20000ac8 	.word	0x20000ac8
 8003c3c:	200006f0 	.word	0x200006f0
 8003c40:	20000da0 	.word	0x20000da0
 8003c44:	20000db8 	.word	0x20000db8
 8003c48:	20000830 	.word	0x20000830
 8003c4c:	20000a34 	.word	0x20000a34
 8003c50:	c1a00000 	.word	0xc1a00000
 8003c54:	41f00000 	.word	0x41f00000
 8003c58:	41200000 	.word	0x41200000
 8003c5c:	c1200000 	.word	0xc1200000
 8003c60:	41a00000 	.word	0x41a00000
	}

	else if(d>=-10&&d<=0)
 8003c64:	4b94      	ldr	r3, [pc, #592]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4994      	ldr	r1, [pc, #592]	; (8003ebc <Constant_Voltage+0x920>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd fa58 	bl	8001120 <__aeabi_fcmpge>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d044      	beq.n	8003d00 <Constant_Voltage+0x764>
 8003c76:	4b90      	ldr	r3, [pc, #576]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fd fa44 	bl	800110c <__aeabi_fcmple>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d03a      	beq.n	8003d00 <Constant_Voltage+0x764>
	{ dNS=(-(d+10)/10)+1;
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	498c      	ldr	r1, [pc, #560]	; (8003ec0 <Constant_Voltage+0x924>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fc ff8b 	bl	8000bac <__addsf3>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c9c:	4988      	ldr	r1, [pc, #544]	; (8003ec0 <Constant_Voltage+0x924>)
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fd f940 	bl	8000f24 <__aeabi_fdiv>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc ff7e 	bl	8000bac <__addsf3>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4b83      	ldr	r3, [pc, #524]	; (8003ec4 <Constant_Voltage+0x928>)
 8003cb6:	601a      	str	r2, [r3, #0]
	   dZ=(d+10)/10;
 8003cb8:	4b7f      	ldr	r3, [pc, #508]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4980      	ldr	r1, [pc, #512]	; (8003ec0 <Constant_Voltage+0x924>)
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fc ff74 	bl	8000bac <__addsf3>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	497e      	ldr	r1, [pc, #504]	; (8003ec0 <Constant_Voltage+0x924>)
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7fd f92b 	bl	8000f24 <__aeabi_fdiv>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b7d      	ldr	r3, [pc, #500]	; (8003ec8 <Constant_Voltage+0x92c>)
 8003cd4:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8003cd6:	4b7d      	ldr	r3, [pc, #500]	; (8003ecc <Constant_Voltage+0x930>)
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	4b7b      	ldr	r3, [pc, #492]	; (8003ecc <Constant_Voltage+0x930>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7b      	ldr	r2, [pc, #492]	; (8003ed0 <Constant_Voltage+0x934>)
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b7a      	ldr	r3, [pc, #488]	; (8003ed0 <Constant_Voltage+0x934>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7a      	ldr	r2, [pc, #488]	; (8003ed4 <Constant_Voltage+0x938>)
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b79      	ldr	r3, [pc, #484]	; (8003ed4 <Constant_Voltage+0x938>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a79      	ldr	r2, [pc, #484]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4b78      	ldr	r3, [pc, #480]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a78      	ldr	r2, [pc, #480]	; (8003edc <Constant_Voltage+0x940>)
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e118      	b.n	8003f32 <Constant_Voltage+0x996>
	}

	else if(d>=0&&d<=10)
 8003d00:	4b6d      	ldr	r3, [pc, #436]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7fd fa09 	bl	8001120 <__aeabi_fcmpge>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d037      	beq.n	8003d84 <Constant_Voltage+0x7e8>
 8003d14:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4969      	ldr	r1, [pc, #420]	; (8003ec0 <Constant_Voltage+0x924>)
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd f9f6 	bl	800110c <__aeabi_fcmple>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d02e      	beq.n	8003d84 <Constant_Voltage+0x7e8>
	{ dZ=-(d/10)+1;
 8003d26:	4b64      	ldr	r3, [pc, #400]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4965      	ldr	r1, [pc, #404]	; (8003ec0 <Constant_Voltage+0x924>)
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fd f8f9 	bl	8000f24 <__aeabi_fdiv>
 8003d32:	4603      	mov	r3, r0
 8003d34:	4619      	mov	r1, r3
 8003d36:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d3a:	f7fc ff35 	bl	8000ba8 <__aeabi_fsub>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	461a      	mov	r2, r3
 8003d42:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <Constant_Voltage+0x92c>)
 8003d44:	601a      	str	r2, [r3, #0]
	   dPS=d/10;
 8003d46:	4b5c      	ldr	r3, [pc, #368]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	495d      	ldr	r1, [pc, #372]	; (8003ec0 <Constant_Voltage+0x924>)
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fd f8e9 	bl	8000f24 <__aeabi_fdiv>
 8003d52:	4603      	mov	r3, r0
 8003d54:	461a      	mov	r2, r3
 8003d56:	4b5f      	ldr	r3, [pc, #380]	; (8003ed4 <Constant_Voltage+0x938>)
 8003d58:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <Constant_Voltage+0x930>)
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <Constant_Voltage+0x930>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5a      	ldr	r2, [pc, #360]	; (8003ed0 <Constant_Voltage+0x934>)
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <Constant_Voltage+0x934>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a55      	ldr	r2, [pc, #340]	; (8003ec4 <Constant_Voltage+0x928>)
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b54      	ldr	r3, [pc, #336]	; (8003ec4 <Constant_Voltage+0x928>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a58      	ldr	r2, [pc, #352]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a57      	ldr	r2, [pc, #348]	; (8003edc <Constant_Voltage+0x940>)
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e0d6      	b.n	8003f32 <Constant_Voltage+0x996>
	}

	else if(d>=10&&d<=20)
 8003d84:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	494d      	ldr	r1, [pc, #308]	; (8003ec0 <Constant_Voltage+0x924>)
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fd f9c8 	bl	8001120 <__aeabi_fcmpge>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d043      	beq.n	8003e1e <Constant_Voltage+0x882>
 8003d96:	4b48      	ldr	r3, [pc, #288]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4951      	ldr	r1, [pc, #324]	; (8003ee0 <Constant_Voltage+0x944>)
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fd f9b5 	bl	800110c <__aeabi_fcmple>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d03a      	beq.n	8003e1e <Constant_Voltage+0x882>
	{ dPS=(-(d-10)/10)+1;
 8003da8:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4944      	ldr	r1, [pc, #272]	; (8003ec0 <Constant_Voltage+0x924>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fc fefa 	bl	8000ba8 <__aeabi_fsub>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003dba:	4941      	ldr	r1, [pc, #260]	; (8003ec0 <Constant_Voltage+0x924>)
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fd f8b1 	bl	8000f24 <__aeabi_fdiv>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc feef 	bl	8000bac <__addsf3>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4b40      	ldr	r3, [pc, #256]	; (8003ed4 <Constant_Voltage+0x938>)
 8003dd4:	601a      	str	r2, [r3, #0]
	   dPM=(d-10)/10;
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4939      	ldr	r1, [pc, #228]	; (8003ec0 <Constant_Voltage+0x924>)
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fc fee3 	bl	8000ba8 <__aeabi_fsub>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4936      	ldr	r1, [pc, #216]	; (8003ec0 <Constant_Voltage+0x924>)
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7fd f89c 	bl	8000f24 <__aeabi_fdiv>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <Constant_Voltage+0x934>)
 8003df2:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8003df4:	4b35      	ldr	r3, [pc, #212]	; (8003ecc <Constant_Voltage+0x930>)
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <Constant_Voltage+0x930>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a31      	ldr	r2, [pc, #196]	; (8003ec8 <Constant_Voltage+0x92c>)
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <Constant_Voltage+0x92c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2e      	ldr	r2, [pc, #184]	; (8003ec4 <Constant_Voltage+0x928>)
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <Constant_Voltage+0x928>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a31      	ldr	r2, [pc, #196]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a30      	ldr	r2, [pc, #192]	; (8003edc <Constant_Voltage+0x940>)
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	e089      	b.n	8003f32 <Constant_Voltage+0x996>
	}

	else if(d>=20&&d<=30)
 8003e1e:	4b26      	ldr	r3, [pc, #152]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	492f      	ldr	r1, [pc, #188]	; (8003ee0 <Constant_Voltage+0x944>)
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fd f97b 	bl	8001120 <__aeabi_fcmpge>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d05b      	beq.n	8003ee8 <Constant_Voltage+0x94c>
 8003e30:	4b21      	ldr	r3, [pc, #132]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	492b      	ldr	r1, [pc, #172]	; (8003ee4 <Constant_Voltage+0x948>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fd f968 	bl	800110c <__aeabi_fcmple>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d052      	beq.n	8003ee8 <Constant_Voltage+0x94c>
	{ dPM=(-(d-20)/10)+1;
 8003e42:	4b1d      	ldr	r3, [pc, #116]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4926      	ldr	r1, [pc, #152]	; (8003ee0 <Constant_Voltage+0x944>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc fead 	bl	8000ba8 <__aeabi_fsub>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e54:	491a      	ldr	r1, [pc, #104]	; (8003ec0 <Constant_Voltage+0x924>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fd f864 	bl	8000f24 <__aeabi_fdiv>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fea2 	bl	8000bac <__addsf3>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <Constant_Voltage+0x934>)
 8003e6e:	601a      	str	r2, [r3, #0]
	   dPB=(d-20)/10;
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <Constant_Voltage+0x91c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	491a      	ldr	r1, [pc, #104]	; (8003ee0 <Constant_Voltage+0x944>)
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7fc fe96 	bl	8000ba8 <__aeabi_fsub>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4910      	ldr	r1, [pc, #64]	; (8003ec0 <Constant_Voltage+0x924>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fd f84f 	bl	8000f24 <__aeabi_fdiv>
 8003e86:	4603      	mov	r3, r0
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <Constant_Voltage+0x930>)
 8003e8c:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <Constant_Voltage+0x938>)
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <Constant_Voltage+0x938>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ec8 <Constant_Voltage+0x92c>)
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ec8 <Constant_Voltage+0x92c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a08      	ldr	r2, [pc, #32]	; (8003ec4 <Constant_Voltage+0x928>)
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <Constant_Voltage+0x928>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <Constant_Voltage+0x93c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <Constant_Voltage+0x940>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e03c      	b.n	8003f32 <Constant_Voltage+0x996>
 8003eb8:	20000ab8 	.word	0x20000ab8
 8003ebc:	c1200000 	.word	0xc1200000
 8003ec0:	41200000 	.word	0x41200000
 8003ec4:	20000830 	.word	0x20000830
 8003ec8:	20000db8 	.word	0x20000db8
 8003ecc:	20000ac8 	.word	0x20000ac8
 8003ed0:	200006f0 	.word	0x200006f0
 8003ed4:	20000da0 	.word	0x20000da0
 8003ed8:	20000a34 	.word	0x20000a34
 8003edc:	200006dc 	.word	0x200006dc
 8003ee0:	41a00000 	.word	0x41a00000
 8003ee4:	41f00000 	.word	0x41f00000
	}

	else if(d>=30)
 8003ee8:	4b8e      	ldr	r3, [pc, #568]	; (8004124 <Constant_Voltage+0xb88>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	498e      	ldr	r1, [pc, #568]	; (8004128 <Constant_Voltage+0xb8c>)
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd f916 	bl	8001120 <__aeabi_fcmpge>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d01b      	beq.n	8003f32 <Constant_Voltage+0x996>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8003efa:	4b8c      	ldr	r3, [pc, #560]	; (800412c <Constant_Voltage+0xb90>)
 8003efc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	4b8b      	ldr	r3, [pc, #556]	; (8004130 <Constant_Voltage+0xb94>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	4b89      	ldr	r3, [pc, #548]	; (8004130 <Constant_Voltage+0xb94>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a89      	ldr	r2, [pc, #548]	; (8004134 <Constant_Voltage+0xb98>)
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b88      	ldr	r3, [pc, #544]	; (8004134 <Constant_Voltage+0xb98>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a88      	ldr	r2, [pc, #544]	; (8004138 <Constant_Voltage+0xb9c>)
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	4b87      	ldr	r3, [pc, #540]	; (8004138 <Constant_Voltage+0xb9c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a87      	ldr	r2, [pc, #540]	; (800413c <Constant_Voltage+0xba0>)
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	4b86      	ldr	r3, [pc, #536]	; (800413c <Constant_Voltage+0xba0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a86      	ldr	r2, [pc, #536]	; (8004140 <Constant_Voltage+0xba4>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	4b85      	ldr	r3, [pc, #532]	; (8004140 <Constant_Voltage+0xba4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a85      	ldr	r2, [pc, #532]	; (8004144 <Constant_Voltage+0xba8>)
 8003f30:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8003f32:	4b7e      	ldr	r3, [pc, #504]	; (800412c <Constant_Voltage+0xb90>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a84      	ldr	r2, [pc, #528]	; (8004148 <Constant_Voltage+0xbac>)
 8003f38:	6013      	str	r3, [r2, #0]
 8003f3a:	4b84      	ldr	r3, [pc, #528]	; (800414c <Constant_Voltage+0xbb0>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <Constant_Voltage+0xb90>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	4610      	mov	r0, r2
 8003f46:	f7fd f8d7 	bl	80010f8 <__aeabi_fcmplt>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d003      	beq.n	8003f58 <Constant_Voltage+0x9bc>
 8003f50:	4b7e      	ldr	r3, [pc, #504]	; (800414c <Constant_Voltage+0xbb0>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a7c      	ldr	r2, [pc, #496]	; (8004148 <Constant_Voltage+0xbac>)
 8003f56:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8003f58:	4b74      	ldr	r3, [pc, #464]	; (800412c <Constant_Voltage+0xb90>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a7c      	ldr	r2, [pc, #496]	; (8004150 <Constant_Voltage+0xbb4>)
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b7c      	ldr	r3, [pc, #496]	; (8004154 <Constant_Voltage+0xbb8>)
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	4b71      	ldr	r3, [pc, #452]	; (800412c <Constant_Voltage+0xb90>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f7fd f8c4 	bl	80010f8 <__aeabi_fcmplt>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <Constant_Voltage+0x9e2>
 8003f76:	4b77      	ldr	r3, [pc, #476]	; (8004154 <Constant_Voltage+0xbb8>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a75      	ldr	r2, [pc, #468]	; (8004150 <Constant_Voltage+0xbb4>)
 8003f7c:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	; (800412c <Constant_Voltage+0xb90>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a75      	ldr	r2, [pc, #468]	; (8004158 <Constant_Voltage+0xbbc>)
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	4b75      	ldr	r3, [pc, #468]	; (800415c <Constant_Voltage+0xbc0>)
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b68      	ldr	r3, [pc, #416]	; (800412c <Constant_Voltage+0xb90>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f7fd f8b1 	bl	80010f8 <__aeabi_fcmplt>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <Constant_Voltage+0xa08>
 8003f9c:	4b6f      	ldr	r3, [pc, #444]	; (800415c <Constant_Voltage+0xbc0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6d      	ldr	r2, [pc, #436]	; (8004158 <Constant_Voltage+0xbbc>)
 8003fa2:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8003fa4:	4b61      	ldr	r3, [pc, #388]	; (800412c <Constant_Voltage+0xb90>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6d      	ldr	r2, [pc, #436]	; (8004160 <Constant_Voltage+0xbc4>)
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	4b6d      	ldr	r3, [pc, #436]	; (8004164 <Constant_Voltage+0xbc8>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	; (800412c <Constant_Voltage+0xb90>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f7fd f89e 	bl	80010f8 <__aeabi_fcmplt>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <Constant_Voltage+0xa2e>
 8003fc2:	4b68      	ldr	r3, [pc, #416]	; (8004164 <Constant_Voltage+0xbc8>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a66      	ldr	r2, [pc, #408]	; (8004160 <Constant_Voltage+0xbc4>)
 8003fc8:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 8003fca:	4b58      	ldr	r3, [pc, #352]	; (800412c <Constant_Voltage+0xb90>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a66      	ldr	r2, [pc, #408]	; (8004168 <Constant_Voltage+0xbcc>)
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b66      	ldr	r3, [pc, #408]	; (800416c <Constant_Voltage+0xbd0>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b55      	ldr	r3, [pc, #340]	; (800412c <Constant_Voltage+0xb90>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f7fd f88b 	bl	80010f8 <__aeabi_fcmplt>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <Constant_Voltage+0xa54>
 8003fe8:	4b60      	ldr	r3, [pc, #384]	; (800416c <Constant_Voltage+0xbd0>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a5e      	ldr	r2, [pc, #376]	; (8004168 <Constant_Voltage+0xbcc>)
 8003fee:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8003ff0:	4b4e      	ldr	r3, [pc, #312]	; (800412c <Constant_Voltage+0xb90>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a5e      	ldr	r2, [pc, #376]	; (8004170 <Constant_Voltage+0xbd4>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b5e      	ldr	r3, [pc, #376]	; (8004174 <Constant_Voltage+0xbd8>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b4b      	ldr	r3, [pc, #300]	; (800412c <Constant_Voltage+0xb90>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fd f878 	bl	80010f8 <__aeabi_fcmplt>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <Constant_Voltage+0xa7a>
 800400e:	4b59      	ldr	r3, [pc, #356]	; (8004174 <Constant_Voltage+0xbd8>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a57      	ldr	r2, [pc, #348]	; (8004170 <Constant_Voltage+0xbd4>)
 8004014:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 8004016:	4b45      	ldr	r3, [pc, #276]	; (800412c <Constant_Voltage+0xb90>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a57      	ldr	r2, [pc, #348]	; (8004178 <Constant_Voltage+0xbdc>)
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b57      	ldr	r3, [pc, #348]	; (800417c <Constant_Voltage+0xbe0>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b42      	ldr	r3, [pc, #264]	; (800412c <Constant_Voltage+0xb90>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4619      	mov	r1, r3
 8004028:	4610      	mov	r0, r2
 800402a:	f7fd f865 	bl	80010f8 <__aeabi_fcmplt>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d003      	beq.n	800403c <Constant_Voltage+0xaa0>
 8004034:	4b51      	ldr	r3, [pc, #324]	; (800417c <Constant_Voltage+0xbe0>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4f      	ldr	r2, [pc, #316]	; (8004178 <Constant_Voltage+0xbdc>)
 800403a:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 800403c:	4b3c      	ldr	r3, [pc, #240]	; (8004130 <Constant_Voltage+0xb94>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a4f      	ldr	r2, [pc, #316]	; (8004180 <Constant_Voltage+0xbe4>)
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b41      	ldr	r3, [pc, #260]	; (800414c <Constant_Voltage+0xbb0>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b39      	ldr	r3, [pc, #228]	; (8004130 <Constant_Voltage+0xb94>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7fd f852 	bl	80010f8 <__aeabi_fcmplt>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <Constant_Voltage+0xac6>
 800405a:	4b3c      	ldr	r3, [pc, #240]	; (800414c <Constant_Voltage+0xbb0>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a48      	ldr	r2, [pc, #288]	; (8004180 <Constant_Voltage+0xbe4>)
 8004060:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8004062:	4b33      	ldr	r3, [pc, #204]	; (8004130 <Constant_Voltage+0xb94>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a47      	ldr	r2, [pc, #284]	; (8004184 <Constant_Voltage+0xbe8>)
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	4b3a      	ldr	r3, [pc, #232]	; (8004154 <Constant_Voltage+0xbb8>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b30      	ldr	r3, [pc, #192]	; (8004130 <Constant_Voltage+0xb94>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	4610      	mov	r0, r2
 8004076:	f7fd f83f 	bl	80010f8 <__aeabi_fcmplt>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <Constant_Voltage+0xaec>
 8004080:	4b34      	ldr	r3, [pc, #208]	; (8004154 <Constant_Voltage+0xbb8>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a3f      	ldr	r2, [pc, #252]	; (8004184 <Constant_Voltage+0xbe8>)
 8004086:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 8004088:	4b29      	ldr	r3, [pc, #164]	; (8004130 <Constant_Voltage+0xb94>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a3e      	ldr	r2, [pc, #248]	; (8004188 <Constant_Voltage+0xbec>)
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b32      	ldr	r3, [pc, #200]	; (800415c <Constant_Voltage+0xbc0>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <Constant_Voltage+0xb94>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4619      	mov	r1, r3
 800409a:	4610      	mov	r0, r2
 800409c:	f7fd f82c 	bl	80010f8 <__aeabi_fcmplt>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <Constant_Voltage+0xb12>
 80040a6:	4b2d      	ldr	r3, [pc, #180]	; (800415c <Constant_Voltage+0xbc0>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a37      	ldr	r2, [pc, #220]	; (8004188 <Constant_Voltage+0xbec>)
 80040ac:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 80040ae:	4b20      	ldr	r3, [pc, #128]	; (8004130 <Constant_Voltage+0xb94>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a36      	ldr	r2, [pc, #216]	; (800418c <Constant_Voltage+0xbf0>)
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <Constant_Voltage+0xbc8>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <Constant_Voltage+0xb94>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fd f819 	bl	80010f8 <__aeabi_fcmplt>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <Constant_Voltage+0xb38>
 80040cc:	4b25      	ldr	r3, [pc, #148]	; (8004164 <Constant_Voltage+0xbc8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a2e      	ldr	r2, [pc, #184]	; (800418c <Constant_Voltage+0xbf0>)
 80040d2:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 80040d4:	4b16      	ldr	r3, [pc, #88]	; (8004130 <Constant_Voltage+0xb94>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	; (8004190 <Constant_Voltage+0xbf4>)
 80040da:	6013      	str	r3, [r2, #0]
 80040dc:	4b23      	ldr	r3, [pc, #140]	; (800416c <Constant_Voltage+0xbd0>)
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <Constant_Voltage+0xb94>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7fd f806 	bl	80010f8 <__aeabi_fcmplt>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <Constant_Voltage+0xb5e>
 80040f2:	4b1e      	ldr	r3, [pc, #120]	; (800416c <Constant_Voltage+0xbd0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a26      	ldr	r2, [pc, #152]	; (8004190 <Constant_Voltage+0xbf4>)
 80040f8:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 80040fa:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <Constant_Voltage+0xb94>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a25      	ldr	r2, [pc, #148]	; (8004194 <Constant_Voltage+0xbf8>)
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	4b1c      	ldr	r3, [pc, #112]	; (8004174 <Constant_Voltage+0xbd8>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <Constant_Voltage+0xb94>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fc fff3 	bl	80010f8 <__aeabi_fcmplt>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d03f      	beq.n	8004198 <Constant_Voltage+0xbfc>
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <Constant_Voltage+0xbd8>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a1d      	ldr	r2, [pc, #116]	; (8004194 <Constant_Voltage+0xbf8>)
 800411e:	6013      	str	r3, [r2, #0]
 8004120:	e03a      	b.n	8004198 <Constant_Voltage+0xbfc>
 8004122:	bf00      	nop
 8004124:	20000ab8 	.word	0x20000ab8
 8004128:	41f00000 	.word	0x41f00000
 800412c:	20000ac8 	.word	0x20000ac8
 8004130:	200006f0 	.word	0x200006f0
 8004134:	20000da0 	.word	0x20000da0
 8004138:	20000db8 	.word	0x20000db8
 800413c:	20000830 	.word	0x20000830
 8004140:	20000a34 	.word	0x20000a34
 8004144:	200006dc 	.word	0x200006dc
 8004148:	20000ddc 	.word	0x20000ddc
 800414c:	20000d8c 	.word	0x20000d8c
 8004150:	20000bbc 	.word	0x20000bbc
 8004154:	20000dc4 	.word	0x20000dc4
 8004158:	200006d0 	.word	0x200006d0
 800415c:	200006b4 	.word	0x200006b4
 8004160:	2000080c 	.word	0x2000080c
 8004164:	20000dd8 	.word	0x20000dd8
 8004168:	20000dcc 	.word	0x20000dcc
 800416c:	20000a38 	.word	0x20000a38
 8004170:	200007f8 	.word	0x200007f8
 8004174:	20000ac0 	.word	0x20000ac0
 8004178:	20000aa8 	.word	0x20000aa8
 800417c:	200009fc 	.word	0x200009fc
 8004180:	20000a0c 	.word	0x20000a0c
 8004184:	20000700 	.word	0x20000700
 8004188:	200009f0 	.word	0x200009f0
 800418c:	20000bb8 	.word	0x20000bb8
 8004190:	20000dac 	.word	0x20000dac
 8004194:	20000de0 	.word	0x20000de0
	r14=dPM; if(ePB<dPM) r14=ePB;		//r14=max(dPM,ePB);
 8004198:	4b8d      	ldr	r3, [pc, #564]	; (80043d0 <Constant_Voltage+0xe34>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a8d      	ldr	r2, [pc, #564]	; (80043d4 <Constant_Voltage+0xe38>)
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	4b8d      	ldr	r3, [pc, #564]	; (80043d8 <Constant_Voltage+0xe3c>)
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b8a      	ldr	r3, [pc, #552]	; (80043d0 <Constant_Voltage+0xe34>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4619      	mov	r1, r3
 80041aa:	4610      	mov	r0, r2
 80041ac:	f7fc ffa4 	bl	80010f8 <__aeabi_fcmplt>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <Constant_Voltage+0xc22>
 80041b6:	4b88      	ldr	r3, [pc, #544]	; (80043d8 <Constant_Voltage+0xe3c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a86      	ldr	r2, [pc, #536]	; (80043d4 <Constant_Voltage+0xe38>)
 80041bc:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 80041be:	4b87      	ldr	r3, [pc, #540]	; (80043dc <Constant_Voltage+0xe40>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a87      	ldr	r2, [pc, #540]	; (80043e0 <Constant_Voltage+0xe44>)
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b87      	ldr	r3, [pc, #540]	; (80043e4 <Constant_Voltage+0xe48>)
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	4b84      	ldr	r3, [pc, #528]	; (80043dc <Constant_Voltage+0xe40>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4619      	mov	r1, r3
 80041d0:	4610      	mov	r0, r2
 80041d2:	f7fc ff91 	bl	80010f8 <__aeabi_fcmplt>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <Constant_Voltage+0xc48>
 80041dc:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <Constant_Voltage+0xe48>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a7f      	ldr	r2, [pc, #508]	; (80043e0 <Constant_Voltage+0xe44>)
 80041e2:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 80041e4:	4b7d      	ldr	r3, [pc, #500]	; (80043dc <Constant_Voltage+0xe40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a7f      	ldr	r2, [pc, #508]	; (80043e8 <Constant_Voltage+0xe4c>)
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b7f      	ldr	r3, [pc, #508]	; (80043ec <Constant_Voltage+0xe50>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b7a      	ldr	r3, [pc, #488]	; (80043dc <Constant_Voltage+0xe40>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4619      	mov	r1, r3
 80041f6:	4610      	mov	r0, r2
 80041f8:	f7fc ff7e 	bl	80010f8 <__aeabi_fcmplt>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <Constant_Voltage+0xc6e>
 8004202:	4b7a      	ldr	r3, [pc, #488]	; (80043ec <Constant_Voltage+0xe50>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a78      	ldr	r2, [pc, #480]	; (80043e8 <Constant_Voltage+0xe4c>)
 8004208:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 800420a:	4b74      	ldr	r3, [pc, #464]	; (80043dc <Constant_Voltage+0xe40>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a78      	ldr	r2, [pc, #480]	; (80043f0 <Constant_Voltage+0xe54>)
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <Constant_Voltage+0xe58>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b71      	ldr	r3, [pc, #452]	; (80043dc <Constant_Voltage+0xe40>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4619      	mov	r1, r3
 800421c:	4610      	mov	r0, r2
 800421e:	f7fc ff6b 	bl	80010f8 <__aeabi_fcmplt>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <Constant_Voltage+0xc94>
 8004228:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <Constant_Voltage+0xe58>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a70      	ldr	r2, [pc, #448]	; (80043f0 <Constant_Voltage+0xe54>)
 800422e:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 8004230:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <Constant_Voltage+0xe40>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a70      	ldr	r2, [pc, #448]	; (80043f8 <Constant_Voltage+0xe5c>)
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4b70      	ldr	r3, [pc, #448]	; (80043fc <Constant_Voltage+0xe60>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b67      	ldr	r3, [pc, #412]	; (80043dc <Constant_Voltage+0xe40>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	4610      	mov	r0, r2
 8004244:	f7fc ff58 	bl	80010f8 <__aeabi_fcmplt>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <Constant_Voltage+0xcba>
 800424e:	4b6b      	ldr	r3, [pc, #428]	; (80043fc <Constant_Voltage+0xe60>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a69      	ldr	r2, [pc, #420]	; (80043f8 <Constant_Voltage+0xe5c>)
 8004254:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 8004256:	4b61      	ldr	r3, [pc, #388]	; (80043dc <Constant_Voltage+0xe40>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a69      	ldr	r2, [pc, #420]	; (8004400 <Constant_Voltage+0xe64>)
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	4b69      	ldr	r3, [pc, #420]	; (8004404 <Constant_Voltage+0xe68>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b5e      	ldr	r3, [pc, #376]	; (80043dc <Constant_Voltage+0xe40>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4619      	mov	r1, r3
 8004268:	4610      	mov	r0, r2
 800426a:	f7fc ff45 	bl	80010f8 <__aeabi_fcmplt>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <Constant_Voltage+0xce0>
 8004274:	4b63      	ldr	r3, [pc, #396]	; (8004404 <Constant_Voltage+0xe68>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a61      	ldr	r2, [pc, #388]	; (8004400 <Constant_Voltage+0xe64>)
 800427a:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 800427c:	4b57      	ldr	r3, [pc, #348]	; (80043dc <Constant_Voltage+0xe40>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a61      	ldr	r2, [pc, #388]	; (8004408 <Constant_Voltage+0xe6c>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <Constant_Voltage+0xe70>)
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b54      	ldr	r3, [pc, #336]	; (80043dc <Constant_Voltage+0xe40>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f7fc ff32 	bl	80010f8 <__aeabi_fcmplt>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <Constant_Voltage+0xd06>
 800429a:	4b5c      	ldr	r3, [pc, #368]	; (800440c <Constant_Voltage+0xe70>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a5a      	ldr	r2, [pc, #360]	; (8004408 <Constant_Voltage+0xe6c>)
 80042a0:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 80042a2:	4b4e      	ldr	r3, [pc, #312]	; (80043dc <Constant_Voltage+0xe40>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a5a      	ldr	r2, [pc, #360]	; (8004410 <Constant_Voltage+0xe74>)
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	4b4b      	ldr	r3, [pc, #300]	; (80043d8 <Constant_Voltage+0xe3c>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b4b      	ldr	r3, [pc, #300]	; (80043dc <Constant_Voltage+0xe40>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fc ff1f 	bl	80010f8 <__aeabi_fcmplt>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <Constant_Voltage+0xd2c>
 80042c0:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <Constant_Voltage+0xe3c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a52      	ldr	r2, [pc, #328]	; (8004410 <Constant_Voltage+0xe74>)
 80042c6:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 80042c8:	4b52      	ldr	r3, [pc, #328]	; (8004414 <Constant_Voltage+0xe78>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a52      	ldr	r2, [pc, #328]	; (8004418 <Constant_Voltage+0xe7c>)
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b44      	ldr	r3, [pc, #272]	; (80043e4 <Constant_Voltage+0xe48>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b4f      	ldr	r3, [pc, #316]	; (8004414 <Constant_Voltage+0xe78>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4619      	mov	r1, r3
 80042da:	4610      	mov	r0, r2
 80042dc:	f7fc ff0c 	bl	80010f8 <__aeabi_fcmplt>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <Constant_Voltage+0xd52>
 80042e6:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <Constant_Voltage+0xe48>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a4b      	ldr	r2, [pc, #300]	; (8004418 <Constant_Voltage+0xe7c>)
 80042ec:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 80042ee:	4b49      	ldr	r3, [pc, #292]	; (8004414 <Constant_Voltage+0xe78>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a4a      	ldr	r2, [pc, #296]	; (800441c <Constant_Voltage+0xe80>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	4b3d      	ldr	r3, [pc, #244]	; (80043ec <Constant_Voltage+0xe50>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b46      	ldr	r3, [pc, #280]	; (8004414 <Constant_Voltage+0xe78>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f7fc fef9 	bl	80010f8 <__aeabi_fcmplt>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d003      	beq.n	8004314 <Constant_Voltage+0xd78>
 800430c:	4b37      	ldr	r3, [pc, #220]	; (80043ec <Constant_Voltage+0xe50>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a42      	ldr	r2, [pc, #264]	; (800441c <Constant_Voltage+0xe80>)
 8004312:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 8004314:	4b3f      	ldr	r3, [pc, #252]	; (8004414 <Constant_Voltage+0xe78>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a41      	ldr	r2, [pc, #260]	; (8004420 <Constant_Voltage+0xe84>)
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b35      	ldr	r3, [pc, #212]	; (80043f4 <Constant_Voltage+0xe58>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <Constant_Voltage+0xe78>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f7fc fee6 	bl	80010f8 <__aeabi_fcmplt>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <Constant_Voltage+0xd9e>
 8004332:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <Constant_Voltage+0xe58>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a3a      	ldr	r2, [pc, #232]	; (8004420 <Constant_Voltage+0xe84>)
 8004338:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 800433a:	4b36      	ldr	r3, [pc, #216]	; (8004414 <Constant_Voltage+0xe78>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a39      	ldr	r2, [pc, #228]	; (8004424 <Constant_Voltage+0xe88>)
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <Constant_Voltage+0xe60>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	4b33      	ldr	r3, [pc, #204]	; (8004414 <Constant_Voltage+0xe78>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fc fed3 	bl	80010f8 <__aeabi_fcmplt>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <Constant_Voltage+0xdc4>
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <Constant_Voltage+0xe60>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a31      	ldr	r2, [pc, #196]	; (8004424 <Constant_Voltage+0xe88>)
 800435e:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 8004360:	4b2c      	ldr	r3, [pc, #176]	; (8004414 <Constant_Voltage+0xe78>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a30      	ldr	r2, [pc, #192]	; (8004428 <Constant_Voltage+0xe8c>)
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b26      	ldr	r3, [pc, #152]	; (8004404 <Constant_Voltage+0xe68>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	4b29      	ldr	r3, [pc, #164]	; (8004414 <Constant_Voltage+0xe78>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	4610      	mov	r0, r2
 8004374:	f7fc fec0 	bl	80010f8 <__aeabi_fcmplt>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <Constant_Voltage+0xdea>
 800437e:	4b21      	ldr	r3, [pc, #132]	; (8004404 <Constant_Voltage+0xe68>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a29      	ldr	r2, [pc, #164]	; (8004428 <Constant_Voltage+0xe8c>)
 8004384:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 8004386:	4b23      	ldr	r3, [pc, #140]	; (8004414 <Constant_Voltage+0xe78>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a28      	ldr	r2, [pc, #160]	; (800442c <Constant_Voltage+0xe90>)
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b1f      	ldr	r3, [pc, #124]	; (800440c <Constant_Voltage+0xe70>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	4b20      	ldr	r3, [pc, #128]	; (8004414 <Constant_Voltage+0xe78>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7fc fead 	bl	80010f8 <__aeabi_fcmplt>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <Constant_Voltage+0xe10>
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <Constant_Voltage+0xe70>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a20      	ldr	r2, [pc, #128]	; (800442c <Constant_Voltage+0xe90>)
 80043aa:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <Constant_Voltage+0xe78>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a1f      	ldr	r2, [pc, #124]	; (8004430 <Constant_Voltage+0xe94>)
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b08      	ldr	r3, [pc, #32]	; (80043d8 <Constant_Voltage+0xe3c>)
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	4b16      	ldr	r3, [pc, #88]	; (8004414 <Constant_Voltage+0xe78>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4619      	mov	r1, r3
 80043be:	4610      	mov	r0, r2
 80043c0:	f7fc fe9a 	bl	80010f8 <__aeabi_fcmplt>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d036      	beq.n	8004438 <Constant_Voltage+0xe9c>
 80043ca:	4b03      	ldr	r3, [pc, #12]	; (80043d8 <Constant_Voltage+0xe3c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e031      	b.n	8004434 <Constant_Voltage+0xe98>
 80043d0:	200006f0 	.word	0x200006f0
 80043d4:	20000678 	.word	0x20000678
 80043d8:	200009fc 	.word	0x200009fc
 80043dc:	20000da0 	.word	0x20000da0
 80043e0:	20000db0 	.word	0x20000db0
 80043e4:	20000d8c 	.word	0x20000d8c
 80043e8:	20000abc 	.word	0x20000abc
 80043ec:	20000dc4 	.word	0x20000dc4
 80043f0:	200007e8 	.word	0x200007e8
 80043f4:	200006b4 	.word	0x200006b4
 80043f8:	20000a3c 	.word	0x20000a3c
 80043fc:	20000dd8 	.word	0x20000dd8
 8004400:	20000da8 	.word	0x20000da8
 8004404:	20000a38 	.word	0x20000a38
 8004408:	20000a04 	.word	0x20000a04
 800440c:	20000ac0 	.word	0x20000ac0
 8004410:	20000800 	.word	0x20000800
 8004414:	20000db8 	.word	0x20000db8
 8004418:	20000ca8 	.word	0x20000ca8
 800441c:	20000dc0 	.word	0x20000dc0
 8004420:	20000dd4 	.word	0x20000dd4
 8004424:	200006b0 	.word	0x200006b0
 8004428:	200007d8 	.word	0x200007d8
 800442c:	20000a20 	.word	0x20000a20
 8004430:	20000684 	.word	0x20000684
 8004434:	4a8d      	ldr	r2, [pc, #564]	; (800466c <Constant_Voltage+0x10d0>)
 8004436:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 8004438:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <Constant_Voltage+0x10d4>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a8d      	ldr	r2, [pc, #564]	; (8004674 <Constant_Voltage+0x10d8>)
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b8d      	ldr	r3, [pc, #564]	; (8004678 <Constant_Voltage+0x10dc>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b8a      	ldr	r3, [pc, #552]	; (8004670 <Constant_Voltage+0x10d4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fc fe54 	bl	80010f8 <__aeabi_fcmplt>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <Constant_Voltage+0xec2>
 8004456:	4b88      	ldr	r3, [pc, #544]	; (8004678 <Constant_Voltage+0x10dc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a86      	ldr	r2, [pc, #536]	; (8004674 <Constant_Voltage+0x10d8>)
 800445c:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 800445e:	4b84      	ldr	r3, [pc, #528]	; (8004670 <Constant_Voltage+0x10d4>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a86      	ldr	r2, [pc, #536]	; (800467c <Constant_Voltage+0x10e0>)
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b86      	ldr	r3, [pc, #536]	; (8004680 <Constant_Voltage+0x10e4>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b81      	ldr	r3, [pc, #516]	; (8004670 <Constant_Voltage+0x10d4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fc fe41 	bl	80010f8 <__aeabi_fcmplt>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <Constant_Voltage+0xee8>
 800447c:	4b80      	ldr	r3, [pc, #512]	; (8004680 <Constant_Voltage+0x10e4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a7e      	ldr	r2, [pc, #504]	; (800467c <Constant_Voltage+0x10e0>)
 8004482:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 8004484:	4b7a      	ldr	r3, [pc, #488]	; (8004670 <Constant_Voltage+0x10d4>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a7e      	ldr	r2, [pc, #504]	; (8004684 <Constant_Voltage+0x10e8>)
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b7e      	ldr	r3, [pc, #504]	; (8004688 <Constant_Voltage+0x10ec>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b77      	ldr	r3, [pc, #476]	; (8004670 <Constant_Voltage+0x10d4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7fc fe2e 	bl	80010f8 <__aeabi_fcmplt>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d003      	beq.n	80044aa <Constant_Voltage+0xf0e>
 80044a2:	4b79      	ldr	r3, [pc, #484]	; (8004688 <Constant_Voltage+0x10ec>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a77      	ldr	r2, [pc, #476]	; (8004684 <Constant_Voltage+0x10e8>)
 80044a8:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 80044aa:	4b71      	ldr	r3, [pc, #452]	; (8004670 <Constant_Voltage+0x10d4>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a77      	ldr	r2, [pc, #476]	; (800468c <Constant_Voltage+0x10f0>)
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b77      	ldr	r3, [pc, #476]	; (8004690 <Constant_Voltage+0x10f4>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b6e      	ldr	r3, [pc, #440]	; (8004670 <Constant_Voltage+0x10d4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fc fe1b 	bl	80010f8 <__aeabi_fcmplt>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d003      	beq.n	80044d0 <Constant_Voltage+0xf34>
 80044c8:	4b71      	ldr	r3, [pc, #452]	; (8004690 <Constant_Voltage+0x10f4>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6f      	ldr	r2, [pc, #444]	; (800468c <Constant_Voltage+0x10f0>)
 80044ce:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 80044d0:	4b67      	ldr	r3, [pc, #412]	; (8004670 <Constant_Voltage+0x10d4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6f      	ldr	r2, [pc, #444]	; (8004694 <Constant_Voltage+0x10f8>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	4b6f      	ldr	r3, [pc, #444]	; (8004698 <Constant_Voltage+0x10fc>)
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	4b64      	ldr	r3, [pc, #400]	; (8004670 <Constant_Voltage+0x10d4>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7fc fe08 	bl	80010f8 <__aeabi_fcmplt>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d003      	beq.n	80044f6 <Constant_Voltage+0xf5a>
 80044ee:	4b6a      	ldr	r3, [pc, #424]	; (8004698 <Constant_Voltage+0x10fc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a68      	ldr	r2, [pc, #416]	; (8004694 <Constant_Voltage+0x10f8>)
 80044f4:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 80044f6:	4b5e      	ldr	r3, [pc, #376]	; (8004670 <Constant_Voltage+0x10d4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a68      	ldr	r2, [pc, #416]	; (800469c <Constant_Voltage+0x1100>)
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b68      	ldr	r3, [pc, #416]	; (80046a0 <Constant_Voltage+0x1104>)
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <Constant_Voltage+0x10d4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fc fdf5 	bl	80010f8 <__aeabi_fcmplt>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <Constant_Voltage+0xf80>
 8004514:	4b62      	ldr	r3, [pc, #392]	; (80046a0 <Constant_Voltage+0x1104>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a60      	ldr	r2, [pc, #384]	; (800469c <Constant_Voltage+0x1100>)
 800451a:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 800451c:	4b54      	ldr	r3, [pc, #336]	; (8004670 <Constant_Voltage+0x10d4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a60      	ldr	r2, [pc, #384]	; (80046a4 <Constant_Voltage+0x1108>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b60      	ldr	r3, [pc, #384]	; (80046a8 <Constant_Voltage+0x110c>)
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	4b51      	ldr	r3, [pc, #324]	; (8004670 <Constant_Voltage+0x10d4>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	4610      	mov	r0, r2
 8004530:	f7fc fde2 	bl	80010f8 <__aeabi_fcmplt>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <Constant_Voltage+0xfa6>
 800453a:	4b5b      	ldr	r3, [pc, #364]	; (80046a8 <Constant_Voltage+0x110c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a59      	ldr	r2, [pc, #356]	; (80046a4 <Constant_Voltage+0x1108>)
 8004540:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 8004542:	4b5a      	ldr	r3, [pc, #360]	; (80046ac <Constant_Voltage+0x1110>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a5a      	ldr	r2, [pc, #360]	; (80046b0 <Constant_Voltage+0x1114>)
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	4b4b      	ldr	r3, [pc, #300]	; (8004678 <Constant_Voltage+0x10dc>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b57      	ldr	r3, [pc, #348]	; (80046ac <Constant_Voltage+0x1110>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4619      	mov	r1, r3
 8004554:	4610      	mov	r0, r2
 8004556:	f7fc fdcf 	bl	80010f8 <__aeabi_fcmplt>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <Constant_Voltage+0xfcc>
 8004560:	4b45      	ldr	r3, [pc, #276]	; (8004678 <Constant_Voltage+0x10dc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a52      	ldr	r2, [pc, #328]	; (80046b0 <Constant_Voltage+0x1114>)
 8004566:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <Constant_Voltage+0x1110>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a51      	ldr	r2, [pc, #324]	; (80046b4 <Constant_Voltage+0x1118>)
 800456e:	6013      	str	r3, [r2, #0]
 8004570:	4b43      	ldr	r3, [pc, #268]	; (8004680 <Constant_Voltage+0x10e4>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b4d      	ldr	r3, [pc, #308]	; (80046ac <Constant_Voltage+0x1110>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	4610      	mov	r0, r2
 800457c:	f7fc fdbc 	bl	80010f8 <__aeabi_fcmplt>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <Constant_Voltage+0xff2>
 8004586:	4b3e      	ldr	r3, [pc, #248]	; (8004680 <Constant_Voltage+0x10e4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a4a      	ldr	r2, [pc, #296]	; (80046b4 <Constant_Voltage+0x1118>)
 800458c:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <Constant_Voltage+0x1110>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a49      	ldr	r2, [pc, #292]	; (80046b8 <Constant_Voltage+0x111c>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b3c      	ldr	r3, [pc, #240]	; (8004688 <Constant_Voltage+0x10ec>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	4b44      	ldr	r3, [pc, #272]	; (80046ac <Constant_Voltage+0x1110>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	4610      	mov	r0, r2
 80045a2:	f7fc fda9 	bl	80010f8 <__aeabi_fcmplt>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <Constant_Voltage+0x1018>
 80045ac:	4b36      	ldr	r3, [pc, #216]	; (8004688 <Constant_Voltage+0x10ec>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a41      	ldr	r2, [pc, #260]	; (80046b8 <Constant_Voltage+0x111c>)
 80045b2:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 80045b4:	4b3d      	ldr	r3, [pc, #244]	; (80046ac <Constant_Voltage+0x1110>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a40      	ldr	r2, [pc, #256]	; (80046bc <Constant_Voltage+0x1120>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <Constant_Voltage+0x10f4>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b3a      	ldr	r3, [pc, #232]	; (80046ac <Constant_Voltage+0x1110>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4619      	mov	r1, r3
 80045c6:	4610      	mov	r0, r2
 80045c8:	f7fc fd96 	bl	80010f8 <__aeabi_fcmplt>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <Constant_Voltage+0x103e>
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <Constant_Voltage+0x10f4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a39      	ldr	r2, [pc, #228]	; (80046bc <Constant_Voltage+0x1120>)
 80045d8:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 80045da:	4b34      	ldr	r3, [pc, #208]	; (80046ac <Constant_Voltage+0x1110>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a38      	ldr	r2, [pc, #224]	; (80046c0 <Constant_Voltage+0x1124>)
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <Constant_Voltage+0x10fc>)
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b31      	ldr	r3, [pc, #196]	; (80046ac <Constant_Voltage+0x1110>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4619      	mov	r1, r3
 80045ec:	4610      	mov	r0, r2
 80045ee:	f7fc fd83 	bl	80010f8 <__aeabi_fcmplt>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <Constant_Voltage+0x1064>
 80045f8:	4b27      	ldr	r3, [pc, #156]	; (8004698 <Constant_Voltage+0x10fc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a30      	ldr	r2, [pc, #192]	; (80046c0 <Constant_Voltage+0x1124>)
 80045fe:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 8004600:	4b2a      	ldr	r3, [pc, #168]	; (80046ac <Constant_Voltage+0x1110>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2f      	ldr	r2, [pc, #188]	; (80046c4 <Constant_Voltage+0x1128>)
 8004606:	6013      	str	r3, [r2, #0]
 8004608:	4b25      	ldr	r3, [pc, #148]	; (80046a0 <Constant_Voltage+0x1104>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	4b27      	ldr	r3, [pc, #156]	; (80046ac <Constant_Voltage+0x1110>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	4610      	mov	r0, r2
 8004614:	f7fc fd70 	bl	80010f8 <__aeabi_fcmplt>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <Constant_Voltage+0x108a>
 800461e:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <Constant_Voltage+0x1104>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a28      	ldr	r2, [pc, #160]	; (80046c4 <Constant_Voltage+0x1128>)
 8004624:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 8004626:	4b21      	ldr	r3, [pc, #132]	; (80046ac <Constant_Voltage+0x1110>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <Constant_Voltage+0x112c>)
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b1e      	ldr	r3, [pc, #120]	; (80046a8 <Constant_Voltage+0x110c>)
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b1e      	ldr	r3, [pc, #120]	; (80046ac <Constant_Voltage+0x1110>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4619      	mov	r1, r3
 8004638:	4610      	mov	r0, r2
 800463a:	f7fc fd5d 	bl	80010f8 <__aeabi_fcmplt>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d003      	beq.n	800464c <Constant_Voltage+0x10b0>
 8004644:	4b18      	ldr	r3, [pc, #96]	; (80046a8 <Constant_Voltage+0x110c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <Constant_Voltage+0x112c>)
 800464a:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 800464c:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <Constant_Voltage+0x1130>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1f      	ldr	r2, [pc, #124]	; (80046d0 <Constant_Voltage+0x1134>)
 8004652:	6013      	str	r3, [r2, #0]
 8004654:	4b08      	ldr	r3, [pc, #32]	; (8004678 <Constant_Voltage+0x10dc>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	4b1c      	ldr	r3, [pc, #112]	; (80046cc <Constant_Voltage+0x1130>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	4610      	mov	r0, r2
 8004660:	f7fc fd4a 	bl	80010f8 <__aeabi_fcmplt>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d038      	beq.n	80046dc <Constant_Voltage+0x1140>
 800466a:	e033      	b.n	80046d4 <Constant_Voltage+0x1138>
 800466c:	20000684 	.word	0x20000684
 8004670:	20000830 	.word	0x20000830
 8004674:	200006a8 	.word	0x200006a8
 8004678:	20000d8c 	.word	0x20000d8c
 800467c:	20000ba4 	.word	0x20000ba4
 8004680:	20000dc4 	.word	0x20000dc4
 8004684:	200007f0 	.word	0x200007f0
 8004688:	200006b4 	.word	0x200006b4
 800468c:	20000834 	.word	0x20000834
 8004690:	20000dd8 	.word	0x20000dd8
 8004694:	20000a2c 	.word	0x20000a2c
 8004698:	20000a38 	.word	0x20000a38
 800469c:	20000ba0 	.word	0x20000ba0
 80046a0:	20000ac0 	.word	0x20000ac0
 80046a4:	20000ca4 	.word	0x20000ca4
 80046a8:	200009fc 	.word	0x200009fc
 80046ac:	20000a34 	.word	0x20000a34
 80046b0:	200006d4 	.word	0x200006d4
 80046b4:	20000914 	.word	0x20000914
 80046b8:	20000a00 	.word	0x20000a00
 80046bc:	20000d9c 	.word	0x20000d9c
 80046c0:	20000aa0 	.word	0x20000aa0
 80046c4:	200006c0 	.word	0x200006c0
 80046c8:	200006c8 	.word	0x200006c8
 80046cc:	200006dc 	.word	0x200006dc
 80046d0:	20000da4 	.word	0x20000da4
 80046d4:	4b90      	ldr	r3, [pc, #576]	; (8004918 <Constant_Voltage+0x137c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a90      	ldr	r2, [pc, #576]	; (800491c <Constant_Voltage+0x1380>)
 80046da:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 80046dc:	4b90      	ldr	r3, [pc, #576]	; (8004920 <Constant_Voltage+0x1384>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a90      	ldr	r2, [pc, #576]	; (8004924 <Constant_Voltage+0x1388>)
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	4b90      	ldr	r3, [pc, #576]	; (8004928 <Constant_Voltage+0x138c>)
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	4b8d      	ldr	r3, [pc, #564]	; (8004920 <Constant_Voltage+0x1384>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f7fc fd02 	bl	80010f8 <__aeabi_fcmplt>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <Constant_Voltage+0x1166>
 80046fa:	4b8b      	ldr	r3, [pc, #556]	; (8004928 <Constant_Voltage+0x138c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a89      	ldr	r2, [pc, #548]	; (8004924 <Constant_Voltage+0x1388>)
 8004700:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 8004702:	4b87      	ldr	r3, [pc, #540]	; (8004920 <Constant_Voltage+0x1384>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a89      	ldr	r2, [pc, #548]	; (800492c <Constant_Voltage+0x1390>)
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <Constant_Voltage+0x1394>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b84      	ldr	r3, [pc, #528]	; (8004920 <Constant_Voltage+0x1384>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f7fc fcef 	bl	80010f8 <__aeabi_fcmplt>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <Constant_Voltage+0x118c>
 8004720:	4b83      	ldr	r3, [pc, #524]	; (8004930 <Constant_Voltage+0x1394>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a81      	ldr	r2, [pc, #516]	; (800492c <Constant_Voltage+0x1390>)
 8004726:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 8004728:	4b7d      	ldr	r3, [pc, #500]	; (8004920 <Constant_Voltage+0x1384>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a81      	ldr	r2, [pc, #516]	; (8004934 <Constant_Voltage+0x1398>)
 800472e:	6013      	str	r3, [r2, #0]
 8004730:	4b81      	ldr	r3, [pc, #516]	; (8004938 <Constant_Voltage+0x139c>)
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	4b7a      	ldr	r3, [pc, #488]	; (8004920 <Constant_Voltage+0x1384>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7fc fcdc 	bl	80010f8 <__aeabi_fcmplt>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <Constant_Voltage+0x11b2>
 8004746:	4b7c      	ldr	r3, [pc, #496]	; (8004938 <Constant_Voltage+0x139c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a7a      	ldr	r2, [pc, #488]	; (8004934 <Constant_Voltage+0x1398>)
 800474c:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 800474e:	4b74      	ldr	r3, [pc, #464]	; (8004920 <Constant_Voltage+0x1384>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a7a      	ldr	r2, [pc, #488]	; (800493c <Constant_Voltage+0x13a0>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4b7a      	ldr	r3, [pc, #488]	; (8004940 <Constant_Voltage+0x13a4>)
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	4b71      	ldr	r3, [pc, #452]	; (8004920 <Constant_Voltage+0x1384>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	4610      	mov	r0, r2
 8004762:	f7fc fcc9 	bl	80010f8 <__aeabi_fcmplt>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <Constant_Voltage+0x11d8>
 800476c:	4b74      	ldr	r3, [pc, #464]	; (8004940 <Constant_Voltage+0x13a4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a72      	ldr	r2, [pc, #456]	; (800493c <Constant_Voltage+0x13a0>)
 8004772:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 8004774:	4b6a      	ldr	r3, [pc, #424]	; (8004920 <Constant_Voltage+0x1384>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a72      	ldr	r2, [pc, #456]	; (8004944 <Constant_Voltage+0x13a8>)
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	4b72      	ldr	r3, [pc, #456]	; (8004948 <Constant_Voltage+0x13ac>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b67      	ldr	r3, [pc, #412]	; (8004920 <Constant_Voltage+0x1384>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fc fcb6 	bl	80010f8 <__aeabi_fcmplt>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <Constant_Voltage+0x11fe>
 8004792:	4b6d      	ldr	r3, [pc, #436]	; (8004948 <Constant_Voltage+0x13ac>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6b      	ldr	r2, [pc, #428]	; (8004944 <Constant_Voltage+0x13a8>)
 8004798:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 800479a:	4b61      	ldr	r3, [pc, #388]	; (8004920 <Constant_Voltage+0x1384>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6b      	ldr	r2, [pc, #428]	; (800494c <Constant_Voltage+0x13b0>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	4b6b      	ldr	r3, [pc, #428]	; (8004950 <Constant_Voltage+0x13b4>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b5e      	ldr	r3, [pc, #376]	; (8004920 <Constant_Voltage+0x1384>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4610      	mov	r0, r2
 80047ae:	f7fc fca3 	bl	80010f8 <__aeabi_fcmplt>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <Constant_Voltage+0x1224>
 80047b8:	4b65      	ldr	r3, [pc, #404]	; (8004950 <Constant_Voltage+0x13b4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a63      	ldr	r2, [pc, #396]	; (800494c <Constant_Voltage+0x13b0>)
 80047be:	6013      	str	r3, [r2, #0]

	///////////////////////////DEFUZZIFIKASI///////////////////////

	A=(r1*oZ)+(r2*oPS)+(r3*oPM)+(r4*oPB)+(r5*oPH)+(r6*oPH)+(r7*oPH);
 80047c0:	4b64      	ldr	r3, [pc, #400]	; (8004954 <Constant_Voltage+0x13b8>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	4b64      	ldr	r3, [pc, #400]	; (8004958 <Constant_Voltage+0x13bc>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f7fc faf6 	bl	8000dbc <__aeabi_fmul>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461c      	mov	r4, r3
 80047d4:	4b61      	ldr	r3, [pc, #388]	; (800495c <Constant_Voltage+0x13c0>)
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b61      	ldr	r3, [pc, #388]	; (8004960 <Constant_Voltage+0x13c4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7fc faec 	bl	8000dbc <__aeabi_fmul>
 80047e4:	4603      	mov	r3, r0
 80047e6:	4619      	mov	r1, r3
 80047e8:	4620      	mov	r0, r4
 80047ea:	f7fc f9df 	bl	8000bac <__addsf3>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461c      	mov	r4, r3
 80047f2:	4b5c      	ldr	r3, [pc, #368]	; (8004964 <Constant_Voltage+0x13c8>)
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b5c      	ldr	r3, [pc, #368]	; (8004968 <Constant_Voltage+0x13cc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f7fc fadd 	bl	8000dbc <__aeabi_fmul>
 8004802:	4603      	mov	r3, r0
 8004804:	4619      	mov	r1, r3
 8004806:	4620      	mov	r0, r4
 8004808:	f7fc f9d0 	bl	8000bac <__addsf3>
 800480c:	4603      	mov	r3, r0
 800480e:	461c      	mov	r4, r3
 8004810:	4b56      	ldr	r3, [pc, #344]	; (800496c <Constant_Voltage+0x13d0>)
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	4b56      	ldr	r3, [pc, #344]	; (8004970 <Constant_Voltage+0x13d4>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	4610      	mov	r0, r2
 800481c:	f7fc face 	bl	8000dbc <__aeabi_fmul>
 8004820:	4603      	mov	r3, r0
 8004822:	4619      	mov	r1, r3
 8004824:	4620      	mov	r0, r4
 8004826:	f7fc f9c1 	bl	8000bac <__addsf3>
 800482a:	4603      	mov	r3, r0
 800482c:	461c      	mov	r4, r3
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <Constant_Voltage+0x13d8>)
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	4b51      	ldr	r3, [pc, #324]	; (8004978 <Constant_Voltage+0x13dc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4619      	mov	r1, r3
 8004838:	4610      	mov	r0, r2
 800483a:	f7fc fabf 	bl	8000dbc <__aeabi_fmul>
 800483e:	4603      	mov	r3, r0
 8004840:	4619      	mov	r1, r3
 8004842:	4620      	mov	r0, r4
 8004844:	f7fc f9b2 	bl	8000bac <__addsf3>
 8004848:	4603      	mov	r3, r0
 800484a:	461c      	mov	r4, r3
 800484c:	4b4b      	ldr	r3, [pc, #300]	; (800497c <Constant_Voltage+0x13e0>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b49      	ldr	r3, [pc, #292]	; (8004978 <Constant_Voltage+0x13dc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7fc fab0 	bl	8000dbc <__aeabi_fmul>
 800485c:	4603      	mov	r3, r0
 800485e:	4619      	mov	r1, r3
 8004860:	4620      	mov	r0, r4
 8004862:	f7fc f9a3 	bl	8000bac <__addsf3>
 8004866:	4603      	mov	r3, r0
 8004868:	461c      	mov	r4, r3
 800486a:	4b45      	ldr	r3, [pc, #276]	; (8004980 <Constant_Voltage+0x13e4>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b42      	ldr	r3, [pc, #264]	; (8004978 <Constant_Voltage+0x13dc>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4619      	mov	r1, r3
 8004874:	4610      	mov	r0, r2
 8004876:	f7fc faa1 	bl	8000dbc <__aeabi_fmul>
 800487a:	4603      	mov	r3, r0
 800487c:	4619      	mov	r1, r3
 800487e:	4620      	mov	r0, r4
 8004880:	f7fc f994 	bl	8000bac <__addsf3>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	4b3e      	ldr	r3, [pc, #248]	; (8004984 <Constant_Voltage+0x13e8>)
 800488a:	601a      	str	r2, [r3, #0]
	B=(r8*oNS)+(r9*oZ)+(r10*oPS)+(r11*oPM)+(r12*oPB)+(r13*oPH)+(r14*oPH);
 800488c:	4b3e      	ldr	r3, [pc, #248]	; (8004988 <Constant_Voltage+0x13ec>)
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b3e      	ldr	r3, [pc, #248]	; (800498c <Constant_Voltage+0x13f0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4619      	mov	r1, r3
 8004896:	4610      	mov	r0, r2
 8004898:	f7fc fa90 	bl	8000dbc <__aeabi_fmul>
 800489c:	4603      	mov	r3, r0
 800489e:	461c      	mov	r4, r3
 80048a0:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <Constant_Voltage+0x13f4>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <Constant_Voltage+0x13bc>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f7fc fa86 	bl	8000dbc <__aeabi_fmul>
 80048b0:	4603      	mov	r3, r0
 80048b2:	4619      	mov	r1, r3
 80048b4:	4620      	mov	r0, r4
 80048b6:	f7fc f979 	bl	8000bac <__addsf3>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461c      	mov	r4, r3
 80048be:	4b35      	ldr	r3, [pc, #212]	; (8004994 <Constant_Voltage+0x13f8>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b27      	ldr	r3, [pc, #156]	; (8004960 <Constant_Voltage+0x13c4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4619      	mov	r1, r3
 80048c8:	4610      	mov	r0, r2
 80048ca:	f7fc fa77 	bl	8000dbc <__aeabi_fmul>
 80048ce:	4603      	mov	r3, r0
 80048d0:	4619      	mov	r1, r3
 80048d2:	4620      	mov	r0, r4
 80048d4:	f7fc f96a 	bl	8000bac <__addsf3>
 80048d8:	4603      	mov	r3, r0
 80048da:	461c      	mov	r4, r3
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <Constant_Voltage+0x13fc>)
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	4b21      	ldr	r3, [pc, #132]	; (8004968 <Constant_Voltage+0x13cc>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f7fc fa68 	bl	8000dbc <__aeabi_fmul>
 80048ec:	4603      	mov	r3, r0
 80048ee:	4619      	mov	r1, r3
 80048f0:	4620      	mov	r0, r4
 80048f2:	f7fc f95b 	bl	8000bac <__addsf3>
 80048f6:	4603      	mov	r3, r0
 80048f8:	461c      	mov	r4, r3
 80048fa:	4b28      	ldr	r3, [pc, #160]	; (800499c <Constant_Voltage+0x1400>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <Constant_Voltage+0x13d4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4619      	mov	r1, r3
 8004904:	4610      	mov	r0, r2
 8004906:	f7fc fa59 	bl	8000dbc <__aeabi_fmul>
 800490a:	4603      	mov	r3, r0
 800490c:	4619      	mov	r1, r3
 800490e:	4620      	mov	r0, r4
 8004910:	f7fc f94c 	bl	8000bac <__addsf3>
 8004914:	e044      	b.n	80049a0 <Constant_Voltage+0x1404>
 8004916:	bf00      	nop
 8004918:	20000d8c 	.word	0x20000d8c
 800491c:	20000da4 	.word	0x20000da4
 8004920:	200006dc 	.word	0x200006dc
 8004924:	20000904 	.word	0x20000904
 8004928:	20000dc4 	.word	0x20000dc4
 800492c:	2000082c 	.word	0x2000082c
 8004930:	200006b4 	.word	0x200006b4
 8004934:	20000704 	.word	0x20000704
 8004938:	20000dd8 	.word	0x20000dd8
 800493c:	20000d94 	.word	0x20000d94
 8004940:	20000a38 	.word	0x20000a38
 8004944:	20000aac 	.word	0x20000aac
 8004948:	20000ac0 	.word	0x20000ac0
 800494c:	20000a28 	.word	0x20000a28
 8004950:	200009fc 	.word	0x200009fc
 8004954:	20000ddc 	.word	0x20000ddc
 8004958:	20000258 	.word	0x20000258
 800495c:	20000bbc 	.word	0x20000bbc
 8004960:	20000034 	.word	0x20000034
 8004964:	200006d0 	.word	0x200006d0
 8004968:	20000038 	.word	0x20000038
 800496c:	2000080c 	.word	0x2000080c
 8004970:	2000003c 	.word	0x2000003c
 8004974:	20000dcc 	.word	0x20000dcc
 8004978:	20000040 	.word	0x20000040
 800497c:	200007f8 	.word	0x200007f8
 8004980:	20000aa8 	.word	0x20000aa8
 8004984:	200006f8 	.word	0x200006f8
 8004988:	20000a0c 	.word	0x20000a0c
 800498c:	20000030 	.word	0x20000030
 8004990:	20000700 	.word	0x20000700
 8004994:	200009f0 	.word	0x200009f0
 8004998:	20000bb8 	.word	0x20000bb8
 800499c:	20000dac 	.word	0x20000dac
 80049a0:	4603      	mov	r3, r0
 80049a2:	461c      	mov	r4, r3
 80049a4:	4b91      	ldr	r3, [pc, #580]	; (8004bec <Constant_Voltage+0x1650>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b91      	ldr	r3, [pc, #580]	; (8004bf0 <Constant_Voltage+0x1654>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7fc fa04 	bl	8000dbc <__aeabi_fmul>
 80049b4:	4603      	mov	r3, r0
 80049b6:	4619      	mov	r1, r3
 80049b8:	4620      	mov	r0, r4
 80049ba:	f7fc f8f7 	bl	8000bac <__addsf3>
 80049be:	4603      	mov	r3, r0
 80049c0:	461c      	mov	r4, r3
 80049c2:	4b8c      	ldr	r3, [pc, #560]	; (8004bf4 <Constant_Voltage+0x1658>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b8a      	ldr	r3, [pc, #552]	; (8004bf0 <Constant_Voltage+0x1654>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fc f9f5 	bl	8000dbc <__aeabi_fmul>
 80049d2:	4603      	mov	r3, r0
 80049d4:	4619      	mov	r1, r3
 80049d6:	4620      	mov	r0, r4
 80049d8:	f7fc f8e8 	bl	8000bac <__addsf3>
 80049dc:	4603      	mov	r3, r0
 80049de:	461a      	mov	r2, r3
 80049e0:	4b85      	ldr	r3, [pc, #532]	; (8004bf8 <Constant_Voltage+0x165c>)
 80049e2:	601a      	str	r2, [r3, #0]
	C=(r15*oNM)+(r16*oNS)+(r17*oZ)+(r18*oPS)+(r19*oPM)+(r20*oPB)+(r21*oPH);
 80049e4:	4b85      	ldr	r3, [pc, #532]	; (8004bfc <Constant_Voltage+0x1660>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b85      	ldr	r3, [pc, #532]	; (8004c00 <Constant_Voltage+0x1664>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f7fc f9e4 	bl	8000dbc <__aeabi_fmul>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461c      	mov	r4, r3
 80049f8:	4b82      	ldr	r3, [pc, #520]	; (8004c04 <Constant_Voltage+0x1668>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4b82      	ldr	r3, [pc, #520]	; (8004c08 <Constant_Voltage+0x166c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f7fc f9da 	bl	8000dbc <__aeabi_fmul>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f7fc f8cd 	bl	8000bac <__addsf3>
 8004a12:	4603      	mov	r3, r0
 8004a14:	461c      	mov	r4, r3
 8004a16:	4b7d      	ldr	r3, [pc, #500]	; (8004c0c <Constant_Voltage+0x1670>)
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	4b7d      	ldr	r3, [pc, #500]	; (8004c10 <Constant_Voltage+0x1674>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fc f9cb 	bl	8000dbc <__aeabi_fmul>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7fc f8be 	bl	8000bac <__addsf3>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461c      	mov	r4, r3
 8004a34:	4b77      	ldr	r3, [pc, #476]	; (8004c14 <Constant_Voltage+0x1678>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b77      	ldr	r3, [pc, #476]	; (8004c18 <Constant_Voltage+0x167c>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7fc f9bc 	bl	8000dbc <__aeabi_fmul>
 8004a44:	4603      	mov	r3, r0
 8004a46:	4619      	mov	r1, r3
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f7fc f8af 	bl	8000bac <__addsf3>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	461c      	mov	r4, r3
 8004a52:	4b72      	ldr	r3, [pc, #456]	; (8004c1c <Constant_Voltage+0x1680>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b72      	ldr	r3, [pc, #456]	; (8004c20 <Constant_Voltage+0x1684>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fc f9ad 	bl	8000dbc <__aeabi_fmul>
 8004a62:	4603      	mov	r3, r0
 8004a64:	4619      	mov	r1, r3
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7fc f8a0 	bl	8000bac <__addsf3>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	461c      	mov	r4, r3
 8004a70:	4b6c      	ldr	r3, [pc, #432]	; (8004c24 <Constant_Voltage+0x1688>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4b6c      	ldr	r3, [pc, #432]	; (8004c28 <Constant_Voltage+0x168c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4610      	mov	r0, r2
 8004a7c:	f7fc f99e 	bl	8000dbc <__aeabi_fmul>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4619      	mov	r1, r3
 8004a84:	4620      	mov	r0, r4
 8004a86:	f7fc f891 	bl	8000bac <__addsf3>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	461c      	mov	r4, r3
 8004a8e:	4b67      	ldr	r3, [pc, #412]	; (8004c2c <Constant_Voltage+0x1690>)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	4b57      	ldr	r3, [pc, #348]	; (8004bf0 <Constant_Voltage+0x1654>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fc f98f 	bl	8000dbc <__aeabi_fmul>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	4619      	mov	r1, r3
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f7fc f882 	bl	8000bac <__addsf3>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4b60      	ldr	r3, [pc, #384]	; (8004c30 <Constant_Voltage+0x1694>)
 8004aae:	601a      	str	r2, [r3, #0]
	D=(r22*oNB)+(r23*oNM)+(r24*oNS)+(r25*oZ)+(r26*oPS)+(r27*oPM)+(r28*oPB);
 8004ab0:	4b60      	ldr	r3, [pc, #384]	; (8004c34 <Constant_Voltage+0x1698>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <Constant_Voltage+0x169c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fc f97e 	bl	8000dbc <__aeabi_fmul>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	4b5d      	ldr	r3, [pc, #372]	; (8004c3c <Constant_Voltage+0x16a0>)
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	4b4d      	ldr	r3, [pc, #308]	; (8004c00 <Constant_Voltage+0x1664>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4619      	mov	r1, r3
 8004ace:	4610      	mov	r0, r2
 8004ad0:	f7fc f974 	bl	8000dbc <__aeabi_fmul>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7fc f867 	bl	8000bac <__addsf3>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	4b57      	ldr	r3, [pc, #348]	; (8004c40 <Constant_Voltage+0x16a4>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <Constant_Voltage+0x166c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4619      	mov	r1, r3
 8004aec:	4610      	mov	r0, r2
 8004aee:	f7fc f965 	bl	8000dbc <__aeabi_fmul>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4619      	mov	r1, r3
 8004af6:	4620      	mov	r0, r4
 8004af8:	f7fc f858 	bl	8000bac <__addsf3>
 8004afc:	4603      	mov	r3, r0
 8004afe:	461c      	mov	r4, r3
 8004b00:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <Constant_Voltage+0x16a8>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b42      	ldr	r3, [pc, #264]	; (8004c10 <Constant_Voltage+0x1674>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4619      	mov	r1, r3
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	f7fc f956 	bl	8000dbc <__aeabi_fmul>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	4620      	mov	r0, r4
 8004b16:	f7fc f849 	bl	8000bac <__addsf3>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461c      	mov	r4, r3
 8004b1e:	4b4a      	ldr	r3, [pc, #296]	; (8004c48 <Constant_Voltage+0x16ac>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <Constant_Voltage+0x167c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4619      	mov	r1, r3
 8004b28:	4610      	mov	r0, r2
 8004b2a:	f7fc f947 	bl	8000dbc <__aeabi_fmul>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4619      	mov	r1, r3
 8004b32:	4620      	mov	r0, r4
 8004b34:	f7fc f83a 	bl	8000bac <__addsf3>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	4b43      	ldr	r3, [pc, #268]	; (8004c4c <Constant_Voltage+0x16b0>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <Constant_Voltage+0x1684>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4619      	mov	r1, r3
 8004b46:	4610      	mov	r0, r2
 8004b48:	f7fc f938 	bl	8000dbc <__aeabi_fmul>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4620      	mov	r0, r4
 8004b52:	f7fc f82b 	bl	8000bac <__addsf3>
 8004b56:	4603      	mov	r3, r0
 8004b58:	461c      	mov	r4, r3
 8004b5a:	4b3d      	ldr	r3, [pc, #244]	; (8004c50 <Constant_Voltage+0x16b4>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <Constant_Voltage+0x168c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f7fc f929 	bl	8000dbc <__aeabi_fmul>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f7fc f81c 	bl	8000bac <__addsf3>
 8004b74:	4603      	mov	r3, r0
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b36      	ldr	r3, [pc, #216]	; (8004c54 <Constant_Voltage+0x16b8>)
 8004b7a:	601a      	str	r2, [r3, #0]
	E=(r29*oNH)+(r30*oNB)+(r31*oNM)+(r32*oNS)+(r33*oZ)+(r34*oPS)+(r35*oPM);
 8004b7c:	4b36      	ldr	r3, [pc, #216]	; (8004c58 <Constant_Voltage+0x16bc>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b36      	ldr	r3, [pc, #216]	; (8004c5c <Constant_Voltage+0x16c0>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7fc f918 	bl	8000dbc <__aeabi_fmul>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461c      	mov	r4, r3
 8004b90:	4b33      	ldr	r3, [pc, #204]	; (8004c60 <Constant_Voltage+0x16c4>)
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <Constant_Voltage+0x169c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fc f90e 	bl	8000dbc <__aeabi_fmul>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7fc f801 	bl	8000bac <__addsf3>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461c      	mov	r4, r3
 8004bae:	4b2d      	ldr	r3, [pc, #180]	; (8004c64 <Constant_Voltage+0x16c8>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <Constant_Voltage+0x1664>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7fc f8ff 	bl	8000dbc <__aeabi_fmul>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f7fb fff2 	bl	8000bac <__addsf3>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	461c      	mov	r4, r3
 8004bcc:	4b26      	ldr	r3, [pc, #152]	; (8004c68 <Constant_Voltage+0x16cc>)
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	4b0d      	ldr	r3, [pc, #52]	; (8004c08 <Constant_Voltage+0x166c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4610      	mov	r0, r2
 8004bd8:	f7fc f8f0 	bl	8000dbc <__aeabi_fmul>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4619      	mov	r1, r3
 8004be0:	4620      	mov	r0, r4
 8004be2:	f7fb ffe3 	bl	8000bac <__addsf3>
 8004be6:	4603      	mov	r3, r0
 8004be8:	461c      	mov	r4, r3
 8004bea:	e03f      	b.n	8004c6c <Constant_Voltage+0x16d0>
 8004bec:	20000de0 	.word	0x20000de0
 8004bf0:	20000040 	.word	0x20000040
 8004bf4:	20000678 	.word	0x20000678
 8004bf8:	20000900 	.word	0x20000900
 8004bfc:	20000db0 	.word	0x20000db0
 8004c00:	2000002c 	.word	0x2000002c
 8004c04:	20000abc 	.word	0x20000abc
 8004c08:	20000030 	.word	0x20000030
 8004c0c:	200007e8 	.word	0x200007e8
 8004c10:	20000258 	.word	0x20000258
 8004c14:	20000a3c 	.word	0x20000a3c
 8004c18:	20000034 	.word	0x20000034
 8004c1c:	20000da8 	.word	0x20000da8
 8004c20:	20000038 	.word	0x20000038
 8004c24:	20000a04 	.word	0x20000a04
 8004c28:	2000003c 	.word	0x2000003c
 8004c2c:	20000800 	.word	0x20000800
 8004c30:	2000091c 	.word	0x2000091c
 8004c34:	20000ca8 	.word	0x20000ca8
 8004c38:	20000028 	.word	0x20000028
 8004c3c:	20000dc0 	.word	0x20000dc0
 8004c40:	20000dd4 	.word	0x20000dd4
 8004c44:	200006b0 	.word	0x200006b0
 8004c48:	200007d8 	.word	0x200007d8
 8004c4c:	20000a20 	.word	0x20000a20
 8004c50:	20000684 	.word	0x20000684
 8004c54:	20000674 	.word	0x20000674
 8004c58:	200006a8 	.word	0x200006a8
 8004c5c:	20000024 	.word	0x20000024
 8004c60:	20000ba4 	.word	0x20000ba4
 8004c64:	200007f0 	.word	0x200007f0
 8004c68:	20000834 	.word	0x20000834
 8004c6c:	4b91      	ldr	r3, [pc, #580]	; (8004eb4 <Constant_Voltage+0x1918>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	4b91      	ldr	r3, [pc, #580]	; (8004eb8 <Constant_Voltage+0x191c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4619      	mov	r1, r3
 8004c76:	4610      	mov	r0, r2
 8004c78:	f7fc f8a0 	bl	8000dbc <__aeabi_fmul>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4620      	mov	r0, r4
 8004c82:	f7fb ff93 	bl	8000bac <__addsf3>
 8004c86:	4603      	mov	r3, r0
 8004c88:	461c      	mov	r4, r3
 8004c8a:	4b8c      	ldr	r3, [pc, #560]	; (8004ebc <Constant_Voltage+0x1920>)
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	4b8c      	ldr	r3, [pc, #560]	; (8004ec0 <Constant_Voltage+0x1924>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fc f891 	bl	8000dbc <__aeabi_fmul>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7fb ff84 	bl	8000bac <__addsf3>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	4b86      	ldr	r3, [pc, #536]	; (8004ec4 <Constant_Voltage+0x1928>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4b86      	ldr	r3, [pc, #536]	; (8004ec8 <Constant_Voltage+0x192c>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fc f882 	bl	8000dbc <__aeabi_fmul>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4619      	mov	r1, r3
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	f7fb ff75 	bl	8000bac <__addsf3>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	4b81      	ldr	r3, [pc, #516]	; (8004ecc <Constant_Voltage+0x1930>)
 8004cc8:	601a      	str	r2, [r3, #0]
	F=(r36*oNH)+(r37*oNH)+(r38*oNB)+(r39*oNM)+(r40*oNS)+(r41*oZ)+(r42*oPS);
 8004cca:	4b81      	ldr	r3, [pc, #516]	; (8004ed0 <Constant_Voltage+0x1934>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b81      	ldr	r3, [pc, #516]	; (8004ed4 <Constant_Voltage+0x1938>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7fc f871 	bl	8000dbc <__aeabi_fmul>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	461c      	mov	r4, r3
 8004cde:	4b7e      	ldr	r3, [pc, #504]	; (8004ed8 <Constant_Voltage+0x193c>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b7c      	ldr	r3, [pc, #496]	; (8004ed4 <Constant_Voltage+0x1938>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f7fc f867 	bl	8000dbc <__aeabi_fmul>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4620      	mov	r0, r4
 8004cf4:	f7fb ff5a 	bl	8000bac <__addsf3>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	461c      	mov	r4, r3
 8004cfc:	4b77      	ldr	r3, [pc, #476]	; (8004edc <Constant_Voltage+0x1940>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b77      	ldr	r3, [pc, #476]	; (8004ee0 <Constant_Voltage+0x1944>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4619      	mov	r1, r3
 8004d06:	4610      	mov	r0, r2
 8004d08:	f7fc f858 	bl	8000dbc <__aeabi_fmul>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4620      	mov	r0, r4
 8004d12:	f7fb ff4b 	bl	8000bac <__addsf3>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461c      	mov	r4, r3
 8004d1a:	4b72      	ldr	r3, [pc, #456]	; (8004ee4 <Constant_Voltage+0x1948>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b72      	ldr	r3, [pc, #456]	; (8004ee8 <Constant_Voltage+0x194c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7fc f849 	bl	8000dbc <__aeabi_fmul>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f7fb ff3c 	bl	8000bac <__addsf3>
 8004d34:	4603      	mov	r3, r0
 8004d36:	461c      	mov	r4, r3
 8004d38:	4b6c      	ldr	r3, [pc, #432]	; (8004eec <Constant_Voltage+0x1950>)
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	4b6c      	ldr	r3, [pc, #432]	; (8004ef0 <Constant_Voltage+0x1954>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fc f83a 	bl	8000dbc <__aeabi_fmul>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f7fb ff2d 	bl	8000bac <__addsf3>
 8004d52:	4603      	mov	r3, r0
 8004d54:	461c      	mov	r4, r3
 8004d56:	4b67      	ldr	r3, [pc, #412]	; (8004ef4 <Constant_Voltage+0x1958>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b57      	ldr	r3, [pc, #348]	; (8004eb8 <Constant_Voltage+0x191c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4610      	mov	r0, r2
 8004d62:	f7fc f82b 	bl	8000dbc <__aeabi_fmul>
 8004d66:	4603      	mov	r3, r0
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f7fb ff1e 	bl	8000bac <__addsf3>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461c      	mov	r4, r3
 8004d74:	4b60      	ldr	r3, [pc, #384]	; (8004ef8 <Constant_Voltage+0x195c>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	4b51      	ldr	r3, [pc, #324]	; (8004ec0 <Constant_Voltage+0x1924>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7fc f81c 	bl	8000dbc <__aeabi_fmul>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4619      	mov	r1, r3
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7fb ff0f 	bl	8000bac <__addsf3>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	461a      	mov	r2, r3
 8004d92:	4b5a      	ldr	r3, [pc, #360]	; (8004efc <Constant_Voltage+0x1960>)
 8004d94:	601a      	str	r2, [r3, #0]
	G=(r43*oNH)+(r44*oNH)+(r45*oNH)+(r46*oNB)+(r47*oNM)+(r48*oNS)+(r49*oZ);
 8004d96:	4b5a      	ldr	r3, [pc, #360]	; (8004f00 <Constant_Voltage+0x1964>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <Constant_Voltage+0x1938>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fc f80b 	bl	8000dbc <__aeabi_fmul>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461c      	mov	r4, r3
 8004daa:	4b56      	ldr	r3, [pc, #344]	; (8004f04 <Constant_Voltage+0x1968>)
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <Constant_Voltage+0x1938>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4619      	mov	r1, r3
 8004db4:	4610      	mov	r0, r2
 8004db6:	f7fc f801 	bl	8000dbc <__aeabi_fmul>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	4620      	mov	r0, r4
 8004dc0:	f7fb fef4 	bl	8000bac <__addsf3>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461c      	mov	r4, r3
 8004dc8:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <Constant_Voltage+0x196c>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <Constant_Voltage+0x1938>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fb fff2 	bl	8000dbc <__aeabi_fmul>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4619      	mov	r1, r3
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7fb fee5 	bl	8000bac <__addsf3>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461c      	mov	r4, r3
 8004de6:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <Constant_Voltage+0x1970>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b3d      	ldr	r3, [pc, #244]	; (8004ee0 <Constant_Voltage+0x1944>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4619      	mov	r1, r3
 8004df0:	4610      	mov	r0, r2
 8004df2:	f7fb ffe3 	bl	8000dbc <__aeabi_fmul>
 8004df6:	4603      	mov	r3, r0
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f7fb fed6 	bl	8000bac <__addsf3>
 8004e00:	4603      	mov	r3, r0
 8004e02:	461c      	mov	r4, r3
 8004e04:	4b42      	ldr	r3, [pc, #264]	; (8004f10 <Constant_Voltage+0x1974>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <Constant_Voltage+0x194c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f7fb ffd4 	bl	8000dbc <__aeabi_fmul>
 8004e14:	4603      	mov	r3, r0
 8004e16:	4619      	mov	r1, r3
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f7fb fec7 	bl	8000bac <__addsf3>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	461c      	mov	r4, r3
 8004e22:	4b3c      	ldr	r3, [pc, #240]	; (8004f14 <Constant_Voltage+0x1978>)
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b32      	ldr	r3, [pc, #200]	; (8004ef0 <Constant_Voltage+0x1954>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	f7fb ffc5 	bl	8000dbc <__aeabi_fmul>
 8004e32:	4603      	mov	r3, r0
 8004e34:	4619      	mov	r1, r3
 8004e36:	4620      	mov	r0, r4
 8004e38:	f7fb feb8 	bl	8000bac <__addsf3>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	461c      	mov	r4, r3
 8004e40:	4b35      	ldr	r3, [pc, #212]	; (8004f18 <Constant_Voltage+0x197c>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	4b1c      	ldr	r3, [pc, #112]	; (8004eb8 <Constant_Voltage+0x191c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	f7fb ffb6 	bl	8000dbc <__aeabi_fmul>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4619      	mov	r1, r3
 8004e54:	4620      	mov	r0, r4
 8004e56:	f7fb fea9 	bl	8000bac <__addsf3>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b2f      	ldr	r3, [pc, #188]	; (8004f1c <Constant_Voltage+0x1980>)
 8004e60:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <Constant_Voltage+0x1984>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b2f      	ldr	r3, [pc, #188]	; (8004f24 <Constant_Voltage+0x1988>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f7fb fe9d 	bl	8000bac <__addsf3>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <Constant_Voltage+0x198c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f7fb fe95 	bl	8000bac <__addsf3>
 8004e82:	4603      	mov	r3, r0
 8004e84:	461a      	mov	r2, r3
 8004e86:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <Constant_Voltage+0x1990>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	f7fb fe8d 	bl	8000bac <__addsf3>
 8004e92:	4603      	mov	r3, r0
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <Constant_Voltage+0x1994>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7fb fe85 	bl	8000bac <__addsf3>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	4b23      	ldr	r3, [pc, #140]	; (8004f34 <Constant_Voltage+0x1998>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	4610      	mov	r0, r2
 8004eae:	f7fb fe7d 	bl	8000bac <__addsf3>
 8004eb2:	e041      	b.n	8004f38 <Constant_Voltage+0x199c>
 8004eb4:	20000a2c 	.word	0x20000a2c
 8004eb8:	20000258 	.word	0x20000258
 8004ebc:	20000ba0 	.word	0x20000ba0
 8004ec0:	20000034 	.word	0x20000034
 8004ec4:	20000ca4 	.word	0x20000ca4
 8004ec8:	20000038 	.word	0x20000038
 8004ecc:	20000c90 	.word	0x20000c90
 8004ed0:	200006d4 	.word	0x200006d4
 8004ed4:	20000024 	.word	0x20000024
 8004ed8:	20000914 	.word	0x20000914
 8004edc:	20000a00 	.word	0x20000a00
 8004ee0:	20000028 	.word	0x20000028
 8004ee4:	20000d9c 	.word	0x20000d9c
 8004ee8:	2000002c 	.word	0x2000002c
 8004eec:	20000aa0 	.word	0x20000aa0
 8004ef0:	20000030 	.word	0x20000030
 8004ef4:	200006c0 	.word	0x200006c0
 8004ef8:	200006c8 	.word	0x200006c8
 8004efc:	20000dc8 	.word	0x20000dc8
 8004f00:	20000da4 	.word	0x20000da4
 8004f04:	20000904 	.word	0x20000904
 8004f08:	2000082c 	.word	0x2000082c
 8004f0c:	20000704 	.word	0x20000704
 8004f10:	20000d94 	.word	0x20000d94
 8004f14:	20000aac 	.word	0x20000aac
 8004f18:	20000a28 	.word	0x20000a28
 8004f1c:	20000a10 	.word	0x20000a10
 8004f20:	20000ddc 	.word	0x20000ddc
 8004f24:	20000bbc 	.word	0x20000bbc
 8004f28:	200006d0 	.word	0x200006d0
 8004f2c:	2000080c 	.word	0x2000080c
 8004f30:	20000dcc 	.word	0x20000dcc
 8004f34:	200007f8 	.word	0x200007f8
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	4b91      	ldr	r3, [pc, #580]	; (8005184 <Constant_Voltage+0x1be8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4619      	mov	r1, r3
 8004f42:	4610      	mov	r0, r2
 8004f44:	f7fb fe32 	bl	8000bac <__addsf3>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	4b8e      	ldr	r3, [pc, #568]	; (8005188 <Constant_Voltage+0x1bec>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f7fb fe2a 	bl	8000bac <__addsf3>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	4b8b      	ldr	r3, [pc, #556]	; (800518c <Constant_Voltage+0x1bf0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fb fe22 	bl	8000bac <__addsf3>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4b88      	ldr	r3, [pc, #544]	; (8005190 <Constant_Voltage+0x1bf4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7fb fe1a 	bl	8000bac <__addsf3>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4b85      	ldr	r3, [pc, #532]	; (8005194 <Constant_Voltage+0x1bf8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4619      	mov	r1, r3
 8004f82:	4610      	mov	r0, r2
 8004f84:	f7fb fe12 	bl	8000bac <__addsf3>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4b82      	ldr	r3, [pc, #520]	; (8005198 <Constant_Voltage+0x1bfc>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7fb fe0a 	bl	8000bac <__addsf3>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	4b7f      	ldr	r3, [pc, #508]	; (800519c <Constant_Voltage+0x1c00>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fb fe02 	bl	8000bac <__addsf3>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	4b7c      	ldr	r3, [pc, #496]	; (80051a0 <Constant_Voltage+0x1c04>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f7fb fdfa 	bl	8000bac <__addsf3>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4b79      	ldr	r3, [pc, #484]	; (80051a4 <Constant_Voltage+0x1c08>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	f7fb fdf2 	bl	8000bac <__addsf3>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b76      	ldr	r3, [pc, #472]	; (80051a8 <Constant_Voltage+0x1c0c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fb fdea 	bl	8000bac <__addsf3>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	461a      	mov	r2, r3
 8004fdc:	4b73      	ldr	r3, [pc, #460]	; (80051ac <Constant_Voltage+0x1c10>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7fb fde2 	bl	8000bac <__addsf3>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b70      	ldr	r3, [pc, #448]	; (80051b0 <Constant_Voltage+0x1c14>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7fb fdda 	bl	8000bac <__addsf3>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4b6d      	ldr	r3, [pc, #436]	; (80051b4 <Constant_Voltage+0x1c18>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4619      	mov	r1, r3
 8005002:	4610      	mov	r0, r2
 8005004:	f7fb fdd2 	bl	8000bac <__addsf3>
 8005008:	4603      	mov	r3, r0
 800500a:	461a      	mov	r2, r3
 800500c:	4b6a      	ldr	r3, [pc, #424]	; (80051b8 <Constant_Voltage+0x1c1c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f7fb fdca 	bl	8000bac <__addsf3>
 8005018:	4603      	mov	r3, r0
 800501a:	461a      	mov	r2, r3
 800501c:	4b67      	ldr	r3, [pc, #412]	; (80051bc <Constant_Voltage+0x1c20>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7fb fdc2 	bl	8000bac <__addsf3>
 8005028:	4603      	mov	r3, r0
 800502a:	461a      	mov	r2, r3
 800502c:	4b64      	ldr	r3, [pc, #400]	; (80051c0 <Constant_Voltage+0x1c24>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fb fdba 	bl	8000bac <__addsf3>
 8005038:	4603      	mov	r3, r0
 800503a:	461a      	mov	r2, r3
 800503c:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <Constant_Voltage+0x1c28>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4619      	mov	r1, r3
 8005042:	4610      	mov	r0, r2
 8005044:	f7fb fdb2 	bl	8000bac <__addsf3>
 8005048:	4603      	mov	r3, r0
 800504a:	461a      	mov	r2, r3
 800504c:	4b5e      	ldr	r3, [pc, #376]	; (80051c8 <Constant_Voltage+0x1c2c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4619      	mov	r1, r3
 8005052:	4610      	mov	r0, r2
 8005054:	f7fb fdaa 	bl	8000bac <__addsf3>
 8005058:	4603      	mov	r3, r0
 800505a:	461a      	mov	r2, r3
 800505c:	4b5b      	ldr	r3, [pc, #364]	; (80051cc <Constant_Voltage+0x1c30>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fb fda2 	bl	8000bac <__addsf3>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	4b58      	ldr	r3, [pc, #352]	; (80051d0 <Constant_Voltage+0x1c34>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4619      	mov	r1, r3
 8005072:	4610      	mov	r0, r2
 8005074:	f7fb fd9a 	bl	8000bac <__addsf3>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	4b55      	ldr	r3, [pc, #340]	; (80051d4 <Constant_Voltage+0x1c38>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4619      	mov	r1, r3
 8005082:	4610      	mov	r0, r2
 8005084:	f7fb fd92 	bl	8000bac <__addsf3>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	4b52      	ldr	r3, [pc, #328]	; (80051d8 <Constant_Voltage+0x1c3c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	4610      	mov	r0, r2
 8005094:	f7fb fd8a 	bl	8000bac <__addsf3>
 8005098:	4603      	mov	r3, r0
 800509a:	461a      	mov	r2, r3
 800509c:	4b4f      	ldr	r3, [pc, #316]	; (80051dc <Constant_Voltage+0x1c40>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fb fd82 	bl	8000bac <__addsf3>
 80050a8:	4603      	mov	r3, r0
 80050aa:	461a      	mov	r2, r3
 80050ac:	4b4c      	ldr	r3, [pc, #304]	; (80051e0 <Constant_Voltage+0x1c44>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f7fb fd7a 	bl	8000bac <__addsf3>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	4b49      	ldr	r3, [pc, #292]	; (80051e4 <Constant_Voltage+0x1c48>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4619      	mov	r1, r3
 80050c2:	4610      	mov	r0, r2
 80050c4:	f7fb fd72 	bl	8000bac <__addsf3>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4b46      	ldr	r3, [pc, #280]	; (80051e8 <Constant_Voltage+0x1c4c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	4610      	mov	r0, r2
 80050d4:	f7fb fd6a 	bl	8000bac <__addsf3>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	4b43      	ldr	r3, [pc, #268]	; (80051ec <Constant_Voltage+0x1c50>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f7fb fd62 	bl	8000bac <__addsf3>
 80050e8:	4603      	mov	r3, r0
 80050ea:	461a      	mov	r2, r3
 80050ec:	4b40      	ldr	r3, [pc, #256]	; (80051f0 <Constant_Voltage+0x1c54>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4619      	mov	r1, r3
 80050f2:	4610      	mov	r0, r2
 80050f4:	f7fb fd5a 	bl	8000bac <__addsf3>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	4b3d      	ldr	r3, [pc, #244]	; (80051f4 <Constant_Voltage+0x1c58>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f7fb fd52 	bl	8000bac <__addsf3>
 8005108:	4603      	mov	r3, r0
 800510a:	461a      	mov	r2, r3
 800510c:	4b3a      	ldr	r3, [pc, #232]	; (80051f8 <Constant_Voltage+0x1c5c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f7fb fd4a 	bl	8000bac <__addsf3>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	4b37      	ldr	r3, [pc, #220]	; (80051fc <Constant_Voltage+0x1c60>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f7fb fd42 	bl	8000bac <__addsf3>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	4b34      	ldr	r3, [pc, #208]	; (8005200 <Constant_Voltage+0x1c64>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	4610      	mov	r0, r2
 8005134:	f7fb fd3a 	bl	8000bac <__addsf3>
 8005138:	4603      	mov	r3, r0
 800513a:	461a      	mov	r2, r3
 800513c:	4b31      	ldr	r3, [pc, #196]	; (8005204 <Constant_Voltage+0x1c68>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4619      	mov	r1, r3
 8005142:	4610      	mov	r0, r2
 8005144:	f7fb fd32 	bl	8000bac <__addsf3>
 8005148:	4603      	mov	r3, r0
 800514a:	461a      	mov	r2, r3
 800514c:	4b2e      	ldr	r3, [pc, #184]	; (8005208 <Constant_Voltage+0x1c6c>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7fb fd2a 	bl	8000bac <__addsf3>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	4b2b      	ldr	r3, [pc, #172]	; (800520c <Constant_Voltage+0x1c70>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7fb fd22 	bl	8000bac <__addsf3>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	4b28      	ldr	r3, [pc, #160]	; (8005210 <Constant_Voltage+0x1c74>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7fb fd1a 	bl	8000bac <__addsf3>
 8005178:	4603      	mov	r3, r0
 800517a:	461a      	mov	r2, r3
 800517c:	4b25      	ldr	r3, [pc, #148]	; (8005214 <Constant_Voltage+0x1c78>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	e04a      	b.n	8005218 <Constant_Voltage+0x1c7c>
 8005182:	bf00      	nop
 8005184:	20000aa8 	.word	0x20000aa8
 8005188:	20000a0c 	.word	0x20000a0c
 800518c:	20000700 	.word	0x20000700
 8005190:	200009f0 	.word	0x200009f0
 8005194:	20000bb8 	.word	0x20000bb8
 8005198:	20000dac 	.word	0x20000dac
 800519c:	20000de0 	.word	0x20000de0
 80051a0:	20000678 	.word	0x20000678
 80051a4:	20000db0 	.word	0x20000db0
 80051a8:	20000abc 	.word	0x20000abc
 80051ac:	200007e8 	.word	0x200007e8
 80051b0:	20000a3c 	.word	0x20000a3c
 80051b4:	20000da8 	.word	0x20000da8
 80051b8:	20000a04 	.word	0x20000a04
 80051bc:	20000800 	.word	0x20000800
 80051c0:	20000ca8 	.word	0x20000ca8
 80051c4:	20000dc0 	.word	0x20000dc0
 80051c8:	20000dd4 	.word	0x20000dd4
 80051cc:	200006b0 	.word	0x200006b0
 80051d0:	200007d8 	.word	0x200007d8
 80051d4:	20000a20 	.word	0x20000a20
 80051d8:	20000684 	.word	0x20000684
 80051dc:	200006a8 	.word	0x200006a8
 80051e0:	20000ba4 	.word	0x20000ba4
 80051e4:	200007f0 	.word	0x200007f0
 80051e8:	20000834 	.word	0x20000834
 80051ec:	20000a2c 	.word	0x20000a2c
 80051f0:	20000ba0 	.word	0x20000ba0
 80051f4:	20000ca4 	.word	0x20000ca4
 80051f8:	200006d4 	.word	0x200006d4
 80051fc:	20000914 	.word	0x20000914
 8005200:	20000a00 	.word	0x20000a00
 8005204:	20000d9c 	.word	0x20000d9c
 8005208:	20000aa0 	.word	0x20000aa0
 800520c:	200006c0 	.word	0x200006c0
 8005210:	200006c8 	.word	0x200006c8
 8005214:	20000da4 	.word	0x20000da4
 8005218:	4619      	mov	r1, r3
 800521a:	4610      	mov	r0, r2
 800521c:	f7fb fcc6 	bl	8000bac <__addsf3>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	4b72      	ldr	r3, [pc, #456]	; (80053f0 <Constant_Voltage+0x1e54>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4619      	mov	r1, r3
 800522a:	4610      	mov	r0, r2
 800522c:	f7fb fcbe 	bl	8000bac <__addsf3>
 8005230:	4603      	mov	r3, r0
 8005232:	461a      	mov	r2, r3
 8005234:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <Constant_Voltage+0x1e58>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f7fb fcb6 	bl	8000bac <__addsf3>
 8005240:	4603      	mov	r3, r0
 8005242:	461a      	mov	r2, r3
 8005244:	4b6c      	ldr	r3, [pc, #432]	; (80053f8 <Constant_Voltage+0x1e5c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f7fb fcae 	bl	8000bac <__addsf3>
 8005250:	4603      	mov	r3, r0
 8005252:	461a      	mov	r2, r3
 8005254:	4b69      	ldr	r3, [pc, #420]	; (80053fc <Constant_Voltage+0x1e60>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f7fb fca6 	bl	8000bac <__addsf3>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	4b66      	ldr	r3, [pc, #408]	; (8005400 <Constant_Voltage+0x1e64>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f7fb fc9e 	bl	8000bac <__addsf3>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	4b63      	ldr	r3, [pc, #396]	; (8005404 <Constant_Voltage+0x1e68>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fb fc96 	bl	8000bac <__addsf3>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	4b60      	ldr	r3, [pc, #384]	; (8005408 <Constant_Voltage+0x1e6c>)
 8005286:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 8005288:	4b60      	ldr	r3, [pc, #384]	; (800540c <Constant_Voltage+0x1e70>)
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	4b60      	ldr	r3, [pc, #384]	; (8005410 <Constant_Voltage+0x1e74>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4619      	mov	r1, r3
 8005292:	4610      	mov	r0, r2
 8005294:	f7fb fc8a 	bl	8000bac <__addsf3>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	4b5d      	ldr	r3, [pc, #372]	; (8005414 <Constant_Voltage+0x1e78>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
 80052a2:	4610      	mov	r0, r2
 80052a4:	f7fb fc82 	bl	8000bac <__addsf3>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b5a      	ldr	r3, [pc, #360]	; (8005418 <Constant_Voltage+0x1e7c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4619      	mov	r1, r3
 80052b2:	4610      	mov	r0, r2
 80052b4:	f7fb fc7a 	bl	8000bac <__addsf3>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	4b57      	ldr	r3, [pc, #348]	; (800541c <Constant_Voltage+0x1e80>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f7fb fc72 	bl	8000bac <__addsf3>
 80052c8:	4603      	mov	r3, r0
 80052ca:	461a      	mov	r2, r3
 80052cc:	4b54      	ldr	r3, [pc, #336]	; (8005420 <Constant_Voltage+0x1e84>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f7fb fc6a 	bl	8000bac <__addsf3>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	4b51      	ldr	r3, [pc, #324]	; (8005424 <Constant_Voltage+0x1e88>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4619      	mov	r1, r3
 80052e2:	4610      	mov	r0, r2
 80052e4:	f7fb fc62 	bl	8000bac <__addsf3>
 80052e8:	4603      	mov	r3, r0
 80052ea:	461a      	mov	r2, r3
 80052ec:	4b46      	ldr	r3, [pc, #280]	; (8005408 <Constant_Voltage+0x1e6c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4619      	mov	r1, r3
 80052f2:	4610      	mov	r0, r2
 80052f4:	f7fb fe16 	bl	8000f24 <__aeabi_fdiv>
 80052f8:	4603      	mov	r3, r0
 80052fa:	461a      	mov	r2, r3
 80052fc:	4b4a      	ldr	r3, [pc, #296]	; (8005428 <Constant_Voltage+0x1e8c>)
 80052fe:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 8005300:	4b4a      	ldr	r3, [pc, #296]	; (800542c <Constant_Voltage+0x1e90>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b48      	ldr	r3, [pc, #288]	; (8005428 <Constant_Voltage+0x1e8c>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4619      	mov	r1, r3
 800530a:	4610      	mov	r0, r2
 800530c:	f7fb fc4e 	bl	8000bac <__addsf3>
 8005310:	4603      	mov	r3, r0
 8005312:	461a      	mov	r2, r3
 8005314:	4b45      	ldr	r3, [pc, #276]	; (800542c <Constant_Voltage+0x1e90>)
 8005316:	601a      	str	r2, [r3, #0]

	if(dc>=80)	dc=80;
 8005318:	4b44      	ldr	r3, [pc, #272]	; (800542c <Constant_Voltage+0x1e90>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4944      	ldr	r1, [pc, #272]	; (8005430 <Constant_Voltage+0x1e94>)
 800531e:	4618      	mov	r0, r3
 8005320:	f7fb fefe 	bl	8001120 <__aeabi_fcmpge>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <Constant_Voltage+0x1d94>
 800532a:	4b40      	ldr	r3, [pc, #256]	; (800542c <Constant_Voltage+0x1e90>)
 800532c:	4a40      	ldr	r2, [pc, #256]	; (8005430 <Constant_Voltage+0x1e94>)
 800532e:	601a      	str	r2, [r3, #0]
	if(dc<=0)	dc=0;
 8005330:	4b3e      	ldr	r3, [pc, #248]	; (800542c <Constant_Voltage+0x1e90>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f04f 0100 	mov.w	r1, #0
 8005338:	4618      	mov	r0, r3
 800533a:	f7fb fee7 	bl	800110c <__aeabi_fcmple>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <Constant_Voltage+0x1db0>
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <Constant_Voltage+0x1e90>)
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 800534c:	4b37      	ldr	r3, [pc, #220]	; (800542c <Constant_Voltage+0x1e90>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4938      	ldr	r1, [pc, #224]	; (8005434 <Constant_Voltage+0x1e98>)
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb fde6 	bl	8000f24 <__aeabi_fdiv>
 8005358:	4603      	mov	r3, r0
 800535a:	461a      	mov	r2, r3
 800535c:	4b36      	ldr	r3, [pc, #216]	; (8005438 <Constant_Voltage+0x1e9c>)
 800535e:	601a      	str	r2, [r3, #0]
//		  	while(p>0)
//		  		p--;
//		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//	}

	if(	flag_trip_overvoltage == 1		||
 8005360:	4b36      	ldr	r3, [pc, #216]	; (800543c <Constant_Voltage+0x1ea0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d027      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		flag_trip_overtemperature == 1	||
 8005368:	4b35      	ldr	r3, [pc, #212]	; (8005440 <Constant_Voltage+0x1ea4>)
 800536a:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 800536c:	2b01      	cmp	r3, #1
 800536e:	d023      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		flag_trip_undertemperature == 1	||
 8005370:	4b34      	ldr	r3, [pc, #208]	; (8005444 <Constant_Voltage+0x1ea8>)
 8005372:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 8005374:	2b01      	cmp	r3, #1
 8005376:	d01f      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		flag_trip_overcurrentcharge == 1||
 8005378:	4b33      	ldr	r3, [pc, #204]	; (8005448 <Constant_Voltage+0x1eac>)
 800537a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 800537c:	2b01      	cmp	r3, #1
 800537e:	d01b      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		flag_trip_SOCOverCharge == 1	||
 8005380:	4b32      	ldr	r3, [pc, #200]	; (800544c <Constant_Voltage+0x1eb0>)
 8005382:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 8005384:	2b01      	cmp	r3, #1
 8005386:	d017      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		flag_trip_shortcircuit == 1		||
 8005388:	4b31      	ldr	r3, [pc, #196]	; (8005450 <Constant_Voltage+0x1eb4>)
 800538a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 800538c:	2b01      	cmp	r3, #1
 800538e:	d013      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		flag_trip_systemfailure == 1	||
 8005390:	4b30      	ldr	r3, [pc, #192]	; (8005454 <Constant_Voltage+0x1eb8>)
 8005392:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 8005394:	2b01      	cmp	r3, #1
 8005396:	d00f      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		Flag_ChargerShortCircuit == 1	||
 8005398:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <Constant_Voltage+0x1ebc>)
 800539a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 800539c:	2b01      	cmp	r3, #1
 800539e:	d00b      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverCurrent == 1	||
 80053a0:	4b2e      	ldr	r3, [pc, #184]	; (800545c <Constant_Voltage+0x1ec0>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d007      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverTemperature == 1||
 80053a8:	4b2d      	ldr	r3, [pc, #180]	; (8005460 <Constant_Voltage+0x1ec4>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d003      	beq.n	80053b8 <Constant_Voltage+0x1e1c>
		Flag_ChargerOverVoltage == 1	)
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <Constant_Voltage+0x1ec8>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d106      	bne.n	80053c6 <Constant_Voltage+0x1e2a>
		{
			duty=0;
 80053b8:	4b1f      	ldr	r3, [pc, #124]	; (8005438 <Constant_Voltage+0x1e9c>)
 80053ba:	f04f 0200 	mov.w	r2, #0
 80053be:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 80053c0:	4b29      	ldr	r3, [pc, #164]	; (8005468 <Constant_Voltage+0x1ecc>)
 80053c2:	2202      	movs	r2, #2
 80053c4:	701a      	strb	r2, [r3, #0]
		}
	TIM1->CCR1=duty*TIM1->ARR;
 80053c6:	4b29      	ldr	r3, [pc, #164]	; (800546c <Constant_Voltage+0x1ed0>)
 80053c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fb fc9e 	bl	8000d0c <__aeabi_ui2f>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b19      	ldr	r3, [pc, #100]	; (8005438 <Constant_Voltage+0x1e9c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7fb fcef 	bl	8000dbc <__aeabi_fmul>
 80053de:	4603      	mov	r3, r0
 80053e0:	4c22      	ldr	r4, [pc, #136]	; (800546c <Constant_Voltage+0x1ed0>)
 80053e2:	4618      	mov	r0, r3
 80053e4:	f7fb feb0 	bl	8001148 <__aeabi_f2uiz>
 80053e8:	4603      	mov	r3, r0
 80053ea:	6363      	str	r3, [r4, #52]	; 0x34
}
 80053ec:	bf00      	nop
 80053ee:	bd98      	pop	{r3, r4, r7, pc}
 80053f0:	20000904 	.word	0x20000904
 80053f4:	2000082c 	.word	0x2000082c
 80053f8:	20000704 	.word	0x20000704
 80053fc:	20000d94 	.word	0x20000d94
 8005400:	20000aac 	.word	0x20000aac
 8005404:	20000a28 	.word	0x20000a28
 8005408:	20000a9c 	.word	0x20000a9c
 800540c:	200006f8 	.word	0x200006f8
 8005410:	20000900 	.word	0x20000900
 8005414:	2000091c 	.word	0x2000091c
 8005418:	20000674 	.word	0x20000674
 800541c:	20000c90 	.word	0x20000c90
 8005420:	20000dc8 	.word	0x20000dc8
 8005424:	20000a10 	.word	0x20000a10
 8005428:	20000c88 	.word	0x20000c88
 800542c:	200006bc 	.word	0x200006bc
 8005430:	42a00000 	.word	0x42a00000
 8005434:	42c80000 	.word	0x42c80000
 8005438:	20000d7c 	.word	0x20000d7c
 800543c:	20000db4 	.word	0x20000db4
 8005440:	200007d4 	.word	0x200007d4
 8005444:	20000910 	.word	0x20000910
 8005448:	20000ab0 	.word	0x20000ab0
 800544c:	20000693 	.word	0x20000693
 8005450:	200006ac 	.word	0x200006ac
 8005454:	200006cc 	.word	0x200006cc
 8005458:	20000810 	.word	0x20000810
 800545c:	200007f4 	.word	0x200007f4
 8005460:	200006e9 	.word	0x200006e9
 8005464:	20000814 	.word	0x20000814
 8005468:	20000708 	.word	0x20000708
 800546c:	40010000 	.word	0x40010000

08005470 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	4603      	mov	r3, r0
 8005478:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 3, 100)!=HAL_OK){
 800547a:	88f9      	ldrh	r1, [r7, #6]
 800547c:	2364      	movs	r3, #100	; 0x64
 800547e:	2203      	movs	r2, #3
 8005480:	4808      	ldr	r0, [pc, #32]	; (80054a4 <EEPROM_isDeviceReady+0x34>)
 8005482:	f005 fc43 	bl	800ad0c <HAL_I2C_IsDeviceReady>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800548c:	2140      	movs	r1, #64	; 0x40
 800548e:	4806      	ldr	r0, [pc, #24]	; (80054a8 <EEPROM_isDeviceReady+0x38>)
 8005490:	f005 f8f3 	bl	800a67a <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8005494:	2064      	movs	r0, #100	; 0x64
 8005496:	f003 f841 	bl	800851c <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800549a:	e7f7      	b.n	800548c <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 800549c:	bf00      	nop
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000ecc 	.word	0x20000ecc
 80054a8:	40020800 	.word	0x40020800

080054ac <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af04      	add	r7, sp, #16
 80054b2:	4603      	mov	r3, r0
 80054b4:	460a      	mov	r2, r1
 80054b6:	80fb      	strh	r3, [r7, #6]
 80054b8:	4613      	mov	r3, r2
 80054ba:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADDRESS,addr,64,&data,1,10);
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	230a      	movs	r3, #10
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	2301      	movs	r3, #1
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	1d7b      	adds	r3, r7, #5
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	2340      	movs	r3, #64	; 0x40
 80054cc:	21a0      	movs	r1, #160	; 0xa0
 80054ce:	4805      	ldr	r0, [pc, #20]	; (80054e4 <EEPROM_WriteData+0x38>)
 80054d0:	f005 fb22 	bl	800ab18 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80054d4:	2064      	movs	r0, #100	; 0x64
 80054d6:	f003 f821 	bl	800851c <HAL_Delay>
}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000ecc 	.word	0x20000ecc

080054e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80054ee:	463b      	mov	r3, r7
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	605a      	str	r2, [r3, #4]
 80054f6:	609a      	str	r2, [r3, #8]
 80054f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80054fa:	4b51      	ldr	r3, [pc, #324]	; (8005640 <MX_ADC1_Init+0x158>)
 80054fc:	4a51      	ldr	r2, [pc, #324]	; (8005644 <MX_ADC1_Init+0x15c>)
 80054fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8005500:	4b4f      	ldr	r3, [pc, #316]	; (8005640 <MX_ADC1_Init+0x158>)
 8005502:	2200      	movs	r2, #0
 8005504:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005506:	4b4e      	ldr	r3, [pc, #312]	; (8005640 <MX_ADC1_Init+0x158>)
 8005508:	2200      	movs	r2, #0
 800550a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800550c:	4b4c      	ldr	r3, [pc, #304]	; (8005640 <MX_ADC1_Init+0x158>)
 800550e:	2201      	movs	r2, #1
 8005510:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005512:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <MX_ADC1_Init+0x158>)
 8005514:	2201      	movs	r2, #1
 8005516:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005518:	4b49      	ldr	r3, [pc, #292]	; (8005640 <MX_ADC1_Init+0x158>)
 800551a:	2200      	movs	r2, #0
 800551c:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800551e:	4b48      	ldr	r3, [pc, #288]	; (8005640 <MX_ADC1_Init+0x158>)
 8005520:	2200      	movs	r2, #0
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005524:	4b46      	ldr	r3, [pc, #280]	; (8005640 <MX_ADC1_Init+0x158>)
 8005526:	4a48      	ldr	r2, [pc, #288]	; (8005648 <MX_ADC1_Init+0x160>)
 8005528:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800552a:	4b45      	ldr	r3, [pc, #276]	; (8005640 <MX_ADC1_Init+0x158>)
 800552c:	2200      	movs	r2, #0
 800552e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8005530:	4b43      	ldr	r3, [pc, #268]	; (8005640 <MX_ADC1_Init+0x158>)
 8005532:	2208      	movs	r2, #8
 8005534:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005536:	4b42      	ldr	r3, [pc, #264]	; (8005640 <MX_ADC1_Init+0x158>)
 8005538:	2201      	movs	r2, #1
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800553c:	4b40      	ldr	r3, [pc, #256]	; (8005640 <MX_ADC1_Init+0x158>)
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005542:	483f      	ldr	r0, [pc, #252]	; (8005640 <MX_ADC1_Init+0x158>)
 8005544:	f003 f80c 	bl	8008560 <HAL_ADC_Init>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800554e:	f001 f9d1 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005552:	2301      	movs	r3, #1
 8005554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005556:	2301      	movs	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800555a:	2306      	movs	r3, #6
 800555c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800555e:	463b      	mov	r3, r7
 8005560:	4619      	mov	r1, r3
 8005562:	4837      	ldr	r0, [pc, #220]	; (8005640 <MX_ADC1_Init+0x158>)
 8005564:	f003 f924 	bl	80087b0 <HAL_ADC_ConfigChannel>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800556e:	f001 f9c1 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005572:	2302      	movs	r3, #2
 8005574:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005576:	2302      	movs	r3, #2
 8005578:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800557a:	463b      	mov	r3, r7
 800557c:	4619      	mov	r1, r3
 800557e:	4830      	ldr	r0, [pc, #192]	; (8005640 <MX_ADC1_Init+0x158>)
 8005580:	f003 f916 	bl	80087b0 <HAL_ADC_ConfigChannel>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800558a:	f001 f9b3 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800558e:	2303      	movs	r3, #3
 8005590:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005592:	2303      	movs	r3, #3
 8005594:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005596:	463b      	mov	r3, r7
 8005598:	4619      	mov	r1, r3
 800559a:	4829      	ldr	r0, [pc, #164]	; (8005640 <MX_ADC1_Init+0x158>)
 800559c:	f003 f908 	bl	80087b0 <HAL_ADC_ConfigChannel>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80055a6:	f001 f9a5 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80055aa:	230e      	movs	r3, #14
 80055ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80055ae:	2304      	movs	r3, #4
 80055b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055b2:	463b      	mov	r3, r7
 80055b4:	4619      	mov	r1, r3
 80055b6:	4822      	ldr	r0, [pc, #136]	; (8005640 <MX_ADC1_Init+0x158>)
 80055b8:	f003 f8fa 	bl	80087b0 <HAL_ADC_ConfigChannel>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80055c2:	f001 f997 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80055c6:	230f      	movs	r3, #15
 80055c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80055ca:	2305      	movs	r3, #5
 80055cc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ce:	463b      	mov	r3, r7
 80055d0:	4619      	mov	r1, r3
 80055d2:	481b      	ldr	r0, [pc, #108]	; (8005640 <MX_ADC1_Init+0x158>)
 80055d4:	f003 f8ec 	bl	80087b0 <HAL_ADC_ConfigChannel>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80055de:	f001 f989 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80055e2:	230b      	movs	r3, #11
 80055e4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80055e6:	2306      	movs	r3, #6
 80055e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ea:	463b      	mov	r3, r7
 80055ec:	4619      	mov	r1, r3
 80055ee:	4814      	ldr	r0, [pc, #80]	; (8005640 <MX_ADC1_Init+0x158>)
 80055f0:	f003 f8de 	bl	80087b0 <HAL_ADC_ConfigChannel>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80055fa:	f001 f97b 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80055fe:	230c      	movs	r3, #12
 8005600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005602:	2307      	movs	r3, #7
 8005604:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005606:	463b      	mov	r3, r7
 8005608:	4619      	mov	r1, r3
 800560a:	480d      	ldr	r0, [pc, #52]	; (8005640 <MX_ADC1_Init+0x158>)
 800560c:	f003 f8d0 	bl	80087b0 <HAL_ADC_ConfigChannel>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8005616:	f001 f96d 	bl	80068f4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800561a:	2308      	movs	r3, #8
 800561c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800561e:	2308      	movs	r3, #8
 8005620:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005622:	463b      	mov	r3, r7
 8005624:	4619      	mov	r1, r3
 8005626:	4806      	ldr	r0, [pc, #24]	; (8005640 <MX_ADC1_Init+0x158>)
 8005628:	f003 f8c2 	bl	80087b0 <HAL_ADC_ConfigChannel>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8005632:	f001 f95f 	bl	80068f4 <Error_Handler>
  }

}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	20000de8 	.word	0x20000de8
 8005644:	40012000 	.word	0x40012000
 8005648:	0f000001 	.word	0x0f000001

0800564c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b08c      	sub	sp, #48	; 0x30
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005654:	f107 031c 	add.w	r3, r7, #28
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]
 800565c:	605a      	str	r2, [r3, #4]
 800565e:	609a      	str	r2, [r3, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a4a      	ldr	r2, [pc, #296]	; (8005794 <HAL_ADC_MspInit+0x148>)
 800566a:	4293      	cmp	r3, r2
 800566c:	f040 808d 	bne.w	800578a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	4b48      	ldr	r3, [pc, #288]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 8005676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005678:	4a47      	ldr	r2, [pc, #284]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	6453      	str	r3, [r2, #68]	; 0x44
 8005680:	4b45      	ldr	r3, [pc, #276]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005688:	61bb      	str	r3, [r7, #24]
 800568a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	4b41      	ldr	r3, [pc, #260]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 8005692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005694:	4a40      	ldr	r2, [pc, #256]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 8005696:	f043 0304 	orr.w	r3, r3, #4
 800569a:	6313      	str	r3, [r2, #48]	; 0x30
 800569c:	4b3e      	ldr	r3, [pc, #248]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a8:	2300      	movs	r3, #0
 80056aa:	613b      	str	r3, [r7, #16]
 80056ac:	4b3a      	ldr	r3, [pc, #232]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	4a39      	ldr	r2, [pc, #228]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 80056b2:	f043 0301 	orr.w	r3, r3, #1
 80056b6:	6313      	str	r3, [r2, #48]	; 0x30
 80056b8:	4b37      	ldr	r3, [pc, #220]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	4b33      	ldr	r3, [pc, #204]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	4a32      	ldr	r2, [pc, #200]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 80056ce:	f043 0302 	orr.w	r3, r3, #2
 80056d2:	6313      	str	r3, [r2, #48]	; 0x30
 80056d4:	4b30      	ldr	r3, [pc, #192]	; (8005798 <HAL_ADC_MspInit+0x14c>)
 80056d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80056e0:	2336      	movs	r3, #54	; 0x36
 80056e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056e4:	2303      	movs	r3, #3
 80056e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e8:	2300      	movs	r3, #0
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ec:	f107 031c 	add.w	r3, r7, #28
 80056f0:	4619      	mov	r1, r3
 80056f2:	482a      	ldr	r0, [pc, #168]	; (800579c <HAL_ADC_MspInit+0x150>)
 80056f4:	f004 fdf4 	bl	800a2e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80056f8:	230e      	movs	r3, #14
 80056fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056fc:	2303      	movs	r3, #3
 80056fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005700:	2300      	movs	r3, #0
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005704:	f107 031c 	add.w	r3, r7, #28
 8005708:	4619      	mov	r1, r3
 800570a:	4825      	ldr	r0, [pc, #148]	; (80057a0 <HAL_ADC_MspInit+0x154>)
 800570c:	f004 fde8 	bl	800a2e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005710:	2301      	movs	r3, #1
 8005712:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005714:	2303      	movs	r3, #3
 8005716:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005718:	2300      	movs	r3, #0
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800571c:	f107 031c 	add.w	r3, r7, #28
 8005720:	4619      	mov	r1, r3
 8005722:	4820      	ldr	r0, [pc, #128]	; (80057a4 <HAL_ADC_MspInit+0x158>)
 8005724:	f004 fddc 	bl	800a2e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005728:	4b1f      	ldr	r3, [pc, #124]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 800572a:	4a20      	ldr	r2, [pc, #128]	; (80057ac <HAL_ADC_MspInit+0x160>)
 800572c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800572e:	4b1e      	ldr	r3, [pc, #120]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005730:	2200      	movs	r2, #0
 8005732:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005734:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005736:	2200      	movs	r2, #0
 8005738:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 800573c:	2200      	movs	r2, #0
 800573e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005740:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005746:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005748:	4b17      	ldr	r3, [pc, #92]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 800574a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800574e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005750:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005752:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005756:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005758:	4b13      	ldr	r3, [pc, #76]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 800575a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800575e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005760:	4b11      	ldr	r3, [pc, #68]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005766:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 800576a:	2200      	movs	r2, #0
 800576c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800576e:	480e      	ldr	r0, [pc, #56]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005770:	f004 fa28 	bl	8009bc4 <HAL_DMA_Init>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d001      	beq.n	800577e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800577a:	f001 f8bb 	bl	80068f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a09      	ldr	r2, [pc, #36]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005782:	639a      	str	r2, [r3, #56]	; 0x38
 8005784:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_ADC_MspInit+0x15c>)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800578a:	bf00      	nop
 800578c:	3730      	adds	r7, #48	; 0x30
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40012000 	.word	0x40012000
 8005798:	40023800 	.word	0x40023800
 800579c:	40020800 	.word	0x40020800
 80057a0:	40020000 	.word	0x40020000
 80057a4:	40020400 	.word	0x40020400
 80057a8:	20000e30 	.word	0x20000e30
 80057ac:	40026410 	.word	0x40026410

080057b0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <MX_CAN1_Init+0x64>)
 80057b6:	4a18      	ldr	r2, [pc, #96]	; (8005818 <MX_CAN1_Init+0x68>)
 80057b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 80057ba:	4b16      	ldr	r3, [pc, #88]	; (8005814 <MX_CAN1_Init+0x64>)
 80057bc:	2204      	movs	r2, #4
 80057be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80057c0:	4b14      	ldr	r3, [pc, #80]	; (8005814 <MX_CAN1_Init+0x64>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <MX_CAN1_Init+0x64>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80057cc:	4b11      	ldr	r3, [pc, #68]	; (8005814 <MX_CAN1_Init+0x64>)
 80057ce:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80057d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <MX_CAN1_Init+0x64>)
 80057d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <MX_CAN1_Init+0x64>)
 80057de:	2200      	movs	r2, #0
 80057e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80057e2:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <MX_CAN1_Init+0x64>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <MX_CAN1_Init+0x64>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <MX_CAN1_Init+0x64>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <MX_CAN1_Init+0x64>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <MX_CAN1_Init+0x64>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8005800:	4804      	ldr	r0, [pc, #16]	; (8005814 <MX_CAN1_Init+0x64>)
 8005802:	f003 fa7b 	bl	8008cfc <HAL_CAN_Init>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800580c:	f001 f872 	bl	80068f4 <Error_Handler>
  }

}
 8005810:	bf00      	nop
 8005812:	bd80      	pop	{r7, pc}
 8005814:	20000ea4 	.word	0x20000ea4
 8005818:	40006400 	.word	0x40006400

0800581c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b08a      	sub	sp, #40	; 0x28
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a21      	ldr	r2, [pc, #132]	; (80058c0 <HAL_CAN_MspInit+0xa4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d13c      	bne.n	80058b8 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800583e:	2300      	movs	r3, #0
 8005840:	613b      	str	r3, [r7, #16]
 8005842:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_CAN_MspInit+0xa8>)
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_CAN_MspInit+0xa8>)
 8005848:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800584c:	6413      	str	r3, [r2, #64]	; 0x40
 800584e:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <HAL_CAN_MspInit+0xa8>)
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <HAL_CAN_MspInit+0xa8>)
 8005860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005862:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <HAL_CAN_MspInit+0xa8>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	6313      	str	r3, [r2, #48]	; 0x30
 800586a:	4b16      	ldr	r3, [pc, #88]	; (80058c4 <HAL_CAN_MspInit+0xa8>)
 800586c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005876:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800587a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587c:	2302      	movs	r3, #2
 800587e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005884:	2303      	movs	r3, #3
 8005886:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005888:	2309      	movs	r3, #9
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800588c:	f107 0314 	add.w	r3, r7, #20
 8005890:	4619      	mov	r1, r3
 8005892:	480d      	ldr	r0, [pc, #52]	; (80058c8 <HAL_CAN_MspInit+0xac>)
 8005894:	f004 fd24 	bl	800a2e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8005898:	2200      	movs	r2, #0
 800589a:	2100      	movs	r1, #0
 800589c:	2015      	movs	r0, #21
 800589e:	f004 f95a 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80058a2:	2015      	movs	r0, #21
 80058a4:	f004 f973 	bl	8009b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80058a8:	2200      	movs	r2, #0
 80058aa:	2100      	movs	r1, #0
 80058ac:	2016      	movs	r0, #22
 80058ae:	f004 f952 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80058b2:	2016      	movs	r0, #22
 80058b4:	f004 f96b 	bl	8009b8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80058b8:	bf00      	nop
 80058ba:	3728      	adds	r7, #40	; 0x28
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	40006400 	.word	0x40006400
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40020000 	.word	0x40020000

080058cc <CAN_Setting>:
  }
} 

/* USER CODE BEGIN 1 */
void CAN_Setting(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08a      	sub	sp, #40	; 0x28
 80058d0:	af00      	add	r7, sp, #0
/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80058d2:	2300      	movs	r3, #0
 80058d4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80058da:	2301      	movs	r3, #1
 80058dc:	61fb      	str	r3, [r7, #28]
	//sFilterConfig.FilterIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 80058de:	2300      	movs	r3, #0
 80058e0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80058e2:	2300      	movs	r3, #0
 80058e4:	607b      	str	r3, [r7, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80058f2:	2301      	movs	r3, #1
 80058f4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80058f6:	230e      	movs	r3, #14
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 80058fa:	463b      	mov	r3, r7
 80058fc:	4619      	mov	r1, r3
 80058fe:	4810      	ldr	r0, [pc, #64]	; (8005940 <CAN_Setting+0x74>)
 8005900:	f003 faf8 	bl	8008ef4 <HAL_CAN_ConfigFilter>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <CAN_Setting+0x42>
 800590a:	f000 fff3 	bl	80068f4 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 800590e:	480c      	ldr	r0, [pc, #48]	; (8005940 <CAN_Setting+0x74>)
 8005910:	f003 fbd0 	bl	80090b4 <HAL_CAN_Start>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <CAN_Setting+0x52>
 800591a:	f000 ffeb 	bl	80068f4 <Error_Handler>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 800591e:	4b09      	ldr	r3, [pc, #36]	; (8005944 <CAN_Setting+0x78>)
 8005920:	2200      	movs	r2, #0
 8005922:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <CAN_Setting+0x78>)
 8005926:	2200      	movs	r2, #0
 8005928:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 800592a:	4b06      	ldr	r3, [pc, #24]	; (8005944 <CAN_Setting+0x78>)
 800592c:	2200      	movs	r2, #0
 800592e:	609a      	str	r2, [r3, #8]

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005930:	2102      	movs	r1, #2
 8005932:	4803      	ldr	r0, [pc, #12]	; (8005940 <CAN_Setting+0x74>)
 8005934:	f003 fded 	bl	8009512 <HAL_CAN_ActivateNotification>
}
 8005938:	bf00      	nop
 800593a:	3728      	adds	r7, #40	; 0x28
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}
 8005940:	20000ea4 	.word	0x20000ea4
 8005944:	20001068 	.word	0x20001068

08005948 <CAN_Tx_Process>:

void CAN_Tx_Process(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
	Tx_Header.StdId = 0x0C1;
 800594c:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <CAN_Tx_Process+0x6c>)
 800594e:	22c1      	movs	r2, #193	; 0xc1
 8005950:	601a      	str	r2, [r3, #0]
	Tx_data[0] = UNIQUE_Code >> 12;
 8005952:	4b19      	ldr	r3, [pc, #100]	; (80059b8 <CAN_Tx_Process+0x70>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	0b1b      	lsrs	r3, r3, #12
 8005958:	b2da      	uxtb	r2, r3
 800595a:	4b18      	ldr	r3, [pc, #96]	; (80059bc <CAN_Tx_Process+0x74>)
 800595c:	701a      	strb	r2, [r3, #0]
	Tx_data[1] = UNIQUE_Code >> 4;
 800595e:	4b16      	ldr	r3, [pc, #88]	; (80059b8 <CAN_Tx_Process+0x70>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	b2da      	uxtb	r2, r3
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <CAN_Tx_Process+0x74>)
 8005968:	705a      	strb	r2, [r3, #1]
	Tx_data[2] = UNIQUE_Code << 4;
 800596a:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <CAN_Tx_Process+0x70>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	b2da      	uxtb	r2, r3
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <CAN_Tx_Process+0x74>)
 8005976:	709a      	strb	r2, [r3, #2]
	Tx_data[3] = Eror_Code;
 8005978:	4b11      	ldr	r3, [pc, #68]	; (80059c0 <CAN_Tx_Process+0x78>)
 800597a:	781a      	ldrb	r2, [r3, #0]
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <CAN_Tx_Process+0x74>)
 800597e:	70da      	strb	r2, [r3, #3]
	Tx_data[4] = Handshaking;
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <CAN_Tx_Process+0x7c>)
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	4b0d      	ldr	r3, [pc, #52]	; (80059bc <CAN_Tx_Process+0x74>)
 8005986:	711a      	strb	r2, [r3, #4]
	Tx_data[5] = 0;
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <CAN_Tx_Process+0x74>)
 800598a:	2200      	movs	r2, #0
 800598c:	715a      	strb	r2, [r3, #5]
	Tx_data[6] = 0;
 800598e:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <CAN_Tx_Process+0x74>)
 8005990:	2200      	movs	r2, #0
 8005992:	719a      	strb	r2, [r3, #6]
	Tx_data[7] = 0;
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <CAN_Tx_Process+0x74>)
 8005996:	2200      	movs	r2, #0
 8005998:	71da      	strb	r2, [r3, #7]

	if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 800599a:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <CAN_Tx_Process+0x80>)
 800599c:	4a07      	ldr	r2, [pc, #28]	; (80059bc <CAN_Tx_Process+0x74>)
 800599e:	4905      	ldr	r1, [pc, #20]	; (80059b4 <CAN_Tx_Process+0x6c>)
 80059a0:	480a      	ldr	r0, [pc, #40]	; (80059cc <CAN_Tx_Process+0x84>)
 80059a2:	f003 fbcb 	bl	800913c <HAL_CAN_AddTxMessage>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <CAN_Tx_Process+0x68>
 80059ac:	f000 ffa2 	bl	80068f4 <Error_Handler>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	20001068 	.word	0x20001068
 80059b8:	20000ab4 	.word	0x20000ab4
 80059bc:	20000e90 	.word	0x20000e90
 80059c0:	20000688 	.word	0x20000688
 80059c4:	20000acc 	.word	0x20000acc
 80059c8:	20000ea0 	.word	0x20000ea0
 80059cc:	20000ea4 	.word	0x20000ea4

080059d0 <CAN_Rx_Process>:

void CAN_Rx_Process(void)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	af00      	add	r7, sp, #0
if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK){
 80059d4:	4ba5      	ldr	r3, [pc, #660]	; (8005c6c <CAN_Rx_Process+0x29c>)
 80059d6:	4aa6      	ldr	r2, [pc, #664]	; (8005c70 <CAN_Rx_Process+0x2a0>)
 80059d8:	2100      	movs	r1, #0
 80059da:	48a6      	ldr	r0, [pc, #664]	; (8005c74 <CAN_Rx_Process+0x2a4>)
 80059dc:	f003 fc88 	bl	80092f0 <HAL_CAN_GetRxMessage>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d107      	bne.n	80059f6 <CAN_Rx_Process+0x26>
	HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 80059e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ea:	48a3      	ldr	r0, [pc, #652]	; (8005c78 <CAN_Rx_Process+0x2a8>)
 80059ec:	f004 fe45 	bl	800a67a <HAL_GPIO_TogglePin>
	Communication_Flag = 1;
 80059f0:	4ba2      	ldr	r3, [pc, #648]	; (8005c7c <CAN_Rx_Process+0x2ac>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
}
		if(Handshaking==0 && Ready_Handshaking == 1){
 80059f6:	4ba2      	ldr	r3, [pc, #648]	; (8005c80 <CAN_Rx_Process+0x2b0>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f040 8098 	bne.w	8005b30 <CAN_Rx_Process+0x160>
 8005a00:	4ba0      	ldr	r3, [pc, #640]	; (8005c84 <CAN_Rx_Process+0x2b4>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	f040 8093 	bne.w	8005b30 <CAN_Rx_Process+0x160>

			if(identified <= 0){
 8005a0a:	4b9f      	ldr	r3, [pc, #636]	; (8005c88 <CAN_Rx_Process+0x2b8>)
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d136      	bne.n	8005a80 <CAN_Rx_Process+0xb0>
				Tx_Header.StdId = 0x1B2;
 8005a12:	4b9e      	ldr	r3, [pc, #632]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005a14:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8005a18:	601a      	str	r2, [r3, #0]
				Tx_data[0] = 0;
 8005a1a:	4b9d      	ldr	r3, [pc, #628]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	701a      	strb	r2, [r3, #0]
				Tx_data[1] = 0;
 8005a20:	4b9b      	ldr	r3, [pc, #620]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	705a      	strb	r2, [r3, #1]
				Tx_data[2] = 0;
 8005a26:	4b9a      	ldr	r3, [pc, #616]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	709a      	strb	r2, [r3, #2]
				Tx_data[3] = 0;
 8005a2c:	4b98      	ldr	r3, [pc, #608]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	70da      	strb	r2, [r3, #3]
				Tx_data[4] = 0;
 8005a32:	4b97      	ldr	r3, [pc, #604]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	711a      	strb	r2, [r3, #4]
				Tx_data[5] = 0;
 8005a38:	4b95      	ldr	r3, [pc, #596]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	715a      	strb	r2, [r3, #5]
				Tx_data[6] = 0;
 8005a3e:	4b94      	ldr	r3, [pc, #592]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a40:	2200      	movs	r2, #0
 8005a42:	719a      	strb	r2, [r3, #6]
				Tx_data[7] = 0x01;
 8005a44:	4b92      	ldr	r3, [pc, #584]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a46:	2201      	movs	r2, #1
 8005a48:	71da      	strb	r2, [r3, #7]
				Tx_Header.DLC = 8;
 8005a4a:	4b90      	ldr	r3, [pc, #576]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	611a      	str	r2, [r3, #16]
				Wakeup_BPack_Delay += 1;
 8005a50:	4b90      	ldr	r3, [pc, #576]	; (8005c94 <CAN_Rx_Process+0x2c4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b8e      	ldr	r3, [pc, #568]	; (8005c94 <CAN_Rx_Process+0x2c4>)
 8005a5a:	701a      	strb	r2, [r3, #0]
				if(Wakeup_BPack_Delay == 100){
 8005a5c:	4b8d      	ldr	r3, [pc, #564]	; (8005c94 <CAN_Rx_Process+0x2c4>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b64      	cmp	r3, #100	; 0x64
 8005a62:	d10d      	bne.n	8005a80 <CAN_Rx_Process+0xb0>
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005a64:	4b8c      	ldr	r3, [pc, #560]	; (8005c98 <CAN_Rx_Process+0x2c8>)
 8005a66:	4a8a      	ldr	r2, [pc, #552]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005a68:	4988      	ldr	r1, [pc, #544]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005a6a:	4882      	ldr	r0, [pc, #520]	; (8005c74 <CAN_Rx_Process+0x2a4>)
 8005a6c:	f003 fb66 	bl	800913c <HAL_CAN_AddTxMessage>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <CAN_Rx_Process+0xaa>
 8005a76:	f000 ff3d 	bl	80068f4 <Error_Handler>
					Wakeup_BPack_Delay = 0;
 8005a7a:	4b86      	ldr	r3, [pc, #536]	; (8005c94 <CAN_Rx_Process+0x2c4>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	701a      	strb	r2, [r3, #0]
				}
			}

		// CAN ID receive (Handshaking)
			if(Rx_Header.ExtId>>20==0x0E0){
 8005a80:	4b7b      	ldr	r3, [pc, #492]	; (8005c70 <CAN_Rx_Process+0x2a0>)
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	0d1b      	lsrs	r3, r3, #20
 8005a86:	2be0      	cmp	r3, #224	; 0xe0
 8005a88:	d152      	bne.n	8005b30 <CAN_Rx_Process+0x160>
				if(Rx_data[6]==0x55 && identified==0){
 8005a8a:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005a8c:	799b      	ldrb	r3, [r3, #6]
 8005a8e:	2b55      	cmp	r3, #85	; 0x55
 8005a90:	d12f      	bne.n	8005af2 <CAN_Rx_Process+0x122>
 8005a92:	4b7d      	ldr	r3, [pc, #500]	; (8005c88 <CAN_Rx_Process+0x2b8>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d12b      	bne.n	8005af2 <CAN_Rx_Process+0x122>
					Tx_Header.StdId = 0x0E2;
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005a9c:	22e2      	movs	r2, #226	; 0xe2
 8005a9e:	601a      	str	r2, [r3, #0]
					Tx_data[0] = 1;
 8005aa0:	4b7b      	ldr	r3, [pc, #492]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
					Tx_data[1] = 2;
 8005aa6:	4b7a      	ldr	r3, [pc, #488]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	705a      	strb	r2, [r3, #1]
					Tx_data[2] = 3;
 8005aac:	4b78      	ldr	r3, [pc, #480]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005aae:	2203      	movs	r2, #3
 8005ab0:	709a      	strb	r2, [r3, #2]
					Tx_data[3] = 4;
 8005ab2:	4b77      	ldr	r3, [pc, #476]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005ab4:	2204      	movs	r2, #4
 8005ab6:	70da      	strb	r2, [r3, #3]
					Tx_data[4] = 5;
 8005ab8:	4b75      	ldr	r3, [pc, #468]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005aba:	2205      	movs	r2, #5
 8005abc:	711a      	strb	r2, [r3, #4]
					Tx_data[5] = 6;
 8005abe:	4b74      	ldr	r3, [pc, #464]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005ac0:	2206      	movs	r2, #6
 8005ac2:	715a      	strb	r2, [r3, #5]
					Tx_data[6] = 0x55;
 8005ac4:	4b72      	ldr	r3, [pc, #456]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005ac6:	2255      	movs	r2, #85	; 0x55
 8005ac8:	719a      	strb	r2, [r3, #6]
					Tx_data[7] = 8;
 8005aca:	4b71      	ldr	r3, [pc, #452]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005acc:	2208      	movs	r2, #8
 8005ace:	71da      	strb	r2, [r3, #7]

					Tx_Header.DLC = 8;
 8005ad0:	4b6e      	ldr	r3, [pc, #440]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005ad2:	2208      	movs	r2, #8
 8005ad4:	611a      	str	r2, [r3, #16]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005ad6:	4b70      	ldr	r3, [pc, #448]	; (8005c98 <CAN_Rx_Process+0x2c8>)
 8005ad8:	4a6d      	ldr	r2, [pc, #436]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005ada:	496c      	ldr	r1, [pc, #432]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005adc:	4865      	ldr	r0, [pc, #404]	; (8005c74 <CAN_Rx_Process+0x2a4>)
 8005ade:	f003 fb2d 	bl	800913c <HAL_CAN_AddTxMessage>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d001      	beq.n	8005aec <CAN_Rx_Process+0x11c>
 8005ae8:	f000 ff04 	bl	80068f4 <Error_Handler>
					identified = 1;
 8005aec:	4b66      	ldr	r3, [pc, #408]	; (8005c88 <CAN_Rx_Process+0x2b8>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	701a      	strb	r2, [r3, #0]
				}

				if(Rx_data[6]==0xAA && identified==1){
 8005af2:	4b5e      	ldr	r3, [pc, #376]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005af4:	799b      	ldrb	r3, [r3, #6]
 8005af6:	2baa      	cmp	r3, #170	; 0xaa
 8005af8:	d11a      	bne.n	8005b30 <CAN_Rx_Process+0x160>
 8005afa:	4b63      	ldr	r3, [pc, #396]	; (8005c88 <CAN_Rx_Process+0x2b8>)
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d116      	bne.n	8005b30 <CAN_Rx_Process+0x160>
					Tx_data[6] = 0xAA;
 8005b02:	4b63      	ldr	r3, [pc, #396]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005b04:	22aa      	movs	r2, #170	; 0xaa
 8005b06:	719a      	strb	r2, [r3, #6]
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005b08:	4b63      	ldr	r3, [pc, #396]	; (8005c98 <CAN_Rx_Process+0x2c8>)
 8005b0a:	4a61      	ldr	r2, [pc, #388]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005b0c:	495f      	ldr	r1, [pc, #380]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005b0e:	4859      	ldr	r0, [pc, #356]	; (8005c74 <CAN_Rx_Process+0x2a4>)
 8005b10:	f003 fb14 	bl	800913c <HAL_CAN_AddTxMessage>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d001      	beq.n	8005b1e <CAN_Rx_Process+0x14e>
 8005b1a:	f000 feeb 	bl	80068f4 <Error_Handler>
					UNIQUE_Code = Rx_Header.ExtId & 0x000FFFFF;
 8005b1e:	4b54      	ldr	r3, [pc, #336]	; (8005c70 <CAN_Rx_Process+0x2a0>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b26:	4a5d      	ldr	r2, [pc, #372]	; (8005c9c <CAN_Rx_Process+0x2cc>)
 8005b28:	6013      	str	r3, [r2, #0]
					Handshaking=1;
 8005b2a:	4b55      	ldr	r3, [pc, #340]	; (8005c80 <CAN_Rx_Process+0x2b0>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if(Handshaking==1){
 8005b30:	4b53      	ldr	r3, [pc, #332]	; (8005c80 <CAN_Rx_Process+0x2b0>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f040 81f2 	bne.w	8005f1e <CAN_Rx_Process+0x54e>

			if(Rx_Header.StdId == 0x1C0){
 8005b3a:	4b4d      	ldr	r3, [pc, #308]	; (8005c70 <CAN_Rx_Process+0x2a0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005b42:	d141      	bne.n	8005bc8 <CAN_Rx_Process+0x1f8>
				Start_Charge = Rx_data[0];
 8005b44:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	4b55      	ldr	r3, [pc, #340]	; (8005ca0 <CAN_Rx_Process+0x2d0>)
 8005b4a:	701a      	strb	r2, [r3, #0]

				if(Rx_data[0] == 1 && LastCharger_Mode == 0 ){
 8005b4c:	4b47      	ldr	r3, [pc, #284]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d10a      	bne.n	8005b6a <CAN_Rx_Process+0x19a>
 8005b54:	4b53      	ldr	r3, [pc, #332]	; (8005ca4 <CAN_Rx_Process+0x2d4>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <CAN_Rx_Process+0x19a>
					Charger_Mode = Start_Charge;
 8005b5c:	4b50      	ldr	r3, [pc, #320]	; (8005ca0 <CAN_Rx_Process+0x2d0>)
 8005b5e:	781a      	ldrb	r2, [r3, #0]
 8005b60:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <CAN_Rx_Process+0x2d8>)
 8005b62:	701a      	strb	r2, [r3, #0]
					LastCharger_Mode = 1;
 8005b64:	4b4f      	ldr	r3, [pc, #316]	; (8005ca4 <CAN_Rx_Process+0x2d4>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	701a      	strb	r2, [r3, #0]
				}
				if(Rx_data[0] == 0 && LastCharger_Mode == 1 ){
 8005b6a:	4b40      	ldr	r3, [pc, #256]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d127      	bne.n	8005bc2 <CAN_Rx_Process+0x1f2>
 8005b72:	4b4c      	ldr	r3, [pc, #304]	; (8005ca4 <CAN_Rx_Process+0x2d4>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d123      	bne.n	8005bc2 <CAN_Rx_Process+0x1f2>
					Charger_Mode = Start_Charge;
 8005b7a:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <CAN_Rx_Process+0x2d0>)
 8005b7c:	781a      	ldrb	r2, [r3, #0]
 8005b7e:	4b4a      	ldr	r3, [pc, #296]	; (8005ca8 <CAN_Rx_Process+0x2d8>)
 8005b80:	701a      	strb	r2, [r3, #0]
					Handshaking = 0;
 8005b82:	4b3f      	ldr	r3, [pc, #252]	; (8005c80 <CAN_Rx_Process+0x2b0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	701a      	strb	r2, [r3, #0]
					UNIQUE_Code = 0;
 8005b88:	4b44      	ldr	r3, [pc, #272]	; (8005c9c <CAN_Rx_Process+0x2cc>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
					LastCharger_Mode = 0;
 8005b8e:	4b45      	ldr	r3, [pc, #276]	; (8005ca4 <CAN_Rx_Process+0x2d4>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]

					Tx_Header.StdId = 0x1B2;
 8005b94:	4b3d      	ldr	r3, [pc, #244]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005b96:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 8005b9a:	601a      	str	r2, [r3, #0]
					memset(Tx_data, 0, 8*sizeof(Tx_data[0]));
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	483b      	ldr	r0, [pc, #236]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005ba2:	f007 fce5 	bl	800d570 <memset>
					if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005ba6:	4b3c      	ldr	r3, [pc, #240]	; (8005c98 <CAN_Rx_Process+0x2c8>)
 8005ba8:	4a39      	ldr	r2, [pc, #228]	; (8005c90 <CAN_Rx_Process+0x2c0>)
 8005baa:	4938      	ldr	r1, [pc, #224]	; (8005c8c <CAN_Rx_Process+0x2bc>)
 8005bac:	4831      	ldr	r0, [pc, #196]	; (8005c74 <CAN_Rx_Process+0x2a4>)
 8005bae:	f003 fac5 	bl	800913c <HAL_CAN_AddTxMessage>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <CAN_Rx_Process+0x1ec>
 8005bb8:	f000 fe9c 	bl	80068f4 <Error_Handler>
					identified = 0;
 8005bbc:	4b32      	ldr	r3, [pc, #200]	; (8005c88 <CAN_Rx_Process+0x2b8>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]
				}
				Rx_Header.StdId = 0;
 8005bc2:	4b2b      	ldr	r3, [pc, #172]	; (8005c70 <CAN_Rx_Process+0x2a0>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
			}

			// CAN ID receive #1 (0x7b1)
			if(Rx_Header.ExtId == (0x0B0<<20|UNIQUE_Code)){
 8005bc8:	4b29      	ldr	r3, [pc, #164]	; (8005c70 <CAN_Rx_Process+0x2a0>)
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	4b33      	ldr	r3, [pc, #204]	; (8005c9c <CAN_Rx_Process+0x2cc>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d17b      	bne.n	8005cd0 <CAN_Rx_Process+0x300>
				Batt_voltage.m_bytes[0] = Rx_data[0];
 8005bd8:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005bda:	781a      	ldrb	r2, [r3, #0]
 8005bdc:	4b33      	ldr	r3, [pc, #204]	; (8005cac <CAN_Rx_Process+0x2dc>)
 8005bde:	701a      	strb	r2, [r3, #0]
				Batt_voltage.m_bytes[1] = Rx_data[1];
 8005be0:	4b22      	ldr	r3, [pc, #136]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005be2:	785a      	ldrb	r2, [r3, #1]
 8005be4:	4b31      	ldr	r3, [pc, #196]	; (8005cac <CAN_Rx_Process+0x2dc>)
 8005be6:	705a      	strb	r2, [r3, #1]
				Batt_current.m_bytes[0] = Rx_data[2];
 8005be8:	4b20      	ldr	r3, [pc, #128]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005bea:	789a      	ldrb	r2, [r3, #2]
 8005bec:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <CAN_Rx_Process+0x2e0>)
 8005bee:	701a      	strb	r2, [r3, #0]
				Batt_current.m_bytes[1] = Rx_data[3];
 8005bf0:	4b1e      	ldr	r3, [pc, #120]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005bf2:	78da      	ldrb	r2, [r3, #3]
 8005bf4:	4b2e      	ldr	r3, [pc, #184]	; (8005cb0 <CAN_Rx_Process+0x2e0>)
 8005bf6:	705a      	strb	r2, [r3, #1]
				Batt_SOC.m_bytes[0] = Rx_data[4];
 8005bf8:	4b1c      	ldr	r3, [pc, #112]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005bfa:	791a      	ldrb	r2, [r3, #4]
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <CAN_Rx_Process+0x2e4>)
 8005bfe:	701a      	strb	r2, [r3, #0]
				Batt_SOC.m_bytes[1] = Rx_data[5];
 8005c00:	4b1a      	ldr	r3, [pc, #104]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005c02:	795a      	ldrb	r2, [r3, #5]
 8005c04:	4b2b      	ldr	r3, [pc, #172]	; (8005cb4 <CAN_Rx_Process+0x2e4>)
 8005c06:	705a      	strb	r2, [r3, #1]
				Batt_temp.m_bytes[0] = Rx_data[6];
 8005c08:	4b18      	ldr	r3, [pc, #96]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005c0a:	799a      	ldrb	r2, [r3, #6]
 8005c0c:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <CAN_Rx_Process+0x2e8>)
 8005c0e:	701a      	strb	r2, [r3, #0]
				Batt_temp.m_bytes[1] = Rx_data[7];
 8005c10:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <CAN_Rx_Process+0x29c>)
 8005c12:	79da      	ldrb	r2, [r3, #7]
 8005c14:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <CAN_Rx_Process+0x2e8>)
 8005c16:	705a      	strb	r2, [r3, #1]

				BPack_Temp = (Batt_temp.m_uint16t/10)-40;
 8005c18:	4b27      	ldr	r3, [pc, #156]	; (8005cb8 <CAN_Rx_Process+0x2e8>)
 8005c1a:	881b      	ldrh	r3, [r3, #0]
 8005c1c:	4a27      	ldr	r2, [pc, #156]	; (8005cbc <CAN_Rx_Process+0x2ec>)
 8005c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c22:	08db      	lsrs	r3, r3, #3
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	3b28      	subs	r3, #40	; 0x28
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fb f873 	bl	8000d14 <__aeabi_i2f>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	4b23      	ldr	r3, [pc, #140]	; (8005cc0 <CAN_Rx_Process+0x2f0>)
 8005c32:	601a      	str	r2, [r3, #0]
				BPack_Voltage = Batt_voltage.m_uint16t/100;
 8005c34:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <CAN_Rx_Process+0x2dc>)
 8005c36:	881b      	ldrh	r3, [r3, #0]
 8005c38:	4a22      	ldr	r2, [pc, #136]	; (8005cc4 <CAN_Rx_Process+0x2f4>)
 8005c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fb f866 	bl	8000d14 <__aeabi_i2f>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <CAN_Rx_Process+0x2f8>)
 8005c4c:	601a      	str	r2, [r3, #0]
				BPack_Current = (Batt_current.m_uint16t/100)-50;
 8005c4e:	4b18      	ldr	r3, [pc, #96]	; (8005cb0 <CAN_Rx_Process+0x2e0>)
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	4a1c      	ldr	r2, [pc, #112]	; (8005cc4 <CAN_Rx_Process+0x2f4>)
 8005c54:	fba2 2303 	umull	r2, r3, r2, r3
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	3b32      	subs	r3, #50	; 0x32
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fb f858 	bl	8000d14 <__aeabi_i2f>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b19      	ldr	r3, [pc, #100]	; (8005ccc <CAN_Rx_Process+0x2fc>)
 8005c68:	601a      	str	r2, [r3, #0]
 8005c6a:	e031      	b.n	8005cd0 <CAN_Rx_Process+0x300>
 8005c6c:	20000e98 	.word	0x20000e98
 8005c70:	2000104c 	.word	0x2000104c
 8005c74:	20000ea4 	.word	0x20000ea4
 8005c78:	40020400 	.word	0x40020400
 8005c7c:	200007f5 	.word	0x200007f5
 8005c80:	20000acc 	.word	0x20000acc
 8005c84:	20000c8c 	.word	0x20000c8c
 8005c88:	20000920 	.word	0x20000920
 8005c8c:	20001068 	.word	0x20001068
 8005c90:	20000e90 	.word	0x20000e90
 8005c94:	2000025c 	.word	0x2000025c
 8005c98:	20000ea0 	.word	0x20000ea0
 8005c9c:	20000ab4 	.word	0x20000ab4
 8005ca0:	20000d80 	.word	0x20000d80
 8005ca4:	20000689 	.word	0x20000689
 8005ca8:	20000708 	.word	0x20000708
 8005cac:	20000de4 	.word	0x20000de4
 8005cb0:	20000a18 	.word	0x20000a18
 8005cb4:	20000a5c 	.word	0x20000a5c
 8005cb8:	20000aa4 	.word	0x20000aa4
 8005cbc:	cccccccd 	.word	0xcccccccd
 8005cc0:	20000a54 	.word	0x20000a54
 8005cc4:	51eb851f 	.word	0x51eb851f
 8005cc8:	20000a44 	.word	0x20000a44
 8005ccc:	20000698 	.word	0x20000698
			}

			// CAN ID receive #2 (0x7b2)
			if(Rx_Header.ExtId == (0x0B1<<20|UNIQUE_Code)){
 8005cd0:	4b9d      	ldr	r3, [pc, #628]	; (8005f48 <CAN_Rx_Process+0x578>)
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	4b9d      	ldr	r3, [pc, #628]	; (8005f4c <CAN_Rx_Process+0x57c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f043 6331 	orr.w	r3, r3, #185597952	; 0xb100000
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d16e      	bne.n	8005dbe <CAN_Rx_Process+0x3ee>
				Batt_capacity.m_bytes[0] = Rx_data[0];
 8005ce0:	4b9b      	ldr	r3, [pc, #620]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005ce2:	781a      	ldrb	r2, [r3, #0]
 8005ce4:	4b9b      	ldr	r3, [pc, #620]	; (8005f54 <CAN_Rx_Process+0x584>)
 8005ce6:	701a      	strb	r2, [r3, #0]
				Batt_capacity.m_bytes[1] = Rx_data[1];
 8005ce8:	4b99      	ldr	r3, [pc, #612]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005cea:	785a      	ldrb	r2, [r3, #1]
 8005cec:	4b99      	ldr	r3, [pc, #612]	; (8005f54 <CAN_Rx_Process+0x584>)
 8005cee:	705a      	strb	r2, [r3, #1]
				Batt_SOH.m_bytes[0] = Rx_data[2];
 8005cf0:	4b97      	ldr	r3, [pc, #604]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005cf2:	789a      	ldrb	r2, [r3, #2]
 8005cf4:	4b98      	ldr	r3, [pc, #608]	; (8005f58 <CAN_Rx_Process+0x588>)
 8005cf6:	701a      	strb	r2, [r3, #0]
				Batt_SOH.m_bytes[1] = Rx_data[3];
 8005cf8:	4b95      	ldr	r3, [pc, #596]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005cfa:	78da      	ldrb	r2, [r3, #3]
 8005cfc:	4b96      	ldr	r3, [pc, #600]	; (8005f58 <CAN_Rx_Process+0x588>)
 8005cfe:	705a      	strb	r2, [r3, #1]
				Batt_cycle.m_bytes[0] = Rx_data[4];
 8005d00:	4b93      	ldr	r3, [pc, #588]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d02:	791a      	ldrb	r2, [r3, #4]
 8005d04:	4b95      	ldr	r3, [pc, #596]	; (8005f5c <CAN_Rx_Process+0x58c>)
 8005d06:	701a      	strb	r2, [r3, #0]
				Batt_cycle.m_bytes[1] = Rx_data[5];
 8005d08:	4b91      	ldr	r3, [pc, #580]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d0a:	795a      	ldrb	r2, [r3, #5]
 8005d0c:	4b93      	ldr	r3, [pc, #588]	; (8005f5c <CAN_Rx_Process+0x58c>)
 8005d0e:	705a      	strb	r2, [r3, #1]

				flag_trip_shortcircuit = Rx_data[6]&0x01;
 8005d10:	4b8f      	ldr	r3, [pc, #572]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d12:	799b      	ldrb	r3, [r3, #6]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4b91      	ldr	r3, [pc, #580]	; (8005f60 <CAN_Rx_Process+0x590>)
 8005d1c:	701a      	strb	r2, [r3, #0]
				flag_trip_overcurrentdischarge = (Rx_data[6]>>1)&0x01;
 8005d1e:	4b8c      	ldr	r3, [pc, #560]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d20:	799b      	ldrb	r3, [r3, #6]
 8005d22:	085b      	lsrs	r3, r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	4b8d      	ldr	r3, [pc, #564]	; (8005f64 <CAN_Rx_Process+0x594>)
 8005d2e:	701a      	strb	r2, [r3, #0]
				flag_trip_overcurrentcharge = (Rx_data[6]>>2)&0x01;
 8005d30:	4b87      	ldr	r3, [pc, #540]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d32:	799b      	ldrb	r3, [r3, #6]
 8005d34:	089b      	lsrs	r3, r3, #2
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	f003 0301 	and.w	r3, r3, #1
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	4b8a      	ldr	r3, [pc, #552]	; (8005f68 <CAN_Rx_Process+0x598>)
 8005d40:	701a      	strb	r2, [r3, #0]
				flag_trip_overtemperature = (Rx_data[6]>>3)&0x01;
 8005d42:	4b83      	ldr	r3, [pc, #524]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d44:	799b      	ldrb	r3, [r3, #6]
 8005d46:	08db      	lsrs	r3, r3, #3
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b86      	ldr	r3, [pc, #536]	; (8005f6c <CAN_Rx_Process+0x59c>)
 8005d52:	701a      	strb	r2, [r3, #0]
				flag_trip_undertemperature = (Rx_data[6]>>4)&0x01;
 8005d54:	4b7e      	ldr	r3, [pc, #504]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d56:	799b      	ldrb	r3, [r3, #6]
 8005d58:	091b      	lsrs	r3, r3, #4
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	4b83      	ldr	r3, [pc, #524]	; (8005f70 <CAN_Rx_Process+0x5a0>)
 8005d64:	701a      	strb	r2, [r3, #0]
		//			flag_trip_overtemperature = (Rx_data[6]>>5)&0x01;
		//			flag_trip_undertemperature = (Rx_data[6]>>6)&0x01;
				flag_trip_unbalance = (Rx_data[6]>>7)&0x01;
 8005d66:	4b7a      	ldr	r3, [pc, #488]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d68:	799b      	ldrb	r3, [r3, #6]
 8005d6a:	09db      	lsrs	r3, r3, #7
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <CAN_Rx_Process+0x5a4>)
 8005d70:	701a      	strb	r2, [r3, #0]
				flag_trip_undervoltage = Rx_data[7]&0x01;
 8005d72:	4b77      	ldr	r3, [pc, #476]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005d74:	79db      	ldrb	r3, [r3, #7]
 8005d76:	f003 0301 	and.w	r3, r3, #1
 8005d7a:	b2da      	uxtb	r2, r3
 8005d7c:	4b7e      	ldr	r3, [pc, #504]	; (8005f78 <CAN_Rx_Process+0x5a8>)
 8005d7e:	701a      	strb	r2, [r3, #0]
				flag_trip_overvoltage = (Rx_data[7]<<1)&0x01;
 8005d80:	4b7e      	ldr	r3, [pc, #504]	; (8005f7c <CAN_Rx_Process+0x5ac>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	701a      	strb	r2, [r3, #0]
				flag_trip_SOCOverDischarge = (Rx_data[7]<<2)&0x01;
 8005d86:	4b7e      	ldr	r3, [pc, #504]	; (8005f80 <CAN_Rx_Process+0x5b0>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
				flag_trip_systemfailure = (Rx_data[7]<<3)&0x01;
 8005d8c:	4b7d      	ldr	r3, [pc, #500]	; (8005f84 <CAN_Rx_Process+0x5b4>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	701a      	strb	r2, [r3, #0]
				charge_state = (Rx_data[7]<<4)&0x01;
 8005d92:	4b7d      	ldr	r3, [pc, #500]	; (8005f88 <CAN_Rx_Process+0x5b8>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
				discharge_state = (Rx_data[7]<<5)&0x01;
 8005d98:	4b7c      	ldr	r3, [pc, #496]	; (8005f8c <CAN_Rx_Process+0x5bc>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
				sleep_state = (Rx_data[7]<<6)&0x01;
 8005d9e:	4b7c      	ldr	r3, [pc, #496]	; (8005f90 <CAN_Rx_Process+0x5c0>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]

				BPack_Capacity = Batt_capacity.m_uint16t/100;
 8005da4:	4b6b      	ldr	r3, [pc, #428]	; (8005f54 <CAN_Rx_Process+0x584>)
 8005da6:	881b      	ldrh	r3, [r3, #0]
 8005da8:	4a7a      	ldr	r2, [pc, #488]	; (8005f94 <CAN_Rx_Process+0x5c4>)
 8005daa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fa ffae 	bl	8000d14 <__aeabi_i2f>
 8005db8:	4602      	mov	r2, r0
 8005dba:	4b77      	ldr	r3, [pc, #476]	; (8005f98 <CAN_Rx_Process+0x5c8>)
 8005dbc:	601a      	str	r2, [r3, #0]
			}


			// *********************** Start Cell  Voltage Data Send ******************************
			if(Rx_Header.ExtId == (0x0B4<<20|UNIQUE_Code)){
 8005dbe:	4b62      	ldr	r3, [pc, #392]	; (8005f48 <CAN_Rx_Process+0x578>)
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	4b62      	ldr	r3, [pc, #392]	; (8005f4c <CAN_Rx_Process+0x57c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f043 6334 	orr.w	r3, r3, #188743680	; 0xb400000
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d11f      	bne.n	8005e0e <CAN_Rx_Process+0x43e>
				vcell_15databyte[0].m_bytes[1] = Rx_data[0];
 8005dce:	4b60      	ldr	r3, [pc, #384]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	4b72      	ldr	r3, [pc, #456]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005dd4:	705a      	strb	r2, [r3, #1]
				vcell_15databyte[0].m_bytes[0] = Rx_data[1];
 8005dd6:	4b5e      	ldr	r3, [pc, #376]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005dd8:	785a      	ldrb	r2, [r3, #1]
 8005dda:	4b70      	ldr	r3, [pc, #448]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005ddc:	701a      	strb	r2, [r3, #0]
				vcell_15databyte[1].m_bytes[1] = Rx_data[2];
 8005dde:	4b5c      	ldr	r3, [pc, #368]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005de0:	789a      	ldrb	r2, [r3, #2]
 8005de2:	4b6e      	ldr	r3, [pc, #440]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005de4:	715a      	strb	r2, [r3, #5]
				vcell_15databyte[1].m_bytes[0] = Rx_data[3];
 8005de6:	4b5a      	ldr	r3, [pc, #360]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005de8:	78da      	ldrb	r2, [r3, #3]
 8005dea:	4b6c      	ldr	r3, [pc, #432]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005dec:	711a      	strb	r2, [r3, #4]
				vcell_15databyte[2].m_bytes[1] = Rx_data[4];
 8005dee:	4b58      	ldr	r3, [pc, #352]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005df0:	791a      	ldrb	r2, [r3, #4]
 8005df2:	4b6a      	ldr	r3, [pc, #424]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005df4:	725a      	strb	r2, [r3, #9]
				vcell_15databyte[2].m_bytes[0] = Rx_data[5];
 8005df6:	4b56      	ldr	r3, [pc, #344]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005df8:	795a      	ldrb	r2, [r3, #5]
 8005dfa:	4b68      	ldr	r3, [pc, #416]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005dfc:	721a      	strb	r2, [r3, #8]
				vcell_15databyte[3].m_bytes[1] = Rx_data[6];
 8005dfe:	4b54      	ldr	r3, [pc, #336]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e00:	799a      	ldrb	r2, [r3, #6]
 8005e02:	4b66      	ldr	r3, [pc, #408]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e04:	735a      	strb	r2, [r3, #13]
				vcell_15databyte[3].m_bytes[0] = Rx_data[7];
 8005e06:	4b52      	ldr	r3, [pc, #328]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e08:	79da      	ldrb	r2, [r3, #7]
 8005e0a:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e0c:	731a      	strb	r2, [r3, #12]
			}

			if(Rx_Header.ExtId == (0x0B5<<20|UNIQUE_Code)){
 8005e0e:	4b4e      	ldr	r3, [pc, #312]	; (8005f48 <CAN_Rx_Process+0x578>)
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	4b4e      	ldr	r3, [pc, #312]	; (8005f4c <CAN_Rx_Process+0x57c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f043 6335 	orr.w	r3, r3, #189792256	; 0xb500000
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d11f      	bne.n	8005e5e <CAN_Rx_Process+0x48e>
				vcell_15databyte[4].m_bytes[1] = Rx_data[0];
 8005e1e:	4b4c      	ldr	r3, [pc, #304]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	4b5e      	ldr	r3, [pc, #376]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e24:	745a      	strb	r2, [r3, #17]
				vcell_15databyte[4].m_bytes[0] = Rx_data[1];
 8005e26:	4b4a      	ldr	r3, [pc, #296]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e28:	785a      	ldrb	r2, [r3, #1]
 8005e2a:	4b5c      	ldr	r3, [pc, #368]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e2c:	741a      	strb	r2, [r3, #16]
				vcell_15databyte[5].m_bytes[1] = Rx_data[2];
 8005e2e:	4b48      	ldr	r3, [pc, #288]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e30:	789a      	ldrb	r2, [r3, #2]
 8005e32:	4b5a      	ldr	r3, [pc, #360]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e34:	755a      	strb	r2, [r3, #21]
				vcell_15databyte[5].m_bytes[0] = Rx_data[3];
 8005e36:	4b46      	ldr	r3, [pc, #280]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e38:	78da      	ldrb	r2, [r3, #3]
 8005e3a:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e3c:	751a      	strb	r2, [r3, #20]
				vcell_15databyte[6].m_bytes[1] = Rx_data[4];
 8005e3e:	4b44      	ldr	r3, [pc, #272]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e40:	791a      	ldrb	r2, [r3, #4]
 8005e42:	4b56      	ldr	r3, [pc, #344]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e44:	765a      	strb	r2, [r3, #25]
				vcell_15databyte[6].m_bytes[0] = Rx_data[5];
 8005e46:	4b42      	ldr	r3, [pc, #264]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e48:	795a      	ldrb	r2, [r3, #5]
 8005e4a:	4b54      	ldr	r3, [pc, #336]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e4c:	761a      	strb	r2, [r3, #24]
				vcell_15databyte[7].m_bytes[1] = Rx_data[6];
 8005e4e:	4b40      	ldr	r3, [pc, #256]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e50:	799a      	ldrb	r2, [r3, #6]
 8005e52:	4b52      	ldr	r3, [pc, #328]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e54:	775a      	strb	r2, [r3, #29]
				vcell_15databyte[7].m_bytes[0] = Rx_data[7];
 8005e56:	4b3e      	ldr	r3, [pc, #248]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e58:	79da      	ldrb	r2, [r3, #7]
 8005e5a:	4b50      	ldr	r3, [pc, #320]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e5c:	771a      	strb	r2, [r3, #28]
			}

			if(Rx_Header.ExtId == (0x0B6<<20|UNIQUE_Code)){
 8005e5e:	4b3a      	ldr	r3, [pc, #232]	; (8005f48 <CAN_Rx_Process+0x578>)
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <CAN_Rx_Process+0x57c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f043 6336 	orr.w	r3, r3, #190840832	; 0xb600000
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d127      	bne.n	8005ebe <CAN_Rx_Process+0x4ee>
				vcell_15databyte[8].m_bytes[1] = Rx_data[0];
 8005e6e:	4b38      	ldr	r3, [pc, #224]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	4b4a      	ldr	r3, [pc, #296]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				vcell_15databyte[8].m_bytes[0] = Rx_data[1];
 8005e78:	4b35      	ldr	r3, [pc, #212]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e7a:	785a      	ldrb	r2, [r3, #1]
 8005e7c:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e7e:	f883 2020 	strb.w	r2, [r3, #32]
				vcell_15databyte[9].m_bytes[1] = Rx_data[2];
 8005e82:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e84:	789a      	ldrb	r2, [r3, #2]
 8005e86:	4b45      	ldr	r3, [pc, #276]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				vcell_15databyte[9].m_bytes[0] = Rx_data[3];
 8005e8c:	4b30      	ldr	r3, [pc, #192]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e8e:	78da      	ldrb	r2, [r3, #3]
 8005e90:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				vcell_15databyte[10].m_bytes[1] = Rx_data[4];
 8005e96:	4b2e      	ldr	r3, [pc, #184]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005e98:	791a      	ldrb	r2, [r3, #4]
 8005e9a:	4b40      	ldr	r3, [pc, #256]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005e9c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				vcell_15databyte[10].m_bytes[0] = Rx_data[5];
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005ea2:	795a      	ldrb	r2, [r3, #5]
 8005ea4:	4b3d      	ldr	r3, [pc, #244]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				vcell_15databyte[11].m_bytes[1] = Rx_data[6];
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005eac:	799a      	ldrb	r2, [r3, #6]
 8005eae:	4b3b      	ldr	r3, [pc, #236]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005eb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				vcell_15databyte[11].m_bytes[0] = Rx_data[7];
 8005eb4:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005eb6:	79da      	ldrb	r2, [r3, #7]
 8005eb8:	4b38      	ldr	r3, [pc, #224]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}

			if(Rx_Header.ExtId == (0x0B7<<20|UNIQUE_Code)){
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <CAN_Rx_Process+0x578>)
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	4b22      	ldr	r3, [pc, #136]	; (8005f4c <CAN_Rx_Process+0x57c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f043 6337 	orr.w	r3, r3, #191889408	; 0xb700000
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d127      	bne.n	8005f1e <CAN_Rx_Process+0x54e>
				vcell_15databyte[12].m_bytes[1] = Rx_data[0];
 8005ece:	4b20      	ldr	r3, [pc, #128]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005ed0:	781a      	ldrb	r2, [r3, #0]
 8005ed2:	4b32      	ldr	r3, [pc, #200]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005ed4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				vcell_15databyte[12].m_bytes[0] = Rx_data[1];
 8005ed8:	4b1d      	ldr	r3, [pc, #116]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005eda:	785a      	ldrb	r2, [r3, #1]
 8005edc:	4b2f      	ldr	r3, [pc, #188]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005ede:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				vcell_15databyte[13].m_bytes[1] = Rx_data[2];
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005ee4:	789a      	ldrb	r2, [r3, #2]
 8005ee6:	4b2d      	ldr	r3, [pc, #180]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				vcell_15databyte[13].m_bytes[0] = Rx_data[3];
 8005eec:	4b18      	ldr	r3, [pc, #96]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005eee:	78da      	ldrb	r2, [r3, #3]
 8005ef0:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				vcell_15databyte[14].m_bytes[1] = Rx_data[4];
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005ef8:	791a      	ldrb	r2, [r3, #4]
 8005efa:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				vcell_15databyte[14].m_bytes[0] = Rx_data[5];
 8005f00:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005f02:	795a      	ldrb	r2, [r3, #5]
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005f06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				vcell_15databyte[15].m_bytes[1] = Rx_data[6];
 8005f0a:	4b11      	ldr	r3, [pc, #68]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005f0c:	799a      	ldrb	r2, [r3, #6]
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				vcell_15databyte[15].m_bytes[0] = Rx_data[7];
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <CAN_Rx_Process+0x580>)
 8005f16:	79da      	ldrb	r2, [r3, #7]
 8005f18:	4b20      	ldr	r3, [pc, #128]	; (8005f9c <CAN_Rx_Process+0x5cc>)
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			}
			}
			// ******************************End Cell  Voltage Data Send**************************************
			BP_Voltage = Batt_voltage.m_uint16t/100;
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <CAN_Rx_Process+0x5d0>)
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <CAN_Rx_Process+0x5c4>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fa fef1 	bl	8000d14 <__aeabi_i2f>
 8005f32:	4602      	mov	r2, r0
 8005f34:	4b1b      	ldr	r3, [pc, #108]	; (8005fa4 <CAN_Rx_Process+0x5d4>)
 8005f36:	601a      	str	r2, [r3, #0]
			BP_Current = (Batt_current.m_uint16t/100)-50;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <CAN_Rx_Process+0x5d8>)
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <CAN_Rx_Process+0x5c4>)
 8005f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	e032      	b.n	8005fac <CAN_Rx_Process+0x5dc>
 8005f46:	bf00      	nop
 8005f48:	2000104c 	.word	0x2000104c
 8005f4c:	20000ab4 	.word	0x20000ab4
 8005f50:	20000e98 	.word	0x20000e98
 8005f54:	20000d90 	.word	0x20000d90
 8005f58:	200006a0 	.word	0x200006a0
 8005f5c:	200009f4 	.word	0x200009f4
 8005f60:	200006ac 	.word	0x200006ac
 8005f64:	20000a08 	.word	0x20000a08
 8005f68:	20000ab0 	.word	0x20000ab0
 8005f6c:	200007d4 	.word	0x200007d4
 8005f70:	20000910 	.word	0x20000910
 8005f74:	20000692 	.word	0x20000692
 8005f78:	20000911 	.word	0x20000911
 8005f7c:	20000db4 	.word	0x20000db4
 8005f80:	20000ac4 	.word	0x20000ac4
 8005f84:	200006cc 	.word	0x200006cc
 8005f88:	20000bb1 	.word	0x20000bb1
 8005f8c:	200007fc 	.word	0x200007fc
 8005f90:	20000dbc 	.word	0x20000dbc
 8005f94:	51eb851f 	.word	0x51eb851f
 8005f98:	20000d74 	.word	0x20000d74
 8005f9c:	20000a60 	.word	0x20000a60
 8005fa0:	20000de4 	.word	0x20000de4
 8005fa4:	200006e4 	.word	0x200006e4
 8005fa8:	20000a18 	.word	0x20000a18
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b32      	subs	r3, #50	; 0x32
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fa feaf 	bl	8000d14 <__aeabi_i2f>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	4b17      	ldr	r3, [pc, #92]	; (8006018 <CAN_Rx_Process+0x648>)
 8005fba:	601a      	str	r2, [r3, #0]
			BP_Temp = (Batt_temp.m_uint16t/10)-40;
 8005fbc:	4b17      	ldr	r3, [pc, #92]	; (800601c <CAN_Rx_Process+0x64c>)
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	4a17      	ldr	r2, [pc, #92]	; (8006020 <CAN_Rx_Process+0x650>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	08db      	lsrs	r3, r3, #3
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b28      	subs	r3, #40	; 0x28
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fea1 	bl	8000d14 <__aeabi_i2f>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	4b13      	ldr	r3, [pc, #76]	; (8006024 <CAN_Rx_Process+0x654>)
 8005fd6:	601a      	str	r2, [r3, #0]
			BP_SOC = Batt_SOC.m_uint16t;
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <CAN_Rx_Process+0x658>)
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fa fe95 	bl	8000d0c <__aeabi_ui2f>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b11      	ldr	r3, [pc, #68]	; (800602c <CAN_Rx_Process+0x65c>)
 8005fe6:	601a      	str	r2, [r3, #0]
			BP_Capacity = Batt_capacity.m_uint16t/100;
 8005fe8:	4b11      	ldr	r3, [pc, #68]	; (8006030 <CAN_Rx_Process+0x660>)
 8005fea:	881b      	ldrh	r3, [r3, #0]
 8005fec:	4a11      	ldr	r2, [pc, #68]	; (8006034 <CAN_Rx_Process+0x664>)
 8005fee:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff2:	095b      	lsrs	r3, r3, #5
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fa fe8c 	bl	8000d14 <__aeabi_i2f>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <CAN_Rx_Process+0x668>)
 8006000:	601a      	str	r2, [r3, #0]
			BP_SOH = Batt_SOH.m_uint16t;
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <CAN_Rx_Process+0x66c>)
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f7fa fe80 	bl	8000d0c <__aeabi_ui2f>
 800600c:	4602      	mov	r2, r0
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <CAN_Rx_Process+0x670>)
 8006010:	601a      	str	r2, [r3, #0]
	//		BP_Cycle = Batt_cycle.m_uint16;
	}
 8006012:	bf00      	nop
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	20000a48 	.word	0x20000a48
 800601c:	20000aa4 	.word	0x20000aa4
 8006020:	cccccccd 	.word	0xcccccccd
 8006024:	20000908 	.word	0x20000908
 8006028:	20000a5c 	.word	0x20000a5c
 800602c:	200007ec 	.word	0x200007ec
 8006030:	20000d90 	.word	0x20000d90
 8006034:	51eb851f 	.word	0x51eb851f
 8006038:	20000bac 	.word	0x20000bac
 800603c:	200006a0 	.word	0x200006a0
 8006040:	20000b9c 	.word	0x20000b9c

08006044 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800604a:	2300      	movs	r3, #0
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <MX_DMA_Init+0x3c>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	4a0b      	ldr	r2, [pc, #44]	; (8006080 <MX_DMA_Init+0x3c>)
 8006054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006058:	6313      	str	r3, [r2, #48]	; 0x30
 800605a:	4b09      	ldr	r3, [pc, #36]	; (8006080 <MX_DMA_Init+0x3c>)
 800605c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800605e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006062:	607b      	str	r3, [r7, #4]
 8006064:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8006066:	2200      	movs	r2, #0
 8006068:	2100      	movs	r1, #0
 800606a:	2038      	movs	r0, #56	; 0x38
 800606c:	f003 fd73 	bl	8009b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006070:	2038      	movs	r0, #56	; 0x38
 8006072:	f003 fd8c 	bl	8009b8e <HAL_NVIC_EnableIRQ>

}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40023800 	.word	0x40023800

08006084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800608a:	f107 030c 	add.w	r3, r7, #12
 800608e:	2200      	movs	r2, #0
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	605a      	str	r2, [r3, #4]
 8006094:	609a      	str	r2, [r3, #8]
 8006096:	60da      	str	r2, [r3, #12]
 8006098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	4b31      	ldr	r3, [pc, #196]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a2:	4a30      	ldr	r2, [pc, #192]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060a4:	f043 0304 	orr.w	r3, r3, #4
 80060a8:	6313      	str	r3, [r2, #48]	; 0x30
 80060aa:	4b2e      	ldr	r3, [pc, #184]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	f003 0304 	and.w	r3, r3, #4
 80060b2:	60bb      	str	r3, [r7, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	4b2a      	ldr	r3, [pc, #168]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060be:	4a29      	ldr	r2, [pc, #164]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060c0:	f043 0301 	orr.w	r3, r3, #1
 80060c4:	6313      	str	r3, [r2, #48]	; 0x30
 80060c6:	4b27      	ldr	r3, [pc, #156]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	607b      	str	r3, [r7, #4]
 80060d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	603b      	str	r3, [r7, #0]
 80060d6:	4b23      	ldr	r3, [pc, #140]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	4a22      	ldr	r2, [pc, #136]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	6313      	str	r3, [r2, #48]	; 0x30
 80060e2:	4b20      	ldr	r3, [pc, #128]	; (8006164 <MX_GPIO_Init+0xe0>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 80060ee:	2200      	movs	r2, #0
 80060f0:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80060f4:	481c      	ldr	r0, [pc, #112]	; (8006168 <MX_GPIO_Init+0xe4>)
 80060f6:	f004 faa8 	bl	800a64a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led3_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80060fa:	2200      	movs	r2, #0
 80060fc:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006100:	481a      	ldr	r0, [pc, #104]	; (800616c <MX_GPIO_Init+0xe8>)
 8006102:	f004 faa2 	bl	800a64a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 8006106:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800610a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800610c:	2301      	movs	r3, #1
 800610e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006114:	2300      	movs	r3, #0
 8006116:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006118:	f107 030c 	add.w	r3, r7, #12
 800611c:	4619      	mov	r1, r3
 800611e:	4812      	ldr	r0, [pc, #72]	; (8006168 <MX_GPIO_Init+0xe4>)
 8006120:	f004 f8de 	bl	800a2e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Led3_Pin|Buzzer_Pin;
 8006124:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006128:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800612a:	2301      	movs	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006132:	2300      	movs	r3, #0
 8006134:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006136:	f107 030c 	add.w	r3, r7, #12
 800613a:	4619      	mov	r1, r3
 800613c:	480b      	ldr	r0, [pc, #44]	; (800616c <MX_GPIO_Init+0xe8>)
 800613e:	f004 f8cf 	bl	800a2e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button2_Pin;
 8006142:	2380      	movs	r3, #128	; 0x80
 8006144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800614a:	2302      	movs	r3, #2
 800614c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 800614e:	f107 030c 	add.w	r3, r7, #12
 8006152:	4619      	mov	r1, r3
 8006154:	4805      	ldr	r0, [pc, #20]	; (800616c <MX_GPIO_Init+0xe8>)
 8006156:	f004 f8c3 	bl	800a2e0 <HAL_GPIO_Init>

}
 800615a:	bf00      	nop
 800615c:	3720      	adds	r7, #32
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	40023800 	.word	0x40023800
 8006168:	40020400 	.word	0x40020400
 800616c:	40020800 	.word	0x40020800

08006170 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006174:	4b12      	ldr	r3, [pc, #72]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006176:	4a13      	ldr	r2, [pc, #76]	; (80061c4 <MX_I2C1_Init+0x54>)
 8006178:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800617a:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <MX_I2C1_Init+0x50>)
 800617c:	4a12      	ldr	r2, [pc, #72]	; (80061c8 <MX_I2C1_Init+0x58>)
 800617e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006180:	4b0f      	ldr	r3, [pc, #60]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006182:	2200      	movs	r2, #0
 8006184:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006188:	2200      	movs	r2, #0
 800618a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <MX_I2C1_Init+0x50>)
 800618e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006192:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <MX_I2C1_Init+0x50>)
 8006196:	2200      	movs	r2, #0
 8006198:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800619a:	4b09      	ldr	r3, [pc, #36]	; (80061c0 <MX_I2C1_Init+0x50>)
 800619c:	2200      	movs	r2, #0
 800619e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061a0:	4b07      	ldr	r3, [pc, #28]	; (80061c0 <MX_I2C1_Init+0x50>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80061a6:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <MX_I2C1_Init+0x50>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80061ac:	4804      	ldr	r0, [pc, #16]	; (80061c0 <MX_I2C1_Init+0x50>)
 80061ae:	f004 fa7d 	bl	800a6ac <HAL_I2C_Init>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80061b8:	f000 fb9c 	bl	80068f4 <Error_Handler>
  }

}
 80061bc:	bf00      	nop
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000ecc 	.word	0x20000ecc
 80061c4:	40005400 	.word	0x40005400
 80061c8:	000186a0 	.word	0x000186a0

080061cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80061d0:	4b12      	ldr	r3, [pc, #72]	; (800621c <MX_I2C2_Init+0x50>)
 80061d2:	4a13      	ldr	r2, [pc, #76]	; (8006220 <MX_I2C2_Init+0x54>)
 80061d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80061d6:	4b11      	ldr	r3, [pc, #68]	; (800621c <MX_I2C2_Init+0x50>)
 80061d8:	4a12      	ldr	r2, [pc, #72]	; (8006224 <MX_I2C2_Init+0x58>)
 80061da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80061dc:	4b0f      	ldr	r3, [pc, #60]	; (800621c <MX_I2C2_Init+0x50>)
 80061de:	2200      	movs	r2, #0
 80061e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80061e2:	4b0e      	ldr	r3, [pc, #56]	; (800621c <MX_I2C2_Init+0x50>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <MX_I2C2_Init+0x50>)
 80061ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <MX_I2C2_Init+0x50>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <MX_I2C2_Init+0x50>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061fc:	4b07      	ldr	r3, [pc, #28]	; (800621c <MX_I2C2_Init+0x50>)
 80061fe:	2200      	movs	r2, #0
 8006200:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006202:	4b06      	ldr	r3, [pc, #24]	; (800621c <MX_I2C2_Init+0x50>)
 8006204:	2200      	movs	r2, #0
 8006206:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006208:	4804      	ldr	r0, [pc, #16]	; (800621c <MX_I2C2_Init+0x50>)
 800620a:	f004 fa4f 	bl	800a6ac <HAL_I2C_Init>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d001      	beq.n	8006218 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006214:	f000 fb6e 	bl	80068f4 <Error_Handler>
  }

}
 8006218:	bf00      	nop
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000f20 	.word	0x20000f20
 8006220:	40005800 	.word	0x40005800
 8006224:	00061a80 	.word	0x00061a80

08006228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08c      	sub	sp, #48	; 0x30
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006230:	f107 031c 	add.w	r3, r7, #28
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
 800623c:	60da      	str	r2, [r3, #12]
 800623e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <HAL_I2C_MspInit+0xec>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d12d      	bne.n	80062a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	4b32      	ldr	r3, [pc, #200]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	4a31      	ldr	r2, [pc, #196]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	6313      	str	r3, [r2, #48]	; 0x30
 800625a:	4b2f      	ldr	r3, [pc, #188]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	61bb      	str	r3, [r7, #24]
 8006264:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006266:	f44f 7340 	mov.w	r3, #768	; 0x300
 800626a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800626c:	2312      	movs	r3, #18
 800626e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006270:	2301      	movs	r3, #1
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006274:	2303      	movs	r3, #3
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006278:	2304      	movs	r3, #4
 800627a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627c:	f107 031c 	add.w	r3, r7, #28
 8006280:	4619      	mov	r1, r3
 8006282:	4826      	ldr	r0, [pc, #152]	; (800631c <HAL_I2C_MspInit+0xf4>)
 8006284:	f004 f82c 	bl	800a2e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006288:	2300      	movs	r3, #0
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	4b22      	ldr	r3, [pc, #136]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 800628e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 8006292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006296:	6413      	str	r3, [r2, #64]	; 0x40
 8006298:	4b1f      	ldr	r3, [pc, #124]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 800629a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a0:	617b      	str	r3, [r7, #20]
 80062a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80062a4:	e031      	b.n	800630a <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <HAL_I2C_MspInit+0xf8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d12c      	bne.n	800630a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	4b18      	ldr	r3, [pc, #96]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 80062b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062b8:	4a17      	ldr	r2, [pc, #92]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 80062ba:	f043 0302 	orr.w	r3, r3, #2
 80062be:	6313      	str	r3, [r2, #48]	; 0x30
 80062c0:	4b15      	ldr	r3, [pc, #84]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	f003 0302 	and.w	r3, r3, #2
 80062c8:	613b      	str	r3, [r7, #16]
 80062ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80062cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80062d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80062d2:	2312      	movs	r3, #18
 80062d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062d6:	2301      	movs	r3, #1
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062da:	2303      	movs	r3, #3
 80062dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80062de:	2304      	movs	r3, #4
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062e2:	f107 031c 	add.w	r3, r7, #28
 80062e6:	4619      	mov	r1, r3
 80062e8:	480c      	ldr	r0, [pc, #48]	; (800631c <HAL_I2C_MspInit+0xf4>)
 80062ea:	f003 fff9 	bl	800a2e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 80062f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f6:	4a08      	ldr	r2, [pc, #32]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 80062f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062fc:	6413      	str	r3, [r2, #64]	; 0x40
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <HAL_I2C_MspInit+0xf0>)
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
}
 800630a:	bf00      	nop
 800630c:	3730      	adds	r7, #48	; 0x30
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	40005400 	.word	0x40005400
 8006318:	40023800 	.word	0x40023800
 800631c:	40020400 	.word	0x40020400
 8006320:	40005800 	.word	0x40005800

08006324 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 8006328:	4b09      	ldr	r3, [pc, #36]	; (8006350 <MX_IWDG_Init+0x2c>)
 800632a:	4a0a      	ldr	r2, [pc, #40]	; (8006354 <MX_IWDG_Init+0x30>)
 800632c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800632e:	4b08      	ldr	r3, [pc, #32]	; (8006350 <MX_IWDG_Init+0x2c>)
 8006330:	2204      	movs	r2, #4
 8006332:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8006334:	4b06      	ldr	r3, [pc, #24]	; (8006350 <MX_IWDG_Init+0x2c>)
 8006336:	f640 72ff 	movw	r2, #4095	; 0xfff
 800633a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800633c:	4804      	ldr	r0, [pc, #16]	; (8006350 <MX_IWDG_Init+0x2c>)
 800633e:	f005 f8af 	bl	800b4a0 <HAL_IWDG_Init>
 8006342:	4603      	mov	r3, r0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8006348:	f000 fad4 	bl	80068f4 <Error_Handler>
  }

}
 800634c:	bf00      	nop
 800634e:	bd80      	pop	{r7, pc}
 8006350:	20000f74 	.word	0x20000f74
 8006354:	40003000 	.word	0x40003000

08006358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800635c:	f002 f870 	bl	8008440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006360:	f000 f864 	bl	800642c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006364:	f7ff fe8e 	bl	8006084 <MX_GPIO_Init>
  MX_DMA_Init();
 8006368:	f7ff fe6c 	bl	8006044 <MX_DMA_Init>
  MX_I2C2_Init();
 800636c:	f7ff ff2e 	bl	80061cc <MX_I2C2_Init>
  MX_TIM1_Init();
 8006370:	f001 fd20 	bl	8007db4 <MX_TIM1_Init>
  MX_CAN1_Init();
 8006374:	f7ff fa1c 	bl	80057b0 <MX_CAN1_Init>
  MX_I2C1_Init();
 8006378:	f7ff fefa 	bl	8006170 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800637c:	f001 ff7e 	bl	800827c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8006380:	f7ff f8b2 	bl	80054e8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8006384:	f001 fdb6 	bl	8007ef4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8006388:	f001 ff4e 	bl	8008228 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800638c:	f001 fdfe 	bl	8007f8c <MX_TIM3_Init>
  MX_IWDG_Init();
 8006390:	f7ff ffc8 	bl	8006324 <MX_IWDG_Init>
  MX_TIM4_Init();
 8006394:	f001 fe48 	bl	8008028 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 8006398:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800639c:	f002 f8be 	bl	800851c <HAL_Delay>
  Charger_Mode = 0;
 80063a0:	4b1d      	ldr	r3, [pc, #116]	; (8006418 <main+0xc0>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
  Eror_Code = 0;
 80063a6:	4b1d      	ldr	r3, [pc, #116]	; (800641c <main+0xc4>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	701a      	strb	r2, [r3, #0]
  CHARGER_ON_Init();
 80063ac:	f000 f8ca 	bl	8006544 <CHARGER_ON_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_isDeviceReady(0XA0);
 80063b0:	20a0      	movs	r0, #160	; 0xa0
 80063b2:	f7ff f85d 	bl	8005470 <EEPROM_isDeviceReady>
  EEPROM_WriteData(10, 15);
 80063b6:	210f      	movs	r1, #15
 80063b8:	200a      	movs	r0, #10
 80063ba:	f7ff f877 	bl	80054ac <EEPROM_WriteData>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Charger_Mode==1) 		{
 80063be:	4b16      	ldr	r3, [pc, #88]	; (8006418 <main+0xc0>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d105      	bne.n	80063d2 <main+0x7a>
		  Display_ChargeMode();
 80063c6:	f000 f98d 	bl	80066e4 <Display_ChargeMode>
		  flag_charge = 1;
 80063ca:	4b15      	ldr	r3, [pc, #84]	; (8006420 <main+0xc8>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]
 80063d0:	e008      	b.n	80063e4 <main+0x8c>
	  }
	  else if (Charger_Mode==2)	Display_ProtectionMode();
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <main+0xc0>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d102      	bne.n	80063e0 <main+0x88>
 80063da:	f000 f957 	bl	800668c <Display_ProtectionMode>
 80063de:	e001      	b.n	80063e4 <main+0x8c>
	  else						Display_StanbyMode();
 80063e0:	f000 f93e 	bl	8006660 <Display_StanbyMode>

	  if(flag_charge == 1 && Charger_Mode == 0){	// Deteksi perubahan state dari charge ke standby
 80063e4:	4b0e      	ldr	r3, [pc, #56]	; (8006420 <main+0xc8>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d110      	bne.n	800640e <main+0xb6>
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <main+0xc0>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10c      	bne.n	800640e <main+0xb6>
		  Ready_Handshaking = 0;					// Variable bantu untuk delay handshaking
 80063f4:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <main+0xcc>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(5000);
 80063fa:	f241 3088 	movw	r0, #5000	; 0x1388
 80063fe:	f002 f88d 	bl	800851c <HAL_Delay>
		  Ready_Handshaking = 1;
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <main+0xcc>)
 8006404:	2201      	movs	r2, #1
 8006406:	701a      	strb	r2, [r3, #0]
		  flag_charge = 0;
 8006408:	4b05      	ldr	r3, [pc, #20]	; (8006420 <main+0xc8>)
 800640a:	2200      	movs	r2, #0
 800640c:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 800640e:	4806      	ldr	r0, [pc, #24]	; (8006428 <main+0xd0>)
 8006410:	f005 f87f 	bl	800b512 <HAL_IWDG_Refresh>
	  if(Charger_Mode==1) 		{
 8006414:	e7d3      	b.n	80063be <main+0x66>
 8006416:	bf00      	nop
 8006418:	20000708 	.word	0x20000708
 800641c:	20000688 	.word	0x20000688
 8006420:	20000bb0 	.word	0x20000bb0
 8006424:	20000c8c 	.word	0x20000c8c
 8006428:	20000f74 	.word	0x20000f74

0800642c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b092      	sub	sp, #72	; 0x48
 8006430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006432:	f107 0318 	add.w	r3, r7, #24
 8006436:	2230      	movs	r2, #48	; 0x30
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f007 f898 	bl	800d570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006440:	1d3b      	adds	r3, r7, #4
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
 8006446:	605a      	str	r2, [r3, #4]
 8006448:	609a      	str	r2, [r3, #8]
 800644a:	60da      	str	r2, [r3, #12]
 800644c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800644e:	230a      	movs	r3, #10
 8006450:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006452:	2301      	movs	r3, #1
 8006454:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006456:	2310      	movs	r3, #16
 8006458:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800645a:	2301      	movs	r3, #1
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800645e:	2302      	movs	r3, #2
 8006460:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006462:	2300      	movs	r3, #0
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8006466:	230d      	movs	r3, #13
 8006468:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800646a:	23c3      	movs	r3, #195	; 0xc3
 800646c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800646e:	2302      	movs	r3, #2
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006472:	2304      	movs	r3, #4
 8006474:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006476:	f107 0318 	add.w	r3, r7, #24
 800647a:	4618      	mov	r0, r3
 800647c:	f005 f858 	bl	800b530 <HAL_RCC_OscConfig>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8006486:	f000 fa35 	bl	80068f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800648a:	230f      	movs	r3, #15
 800648c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800648e:	2302      	movs	r3, #2
 8006490:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006492:	2300      	movs	r3, #0
 8006494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006496:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800649a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800649c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	2103      	movs	r1, #3
 80064a6:	4618      	mov	r0, r3
 80064a8:	f005 faac 	bl	800ba04 <HAL_RCC_ClockConfig>
 80064ac:	4603      	mov	r3, r0
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d001      	beq.n	80064b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80064b2:	f000 fa1f 	bl	80068f4 <Error_Handler>
  }
}
 80064b6:	bf00      	nop
 80064b8:	3748      	adds	r7, #72	; 0x48
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a13      	ldr	r2, [pc, #76]	; (800651c <HAL_ADC_ConvCpltCallback+0x5c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d11f      	bne.n	8006512 <HAL_ADC_ConvCpltCallback+0x52>
	{
		ADC_VoutN = ADC_value[0];
 80064d2:	4b13      	ldr	r3, [pc, #76]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 80064d4:	881a      	ldrh	r2, [r3, #0]
 80064d6:	4b13      	ldr	r3, [pc, #76]	; (8006524 <HAL_ADC_ConvCpltCallback+0x64>)
 80064d8:	801a      	strh	r2, [r3, #0]
		ADC_VoutP = ADC_value[1];
 80064da:	4b11      	ldr	r3, [pc, #68]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 80064dc:	885a      	ldrh	r2, [r3, #2]
 80064de:	4b12      	ldr	r3, [pc, #72]	; (8006528 <HAL_ADC_ConvCpltCallback+0x68>)
 80064e0:	801a      	strh	r2, [r3, #0]
		ADC_Iin = ADC_value[2];
 80064e2:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 80064e4:	889a      	ldrh	r2, [r3, #4]
 80064e6:	4b11      	ldr	r3, [pc, #68]	; (800652c <HAL_ADC_ConvCpltCallback+0x6c>)
 80064e8:	801a      	strh	r2, [r3, #0]
		ADC_temp1 = ADC_value[3];
 80064ea:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 80064ec:	88da      	ldrh	r2, [r3, #6]
 80064ee:	4b10      	ldr	r3, [pc, #64]	; (8006530 <HAL_ADC_ConvCpltCallback+0x70>)
 80064f0:	801a      	strh	r2, [r3, #0]
		ADC_temp2 = ADC_value[4];
 80064f2:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 80064f4:	891a      	ldrh	r2, [r3, #8]
 80064f6:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <HAL_ADC_ConvCpltCallback+0x74>)
 80064f8:	801a      	strh	r2, [r3, #0]
		ADC_VinN = ADC_value[5];
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 80064fc:	895a      	ldrh	r2, [r3, #10]
 80064fe:	4b0e      	ldr	r3, [pc, #56]	; (8006538 <HAL_ADC_ConvCpltCallback+0x78>)
 8006500:	801a      	strh	r2, [r3, #0]
		ADC_VinP = ADC_value[6];
 8006502:	4b07      	ldr	r3, [pc, #28]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 8006504:	899a      	ldrh	r2, [r3, #12]
 8006506:	4b0d      	ldr	r3, [pc, #52]	; (800653c <HAL_ADC_ConvCpltCallback+0x7c>)
 8006508:	801a      	strh	r2, [r3, #0]
		ADC_Iout = ADC_value[7];
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <HAL_ADC_ConvCpltCallback+0x60>)
 800650c:	89da      	ldrh	r2, [r3, #14]
 800650e:	4b0c      	ldr	r3, [pc, #48]	; (8006540 <HAL_ADC_ConvCpltCallback+0x80>)
 8006510:	801a      	strh	r2, [r3, #0]
	}
}
 8006512:	bf00      	nop
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	bc80      	pop	{r7}
 800651a:	4770      	bx	lr
 800651c:	40012000 	.word	0x40012000
 8006520:	2000081c 	.word	0x2000081c
 8006524:	20000690 	.word	0x20000690
 8006528:	20000808 	.word	0x20000808
 800652c:	200006ae 	.word	0x200006ae
 8006530:	20000812 	.word	0x20000812
 8006534:	20000694 	.word	0x20000694
 8006538:	20000a1c 	.word	0x20000a1c
 800653c:	200006fc 	.word	0x200006fc
 8006540:	200006e0 	.word	0x200006e0

08006544 <CHARGER_ON_Init>:

void CHARGER_ON_Init(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
	SSD1306_Init();
 8006548:	f000 f9da 	bl	8006900 <SSD1306_Init>
	HAL_Delay(1000);
 800654c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006550:	f001 ffe4 	bl	800851c <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006554:	2000      	movs	r0, #0
 8006556:	f000 fabf 	bl	8006ad8 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 800655a:	f000 fa8f 	bl	8006a7c <SSD1306_UpdateScreen>

	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 800655e:	2201      	movs	r2, #1
 8006560:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006564:	4833      	ldr	r0, [pc, #204]	; (8006634 <CHARGER_ON_Init+0xf0>)
 8006566:	f004 f870 	bl	800a64a <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800656a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800656e:	f001 ffd5 	bl	800851c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006572:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006576:	482f      	ldr	r0, [pc, #188]	; (8006634 <CHARGER_ON_Init+0xf0>)
 8006578:	f004 f87f 	bl	800a67a <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 800657c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006580:	f001 ffcc 	bl	800851c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006588:	482a      	ldr	r0, [pc, #168]	; (8006634 <CHARGER_ON_Init+0xf0>)
 800658a:	f004 f876 	bl	800a67a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800658e:	2064      	movs	r0, #100	; 0x64
 8006590:	f001 ffc4 	bl	800851c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006594:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006598:	4826      	ldr	r0, [pc, #152]	; (8006634 <CHARGER_ON_Init+0xf0>)
 800659a:	f004 f86e 	bl	800a67a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 800659e:	2064      	movs	r0, #100	; 0x64
 80065a0:	f001 ffbc 	bl	800851c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80065a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065a8:	4822      	ldr	r0, [pc, #136]	; (8006634 <CHARGER_ON_Init+0xf0>)
 80065aa:	f004 f866 	bl	800a67a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80065ae:	2064      	movs	r0, #100	; 0x64
 80065b0:	f001 ffb4 	bl	800851c <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80065b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065b8:	481e      	ldr	r0, [pc, #120]	; (8006634 <CHARGER_ON_Init+0xf0>)
 80065ba:	f004 f85e 	bl	800a67a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80065be:	2064      	movs	r0, #100	; 0x64
 80065c0:	f001 ffac 	bl	800851c <HAL_Delay>

	CAN_Setting();
 80065c4:	f7ff f982 	bl	80058cc <CAN_Setting>

	SSD1306_GotoXY (15,10);
 80065c8:	210a      	movs	r1, #10
 80065ca:	200f      	movs	r0, #15
 80065cc:	f000 fafa 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I Charger", &Font_7x10, 1);
 80065d0:	2201      	movs	r2, #1
 80065d2:	4919      	ldr	r1, [pc, #100]	; (8006638 <CHARGER_ON_Init+0xf4>)
 80065d4:	4819      	ldr	r0, [pc, #100]	; (800663c <CHARGER_ON_Init+0xf8>)
 80065d6:	f000 fb8b 	bl	8006cf0 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 80065da:	211e      	movs	r1, #30
 80065dc:	2032      	movs	r0, #50	; 0x32
 80065de:	f000 faf1 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts ("V1.0", &Font_7x10, 1);
 80065e2:	2201      	movs	r2, #1
 80065e4:	4914      	ldr	r1, [pc, #80]	; (8006638 <CHARGER_ON_Init+0xf4>)
 80065e6:	4816      	ldr	r0, [pc, #88]	; (8006640 <CHARGER_ON_Init+0xfc>)
 80065e8:	f000 fb82 	bl	8006cf0 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80065ec:	f000 fa46 	bl	8006a7c <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 80065f0:	2000      	movs	r0, #0
 80065f2:	f000 fa71 	bl	8006ad8 <SSD1306_Fill>

	Ready_Handshaking = 1;
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <CHARGER_ON_Init+0x100>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim1);
 80065fc:	4812      	ldr	r0, [pc, #72]	; (8006648 <CHARGER_ON_Init+0x104>)
 80065fe:	f005 fc18 	bl	800be32 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006602:	2100      	movs	r1, #0
 8006604:	4810      	ldr	r0, [pc, #64]	; (8006648 <CHARGER_ON_Init+0x104>)
 8006606:	f005 fc8f 	bl	800bf28 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 800660a:	4810      	ldr	r0, [pc, #64]	; (800664c <CHARGER_ON_Init+0x108>)
 800660c:	f005 fc34 	bl	800be78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8006610:	480f      	ldr	r0, [pc, #60]	; (8006650 <CHARGER_ON_Init+0x10c>)
 8006612:	f005 fc31 	bl	800be78 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8006616:	480f      	ldr	r0, [pc, #60]	; (8006654 <CHARGER_ON_Init+0x110>)
 8006618:	f005 fc2e 	bl	800be78 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_value, 8);
 800661c:	2208      	movs	r2, #8
 800661e:	490e      	ldr	r1, [pc, #56]	; (8006658 <CHARGER_ON_Init+0x114>)
 8006620:	480e      	ldr	r0, [pc, #56]	; (800665c <CHARGER_ON_Init+0x118>)
 8006622:	f001 ffe1 	bl	80085e8 <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 8006626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800662a:	f001 ff77 	bl	800851c <HAL_Delay>
//	Charger_Mode=1;
}
 800662e:	bf00      	nop
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40020800 	.word	0x40020800
 8006638:	20000048 	.word	0x20000048
 800663c:	0800fa80 	.word	0x0800fa80
 8006640:	0800fa90 	.word	0x0800fa90
 8006644:	20000c8c 	.word	0x20000c8c
 8006648:	20001114 	.word	0x20001114
 800664c:	20001154 	.word	0x20001154
 8006650:	200010d4 	.word	0x200010d4
 8006654:	20001094 	.word	0x20001094
 8006658:	2000081c 	.word	0x2000081c
 800665c:	20000de8 	.word	0x20000de8

08006660 <Display_StanbyMode>:

void Display_StanbyMode(void){
 8006660:	b580      	push	{r7, lr}
 8006662:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006664:	2000      	movs	r0, #0
 8006666:	f000 fa37 	bl	8006ad8 <SSD1306_Fill>
	SSD1306_GotoXY (20,30);
 800666a:	211e      	movs	r1, #30
 800666c:	2014      	movs	r0, #20
 800666e:	f000 faa9 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts ("STANBY-Mode", &Font_7x10, 1);
 8006672:	2201      	movs	r2, #1
 8006674:	4903      	ldr	r1, [pc, #12]	; (8006684 <Display_StanbyMode+0x24>)
 8006676:	4804      	ldr	r0, [pc, #16]	; (8006688 <Display_StanbyMode+0x28>)
 8006678:	f000 fb3a 	bl	8006cf0 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 800667c:	f000 f9fe 	bl	8006a7c <SSD1306_UpdateScreen>
}
 8006680:	bf00      	nop
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20000048 	.word	0x20000048
 8006688:	0800fa98 	.word	0x0800fa98

0800668c <Display_ProtectionMode>:

void Display_ProtectionMode(void){
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006690:	2000      	movs	r0, #0
 8006692:	f000 fa21 	bl	8006ad8 <SSD1306_Fill>
	SSD1306_GotoXY (20,10);
 8006696:	210a      	movs	r1, #10
 8006698:	2014      	movs	r0, #20
 800669a:	f000 fa93 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts ("FAULT Protect", &Font_7x10, 1);
 800669e:	2201      	movs	r2, #1
 80066a0:	490b      	ldr	r1, [pc, #44]	; (80066d0 <Display_ProtectionMode+0x44>)
 80066a2:	480c      	ldr	r0, [pc, #48]	; (80066d4 <Display_ProtectionMode+0x48>)
 80066a4:	f000 fb24 	bl	8006cf0 <SSD1306_Puts>

	sprintf(buffer_i2c, "Eror =%2d", Eror_Code);
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <Display_ProtectionMode+0x4c>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	461a      	mov	r2, r3
 80066ae:	490b      	ldr	r1, [pc, #44]	; (80066dc <Display_ProtectionMode+0x50>)
 80066b0:	480b      	ldr	r0, [pc, #44]	; (80066e0 <Display_ProtectionMode+0x54>)
 80066b2:	f007 fbb5 	bl	800de20 <siprintf>
	SSD1306_GotoXY (20,30);
 80066b6:	211e      	movs	r1, #30
 80066b8:	2014      	movs	r0, #20
 80066ba:	f000 fa83 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80066be:	2201      	movs	r2, #1
 80066c0:	4903      	ldr	r1, [pc, #12]	; (80066d0 <Display_ProtectionMode+0x44>)
 80066c2:	4807      	ldr	r0, [pc, #28]	; (80066e0 <Display_ProtectionMode+0x54>)
 80066c4:	f000 fb14 	bl	8006cf0 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 80066c8:	f000 f9d8 	bl	8006a7c <SSD1306_UpdateScreen>
}
 80066cc:	bf00      	nop
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	20000048 	.word	0x20000048
 80066d4:	0800faa4 	.word	0x0800faa4
 80066d8:	20000688 	.word	0x20000688
 80066dc:	0800fab4 	.word	0x0800fab4
 80066e0:	20000f80 	.word	0x20000f80

080066e4 <Display_ChargeMode>:

void Display_ChargeMode(void){
 80066e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af04      	add	r7, sp, #16
	SSD1306_Fill (0);
 80066ec:	2000      	movs	r0, #0
 80066ee:	f000 f9f3 	bl	8006ad8 <SSD1306_Fill>

	sprintf(buffer_i2c, "Charger - RUN");
 80066f2:	4a69      	ldr	r2, [pc, #420]	; (8006898 <Display_ChargeMode+0x1b4>)
 80066f4:	4b69      	ldr	r3, [pc, #420]	; (800689c <Display_ChargeMode+0x1b8>)
 80066f6:	4614      	mov	r4, r2
 80066f8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066fa:	6020      	str	r0, [r4, #0]
 80066fc:	6061      	str	r1, [r4, #4]
 80066fe:	60a2      	str	r2, [r4, #8]
 8006700:	881b      	ldrh	r3, [r3, #0]
 8006702:	81a3      	strh	r3, [r4, #12]
	SSD1306_GotoXY (12,0);
 8006704:	2100      	movs	r1, #0
 8006706:	200c      	movs	r0, #12
 8006708:	f000 fa5c 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800670c:	2201      	movs	r2, #1
 800670e:	4964      	ldr	r1, [pc, #400]	; (80068a0 <Display_ChargeMode+0x1bc>)
 8006710:	4861      	ldr	r0, [pc, #388]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006712:	f000 faed 	bl	8006cf0 <SSD1306_Puts>

	sprintf(buffer_i2c, "D = %4.1f | %2d| %2.0f\r\n", dc, Batt_SOC.m_uint16t, BPack_Temp);
 8006716:	4b63      	ldr	r3, [pc, #396]	; (80068a4 <Display_ChargeMode+0x1c0>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f7f9 fec0 	bl	80004a0 <__aeabi_f2d>
 8006720:	4680      	mov	r8, r0
 8006722:	4689      	mov	r9, r1
 8006724:	4b60      	ldr	r3, [pc, #384]	; (80068a8 <Display_ChargeMode+0x1c4>)
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	461d      	mov	r5, r3
 800672a:	4b60      	ldr	r3, [pc, #384]	; (80068ac <Display_ChargeMode+0x1c8>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f7f9 feb6 	bl	80004a0 <__aeabi_f2d>
 8006734:	4603      	mov	r3, r0
 8006736:	460c      	mov	r4, r1
 8006738:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800673c:	9500      	str	r5, [sp, #0]
 800673e:	4642      	mov	r2, r8
 8006740:	464b      	mov	r3, r9
 8006742:	495b      	ldr	r1, [pc, #364]	; (80068b0 <Display_ChargeMode+0x1cc>)
 8006744:	4854      	ldr	r0, [pc, #336]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006746:	f007 fb6b 	bl	800de20 <siprintf>
//	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", dc, EEPROM_ReadData(10));
	SSD1306_GotoXY (5,13);
 800674a:	210d      	movs	r1, #13
 800674c:	2005      	movs	r0, #5
 800674e:	f000 fa39 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006752:	2201      	movs	r2, #1
 8006754:	4952      	ldr	r1, [pc, #328]	; (80068a0 <Display_ChargeMode+0x1bc>)
 8006756:	4850      	ldr	r0, [pc, #320]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006758:	f000 faca 	bl	8006cf0 <SSD1306_Puts>

	//sprintf(usart_Tx_buffer,"Test USART %d\r\n",(unsigned int)i);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 800675c:	484e      	ldr	r0, [pc, #312]	; (8006898 <Display_ChargeMode+0x1b4>)
 800675e:	f7f9 fd33 	bl	80001c8 <strlen>
 8006762:	4603      	mov	r3, r0
 8006764:	b29b      	uxth	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	494b      	ldr	r1, [pc, #300]	; (8006898 <Display_ChargeMode+0x1b4>)
 800676a:	4852      	ldr	r0, [pc, #328]	; (80068b4 <Display_ChargeMode+0x1d0>)
 800676c:	f006 fac4 	bl	800ccf8 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006770:	4849      	ldr	r0, [pc, #292]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006772:	f7f9 fd29 	bl	80001c8 <strlen>
 8006776:	4603      	mov	r3, r0
 8006778:	b29b      	uxth	r3, r3
 800677a:	461a      	mov	r2, r3
 800677c:	4946      	ldr	r1, [pc, #280]	; (8006898 <Display_ChargeMode+0x1b4>)
 800677e:	484e      	ldr	r0, [pc, #312]	; (80068b8 <Display_ChargeMode+0x1d4>)
 8006780:	f006 faba 	bl	800ccf8 <HAL_UART_Transmit_IT>

	HAL_Delay(10);
 8006784:	200a      	movs	r0, #10
 8006786:	f001 fec9 	bl	800851c <HAL_Delay>

	sprintf(buffer_i2c, "T = %4.1f | %4.1f", Temp_T1, Temp_T2);
 800678a:	4b4c      	ldr	r3, [pc, #304]	; (80068bc <Display_ChargeMode+0x1d8>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4618      	mov	r0, r3
 8006790:	f7f9 fe86 	bl	80004a0 <__aeabi_f2d>
 8006794:	4605      	mov	r5, r0
 8006796:	460e      	mov	r6, r1
 8006798:	4b49      	ldr	r3, [pc, #292]	; (80068c0 <Display_ChargeMode+0x1dc>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f7f9 fe7f 	bl	80004a0 <__aeabi_f2d>
 80067a2:	4603      	mov	r3, r0
 80067a4:	460c      	mov	r4, r1
 80067a6:	e9cd 3400 	strd	r3, r4, [sp]
 80067aa:	462a      	mov	r2, r5
 80067ac:	4633      	mov	r3, r6
 80067ae:	4945      	ldr	r1, [pc, #276]	; (80068c4 <Display_ChargeMode+0x1e0>)
 80067b0:	4839      	ldr	r0, [pc, #228]	; (8006898 <Display_ChargeMode+0x1b4>)
 80067b2:	f007 fb35 	bl	800de20 <siprintf>
	SSD1306_GotoXY (5,23);
 80067b6:	2117      	movs	r1, #23
 80067b8:	2005      	movs	r0, #5
 80067ba:	f000 fa03 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80067be:	2201      	movs	r2, #1
 80067c0:	4937      	ldr	r1, [pc, #220]	; (80068a0 <Display_ChargeMode+0x1bc>)
 80067c2:	4835      	ldr	r0, [pc, #212]	; (8006898 <Display_ChargeMode+0x1b4>)
 80067c4:	f000 fa94 	bl	8006cf0 <SSD1306_Puts>

	sprintf(buffer_i2c, "V = %4.0f | %4.2f", ADC_VoltageResult, Voltage_Charger);
 80067c8:	4b3f      	ldr	r3, [pc, #252]	; (80068c8 <Display_ChargeMode+0x1e4>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7f9 fe67 	bl	80004a0 <__aeabi_f2d>
 80067d2:	4605      	mov	r5, r0
 80067d4:	460e      	mov	r6, r1
 80067d6:	4b3d      	ldr	r3, [pc, #244]	; (80068cc <Display_ChargeMode+0x1e8>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4618      	mov	r0, r3
 80067dc:	f7f9 fe60 	bl	80004a0 <__aeabi_f2d>
 80067e0:	4603      	mov	r3, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	e9cd 3400 	strd	r3, r4, [sp]
 80067e8:	462a      	mov	r2, r5
 80067ea:	4633      	mov	r3, r6
 80067ec:	4938      	ldr	r1, [pc, #224]	; (80068d0 <Display_ChargeMode+0x1ec>)
 80067ee:	482a      	ldr	r0, [pc, #168]	; (8006898 <Display_ChargeMode+0x1b4>)
 80067f0:	f007 fb16 	bl	800de20 <siprintf>
//	sprintf(buffer_i2c, "V = %4.0f | %4.0f", ADC_Average_VoutN, ADC_Average_VoutP);
	SSD1306_GotoXY (5,33);
 80067f4:	2121      	movs	r1, #33	; 0x21
 80067f6:	2005      	movs	r0, #5
 80067f8:	f000 f9e4 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 80067fc:	2201      	movs	r2, #1
 80067fe:	4928      	ldr	r1, [pc, #160]	; (80068a0 <Display_ChargeMode+0x1bc>)
 8006800:	4825      	ldr	r0, [pc, #148]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006802:	f000 fa75 	bl	8006cf0 <SSD1306_Puts>

	sprintf(buffer_i2c, "A = %4.0f | %4.2f", ADC_Average_Iout, Current_Charger);
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <Display_ChargeMode+0x1f0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f7f9 fe48 	bl	80004a0 <__aeabi_f2d>
 8006810:	4605      	mov	r5, r0
 8006812:	460e      	mov	r6, r1
 8006814:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <Display_ChargeMode+0x1f4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fe41 	bl	80004a0 <__aeabi_f2d>
 800681e:	4603      	mov	r3, r0
 8006820:	460c      	mov	r4, r1
 8006822:	e9cd 3400 	strd	r3, r4, [sp]
 8006826:	462a      	mov	r2, r5
 8006828:	4633      	mov	r3, r6
 800682a:	492c      	ldr	r1, [pc, #176]	; (80068dc <Display_ChargeMode+0x1f8>)
 800682c:	481a      	ldr	r0, [pc, #104]	; (8006898 <Display_ChargeMode+0x1b4>)
 800682e:	f007 faf7 	bl	800de20 <siprintf>
	//(float)Batt_current.m_uint16t/100);
	SSD1306_GotoXY (5,43);
 8006832:	212b      	movs	r1, #43	; 0x2b
 8006834:	2005      	movs	r0, #5
 8006836:	f000 f9c5 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800683a:	2201      	movs	r2, #1
 800683c:	4918      	ldr	r1, [pc, #96]	; (80068a0 <Display_ChargeMode+0x1bc>)
 800683e:	4816      	ldr	r0, [pc, #88]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006840:	f000 fa56 	bl	8006cf0 <SSD1306_Puts>

	sprintf(buffer_i2c, "E =%2d--%2d ", Eror_Code, LastEror_code);
 8006844:	4b26      	ldr	r3, [pc, #152]	; (80068e0 <Display_ChargeMode+0x1fc>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	4b26      	ldr	r3, [pc, #152]	; (80068e4 <Display_ChargeMode+0x200>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	4926      	ldr	r1, [pc, #152]	; (80068e8 <Display_ChargeMode+0x204>)
 8006850:	4811      	ldr	r0, [pc, #68]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006852:	f007 fae5 	bl	800de20 <siprintf>
	SSD1306_GotoXY (5,53);
 8006856:	2135      	movs	r1, #53	; 0x35
 8006858:	2005      	movs	r0, #5
 800685a:	f000 f9b3 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800685e:	2201      	movs	r2, #1
 8006860:	490f      	ldr	r1, [pc, #60]	; (80068a0 <Display_ChargeMode+0x1bc>)
 8006862:	480d      	ldr	r0, [pc, #52]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006864:	f000 fa44 	bl	8006cf0 <SSD1306_Puts>

	sprintf(buffer_i2c, "| %lx", UNIQUE_Code);
 8006868:	4b20      	ldr	r3, [pc, #128]	; (80068ec <Display_ChargeMode+0x208>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	461a      	mov	r2, r3
 800686e:	4920      	ldr	r1, [pc, #128]	; (80068f0 <Display_ChargeMode+0x20c>)
 8006870:	4809      	ldr	r0, [pc, #36]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006872:	f007 fad5 	bl	800de20 <siprintf>
	SSD1306_GotoXY (68,53);
 8006876:	2135      	movs	r1, #53	; 0x35
 8006878:	2044      	movs	r0, #68	; 0x44
 800687a:	f000 f9a3 	bl	8006bc4 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 800687e:	2201      	movs	r2, #1
 8006880:	4907      	ldr	r1, [pc, #28]	; (80068a0 <Display_ChargeMode+0x1bc>)
 8006882:	4805      	ldr	r0, [pc, #20]	; (8006898 <Display_ChargeMode+0x1b4>)
 8006884:	f000 fa34 	bl	8006cf0 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006888:	f000 f8f8 	bl	8006a7c <SSD1306_UpdateScreen>
}
 800688c:	bf00      	nop
 800688e:	3704      	adds	r7, #4
 8006890:	46bd      	mov	sp, r7
 8006892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006896:	bf00      	nop
 8006898:	20000f80 	.word	0x20000f80
 800689c:	0800fac0 	.word	0x0800fac0
 80068a0:	20000048 	.word	0x20000048
 80068a4:	200006bc 	.word	0x200006bc
 80068a8:	20000a5c 	.word	0x20000a5c
 80068ac:	20000a54 	.word	0x20000a54
 80068b0:	0800fad0 	.word	0x0800fad0
 80068b4:	20001194 	.word	0x20001194
 80068b8:	200011d4 	.word	0x200011d4
 80068bc:	20000a4c 	.word	0x20000a4c
 80068c0:	2000069c 	.word	0x2000069c
 80068c4:	0800faec 	.word	0x0800faec
 80068c8:	20000a50 	.word	0x20000a50
 80068cc:	20000ba8 	.word	0x20000ba8
 80068d0:	0800fb00 	.word	0x0800fb00
 80068d4:	20000d98 	.word	0x20000d98
 80068d8:	20000d78 	.word	0x20000d78
 80068dc:	0800fb14 	.word	0x0800fb14
 80068e0:	20000688 	.word	0x20000688
 80068e4:	200006e8 	.word	0x200006e8
 80068e8:	0800fb28 	.word	0x0800fb28
 80068ec:	20000ab4 	.word	0x20000ab4
 80068f0:	0800fb38 	.word	0x0800fb38

080068f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bc80      	pop	{r7}
 80068fe:	4770      	bx	lr

08006900 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006906:	f000 fa19 	bl	8006d3c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800690a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800690e:	2201      	movs	r2, #1
 8006910:	2178      	movs	r1, #120	; 0x78
 8006912:	4858      	ldr	r0, [pc, #352]	; (8006a74 <SSD1306_Init+0x174>)
 8006914:	f004 f9fa 	bl	800ad0c <HAL_I2C_IsDeviceReady>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800691e:	2300      	movs	r3, #0
 8006920:	e0a4      	b.n	8006a6c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 25000;
 8006922:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8006926:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006928:	e002      	b.n	8006930 <SSD1306_Init+0x30>
		p--;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	3b01      	subs	r3, #1
 800692e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1f9      	bne.n	800692a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8006936:	22ae      	movs	r2, #174	; 0xae
 8006938:	2100      	movs	r1, #0
 800693a:	2078      	movs	r0, #120	; 0x78
 800693c:	f000 fa6c 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8006940:	2220      	movs	r2, #32
 8006942:	2100      	movs	r1, #0
 8006944:	2078      	movs	r0, #120	; 0x78
 8006946:	f000 fa67 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800694a:	2210      	movs	r2, #16
 800694c:	2100      	movs	r1, #0
 800694e:	2078      	movs	r0, #120	; 0x78
 8006950:	f000 fa62 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006954:	22b0      	movs	r2, #176	; 0xb0
 8006956:	2100      	movs	r1, #0
 8006958:	2078      	movs	r0, #120	; 0x78
 800695a:	f000 fa5d 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800695e:	22c8      	movs	r2, #200	; 0xc8
 8006960:	2100      	movs	r1, #0
 8006962:	2078      	movs	r0, #120	; 0x78
 8006964:	f000 fa58 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006968:	2200      	movs	r2, #0
 800696a:	2100      	movs	r1, #0
 800696c:	2078      	movs	r0, #120	; 0x78
 800696e:	f000 fa53 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006972:	2210      	movs	r2, #16
 8006974:	2100      	movs	r1, #0
 8006976:	2078      	movs	r0, #120	; 0x78
 8006978:	f000 fa4e 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800697c:	2240      	movs	r2, #64	; 0x40
 800697e:	2100      	movs	r1, #0
 8006980:	2078      	movs	r0, #120	; 0x78
 8006982:	f000 fa49 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006986:	2281      	movs	r2, #129	; 0x81
 8006988:	2100      	movs	r1, #0
 800698a:	2078      	movs	r0, #120	; 0x78
 800698c:	f000 fa44 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006990:	22ff      	movs	r2, #255	; 0xff
 8006992:	2100      	movs	r1, #0
 8006994:	2078      	movs	r0, #120	; 0x78
 8006996:	f000 fa3f 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800699a:	22a1      	movs	r2, #161	; 0xa1
 800699c:	2100      	movs	r1, #0
 800699e:	2078      	movs	r0, #120	; 0x78
 80069a0:	f000 fa3a 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80069a4:	22a6      	movs	r2, #166	; 0xa6
 80069a6:	2100      	movs	r1, #0
 80069a8:	2078      	movs	r0, #120	; 0x78
 80069aa:	f000 fa35 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80069ae:	22a8      	movs	r2, #168	; 0xa8
 80069b0:	2100      	movs	r1, #0
 80069b2:	2078      	movs	r0, #120	; 0x78
 80069b4:	f000 fa30 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80069b8:	223f      	movs	r2, #63	; 0x3f
 80069ba:	2100      	movs	r1, #0
 80069bc:	2078      	movs	r0, #120	; 0x78
 80069be:	f000 fa2b 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80069c2:	22a4      	movs	r2, #164	; 0xa4
 80069c4:	2100      	movs	r1, #0
 80069c6:	2078      	movs	r0, #120	; 0x78
 80069c8:	f000 fa26 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80069cc:	22d3      	movs	r2, #211	; 0xd3
 80069ce:	2100      	movs	r1, #0
 80069d0:	2078      	movs	r0, #120	; 0x78
 80069d2:	f000 fa21 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80069d6:	2200      	movs	r2, #0
 80069d8:	2100      	movs	r1, #0
 80069da:	2078      	movs	r0, #120	; 0x78
 80069dc:	f000 fa1c 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80069e0:	22d5      	movs	r2, #213	; 0xd5
 80069e2:	2100      	movs	r1, #0
 80069e4:	2078      	movs	r0, #120	; 0x78
 80069e6:	f000 fa17 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80069ea:	22f0      	movs	r2, #240	; 0xf0
 80069ec:	2100      	movs	r1, #0
 80069ee:	2078      	movs	r0, #120	; 0x78
 80069f0:	f000 fa12 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80069f4:	22d9      	movs	r2, #217	; 0xd9
 80069f6:	2100      	movs	r1, #0
 80069f8:	2078      	movs	r0, #120	; 0x78
 80069fa:	f000 fa0d 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80069fe:	2222      	movs	r2, #34	; 0x22
 8006a00:	2100      	movs	r1, #0
 8006a02:	2078      	movs	r0, #120	; 0x78
 8006a04:	f000 fa08 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006a08:	22da      	movs	r2, #218	; 0xda
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	2078      	movs	r0, #120	; 0x78
 8006a0e:	f000 fa03 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8006a12:	2212      	movs	r2, #18
 8006a14:	2100      	movs	r1, #0
 8006a16:	2078      	movs	r0, #120	; 0x78
 8006a18:	f000 f9fe 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006a1c:	22db      	movs	r2, #219	; 0xdb
 8006a1e:	2100      	movs	r1, #0
 8006a20:	2078      	movs	r0, #120	; 0x78
 8006a22:	f000 f9f9 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8006a26:	2220      	movs	r2, #32
 8006a28:	2100      	movs	r1, #0
 8006a2a:	2078      	movs	r0, #120	; 0x78
 8006a2c:	f000 f9f4 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006a30:	228d      	movs	r2, #141	; 0x8d
 8006a32:	2100      	movs	r1, #0
 8006a34:	2078      	movs	r0, #120	; 0x78
 8006a36:	f000 f9ef 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8006a3a:	2214      	movs	r2, #20
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	2078      	movs	r0, #120	; 0x78
 8006a40:	f000 f9ea 	bl	8006e18 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006a44:	22af      	movs	r2, #175	; 0xaf
 8006a46:	2100      	movs	r1, #0
 8006a48:	2078      	movs	r0, #120	; 0x78
 8006a4a:	f000 f9e5 	bl	8006e18 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f000 f842 	bl	8006ad8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006a54:	f000 f812 	bl	8006a7c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8006a58:	4b07      	ldr	r3, [pc, #28]	; (8006a78 <SSD1306_Init+0x178>)
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006a5e:	4b06      	ldr	r3, [pc, #24]	; (8006a78 <SSD1306_Init+0x178>)
 8006a60:	2200      	movs	r2, #0
 8006a62:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <SSD1306_Init+0x178>)
 8006a66:	2201      	movs	r2, #1
 8006a68:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006a6a:	2301      	movs	r3, #1
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	3708      	adds	r7, #8
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	20000f20 	.word	0x20000f20
 8006a78:	20000660 	.word	0x20000660

08006a7c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006a82:	2300      	movs	r3, #0
 8006a84:	71fb      	strb	r3, [r7, #7]
 8006a86:	e01d      	b.n	8006ac4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	3b50      	subs	r3, #80	; 0x50
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	2100      	movs	r1, #0
 8006a92:	2078      	movs	r0, #120	; 0x78
 8006a94:	f000 f9c0 	bl	8006e18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	2078      	movs	r0, #120	; 0x78
 8006a9e:	f000 f9bb 	bl	8006e18 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006aa2:	2210      	movs	r2, #16
 8006aa4:	2100      	movs	r1, #0
 8006aa6:	2078      	movs	r0, #120	; 0x78
 8006aa8:	f000 f9b6 	bl	8006e18 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006aac:	79fb      	ldrb	r3, [r7, #7]
 8006aae:	01db      	lsls	r3, r3, #7
 8006ab0:	4a08      	ldr	r2, [pc, #32]	; (8006ad4 <SSD1306_UpdateScreen+0x58>)
 8006ab2:	441a      	add	r2, r3
 8006ab4:	2380      	movs	r3, #128	; 0x80
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	2078      	movs	r0, #120	; 0x78
 8006aba:	f000 f953 	bl	8006d64 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	71fb      	strb	r3, [r7, #7]
 8006ac4:	79fb      	ldrb	r3, [r7, #7]
 8006ac6:	2b07      	cmp	r3, #7
 8006ac8:	d9de      	bls.n	8006a88 <SSD1306_UpdateScreen+0xc>
	}
}
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000260 	.word	0x20000260

08006ad8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	4603      	mov	r3, r0
 8006ae0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8006ae2:	79fb      	ldrb	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <SSD1306_Fill+0x14>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e001      	b.n	8006af0 <SSD1306_Fill+0x18>
 8006aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006af4:	4619      	mov	r1, r3
 8006af6:	4803      	ldr	r0, [pc, #12]	; (8006b04 <SSD1306_Fill+0x2c>)
 8006af8:	f006 fd3a 	bl	800d570 <memset>
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	20000260 	.word	0x20000260

08006b08 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	4603      	mov	r3, r0
 8006b10:	80fb      	strh	r3, [r7, #6]
 8006b12:	460b      	mov	r3, r1
 8006b14:	80bb      	strh	r3, [r7, #4]
 8006b16:	4613      	mov	r3, r2
 8006b18:	70fb      	strb	r3, [r7, #3]
	if (
 8006b1a:	88fb      	ldrh	r3, [r7, #6]
 8006b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b1e:	d848      	bhi.n	8006bb2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006b20:	88bb      	ldrh	r3, [r7, #4]
 8006b22:	2b3f      	cmp	r3, #63	; 0x3f
 8006b24:	d845      	bhi.n	8006bb2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006b26:	4b25      	ldr	r3, [pc, #148]	; (8006bbc <SSD1306_DrawPixel+0xb4>)
 8006b28:	791b      	ldrb	r3, [r3, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d006      	beq.n	8006b3c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006b2e:	78fb      	ldrb	r3, [r7, #3]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d11a      	bne.n	8006b78 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	88bb      	ldrh	r3, [r7, #4]
 8006b46:	08db      	lsrs	r3, r3, #3
 8006b48:	b298      	uxth	r0, r3
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	01db      	lsls	r3, r3, #7
 8006b4e:	4413      	add	r3, r2
 8006b50:	4a1b      	ldr	r2, [pc, #108]	; (8006bc0 <SSD1306_DrawPixel+0xb8>)
 8006b52:	5cd3      	ldrb	r3, [r2, r3]
 8006b54:	b25a      	sxtb	r2, r3
 8006b56:	88bb      	ldrh	r3, [r7, #4]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	b25b      	sxtb	r3, r3
 8006b64:	4313      	orrs	r3, r2
 8006b66:	b259      	sxtb	r1, r3
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	01db      	lsls	r3, r3, #7
 8006b6e:	4413      	add	r3, r2
 8006b70:	b2c9      	uxtb	r1, r1
 8006b72:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <SSD1306_DrawPixel+0xb8>)
 8006b74:	54d1      	strb	r1, [r2, r3]
 8006b76:	e01d      	b.n	8006bb4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006b78:	88fa      	ldrh	r2, [r7, #6]
 8006b7a:	88bb      	ldrh	r3, [r7, #4]
 8006b7c:	08db      	lsrs	r3, r3, #3
 8006b7e:	b298      	uxth	r0, r3
 8006b80:	4603      	mov	r3, r0
 8006b82:	01db      	lsls	r3, r3, #7
 8006b84:	4413      	add	r3, r2
 8006b86:	4a0e      	ldr	r2, [pc, #56]	; (8006bc0 <SSD1306_DrawPixel+0xb8>)
 8006b88:	5cd3      	ldrb	r3, [r2, r3]
 8006b8a:	b25a      	sxtb	r2, r3
 8006b8c:	88bb      	ldrh	r3, [r7, #4]
 8006b8e:	f003 0307 	and.w	r3, r3, #7
 8006b92:	2101      	movs	r1, #1
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	43db      	mvns	r3, r3
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	b259      	sxtb	r1, r3
 8006ba2:	88fa      	ldrh	r2, [r7, #6]
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	01db      	lsls	r3, r3, #7
 8006ba8:	4413      	add	r3, r2
 8006baa:	b2c9      	uxtb	r1, r1
 8006bac:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <SSD1306_DrawPixel+0xb8>)
 8006bae:	54d1      	strb	r1, [r2, r3]
 8006bb0:	e000      	b.n	8006bb4 <SSD1306_DrawPixel+0xac>
		return;
 8006bb2:	bf00      	nop
	}
}
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bc80      	pop	{r7}
 8006bba:	4770      	bx	lr
 8006bbc:	20000660 	.word	0x20000660
 8006bc0:	20000260 	.word	0x20000260

08006bc4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	460a      	mov	r2, r1
 8006bce:	80fb      	strh	r3, [r7, #6]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006bd4:	4a05      	ldr	r2, [pc, #20]	; (8006bec <SSD1306_GotoXY+0x28>)
 8006bd6:	88fb      	ldrh	r3, [r7, #6]
 8006bd8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006bda:	4a04      	ldr	r2, [pc, #16]	; (8006bec <SSD1306_GotoXY+0x28>)
 8006bdc:	88bb      	ldrh	r3, [r7, #4]
 8006bde:	8053      	strh	r3, [r2, #2]
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bc80      	pop	{r7}
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000660 	.word	0x20000660

08006bf0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	71fb      	strb	r3, [r7, #7]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006c00:	4b3a      	ldr	r3, [pc, #232]	; (8006cec <SSD1306_Putc+0xfc>)
 8006c02:	881b      	ldrh	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	4413      	add	r3, r2
	if (
 8006c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0e:	dc07      	bgt.n	8006c20 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8006c10:	4b36      	ldr	r3, [pc, #216]	; (8006cec <SSD1306_Putc+0xfc>)
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	461a      	mov	r2, r3
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	785b      	ldrb	r3, [r3, #1]
 8006c1a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006c1c:	2b3f      	cmp	r3, #63	; 0x3f
 8006c1e:	dd01      	ble.n	8006c24 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8006c20:	2300      	movs	r3, #0
 8006c22:	e05e      	b.n	8006ce2 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
 8006c28:	e04b      	b.n	8006cc2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	3b20      	subs	r3, #32
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	7849      	ldrb	r1, [r1, #1]
 8006c36:	fb01 f303 	mul.w	r3, r1, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	440b      	add	r3, r1
 8006c40:	005b      	lsls	r3, r3, #1
 8006c42:	4413      	add	r3, r2
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	e030      	b.n	8006cb0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8006c4e:	68fa      	ldr	r2, [r7, #12]
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	fa02 f303 	lsl.w	r3, r2, r3
 8006c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d010      	beq.n	8006c80 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006c5e:	4b23      	ldr	r3, [pc, #140]	; (8006cec <SSD1306_Putc+0xfc>)
 8006c60:	881a      	ldrh	r2, [r3, #0]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4413      	add	r3, r2
 8006c68:	b298      	uxth	r0, r3
 8006c6a:	4b20      	ldr	r3, [pc, #128]	; (8006cec <SSD1306_Putc+0xfc>)
 8006c6c:	885a      	ldrh	r2, [r3, #2]
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	79ba      	ldrb	r2, [r7, #6]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	f7ff ff45 	bl	8006b08 <SSD1306_DrawPixel>
 8006c7e:	e014      	b.n	8006caa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <SSD1306_Putc+0xfc>)
 8006c82:	881a      	ldrh	r2, [r3, #0]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	4413      	add	r3, r2
 8006c8a:	b298      	uxth	r0, r3
 8006c8c:	4b17      	ldr	r3, [pc, #92]	; (8006cec <SSD1306_Putc+0xfc>)
 8006c8e:	885a      	ldrh	r2, [r3, #2]
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4413      	add	r3, r2
 8006c96:	b299      	uxth	r1, r3
 8006c98:	79bb      	ldrb	r3, [r7, #6]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	bf0c      	ite	eq
 8006c9e:	2301      	moveq	r3, #1
 8006ca0:	2300      	movne	r3, #0
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f7ff ff2f 	bl	8006b08 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3301      	adds	r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d3c8      	bcc.n	8006c4e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d3ad      	bcc.n	8006c2a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006cce:	4b07      	ldr	r3, [pc, #28]	; (8006cec <SSD1306_Putc+0xfc>)
 8006cd0:	881a      	ldrh	r2, [r3, #0]
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	4b03      	ldr	r3, [pc, #12]	; (8006cec <SSD1306_Putc+0xfc>)
 8006cde:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8006ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000660 	.word	0x20000660

08006cf0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006cfe:	e012      	b.n	8006d26 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	79fa      	ldrb	r2, [r7, #7]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f7ff ff71 	bl	8006bf0 <SSD1306_Putc>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d002      	beq.n	8006d20 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	e008      	b.n	8006d32 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e8      	bne.n	8006d00 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	781b      	ldrb	r3, [r3, #0]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8006d42:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <ssd1306_I2C_Init+0x24>)
 8006d44:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006d46:	e002      	b.n	8006d4e <ssd1306_I2C_Init+0x12>
		p--;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1f9      	bne.n	8006d48 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	00055730 	.word	0x00055730

08006d64 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006d64:	b5b0      	push	{r4, r5, r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	603a      	str	r2, [r7, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	71fb      	strb	r3, [r7, #7]
 8006d72:	460b      	mov	r3, r1
 8006d74:	71bb      	strb	r3, [r7, #6]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80bb      	strh	r3, [r7, #4]
 8006d7a:	466b      	mov	r3, sp
 8006d7c:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8006d7e:	88bb      	ldrh	r3, [r7, #4]
 8006d80:	1c58      	adds	r0, r3, #1
 8006d82:	1e43      	subs	r3, r0, #1
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	4603      	mov	r3, r0
 8006d88:	4619      	mov	r1, r3
 8006d8a:	f04f 0200 	mov.w	r2, #0
 8006d8e:	f04f 0300 	mov.w	r3, #0
 8006d92:	f04f 0400 	mov.w	r4, #0
 8006d96:	00d4      	lsls	r4, r2, #3
 8006d98:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006d9c:	00cb      	lsls	r3, r1, #3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4619      	mov	r1, r3
 8006da2:	f04f 0200 	mov.w	r2, #0
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	f04f 0400 	mov.w	r4, #0
 8006dae:	00d4      	lsls	r4, r2, #3
 8006db0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8006db4:	00cb      	lsls	r3, r1, #3
 8006db6:	4603      	mov	r3, r0
 8006db8:	3307      	adds	r3, #7
 8006dba:	08db      	lsrs	r3, r3, #3
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	ebad 0d03 	sub.w	sp, sp, r3
 8006dc2:	ab02      	add	r3, sp, #8
 8006dc4:	3300      	adds	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	79ba      	ldrb	r2, [r7, #6]
 8006dcc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8006dce:	2301      	movs	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
 8006dd2:	e00a      	b.n	8006dea <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8006dd4:	7dfb      	ldrb	r3, [r7, #23]
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	441a      	add	r2, r3
 8006ddc:	7dfb      	ldrb	r3, [r7, #23]
 8006dde:	7811      	ldrb	r1, [r2, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	3301      	adds	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	88ba      	ldrh	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d2ef      	bcs.n	8006dd4 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	b299      	uxth	r1, r3
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	88b8      	ldrh	r0, [r7, #4]
 8006dfc:	230a      	movs	r3, #10
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	4603      	mov	r3, r0
 8006e02:	4804      	ldr	r0, [pc, #16]	; (8006e14 <ssd1306_I2C_WriteMulti+0xb0>)
 8006e04:	f003 fd8a 	bl	800a91c <HAL_I2C_Master_Transmit>
 8006e08:	46ad      	mov	sp, r5
}
 8006e0a:	bf00      	nop
 8006e0c:	3718      	adds	r7, #24
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bdb0      	pop	{r4, r5, r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000f20 	.word	0x20000f20

08006e18 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af02      	add	r7, sp, #8
 8006e1e:	4603      	mov	r3, r0
 8006e20:	71fb      	strb	r3, [r7, #7]
 8006e22:	460b      	mov	r3, r1
 8006e24:	71bb      	strb	r3, [r7, #6]
 8006e26:	4613      	mov	r3, r2
 8006e28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8006e2a:	79bb      	ldrb	r3, [r7, #6]
 8006e2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8006e2e:	797b      	ldrb	r3, [r7, #5]
 8006e30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	b299      	uxth	r1, r3
 8006e36:	f107 020c 	add.w	r2, r7, #12
 8006e3a:	230a      	movs	r3, #10
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	2302      	movs	r3, #2
 8006e40:	4803      	ldr	r0, [pc, #12]	; (8006e50 <ssd1306_I2C_Write+0x38>)
 8006e42:	f003 fd6b 	bl	800a91c <HAL_I2C_Master_Transmit>
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000f20 	.word	0x20000f20

08006e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	4b0f      	ldr	r3, [pc, #60]	; (8006e9c <HAL_MspInit+0x48>)
 8006e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e62:	4a0e      	ldr	r2, [pc, #56]	; (8006e9c <HAL_MspInit+0x48>)
 8006e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e68:	6453      	str	r3, [r2, #68]	; 0x44
 8006e6a:	4b0c      	ldr	r3, [pc, #48]	; (8006e9c <HAL_MspInit+0x48>)
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e76:	2300      	movs	r3, #0
 8006e78:	603b      	str	r3, [r7, #0]
 8006e7a:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <HAL_MspInit+0x48>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	4a07      	ldr	r2, [pc, #28]	; (8006e9c <HAL_MspInit+0x48>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e84:	6413      	str	r3, [r2, #64]	; 0x40
 8006e86:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <HAL_MspInit+0x48>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bc80      	pop	{r7}
 8006e9a:	4770      	bx	lr
 8006e9c:	40023800 	.word	0x40023800

08006ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ea4:	bf00      	nop
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006eb0:	e7fe      	b.n	8006eb0 <HardFault_Handler+0x4>

08006eb2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006eb6:	e7fe      	b.n	8006eb6 <MemManage_Handler+0x4>

08006eb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006ebc:	e7fe      	b.n	8006ebc <BusFault_Handler+0x4>

08006ebe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ec2:	e7fe      	b.n	8006ec2 <UsageFault_Handler+0x4>

08006ec4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ec8:	bf00      	nop
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bc80      	pop	{r7}
 8006ece:	4770      	bx	lr

08006ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ed4:	bf00      	nop
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr

08006edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ee0:	bf00      	nop
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bc80      	pop	{r7}
 8006ee6:	4770      	bx	lr

08006ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006eec:	f001 fafa 	bl	80084e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ef0:	bf00      	nop
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006ef8:	4802      	ldr	r0, [pc, #8]	; (8006f04 <CAN1_RX1_IRQHandler+0x10>)
 8006efa:	f002 fb2f 	bl	800955c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8006efe:	bf00      	nop
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	20000ea4 	.word	0x20000ea4

08006f08 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006f0c:	4802      	ldr	r0, [pc, #8]	; (8006f18 <CAN1_SCE_IRQHandler+0x10>)
 8006f0e:	f002 fb25 	bl	800955c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8006f12:	bf00      	nop
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000ea4 	.word	0x20000ea4
 8006f1c:	00000000 	.word	0x00000000

08006f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006f20:	b5b0      	push	{r4, r5, r7, lr}
 8006f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// *********************** Sensing Process (ADC average) ******************************

	ADC_SUM_Iin = ADC_SUM_Iin - ADC_Array_Iin[i];		//delete old data
 8006f24:	4ba2      	ldr	r3, [pc, #648]	; (80071b0 <TIM2_IRQHandler+0x290>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4aa2      	ldr	r2, [pc, #648]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006f2a:	7812      	ldrb	r2, [r2, #0]
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	4aa2      	ldr	r2, [pc, #648]	; (80071b8 <TIM2_IRQHandler+0x298>)
 8006f30:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	4a9e      	ldr	r2, [pc, #632]	; (80071b0 <TIM2_IRQHandler+0x290>)
 8006f38:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN - ADC_Array_VinN[i];
 8006f3a:	4ba0      	ldr	r3, [pc, #640]	; (80071bc <TIM2_IRQHandler+0x29c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a9d      	ldr	r2, [pc, #628]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006f40:	7812      	ldrb	r2, [r2, #0]
 8006f42:	4611      	mov	r1, r2
 8006f44:	4a9e      	ldr	r2, [pc, #632]	; (80071c0 <TIM2_IRQHandler+0x2a0>)
 8006f46:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	4a9b      	ldr	r2, [pc, #620]	; (80071bc <TIM2_IRQHandler+0x29c>)
 8006f4e:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP - ADC_Array_VinP[i];
 8006f50:	4b9c      	ldr	r3, [pc, #624]	; (80071c4 <TIM2_IRQHandler+0x2a4>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a97      	ldr	r2, [pc, #604]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006f56:	7812      	ldrb	r2, [r2, #0]
 8006f58:	4611      	mov	r1, r2
 8006f5a:	4a9b      	ldr	r2, [pc, #620]	; (80071c8 <TIM2_IRQHandler+0x2a8>)
 8006f5c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	4a98      	ldr	r2, [pc, #608]	; (80071c4 <TIM2_IRQHandler+0x2a4>)
 8006f64:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout - ADC_Array_Iout[i];
 8006f66:	4b99      	ldr	r3, [pc, #612]	; (80071cc <TIM2_IRQHandler+0x2ac>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a92      	ldr	r2, [pc, #584]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4a97      	ldr	r2, [pc, #604]	; (80071d0 <TIM2_IRQHandler+0x2b0>)
 8006f72:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006f76:	1a9b      	subs	r3, r3, r2
 8006f78:	4a94      	ldr	r2, [pc, #592]	; (80071cc <TIM2_IRQHandler+0x2ac>)
 8006f7a:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN - ADC_Array_VoutN[i];
 8006f7c:	4b95      	ldr	r3, [pc, #596]	; (80071d4 <TIM2_IRQHandler+0x2b4>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a8c      	ldr	r2, [pc, #560]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006f82:	7812      	ldrb	r2, [r2, #0]
 8006f84:	4611      	mov	r1, r2
 8006f86:	4a94      	ldr	r2, [pc, #592]	; (80071d8 <TIM2_IRQHandler+0x2b8>)
 8006f88:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	4a91      	ldr	r2, [pc, #580]	; (80071d4 <TIM2_IRQHandler+0x2b4>)
 8006f90:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP - ADC_Array_VoutP[i];
 8006f92:	4b92      	ldr	r3, [pc, #584]	; (80071dc <TIM2_IRQHandler+0x2bc>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a87      	ldr	r2, [pc, #540]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006f98:	7812      	ldrb	r2, [r2, #0]
 8006f9a:	4611      	mov	r1, r2
 8006f9c:	4a90      	ldr	r2, [pc, #576]	; (80071e0 <TIM2_IRQHandler+0x2c0>)
 8006f9e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8006fa2:	1a9b      	subs	r3, r3, r2
 8006fa4:	4a8d      	ldr	r2, [pc, #564]	; (80071dc <TIM2_IRQHandler+0x2bc>)
 8006fa6:	6013      	str	r3, [r2, #0]

	ADC_Array_Iin[i] = ADC_Iin;				//save data from ADC read
 8006fa8:	4b82      	ldr	r3, [pc, #520]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	4b8d      	ldr	r3, [pc, #564]	; (80071e4 <TIM2_IRQHandler+0x2c4>)
 8006fb0:	8819      	ldrh	r1, [r3, #0]
 8006fb2:	4b81      	ldr	r3, [pc, #516]	; (80071b8 <TIM2_IRQHandler+0x298>)
 8006fb4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinN[i] = ADC_VinN;
 8006fb8:	4b7e      	ldr	r3, [pc, #504]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	4b8a      	ldr	r3, [pc, #552]	; (80071e8 <TIM2_IRQHandler+0x2c8>)
 8006fc0:	8819      	ldrh	r1, [r3, #0]
 8006fc2:	4b7f      	ldr	r3, [pc, #508]	; (80071c0 <TIM2_IRQHandler+0x2a0>)
 8006fc4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinP[i] = ADC_VinP;
 8006fc8:	4b7a      	ldr	r3, [pc, #488]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	4b87      	ldr	r3, [pc, #540]	; (80071ec <TIM2_IRQHandler+0x2cc>)
 8006fd0:	8819      	ldrh	r1, [r3, #0]
 8006fd2:	4b7d      	ldr	r3, [pc, #500]	; (80071c8 <TIM2_IRQHandler+0x2a8>)
 8006fd4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Iout[i] = ADC_Iout;
 8006fd8:	4b76      	ldr	r3, [pc, #472]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	4b84      	ldr	r3, [pc, #528]	; (80071f0 <TIM2_IRQHandler+0x2d0>)
 8006fe0:	8819      	ldrh	r1, [r3, #0]
 8006fe2:	4b7b      	ldr	r3, [pc, #492]	; (80071d0 <TIM2_IRQHandler+0x2b0>)
 8006fe4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutN[i] = ADC_VoutN;
 8006fe8:	4b72      	ldr	r3, [pc, #456]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	4b81      	ldr	r3, [pc, #516]	; (80071f4 <TIM2_IRQHandler+0x2d4>)
 8006ff0:	8819      	ldrh	r1, [r3, #0]
 8006ff2:	4b79      	ldr	r3, [pc, #484]	; (80071d8 <TIM2_IRQHandler+0x2b8>)
 8006ff4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutP[i] = ADC_VoutP;
 8006ff8:	4b6e      	ldr	r3, [pc, #440]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	4b7e      	ldr	r3, [pc, #504]	; (80071f8 <TIM2_IRQHandler+0x2d8>)
 8007000:	8819      	ldrh	r1, [r3, #0]
 8007002:	4b77      	ldr	r3, [pc, #476]	; (80071e0 <TIM2_IRQHandler+0x2c0>)
 8007004:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	ADC_SUM_Iin = ADC_SUM_Iin + ADC_Array_Iin[i];		//summing data and add new data
 8007008:	4b6a      	ldr	r3, [pc, #424]	; (80071b4 <TIM2_IRQHandler+0x294>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	461a      	mov	r2, r3
 800700e:	4b6a      	ldr	r3, [pc, #424]	; (80071b8 <TIM2_IRQHandler+0x298>)
 8007010:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007014:	461a      	mov	r2, r3
 8007016:	4b66      	ldr	r3, [pc, #408]	; (80071b0 <TIM2_IRQHandler+0x290>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4413      	add	r3, r2
 800701c:	4a64      	ldr	r2, [pc, #400]	; (80071b0 <TIM2_IRQHandler+0x290>)
 800701e:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN + ADC_Array_VinN[i];
 8007020:	4b64      	ldr	r3, [pc, #400]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	4b66      	ldr	r3, [pc, #408]	; (80071c0 <TIM2_IRQHandler+0x2a0>)
 8007028:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800702c:	461a      	mov	r2, r3
 800702e:	4b63      	ldr	r3, [pc, #396]	; (80071bc <TIM2_IRQHandler+0x29c>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4413      	add	r3, r2
 8007034:	4a61      	ldr	r2, [pc, #388]	; (80071bc <TIM2_IRQHandler+0x29c>)
 8007036:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP + ADC_Array_VinP[i];
 8007038:	4b5e      	ldr	r3, [pc, #376]	; (80071b4 <TIM2_IRQHandler+0x294>)
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	4b62      	ldr	r3, [pc, #392]	; (80071c8 <TIM2_IRQHandler+0x2a8>)
 8007040:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007044:	461a      	mov	r2, r3
 8007046:	4b5f      	ldr	r3, [pc, #380]	; (80071c4 <TIM2_IRQHandler+0x2a4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4413      	add	r3, r2
 800704c:	4a5d      	ldr	r2, [pc, #372]	; (80071c4 <TIM2_IRQHandler+0x2a4>)
 800704e:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout + ADC_Array_Iout[i];
 8007050:	4b58      	ldr	r3, [pc, #352]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	461a      	mov	r2, r3
 8007056:	4b5e      	ldr	r3, [pc, #376]	; (80071d0 <TIM2_IRQHandler+0x2b0>)
 8007058:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800705c:	461a      	mov	r2, r3
 800705e:	4b5b      	ldr	r3, [pc, #364]	; (80071cc <TIM2_IRQHandler+0x2ac>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4413      	add	r3, r2
 8007064:	4a59      	ldr	r2, [pc, #356]	; (80071cc <TIM2_IRQHandler+0x2ac>)
 8007066:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN + ADC_Array_VoutN[i];
 8007068:	4b52      	ldr	r3, [pc, #328]	; (80071b4 <TIM2_IRQHandler+0x294>)
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	4b5a      	ldr	r3, [pc, #360]	; (80071d8 <TIM2_IRQHandler+0x2b8>)
 8007070:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007074:	461a      	mov	r2, r3
 8007076:	4b57      	ldr	r3, [pc, #348]	; (80071d4 <TIM2_IRQHandler+0x2b4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4413      	add	r3, r2
 800707c:	4a55      	ldr	r2, [pc, #340]	; (80071d4 <TIM2_IRQHandler+0x2b4>)
 800707e:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP + ADC_Array_VoutP[i];
 8007080:	4b4c      	ldr	r3, [pc, #304]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	4b56      	ldr	r3, [pc, #344]	; (80071e0 <TIM2_IRQHandler+0x2c0>)
 8007088:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800708c:	461a      	mov	r2, r3
 800708e:	4b53      	ldr	r3, [pc, #332]	; (80071dc <TIM2_IRQHandler+0x2bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4413      	add	r3, r2
 8007094:	4a51      	ldr	r2, [pc, #324]	; (80071dc <TIM2_IRQHandler+0x2bc>)
 8007096:	6013      	str	r3, [r2, #0]

	ADC_Average_Iin = (float) ADC_SUM_Iin / maxdata;	//calculate average data
 8007098:	4b45      	ldr	r3, [pc, #276]	; (80071b0 <TIM2_IRQHandler+0x290>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f7f9 fe39 	bl	8000d14 <__aeabi_i2f>
 80070a2:	4603      	mov	r3, r0
 80070a4:	4955      	ldr	r1, [pc, #340]	; (80071fc <TIM2_IRQHandler+0x2dc>)
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7f9 ff3c 	bl	8000f24 <__aeabi_fdiv>
 80070ac:	4603      	mov	r3, r0
 80070ae:	461a      	mov	r2, r3
 80070b0:	4b53      	ldr	r3, [pc, #332]	; (8007200 <TIM2_IRQHandler+0x2e0>)
 80070b2:	601a      	str	r2, [r3, #0]
	ADC_Average_VinN = (float) ADC_SUM_VinN / maxdata;
 80070b4:	4b41      	ldr	r3, [pc, #260]	; (80071bc <TIM2_IRQHandler+0x29c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7f9 fe2b 	bl	8000d14 <__aeabi_i2f>
 80070be:	4603      	mov	r3, r0
 80070c0:	494e      	ldr	r1, [pc, #312]	; (80071fc <TIM2_IRQHandler+0x2dc>)
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7f9 ff2e 	bl	8000f24 <__aeabi_fdiv>
 80070c8:	4603      	mov	r3, r0
 80070ca:	461a      	mov	r2, r3
 80070cc:	4b4d      	ldr	r3, [pc, #308]	; (8007204 <TIM2_IRQHandler+0x2e4>)
 80070ce:	601a      	str	r2, [r3, #0]
	ADC_Average_VinP = (float) ADC_SUM_VinP / maxdata;
 80070d0:	4b3c      	ldr	r3, [pc, #240]	; (80071c4 <TIM2_IRQHandler+0x2a4>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7f9 fe1d 	bl	8000d14 <__aeabi_i2f>
 80070da:	4603      	mov	r3, r0
 80070dc:	4947      	ldr	r1, [pc, #284]	; (80071fc <TIM2_IRQHandler+0x2dc>)
 80070de:	4618      	mov	r0, r3
 80070e0:	f7f9 ff20 	bl	8000f24 <__aeabi_fdiv>
 80070e4:	4603      	mov	r3, r0
 80070e6:	461a      	mov	r2, r3
 80070e8:	4b47      	ldr	r3, [pc, #284]	; (8007208 <TIM2_IRQHandler+0x2e8>)
 80070ea:	601a      	str	r2, [r3, #0]
	ADC_Average_Iout = (float) ADC_SUM_Iout / maxdata;
 80070ec:	4b37      	ldr	r3, [pc, #220]	; (80071cc <TIM2_IRQHandler+0x2ac>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7f9 fe0f 	bl	8000d14 <__aeabi_i2f>
 80070f6:	4603      	mov	r3, r0
 80070f8:	4940      	ldr	r1, [pc, #256]	; (80071fc <TIM2_IRQHandler+0x2dc>)
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7f9 ff12 	bl	8000f24 <__aeabi_fdiv>
 8007100:	4603      	mov	r3, r0
 8007102:	461a      	mov	r2, r3
 8007104:	4b41      	ldr	r3, [pc, #260]	; (800720c <TIM2_IRQHandler+0x2ec>)
 8007106:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutN = (float) ADC_SUM_VoutN / maxdata;
 8007108:	4b32      	ldr	r3, [pc, #200]	; (80071d4 <TIM2_IRQHandler+0x2b4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7f9 fe01 	bl	8000d14 <__aeabi_i2f>
 8007112:	4603      	mov	r3, r0
 8007114:	4939      	ldr	r1, [pc, #228]	; (80071fc <TIM2_IRQHandler+0x2dc>)
 8007116:	4618      	mov	r0, r3
 8007118:	f7f9 ff04 	bl	8000f24 <__aeabi_fdiv>
 800711c:	4603      	mov	r3, r0
 800711e:	461a      	mov	r2, r3
 8007120:	4b3b      	ldr	r3, [pc, #236]	; (8007210 <TIM2_IRQHandler+0x2f0>)
 8007122:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutP = (float) ADC_SUM_VoutP / maxdata;
 8007124:	4b2d      	ldr	r3, [pc, #180]	; (80071dc <TIM2_IRQHandler+0x2bc>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4618      	mov	r0, r3
 800712a:	f7f9 fdf3 	bl	8000d14 <__aeabi_i2f>
 800712e:	4603      	mov	r3, r0
 8007130:	4932      	ldr	r1, [pc, #200]	; (80071fc <TIM2_IRQHandler+0x2dc>)
 8007132:	4618      	mov	r0, r3
 8007134:	f7f9 fef6 	bl	8000f24 <__aeabi_fdiv>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	4b35      	ldr	r3, [pc, #212]	; (8007214 <TIM2_IRQHandler+0x2f4>)
 800713e:	601a      	str	r2, [r3, #0]

	i++;
 8007140:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	3301      	adds	r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <TIM2_IRQHandler+0x294>)
 800714a:	701a      	strb	r2, [r3, #0]
	i = i % maxdata;
 800714c:	4b19      	ldr	r3, [pc, #100]	; (80071b4 <TIM2_IRQHandler+0x294>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	4a31      	ldr	r2, [pc, #196]	; (8007218 <TIM2_IRQHandler+0x2f8>)
 8007152:	fba2 1203 	umull	r1, r2, r2, r3
 8007156:	0952      	lsrs	r2, r2, #5
 8007158:	2164      	movs	r1, #100	; 0x64
 800715a:	fb01 f202 	mul.w	r2, r1, r2
 800715e:	1a9b      	subs	r3, r3, r2
 8007160:	b2da      	uxtb	r2, r3
 8007162:	4b14      	ldr	r3, [pc, #80]	; (80071b4 <TIM2_IRQHandler+0x294>)
 8007164:	701a      	strb	r2, [r3, #0]

	//Current value calculation and calibration
	Current_Charger = 0.0125*ADC_Average_Iout - 24.845 - OFFSET_CurrentSense;
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <TIM2_IRQHandler+0x2ec>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 f998 	bl	80004a0 <__aeabi_f2d>
 8007170:	a30b      	add	r3, pc, #44	; (adr r3, 80071a0 <TIM2_IRQHandler+0x280>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	f7f9 f9eb 	bl	8000550 <__aeabi_dmul>
 800717a:	4603      	mov	r3, r0
 800717c:	460c      	mov	r4, r1
 800717e:	4618      	mov	r0, r3
 8007180:	4621      	mov	r1, r4
 8007182:	a309      	add	r3, pc, #36	; (adr r3, 80071a8 <TIM2_IRQHandler+0x288>)
 8007184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007188:	f7f9 f82a 	bl	80001e0 <__aeabi_dsub>
 800718c:	4603      	mov	r3, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4625      	mov	r5, r4
 8007192:	461c      	mov	r4, r3
 8007194:	4b21      	ldr	r3, [pc, #132]	; (800721c <TIM2_IRQHandler+0x2fc>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	e042      	b.n	8007220 <TIM2_IRQHandler+0x300>
 800719a:	bf00      	nop
 800719c:	f3af 8000 	nop.w
 80071a0:	9999999a 	.word	0x9999999a
 80071a4:	3f899999 	.word	0x3f899999
 80071a8:	eb851eb8 	.word	0xeb851eb8
 80071ac:	4038d851 	.word	0x4038d851
 80071b0:	200006ec 	.word	0x200006ec
 80071b4:	20001084 	.word	0x20001084
 80071b8:	2000070c 	.word	0x2000070c
 80071bc:	200009ec 	.word	0x200009ec
 80071c0:	20000ad4 	.word	0x20000ad4
 80071c4:	20000c98 	.word	0x20000c98
 80071c8:	20000bc0 	.word	0x20000bc0
 80071cc:	20000a40 	.word	0x20000a40
 80071d0:	20000924 	.word	0x20000924
 80071d4:	2000067c 	.word	0x2000067c
 80071d8:	20000838 	.word	0x20000838
 80071dc:	200006f4 	.word	0x200006f4
 80071e0:	20000cac 	.word	0x20000cac
 80071e4:	200006ae 	.word	0x200006ae
 80071e8:	20000a1c 	.word	0x20000a1c
 80071ec:	200006fc 	.word	0x200006fc
 80071f0:	200006e0 	.word	0x200006e0
 80071f4:	20000690 	.word	0x20000690
 80071f8:	20000808 	.word	0x20000808
 80071fc:	42c80000 	.word	0x42c80000
 8007200:	20000918 	.word	0x20000918
 8007204:	200007e4 	.word	0x200007e4
 8007208:	20000a30 	.word	0x20000a30
 800720c:	20000d98 	.word	0x20000d98
 8007210:	20000680 	.word	0x20000680
 8007214:	20000804 	.word	0x20000804
 8007218:	51eb851f 	.word	0x51eb851f
 800721c:	200007e0 	.word	0x200007e0
 8007220:	4618      	mov	r0, r3
 8007222:	f7f9 f93d 	bl	80004a0 <__aeabi_f2d>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4620      	mov	r0, r4
 800722c:	4629      	mov	r1, r5
 800722e:	f7f8 ffd7 	bl	80001e0 <__aeabi_dsub>
 8007232:	4603      	mov	r3, r0
 8007234:	460c      	mov	r4, r1
 8007236:	4618      	mov	r0, r3
 8007238:	4621      	mov	r1, r4
 800723a:	f7f9 fc61 	bl	8000b00 <__aeabi_d2f>
 800723e:	4602      	mov	r2, r0
 8007240:	4bb5      	ldr	r3, [pc, #724]	; (8007518 <TIM2_IRQHandler+0x5f8>)
 8007242:	601a      	str	r2, [r3, #0]
	OFFSET_Calibration = 0.0125*ADC_Average_Iout - 24.845;
 8007244:	4bb5      	ldr	r3, [pc, #724]	; (800751c <TIM2_IRQHandler+0x5fc>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f7f9 f929 	bl	80004a0 <__aeabi_f2d>
 800724e:	a3a4      	add	r3, pc, #656	; (adr r3, 80074e0 <TIM2_IRQHandler+0x5c0>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 f97c 	bl	8000550 <__aeabi_dmul>
 8007258:	4603      	mov	r3, r0
 800725a:	460c      	mov	r4, r1
 800725c:	4618      	mov	r0, r3
 800725e:	4621      	mov	r1, r4
 8007260:	a3a1      	add	r3, pc, #644	; (adr r3, 80074e8 <TIM2_IRQHandler+0x5c8>)
 8007262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007266:	f7f8 ffbb 	bl	80001e0 <__aeabi_dsub>
 800726a:	4603      	mov	r3, r0
 800726c:	460c      	mov	r4, r1
 800726e:	4618      	mov	r0, r3
 8007270:	4621      	mov	r1, r4
 8007272:	f7f9 fc45 	bl	8000b00 <__aeabi_d2f>
 8007276:	4602      	mov	r2, r0
 8007278:	4ba9      	ldr	r3, [pc, #676]	; (8007520 <TIM2_IRQHandler+0x600>)
 800727a:	601a      	str	r2, [r3, #0]
	if (Current_Charger<=0)
 800727c:	4ba6      	ldr	r3, [pc, #664]	; (8007518 <TIM2_IRQHandler+0x5f8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	4618      	mov	r0, r3
 8007286:	f7f9 ff41 	bl	800110c <__aeabi_fcmple>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <TIM2_IRQHandler+0x378>
		Current_Charger = 0;
 8007290:	4ba1      	ldr	r3, [pc, #644]	; (8007518 <TIM2_IRQHandler+0x5f8>)
 8007292:	f04f 0200 	mov.w	r2, #0
 8007296:	601a      	str	r2, [r3, #0]

	//Voltage value calculation and calibration
	ADC_VoltageResult = fabs (ADC_Average_VoutN - ADC_Average_VoutP);
 8007298:	4ba2      	ldr	r3, [pc, #648]	; (8007524 <TIM2_IRQHandler+0x604>)
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	4ba2      	ldr	r3, [pc, #648]	; (8007528 <TIM2_IRQHandler+0x608>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4619      	mov	r1, r3
 80072a2:	4610      	mov	r0, r2
 80072a4:	f7f9 fc80 	bl	8000ba8 <__aeabi_fsub>
 80072a8:	4603      	mov	r3, r0
 80072aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80072ae:	4a9f      	ldr	r2, [pc, #636]	; (800752c <TIM2_IRQHandler+0x60c>)
 80072b0:	6013      	str	r3, [r2, #0]
	Voltage_Charger = ADC_VoltageResult*0.0275-0.018;
 80072b2:	4b9e      	ldr	r3, [pc, #632]	; (800752c <TIM2_IRQHandler+0x60c>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7f9 f8f2 	bl	80004a0 <__aeabi_f2d>
 80072bc:	a38c      	add	r3, pc, #560	; (adr r3, 80074f0 <TIM2_IRQHandler+0x5d0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	f7f9 f945 	bl	8000550 <__aeabi_dmul>
 80072c6:	4603      	mov	r3, r0
 80072c8:	460c      	mov	r4, r1
 80072ca:	4618      	mov	r0, r3
 80072cc:	4621      	mov	r1, r4
 80072ce:	a38a      	add	r3, pc, #552	; (adr r3, 80074f8 <TIM2_IRQHandler+0x5d8>)
 80072d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d4:	f7f8 ff84 	bl	80001e0 <__aeabi_dsub>
 80072d8:	4603      	mov	r3, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	4618      	mov	r0, r3
 80072de:	4621      	mov	r1, r4
 80072e0:	f7f9 fc0e 	bl	8000b00 <__aeabi_d2f>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b92      	ldr	r3, [pc, #584]	; (8007530 <TIM2_IRQHandler+0x610>)
 80072e8:	601a      	str	r2, [r3, #0]
	if(Voltage_Charger <= 0)
 80072ea:	4b91      	ldr	r3, [pc, #580]	; (8007530 <TIM2_IRQHandler+0x610>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f04f 0100 	mov.w	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7f9 ff0a 	bl	800110c <__aeabi_fcmple>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <TIM2_IRQHandler+0x3e6>
		Voltage_Charger = 0;
 80072fe:	4b8c      	ldr	r3, [pc, #560]	; (8007530 <TIM2_IRQHandler+0x610>)
 8007300:	f04f 0200 	mov.w	r2, #0
 8007304:	601a      	str	r2, [r3, #0]

	Temp_delay_calc++;
 8007306:	4b8b      	ldr	r3, [pc, #556]	; (8007534 <TIM2_IRQHandler+0x614>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	3301      	adds	r3, #1
 800730c:	b2da      	uxtb	r2, r3
 800730e:	4b89      	ldr	r3, [pc, #548]	; (8007534 <TIM2_IRQHandler+0x614>)
 8007310:	701a      	strb	r2, [r3, #0]

	if(Temp_delay_calc >= 100)
 8007312:	4b88      	ldr	r3, [pc, #544]	; (8007534 <TIM2_IRQHandler+0x614>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b63      	cmp	r3, #99	; 0x63
 8007318:	d96e      	bls.n	80073f8 <TIM2_IRQHandler+0x4d8>
	{
		Temp_delay_calc = 0;
 800731a:	4b86      	ldr	r3, [pc, #536]	; (8007534 <TIM2_IRQHandler+0x614>)
 800731c:	2200      	movs	r2, #0
 800731e:	701a      	strb	r2, [r3, #0]
		Res_T1 = ADC_temp1*10000/(3900-ADC_temp1); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8007320:	4b85      	ldr	r3, [pc, #532]	; (8007538 <TIM2_IRQHandler+0x618>)
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	f242 7310 	movw	r3, #10000	; 0x2710
 800732a:	fb03 f202 	mul.w	r2, r3, r2
 800732e:	4b82      	ldr	r3, [pc, #520]	; (8007538 <TIM2_IRQHandler+0x618>)
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 8007336:	330c      	adds	r3, #12
 8007338:	fb92 f3f3 	sdiv	r3, r2, r3
 800733c:	4618      	mov	r0, r3
 800733e:	f7f9 fce9 	bl	8000d14 <__aeabi_i2f>
 8007342:	4602      	mov	r2, r0
 8007344:	4b7d      	ldr	r3, [pc, #500]	; (800753c <TIM2_IRQHandler+0x61c>)
 8007346:	601a      	str	r2, [r3, #0]
		Temp_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8007348:	4b7c      	ldr	r3, [pc, #496]	; (800753c <TIM2_IRQHandler+0x61c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4618      	mov	r0, r3
 800734e:	f7f9 f8a7 	bl	80004a0 <__aeabi_f2d>
 8007352:	4603      	mov	r3, r0
 8007354:	460c      	mov	r4, r1
 8007356:	4618      	mov	r0, r3
 8007358:	4621      	mov	r1, r4
 800735a:	f008 f94f 	bl	800f5fc <log>
 800735e:	a368      	add	r3, pc, #416	; (adr r3, 8007500 <TIM2_IRQHandler+0x5e0>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	f7f9 f8f4 	bl	8000550 <__aeabi_dmul>
 8007368:	4603      	mov	r3, r0
 800736a:	460c      	mov	r4, r1
 800736c:	4618      	mov	r0, r3
 800736e:	4621      	mov	r1, r4
 8007370:	a365      	add	r3, pc, #404	; (adr r3, 8007508 <TIM2_IRQHandler+0x5e8>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f7f8 ff35 	bl	80001e4 <__adddf3>
 800737a:	4603      	mov	r3, r0
 800737c:	460c      	mov	r4, r1
 800737e:	4618      	mov	r0, r3
 8007380:	4621      	mov	r1, r4
 8007382:	f7f9 fbbd 	bl	8000b00 <__aeabi_d2f>
 8007386:	4602      	mov	r2, r0
 8007388:	4b6d      	ldr	r3, [pc, #436]	; (8007540 <TIM2_IRQHandler+0x620>)
 800738a:	601a      	str	r2, [r3, #0]
		Res_T2 = ADC_temp2*10000/(3900-ADC_temp2);
 800738c:	4b6d      	ldr	r3, [pc, #436]	; (8007544 <TIM2_IRQHandler+0x624>)
 800738e:	881b      	ldrh	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	f242 7310 	movw	r3, #10000	; 0x2710
 8007396:	fb03 f202 	mul.w	r2, r3, r2
 800739a:	4b6a      	ldr	r3, [pc, #424]	; (8007544 <TIM2_IRQHandler+0x624>)
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80073a2:	330c      	adds	r3, #12
 80073a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f9 fcb3 	bl	8000d14 <__aeabi_i2f>
 80073ae:	4602      	mov	r2, r0
 80073b0:	4b65      	ldr	r3, [pc, #404]	; (8007548 <TIM2_IRQHandler+0x628>)
 80073b2:	601a      	str	r2, [r3, #0]
		Temp_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80073b4:	4b64      	ldr	r3, [pc, #400]	; (8007548 <TIM2_IRQHandler+0x628>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7f9 f871 	bl	80004a0 <__aeabi_f2d>
 80073be:	4603      	mov	r3, r0
 80073c0:	460c      	mov	r4, r1
 80073c2:	4618      	mov	r0, r3
 80073c4:	4621      	mov	r1, r4
 80073c6:	f008 f919 	bl	800f5fc <log>
 80073ca:	a34d      	add	r3, pc, #308	; (adr r3, 8007500 <TIM2_IRQHandler+0x5e0>)
 80073cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d0:	f7f9 f8be 	bl	8000550 <__aeabi_dmul>
 80073d4:	4603      	mov	r3, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	4618      	mov	r0, r3
 80073da:	4621      	mov	r1, r4
 80073dc:	a34a      	add	r3, pc, #296	; (adr r3, 8007508 <TIM2_IRQHandler+0x5e8>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	f7f8 feff 	bl	80001e4 <__adddf3>
 80073e6:	4603      	mov	r3, r0
 80073e8:	460c      	mov	r4, r1
 80073ea:	4618      	mov	r0, r3
 80073ec:	4621      	mov	r1, r4
 80073ee:	f7f9 fb87 	bl	8000b00 <__aeabi_d2f>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b55      	ldr	r3, [pc, #340]	; (800754c <TIM2_IRQHandler+0x62c>)
 80073f6:	601a      	str	r2, [r3, #0]
	// *********************** end of Sensing Process (ADC average) ******************************


	// ***********************Charge or standby State ******************************

	if (Charger_Mode == 1){	//charge mode
 80073f8:	4b55      	ldr	r3, [pc, #340]	; (8007550 <TIM2_IRQHandler+0x630>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f040 8104 	bne.w	800760a <TIM2_IRQHandler+0x6ea>

		if(	flag_trip_overvoltage == 1		||
 8007402:	4b54      	ldr	r3, [pc, #336]	; (8007554 <TIM2_IRQHandler+0x634>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d027      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			flag_trip_overtemperature == 1	||
 800740a:	4b53      	ldr	r3, [pc, #332]	; (8007558 <TIM2_IRQHandler+0x638>)
 800740c:	781b      	ldrb	r3, [r3, #0]
		if(	flag_trip_overvoltage == 1		||
 800740e:	2b01      	cmp	r3, #1
 8007410:	d023      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			flag_trip_undertemperature == 1	||
 8007412:	4b52      	ldr	r3, [pc, #328]	; (800755c <TIM2_IRQHandler+0x63c>)
 8007414:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overtemperature == 1	||
 8007416:	2b01      	cmp	r3, #1
 8007418:	d01f      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			flag_trip_overcurrentcharge == 1||
 800741a:	4b51      	ldr	r3, [pc, #324]	; (8007560 <TIM2_IRQHandler+0x640>)
 800741c:	781b      	ldrb	r3, [r3, #0]
			flag_trip_undertemperature == 1	||
 800741e:	2b01      	cmp	r3, #1
 8007420:	d01b      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			flag_trip_SOCOverCharge == 1	||
 8007422:	4b50      	ldr	r3, [pc, #320]	; (8007564 <TIM2_IRQHandler+0x644>)
 8007424:	781b      	ldrb	r3, [r3, #0]
			flag_trip_overcurrentcharge == 1||
 8007426:	2b01      	cmp	r3, #1
 8007428:	d017      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			flag_trip_shortcircuit == 1		||
 800742a:	4b4f      	ldr	r3, [pc, #316]	; (8007568 <TIM2_IRQHandler+0x648>)
 800742c:	781b      	ldrb	r3, [r3, #0]
			flag_trip_SOCOverCharge == 1	||
 800742e:	2b01      	cmp	r3, #1
 8007430:	d013      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			flag_trip_systemfailure == 1	||
 8007432:	4b4e      	ldr	r3, [pc, #312]	; (800756c <TIM2_IRQHandler+0x64c>)
 8007434:	781b      	ldrb	r3, [r3, #0]
			flag_trip_shortcircuit == 1		||
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00f      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			Flag_ChargerShortCircuit == 1	||
 800743a:	4b4d      	ldr	r3, [pc, #308]	; (8007570 <TIM2_IRQHandler+0x650>)
 800743c:	781b      	ldrb	r3, [r3, #0]
			flag_trip_systemfailure == 1	||
 800743e:	2b01      	cmp	r3, #1
 8007440:	d00b      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverCurrent == 1	||
 8007442:	4b4c      	ldr	r3, [pc, #304]	; (8007574 <TIM2_IRQHandler+0x654>)
 8007444:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerShortCircuit == 1	||
 8007446:	2b01      	cmp	r3, #1
 8007448:	d007      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverTemperature == 1||
 800744a:	4b4b      	ldr	r3, [pc, #300]	; (8007578 <TIM2_IRQHandler+0x658>)
 800744c:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverCurrent == 1	||
 800744e:	2b01      	cmp	r3, #1
 8007450:	d003      	beq.n	800745a <TIM2_IRQHandler+0x53a>
			Flag_ChargerOverVoltage == 1	)
 8007452:	4b4a      	ldr	r3, [pc, #296]	; (800757c <TIM2_IRQHandler+0x65c>)
 8007454:	781b      	ldrb	r3, [r3, #0]
			Flag_ChargerOverTemperature == 1||
 8007456:	2b01      	cmp	r3, #1
 8007458:	d11b      	bne.n	8007492 <TIM2_IRQHandler+0x572>
			{
				duty=0;
 800745a:	4b49      	ldr	r3, [pc, #292]	; (8007580 <TIM2_IRQHandler+0x660>)
 800745c:	f04f 0200 	mov.w	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
				htim1.Instance->CCR1=duty*TIM1->ARR;
 8007462:	4b48      	ldr	r3, [pc, #288]	; (8007584 <TIM2_IRQHandler+0x664>)
 8007464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007466:	4618      	mov	r0, r3
 8007468:	f7f9 fc50 	bl	8000d0c <__aeabi_ui2f>
 800746c:	4602      	mov	r2, r0
 800746e:	4b44      	ldr	r3, [pc, #272]	; (8007580 <TIM2_IRQHandler+0x660>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f7f9 fca1 	bl	8000dbc <__aeabi_fmul>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	4b42      	ldr	r3, [pc, #264]	; (8007588 <TIM2_IRQHandler+0x668>)
 8007480:	681c      	ldr	r4, [r3, #0]
 8007482:	4610      	mov	r0, r2
 8007484:	f7f9 fe60 	bl	8001148 <__aeabi_f2uiz>
 8007488:	4603      	mov	r3, r0
 800748a:	6363      	str	r3, [r4, #52]	; 0x34
				Charger_Mode = 2;
 800748c:	4b30      	ldr	r3, [pc, #192]	; (8007550 <TIM2_IRQHandler+0x630>)
 800748e:	2202      	movs	r2, #2
 8007490:	701a      	strb	r2, [r3, #0]
			}

		Fault_Check();
 8007492:	f000 fae9 	bl	8007a68 <Fault_Check>
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8007496:	4b3b      	ldr	r3, [pc, #236]	; (8007584 <TIM2_IRQHandler+0x664>)
 8007498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749a:	4618      	mov	r0, r3
 800749c:	f7f9 fc36 	bl	8000d0c <__aeabi_ui2f>
 80074a0:	4602      	mov	r2, r0
 80074a2:	4b37      	ldr	r3, [pc, #220]	; (8007580 <TIM2_IRQHandler+0x660>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f7f9 fc87 	bl	8000dbc <__aeabi_fmul>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b35      	ldr	r3, [pc, #212]	; (8007588 <TIM2_IRQHandler+0x668>)
 80074b4:	681c      	ldr	r4, [r3, #0]
 80074b6:	4610      	mov	r0, r2
 80074b8:	f7f9 fe46 	bl	8001148 <__aeabi_f2uiz>
 80074bc:	4603      	mov	r3, r0
 80074be:	6363      	str	r3, [r4, #52]	; 0x34
		if(duty>=0.9)
 80074c0:	4b2f      	ldr	r3, [pc, #188]	; (8007580 <TIM2_IRQHandler+0x660>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f8 ffeb 	bl	80004a0 <__aeabi_f2d>
 80074ca:	a311      	add	r3, pc, #68	; (adr r3, 8007510 <TIM2_IRQHandler+0x5f0>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	f7f9 fac4 	bl	8000a5c <__aeabi_dcmpge>
 80074d4:	4603      	mov	r3, r0
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	e058      	b.n	800758c <TIM2_IRQHandler+0x66c>
 80074da:	bf00      	nop
 80074dc:	f3af 8000 	nop.w
 80074e0:	9999999a 	.word	0x9999999a
 80074e4:	3f899999 	.word	0x3f899999
 80074e8:	eb851eb8 	.word	0xeb851eb8
 80074ec:	4038d851 	.word	0x4038d851
 80074f0:	c28f5c29 	.word	0xc28f5c29
 80074f4:	3f9c28f5 	.word	0x3f9c28f5
 80074f8:	8d4fdf3b 	.word	0x8d4fdf3b
 80074fc:	3f926e97 	.word	0x3f926e97
 8007500:	cccccccd 	.word	0xcccccccd
 8007504:	c0380ccc 	.word	0xc0380ccc
 8007508:	b851eb85 	.word	0xb851eb85
 800750c:	406ecd1e 	.word	0x406ecd1e
 8007510:	cccccccd 	.word	0xcccccccd
 8007514:	3feccccc 	.word	0x3feccccc
 8007518:	20000d78 	.word	0x20000d78
 800751c:	20000d98 	.word	0x20000d98
 8007520:	200006d8 	.word	0x200006d8
 8007524:	20000680 	.word	0x20000680
 8007528:	20000804 	.word	0x20000804
 800752c:	20000a50 	.word	0x20000a50
 8007530:	20000ba8 	.word	0x20000ba8
 8007534:	2000108c 	.word	0x2000108c
 8007538:	20000812 	.word	0x20000812
 800753c:	20000818 	.word	0x20000818
 8007540:	20000a4c 	.word	0x20000a4c
 8007544:	20000694 	.word	0x20000694
 8007548:	20000ad0 	.word	0x20000ad0
 800754c:	2000069c 	.word	0x2000069c
 8007550:	20000708 	.word	0x20000708
 8007554:	20000db4 	.word	0x20000db4
 8007558:	200007d4 	.word	0x200007d4
 800755c:	20000910 	.word	0x20000910
 8007560:	20000ab0 	.word	0x20000ab0
 8007564:	20000693 	.word	0x20000693
 8007568:	200006ac 	.word	0x200006ac
 800756c:	200006cc 	.word	0x200006cc
 8007570:	20000810 	.word	0x20000810
 8007574:	200007f4 	.word	0x200007f4
 8007578:	200006e9 	.word	0x200006e9
 800757c:	20000814 	.word	0x20000814
 8007580:	20000d7c 	.word	0x20000d7c
 8007584:	40010000 	.word	0x40010000
 8007588:	20001114 	.word	0x20001114
 800758c:	d003      	beq.n	8007596 <TIM2_IRQHandler+0x676>
			duty=0;
 800758e:	4b78      	ldr	r3, [pc, #480]	; (8007770 <TIM2_IRQHandler+0x850>)
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

		if(Batt_SOC.m_uint16t>70){
 8007596:	4b77      	ldr	r3, [pc, #476]	; (8007774 <TIM2_IRQHandler+0x854>)
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	2b46      	cmp	r3, #70	; 0x46
 800759c:	d901      	bls.n	80075a2 <TIM2_IRQHandler+0x682>
			Constant_Voltage();
 800759e:	f7fb fffd 	bl	800359c <Constant_Voltage>
		}

		if(Batt_SOC.m_uint16t<=70){
 80075a2:	4b74      	ldr	r3, [pc, #464]	; (8007774 <TIM2_IRQHandler+0x854>)
 80075a4:	881b      	ldrh	r3, [r3, #0]
 80075a6:	2b46      	cmp	r3, #70	; 0x46
 80075a8:	d801      	bhi.n	80075ae <TIM2_IRQHandler+0x68e>
			Constant_Current();
 80075aa:	f7f9 ff71 	bl	8001490 <Constant_Current>
		}

		//Clearing Charger Decrease rating flag
		if (flag_Derating == 1 && Temp_T1<=(SetProtection_Temp1-15) && Temp_T2<=(SetProtection_Temp2-25)){
 80075ae:	4b72      	ldr	r3, [pc, #456]	; (8007778 <TIM2_IRQHandler+0x858>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d122      	bne.n	80075fc <TIM2_IRQHandler+0x6dc>
 80075b6:	4b71      	ldr	r3, [pc, #452]	; (800777c <TIM2_IRQHandler+0x85c>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	3b0f      	subs	r3, #15
 80075bc:	4618      	mov	r0, r3
 80075be:	f7f9 fba9 	bl	8000d14 <__aeabi_i2f>
 80075c2:	4602      	mov	r2, r0
 80075c4:	4b6e      	ldr	r3, [pc, #440]	; (8007780 <TIM2_IRQHandler+0x860>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f7f9 fda8 	bl	8001120 <__aeabi_fcmpge>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d012      	beq.n	80075fc <TIM2_IRQHandler+0x6dc>
 80075d6:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <TIM2_IRQHandler+0x864>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	3b19      	subs	r3, #25
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f9 fb99 	bl	8000d14 <__aeabi_i2f>
 80075e2:	4602      	mov	r2, r0
 80075e4:	4b68      	ldr	r3, [pc, #416]	; (8007788 <TIM2_IRQHandler+0x868>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4619      	mov	r1, r3
 80075ea:	4610      	mov	r0, r2
 80075ec:	f7f9 fd98 	bl	8001120 <__aeabi_fcmpge>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <TIM2_IRQHandler+0x6dc>
			flag_Derating = 0;
 80075f6:	4b60      	ldr	r3, [pc, #384]	; (8007778 <TIM2_IRQHandler+0x858>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]
		}

		L=0; Tbuzz=999;
 80075fc:	4b63      	ldr	r3, [pc, #396]	; (800778c <TIM2_IRQHandler+0x86c>)
 80075fe:	2200      	movs	r2, #0
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	4b63      	ldr	r3, [pc, #396]	; (8007790 <TIM2_IRQHandler+0x870>)
 8007604:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007608:	801a      	strh	r2, [r3, #0]
	}

	if(Charger_Mode == 0){	//standby mode
 800760a:	4b62      	ldr	r3, [pc, #392]	; (8007794 <TIM2_IRQHandler+0x874>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d125      	bne.n	800765e <TIM2_IRQHandler+0x73e>
		duty=0;
 8007612:	4b57      	ldr	r3, [pc, #348]	; (8007770 <TIM2_IRQHandler+0x850>)
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
		dc=0;
 800761a:	4b5f      	ldr	r3, [pc, #380]	; (8007798 <TIM2_IRQHandler+0x878>)
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8007622:	4b5e      	ldr	r3, [pc, #376]	; (800779c <TIM2_IRQHandler+0x87c>)
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	4618      	mov	r0, r3
 8007628:	f7f9 fb70 	bl	8000d0c <__aeabi_ui2f>
 800762c:	4602      	mov	r2, r0
 800762e:	4b50      	ldr	r3, [pc, #320]	; (8007770 <TIM2_IRQHandler+0x850>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4619      	mov	r1, r3
 8007634:	4610      	mov	r0, r2
 8007636:	f7f9 fbc1 	bl	8000dbc <__aeabi_fmul>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	4b58      	ldr	r3, [pc, #352]	; (80077a0 <TIM2_IRQHandler+0x880>)
 8007640:	681c      	ldr	r4, [r3, #0]
 8007642:	4610      	mov	r0, r2
 8007644:	f7f9 fd80 	bl	8001148 <__aeabi_f2uiz>
 8007648:	4603      	mov	r3, r0
 800764a:	6363      	str	r3, [r4, #52]	; 0x34
		Clear_ProtectionFlag();
 800764c:	f000 f9cc 	bl	80079e8 <Clear_ProtectionFlag>
		Eror_Code = 0;
 8007650:	4b54      	ldr	r3, [pc, #336]	; (80077a4 <TIM2_IRQHandler+0x884>)
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
		OFFSET_CurrentSense = OFFSET_Calibration;
 8007656:	4b54      	ldr	r3, [pc, #336]	; (80077a8 <TIM2_IRQHandler+0x888>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a54      	ldr	r2, [pc, #336]	; (80077ac <TIM2_IRQHandler+0x88c>)
 800765c:	6013      	str	r3, [r2, #0]
	}

	if(Charger_Mode == 2){	//Protection mode
 800765e:	4b4d      	ldr	r3, [pc, #308]	; (8007794 <TIM2_IRQHandler+0x874>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b02      	cmp	r3, #2
 8007664:	d17c      	bne.n	8007760 <TIM2_IRQHandler+0x840>
		Tbuzz=Tbuzz+1;
 8007666:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <TIM2_IRQHandler+0x870>)
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	4b48      	ldr	r3, [pc, #288]	; (8007790 <TIM2_IRQHandler+0x870>)
 8007670:	801a      	strh	r2, [r3, #0]
		if (Tbuzz==1000 && L<=5){
 8007672:	4b47      	ldr	r3, [pc, #284]	; (8007790 <TIM2_IRQHandler+0x870>)
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800767a:	d116      	bne.n	80076aa <TIM2_IRQHandler+0x78a>
 800767c:	4b43      	ldr	r3, [pc, #268]	; (800778c <TIM2_IRQHandler+0x86c>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b05      	cmp	r3, #5
 8007682:	d812      	bhi.n	80076aa <TIM2_IRQHandler+0x78a>
			HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8007684:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007688:	4849      	ldr	r0, [pc, #292]	; (80077b0 <TIM2_IRQHandler+0x890>)
 800768a:	f002 fff6 	bl	800a67a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 800768e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007692:	4848      	ldr	r0, [pc, #288]	; (80077b4 <TIM2_IRQHandler+0x894>)
 8007694:	f002 fff1 	bl	800a67a <HAL_GPIO_TogglePin>
			Tbuzz=0; L+=1;
 8007698:	4b3d      	ldr	r3, [pc, #244]	; (8007790 <TIM2_IRQHandler+0x870>)
 800769a:	2200      	movs	r2, #0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	4b3b      	ldr	r3, [pc, #236]	; (800778c <TIM2_IRQHandler+0x86c>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	4b39      	ldr	r3, [pc, #228]	; (800778c <TIM2_IRQHandler+0x86c>)
 80076a8:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1){
 80076aa:	2180      	movs	r1, #128	; 0x80
 80076ac:	4840      	ldr	r0, [pc, #256]	; (80077b0 <TIM2_IRQHandler+0x890>)
 80076ae:	f002 ffb5 	bl	800a61c <HAL_GPIO_ReadPin>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d112      	bne.n	80076de <TIM2_IRQHandler+0x7be>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 80076b8:	2140      	movs	r1, #64	; 0x40
 80076ba:	483d      	ldr	r0, [pc, #244]	; (80077b0 <TIM2_IRQHandler+0x890>)
 80076bc:	f002 ffdd 	bl	800a67a <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 80076c0:	2200      	movs	r2, #0
 80076c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076c6:	483a      	ldr	r0, [pc, #232]	; (80077b0 <TIM2_IRQHandler+0x890>)
 80076c8:	f002 ffbf 	bl	800a64a <HAL_GPIO_WritePin>
			Clear_ProtectionFlag();
 80076cc:	f000 f98c 	bl	80079e8 <Clear_ProtectionFlag>
			dc=0; Charger_Mode =1;
 80076d0:	4b31      	ldr	r3, [pc, #196]	; (8007798 <TIM2_IRQHandler+0x878>)
 80076d2:	f04f 0200 	mov.w	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	4b2e      	ldr	r3, [pc, #184]	; (8007794 <TIM2_IRQHandler+0x874>)
 80076da:	2201      	movs	r2, #1
 80076dc:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Charger Over Temperature
		if (Flag_ChargerOverTemperature == 1 && Temp_T1<=(SetProtection_Temp1-10) && Temp_T2<=(SetProtection_Temp2-10) && L>5){
 80076de:	4b36      	ldr	r3, [pc, #216]	; (80077b8 <TIM2_IRQHandler+0x898>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d12d      	bne.n	8007742 <TIM2_IRQHandler+0x822>
 80076e6:	4b25      	ldr	r3, [pc, #148]	; (800777c <TIM2_IRQHandler+0x85c>)
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	3b0a      	subs	r3, #10
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7f9 fb11 	bl	8000d14 <__aeabi_i2f>
 80076f2:	4602      	mov	r2, r0
 80076f4:	4b22      	ldr	r3, [pc, #136]	; (8007780 <TIM2_IRQHandler+0x860>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4619      	mov	r1, r3
 80076fa:	4610      	mov	r0, r2
 80076fc:	f7f9 fd10 	bl	8001120 <__aeabi_fcmpge>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01d      	beq.n	8007742 <TIM2_IRQHandler+0x822>
 8007706:	4b1f      	ldr	r3, [pc, #124]	; (8007784 <TIM2_IRQHandler+0x864>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	3b0a      	subs	r3, #10
 800770c:	4618      	mov	r0, r3
 800770e:	f7f9 fb01 	bl	8000d14 <__aeabi_i2f>
 8007712:	4602      	mov	r2, r0
 8007714:	4b1c      	ldr	r3, [pc, #112]	; (8007788 <TIM2_IRQHandler+0x868>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	4610      	mov	r0, r2
 800771c:	f7f9 fd00 	bl	8001120 <__aeabi_fcmpge>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00d      	beq.n	8007742 <TIM2_IRQHandler+0x822>
 8007726:	4b19      	ldr	r3, [pc, #100]	; (800778c <TIM2_IRQHandler+0x86c>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b05      	cmp	r3, #5
 800772c:	d909      	bls.n	8007742 <TIM2_IRQHandler+0x822>
			Flag_ChargerOverTemperature = 0;
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <TIM2_IRQHandler+0x898>)
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
			dc=0; Charger_Mode =1;
 8007734:	4b18      	ldr	r3, [pc, #96]	; (8007798 <TIM2_IRQHandler+0x878>)
 8007736:	f04f 0200 	mov.w	r2, #0
 800773a:	601a      	str	r2, [r3, #0]
 800773c:	4b15      	ldr	r3, [pc, #84]	; (8007794 <TIM2_IRQHandler+0x874>)
 800773e:	2201      	movs	r2, #1
 8007740:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Battery Over Temperature
		if (flag_trip_overtemperature == 0 && LastFlag_OverTemperature == 1){
 8007742:	4b1e      	ldr	r3, [pc, #120]	; (80077bc <TIM2_IRQHandler+0x89c>)
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d10a      	bne.n	8007760 <TIM2_IRQHandler+0x840>
 800774a:	4b1d      	ldr	r3, [pc, #116]	; (80077c0 <TIM2_IRQHandler+0x8a0>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d106      	bne.n	8007760 <TIM2_IRQHandler+0x840>
			dc=0; Charger_Mode =1;
 8007752:	4b11      	ldr	r3, [pc, #68]	; (8007798 <TIM2_IRQHandler+0x878>)
 8007754:	f04f 0200 	mov.w	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <TIM2_IRQHandler+0x874>)
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
		}
	}

	Eror_CodeCheck();
 8007760:	f000 f896 	bl	8007890 <Eror_CodeCheck>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007764:	4817      	ldr	r0, [pc, #92]	; (80077c4 <TIM2_IRQHandler+0x8a4>)
 8007766:	f004 fc1d 	bl	800bfa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800776a:	bf00      	nop
 800776c:	bdb0      	pop	{r4, r5, r7, pc}
 800776e:	bf00      	nop
 8007770:	20000d7c 	.word	0x20000d7c
 8007774:	20000a5c 	.word	0x20000a5c
 8007778:	20000c9c 	.word	0x20000c9c
 800777c:	20000056 	.word	0x20000056
 8007780:	20000a4c 	.word	0x20000a4c
 8007784:	20000055 	.word	0x20000055
 8007788:	2000069c 	.word	0x2000069c
 800778c:	20000666 	.word	0x20000666
 8007790:	20000050 	.word	0x20000050
 8007794:	20000708 	.word	0x20000708
 8007798:	200006bc 	.word	0x200006bc
 800779c:	40010000 	.word	0x40010000
 80077a0:	20001114 	.word	0x20001114
 80077a4:	20000688 	.word	0x20000688
 80077a8:	200006d8 	.word	0x200006d8
 80077ac:	200007e0 	.word	0x200007e0
 80077b0:	40020800 	.word	0x40020800
 80077b4:	40020400 	.word	0x40020400
 80077b8:	200006e9 	.word	0x200006e9
 80077bc:	200007d4 	.word	0x200007d4
 80077c0:	20000a24 	.word	0x20000a24
 80077c4:	20001154 	.word	0x20001154

080077c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if(!(Handshaking == 0 && identified == 1) ) CAN_Tx_Process();
 80077cc:	4b15      	ldr	r3, [pc, #84]	; (8007824 <TIM3_IRQHandler+0x5c>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <TIM3_IRQHandler+0x14>
 80077d4:	4b14      	ldr	r3, [pc, #80]	; (8007828 <TIM3_IRQHandler+0x60>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d001      	beq.n	80077e0 <TIM3_IRQHandler+0x18>
 80077dc:	f7fe f8b4 	bl	8005948 <CAN_Tx_Process>

	SS+=1;
 80077e0:	4b12      	ldr	r3, [pc, #72]	; (800782c <TIM3_IRQHandler+0x64>)
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	b2da      	uxtb	r2, r3
 80077e8:	4b10      	ldr	r3, [pc, #64]	; (800782c <TIM3_IRQHandler+0x64>)
 80077ea:	701a      	strb	r2, [r3, #0]
	if(SS >= 5 && Handshaking ==1){
 80077ec:	4b0f      	ldr	r3, [pc, #60]	; (800782c <TIM3_IRQHandler+0x64>)
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b04      	cmp	r3, #4
 80077f2:	d911      	bls.n	8007818 <TIM3_IRQHandler+0x50>
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <TIM3_IRQHandler+0x5c>)
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d10d      	bne.n	8007818 <TIM3_IRQHandler+0x50>
		if(Communication_Flag == 1) Communication_Flag = 0;
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <TIM3_IRQHandler+0x68>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d103      	bne.n	800780c <TIM3_IRQHandler+0x44>
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <TIM3_IRQHandler+0x68>)
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
 800780a:	e002      	b.n	8007812 <TIM3_IRQHandler+0x4a>
		else Flag_ChargerLostCommunication = 1;
 800780c:	4b09      	ldr	r3, [pc, #36]	; (8007834 <TIM3_IRQHandler+0x6c>)
 800780e:	2201      	movs	r2, #1
 8007810:	701a      	strb	r2, [r3, #0]
		SS = 0;
 8007812:	4b06      	ldr	r3, [pc, #24]	; (800782c <TIM3_IRQHandler+0x64>)
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007818:	4807      	ldr	r0, [pc, #28]	; (8007838 <TIM3_IRQHandler+0x70>)
 800781a:	f004 fbc3 	bl	800bfa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800781e:	bf00      	nop
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000acc 	.word	0x20000acc
 8007828:	20000920 	.word	0x20000920
 800782c:	20000667 	.word	0x20000667
 8007830:	200007f5 	.word	0x200007f5
 8007834:	20000a14 	.word	0x20000a14
 8007838:	200010d4 	.word	0x200010d4

0800783c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	CAN_Rx_Process();	//can receive handle
 8007840:	f7fe f8c6 	bl	80059d0 <CAN_Rx_Process>

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007844:	4802      	ldr	r0, [pc, #8]	; (8007850 <TIM4_IRQHandler+0x14>)
 8007846:	f004 fbad 	bl	800bfa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800784a:	bf00      	nop
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	20001094 	.word	0x20001094

08007854 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007858:	4802      	ldr	r0, [pc, #8]	; (8007864 <USART1_IRQHandler+0x10>)
 800785a:	f005 fa91 	bl	800cd80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800785e:	bf00      	nop
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	200011d4 	.word	0x200011d4

08007868 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800786c:	4802      	ldr	r0, [pc, #8]	; (8007878 <USART3_IRQHandler+0x10>)
 800786e:	f005 fa87 	bl	800cd80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007872:	bf00      	nop
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	20001194 	.word	0x20001194

0800787c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007880:	4802      	ldr	r0, [pc, #8]	; (800788c <DMA2_Stream0_IRQHandler+0x10>)
 8007882:	f002 fac7 	bl	8009e14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000e30 	.word	0x20000e30

08007890 <Eror_CodeCheck>:

/* USER CODE BEGIN 1 */

void Eror_CodeCheck(void)
{
 8007890:	b480      	push	{r7}
 8007892:	af00      	add	r7, sp, #0
	if (flag_trip_unbalance==1)
 8007894:	4b42      	ldr	r3, [pc, #264]	; (80079a0 <Eror_CodeCheck+0x110>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d102      	bne.n	80078a2 <Eror_CodeCheck+0x12>
			Eror_Code=6;	//Battery Pack unbalance
 800789c:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <Eror_CodeCheck+0x114>)
 800789e:	2206      	movs	r2, #6
 80078a0:	701a      	strb	r2, [r3, #0]

	if (flag_trip_overtemperature==1){
 80078a2:	4b41      	ldr	r3, [pc, #260]	; (80079a8 <Eror_CodeCheck+0x118>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d106      	bne.n	80078b8 <Eror_CodeCheck+0x28>
			Eror_Code=8;	//Battery Pack over temperature
 80078aa:	4b3e      	ldr	r3, [pc, #248]	; (80079a4 <Eror_CodeCheck+0x114>)
 80078ac:	2208      	movs	r2, #8
 80078ae:	701a      	strb	r2, [r3, #0]
			LastFlag_OverTemperature = 1;
 80078b0:	4b3e      	ldr	r3, [pc, #248]	; (80079ac <Eror_CodeCheck+0x11c>)
 80078b2:	2201      	movs	r2, #1
 80078b4:	701a      	strb	r2, [r3, #0]
	else if (Flag_InputOverVoltage==1)
		Eror_Code=21;	//Input Over Current

	else if(Flag_ChargerLostCommunication==1)
		Eror_Code=22;
}
 80078b6:	e06e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (flag_trip_undertemperature==1)
 80078b8:	4b3d      	ldr	r3, [pc, #244]	; (80079b0 <Eror_CodeCheck+0x120>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d103      	bne.n	80078c8 <Eror_CodeCheck+0x38>
			Eror_Code=9;	//Battery Pack under temperature
 80078c0:	4b38      	ldr	r3, [pc, #224]	; (80079a4 <Eror_CodeCheck+0x114>)
 80078c2:	2209      	movs	r2, #9
 80078c4:	701a      	strb	r2, [r3, #0]
}
 80078c6:	e066      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (flag_trip_overcurrentcharge==1)
 80078c8:	4b3a      	ldr	r3, [pc, #232]	; (80079b4 <Eror_CodeCheck+0x124>)
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d103      	bne.n	80078d8 <Eror_CodeCheck+0x48>
			Eror_Code=10;	//Battery Pack over current charge
 80078d0:	4b34      	ldr	r3, [pc, #208]	; (80079a4 <Eror_CodeCheck+0x114>)
 80078d2:	220a      	movs	r2, #10
 80078d4:	701a      	strb	r2, [r3, #0]
}
 80078d6:	e05e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (flag_trip_overvoltage==1)
 80078d8:	4b37      	ldr	r3, [pc, #220]	; (80079b8 <Eror_CodeCheck+0x128>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d103      	bne.n	80078e8 <Eror_CodeCheck+0x58>
			Eror_Code=11;	//Battery Pack over voltage
 80078e0:	4b30      	ldr	r3, [pc, #192]	; (80079a4 <Eror_CodeCheck+0x114>)
 80078e2:	220b      	movs	r2, #11
 80078e4:	701a      	strb	r2, [r3, #0]
}
 80078e6:	e056      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (flag_trip_shortcircuit==1)
 80078e8:	4b34      	ldr	r3, [pc, #208]	; (80079bc <Eror_CodeCheck+0x12c>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d103      	bne.n	80078f8 <Eror_CodeCheck+0x68>
			Eror_Code=12;	//Battery Pack short circuit
 80078f0:	4b2c      	ldr	r3, [pc, #176]	; (80079a4 <Eror_CodeCheck+0x114>)
 80078f2:	220c      	movs	r2, #12
 80078f4:	701a      	strb	r2, [r3, #0]
}
 80078f6:	e04e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (flag_trip_systemfailure==1)
 80078f8:	4b31      	ldr	r3, [pc, #196]	; (80079c0 <Eror_CodeCheck+0x130>)
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d103      	bne.n	8007908 <Eror_CodeCheck+0x78>
			Eror_Code=13;	//Battery Pack system failure
 8007900:	4b28      	ldr	r3, [pc, #160]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007902:	220d      	movs	r2, #13
 8007904:	701a      	strb	r2, [r3, #0]
}
 8007906:	e046      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_ChargerUnderVoltage==1)
 8007908:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <Eror_CodeCheck+0x134>)
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b01      	cmp	r3, #1
 800790e:	d103      	bne.n	8007918 <Eror_CodeCheck+0x88>
		Eror_Code=14;	//Charger Under Voltage
 8007910:	4b24      	ldr	r3, [pc, #144]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007912:	220e      	movs	r2, #14
 8007914:	701a      	strb	r2, [r3, #0]
}
 8007916:	e03e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_ChargerOverVoltage==1)
 8007918:	4b2b      	ldr	r3, [pc, #172]	; (80079c8 <Eror_CodeCheck+0x138>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d103      	bne.n	8007928 <Eror_CodeCheck+0x98>
		Eror_Code=15;	//Charger Over Current
 8007920:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007922:	220f      	movs	r2, #15
 8007924:	701a      	strb	r2, [r3, #0]
}
 8007926:	e036      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_ChargerOverTemperature==1)
 8007928:	4b28      	ldr	r3, [pc, #160]	; (80079cc <Eror_CodeCheck+0x13c>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b01      	cmp	r3, #1
 800792e:	d103      	bne.n	8007938 <Eror_CodeCheck+0xa8>
		Eror_Code=16;	//Charger Over Temperature
 8007930:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007932:	2210      	movs	r2, #16
 8007934:	701a      	strb	r2, [r3, #0]
}
 8007936:	e02e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_ChargerUnderTemperature==1)
 8007938:	4b25      	ldr	r3, [pc, #148]	; (80079d0 <Eror_CodeCheck+0x140>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	2b01      	cmp	r3, #1
 800793e:	d103      	bne.n	8007948 <Eror_CodeCheck+0xb8>
		Eror_Code=17;	//Charger Under Temperature
 8007940:	4b18      	ldr	r3, [pc, #96]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007942:	2211      	movs	r2, #17
 8007944:	701a      	strb	r2, [r3, #0]
}
 8007946:	e026      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_ChargerShortCircuit==1)
 8007948:	4b22      	ldr	r3, [pc, #136]	; (80079d4 <Eror_CodeCheck+0x144>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d103      	bne.n	8007958 <Eror_CodeCheck+0xc8>
		Eror_Code=18;	//Charger Short Circuit
 8007950:	4b14      	ldr	r3, [pc, #80]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007952:	2212      	movs	r2, #18
 8007954:	701a      	strb	r2, [r3, #0]
}
 8007956:	e01e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_ChargerOverCurrent==1)
 8007958:	4b1f      	ldr	r3, [pc, #124]	; (80079d8 <Eror_CodeCheck+0x148>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d103      	bne.n	8007968 <Eror_CodeCheck+0xd8>
		Eror_Code=19;	//Charger Over Current
 8007960:	4b10      	ldr	r3, [pc, #64]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007962:	2213      	movs	r2, #19
 8007964:	701a      	strb	r2, [r3, #0]
}
 8007966:	e016      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_InputUnderVoltage==1)
 8007968:	4b1c      	ldr	r3, [pc, #112]	; (80079dc <Eror_CodeCheck+0x14c>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d103      	bne.n	8007978 <Eror_CodeCheck+0xe8>
		Eror_Code=20;	//Input Under Voltage
 8007970:	4b0c      	ldr	r3, [pc, #48]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007972:	2214      	movs	r2, #20
 8007974:	701a      	strb	r2, [r3, #0]
}
 8007976:	e00e      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if (Flag_InputOverVoltage==1)
 8007978:	4b19      	ldr	r3, [pc, #100]	; (80079e0 <Eror_CodeCheck+0x150>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	2b01      	cmp	r3, #1
 800797e:	d103      	bne.n	8007988 <Eror_CodeCheck+0xf8>
		Eror_Code=21;	//Input Over Current
 8007980:	4b08      	ldr	r3, [pc, #32]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007982:	2215      	movs	r2, #21
 8007984:	701a      	strb	r2, [r3, #0]
}
 8007986:	e006      	b.n	8007996 <Eror_CodeCheck+0x106>
	else if(Flag_ChargerLostCommunication==1)
 8007988:	4b16      	ldr	r3, [pc, #88]	; (80079e4 <Eror_CodeCheck+0x154>)
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d102      	bne.n	8007996 <Eror_CodeCheck+0x106>
		Eror_Code=22;
 8007990:	4b04      	ldr	r3, [pc, #16]	; (80079a4 <Eror_CodeCheck+0x114>)
 8007992:	2216      	movs	r2, #22
 8007994:	701a      	strb	r2, [r3, #0]
}
 8007996:	bf00      	nop
 8007998:	46bd      	mov	sp, r7
 800799a:	bc80      	pop	{r7}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000692 	.word	0x20000692
 80079a4:	20000688 	.word	0x20000688
 80079a8:	200007d4 	.word	0x200007d4
 80079ac:	20000a24 	.word	0x20000a24
 80079b0:	20000910 	.word	0x20000910
 80079b4:	20000ab0 	.word	0x20000ab0
 80079b8:	20000db4 	.word	0x20000db4
 80079bc:	200006ac 	.word	0x200006ac
 80079c0:	200006cc 	.word	0x200006cc
 80079c4:	200007dc 	.word	0x200007dc
 80079c8:	20000814 	.word	0x20000814
 80079cc:	200006e9 	.word	0x200006e9
 80079d0:	20000dd0 	.word	0x20000dd0
 80079d4:	20000810 	.word	0x20000810
 80079d8:	200007f4 	.word	0x200007f4
 80079dc:	200006b8 	.word	0x200006b8
 80079e0:	20000a58 	.word	0x20000a58
 80079e4:	20000a14 	.word	0x20000a14

080079e8 <Clear_ProtectionFlag>:

void Clear_ProtectionFlag(void)
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
	flag_trip_overvoltage = 0;
 80079ec:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <Clear_ProtectionFlag+0x50>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	701a      	strb	r2, [r3, #0]
	flag_trip_overtemperature = 0;
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <Clear_ProtectionFlag+0x54>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature = 0;
 80079f8:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <Clear_ProtectionFlag+0x58>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge = 0;
 80079fe:	4b11      	ldr	r3, [pc, #68]	; (8007a44 <Clear_ProtectionFlag+0x5c>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge = 0;
 8007a04:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <Clear_ProtectionFlag+0x60>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit = 0;
 8007a0a:	4b10      	ldr	r3, [pc, #64]	; (8007a4c <Clear_ProtectionFlag+0x64>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure = 0;
 8007a10:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <Clear_ProtectionFlag+0x68>)
 8007a12:	2200      	movs	r2, #0
 8007a14:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverCurrent = 0;
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <Clear_ProtectionFlag+0x6c>)
 8007a18:	2200      	movs	r2, #0
 8007a1a:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverTemperature = 0;
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <Clear_ProtectionFlag+0x70>)
 8007a1e:	2200      	movs	r2, #0
 8007a20:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverVoltage = 0;
 8007a22:	4b0e      	ldr	r3, [pc, #56]	; (8007a5c <Clear_ProtectionFlag+0x74>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
	Flag_ChargerLostCommunication = 0;
 8007a28:	4b0d      	ldr	r3, [pc, #52]	; (8007a60 <Clear_ProtectionFlag+0x78>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
}
 8007a2e:	bf00      	nop
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	20000db4 	.word	0x20000db4
 8007a3c:	200007d4 	.word	0x200007d4
 8007a40:	20000910 	.word	0x20000910
 8007a44:	20000ab0 	.word	0x20000ab0
 8007a48:	20000693 	.word	0x20000693
 8007a4c:	200006ac 	.word	0x200006ac
 8007a50:	200006cc 	.word	0x200006cc
 8007a54:	200007f4 	.word	0x200007f4
 8007a58:	200006e9 	.word	0x200006e9
 8007a5c:	20000814 	.word	0x20000814
 8007a60:	20000a14 	.word	0x20000a14
 8007a64:	00000000 	.word	0x00000000

08007a68 <Fault_Check>:

void Fault_Check(void)
{
 8007a68:	b5b0      	push	{r4, r5, r7, lr}
 8007a6a:	af00      	add	r7, sp, #0
	if(Current_Charger >= SetProtection_ShortCircuit){
 8007a6c:	4b90      	ldr	r3, [pc, #576]	; (8007cb0 <Fault_Check+0x248>)
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7f9 f94f 	bl	8000d14 <__aeabi_i2f>
 8007a76:	4602      	mov	r2, r0
 8007a78:	4b8e      	ldr	r3, [pc, #568]	; (8007cb4 <Fault_Check+0x24c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7f9 fb44 	bl	800110c <__aeabi_fcmple>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d009      	beq.n	8007a9e <Fault_Check+0x36>
		Flag_ChargerShortCircuit=1;
 8007a8a:	4b8b      	ldr	r3, [pc, #556]	; (8007cb8 <Fault_Check+0x250>)
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8007a90:	2201      	movs	r2, #1
 8007a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a96:	4889      	ldr	r0, [pc, #548]	; (8007cbc <Fault_Check+0x254>)
 8007a98:	f002 fdd7 	bl	800a64a <HAL_GPIO_WritePin>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
		Eror_Code = 0;
		TripTime_OverCurrent = 0;
		Count_TripTime -= 0.001;
	}
}
 8007a9c:	e0fb      	b.n	8007c96 <Fault_Check+0x22e>
	else if((SetProtection_OverCurrent - Current_Charger)<=0 && Flag_ChargerOverCurrent==0 ){
 8007a9e:	4b88      	ldr	r3, [pc, #544]	; (8007cc0 <Fault_Check+0x258>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7f9 f936 	bl	8000d14 <__aeabi_i2f>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	4b82      	ldr	r3, [pc, #520]	; (8007cb4 <Fault_Check+0x24c>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	4610      	mov	r0, r2
 8007ab2:	f7f9 f879 	bl	8000ba8 <__aeabi_fsub>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	f04f 0100 	mov.w	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f7f9 fb25 	bl	800110c <__aeabi_fcmple>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d064      	beq.n	8007b92 <Fault_Check+0x12a>
 8007ac8:	4b7e      	ldr	r3, [pc, #504]	; (8007cc4 <Fault_Check+0x25c>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d160      	bne.n	8007b92 <Fault_Check+0x12a>
		Eror_Code=17;
 8007ad0:	4b7d      	ldr	r3, [pc, #500]	; (8007cc8 <Fault_Check+0x260>)
 8007ad2:	2211      	movs	r2, #17
 8007ad4:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 1.8/(((Current_Charger/SetProtection_OverCurrent)*(Current_Charger/SetProtection_OverCurrent))-1);
 8007ad6:	4b77      	ldr	r3, [pc, #476]	; (8007cb4 <Fault_Check+0x24c>)
 8007ad8:	681c      	ldr	r4, [r3, #0]
 8007ada:	4b79      	ldr	r3, [pc, #484]	; (8007cc0 <Fault_Check+0x258>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7f9 f918 	bl	8000d14 <__aeabi_i2f>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f7f9 fa1b 	bl	8000f24 <__aeabi_fdiv>
 8007aee:	4603      	mov	r3, r0
 8007af0:	461d      	mov	r5, r3
 8007af2:	4b70      	ldr	r3, [pc, #448]	; (8007cb4 <Fault_Check+0x24c>)
 8007af4:	681c      	ldr	r4, [r3, #0]
 8007af6:	4b72      	ldr	r3, [pc, #456]	; (8007cc0 <Fault_Check+0x258>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7f9 f90a 	bl	8000d14 <__aeabi_i2f>
 8007b00:	4603      	mov	r3, r0
 8007b02:	4619      	mov	r1, r3
 8007b04:	4620      	mov	r0, r4
 8007b06:	f7f9 fa0d 	bl	8000f24 <__aeabi_fdiv>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f7f9 f954 	bl	8000dbc <__aeabi_fmul>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f9 f844 	bl	8000ba8 <__aeabi_fsub>
 8007b20:	4603      	mov	r3, r0
 8007b22:	4618      	mov	r0, r3
 8007b24:	f7f8 fcbc 	bl	80004a0 <__aeabi_f2d>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	4623      	mov	r3, r4
 8007b30:	a15b      	add	r1, pc, #364	; (adr r1, 8007ca0 <Fault_Check+0x238>)
 8007b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b36:	f7f8 fe35 	bl	80007a4 <__aeabi_ddiv>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	4618      	mov	r0, r3
 8007b40:	4621      	mov	r1, r4
 8007b42:	f7f8 ffdd 	bl	8000b00 <__aeabi_d2f>
 8007b46:	4602      	mov	r2, r0
 8007b48:	4b60      	ldr	r3, [pc, #384]	; (8007ccc <Fault_Check+0x264>)
 8007b4a:	601a      	str	r2, [r3, #0]
		Count_TripTime += 0.001;
 8007b4c:	4b60      	ldr	r3, [pc, #384]	; (8007cd0 <Fault_Check+0x268>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7f8 fca5 	bl	80004a0 <__aeabi_f2d>
 8007b56:	a354      	add	r3, pc, #336	; (adr r3, 8007ca8 <Fault_Check+0x240>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 fb42 	bl	80001e4 <__adddf3>
 8007b60:	4603      	mov	r3, r0
 8007b62:	460c      	mov	r4, r1
 8007b64:	4618      	mov	r0, r3
 8007b66:	4621      	mov	r1, r4
 8007b68:	f7f8 ffca 	bl	8000b00 <__aeabi_d2f>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	4b58      	ldr	r3, [pc, #352]	; (8007cd0 <Fault_Check+0x268>)
 8007b70:	601a      	str	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8007b72:	4b57      	ldr	r3, [pc, #348]	; (8007cd0 <Fault_Check+0x268>)
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	4b55      	ldr	r3, [pc, #340]	; (8007ccc <Fault_Check+0x264>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4619      	mov	r1, r3
 8007b7c:	4610      	mov	r0, r2
 8007b7e:	f7f9 facf 	bl	8001120 <__aeabi_fcmpge>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 8086 	beq.w	8007c96 <Fault_Check+0x22e>
			Flag_ChargerOverCurrent=1;
 8007b8a:	4b4e      	ldr	r3, [pc, #312]	; (8007cc4 <Fault_Check+0x25c>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	701a      	strb	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8007b90:	e081      	b.n	8007c96 <Fault_Check+0x22e>
	else if ( Temp_T1 >= (SetProtection_Temp1-10)  || Temp_T2 >= (SetProtection_Temp2-10)){
 8007b92:	4b50      	ldr	r3, [pc, #320]	; (8007cd4 <Fault_Check+0x26c>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	3b0a      	subs	r3, #10
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7f9 f8bb 	bl	8000d14 <__aeabi_i2f>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	4b4d      	ldr	r3, [pc, #308]	; (8007cd8 <Fault_Check+0x270>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f7f9 fab0 	bl	800110c <__aeabi_fcmple>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10f      	bne.n	8007bd2 <Fault_Check+0x16a>
 8007bb2:	4b4a      	ldr	r3, [pc, #296]	; (8007cdc <Fault_Check+0x274>)
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	3b0a      	subs	r3, #10
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7f9 f8ab 	bl	8000d14 <__aeabi_i2f>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	4b47      	ldr	r3, [pc, #284]	; (8007ce0 <Fault_Check+0x278>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f7f9 faa0 	bl	800110c <__aeabi_fcmple>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d02b      	beq.n	8007c2a <Fault_Check+0x1c2>
		flag_Derating = 1;
 8007bd2:	4b44      	ldr	r3, [pc, #272]	; (8007ce4 <Fault_Check+0x27c>)
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	701a      	strb	r2, [r3, #0]
		Eror_Code = 14;
 8007bd8:	4b3b      	ldr	r3, [pc, #236]	; (8007cc8 <Fault_Check+0x260>)
 8007bda:	220e      	movs	r2, #14
 8007bdc:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 8007bde:	4b3d      	ldr	r3, [pc, #244]	; (8007cd4 <Fault_Check+0x26c>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7f9 f896 	bl	8000d14 <__aeabi_i2f>
 8007be8:	4602      	mov	r2, r0
 8007bea:	4b3b      	ldr	r3, [pc, #236]	; (8007cd8 <Fault_Check+0x270>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	f7f9 fa8b 	bl	800110c <__aeabi_fcmple>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d10f      	bne.n	8007c1c <Fault_Check+0x1b4>
 8007bfc:	4b37      	ldr	r3, [pc, #220]	; (8007cdc <Fault_Check+0x274>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7f9 f887 	bl	8000d14 <__aeabi_i2f>
 8007c06:	4602      	mov	r2, r0
 8007c08:	4b35      	ldr	r3, [pc, #212]	; (8007ce0 <Fault_Check+0x278>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f7f9 fa7c 	bl	800110c <__aeabi_fcmple>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d100      	bne.n	8007c1c <Fault_Check+0x1b4>
 8007c1a:	e03c      	b.n	8007c96 <Fault_Check+0x22e>
			Flag_ChargerOverTemperature = 1;
 8007c1c:	4b32      	ldr	r3, [pc, #200]	; (8007ce8 <Fault_Check+0x280>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 2;
 8007c22:	4b32      	ldr	r3, [pc, #200]	; (8007cec <Fault_Check+0x284>)
 8007c24:	2202      	movs	r2, #2
 8007c26:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 8007c28:	e035      	b.n	8007c96 <Fault_Check+0x22e>
	else if(Voltage_Charger >= SetProtection_OverVoltage){
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <Fault_Check+0x288>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7f9 f870 	bl	8000d14 <__aeabi_i2f>
 8007c34:	4602      	mov	r2, r0
 8007c36:	4b2f      	ldr	r3, [pc, #188]	; (8007cf4 <Fault_Check+0x28c>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	f7f9 fa65 	bl	800110c <__aeabi_fcmple>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <Fault_Check+0x1e8>
		Flag_ChargerOverVoltage=1;
 8007c48:	4b2b      	ldr	r3, [pc, #172]	; (8007cf8 <Fault_Check+0x290>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	701a      	strb	r2, [r3, #0]
}
 8007c4e:	e022      	b.n	8007c96 <Fault_Check+0x22e>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
 8007c50:	4b1d      	ldr	r3, [pc, #116]	; (8007cc8 <Fault_Check+0x260>)
 8007c52:	781b      	ldrb	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <Fault_Check+0x1f8>
 8007c58:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <Fault_Check+0x260>)
 8007c5a:	781a      	ldrb	r2, [r3, #0]
 8007c5c:	4b27      	ldr	r3, [pc, #156]	; (8007cfc <Fault_Check+0x294>)
 8007c5e:	701a      	strb	r2, [r3, #0]
		Eror_Code = 0;
 8007c60:	4b19      	ldr	r3, [pc, #100]	; (8007cc8 <Fault_Check+0x260>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 0;
 8007c66:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <Fault_Check+0x264>)
 8007c68:	f04f 0200 	mov.w	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
		Count_TripTime -= 0.001;
 8007c6e:	4b18      	ldr	r3, [pc, #96]	; (8007cd0 <Fault_Check+0x268>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f8 fc14 	bl	80004a0 <__aeabi_f2d>
 8007c78:	a30b      	add	r3, pc, #44	; (adr r3, 8007ca8 <Fault_Check+0x240>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 faaf 	bl	80001e0 <__aeabi_dsub>
 8007c82:	4603      	mov	r3, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	4618      	mov	r0, r3
 8007c88:	4621      	mov	r1, r4
 8007c8a:	f7f8 ff39 	bl	8000b00 <__aeabi_d2f>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4b0f      	ldr	r3, [pc, #60]	; (8007cd0 <Fault_Check+0x268>)
 8007c92:	601a      	str	r2, [r3, #0]
}
 8007c94:	e7ff      	b.n	8007c96 <Fault_Check+0x22e>
 8007c96:	bf00      	nop
 8007c98:	bdb0      	pop	{r4, r5, r7, pc}
 8007c9a:	bf00      	nop
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	cccccccd 	.word	0xcccccccd
 8007ca4:	3ffccccc 	.word	0x3ffccccc
 8007ca8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007cac:	3f50624d 	.word	0x3f50624d
 8007cb0:	20000052 	.word	0x20000052
 8007cb4:	20000d78 	.word	0x20000d78
 8007cb8:	20000810 	.word	0x20000810
 8007cbc:	40020800 	.word	0x40020800
 8007cc0:	20000053 	.word	0x20000053
 8007cc4:	200007f4 	.word	0x200007f4
 8007cc8:	20000688 	.word	0x20000688
 8007ccc:	20001088 	.word	0x20001088
 8007cd0:	20001090 	.word	0x20001090
 8007cd4:	20000056 	.word	0x20000056
 8007cd8:	20000a4c 	.word	0x20000a4c
 8007cdc:	20000055 	.word	0x20000055
 8007ce0:	2000069c 	.word	0x2000069c
 8007ce4:	20000c9c 	.word	0x20000c9c
 8007ce8:	200006e9 	.word	0x200006e9
 8007cec:	20000708 	.word	0x20000708
 8007cf0:	20000054 	.word	0x20000054
 8007cf4:	20000ba8 	.word	0x20000ba8
 8007cf8:	20000814 	.word	0x20000814
 8007cfc:	200006e8 	.word	0x200006e8

08007d00 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007d08:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <_sbrk+0x50>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <_sbrk+0x16>
		heap_end = &end;
 8007d10:	4b0f      	ldr	r3, [pc, #60]	; (8007d50 <_sbrk+0x50>)
 8007d12:	4a10      	ldr	r2, [pc, #64]	; (8007d54 <_sbrk+0x54>)
 8007d14:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007d16:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <_sbrk+0x50>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007d1c:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <_sbrk+0x50>)
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4413      	add	r3, r2
 8007d24:	466a      	mov	r2, sp
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d907      	bls.n	8007d3a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007d2a:	f005 fbf7 	bl	800d51c <__errno>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	230c      	movs	r3, #12
 8007d32:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007d34:	f04f 33ff 	mov.w	r3, #4294967295
 8007d38:	e006      	b.n	8007d48 <_sbrk+0x48>
	}

	heap_end += incr;
 8007d3a:	4b05      	ldr	r3, [pc, #20]	; (8007d50 <_sbrk+0x50>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4413      	add	r3, r2
 8007d42:	4a03      	ldr	r2, [pc, #12]	; (8007d50 <_sbrk+0x50>)
 8007d44:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007d46:	68fb      	ldr	r3, [r7, #12]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000668 	.word	0x20000668
 8007d54:	20001220 	.word	0x20001220

08007d58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007d5c:	4b12      	ldr	r3, [pc, #72]	; (8007da8 <SystemInit+0x50>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a11      	ldr	r2, [pc, #68]	; (8007da8 <SystemInit+0x50>)
 8007d62:	f043 0301 	orr.w	r3, r3, #1
 8007d66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d68:	4b0f      	ldr	r3, [pc, #60]	; (8007da8 <SystemInit+0x50>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007d6e:	4b0e      	ldr	r3, [pc, #56]	; (8007da8 <SystemInit+0x50>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <SystemInit+0x50>)
 8007d74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d7e:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <SystemInit+0x50>)
 8007d80:	4a0a      	ldr	r2, [pc, #40]	; (8007dac <SystemInit+0x54>)
 8007d82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d84:	4b08      	ldr	r3, [pc, #32]	; (8007da8 <SystemInit+0x50>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a07      	ldr	r2, [pc, #28]	; (8007da8 <SystemInit+0x50>)
 8007d8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007d90:	4b05      	ldr	r3, [pc, #20]	; (8007da8 <SystemInit+0x50>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d96:	4b06      	ldr	r3, [pc, #24]	; (8007db0 <SystemInit+0x58>)
 8007d98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d9c:	609a      	str	r2, [r3, #8]
#endif
}
 8007d9e:	bf00      	nop
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40023800 	.word	0x40023800
 8007dac:	24003010 	.word	0x24003010
 8007db0:	e000ed00 	.word	0xe000ed00

08007db4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b096      	sub	sp, #88	; 0x58
 8007db8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007dba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	601a      	str	r2, [r3, #0]
 8007dc2:	605a      	str	r2, [r3, #4]
 8007dc4:	609a      	str	r2, [r3, #8]
 8007dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007dd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	605a      	str	r2, [r3, #4]
 8007ddc:	609a      	str	r2, [r3, #8]
 8007dde:	60da      	str	r2, [r3, #12]
 8007de0:	611a      	str	r2, [r3, #16]
 8007de2:	615a      	str	r2, [r3, #20]
 8007de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	2220      	movs	r2, #32
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f005 fbbf 	bl	800d570 <memset>

  htim1.Instance = TIM1;
 8007df2:	4b3e      	ldr	r3, [pc, #248]	; (8007eec <MX_TIM1_Init+0x138>)
 8007df4:	4a3e      	ldr	r2, [pc, #248]	; (8007ef0 <MX_TIM1_Init+0x13c>)
 8007df6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007df8:	4b3c      	ldr	r3, [pc, #240]	; (8007eec <MX_TIM1_Init+0x138>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dfe:	4b3b      	ldr	r3, [pc, #236]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e00:	2200      	movs	r2, #0
 8007e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 8007e04:	4b39      	ldr	r3, [pc, #228]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e06:	f241 726f 	movw	r2, #5999	; 0x176f
 8007e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e0c:	4b37      	ldr	r3, [pc, #220]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007e12:	4b36      	ldr	r3, [pc, #216]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e18:	4b34      	ldr	r3, [pc, #208]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007e1e:	4833      	ldr	r0, [pc, #204]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e20:	f003 ffdc 	bl	800bddc <HAL_TIM_Base_Init>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8007e2a:	f7fe fd63 	bl	80068f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e32:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007e34:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007e38:	4619      	mov	r1, r3
 8007e3a:	482c      	ldr	r0, [pc, #176]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e3c:	f004 fa80 	bl	800c340 <HAL_TIM_ConfigClockSource>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007e46:	f7fe fd55 	bl	80068f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8007e4a:	4828      	ldr	r0, [pc, #160]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e4c:	f004 f837 	bl	800bebe <HAL_TIM_PWM_Init>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007e56:	f7fe fd4d 	bl	80068f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007e66:	4619      	mov	r1, r3
 8007e68:	4820      	ldr	r0, [pc, #128]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e6a:	f004 fe51 	bl	800cb10 <HAL_TIMEx_MasterConfigSynchronization>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007e74:	f7fe fd3e 	bl	80068f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e78:	2360      	movs	r3, #96	; 0x60
 8007e7a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e80:	2300      	movs	r3, #0
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007e84:	2300      	movs	r3, #0
 8007e86:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	4813      	ldr	r0, [pc, #76]	; (8007eec <MX_TIM1_Init+0x138>)
 8007e9e:	f004 f989 	bl	800c1b4 <HAL_TIM_PWM_ConfigChannel>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007ea8:	f7fe fd24 	bl	80068f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007eac:	2300      	movs	r3, #0
 8007eae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ec4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4807      	ldr	r0, [pc, #28]	; (8007eec <MX_TIM1_Init+0x138>)
 8007ed0:	f004 fe62 	bl	800cb98 <HAL_TIMEx_ConfigBreakDeadTime>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d001      	beq.n	8007ede <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8007eda:	f7fe fd0b 	bl	80068f4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8007ede:	4803      	ldr	r0, [pc, #12]	; (8007eec <MX_TIM1_Init+0x138>)
 8007ee0:	f000 f968 	bl	80081b4 <HAL_TIM_MspPostInit>

}
 8007ee4:	bf00      	nop
 8007ee6:	3758      	adds	r7, #88	; 0x58
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20001114 	.word	0x20001114
 8007ef0:	40010000 	.word	0x40010000

08007ef4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007efa:	f107 0308 	add.w	r3, r7, #8
 8007efe:	2200      	movs	r2, #0
 8007f00:	601a      	str	r2, [r3, #0]
 8007f02:	605a      	str	r2, [r3, #4]
 8007f04:	609a      	str	r2, [r3, #8]
 8007f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f08:	463b      	mov	r3, r7
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8007f10:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007f16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 8007f18:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f1a:	223b      	movs	r2, #59	; 0x3b
 8007f1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f1e:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8007f24:	4b18      	ldr	r3, [pc, #96]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007f2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f2c:	4b16      	ldr	r3, [pc, #88]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f32:	4b15      	ldr	r3, [pc, #84]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007f38:	4813      	ldr	r0, [pc, #76]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f3a:	f003 ff4f 	bl	800bddc <HAL_TIM_Base_Init>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007f44:	f7fe fcd6 	bl	80068f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4619      	mov	r1, r3
 8007f54:	480c      	ldr	r0, [pc, #48]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f56:	f004 f9f3 	bl	800c340 <HAL_TIM_ConfigClockSource>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007f60:	f7fe fcc8 	bl	80068f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f64:	2300      	movs	r3, #0
 8007f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007f6c:	463b      	mov	r3, r7
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4805      	ldr	r0, [pc, #20]	; (8007f88 <MX_TIM2_Init+0x94>)
 8007f72:	f004 fdcd 	bl	800cb10 <HAL_TIMEx_MasterConfigSynchronization>
 8007f76:	4603      	mov	r3, r0
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d001      	beq.n	8007f80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007f7c:	f7fe fcba 	bl	80068f4 <Error_Handler>
  }

}
 8007f80:	bf00      	nop
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	20001154 	.word	0x20001154

08007f8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f92:	f107 0308 	add.w	r3, r7, #8
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
 8007f9a:	605a      	str	r2, [r3, #4]
 8007f9c:	609a      	str	r2, [r3, #8]
 8007f9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fa0:	463b      	mov	r3, r7
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
 8007fa6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 8007fa8:	4b1d      	ldr	r3, [pc, #116]	; (8008020 <MX_TIM3_Init+0x94>)
 8007faa:	4a1e      	ldr	r2, [pc, #120]	; (8008024 <MX_TIM3_Init+0x98>)
 8007fac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5999;
 8007fae:	4b1c      	ldr	r3, [pc, #112]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fb0:	f241 726f 	movw	r2, #5999	; 0x176f
 8007fb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8007fbc:	4b18      	ldr	r3, [pc, #96]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fbe:	f242 720f 	movw	r2, #9999	; 0x270f
 8007fc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fc4:	4b16      	ldr	r3, [pc, #88]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fca:	4b15      	ldr	r3, [pc, #84]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007fd0:	4813      	ldr	r0, [pc, #76]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fd2:	f003 ff03 	bl	800bddc <HAL_TIM_Base_Init>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d001      	beq.n	8007fe0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007fdc:	f7fe fc8a 	bl	80068f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fe4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007fe6:	f107 0308 	add.w	r3, r7, #8
 8007fea:	4619      	mov	r1, r3
 8007fec:	480c      	ldr	r0, [pc, #48]	; (8008020 <MX_TIM3_Init+0x94>)
 8007fee:	f004 f9a7 	bl	800c340 <HAL_TIM_ConfigClockSource>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d001      	beq.n	8007ffc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007ff8:	f7fe fc7c 	bl	80068f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008000:	2300      	movs	r3, #0
 8008002:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008004:	463b      	mov	r3, r7
 8008006:	4619      	mov	r1, r3
 8008008:	4805      	ldr	r0, [pc, #20]	; (8008020 <MX_TIM3_Init+0x94>)
 800800a:	f004 fd81 	bl	800cb10 <HAL_TIMEx_MasterConfigSynchronization>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008014:	f7fe fc6e 	bl	80068f4 <Error_Handler>
  }

}
 8008018:	bf00      	nop
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	200010d4 	.word	0x200010d4
 8008024:	40000400 	.word	0x40000400

08008028 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	605a      	str	r2, [r3, #4]
 8008038:	609a      	str	r2, [r3, #8]
 800803a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800803c:	463b      	mov	r3, r7
 800803e:	2200      	movs	r2, #0
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8008044:	4b1d      	ldr	r3, [pc, #116]	; (80080bc <MX_TIM4_Init+0x94>)
 8008046:	4a1e      	ldr	r2, [pc, #120]	; (80080c0 <MX_TIM4_Init+0x98>)
 8008048:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 800804a:	4b1c      	ldr	r3, [pc, #112]	; (80080bc <MX_TIM4_Init+0x94>)
 800804c:	2204      	movs	r2, #4
 800804e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008050:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <MX_TIM4_Init+0x94>)
 8008052:	2200      	movs	r2, #0
 8008054:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5999;
 8008056:	4b19      	ldr	r3, [pc, #100]	; (80080bc <MX_TIM4_Init+0x94>)
 8008058:	f241 726f 	movw	r2, #5999	; 0x176f
 800805c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800805e:	4b17      	ldr	r3, [pc, #92]	; (80080bc <MX_TIM4_Init+0x94>)
 8008060:	2200      	movs	r2, #0
 8008062:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008064:	4b15      	ldr	r3, [pc, #84]	; (80080bc <MX_TIM4_Init+0x94>)
 8008066:	2200      	movs	r2, #0
 8008068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800806a:	4814      	ldr	r0, [pc, #80]	; (80080bc <MX_TIM4_Init+0x94>)
 800806c:	f003 feb6 	bl	800bddc <HAL_TIM_Base_Init>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8008076:	f7fe fc3d 	bl	80068f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800807a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800807e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	4619      	mov	r1, r3
 8008086:	480d      	ldr	r0, [pc, #52]	; (80080bc <MX_TIM4_Init+0x94>)
 8008088:	f004 f95a 	bl	800c340 <HAL_TIM_ConfigClockSource>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8008092:	f7fe fc2f 	bl	80068f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008096:	2300      	movs	r3, #0
 8008098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800809a:	2300      	movs	r3, #0
 800809c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800809e:	463b      	mov	r3, r7
 80080a0:	4619      	mov	r1, r3
 80080a2:	4806      	ldr	r0, [pc, #24]	; (80080bc <MX_TIM4_Init+0x94>)
 80080a4:	f004 fd34 	bl	800cb10 <HAL_TIMEx_MasterConfigSynchronization>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d001      	beq.n	80080b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80080ae:	f7fe fc21 	bl	80068f4 <Error_Handler>
  }

}
 80080b2:	bf00      	nop
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20001094 	.word	0x20001094
 80080c0:	40000800 	.word	0x40000800

080080c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <HAL_TIM_Base_MspInit+0xe0>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d10e      	bne.n	80080f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80080d6:	2300      	movs	r3, #0
 80080d8:	617b      	str	r3, [r7, #20]
 80080da:	4b33      	ldr	r3, [pc, #204]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 80080dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080de:	4a32      	ldr	r2, [pc, #200]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 80080e0:	f043 0301 	orr.w	r3, r3, #1
 80080e4:	6453      	str	r3, [r2, #68]	; 0x44
 80080e6:	4b30      	ldr	r3, [pc, #192]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
 80080f0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80080f2:	e052      	b.n	800819a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fc:	d116      	bne.n	800812c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	4b29      	ldr	r3, [pc, #164]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	4a28      	ldr	r2, [pc, #160]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008108:	f043 0301 	orr.w	r3, r3, #1
 800810c:	6413      	str	r3, [r2, #64]	; 0x40
 800810e:	4b26      	ldr	r3, [pc, #152]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800811a:	2200      	movs	r2, #0
 800811c:	2100      	movs	r1, #0
 800811e:	201c      	movs	r0, #28
 8008120:	f001 fd19 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008124:	201c      	movs	r0, #28
 8008126:	f001 fd32 	bl	8009b8e <HAL_NVIC_EnableIRQ>
}
 800812a:	e036      	b.n	800819a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a1e      	ldr	r2, [pc, #120]	; (80081ac <HAL_TIM_Base_MspInit+0xe8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d116      	bne.n	8008164 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008136:	2300      	movs	r3, #0
 8008138:	60fb      	str	r3, [r7, #12]
 800813a:	4b1b      	ldr	r3, [pc, #108]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	4a1a      	ldr	r2, [pc, #104]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008140:	f043 0302 	orr.w	r3, r3, #2
 8008144:	6413      	str	r3, [r2, #64]	; 0x40
 8008146:	4b18      	ldr	r3, [pc, #96]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	f003 0302 	and.w	r3, r3, #2
 800814e:	60fb      	str	r3, [r7, #12]
 8008150:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008152:	2200      	movs	r2, #0
 8008154:	2100      	movs	r1, #0
 8008156:	201d      	movs	r0, #29
 8008158:	f001 fcfd 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800815c:	201d      	movs	r0, #29
 800815e:	f001 fd16 	bl	8009b8e <HAL_NVIC_EnableIRQ>
}
 8008162:	e01a      	b.n	800819a <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a11      	ldr	r2, [pc, #68]	; (80081b0 <HAL_TIM_Base_MspInit+0xec>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d115      	bne.n	800819a <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	4b0d      	ldr	r3, [pc, #52]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	4a0c      	ldr	r2, [pc, #48]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008178:	f043 0304 	orr.w	r3, r3, #4
 800817c:	6413      	str	r3, [r2, #64]	; 0x40
 800817e:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <HAL_TIM_Base_MspInit+0xe4>)
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	60bb      	str	r3, [r7, #8]
 8008188:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	201e      	movs	r0, #30
 8008190:	f001 fce1 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008194:	201e      	movs	r0, #30
 8008196:	f001 fcfa 	bl	8009b8e <HAL_NVIC_EnableIRQ>
}
 800819a:	bf00      	nop
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	40010000 	.word	0x40010000
 80081a8:	40023800 	.word	0x40023800
 80081ac:	40000400 	.word	0x40000400
 80081b0:	40000800 	.word	0x40000800

080081b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081bc:	f107 030c 	add.w	r3, r7, #12
 80081c0:	2200      	movs	r2, #0
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	605a      	str	r2, [r3, #4]
 80081c6:	609a      	str	r2, [r3, #8]
 80081c8:	60da      	str	r2, [r3, #12]
 80081ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a12      	ldr	r2, [pc, #72]	; (800821c <HAL_TIM_MspPostInit+0x68>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d11e      	bne.n	8008214 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081d6:	2300      	movs	r3, #0
 80081d8:	60bb      	str	r3, [r7, #8]
 80081da:	4b11      	ldr	r3, [pc, #68]	; (8008220 <HAL_TIM_MspPostInit+0x6c>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	4a10      	ldr	r2, [pc, #64]	; (8008220 <HAL_TIM_MspPostInit+0x6c>)
 80081e0:	f043 0301 	orr.w	r3, r3, #1
 80081e4:	6313      	str	r3, [r2, #48]	; 0x30
 80081e6:	4b0e      	ldr	r3, [pc, #56]	; (8008220 <HAL_TIM_MspPostInit+0x6c>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80081f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081f8:	2302      	movs	r3, #2
 80081fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008200:	2303      	movs	r3, #3
 8008202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008204:	2301      	movs	r3, #1
 8008206:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008208:	f107 030c 	add.w	r3, r7, #12
 800820c:	4619      	mov	r1, r3
 800820e:	4805      	ldr	r0, [pc, #20]	; (8008224 <HAL_TIM_MspPostInit+0x70>)
 8008210:	f002 f866 	bl	800a2e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8008214:	bf00      	nop
 8008216:	3720      	adds	r7, #32
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	40010000 	.word	0x40010000
 8008220:	40023800 	.word	0x40023800
 8008224:	40020000 	.word	0x40020000

08008228 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800822c:	4b11      	ldr	r3, [pc, #68]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 800822e:	4a12      	ldr	r2, [pc, #72]	; (8008278 <MX_USART1_UART_Init+0x50>)
 8008230:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008232:	4b10      	ldr	r3, [pc, #64]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 8008234:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008238:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800823a:	4b0e      	ldr	r3, [pc, #56]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 800823c:	2200      	movs	r2, #0
 800823e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008240:	4b0c      	ldr	r3, [pc, #48]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 8008242:	2200      	movs	r2, #0
 8008244:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008246:	4b0b      	ldr	r3, [pc, #44]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 8008248:	2200      	movs	r2, #0
 800824a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800824c:	4b09      	ldr	r3, [pc, #36]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 800824e:	220c      	movs	r2, #12
 8008250:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008252:	4b08      	ldr	r3, [pc, #32]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 8008254:	2200      	movs	r2, #0
 8008256:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008258:	4b06      	ldr	r3, [pc, #24]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 800825a:	2200      	movs	r2, #0
 800825c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800825e:	4805      	ldr	r0, [pc, #20]	; (8008274 <MX_USART1_UART_Init+0x4c>)
 8008260:	f004 fcfd 	bl	800cc5e <HAL_UART_Init>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d001      	beq.n	800826e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800826a:	f7fe fb43 	bl	80068f4 <Error_Handler>
  }

}
 800826e:	bf00      	nop
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	200011d4 	.word	0x200011d4
 8008278:	40011000 	.word	0x40011000

0800827c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8008280:	4b11      	ldr	r3, [pc, #68]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 8008282:	4a12      	ldr	r2, [pc, #72]	; (80082cc <MX_USART3_UART_Init+0x50>)
 8008284:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8008286:	4b10      	ldr	r3, [pc, #64]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 8008288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800828c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800828e:	4b0e      	ldr	r3, [pc, #56]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 8008290:	2200      	movs	r2, #0
 8008292:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8008294:	4b0c      	ldr	r3, [pc, #48]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 8008296:	2200      	movs	r2, #0
 8008298:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800829a:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 800829c:	2200      	movs	r2, #0
 800829e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80082a0:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 80082a2:	220c      	movs	r2, #12
 80082a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80082ac:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80082b2:	4805      	ldr	r0, [pc, #20]	; (80082c8 <MX_USART3_UART_Init+0x4c>)
 80082b4:	f004 fcd3 	bl	800cc5e <HAL_UART_Init>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d001      	beq.n	80082c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80082be:	f7fe fb19 	bl	80068f4 <Error_Handler>
  }

}
 80082c2:	bf00      	nop
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop
 80082c8:	20001194 	.word	0x20001194
 80082cc:	40004800 	.word	0x40004800

080082d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b08c      	sub	sp, #48	; 0x30
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d8:	f107 031c 	add.w	r3, r7, #28
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	605a      	str	r2, [r3, #4]
 80082e2:	609a      	str	r2, [r3, #8]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a3a      	ldr	r2, [pc, #232]	; (80083d8 <HAL_UART_MspInit+0x108>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d134      	bne.n	800835c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80082f2:	2300      	movs	r3, #0
 80082f4:	61bb      	str	r3, [r7, #24]
 80082f6:	4b39      	ldr	r3, [pc, #228]	; (80083dc <HAL_UART_MspInit+0x10c>)
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	4a38      	ldr	r2, [pc, #224]	; (80083dc <HAL_UART_MspInit+0x10c>)
 80082fc:	f043 0310 	orr.w	r3, r3, #16
 8008300:	6453      	str	r3, [r2, #68]	; 0x44
 8008302:	4b36      	ldr	r3, [pc, #216]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	61bb      	str	r3, [r7, #24]
 800830c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
 8008312:	4b32      	ldr	r3, [pc, #200]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	4a31      	ldr	r2, [pc, #196]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008318:	f043 0302 	orr.w	r3, r3, #2
 800831c:	6313      	str	r3, [r2, #48]	; 0x30
 800831e:	4b2f      	ldr	r3, [pc, #188]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800832a:	23c0      	movs	r3, #192	; 0xc0
 800832c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800832e:	2302      	movs	r3, #2
 8008330:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008332:	2300      	movs	r3, #0
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008336:	2303      	movs	r3, #3
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800833a:	2307      	movs	r3, #7
 800833c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800833e:	f107 031c 	add.w	r3, r7, #28
 8008342:	4619      	mov	r1, r3
 8008344:	4826      	ldr	r0, [pc, #152]	; (80083e0 <HAL_UART_MspInit+0x110>)
 8008346:	f001 ffcb 	bl	800a2e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	2101      	movs	r1, #1
 800834e:	2025      	movs	r0, #37	; 0x25
 8008350:	f001 fc01 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008354:	2025      	movs	r0, #37	; 0x25
 8008356:	f001 fc1a 	bl	8009b8e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800835a:	e039      	b.n	80083d0 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a20      	ldr	r2, [pc, #128]	; (80083e4 <HAL_UART_MspInit+0x114>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d134      	bne.n	80083d0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	4b1c      	ldr	r3, [pc, #112]	; (80083dc <HAL_UART_MspInit+0x10c>)
 800836c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800836e:	4a1b      	ldr	r2, [pc, #108]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008374:	6413      	str	r3, [r2, #64]	; 0x40
 8008376:	4b19      	ldr	r3, [pc, #100]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800837e:	613b      	str	r3, [r7, #16]
 8008380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008382:	2300      	movs	r3, #0
 8008384:	60fb      	str	r3, [r7, #12]
 8008386:	4b15      	ldr	r3, [pc, #84]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838a:	4a14      	ldr	r2, [pc, #80]	; (80083dc <HAL_UART_MspInit+0x10c>)
 800838c:	f043 0304 	orr.w	r3, r3, #4
 8008390:	6313      	str	r3, [r2, #48]	; 0x30
 8008392:	4b12      	ldr	r3, [pc, #72]	; (80083dc <HAL_UART_MspInit+0x10c>)
 8008394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008396:	f003 0304 	and.w	r3, r3, #4
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800839e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80083a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083a4:	2302      	movs	r3, #2
 80083a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083a8:	2300      	movs	r3, #0
 80083aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083ac:	2303      	movs	r3, #3
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80083b0:	2307      	movs	r3, #7
 80083b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083b4:	f107 031c 	add.w	r3, r7, #28
 80083b8:	4619      	mov	r1, r3
 80083ba:	480b      	ldr	r0, [pc, #44]	; (80083e8 <HAL_UART_MspInit+0x118>)
 80083bc:	f001 ff90 	bl	800a2e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80083c0:	2200      	movs	r2, #0
 80083c2:	2101      	movs	r1, #1
 80083c4:	2027      	movs	r0, #39	; 0x27
 80083c6:	f001 fbc6 	bl	8009b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80083ca:	2027      	movs	r0, #39	; 0x27
 80083cc:	f001 fbdf 	bl	8009b8e <HAL_NVIC_EnableIRQ>
}
 80083d0:	bf00      	nop
 80083d2:	3730      	adds	r7, #48	; 0x30
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40011000 	.word	0x40011000
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40020400 	.word	0x40020400
 80083e4:	40004800 	.word	0x40004800
 80083e8:	40020800 	.word	0x40020800

080083ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80083ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008424 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80083f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80083f2:	e003      	b.n	80083fc <LoopCopyDataInit>

080083f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80083f4:	4b0c      	ldr	r3, [pc, #48]	; (8008428 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80083f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80083f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80083fa:	3104      	adds	r1, #4

080083fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80083fc:	480b      	ldr	r0, [pc, #44]	; (800842c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80083fe:	4b0c      	ldr	r3, [pc, #48]	; (8008430 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008400:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008402:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008404:	d3f6      	bcc.n	80083f4 <CopyDataInit>
  ldr  r2, =_sbss
 8008406:	4a0b      	ldr	r2, [pc, #44]	; (8008434 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008408:	e002      	b.n	8008410 <LoopFillZerobss>

0800840a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800840a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800840c:	f842 3b04 	str.w	r3, [r2], #4

08008410 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008412:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008414:	d3f9      	bcc.n	800840a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008416:	f7ff fc9f 	bl	8007d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800841a:	f005 f885 	bl	800d528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800841e:	f7fd ff9b 	bl	8006358 <main>
  bx  lr    
 8008422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008424:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008428:	0801053c 	.word	0x0801053c
  ldr  r0, =_sdata
 800842c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008430:	20000238 	.word	0x20000238
  ldr  r2, =_sbss
 8008434:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 8008438:	2000121c 	.word	0x2000121c

0800843c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800843c:	e7fe      	b.n	800843c <ADC_IRQHandler>
	...

08008440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008444:	4b0e      	ldr	r3, [pc, #56]	; (8008480 <HAL_Init+0x40>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a0d      	ldr	r2, [pc, #52]	; (8008480 <HAL_Init+0x40>)
 800844a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800844e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8008450:	4b0b      	ldr	r3, [pc, #44]	; (8008480 <HAL_Init+0x40>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a0a      	ldr	r2, [pc, #40]	; (8008480 <HAL_Init+0x40>)
 8008456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800845a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <HAL_Init+0x40>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a07      	ldr	r2, [pc, #28]	; (8008480 <HAL_Init+0x40>)
 8008462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008468:	2003      	movs	r0, #3
 800846a:	f001 fb69 	bl	8009b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800846e:	2000      	movs	r0, #0
 8008470:	f000 f808 	bl	8008484 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008474:	f7fe fcee 	bl	8006e54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	bd80      	pop	{r7, pc}
 800847e:	bf00      	nop
 8008480:	40023c00 	.word	0x40023c00

08008484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800848c:	4b12      	ldr	r3, [pc, #72]	; (80084d8 <HAL_InitTick+0x54>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4b12      	ldr	r3, [pc, #72]	; (80084dc <HAL_InitTick+0x58>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	4619      	mov	r1, r3
 8008496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800849a:	fbb3 f3f1 	udiv	r3, r3, r1
 800849e:	fbb2 f3f3 	udiv	r3, r2, r3
 80084a2:	4618      	mov	r0, r3
 80084a4:	f001 fb81 	bl	8009baa <HAL_SYSTICK_Config>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d001      	beq.n	80084b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e00e      	b.n	80084d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b0f      	cmp	r3, #15
 80084b6:	d80a      	bhi.n	80084ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80084b8:	2200      	movs	r2, #0
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	f001 fb49 	bl	8009b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80084c4:	4a06      	ldr	r2, [pc, #24]	; (80084e0 <HAL_InitTick+0x5c>)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	e000      	b.n	80084d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80084ce:	2301      	movs	r3, #1
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000058 	.word	0x20000058
 80084dc:	20000060 	.word	0x20000060
 80084e0:	2000005c 	.word	0x2000005c

080084e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80084e4:	b480      	push	{r7}
 80084e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80084e8:	4b05      	ldr	r3, [pc, #20]	; (8008500 <HAL_IncTick+0x1c>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	461a      	mov	r2, r3
 80084ee:	4b05      	ldr	r3, [pc, #20]	; (8008504 <HAL_IncTick+0x20>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4413      	add	r3, r2
 80084f4:	4a03      	ldr	r2, [pc, #12]	; (8008504 <HAL_IncTick+0x20>)
 80084f6:	6013      	str	r3, [r2, #0]
}
 80084f8:	bf00      	nop
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr
 8008500:	20000060 	.word	0x20000060
 8008504:	20001214 	.word	0x20001214

08008508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
  return uwTick;
 800850c:	4b02      	ldr	r3, [pc, #8]	; (8008518 <HAL_GetTick+0x10>)
 800850e:	681b      	ldr	r3, [r3, #0]
}
 8008510:	4618      	mov	r0, r3
 8008512:	46bd      	mov	sp, r7
 8008514:	bc80      	pop	{r7}
 8008516:	4770      	bx	lr
 8008518:	20001214 	.word	0x20001214

0800851c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008524:	f7ff fff0 	bl	8008508 <HAL_GetTick>
 8008528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008534:	d005      	beq.n	8008542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008536:	4b09      	ldr	r3, [pc, #36]	; (800855c <HAL_Delay+0x40>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	461a      	mov	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	4413      	add	r3, r2
 8008540:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008542:	bf00      	nop
 8008544:	f7ff ffe0 	bl	8008508 <HAL_GetTick>
 8008548:	4602      	mov	r2, r0
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	429a      	cmp	r2, r3
 8008552:	d8f7      	bhi.n	8008544 <HAL_Delay+0x28>
  {
  }
}
 8008554:	bf00      	nop
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20000060 	.word	0x20000060

08008560 <HAL_ADC_Init>:
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_ADC_Init+0x16>
 8008572:	2301      	movs	r3, #1
 8008574:	e033      	b.n	80085de <HAL_ADC_Init+0x7e>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	2b00      	cmp	r3, #0
 800857c:	d109      	bne.n	8008592 <HAL_ADC_Init+0x32>
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7fd f864 	bl	800564c <HAL_ADC_MspInit>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	645a      	str	r2, [r3, #68]	; 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008596:	f003 0310 	and.w	r3, r3, #16
 800859a:	2b00      	cmp	r3, #0
 800859c:	d118      	bne.n	80085d0 <HAL_ADC_Init+0x70>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80085a6:	f023 0302 	bic.w	r3, r3, #2
 80085aa:	f043 0202 	orr.w	r2, r3, #2
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	641a      	str	r2, [r3, #64]	; 0x40
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa1c 	bl	80089f0 <ADC_Init>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	645a      	str	r2, [r3, #68]	; 0x44
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	f023 0303 	bic.w	r3, r3, #3
 80085c6:	f043 0201 	orr.w	r2, r3, #1
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	641a      	str	r2, [r3, #64]	; 0x40
 80085ce:	e001      	b.n	80085d4 <HAL_ADC_Init+0x74>
 80085d0:	2301      	movs	r3, #1
 80085d2:	73fb      	strb	r3, [r7, #15]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_ADC_Start_DMA>:
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
 80085f4:	2300      	movs	r3, #0
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d101      	bne.n	8008606 <HAL_ADC_Start_DMA+0x1e>
 8008602:	2302      	movs	r3, #2
 8008604:	e0af      	b.n	8008766 <HAL_ADC_Start_DMA+0x17e>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d018      	beq.n	800864e <HAL_ADC_Start_DMA+0x66>
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f042 0201 	orr.w	r2, r2, #1
 800862a:	609a      	str	r2, [r3, #8]
 800862c:	4b50      	ldr	r3, [pc, #320]	; (8008770 <HAL_ADC_Start_DMA+0x188>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a50      	ldr	r2, [pc, #320]	; (8008774 <HAL_ADC_Start_DMA+0x18c>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	0c9a      	lsrs	r2, r3, #18
 8008638:	4613      	mov	r3, r2
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	4413      	add	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
 8008640:	e002      	b.n	8008648 <HAL_ADC_Start_DMA+0x60>
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	3b01      	subs	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1f9      	bne.n	8008642 <HAL_ADC_Start_DMA+0x5a>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b01      	cmp	r3, #1
 800865a:	f040 8083 	bne.w	8008764 <HAL_ADC_Start_DMA+0x17c>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008662:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008666:	f023 0301 	bic.w	r3, r3, #1
 800866a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	641a      	str	r2, [r3, #64]	; 0x40
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	685b      	ldr	r3, [r3, #4]
 8008678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800867c:	2b00      	cmp	r3, #0
 800867e:	d007      	beq.n	8008690 <HAL_ADC_Start_DMA+0xa8>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008688:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	641a      	str	r2, [r3, #64]	; 0x40
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869c:	d106      	bne.n	80086ac <HAL_ADC_Start_DMA+0xc4>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a2:	f023 0206 	bic.w	r2, r3, #6
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	645a      	str	r2, [r3, #68]	; 0x44
 80086aa:	e002      	b.n	80086b2 <HAL_ADC_Start_DMA+0xca>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2200      	movs	r2, #0
 80086b0:	645a      	str	r2, [r3, #68]	; 0x44
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	4a2e      	ldr	r2, [pc, #184]	; (8008778 <HAL_ADC_Start_DMA+0x190>)
 80086c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086c6:	4a2d      	ldr	r2, [pc, #180]	; (800877c <HAL_ADC_Start_DMA+0x194>)
 80086c8:	641a      	str	r2, [r3, #64]	; 0x40
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	4a2c      	ldr	r2, [pc, #176]	; (8008780 <HAL_ADC_Start_DMA+0x198>)
 80086d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80086ea:	605a      	str	r2, [r3, #4]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689a      	ldr	r2, [r3, #8]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086fa:	609a      	str	r2, [r3, #8]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	334c      	adds	r3, #76	; 0x4c
 8008706:	4619      	mov	r1, r3
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f001 fb08 	bl	8009d20 <HAL_DMA_Start_IT>
 8008710:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <HAL_ADC_Start_DMA+0x19c>)
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	f003 031f 	and.w	r3, r3, #31
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10f      	bne.n	800873c <HAL_ADC_Start_DMA+0x154>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d11c      	bne.n	8008764 <HAL_ADC_Start_DMA+0x17c>
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689a      	ldr	r2, [r3, #8]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008738:	609a      	str	r2, [r3, #8]
 800873a:	e013      	b.n	8008764 <HAL_ADC_Start_DMA+0x17c>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a11      	ldr	r2, [pc, #68]	; (8008788 <HAL_ADC_Start_DMA+0x1a0>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d10e      	bne.n	8008764 <HAL_ADC_Start_DMA+0x17c>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d107      	bne.n	8008764 <HAL_ADC_Start_DMA+0x17c>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	689a      	ldr	r2, [r3, #8]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008762:	609a      	str	r2, [r3, #8]
 8008764:	2300      	movs	r3, #0
 8008766:	4618      	mov	r0, r3
 8008768:	3718      	adds	r7, #24
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	20000058 	.word	0x20000058
 8008774:	431bde83 	.word	0x431bde83
 8008778:	08008bf9 	.word	0x08008bf9
 800877c:	08008cb3 	.word	0x08008cb3
 8008780:	08008ccf 	.word	0x08008ccf
 8008784:	40012300 	.word	0x40012300
 8008788:	40012000 	.word	0x40012000

0800878c <HAL_ADC_ConvHalfCpltCallback>:
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr

0800879e <HAL_ADC_ErrorCallback>:
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <HAL_ADC_ConfigChannel>:
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <HAL_ADC_ConfigChannel+0x1c>
 80087c8:	2302      	movs	r3, #2
 80087ca:	e103      	b.n	80089d4 <HAL_ADC_ConfigChannel+0x224>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d925      	bls.n	8008828 <HAL_ADC_ConfigChannel+0x78>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68d9      	ldr	r1, [r3, #12]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	461a      	mov	r2, r3
 80087ea:	4613      	mov	r3, r2
 80087ec:	005b      	lsls	r3, r3, #1
 80087ee:	4413      	add	r3, r2
 80087f0:	3b1e      	subs	r3, #30
 80087f2:	2207      	movs	r2, #7
 80087f4:	fa02 f303 	lsl.w	r3, r2, r3
 80087f8:	43da      	mvns	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	400a      	ands	r2, r1
 8008800:	60da      	str	r2, [r3, #12]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68d9      	ldr	r1, [r3, #12]
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	b29b      	uxth	r3, r3
 8008812:	4618      	mov	r0, r3
 8008814:	4603      	mov	r3, r0
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	4403      	add	r3, r0
 800881a:	3b1e      	subs	r3, #30
 800881c:	409a      	lsls	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	60da      	str	r2, [r3, #12]
 8008826:	e022      	b.n	800886e <HAL_ADC_ConfigChannel+0xbe>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6919      	ldr	r1, [r3, #16]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	b29b      	uxth	r3, r3
 8008834:	461a      	mov	r2, r3
 8008836:	4613      	mov	r3, r2
 8008838:	005b      	lsls	r3, r3, #1
 800883a:	4413      	add	r3, r2
 800883c:	2207      	movs	r2, #7
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	43da      	mvns	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	400a      	ands	r2, r1
 800884a:	611a      	str	r2, [r3, #16]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6919      	ldr	r1, [r3, #16]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	4618      	mov	r0, r3
 800885e:	4603      	mov	r3, r0
 8008860:	005b      	lsls	r3, r3, #1
 8008862:	4403      	add	r3, r0
 8008864:	409a      	lsls	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	430a      	orrs	r2, r1
 800886c:	611a      	str	r2, [r3, #16]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	2b06      	cmp	r3, #6
 8008874:	d824      	bhi.n	80088c0 <HAL_ADC_ConfigChannel+0x110>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	3b05      	subs	r3, #5
 8008888:	221f      	movs	r2, #31
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	43da      	mvns	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	400a      	ands	r2, r1
 8008896:	635a      	str	r2, [r3, #52]	; 0x34
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	4618      	mov	r0, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685a      	ldr	r2, [r3, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	3b05      	subs	r3, #5
 80088b2:	fa00 f203 	lsl.w	r2, r0, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	635a      	str	r2, [r3, #52]	; 0x34
 80088be:	e04c      	b.n	800895a <HAL_ADC_ConfigChannel+0x1aa>
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b0c      	cmp	r3, #12
 80088c6:	d824      	bhi.n	8008912 <HAL_ADC_ConfigChannel+0x162>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	4613      	mov	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4413      	add	r3, r2
 80088d8:	3b23      	subs	r3, #35	; 0x23
 80088da:	221f      	movs	r2, #31
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	43da      	mvns	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	400a      	ands	r2, r1
 80088e8:	631a      	str	r2, [r3, #48]	; 0x30
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	4618      	mov	r0, r3
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	685a      	ldr	r2, [r3, #4]
 80088fc:	4613      	mov	r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	3b23      	subs	r3, #35	; 0x23
 8008904:	fa00 f203 	lsl.w	r2, r0, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	430a      	orrs	r2, r1
 800890e:	631a      	str	r2, [r3, #48]	; 0x30
 8008910:	e023      	b.n	800895a <HAL_ADC_ConfigChannel+0x1aa>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	4613      	mov	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4413      	add	r3, r2
 8008922:	3b41      	subs	r3, #65	; 0x41
 8008924:	221f      	movs	r2, #31
 8008926:	fa02 f303 	lsl.w	r3, r2, r3
 800892a:	43da      	mvns	r2, r3
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	400a      	ands	r2, r1
 8008932:	62da      	str	r2, [r3, #44]	; 0x2c
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	4618      	mov	r0, r3
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	4613      	mov	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	4413      	add	r3, r2
 800894c:	3b41      	subs	r3, #65	; 0x41
 800894e:	fa00 f203 	lsl.w	r2, r0, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	62da      	str	r2, [r3, #44]	; 0x2c
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a20      	ldr	r2, [pc, #128]	; (80089e0 <HAL_ADC_ConfigChannel+0x230>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d109      	bne.n	8008978 <HAL_ADC_ConfigChannel+0x1c8>
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2b12      	cmp	r3, #18
 800896a:	d105      	bne.n	8008978 <HAL_ADC_ConfigChannel+0x1c8>
 800896c:	4b1d      	ldr	r3, [pc, #116]	; (80089e4 <HAL_ADC_ConfigChannel+0x234>)
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	4a1c      	ldr	r2, [pc, #112]	; (80089e4 <HAL_ADC_ConfigChannel+0x234>)
 8008972:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008976:	6053      	str	r3, [r2, #4]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a18      	ldr	r2, [pc, #96]	; (80089e0 <HAL_ADC_ConfigChannel+0x230>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d123      	bne.n	80089ca <HAL_ADC_ConfigChannel+0x21a>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b10      	cmp	r3, #16
 8008988:	d003      	beq.n	8008992 <HAL_ADC_ConfigChannel+0x1e2>
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b11      	cmp	r3, #17
 8008990:	d11b      	bne.n	80089ca <HAL_ADC_ConfigChannel+0x21a>
 8008992:	4b14      	ldr	r3, [pc, #80]	; (80089e4 <HAL_ADC_ConfigChannel+0x234>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4a13      	ldr	r2, [pc, #76]	; (80089e4 <HAL_ADC_ConfigChannel+0x234>)
 8008998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800899c:	6053      	str	r3, [r2, #4]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b10      	cmp	r3, #16
 80089a4:	d111      	bne.n	80089ca <HAL_ADC_ConfigChannel+0x21a>
 80089a6:	4b10      	ldr	r3, [pc, #64]	; (80089e8 <HAL_ADC_ConfigChannel+0x238>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a10      	ldr	r2, [pc, #64]	; (80089ec <HAL_ADC_ConfigChannel+0x23c>)
 80089ac:	fba2 2303 	umull	r2, r3, r2, r3
 80089b0:	0c9a      	lsrs	r2, r3, #18
 80089b2:	4613      	mov	r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4413      	add	r3, r2
 80089b8:	005b      	lsls	r3, r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
 80089bc:	e002      	b.n	80089c4 <HAL_ADC_ConfigChannel+0x214>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f9      	bne.n	80089be <HAL_ADC_ConfigChannel+0x20e>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089d2:	2300      	movs	r3, #0
 80089d4:	4618      	mov	r0, r3
 80089d6:	3714      	adds	r7, #20
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	40012000 	.word	0x40012000
 80089e4:	40012300 	.word	0x40012300
 80089e8:	20000058 	.word	0x20000058
 80089ec:	431bde83 	.word	0x431bde83

080089f0 <ADC_Init>:
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	4b7d      	ldr	r3, [pc, #500]	; (8008bf0 <ADC_Init+0x200>)
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	4a7c      	ldr	r2, [pc, #496]	; (8008bf0 <ADC_Init+0x200>)
 80089fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008a02:	6053      	str	r3, [r2, #4]
 8008a04:	4b7a      	ldr	r3, [pc, #488]	; (8008bf0 <ADC_Init+0x200>)
 8008a06:	685a      	ldr	r2, [r3, #4]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	4978      	ldr	r1, [pc, #480]	; (8008bf0 <ADC_Init+0x200>)
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	604b      	str	r3, [r1, #4]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	685a      	ldr	r2, [r3, #4]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a20:	605a      	str	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6859      	ldr	r1, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	691b      	ldr	r3, [r3, #16]
 8008a2c:	021a      	lsls	r2, r3, #8
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	605a      	str	r2, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685a      	ldr	r2, [r3, #4]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008a44:	605a      	str	r2, [r3, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	6859      	ldr	r1, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689a      	ldr	r2, [r3, #8]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	605a      	str	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6899      	ldr	r1, [r3, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68da      	ldr	r2, [r3, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	609a      	str	r2, [r3, #8]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	4a5d      	ldr	r2, [pc, #372]	; (8008bf4 <ADC_Init+0x204>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d022      	beq.n	8008aca <ADC_Init+0xda>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	689a      	ldr	r2, [r3, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6899      	ldr	r1, [r3, #8]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689a      	ldr	r2, [r3, #8]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008ab4:	609a      	str	r2, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6899      	ldr	r1, [r3, #8]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	609a      	str	r2, [r3, #8]
 8008ac8:	e00f      	b.n	8008aea <ADC_Init+0xfa>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ad8:	609a      	str	r2, [r3, #8]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008ae8:	609a      	str	r2, [r3, #8]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	689a      	ldr	r2, [r3, #8]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0202 	bic.w	r2, r2, #2
 8008af8:	609a      	str	r2, [r3, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6899      	ldr	r1, [r3, #8]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	005a      	lsls	r2, r3, #1
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	430a      	orrs	r2, r1
 8008b0c:	609a      	str	r2, [r3, #8]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d027      	beq.n	8008b66 <ADC_Init+0x176>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b24:	605a      	str	r2, [r3, #4]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	685a      	ldr	r2, [r3, #4]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008b34:	605a      	str	r2, [r3, #4]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8008b40:	60fa      	str	r2, [r7, #12]
 8008b42:	68fa      	ldr	r2, [r7, #12]
 8008b44:	fa92 f2a2 	rbit	r2, r2
 8008b48:	60ba      	str	r2, [r7, #8]
 8008b4a:	68ba      	ldr	r2, [r7, #8]
 8008b4c:	fab2 f282 	clz	r2, r2
 8008b50:	b2d2      	uxtb	r2, r2
 8008b52:	fa03 f102 	lsl.w	r1, r3, r2
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	685a      	ldr	r2, [r3, #4]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	605a      	str	r2, [r3, #4]
 8008b64:	e007      	b.n	8008b76 <ADC_Init+0x186>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b74:	605a      	str	r2, [r3, #4]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	69db      	ldr	r3, [r3, #28]
 8008b90:	3b01      	subs	r3, #1
 8008b92:	051a      	lsls	r2, r3, #20
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008baa:	609a      	str	r2, [r3, #8]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	6899      	ldr	r1, [r3, #8]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb6:	025a      	lsls	r2, r3, #9
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	609a      	str	r2, [r3, #8]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bce:	609a      	str	r2, [r3, #8]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6899      	ldr	r1, [r3, #8]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	029a      	lsls	r2, r3, #10
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	430a      	orrs	r2, r1
 8008be2:	609a      	str	r2, [r3, #8]
 8008be4:	bf00      	nop
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bc80      	pop	{r7}
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	40012300 	.word	0x40012300
 8008bf4:	0f000001 	.word	0x0f000001

08008bf8 <ADC_DMAConvCplt>:
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c04:	60fb      	str	r3, [r7, #12]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d13c      	bne.n	8008c8c <ADC_DMAConvCplt+0x94>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	641a      	str	r2, [r3, #64]	; 0x40
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d12b      	bne.n	8008c84 <ADC_DMAConvCplt+0x8c>
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d127      	bne.n	8008c84 <ADC_DMAConvCplt+0x8c>
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d006      	beq.n	8008c50 <ADC_DMAConvCplt+0x58>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d119      	bne.n	8008c84 <ADC_DMAConvCplt+0x8c>
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0220 	bic.w	r2, r2, #32
 8008c5e:	605a      	str	r2, [r3, #4]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <ADC_DMAConvCplt+0x8c>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	f043 0201 	orr.w	r2, r3, #1
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	641a      	str	r2, [r3, #64]	; 0x40
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f7fd fc1b 	bl	80064c0 <HAL_ADC_ConvCpltCallback>
 8008c8a:	e00e      	b.n	8008caa <ADC_DMAConvCplt+0xb2>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c90:	f003 0310 	and.w	r3, r3, #16
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <ADC_DMAConvCplt+0xa8>
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff fd80 	bl	800879e <HAL_ADC_ErrorCallback>
 8008c9e:	e004      	b.n	8008caa <ADC_DMAConvCplt+0xb2>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	4798      	blx	r3
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <ADC_DMAHalfConvCplt>:
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff fd63 	bl	800878c <HAL_ADC_ConvHalfCpltCallback>
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <ADC_DMAError>:
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2240      	movs	r2, #64	; 0x40
 8008ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce6:	f043 0204 	orr.w	r2, r3, #4
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	645a      	str	r2, [r3, #68]	; 0x44
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	f7ff fd55 	bl	800879e <HAL_ADC_ErrorCallback>
 8008cf4:	bf00      	nop
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e0ed      	b.n	8008eea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d102      	bne.n	8008d20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7fc fd7e 	bl	800581c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f022 0202 	bic.w	r2, r2, #2
 8008d2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d30:	f7ff fbea 	bl	8008508 <HAL_GetTick>
 8008d34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d36:	e012      	b.n	8008d5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d38:	f7ff fbe6 	bl	8008508 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	1ad3      	subs	r3, r2, r3
 8008d42:	2b0a      	cmp	r3, #10
 8008d44:	d90b      	bls.n	8008d5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2205      	movs	r2, #5
 8008d56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	e0c5      	b.n	8008eea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e5      	bne.n	8008d38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f042 0201 	orr.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d7c:	f7ff fbc4 	bl	8008508 <HAL_GetTick>
 8008d80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008d82:	e012      	b.n	8008daa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008d84:	f7ff fbc0 	bl	8008508 <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b0a      	cmp	r3, #10
 8008d90:	d90b      	bls.n	8008daa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2205      	movs	r2, #5
 8008da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e09f      	b.n	8008eea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d0e5      	beq.n	8008d84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	7e1b      	ldrb	r3, [r3, #24]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d108      	bne.n	8008dd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	e007      	b.n	8008de2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008de0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	7e5b      	ldrb	r3, [r3, #25]
 8008de6:	2b01      	cmp	r3, #1
 8008de8:	d108      	bne.n	8008dfc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df8:	601a      	str	r2, [r3, #0]
 8008dfa:	e007      	b.n	8008e0c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	7e9b      	ldrb	r3, [r3, #26]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d108      	bne.n	8008e26 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 0220 	orr.w	r2, r2, #32
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	e007      	b.n	8008e36 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f022 0220 	bic.w	r2, r2, #32
 8008e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	7edb      	ldrb	r3, [r3, #27]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d108      	bne.n	8008e50 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 0210 	bic.w	r2, r2, #16
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f042 0210 	orr.w	r2, r2, #16
 8008e5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	7f1b      	ldrb	r3, [r3, #28]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d108      	bne.n	8008e7a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0208 	orr.w	r2, r2, #8
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e007      	b.n	8008e8a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 0208 	bic.w	r2, r2, #8
 8008e88:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7f5b      	ldrb	r3, [r3, #29]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d108      	bne.n	8008ea4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f042 0204 	orr.w	r2, r2, #4
 8008ea0:	601a      	str	r2, [r3, #0]
 8008ea2:	e007      	b.n	8008eb4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0204 	bic.w	r2, r2, #4
 8008eb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	431a      	orrs	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	ea42 0103 	orr.w	r1, r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	1e5a      	subs	r2, r3, #1
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b087      	sub	sp, #28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f0a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008f0c:	7cfb      	ldrb	r3, [r7, #19]
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d003      	beq.n	8008f1a <HAL_CAN_ConfigFilter+0x26>
 8008f12:	7cfb      	ldrb	r3, [r7, #19]
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	f040 80be 	bne.w	8009096 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8008f1a:	4b65      	ldr	r3, [pc, #404]	; (80090b0 <HAL_CAN_ConfigFilter+0x1bc>)
 8008f1c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f24:	f043 0201 	orr.w	r2, r3, #1
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008f34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f48:	021b      	lsls	r3, r3, #8
 8008f4a:	431a      	orrs	r2, r3
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	f003 031f 	and.w	r3, r3, #31
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	43db      	mvns	r3, r3
 8008f6c:	401a      	ands	r2, r3
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d123      	bne.n	8008fc4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	43db      	mvns	r3, r3
 8008f86:	401a      	ands	r2, r3
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008f9a:	683a      	ldr	r2, [r7, #0]
 8008f9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8008f9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	3248      	adds	r2, #72	; 0x48
 8008fa4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008fb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8008fba:	6979      	ldr	r1, [r7, #20]
 8008fbc:	3348      	adds	r3, #72	; 0x48
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	440b      	add	r3, r1
 8008fc2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d122      	bne.n	8009012 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	431a      	orrs	r2, r3
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8008fec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	3248      	adds	r2, #72	; 0x48
 8008ff2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009006:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009008:	6979      	ldr	r1, [r7, #20]
 800900a:	3348      	adds	r3, #72	; 0x48
 800900c:	00db      	lsls	r3, r3, #3
 800900e:	440b      	add	r3, r1
 8009010:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	43db      	mvns	r3, r3
 8009024:	401a      	ands	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800902c:	e007      	b.n	800903e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	431a      	orrs	r2, r3
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d109      	bne.n	800905a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	43db      	mvns	r3, r3
 8009050:	401a      	ands	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009058:	e007      	b.n	800906a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	431a      	orrs	r2, r3
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	6a1b      	ldr	r3, [r3, #32]
 800906e:	2b01      	cmp	r3, #1
 8009070:	d107      	bne.n	8009082 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	431a      	orrs	r2, r3
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009088:	f023 0201 	bic.w	r2, r3, #1
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009092:	2300      	movs	r3, #0
 8009094:	e006      	b.n	80090a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
  }
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	371c      	adds	r7, #28
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bc80      	pop	{r7}
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40006400 	.word	0x40006400

080090b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d12e      	bne.n	8009126 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f022 0201 	bic.w	r2, r2, #1
 80090de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090e0:	f7ff fa12 	bl	8008508 <HAL_GetTick>
 80090e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80090e6:	e012      	b.n	800910e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80090e8:	f7ff fa0e 	bl	8008508 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	2b0a      	cmp	r3, #10
 80090f4:	d90b      	bls.n	800910e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2205      	movs	r2, #5
 8009106:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	e012      	b.n	8009134 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f003 0301 	and.w	r3, r3, #1
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e5      	bne.n	80090e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009122:	2300      	movs	r3, #0
 8009124:	e006      	b.n	8009134 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
  }
}
 8009134:	4618      	mov	r0, r3
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800913c:	b480      	push	{r7}
 800913e:	b089      	sub	sp, #36	; 0x24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009150:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800915a:	7ffb      	ldrb	r3, [r7, #31]
 800915c:	2b01      	cmp	r3, #1
 800915e:	d003      	beq.n	8009168 <HAL_CAN_AddTxMessage+0x2c>
 8009160:	7ffb      	ldrb	r3, [r7, #31]
 8009162:	2b02      	cmp	r3, #2
 8009164:	f040 80b8 	bne.w	80092d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10a      	bne.n	8009188 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009172:	69bb      	ldr	r3, [r7, #24]
 8009174:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009178:	2b00      	cmp	r3, #0
 800917a:	d105      	bne.n	8009188 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 80a0 	beq.w	80092c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	0e1b      	lsrs	r3, r3, #24
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2b02      	cmp	r3, #2
 8009196:	d907      	bls.n	80091a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e09e      	b.n	80092e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80091a8:	2201      	movs	r2, #1
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	409a      	lsls	r2, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10d      	bne.n	80091d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80091c4:	68f9      	ldr	r1, [r7, #12]
 80091c6:	6809      	ldr	r1, [r1, #0]
 80091c8:	431a      	orrs	r2, r3
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	3318      	adds	r3, #24
 80091ce:	011b      	lsls	r3, r3, #4
 80091d0:	440b      	add	r3, r1
 80091d2:	601a      	str	r2, [r3, #0]
 80091d4:	e00f      	b.n	80091f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80091ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	3318      	adds	r3, #24
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	440b      	add	r3, r1
 80091f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6819      	ldr	r1, [r3, #0]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	3318      	adds	r3, #24
 8009202:	011b      	lsls	r3, r3, #4
 8009204:	440b      	add	r3, r1
 8009206:	3304      	adds	r3, #4
 8009208:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	7d1b      	ldrb	r3, [r3, #20]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d111      	bne.n	8009236 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	3318      	adds	r3, #24
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	4413      	add	r3, r2
 800921e:	3304      	adds	r3, #4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3318      	adds	r3, #24
 800922e:	011b      	lsls	r3, r3, #4
 8009230:	440b      	add	r3, r1
 8009232:	3304      	adds	r3, #4
 8009234:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3307      	adds	r3, #7
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	061a      	lsls	r2, r3, #24
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	3306      	adds	r3, #6
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	041b      	lsls	r3, r3, #16
 8009246:	431a      	orrs	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3305      	adds	r3, #5
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	021b      	lsls	r3, r3, #8
 8009250:	4313      	orrs	r3, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	3204      	adds	r2, #4
 8009256:	7812      	ldrb	r2, [r2, #0]
 8009258:	4610      	mov	r0, r2
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	6811      	ldr	r1, [r2, #0]
 800925e:	ea43 0200 	orr.w	r2, r3, r0
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	440b      	add	r3, r1
 8009268:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800926c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	3303      	adds	r3, #3
 8009272:	781b      	ldrb	r3, [r3, #0]
 8009274:	061a      	lsls	r2, r3, #24
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	3302      	adds	r3, #2
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	041b      	lsls	r3, r3, #16
 800927e:	431a      	orrs	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	3301      	adds	r3, #1
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	021b      	lsls	r3, r3, #8
 8009288:	4313      	orrs	r3, r2
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	4610      	mov	r0, r2
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	6811      	ldr	r1, [r2, #0]
 8009294:	ea43 0200 	orr.w	r2, r3, r0
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	440b      	add	r3, r1
 800929e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80092a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	3318      	adds	r3, #24
 80092ac:	011b      	lsls	r3, r3, #4
 80092ae:	4413      	add	r3, r2
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68fa      	ldr	r2, [r7, #12]
 80092b4:	6811      	ldr	r1, [r2, #0]
 80092b6:	f043 0201 	orr.w	r2, r3, #1
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	3318      	adds	r3, #24
 80092be:	011b      	lsls	r3, r3, #4
 80092c0:	440b      	add	r3, r1
 80092c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	e00e      	b.n	80092e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	e006      	b.n	80092e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
  }
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3724      	adds	r7, #36	; 0x24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bc80      	pop	{r7}
 80092ee:	4770      	bx	lr

080092f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
 80092fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009304:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d003      	beq.n	8009314 <HAL_CAN_GetRxMessage+0x24>
 800930c:	7dfb      	ldrb	r3, [r7, #23]
 800930e:	2b02      	cmp	r3, #2
 8009310:	f040 80f3 	bne.w	80094fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d10e      	bne.n	8009338 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	f003 0303 	and.w	r3, r3, #3
 8009324:	2b00      	cmp	r3, #0
 8009326:	d116      	bne.n	8009356 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e0e7      	b.n	8009508 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	f003 0303 	and.w	r3, r3, #3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d107      	bne.n	8009356 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800934a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e0d8      	b.n	8009508 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	331b      	adds	r3, #27
 800935e:	011b      	lsls	r3, r3, #4
 8009360:	4413      	add	r3, r2
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0204 	and.w	r2, r3, #4
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10c      	bne.n	800938e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	331b      	adds	r3, #27
 800937c:	011b      	lsls	r3, r3, #4
 800937e:	4413      	add	r3, r2
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	0d5b      	lsrs	r3, r3, #21
 8009384:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	e00b      	b.n	80093a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	331b      	adds	r3, #27
 8009396:	011b      	lsls	r3, r3, #4
 8009398:	4413      	add	r3, r2
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	08db      	lsrs	r3, r3, #3
 800939e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	331b      	adds	r3, #27
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	4413      	add	r3, r2
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0202 	and.w	r2, r3, #2
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	331b      	adds	r3, #27
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	4413      	add	r3, r2
 80093c8:	3304      	adds	r3, #4
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 020f 	and.w	r2, r3, #15
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	331b      	adds	r3, #27
 80093dc:	011b      	lsls	r3, r3, #4
 80093de:	4413      	add	r3, r2
 80093e0:	3304      	adds	r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	0a1b      	lsrs	r3, r3, #8
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	331b      	adds	r3, #27
 80093f4:	011b      	lsls	r3, r3, #4
 80093f6:	4413      	add	r3, r2
 80093f8:	3304      	adds	r3, #4
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	0c1b      	lsrs	r3, r3, #16
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	011b      	lsls	r3, r3, #4
 800940c:	4413      	add	r3, r2
 800940e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	b2da      	uxtb	r2, r3
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	4413      	add	r3, r2
 8009424:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	0a1a      	lsrs	r2, r3, #8
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	3301      	adds	r3, #1
 8009430:	b2d2      	uxtb	r2, r2
 8009432:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	011b      	lsls	r3, r3, #4
 800943c:	4413      	add	r3, r2
 800943e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	0c1a      	lsrs	r2, r3, #16
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3302      	adds	r3, #2
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	4413      	add	r3, r2
 8009458:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	0e1a      	lsrs	r2, r3, #24
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	3303      	adds	r3, #3
 8009464:	b2d2      	uxtb	r2, r2
 8009466:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	4413      	add	r3, r2
 8009472:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	3304      	adds	r3, #4
 800947c:	b2d2      	uxtb	r2, r2
 800947e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681a      	ldr	r2, [r3, #0]
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	011b      	lsls	r3, r3, #4
 8009488:	4413      	add	r3, r2
 800948a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	0a1a      	lsrs	r2, r3, #8
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	3305      	adds	r3, #5
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	4413      	add	r3, r2
 80094a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	0c1a      	lsrs	r2, r3, #16
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	3306      	adds	r3, #6
 80094b0:	b2d2      	uxtb	r2, r2
 80094b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4413      	add	r3, r2
 80094be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	0e1a      	lsrs	r2, r3, #24
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	3307      	adds	r3, #7
 80094ca:	b2d2      	uxtb	r2, r2
 80094cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d108      	bne.n	80094e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f042 0220 	orr.w	r2, r2, #32
 80094e2:	60da      	str	r2, [r3, #12]
 80094e4:	e007      	b.n	80094f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	691a      	ldr	r2, [r3, #16]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f042 0220 	orr.w	r2, r2, #32
 80094f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e006      	b.n	8009508 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
  }
}
 8009508:	4618      	mov	r0, r3
 800950a:	371c      	adds	r7, #28
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr

08009512 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009512:	b480      	push	{r7}
 8009514:	b085      	sub	sp, #20
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
 800951a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009522:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d002      	beq.n	8009530 <HAL_CAN_ActivateNotification+0x1e>
 800952a:	7bfb      	ldrb	r3, [r7, #15]
 800952c:	2b02      	cmp	r3, #2
 800952e:	d109      	bne.n	8009544 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6959      	ldr	r1, [r3, #20]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	e006      	b.n	8009552 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009548:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
  }
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	bc80      	pop	{r7}
 800955a:	4770      	bx	lr

0800955c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08a      	sub	sp, #40	; 0x28
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009564:	2300      	movs	r3, #0
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	695b      	ldr	r3, [r3, #20]
 800956e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d07c      	beq.n	800969c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	f003 0301 	and.w	r3, r3, #1
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d023      	beq.n	80095f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	f003 0302 	and.w	r3, r3, #2
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f97d 	bl	80098be <HAL_CAN_TxMailbox0CompleteCallback>
 80095c4:	e016      	b.n	80095f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	f003 0304 	and.w	r3, r3, #4
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d004      	beq.n	80095da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
 80095d8:	e00c      	b.n	80095f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f003 0308 	and.w	r3, r3, #8
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d004      	beq.n	80095ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80095e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095ea:	627b      	str	r3, [r7, #36]	; 0x24
 80095ec:	e002      	b.n	80095f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f000 f980 	bl	80098f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d024      	beq.n	8009648 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009606:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f95c 	bl	80098d0 <HAL_CAN_TxMailbox1CompleteCallback>
 8009618:	e016      	b.n	8009648 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
 800962c:	e00c      	b.n	8009648 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800963a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800963e:	627b      	str	r3, [r7, #36]	; 0x24
 8009640:	e002      	b.n	8009648 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f000 f95f 	bl	8009906 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009648:	69bb      	ldr	r3, [r7, #24]
 800964a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800964e:	2b00      	cmp	r3, #0
 8009650:	d024      	beq.n	800969c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800965a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f93b 	bl	80098e2 <HAL_CAN_TxMailbox2CompleteCallback>
 800966c:	e016      	b.n	800969c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d004      	beq.n	8009682 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
 8009680:	e00c      	b.n	800969c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d004      	beq.n	8009696 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
 8009694:	e002      	b.n	800969c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f93e 	bl	8009918 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	f003 0308 	and.w	r3, r3, #8
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00c      	beq.n	80096c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	f003 0310 	and.w	r3, r3, #16
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d007      	beq.n	80096c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80096b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096b6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2210      	movs	r2, #16
 80096be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	f003 0304 	and.w	r3, r3, #4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00b      	beq.n	80096e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f003 0308 	and.w	r3, r3, #8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d006      	beq.n	80096e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2208      	movs	r2, #8
 80096da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f000 f92d 	bl	800993c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80096e2:	6a3b      	ldr	r3, [r7, #32]
 80096e4:	f003 0302 	and.w	r3, r3, #2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d009      	beq.n	8009700 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d002      	beq.n	8009700 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f915 	bl	800992a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009700:	6a3b      	ldr	r3, [r7, #32]
 8009702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	f003 0310 	and.w	r3, r3, #16
 8009710:	2b00      	cmp	r3, #0
 8009712:	d007      	beq.n	8009724 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800971a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2210      	movs	r2, #16
 8009722:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00b      	beq.n	8009746 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f003 0308 	and.w	r3, r3, #8
 8009734:	2b00      	cmp	r3, #0
 8009736:	d006      	beq.n	8009746 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	2208      	movs	r2, #8
 800973e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f90d 	bl	8009960 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	f003 0310 	and.w	r3, r3, #16
 800974c:	2b00      	cmp	r3, #0
 800974e:	d009      	beq.n	8009764 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	f003 0303 	and.w	r3, r3, #3
 800975a:	2b00      	cmp	r3, #0
 800975c:	d002      	beq.n	8009764 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f8f5 	bl	800994e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00b      	beq.n	8009786 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b00      	cmp	r3, #0
 8009776:	d006      	beq.n	8009786 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2210      	movs	r2, #16
 800977e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f8f6 	bl	8009972 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800978c:	2b00      	cmp	r3, #0
 800978e:	d00b      	beq.n	80097a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	f003 0308 	and.w	r3, r3, #8
 8009796:	2b00      	cmp	r3, #0
 8009798:	d006      	beq.n	80097a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2208      	movs	r2, #8
 80097a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f000 f8ee 	bl	8009984 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80097a8:	6a3b      	ldr	r3, [r7, #32]
 80097aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d075      	beq.n	800989e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d06c      	beq.n	8009896 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d008      	beq.n	80097d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d003      	beq.n	80097d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	f043 0301 	orr.w	r3, r3, #1
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80097d8:	6a3b      	ldr	r3, [r7, #32]
 80097da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d008      	beq.n	80097f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80097ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ee:	f043 0302 	orr.w	r3, r3, #2
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d008      	beq.n	8009810 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	f043 0304 	orr.w	r3, r3, #4
 800980e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009810:	6a3b      	ldr	r3, [r7, #32]
 8009812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009816:	2b00      	cmp	r3, #0
 8009818:	d03d      	beq.n	8009896 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009820:	2b00      	cmp	r3, #0
 8009822:	d038      	beq.n	8009896 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800982a:	2b30      	cmp	r3, #48	; 0x30
 800982c:	d017      	beq.n	800985e <HAL_CAN_IRQHandler+0x302>
 800982e:	2b30      	cmp	r3, #48	; 0x30
 8009830:	d804      	bhi.n	800983c <HAL_CAN_IRQHandler+0x2e0>
 8009832:	2b10      	cmp	r3, #16
 8009834:	d009      	beq.n	800984a <HAL_CAN_IRQHandler+0x2ee>
 8009836:	2b20      	cmp	r3, #32
 8009838:	d00c      	beq.n	8009854 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800983a:	e024      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800983c:	2b50      	cmp	r3, #80	; 0x50
 800983e:	d018      	beq.n	8009872 <HAL_CAN_IRQHandler+0x316>
 8009840:	2b60      	cmp	r3, #96	; 0x60
 8009842:	d01b      	beq.n	800987c <HAL_CAN_IRQHandler+0x320>
 8009844:	2b40      	cmp	r3, #64	; 0x40
 8009846:	d00f      	beq.n	8009868 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009848:	e01d      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	f043 0308 	orr.w	r3, r3, #8
 8009850:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009852:	e018      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	f043 0310 	orr.w	r3, r3, #16
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800985c:	e013      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	f043 0320 	orr.w	r3, r3, #32
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009866:	e00e      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009870:	e009      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8009872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800987a:	e004      	b.n	8009886 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009882:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009884:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009894:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2204      	movs	r2, #4
 800989c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800989e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d008      	beq.n	80098b6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	431a      	orrs	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f870 	bl	8009996 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80098b6:	bf00      	nop
 80098b8:	3728      	adds	r7, #40	; 0x28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bc80      	pop	{r7}
 80098ce:	4770      	bx	lr

080098d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80098d8:	bf00      	nop
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	bc80      	pop	{r7}
 80098e0:	4770      	bx	lr

080098e2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80098ea:	bf00      	nop
 80098ec:	370c      	adds	r7, #12
 80098ee:	46bd      	mov	sp, r7
 80098f0:	bc80      	pop	{r7}
 80098f2:	4770      	bx	lr

080098f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	bc80      	pop	{r7}
 8009904:	4770      	bx	lr

08009906 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009906:	b480      	push	{r7}
 8009908:	b083      	sub	sp, #12
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800990e:	bf00      	nop
 8009910:	370c      	adds	r7, #12
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009920:	bf00      	nop
 8009922:	370c      	adds	r7, #12
 8009924:	46bd      	mov	sp, r7
 8009926:	bc80      	pop	{r7}
 8009928:	4770      	bx	lr

0800992a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	bc80      	pop	{r7}
 800993a:	4770      	bx	lr

0800993c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009944:	bf00      	nop
 8009946:	370c      	adds	r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr

0800994e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800994e:	b480      	push	{r7}
 8009950:	b083      	sub	sp, #12
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009956:	bf00      	nop
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	bc80      	pop	{r7}
 800995e:	4770      	bx	lr

08009960 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009968:	bf00      	nop
 800996a:	370c      	adds	r7, #12
 800996c:	46bd      	mov	sp, r7
 800996e:	bc80      	pop	{r7}
 8009970:	4770      	bx	lr

08009972 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800997a:	bf00      	nop
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr

08009984 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	bc80      	pop	{r7}
 8009994:	4770      	bx	lr

08009996 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009996:	b480      	push	{r7}
 8009998:	b083      	sub	sp, #12
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800999e:	bf00      	nop
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bc80      	pop	{r7}
 80099a6:	4770      	bx	lr

080099a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f003 0307 	and.w	r3, r3, #7
 80099b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <__NVIC_SetPriorityGrouping+0x44>)
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80099be:	68ba      	ldr	r2, [r7, #8]
 80099c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80099c4:	4013      	ands	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80099d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80099d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80099da:	4a04      	ldr	r2, [pc, #16]	; (80099ec <__NVIC_SetPriorityGrouping+0x44>)
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	60d3      	str	r3, [r2, #12]
}
 80099e0:	bf00      	nop
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bc80      	pop	{r7}
 80099e8:	4770      	bx	lr
 80099ea:	bf00      	nop
 80099ec:	e000ed00 	.word	0xe000ed00

080099f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80099f4:	4b04      	ldr	r3, [pc, #16]	; (8009a08 <__NVIC_GetPriorityGrouping+0x18>)
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	0a1b      	lsrs	r3, r3, #8
 80099fa:	f003 0307 	and.w	r3, r3, #7
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bc80      	pop	{r7}
 8009a04:	4770      	bx	lr
 8009a06:	bf00      	nop
 8009a08:	e000ed00 	.word	0xe000ed00

08009a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	4603      	mov	r3, r0
 8009a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	db0b      	blt.n	8009a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	f003 021f 	and.w	r2, r3, #31
 8009a24:	4906      	ldr	r1, [pc, #24]	; (8009a40 <__NVIC_EnableIRQ+0x34>)
 8009a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a2a:	095b      	lsrs	r3, r3, #5
 8009a2c:	2001      	movs	r0, #1
 8009a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8009a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bc80      	pop	{r7}
 8009a3e:	4770      	bx	lr
 8009a40:	e000e100 	.word	0xe000e100

08009a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db0a      	blt.n	8009a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	b2da      	uxtb	r2, r3
 8009a5c:	490c      	ldr	r1, [pc, #48]	; (8009a90 <__NVIC_SetPriority+0x4c>)
 8009a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a62:	0112      	lsls	r2, r2, #4
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	440b      	add	r3, r1
 8009a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009a6c:	e00a      	b.n	8009a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	4908      	ldr	r1, [pc, #32]	; (8009a94 <__NVIC_SetPriority+0x50>)
 8009a74:	79fb      	ldrb	r3, [r7, #7]
 8009a76:	f003 030f 	and.w	r3, r3, #15
 8009a7a:	3b04      	subs	r3, #4
 8009a7c:	0112      	lsls	r2, r2, #4
 8009a7e:	b2d2      	uxtb	r2, r2
 8009a80:	440b      	add	r3, r1
 8009a82:	761a      	strb	r2, [r3, #24]
}
 8009a84:	bf00      	nop
 8009a86:	370c      	adds	r7, #12
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bc80      	pop	{r7}
 8009a8c:	4770      	bx	lr
 8009a8e:	bf00      	nop
 8009a90:	e000e100 	.word	0xe000e100
 8009a94:	e000ed00 	.word	0xe000ed00

08009a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b089      	sub	sp, #36	; 0x24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	f1c3 0307 	rsb	r3, r3, #7
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	bf28      	it	cs
 8009ab6:	2304      	movcs	r3, #4
 8009ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	3304      	adds	r3, #4
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d902      	bls.n	8009ac8 <NVIC_EncodePriority+0x30>
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	3b03      	subs	r3, #3
 8009ac6:	e000      	b.n	8009aca <NVIC_EncodePriority+0x32>
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009acc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	43da      	mvns	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	401a      	ands	r2, r3
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8009aea:	43d9      	mvns	r1, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009af0:	4313      	orrs	r3, r2
         );
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3724      	adds	r7, #36	; 0x24
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bc80      	pop	{r7}
 8009afa:	4770      	bx	lr

08009afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b0c:	d301      	bcc.n	8009b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e00f      	b.n	8009b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009b12:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <SysTick_Config+0x40>)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009b1a:	210f      	movs	r1, #15
 8009b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b20:	f7ff ff90 	bl	8009a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009b24:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <SysTick_Config+0x40>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009b2a:	4b04      	ldr	r3, [pc, #16]	; (8009b3c <SysTick_Config+0x40>)
 8009b2c:	2207      	movs	r2, #7
 8009b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	e000e010 	.word	0xe000e010

08009b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f7ff ff2d 	bl	80099a8 <__NVIC_SetPriorityGrouping>
}
 8009b4e:	bf00      	nop
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b086      	sub	sp, #24
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
 8009b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009b68:	f7ff ff42 	bl	80099f0 <__NVIC_GetPriorityGrouping>
 8009b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	68b9      	ldr	r1, [r7, #8]
 8009b72:	6978      	ldr	r0, [r7, #20]
 8009b74:	f7ff ff90 	bl	8009a98 <NVIC_EncodePriority>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b7e:	4611      	mov	r1, r2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff ff5f 	bl	8009a44 <__NVIC_SetPriority>
}
 8009b86:	bf00      	nop
 8009b88:	3718      	adds	r7, #24
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	bd80      	pop	{r7, pc}

08009b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b082      	sub	sp, #8
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	4603      	mov	r3, r0
 8009b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f7ff ff35 	bl	8009a0c <__NVIC_EnableIRQ>
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7ff ffa2 	bl	8009afc <SysTick_Config>
 8009bb8:	4603      	mov	r3, r0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3708      	adds	r7, #8
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
	...

08009bc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b086      	sub	sp, #24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009bd0:	f7fe fc9a 	bl	8008508 <HAL_GetTick>
 8009bd4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e099      	b.n	8009d14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f022 0201 	bic.w	r2, r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c00:	e00f      	b.n	8009c22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009c02:	f7fe fc81 	bl	8008508 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	2b05      	cmp	r3, #5
 8009c0e:	d908      	bls.n	8009c22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2203      	movs	r2, #3
 8009c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e078      	b.n	8009d14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d1e8      	bne.n	8009c02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	4b38      	ldr	r3, [pc, #224]	; (8009d1c <HAL_DMA_Init+0x158>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	691b      	ldr	r3, [r3, #16]
 8009c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009c66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
 8009c6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	d107      	bne.n	8009c8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	4313      	orrs	r3, r2
 8009c86:	697a      	ldr	r2, [r7, #20]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	697a      	ldr	r2, [r7, #20]
 8009c92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	f023 0307 	bic.w	r3, r3, #7
 8009ca2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	697a      	ldr	r2, [r7, #20]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d117      	bne.n	8009ce6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cba:	697a      	ldr	r2, [r7, #20]
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00e      	beq.n	8009ce6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fa8f 	bl	800a1ec <DMA_CheckFifoParam>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d008      	beq.n	8009ce6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2240      	movs	r2, #64	; 0x40
 8009cd8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2201      	movs	r2, #1
 8009cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e016      	b.n	8009d14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 fa48 	bl	800a184 <DMA_CalcBaseAndBitshift>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cfc:	223f      	movs	r2, #63	; 0x3f
 8009cfe:	409a      	lsls	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3718      	adds	r7, #24
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	f010803f 	.word	0xf010803f

08009d20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_DMA_Start_IT+0x26>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e040      	b.n	8009dc8 <HAL_DMA_Start_IT+0xa8>
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d12f      	bne.n	8009dba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2202      	movs	r2, #2
 8009d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2200      	movs	r2, #0
 8009d66:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	68b9      	ldr	r1, [r7, #8]
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f000 f9da 	bl	800a128 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d78:	223f      	movs	r2, #63	; 0x3f
 8009d7a:	409a      	lsls	r2, r3
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f042 0216 	orr.w	r2, r2, #22
 8009d8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d007      	beq.n	8009da8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0208 	orr.w	r2, r2, #8
 8009da6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f042 0201 	orr.w	r2, r2, #1
 8009db6:	601a      	str	r2, [r3, #0]
 8009db8:	e005      	b.n	8009dc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d004      	beq.n	8009dee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2280      	movs	r2, #128	; 0x80
 8009de8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e00c      	b.n	8009e08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2205      	movs	r2, #5
 8009df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f022 0201 	bic.w	r2, r2, #1
 8009e04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009e06:	2300      	movs	r3, #0
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bc80      	pop	{r7}
 8009e10:	4770      	bx	lr
	...

08009e14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b086      	sub	sp, #24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009e20:	4b92      	ldr	r3, [pc, #584]	; (800a06c <HAL_DMA_IRQHandler+0x258>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a92      	ldr	r2, [pc, #584]	; (800a070 <HAL_DMA_IRQHandler+0x25c>)
 8009e26:	fba2 2303 	umull	r2, r3, r2, r3
 8009e2a:	0a9b      	lsrs	r3, r3, #10
 8009e2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e3e:	2208      	movs	r2, #8
 8009e40:	409a      	lsls	r2, r3
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	4013      	ands	r3, r2
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01a      	beq.n	8009e80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d013      	beq.n	8009e80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0204 	bic.w	r2, r2, #4
 8009e66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e6c:	2208      	movs	r2, #8
 8009e6e:	409a      	lsls	r2, r3
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e78:	f043 0201 	orr.w	r2, r3, #1
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e84:	2201      	movs	r2, #1
 8009e86:	409a      	lsls	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d012      	beq.n	8009eb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00b      	beq.n	8009eb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ea2:	2201      	movs	r2, #1
 8009ea4:	409a      	lsls	r2, r3
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eae:	f043 0202 	orr.w	r2, r3, #2
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eba:	2204      	movs	r2, #4
 8009ebc:	409a      	lsls	r2, r3
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d012      	beq.n	8009eec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00b      	beq.n	8009eec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed8:	2204      	movs	r2, #4
 8009eda:	409a      	lsls	r2, r3
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ee4:	f043 0204 	orr.w	r2, r3, #4
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ef0:	2210      	movs	r2, #16
 8009ef2:	409a      	lsls	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d043      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0308 	and.w	r3, r3, #8
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d03c      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f0e:	2210      	movs	r2, #16
 8009f10:	409a      	lsls	r2, r3
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d018      	beq.n	8009f56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d108      	bne.n	8009f44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d024      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	4798      	blx	r3
 8009f42:	e01f      	b.n	8009f84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d01b      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	4798      	blx	r3
 8009f54:	e016      	b.n	8009f84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d107      	bne.n	8009f74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 0208 	bic.w	r2, r2, #8
 8009f72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d003      	beq.n	8009f84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f88:	2220      	movs	r2, #32
 8009f8a:	409a      	lsls	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	4013      	ands	r3, r2
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	f000 808e 	beq.w	800a0b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0310 	and.w	r3, r3, #16
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	f000 8086 	beq.w	800a0b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009faa:	2220      	movs	r2, #32
 8009fac:	409a      	lsls	r2, r3
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b05      	cmp	r3, #5
 8009fbc:	d136      	bne.n	800a02c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f022 0216 	bic.w	r2, r2, #22
 8009fcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695a      	ldr	r2, [r3, #20]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fdc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d103      	bne.n	8009fee <HAL_DMA_IRQHandler+0x1da>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d007      	beq.n	8009ffe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f022 0208 	bic.w	r2, r2, #8
 8009ffc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a002:	223f      	movs	r2, #63	; 0x3f
 800a004:	409a      	lsls	r2, r3
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d07d      	beq.n	800a11e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	4798      	blx	r3
        }
        return;
 800a02a:	e078      	b.n	800a11e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a036:	2b00      	cmp	r3, #0
 800a038:	d01c      	beq.n	800a074 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d030      	beq.n	800a0b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	4798      	blx	r3
 800a058:	e02b      	b.n	800a0b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d027      	beq.n	800a0b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	4798      	blx	r3
 800a06a:	e022      	b.n	800a0b2 <HAL_DMA_IRQHandler+0x29e>
 800a06c:	20000058 	.word	0x20000058
 800a070:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d10f      	bne.n	800a0a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0210 	bic.w	r2, r2, #16
 800a090:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d032      	beq.n	800a120 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d022      	beq.n	800a10c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2205      	movs	r2, #5
 800a0ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0201 	bic.w	r2, r2, #1
 800a0dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	60bb      	str	r3, [r7, #8]
 800a0e4:	697a      	ldr	r2, [r7, #20]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d307      	bcc.n	800a0fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d1f2      	bne.n	800a0de <HAL_DMA_IRQHandler+0x2ca>
 800a0f8:	e000      	b.n	800a0fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a0fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	4798      	blx	r3
 800a11c:	e000      	b.n	800a120 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a11e:	bf00      	nop
    }
  }
}
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop

0800a128 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
 800a134:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a144:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	2b40      	cmp	r3, #64	; 0x40
 800a154:	d108      	bne.n	800a168 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68ba      	ldr	r2, [r7, #8]
 800a164:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a166:	e007      	b.n	800a178 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	60da      	str	r2, [r3, #12]
}
 800a178:	bf00      	nop
 800a17a:	3714      	adds	r7, #20
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bc80      	pop	{r7}
 800a180:	4770      	bx	lr
	...

0800a184 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a184:	b480      	push	{r7}
 800a186:	b085      	sub	sp, #20
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	3b10      	subs	r3, #16
 800a194:	4a13      	ldr	r2, [pc, #76]	; (800a1e4 <DMA_CalcBaseAndBitshift+0x60>)
 800a196:	fba2 2303 	umull	r2, r3, r2, r3
 800a19a:	091b      	lsrs	r3, r3, #4
 800a19c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a19e:	4a12      	ldr	r2, [pc, #72]	; (800a1e8 <DMA_CalcBaseAndBitshift+0x64>)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	d909      	bls.n	800a1c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a1ba:	f023 0303 	bic.w	r3, r3, #3
 800a1be:	1d1a      	adds	r2, r3, #4
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	659a      	str	r2, [r3, #88]	; 0x58
 800a1c4:	e007      	b.n	800a1d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a1ce:	f023 0303 	bic.w	r3, r3, #3
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3714      	adds	r7, #20
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bc80      	pop	{r7}
 800a1e2:	4770      	bx	lr
 800a1e4:	aaaaaaab 	.word	0xaaaaaaab
 800a1e8:	080102c4 	.word	0x080102c4

0800a1ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	b085      	sub	sp, #20
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	699b      	ldr	r3, [r3, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d11f      	bne.n	800a246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2b03      	cmp	r3, #3
 800a20a:	d855      	bhi.n	800a2b8 <DMA_CheckFifoParam+0xcc>
 800a20c:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <DMA_CheckFifoParam+0x28>)
 800a20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a212:	bf00      	nop
 800a214:	0800a225 	.word	0x0800a225
 800a218:	0800a237 	.word	0x0800a237
 800a21c:	0800a225 	.word	0x0800a225
 800a220:	0800a2b9 	.word	0x0800a2b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d045      	beq.n	800a2bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a234:	e042      	b.n	800a2bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a23a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a23e:	d13f      	bne.n	800a2c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a244:	e03c      	b.n	800a2c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a24e:	d121      	bne.n	800a294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	2b03      	cmp	r3, #3
 800a254:	d836      	bhi.n	800a2c4 <DMA_CheckFifoParam+0xd8>
 800a256:	a201      	add	r2, pc, #4	; (adr r2, 800a25c <DMA_CheckFifoParam+0x70>)
 800a258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a25c:	0800a26d 	.word	0x0800a26d
 800a260:	0800a273 	.word	0x0800a273
 800a264:	0800a26d 	.word	0x0800a26d
 800a268:	0800a285 	.word	0x0800a285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	73fb      	strb	r3, [r7, #15]
      break;
 800a270:	e02f      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d024      	beq.n	800a2c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a282:	e021      	b.n	800a2c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a288:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a28c:	d11e      	bne.n	800a2cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a28e:	2301      	movs	r3, #1
 800a290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a292:	e01b      	b.n	800a2cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	2b02      	cmp	r3, #2
 800a298:	d902      	bls.n	800a2a0 <DMA_CheckFifoParam+0xb4>
 800a29a:	2b03      	cmp	r3, #3
 800a29c:	d003      	beq.n	800a2a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a29e:	e018      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a4:	e015      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00e      	beq.n	800a2d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
      break;
 800a2b6:	e00b      	b.n	800a2d0 <DMA_CheckFifoParam+0xe4>
      break;
 800a2b8:	bf00      	nop
 800a2ba:	e00a      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      break;
 800a2bc:	bf00      	nop
 800a2be:	e008      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      break;
 800a2c0:	bf00      	nop
 800a2c2:	e006      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      break;
 800a2c4:	bf00      	nop
 800a2c6:	e004      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      break;
 800a2c8:	bf00      	nop
 800a2ca:	e002      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      break;   
 800a2cc:	bf00      	nop
 800a2ce:	e000      	b.n	800a2d2 <DMA_CheckFifoParam+0xe6>
      break;
 800a2d0:	bf00      	nop
    }
  } 
  
  return status; 
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3714      	adds	r7, #20
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bc80      	pop	{r7}
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop

0800a2e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b087      	sub	sp, #28
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a2ee:	e16f      	b.n	800a5d0 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2fc:	4013      	ands	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	f000 8161 	beq.w	800a5ca <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d00b      	beq.n	800a328 <HAL_GPIO_Init+0x48>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	2b02      	cmp	r3, #2
 800a316:	d007      	beq.n	800a328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a31c:	2b11      	cmp	r3, #17
 800a31e:	d003      	beq.n	800a328 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	2b12      	cmp	r3, #18
 800a326:	d130      	bne.n	800a38a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	005b      	lsls	r3, r3, #1
 800a332:	2203      	movs	r2, #3
 800a334:	fa02 f303 	lsl.w	r3, r2, r3
 800a338:	43db      	mvns	r3, r3
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4013      	ands	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	68da      	ldr	r2, [r3, #12]
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	005b      	lsls	r3, r3, #1
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	4313      	orrs	r3, r2
 800a350:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a35e:	2201      	movs	r2, #1
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	fa02 f303 	lsl.w	r3, r2, r3
 800a366:	43db      	mvns	r3, r3
 800a368:	693a      	ldr	r2, [r7, #16]
 800a36a:	4013      	ands	r3, r2
 800a36c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	091b      	lsrs	r3, r3, #4
 800a374:	f003 0201 	and.w	r2, r3, #1
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	693a      	ldr	r2, [r7, #16]
 800a380:	4313      	orrs	r3, r2
 800a382:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	693a      	ldr	r2, [r7, #16]
 800a388:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	005b      	lsls	r3, r3, #1
 800a394:	2203      	movs	r2, #3
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	43db      	mvns	r3, r3
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	4013      	ands	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	005b      	lsls	r3, r3, #1
 800a3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	693a      	ldr	r2, [r7, #16]
 800a3b8:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d003      	beq.n	800a3ca <HAL_GPIO_Init+0xea>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	2b12      	cmp	r3, #18
 800a3c8:	d123      	bne.n	800a412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	08da      	lsrs	r2, r3, #3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3208      	adds	r2, #8
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f003 0307 	and.w	r3, r3, #7
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	220f      	movs	r2, #15
 800a3e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e6:	43db      	mvns	r3, r3
 800a3e8:	693a      	ldr	r2, [r7, #16]
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	691a      	ldr	r2, [r3, #16]
 800a3f2:	697b      	ldr	r3, [r7, #20]
 800a3f4:	f003 0307 	and.w	r3, r3, #7
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3fe:	693a      	ldr	r2, [r7, #16]
 800a400:	4313      	orrs	r3, r2
 800a402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	08da      	lsrs	r2, r3, #3
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	3208      	adds	r2, #8
 800a40c:	6939      	ldr	r1, [r7, #16]
 800a40e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	005b      	lsls	r3, r3, #1
 800a41c:	2203      	movs	r2, #3
 800a41e:	fa02 f303 	lsl.w	r3, r2, r3
 800a422:	43db      	mvns	r3, r3
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4013      	ands	r3, r2
 800a428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f003 0203 	and.w	r2, r3, #3
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	005b      	lsls	r3, r3, #1
 800a436:	fa02 f303 	lsl.w	r3, r2, r3
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	4313      	orrs	r3, r2
 800a43e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f000 80bb 	beq.w	800a5ca <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a454:	2300      	movs	r3, #0
 800a456:	60bb      	str	r3, [r7, #8]
 800a458:	4b64      	ldr	r3, [pc, #400]	; (800a5ec <HAL_GPIO_Init+0x30c>)
 800a45a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a45c:	4a63      	ldr	r2, [pc, #396]	; (800a5ec <HAL_GPIO_Init+0x30c>)
 800a45e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a462:	6453      	str	r3, [r2, #68]	; 0x44
 800a464:	4b61      	ldr	r3, [pc, #388]	; (800a5ec <HAL_GPIO_Init+0x30c>)
 800a466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a46c:	60bb      	str	r3, [r7, #8]
 800a46e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a470:	4a5f      	ldr	r2, [pc, #380]	; (800a5f0 <HAL_GPIO_Init+0x310>)
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	089b      	lsrs	r3, r3, #2
 800a476:	3302      	adds	r3, #2
 800a478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a47c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	f003 0303 	and.w	r3, r3, #3
 800a484:	009b      	lsls	r3, r3, #2
 800a486:	220f      	movs	r2, #15
 800a488:	fa02 f303 	lsl.w	r3, r2, r3
 800a48c:	43db      	mvns	r3, r3
 800a48e:	693a      	ldr	r2, [r7, #16]
 800a490:	4013      	ands	r3, r2
 800a492:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a57      	ldr	r2, [pc, #348]	; (800a5f4 <HAL_GPIO_Init+0x314>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d031      	beq.n	800a500 <HAL_GPIO_Init+0x220>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a56      	ldr	r2, [pc, #344]	; (800a5f8 <HAL_GPIO_Init+0x318>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d02b      	beq.n	800a4fc <HAL_GPIO_Init+0x21c>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a55      	ldr	r2, [pc, #340]	; (800a5fc <HAL_GPIO_Init+0x31c>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d025      	beq.n	800a4f8 <HAL_GPIO_Init+0x218>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a54      	ldr	r2, [pc, #336]	; (800a600 <HAL_GPIO_Init+0x320>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d01f      	beq.n	800a4f4 <HAL_GPIO_Init+0x214>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a53      	ldr	r2, [pc, #332]	; (800a604 <HAL_GPIO_Init+0x324>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d019      	beq.n	800a4f0 <HAL_GPIO_Init+0x210>
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4a52      	ldr	r2, [pc, #328]	; (800a608 <HAL_GPIO_Init+0x328>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d013      	beq.n	800a4ec <HAL_GPIO_Init+0x20c>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	4a51      	ldr	r2, [pc, #324]	; (800a60c <HAL_GPIO_Init+0x32c>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d00d      	beq.n	800a4e8 <HAL_GPIO_Init+0x208>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	4a50      	ldr	r2, [pc, #320]	; (800a610 <HAL_GPIO_Init+0x330>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d007      	beq.n	800a4e4 <HAL_GPIO_Init+0x204>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	4a4f      	ldr	r2, [pc, #316]	; (800a614 <HAL_GPIO_Init+0x334>)
 800a4d8:	4293      	cmp	r3, r2
 800a4da:	d101      	bne.n	800a4e0 <HAL_GPIO_Init+0x200>
 800a4dc:	2308      	movs	r3, #8
 800a4de:	e010      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4e0:	2309      	movs	r3, #9
 800a4e2:	e00e      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4e4:	2307      	movs	r3, #7
 800a4e6:	e00c      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4e8:	2306      	movs	r3, #6
 800a4ea:	e00a      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4ec:	2305      	movs	r3, #5
 800a4ee:	e008      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	e006      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4f4:	2303      	movs	r3, #3
 800a4f6:	e004      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4f8:	2302      	movs	r3, #2
 800a4fa:	e002      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <HAL_GPIO_Init+0x222>
 800a500:	2300      	movs	r3, #0
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	f002 0203 	and.w	r2, r2, #3
 800a508:	0092      	lsls	r2, r2, #2
 800a50a:	4093      	lsls	r3, r2
 800a50c:	461a      	mov	r2, r3
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4313      	orrs	r3, r2
 800a512:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a514:	4936      	ldr	r1, [pc, #216]	; (800a5f0 <HAL_GPIO_Init+0x310>)
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	089b      	lsrs	r3, r3, #2
 800a51a:	3302      	adds	r3, #2
 800a51c:	693a      	ldr	r2, [r7, #16]
 800a51e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a522:	4b3d      	ldr	r3, [pc, #244]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	43db      	mvns	r3, r3
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	4013      	ands	r3, r2
 800a530:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4313      	orrs	r3, r2
 800a544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a546:	4a34      	ldr	r2, [pc, #208]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a54c:	4b32      	ldr	r3, [pc, #200]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	43db      	mvns	r3, r3
 800a556:	693a      	ldr	r2, [r7, #16]
 800a558:	4013      	ands	r3, r2
 800a55a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a564:	2b00      	cmp	r3, #0
 800a566:	d003      	beq.n	800a570 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a568:	693a      	ldr	r2, [r7, #16]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	4313      	orrs	r3, r2
 800a56e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a570:	4a29      	ldr	r2, [pc, #164]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a576:	4b28      	ldr	r3, [pc, #160]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	43db      	mvns	r3, r3
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	4013      	ands	r3, r2
 800a584:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d003      	beq.n	800a59a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a59a:	4a1f      	ldr	r2, [pc, #124]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a5a0:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	43db      	mvns	r3, r3
 800a5aa:	693a      	ldr	r2, [r7, #16]
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	685b      	ldr	r3, [r3, #4]
 800a5b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d003      	beq.n	800a5c4 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	4313      	orrs	r3, r2
 800a5c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a5c4:	4a14      	ldr	r2, [pc, #80]	; (800a618 <HAL_GPIO_Init+0x338>)
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f47f ae88 	bne.w	800a2f0 <HAL_GPIO_Init+0x10>
  }
}
 800a5e0:	bf00      	nop
 800a5e2:	371c      	adds	r7, #28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bc80      	pop	{r7}
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40023800 	.word	0x40023800
 800a5f0:	40013800 	.word	0x40013800
 800a5f4:	40020000 	.word	0x40020000
 800a5f8:	40020400 	.word	0x40020400
 800a5fc:	40020800 	.word	0x40020800
 800a600:	40020c00 	.word	0x40020c00
 800a604:	40021000 	.word	0x40021000
 800a608:	40021400 	.word	0x40021400
 800a60c:	40021800 	.word	0x40021800
 800a610:	40021c00 	.word	0x40021c00
 800a614:	40022000 	.word	0x40022000
 800a618:	40013c00 	.word	0x40013c00

0800a61c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	460b      	mov	r3, r1
 800a626:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	691a      	ldr	r2, [r3, #16]
 800a62c:	887b      	ldrh	r3, [r7, #2]
 800a62e:	4013      	ands	r3, r2
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a634:	2301      	movs	r3, #1
 800a636:	73fb      	strb	r3, [r7, #15]
 800a638:	e001      	b.n	800a63e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	bc80      	pop	{r7}
 800a648:	4770      	bx	lr

0800a64a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a64a:	b480      	push	{r7}
 800a64c:	b083      	sub	sp, #12
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	460b      	mov	r3, r1
 800a654:	807b      	strh	r3, [r7, #2]
 800a656:	4613      	mov	r3, r2
 800a658:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a65a:	787b      	ldrb	r3, [r7, #1]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d003      	beq.n	800a668 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a660:	887a      	ldrh	r2, [r7, #2]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a666:	e003      	b.n	800a670 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a668:	887b      	ldrh	r3, [r7, #2]
 800a66a:	041a      	lsls	r2, r3, #16
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	619a      	str	r2, [r3, #24]
}
 800a670:	bf00      	nop
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr

0800a67a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	695a      	ldr	r2, [r3, #20]
 800a68a:	887b      	ldrh	r3, [r7, #2]
 800a68c:	4013      	ands	r3, r2
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d004      	beq.n	800a69c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a692:	887b      	ldrh	r3, [r7, #2]
 800a694:	041a      	lsls	r2, r3, #16
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800a69a:	e002      	b.n	800a6a2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a69c:	887a      	ldrh	r2, [r7, #2]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	619a      	str	r2, [r3, #24]
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bc80      	pop	{r7}
 800a6aa:	4770      	bx	lr

0800a6ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d101      	bne.n	800a6be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e11f      	b.n	800a8fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6c4:	b2db      	uxtb	r3, r3
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d106      	bne.n	800a6d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7fb fda8 	bl	8006228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2224      	movs	r2, #36	; 0x24
 800a6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 0201 	bic.w	r2, r2, #1
 800a6ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	681a      	ldr	r2, [r3, #0]
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a70e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a710:	f001 fb20 	bl	800bd54 <HAL_RCC_GetPCLK1Freq>
 800a714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	4a7b      	ldr	r2, [pc, #492]	; (800a908 <HAL_I2C_Init+0x25c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d807      	bhi.n	800a730 <HAL_I2C_Init+0x84>
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4a7a      	ldr	r2, [pc, #488]	; (800a90c <HAL_I2C_Init+0x260>)
 800a724:	4293      	cmp	r3, r2
 800a726:	bf94      	ite	ls
 800a728:	2301      	movls	r3, #1
 800a72a:	2300      	movhi	r3, #0
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	e006      	b.n	800a73e <HAL_I2C_Init+0x92>
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	4a77      	ldr	r2, [pc, #476]	; (800a910 <HAL_I2C_Init+0x264>)
 800a734:	4293      	cmp	r3, r2
 800a736:	bf94      	ite	ls
 800a738:	2301      	movls	r3, #1
 800a73a:	2300      	movhi	r3, #0
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d001      	beq.n	800a746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e0db      	b.n	800a8fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	4a72      	ldr	r2, [pc, #456]	; (800a914 <HAL_I2C_Init+0x268>)
 800a74a:	fba2 2303 	umull	r2, r3, r2, r3
 800a74e:	0c9b      	lsrs	r3, r3, #18
 800a750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a1b      	ldr	r3, [r3, #32]
 800a76c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	4a64      	ldr	r2, [pc, #400]	; (800a908 <HAL_I2C_Init+0x25c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d802      	bhi.n	800a780 <HAL_I2C_Init+0xd4>
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	3301      	adds	r3, #1
 800a77e:	e009      	b.n	800a794 <HAL_I2C_Init+0xe8>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a786:	fb02 f303 	mul.w	r3, r2, r3
 800a78a:	4a63      	ldr	r2, [pc, #396]	; (800a918 <HAL_I2C_Init+0x26c>)
 800a78c:	fba2 2303 	umull	r2, r3, r2, r3
 800a790:	099b      	lsrs	r3, r3, #6
 800a792:	3301      	adds	r3, #1
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	430b      	orrs	r3, r1
 800a79a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a7a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	685b      	ldr	r3, [r3, #4]
 800a7ae:	4956      	ldr	r1, [pc, #344]	; (800a908 <HAL_I2C_Init+0x25c>)
 800a7b0:	428b      	cmp	r3, r1
 800a7b2:	d80d      	bhi.n	800a7d0 <HAL_I2C_Init+0x124>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	1e59      	subs	r1, r3, #1
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	005b      	lsls	r3, r3, #1
 800a7be:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7c8:	2b04      	cmp	r3, #4
 800a7ca:	bf38      	it	cc
 800a7cc:	2304      	movcc	r3, #4
 800a7ce:	e04f      	b.n	800a870 <HAL_I2C_Init+0x1c4>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d111      	bne.n	800a7fc <HAL_I2C_Init+0x150>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	1e58      	subs	r0, r3, #1
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6859      	ldr	r1, [r3, #4]
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	005b      	lsls	r3, r3, #1
 800a7e4:	440b      	add	r3, r1
 800a7e6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2301      	moveq	r3, #1
 800a7f6:	2300      	movne	r3, #0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	e012      	b.n	800a822 <HAL_I2C_Init+0x176>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	1e58      	subs	r0, r3, #1
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6859      	ldr	r1, [r3, #4]
 800a804:	460b      	mov	r3, r1
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	440b      	add	r3, r1
 800a80a:	0099      	lsls	r1, r3, #2
 800a80c:	440b      	add	r3, r1
 800a80e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a812:	3301      	adds	r3, #1
 800a814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bf0c      	ite	eq
 800a81c:	2301      	moveq	r3, #1
 800a81e:	2300      	movne	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b00      	cmp	r3, #0
 800a824:	d001      	beq.n	800a82a <HAL_I2C_Init+0x17e>
 800a826:	2301      	movs	r3, #1
 800a828:	e022      	b.n	800a870 <HAL_I2C_Init+0x1c4>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	689b      	ldr	r3, [r3, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10e      	bne.n	800a850 <HAL_I2C_Init+0x1a4>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	1e58      	subs	r0, r3, #1
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6859      	ldr	r1, [r3, #4]
 800a83a:	460b      	mov	r3, r1
 800a83c:	005b      	lsls	r3, r3, #1
 800a83e:	440b      	add	r3, r1
 800a840:	fbb0 f3f3 	udiv	r3, r0, r3
 800a844:	3301      	adds	r3, #1
 800a846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a84a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a84e:	e00f      	b.n	800a870 <HAL_I2C_Init+0x1c4>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	1e58      	subs	r0, r3, #1
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6859      	ldr	r1, [r3, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	440b      	add	r3, r1
 800a85e:	0099      	lsls	r1, r3, #2
 800a860:	440b      	add	r3, r1
 800a862:	fbb0 f3f3 	udiv	r3, r0, r3
 800a866:	3301      	adds	r3, #1
 800a868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a86c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a870:	6879      	ldr	r1, [r7, #4]
 800a872:	6809      	ldr	r1, [r1, #0]
 800a874:	4313      	orrs	r3, r2
 800a876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	69da      	ldr	r2, [r3, #28]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	431a      	orrs	r2, r3
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a89e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	6911      	ldr	r1, [r2, #16]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	68d2      	ldr	r2, [r2, #12]
 800a8aa:	4311      	orrs	r1, r2
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695a      	ldr	r2, [r3, #20]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	681a      	ldr	r2, [r3, #0]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f042 0201 	orr.w	r2, r2, #1
 800a8de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2220      	movs	r2, #32
 800a8ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	000186a0 	.word	0x000186a0
 800a90c:	001e847f 	.word	0x001e847f
 800a910:	003d08ff 	.word	0x003d08ff
 800a914:	431bde83 	.word	0x431bde83
 800a918:	10624dd3 	.word	0x10624dd3

0800a91c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af02      	add	r7, sp, #8
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	461a      	mov	r2, r3
 800a928:	460b      	mov	r3, r1
 800a92a:	817b      	strh	r3, [r7, #10]
 800a92c:	4613      	mov	r3, r2
 800a92e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a930:	f7fd fdea 	bl	8008508 <HAL_GetTick>
 800a934:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b20      	cmp	r3, #32
 800a940:	f040 80e0 	bne.w	800ab04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	2319      	movs	r3, #25
 800a94a:	2201      	movs	r2, #1
 800a94c:	4970      	ldr	r1, [pc, #448]	; (800ab10 <HAL_I2C_Master_Transmit+0x1f4>)
 800a94e:	68f8      	ldr	r0, [r7, #12]
 800a950:	f000 fc20 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a95a:	2302      	movs	r3, #2
 800a95c:	e0d3      	b.n	800ab06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a964:	2b01      	cmp	r3, #1
 800a966:	d101      	bne.n	800a96c <HAL_I2C_Master_Transmit+0x50>
 800a968:	2302      	movs	r3, #2
 800a96a:	e0cc      	b.n	800ab06 <HAL_I2C_Master_Transmit+0x1ea>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 0301 	and.w	r3, r3, #1
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d007      	beq.n	800a992 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f042 0201 	orr.w	r2, r2, #1
 800a990:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a9a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2221      	movs	r2, #33	; 0x21
 800a9a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2210      	movs	r2, #16
 800a9ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	893a      	ldrh	r2, [r7, #8]
 800a9c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a9c8:	b29a      	uxth	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4a50      	ldr	r2, [pc, #320]	; (800ab14 <HAL_I2C_Master_Transmit+0x1f8>)
 800a9d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a9d4:	8979      	ldrh	r1, [r7, #10]
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	6a3a      	ldr	r2, [r7, #32]
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fac4 	bl	800af68 <I2C_MasterRequestWrite>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e08d      	b.n	800ab06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	613b      	str	r3, [r7, #16]
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	613b      	str	r3, [r7, #16]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	613b      	str	r3, [r7, #16]
 800a9fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800aa00:	e066      	b.n	800aad0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	6a39      	ldr	r1, [r7, #32]
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fc9a 	bl	800b340 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00d      	beq.n	800aa2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d107      	bne.n	800aa2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e06b      	b.n	800ab06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa32:	781a      	ldrb	r2, [r3, #0]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa3e:	1c5a      	adds	r2, r3, #1
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	3b01      	subs	r3, #1
 800aa4c:	b29a      	uxth	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa56:	3b01      	subs	r3, #1
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	695b      	ldr	r3, [r3, #20]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d11b      	bne.n	800aaa4 <HAL_I2C_Master_Transmit+0x188>
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d017      	beq.n	800aaa4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa78:	781a      	ldrb	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	1c5a      	adds	r2, r3, #1
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	b29a      	uxth	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	6a39      	ldr	r1, [r7, #32]
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f000 fc8a 	bl	800b3c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00d      	beq.n	800aad0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aab8:	2b04      	cmp	r3, #4
 800aaba:	d107      	bne.n	800aacc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	681a      	ldr	r2, [r3, #0]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e01a      	b.n	800ab06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d194      	bne.n	800aa02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	2220      	movs	r2, #32
 800aaec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	e000      	b.n	800ab06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ab04:	2302      	movs	r3, #2
  }
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3718      	adds	r7, #24
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	00100002 	.word	0x00100002
 800ab14:	ffff0000 	.word	0xffff0000

0800ab18 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af02      	add	r7, sp, #8
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	4608      	mov	r0, r1
 800ab22:	4611      	mov	r1, r2
 800ab24:	461a      	mov	r2, r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	817b      	strh	r3, [r7, #10]
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	813b      	strh	r3, [r7, #8]
 800ab2e:	4613      	mov	r3, r2
 800ab30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab32:	f7fd fce9 	bl	8008508 <HAL_GetTick>
 800ab36:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab3e:	b2db      	uxtb	r3, r3
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	f040 80d9 	bne.w	800acf8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	2319      	movs	r3, #25
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	496d      	ldr	r1, [pc, #436]	; (800ad04 <HAL_I2C_Mem_Write+0x1ec>)
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 fb1f 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d001      	beq.n	800ab60 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e0cc      	b.n	800acfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_I2C_Mem_Write+0x56>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e0c5      	b.n	800acfa <HAL_I2C_Mem_Write+0x1e2>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f003 0301 	and.w	r3, r3, #1
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d007      	beq.n	800ab94 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f042 0201 	orr.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aba2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2221      	movs	r2, #33	; 0x21
 800aba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2240      	movs	r2, #64	; 0x40
 800abb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2200      	movs	r2, #0
 800abb8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a3a      	ldr	r2, [r7, #32]
 800abbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800abc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abca:	b29a      	uxth	r2, r3
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a4d      	ldr	r2, [pc, #308]	; (800ad08 <HAL_I2C_Mem_Write+0x1f0>)
 800abd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800abd6:	88f8      	ldrh	r0, [r7, #6]
 800abd8:	893a      	ldrh	r2, [r7, #8]
 800abda:	8979      	ldrh	r1, [r7, #10]
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	9301      	str	r3, [sp, #4]
 800abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	4603      	mov	r3, r0
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f000 fa40 	bl	800b06c <I2C_RequestMemoryWrite>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d052      	beq.n	800ac98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	e081      	b.n	800acfa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 fba0 	bl	800b340 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00d      	beq.n	800ac22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d107      	bne.n	800ac1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e06b      	b.n	800acfa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac26:	781a      	ldrb	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	1c5a      	adds	r2, r3, #1
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	695b      	ldr	r3, [r3, #20]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d11b      	bne.n	800ac98 <HAL_I2C_Mem_Write+0x180>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d017      	beq.n	800ac98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6c:	781a      	ldrb	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	1c5a      	adds	r2, r3, #1
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac82:	3b01      	subs	r3, #1
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	3b01      	subs	r3, #1
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1aa      	bne.n	800abf6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aca0:	697a      	ldr	r2, [r7, #20]
 800aca2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 fb8c 	bl	800b3c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00d      	beq.n	800accc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d107      	bne.n	800acc8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acc6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800acc8:	2301      	movs	r3, #1
 800acca:	e016      	b.n	800acfa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2220      	movs	r2, #32
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	e000      	b.n	800acfa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800acf8:	2302      	movs	r3, #2
  }
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3718      	adds	r7, #24
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	00100002 	.word	0x00100002
 800ad08:	ffff0000 	.word	0xffff0000

0800ad0c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b08a      	sub	sp, #40	; 0x28
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	60f8      	str	r0, [r7, #12]
 800ad14:	607a      	str	r2, [r7, #4]
 800ad16:	603b      	str	r3, [r7, #0]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800ad1c:	f7fd fbf4 	bl	8008508 <HAL_GetTick>
 800ad20:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800ad22:	2301      	movs	r3, #1
 800ad24:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	f040 8110 	bne.w	800af54 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	2319      	movs	r3, #25
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	4988      	ldr	r1, [pc, #544]	; (800af60 <HAL_I2C_IsDeviceReady+0x254>)
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 fa28 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d001      	beq.n	800ad4e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800ad4a:	2302      	movs	r3, #2
 800ad4c:	e103      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d101      	bne.n	800ad5c <HAL_I2C_IsDeviceReady+0x50>
 800ad58:	2302      	movs	r3, #2
 800ad5a:	e0fc      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	2201      	movs	r2, #1
 800ad60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 0301 	and.w	r3, r3, #1
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d007      	beq.n	800ad82 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f042 0201 	orr.w	r2, r2, #1
 800ad80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2224      	movs	r2, #36	; 0x24
 800ad96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	4a70      	ldr	r2, [pc, #448]	; (800af64 <HAL_I2C_IsDeviceReady+0x258>)
 800ada4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adb4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 f9e6 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00c      	beq.n	800ade8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ade2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800ade4:	2303      	movs	r3, #3
 800ade6:	e0b6      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ade8:	897b      	ldrh	r3, [r7, #10]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	461a      	mov	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800adf6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800adf8:	f7fd fb86 	bl	8008508 <HAL_GetTick>
 800adfc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	f003 0302 	and.w	r3, r3, #2
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	bf0c      	ite	eq
 800ae0c:	2301      	moveq	r3, #1
 800ae0e:	2300      	movne	r3, #0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae22:	bf0c      	ite	eq
 800ae24:	2301      	moveq	r3, #1
 800ae26:	2300      	movne	r3, #0
 800ae28:	b2db      	uxtb	r3, r3
 800ae2a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800ae2c:	e025      	b.n	800ae7a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ae2e:	f7fd fb6b 	bl	8008508 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d302      	bcc.n	800ae44 <HAL_I2C_IsDeviceReady+0x138>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	22a0      	movs	r2, #160	; 0xa0
 800ae48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	695b      	ldr	r3, [r3, #20]
 800ae52:	f003 0302 	and.w	r3, r3, #2
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	bf0c      	ite	eq
 800ae5a:	2301      	moveq	r3, #1
 800ae5c:	2300      	movne	r3, #0
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae70:	bf0c      	ite	eq
 800ae72:	2301      	moveq	r3, #1
 800ae74:	2300      	movne	r3, #0
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2ba0      	cmp	r3, #160	; 0xa0
 800ae84:	d005      	beq.n	800ae92 <HAL_I2C_IsDeviceReady+0x186>
 800ae86:	7dfb      	ldrb	r3, [r7, #23]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <HAL_I2C_IsDeviceReady+0x186>
 800ae8c:	7dbb      	ldrb	r3, [r7, #22]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d0cd      	beq.n	800ae2e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2220      	movs	r2, #32
 800ae96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	f003 0302 	and.w	r3, r3, #2
 800aea4:	2b02      	cmp	r3, #2
 800aea6:	d129      	bne.n	800aefc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aeb6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	613b      	str	r3, [r7, #16]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	613b      	str	r3, [r7, #16]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	613b      	str	r3, [r7, #16]
 800aecc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	2319      	movs	r3, #25
 800aed4:	2201      	movs	r2, #1
 800aed6:	4922      	ldr	r1, [pc, #136]	; (800af60 <HAL_I2C_IsDeviceReady+0x254>)
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 f95b 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e036      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e02c      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af0a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af14:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	2319      	movs	r3, #25
 800af1c:	2201      	movs	r2, #1
 800af1e:	4910      	ldr	r1, [pc, #64]	; (800af60 <HAL_I2C_IsDeviceReady+0x254>)
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 f937 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e012      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	3301      	adds	r3, #1
 800af34:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	f4ff af33 	bcc.w	800ada6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2220      	movs	r2, #32
 800af44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e000      	b.n	800af56 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800af54:	2302      	movs	r3, #2
  }
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	00100002 	.word	0x00100002
 800af64:	ffff0000 	.word	0xffff0000

0800af68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	607a      	str	r2, [r7, #4]
 800af72:	603b      	str	r3, [r7, #0]
 800af74:	460b      	mov	r3, r1
 800af76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b08      	cmp	r3, #8
 800af82:	d006      	beq.n	800af92 <I2C_MasterRequestWrite+0x2a>
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b01      	cmp	r3, #1
 800af88:	d003      	beq.n	800af92 <I2C_MasterRequestWrite+0x2a>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af90:	d108      	bne.n	800afa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	681a      	ldr	r2, [r3, #0]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afa0:	601a      	str	r2, [r3, #0]
 800afa2:	e00b      	b.n	800afbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa8:	2b12      	cmp	r3, #18
 800afaa:	d107      	bne.n	800afbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800afba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2200      	movs	r2, #0
 800afc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800afc8:	68f8      	ldr	r0, [r7, #12]
 800afca:	f000 f8e3 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d00c      	beq.n	800afee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afe8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e035      	b.n	800b05a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aff6:	d108      	bne.n	800b00a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aff8:	897b      	ldrh	r3, [r7, #10]
 800affa:	b2db      	uxtb	r3, r3
 800affc:	461a      	mov	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b006:	611a      	str	r2, [r3, #16]
 800b008:	e01b      	b.n	800b042 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b00a:	897b      	ldrh	r3, [r7, #10]
 800b00c:	11db      	asrs	r3, r3, #7
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	f003 0306 	and.w	r3, r3, #6
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f063 030f 	orn	r3, r3, #15
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	490f      	ldr	r1, [pc, #60]	; (800b064 <I2C_MasterRequestWrite+0xfc>)
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 f90a 	bl	800b242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e010      	b.n	800b05a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b038:	897b      	ldrh	r3, [r7, #10]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	4908      	ldr	r1, [pc, #32]	; (800b068 <I2C_MasterRequestWrite+0x100>)
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 f8fa 	bl	800b242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e000      	b.n	800b05a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	00010008 	.word	0x00010008
 800b068:	00010002 	.word	0x00010002

0800b06c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b088      	sub	sp, #32
 800b070:	af02      	add	r7, sp, #8
 800b072:	60f8      	str	r0, [r7, #12]
 800b074:	4608      	mov	r0, r1
 800b076:	4611      	mov	r1, r2
 800b078:	461a      	mov	r2, r3
 800b07a:	4603      	mov	r3, r0
 800b07c:	817b      	strh	r3, [r7, #10]
 800b07e:	460b      	mov	r3, r1
 800b080:	813b      	strh	r3, [r7, #8]
 800b082:	4613      	mov	r3, r2
 800b084:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b094:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	6a3b      	ldr	r3, [r7, #32]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b0a2:	68f8      	ldr	r0, [r7, #12]
 800b0a4:	f000 f876 	bl	800b194 <I2C_WaitOnFlagUntilTimeout>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00c      	beq.n	800b0c8 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d003      	beq.n	800b0c4 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b0c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e05f      	b.n	800b188 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b0c8:	897b      	ldrh	r3, [r7, #10]
 800b0ca:	b2db      	uxtb	r3, r3
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b0d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	6a3a      	ldr	r2, [r7, #32]
 800b0dc:	492c      	ldr	r1, [pc, #176]	; (800b190 <I2C_RequestMemoryWrite+0x124>)
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 f8af 	bl	800b242 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e04c      	b.n	800b188 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	695b      	ldr	r3, [r3, #20]
 800b0f8:	617b      	str	r3, [r7, #20]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	617b      	str	r3, [r7, #20]
 800b102:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b106:	6a39      	ldr	r1, [r7, #32]
 800b108:	68f8      	ldr	r0, [r7, #12]
 800b10a:	f000 f919 	bl	800b340 <I2C_WaitOnTXEFlagUntilTimeout>
 800b10e:	4603      	mov	r3, r0
 800b110:	2b00      	cmp	r3, #0
 800b112:	d00d      	beq.n	800b130 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d107      	bne.n	800b12c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b12a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b12c:	2301      	movs	r3, #1
 800b12e:	e02b      	b.n	800b188 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d105      	bne.n	800b142 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b136:	893b      	ldrh	r3, [r7, #8]
 800b138:	b2da      	uxtb	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	611a      	str	r2, [r3, #16]
 800b140:	e021      	b.n	800b186 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b142:	893b      	ldrh	r3, [r7, #8]
 800b144:	0a1b      	lsrs	r3, r3, #8
 800b146:	b29b      	uxth	r3, r3
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b152:	6a39      	ldr	r1, [r7, #32]
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f000 f8f3 	bl	800b340 <I2C_WaitOnTXEFlagUntilTimeout>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00d      	beq.n	800b17c <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b164:	2b04      	cmp	r3, #4
 800b166:	d107      	bne.n	800b178 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b176:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e005      	b.n	800b188 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b17c:	893b      	ldrh	r3, [r7, #8]
 800b17e:	b2da      	uxtb	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b186:	2300      	movs	r3, #0
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3718      	adds	r7, #24
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}
 800b190:	00010002 	.word	0x00010002

0800b194 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	603b      	str	r3, [r7, #0]
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1a4:	e025      	b.n	800b1f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ac:	d021      	beq.n	800b1f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ae:	f7fd f9ab 	bl	8008508 <HAL_GetTick>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	1ad3      	subs	r3, r2, r3
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d302      	bcc.n	800b1c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d116      	bne.n	800b1f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2220      	movs	r2, #32
 800b1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1de:	f043 0220 	orr.w	r2, r3, #32
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	e023      	b.n	800b23a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	0c1b      	lsrs	r3, r3, #16
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d10d      	bne.n	800b218 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	695b      	ldr	r3, [r3, #20]
 800b202:	43da      	mvns	r2, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	4013      	ands	r3, r2
 800b208:	b29b      	uxth	r3, r3
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bf0c      	ite	eq
 800b20e:	2301      	moveq	r3, #1
 800b210:	2300      	movne	r3, #0
 800b212:	b2db      	uxtb	r3, r3
 800b214:	461a      	mov	r2, r3
 800b216:	e00c      	b.n	800b232 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	699b      	ldr	r3, [r3, #24]
 800b21e:	43da      	mvns	r2, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	4013      	ands	r3, r2
 800b224:	b29b      	uxth	r3, r3
 800b226:	2b00      	cmp	r3, #0
 800b228:	bf0c      	ite	eq
 800b22a:	2301      	moveq	r3, #1
 800b22c:	2300      	movne	r3, #0
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	461a      	mov	r2, r3
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	429a      	cmp	r2, r3
 800b236:	d0b6      	beq.n	800b1a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	607a      	str	r2, [r7, #4]
 800b24e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b250:	e051      	b.n	800b2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	695b      	ldr	r3, [r3, #20]
 800b258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b25c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b260:	d123      	bne.n	800b2aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b270:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b27a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2220      	movs	r2, #32
 800b286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2200      	movs	r2, #0
 800b28e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b296:	f043 0204 	orr.w	r2, r3, #4
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e046      	b.n	800b338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2b0:	d021      	beq.n	800b2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2b2:	f7fd f929 	bl	8008508 <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d302      	bcc.n	800b2c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d116      	bne.n	800b2f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2220      	movs	r2, #32
 800b2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2e2:	f043 0220 	orr.w	r2, r3, #32
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e020      	b.n	800b338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	0c1b      	lsrs	r3, r3, #16
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d10c      	bne.n	800b31a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	695b      	ldr	r3, [r3, #20]
 800b306:	43da      	mvns	r2, r3
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	4013      	ands	r3, r2
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bf14      	ite	ne
 800b312:	2301      	movne	r3, #1
 800b314:	2300      	moveq	r3, #0
 800b316:	b2db      	uxtb	r3, r3
 800b318:	e00b      	b.n	800b332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	43da      	mvns	r2, r3
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	4013      	ands	r3, r2
 800b326:	b29b      	uxth	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	bf14      	ite	ne
 800b32c:	2301      	movne	r3, #1
 800b32e:	2300      	moveq	r3, #0
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d18d      	bne.n	800b252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b34c:	e02d      	b.n	800b3aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b34e:	68f8      	ldr	r0, [r7, #12]
 800b350:	f000 f878 	bl	800b444 <I2C_IsAcknowledgeFailed>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e02d      	b.n	800b3ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b364:	d021      	beq.n	800b3aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b366:	f7fd f8cf 	bl	8008508 <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	68ba      	ldr	r2, [r7, #8]
 800b372:	429a      	cmp	r2, r3
 800b374:	d302      	bcc.n	800b37c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d116      	bne.n	800b3aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2220      	movs	r2, #32
 800b386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b396:	f043 0220 	orr.w	r2, r3, #32
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e007      	b.n	800b3ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	695b      	ldr	r3, [r3, #20]
 800b3b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b4:	2b80      	cmp	r3, #128	; 0x80
 800b3b6:	d1ca      	bne.n	800b34e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b3b8:	2300      	movs	r3, #0
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}

0800b3c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3c2:	b580      	push	{r7, lr}
 800b3c4:	b084      	sub	sp, #16
 800b3c6:	af00      	add	r7, sp, #0
 800b3c8:	60f8      	str	r0, [r7, #12]
 800b3ca:	60b9      	str	r1, [r7, #8]
 800b3cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3ce:	e02d      	b.n	800b42c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f000 f837 	bl	800b444 <I2C_IsAcknowledgeFailed>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e02d      	b.n	800b43c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e6:	d021      	beq.n	800b42c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3e8:	f7fd f88e 	bl	8008508 <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d302      	bcc.n	800b3fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d116      	bne.n	800b42c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2220      	movs	r2, #32
 800b408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2200      	movs	r2, #0
 800b410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	f043 0220 	orr.w	r2, r3, #32
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e007      	b.n	800b43c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	f003 0304 	and.w	r3, r3, #4
 800b436:	2b04      	cmp	r3, #4
 800b438:	d1ca      	bne.n	800b3d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3710      	adds	r7, #16
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b45a:	d11b      	bne.n	800b494 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b464:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2220      	movs	r2, #32
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b480:	f043 0204 	orr.w	r2, r3, #4
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b490:	2301      	movs	r3, #1
 800b492:	e000      	b.n	800b496 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	370c      	adds	r7, #12
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bc80      	pop	{r7}
 800b49e:	4770      	bx	lr

0800b4a0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e02b      	b.n	800b50a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800b4ba:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f245 5255 	movw	r2, #21845	; 0x5555
 800b4c4:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6852      	ldr	r2, [r2, #4]
 800b4ce:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	6892      	ldr	r2, [r2, #8]
 800b4d8:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800b4da:	f7fd f815 	bl	8008508 <HAL_GetTick>
 800b4de:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != 0x00u)
 800b4e0:	e008      	b.n	800b4f4 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800b4e2:	f7fd f811 	bl	8008508 <HAL_GetTick>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	2b30      	cmp	r3, #48	; 0x30
 800b4ee:	d901      	bls.n	800b4f4 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e00a      	b.n	800b50a <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != 0x00u)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d1f1      	bne.n	800b4e2 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b506:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800b512:	b480      	push	{r7}
 800b514:	b083      	sub	sp, #12
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b522:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b524:	2300      	movs	r3, #0
}
 800b526:	4618      	mov	r0, r3
 800b528:	370c      	adds	r7, #12
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bc80      	pop	{r7}
 800b52e:	4770      	bx	lr

0800b530 <HAL_RCC_OscConfig>:
 800b530:	b580      	push	{r7, lr}
 800b532:	b090      	sub	sp, #64	; 0x40
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d101      	bne.n	800b542 <HAL_RCC_OscConfig+0x12>
 800b53e:	2301      	movs	r3, #1
 800b540:	e253      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 0301 	and.w	r3, r3, #1
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d050      	beq.n	800b5f0 <HAL_RCC_OscConfig+0xc0>
 800b54e:	4ba3      	ldr	r3, [pc, #652]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	f003 030c 	and.w	r3, r3, #12
 800b556:	2b04      	cmp	r3, #4
 800b558:	d00c      	beq.n	800b574 <HAL_RCC_OscConfig+0x44>
 800b55a:	4ba0      	ldr	r3, [pc, #640]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b55c:	689b      	ldr	r3, [r3, #8]
 800b55e:	f003 030c 	and.w	r3, r3, #12
 800b562:	2b08      	cmp	r3, #8
 800b564:	d112      	bne.n	800b58c <HAL_RCC_OscConfig+0x5c>
 800b566:	4b9d      	ldr	r3, [pc, #628]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b56e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b572:	d10b      	bne.n	800b58c <HAL_RCC_OscConfig+0x5c>
 800b574:	4b99      	ldr	r3, [pc, #612]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d036      	beq.n	800b5ee <HAL_RCC_OscConfig+0xbe>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d132      	bne.n	800b5ee <HAL_RCC_OscConfig+0xbe>
 800b588:	2301      	movs	r3, #1
 800b58a:	e22e      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685a      	ldr	r2, [r3, #4]
 800b590:	4b93      	ldr	r3, [pc, #588]	; (800b7e0 <HAL_RCC_OscConfig+0x2b0>)
 800b592:	b2d2      	uxtb	r2, r2
 800b594:	701a      	strb	r2, [r3, #0]
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d013      	beq.n	800b5c6 <HAL_RCC_OscConfig+0x96>
 800b59e:	f7fc ffb3 	bl	8008508 <HAL_GetTick>
 800b5a2:	63b8      	str	r0, [r7, #56]	; 0x38
 800b5a4:	e008      	b.n	800b5b8 <HAL_RCC_OscConfig+0x88>
 800b5a6:	f7fc ffaf 	bl	8008508 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	2b64      	cmp	r3, #100	; 0x64
 800b5b2:	d901      	bls.n	800b5b8 <HAL_RCC_OscConfig+0x88>
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e218      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b5b8:	4b88      	ldr	r3, [pc, #544]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0f0      	beq.n	800b5a6 <HAL_RCC_OscConfig+0x76>
 800b5c4:	e014      	b.n	800b5f0 <HAL_RCC_OscConfig+0xc0>
 800b5c6:	f7fc ff9f 	bl	8008508 <HAL_GetTick>
 800b5ca:	63b8      	str	r0, [r7, #56]	; 0x38
 800b5cc:	e008      	b.n	800b5e0 <HAL_RCC_OscConfig+0xb0>
 800b5ce:	f7fc ff9b 	bl	8008508 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b64      	cmp	r3, #100	; 0x64
 800b5da:	d901      	bls.n	800b5e0 <HAL_RCC_OscConfig+0xb0>
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e204      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b5e0:	4b7e      	ldr	r3, [pc, #504]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1f0      	bne.n	800b5ce <HAL_RCC_OscConfig+0x9e>
 800b5ec:	e000      	b.n	800b5f0 <HAL_RCC_OscConfig+0xc0>
 800b5ee:	bf00      	nop
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0302 	and.w	r3, r3, #2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d077      	beq.n	800b6ec <HAL_RCC_OscConfig+0x1bc>
 800b5fc:	4b77      	ldr	r3, [pc, #476]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	f003 030c 	and.w	r3, r3, #12
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00b      	beq.n	800b620 <HAL_RCC_OscConfig+0xf0>
 800b608:	4b74      	ldr	r3, [pc, #464]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	f003 030c 	and.w	r3, r3, #12
 800b610:	2b08      	cmp	r3, #8
 800b612:	d126      	bne.n	800b662 <HAL_RCC_OscConfig+0x132>
 800b614:	4b71      	ldr	r3, [pc, #452]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d120      	bne.n	800b662 <HAL_RCC_OscConfig+0x132>
 800b620:	4b6e      	ldr	r3, [pc, #440]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0302 	and.w	r3, r3, #2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d005      	beq.n	800b638 <HAL_RCC_OscConfig+0x108>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d001      	beq.n	800b638 <HAL_RCC_OscConfig+0x108>
 800b634:	2301      	movs	r3, #1
 800b636:	e1d8      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b638:	4b68      	ldr	r3, [pc, #416]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	21f8      	movs	r1, #248	; 0xf8
 800b646:	6339      	str	r1, [r7, #48]	; 0x30
 800b648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b64a:	fa91 f1a1 	rbit	r1, r1
 800b64e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800b650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b652:	fab1 f181 	clz	r1, r1
 800b656:	b2c9      	uxtb	r1, r1
 800b658:	408b      	lsls	r3, r1
 800b65a:	4960      	ldr	r1, [pc, #384]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b65c:	4313      	orrs	r3, r2
 800b65e:	600b      	str	r3, [r1, #0]
 800b660:	e044      	b.n	800b6ec <HAL_RCC_OscConfig+0x1bc>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d02a      	beq.n	800b6c0 <HAL_RCC_OscConfig+0x190>
 800b66a:	4b5e      	ldr	r3, [pc, #376]	; (800b7e4 <HAL_RCC_OscConfig+0x2b4>)
 800b66c:	2201      	movs	r2, #1
 800b66e:	601a      	str	r2, [r3, #0]
 800b670:	f7fc ff4a 	bl	8008508 <HAL_GetTick>
 800b674:	63b8      	str	r0, [r7, #56]	; 0x38
 800b676:	e008      	b.n	800b68a <HAL_RCC_OscConfig+0x15a>
 800b678:	f7fc ff46 	bl	8008508 <HAL_GetTick>
 800b67c:	4602      	mov	r2, r0
 800b67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	2b02      	cmp	r3, #2
 800b684:	d901      	bls.n	800b68a <HAL_RCC_OscConfig+0x15a>
 800b686:	2303      	movs	r3, #3
 800b688:	e1af      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b68a:	4b54      	ldr	r3, [pc, #336]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f003 0302 	and.w	r3, r3, #2
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0f0      	beq.n	800b678 <HAL_RCC_OscConfig+0x148>
 800b696:	4b51      	ldr	r3, [pc, #324]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	21f8      	movs	r1, #248	; 0xf8
 800b6a4:	62b9      	str	r1, [r7, #40]	; 0x28
 800b6a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6a8:	fa91 f1a1 	rbit	r1, r1
 800b6ac:	6279      	str	r1, [r7, #36]	; 0x24
 800b6ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b6b0:	fab1 f181 	clz	r1, r1
 800b6b4:	b2c9      	uxtb	r1, r1
 800b6b6:	408b      	lsls	r3, r1
 800b6b8:	4948      	ldr	r1, [pc, #288]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	600b      	str	r3, [r1, #0]
 800b6be:	e015      	b.n	800b6ec <HAL_RCC_OscConfig+0x1bc>
 800b6c0:	4b48      	ldr	r3, [pc, #288]	; (800b7e4 <HAL_RCC_OscConfig+0x2b4>)
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]
 800b6c6:	f7fc ff1f 	bl	8008508 <HAL_GetTick>
 800b6ca:	63b8      	str	r0, [r7, #56]	; 0x38
 800b6cc:	e008      	b.n	800b6e0 <HAL_RCC_OscConfig+0x1b0>
 800b6ce:	f7fc ff1b 	bl	8008508 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d901      	bls.n	800b6e0 <HAL_RCC_OscConfig+0x1b0>
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e184      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b6e0:	4b3e      	ldr	r3, [pc, #248]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 0302 	and.w	r3, r3, #2
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d1f0      	bne.n	800b6ce <HAL_RCC_OscConfig+0x19e>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0308 	and.w	r3, r3, #8
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d030      	beq.n	800b75a <HAL_RCC_OscConfig+0x22a>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	695b      	ldr	r3, [r3, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d016      	beq.n	800b72e <HAL_RCC_OscConfig+0x1fe>
 800b700:	4b39      	ldr	r3, [pc, #228]	; (800b7e8 <HAL_RCC_OscConfig+0x2b8>)
 800b702:	2201      	movs	r2, #1
 800b704:	601a      	str	r2, [r3, #0]
 800b706:	f7fc feff 	bl	8008508 <HAL_GetTick>
 800b70a:	63b8      	str	r0, [r7, #56]	; 0x38
 800b70c:	e008      	b.n	800b720 <HAL_RCC_OscConfig+0x1f0>
 800b70e:	f7fc fefb 	bl	8008508 <HAL_GetTick>
 800b712:	4602      	mov	r2, r0
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	1ad3      	subs	r3, r2, r3
 800b718:	2b02      	cmp	r3, #2
 800b71a:	d901      	bls.n	800b720 <HAL_RCC_OscConfig+0x1f0>
 800b71c:	2303      	movs	r3, #3
 800b71e:	e164      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b720:	4b2e      	ldr	r3, [pc, #184]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b724:	f003 0302 	and.w	r3, r3, #2
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0f0      	beq.n	800b70e <HAL_RCC_OscConfig+0x1de>
 800b72c:	e015      	b.n	800b75a <HAL_RCC_OscConfig+0x22a>
 800b72e:	4b2e      	ldr	r3, [pc, #184]	; (800b7e8 <HAL_RCC_OscConfig+0x2b8>)
 800b730:	2200      	movs	r2, #0
 800b732:	601a      	str	r2, [r3, #0]
 800b734:	f7fc fee8 	bl	8008508 <HAL_GetTick>
 800b738:	63b8      	str	r0, [r7, #56]	; 0x38
 800b73a:	e008      	b.n	800b74e <HAL_RCC_OscConfig+0x21e>
 800b73c:	f7fc fee4 	bl	8008508 <HAL_GetTick>
 800b740:	4602      	mov	r2, r0
 800b742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	2b02      	cmp	r3, #2
 800b748:	d901      	bls.n	800b74e <HAL_RCC_OscConfig+0x21e>
 800b74a:	2303      	movs	r3, #3
 800b74c:	e14d      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b74e:	4b23      	ldr	r3, [pc, #140]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f0      	bne.n	800b73c <HAL_RCC_OscConfig+0x20c>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0304 	and.w	r3, r3, #4
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 8088 	beq.w	800b878 <HAL_RCC_OscConfig+0x348>
 800b768:	2300      	movs	r3, #0
 800b76a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b76e:	4b1b      	ldr	r3, [pc, #108]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d110      	bne.n	800b79c <HAL_RCC_OscConfig+0x26c>
 800b77a:	2300      	movs	r3, #0
 800b77c:	60bb      	str	r3, [r7, #8]
 800b77e:	4b17      	ldr	r3, [pc, #92]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b782:	4a16      	ldr	r2, [pc, #88]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b788:	6413      	str	r3, [r2, #64]	; 0x40
 800b78a:	4b14      	ldr	r3, [pc, #80]	; (800b7dc <HAL_RCC_OscConfig+0x2ac>)
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b792:	60bb      	str	r3, [r7, #8]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	2301      	movs	r3, #1
 800b798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800b79c:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <HAL_RCC_OscConfig+0x2bc>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a12      	ldr	r2, [pc, #72]	; (800b7ec <HAL_RCC_OscConfig+0x2bc>)
 800b7a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7a6:	6013      	str	r3, [r2, #0]
 800b7a8:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <HAL_RCC_OscConfig+0x2bc>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d123      	bne.n	800b7fc <HAL_RCC_OscConfig+0x2cc>
 800b7b4:	4b0d      	ldr	r3, [pc, #52]	; (800b7ec <HAL_RCC_OscConfig+0x2bc>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a0c      	ldr	r2, [pc, #48]	; (800b7ec <HAL_RCC_OscConfig+0x2bc>)
 800b7ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	f7fc fea2 	bl	8008508 <HAL_GetTick>
 800b7c4:	63b8      	str	r0, [r7, #56]	; 0x38
 800b7c6:	e013      	b.n	800b7f0 <HAL_RCC_OscConfig+0x2c0>
 800b7c8:	f7fc fe9e 	bl	8008508 <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d90c      	bls.n	800b7f0 <HAL_RCC_OscConfig+0x2c0>
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e107      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b7da:	bf00      	nop
 800b7dc:	40023800 	.word	0x40023800
 800b7e0:	40023802 	.word	0x40023802
 800b7e4:	42470000 	.word	0x42470000
 800b7e8:	42470e80 	.word	0x42470e80
 800b7ec:	40007000 	.word	0x40007000
 800b7f0:	4b80      	ldr	r3, [pc, #512]	; (800b9f4 <HAL_RCC_OscConfig+0x4c4>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d0e5      	beq.n	800b7c8 <HAL_RCC_OscConfig+0x298>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	689a      	ldr	r2, [r3, #8]
 800b800:	4b7d      	ldr	r3, [pc, #500]	; (800b9f8 <HAL_RCC_OscConfig+0x4c8>)
 800b802:	b2d2      	uxtb	r2, r2
 800b804:	701a      	strb	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d015      	beq.n	800b83a <HAL_RCC_OscConfig+0x30a>
 800b80e:	f7fc fe7b 	bl	8008508 <HAL_GetTick>
 800b812:	63b8      	str	r0, [r7, #56]	; 0x38
 800b814:	e00a      	b.n	800b82c <HAL_RCC_OscConfig+0x2fc>
 800b816:	f7fc fe77 	bl	8008508 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	f241 3288 	movw	r2, #5000	; 0x1388
 800b824:	4293      	cmp	r3, r2
 800b826:	d901      	bls.n	800b82c <HAL_RCC_OscConfig+0x2fc>
 800b828:	2303      	movs	r3, #3
 800b82a:	e0de      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b82c:	4b73      	ldr	r3, [pc, #460]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b00      	cmp	r3, #0
 800b836:	d0ee      	beq.n	800b816 <HAL_RCC_OscConfig+0x2e6>
 800b838:	e014      	b.n	800b864 <HAL_RCC_OscConfig+0x334>
 800b83a:	f7fc fe65 	bl	8008508 <HAL_GetTick>
 800b83e:	63b8      	str	r0, [r7, #56]	; 0x38
 800b840:	e00a      	b.n	800b858 <HAL_RCC_OscConfig+0x328>
 800b842:	f7fc fe61 	bl	8008508 <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b850:	4293      	cmp	r3, r2
 800b852:	d901      	bls.n	800b858 <HAL_RCC_OscConfig+0x328>
 800b854:	2303      	movs	r3, #3
 800b856:	e0c8      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b858:	4b68      	ldr	r3, [pc, #416]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b85a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b85c:	f003 0302 	and.w	r3, r3, #2
 800b860:	2b00      	cmp	r3, #0
 800b862:	d1ee      	bne.n	800b842 <HAL_RCC_OscConfig+0x312>
 800b864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d105      	bne.n	800b878 <HAL_RCC_OscConfig+0x348>
 800b86c:	4b63      	ldr	r3, [pc, #396]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b870:	4a62      	ldr	r2, [pc, #392]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b876:	6413      	str	r3, [r2, #64]	; 0x40
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 80b3 	beq.w	800b9e8 <HAL_RCC_OscConfig+0x4b8>
 800b882:	4b5e      	ldr	r3, [pc, #376]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	f003 030c 	and.w	r3, r3, #12
 800b88a:	2b08      	cmp	r3, #8
 800b88c:	d07d      	beq.n	800b98a <HAL_RCC_OscConfig+0x45a>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	699b      	ldr	r3, [r3, #24]
 800b892:	2b02      	cmp	r3, #2
 800b894:	d162      	bne.n	800b95c <HAL_RCC_OscConfig+0x42c>
 800b896:	4b5a      	ldr	r3, [pc, #360]	; (800ba00 <HAL_RCC_OscConfig+0x4d0>)
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
 800b89c:	f7fc fe34 	bl	8008508 <HAL_GetTick>
 800b8a0:	63b8      	str	r0, [r7, #56]	; 0x38
 800b8a2:	e008      	b.n	800b8b6 <HAL_RCC_OscConfig+0x386>
 800b8a4:	f7fc fe30 	bl	8008508 <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b64      	cmp	r3, #100	; 0x64
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0x386>
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e099      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b8b6:	4b51      	ldr	r3, [pc, #324]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d1f0      	bne.n	800b8a4 <HAL_RCC_OscConfig+0x374>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69da      	ldr	r2, [r3, #28]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a1b      	ldr	r3, [r3, #32]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d0:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800b8d4:	6139      	str	r1, [r7, #16]
 800b8d6:	6939      	ldr	r1, [r7, #16]
 800b8d8:	fa91 f1a1 	rbit	r1, r1
 800b8dc:	60f9      	str	r1, [r7, #12]
 800b8de:	68f9      	ldr	r1, [r7, #12]
 800b8e0:	fab1 f181 	clz	r1, r1
 800b8e4:	b2c9      	uxtb	r1, r1
 800b8e6:	408b      	lsls	r3, r1
 800b8e8:	431a      	orrs	r2, r3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	085b      	lsrs	r3, r3, #1
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800b8f6:	61b9      	str	r1, [r7, #24]
 800b8f8:	69b9      	ldr	r1, [r7, #24]
 800b8fa:	fa91 f1a1 	rbit	r1, r1
 800b8fe:	6179      	str	r1, [r7, #20]
 800b900:	6979      	ldr	r1, [r7, #20]
 800b902:	fab1 f181 	clz	r1, r1
 800b906:	b2c9      	uxtb	r1, r1
 800b908:	408b      	lsls	r3, r1
 800b90a:	431a      	orrs	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800b914:	6239      	str	r1, [r7, #32]
 800b916:	6a39      	ldr	r1, [r7, #32]
 800b918:	fa91 f1a1 	rbit	r1, r1
 800b91c:	61f9      	str	r1, [r7, #28]
 800b91e:	69f9      	ldr	r1, [r7, #28]
 800b920:	fab1 f181 	clz	r1, r1
 800b924:	b2c9      	uxtb	r1, r1
 800b926:	408b      	lsls	r3, r1
 800b928:	4934      	ldr	r1, [pc, #208]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b92a:	4313      	orrs	r3, r2
 800b92c:	604b      	str	r3, [r1, #4]
 800b92e:	4b34      	ldr	r3, [pc, #208]	; (800ba00 <HAL_RCC_OscConfig+0x4d0>)
 800b930:	2201      	movs	r2, #1
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	f7fc fde8 	bl	8008508 <HAL_GetTick>
 800b938:	63b8      	str	r0, [r7, #56]	; 0x38
 800b93a:	e008      	b.n	800b94e <HAL_RCC_OscConfig+0x41e>
 800b93c:	f7fc fde4 	bl	8008508 <HAL_GetTick>
 800b940:	4602      	mov	r2, r0
 800b942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	2b64      	cmp	r3, #100	; 0x64
 800b948:	d901      	bls.n	800b94e <HAL_RCC_OscConfig+0x41e>
 800b94a:	2303      	movs	r3, #3
 800b94c:	e04d      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b94e:	4b2b      	ldr	r3, [pc, #172]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b956:	2b00      	cmp	r3, #0
 800b958:	d0f0      	beq.n	800b93c <HAL_RCC_OscConfig+0x40c>
 800b95a:	e045      	b.n	800b9e8 <HAL_RCC_OscConfig+0x4b8>
 800b95c:	4b28      	ldr	r3, [pc, #160]	; (800ba00 <HAL_RCC_OscConfig+0x4d0>)
 800b95e:	2200      	movs	r2, #0
 800b960:	601a      	str	r2, [r3, #0]
 800b962:	f7fc fdd1 	bl	8008508 <HAL_GetTick>
 800b966:	63b8      	str	r0, [r7, #56]	; 0x38
 800b968:	e008      	b.n	800b97c <HAL_RCC_OscConfig+0x44c>
 800b96a:	f7fc fdcd 	bl	8008508 <HAL_GetTick>
 800b96e:	4602      	mov	r2, r0
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	1ad3      	subs	r3, r2, r3
 800b974:	2b64      	cmp	r3, #100	; 0x64
 800b976:	d901      	bls.n	800b97c <HAL_RCC_OscConfig+0x44c>
 800b978:	2303      	movs	r3, #3
 800b97a:	e036      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b97c:	4b1f      	ldr	r3, [pc, #124]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d1f0      	bne.n	800b96a <HAL_RCC_OscConfig+0x43a>
 800b988:	e02e      	b.n	800b9e8 <HAL_RCC_OscConfig+0x4b8>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d101      	bne.n	800b996 <HAL_RCC_OscConfig+0x466>
 800b992:	2301      	movs	r3, #1
 800b994:	e029      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b996:	4b19      	ldr	r3, [pc, #100]	; (800b9fc <HAL_RCC_OscConfig+0x4cc>)
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	637b      	str	r3, [r7, #52]	; 0x34
 800b99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b99e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	69db      	ldr	r3, [r3, #28]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d11c      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x4b4>
 800b9aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d115      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x4b4>
 800b9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ba:	099b      	lsrs	r3, r3, #6
 800b9bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d10d      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x4b4>
 800b9c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d106      	bne.n	800b9e4 <HAL_RCC_OscConfig+0x4b4>
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e0:	429a      	cmp	r2, r3
 800b9e2:	d001      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x4b8>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e000      	b.n	800b9ea <HAL_RCC_OscConfig+0x4ba>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3740      	adds	r7, #64	; 0x40
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	40007000 	.word	0x40007000
 800b9f8:	40023870 	.word	0x40023870
 800b9fc:	40023800 	.word	0x40023800
 800ba00:	42470060 	.word	0x42470060

0800ba04 <HAL_RCC_ClockConfig>:
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d101      	bne.n	800ba18 <HAL_RCC_ClockConfig+0x14>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e0d2      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800ba18:	4b6b      	ldr	r3, [pc, #428]	; (800bbc8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f003 030f 	and.w	r3, r3, #15
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	429a      	cmp	r2, r3
 800ba24:	d90c      	bls.n	800ba40 <HAL_RCC_ClockConfig+0x3c>
 800ba26:	4b68      	ldr	r3, [pc, #416]	; (800bbc8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba28:	683a      	ldr	r2, [r7, #0]
 800ba2a:	b2d2      	uxtb	r2, r2
 800ba2c:	701a      	strb	r2, [r3, #0]
 800ba2e:	4b66      	ldr	r3, [pc, #408]	; (800bbc8 <HAL_RCC_ClockConfig+0x1c4>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d001      	beq.n	800ba40 <HAL_RCC_ClockConfig+0x3c>
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e0be      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0302 	and.w	r3, r3, #2
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d020      	beq.n	800ba8e <HAL_RCC_ClockConfig+0x8a>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d005      	beq.n	800ba64 <HAL_RCC_ClockConfig+0x60>
 800ba58:	4b5c      	ldr	r3, [pc, #368]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	4a5b      	ldr	r2, [pc, #364]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800ba5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ba62:	6093      	str	r3, [r2, #8]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f003 0308 	and.w	r3, r3, #8
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d005      	beq.n	800ba7c <HAL_RCC_ClockConfig+0x78>
 800ba70:	4b56      	ldr	r3, [pc, #344]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800ba72:	689b      	ldr	r3, [r3, #8]
 800ba74:	4a55      	ldr	r2, [pc, #340]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800ba76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ba7a:	6093      	str	r3, [r2, #8]
 800ba7c:	4b53      	ldr	r3, [pc, #332]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800ba7e:	689b      	ldr	r3, [r3, #8]
 800ba80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	4950      	ldr	r1, [pc, #320]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	608b      	str	r3, [r1, #8]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d040      	beq.n	800bb1c <HAL_RCC_ClockConfig+0x118>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d107      	bne.n	800bab2 <HAL_RCC_ClockConfig+0xae>
 800baa2:	4b4a      	ldr	r3, [pc, #296]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d115      	bne.n	800bada <HAL_RCC_ClockConfig+0xd6>
 800baae:	2301      	movs	r3, #1
 800bab0:	e085      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d107      	bne.n	800baca <HAL_RCC_ClockConfig+0xc6>
 800baba:	4b44      	ldr	r3, [pc, #272]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d109      	bne.n	800bada <HAL_RCC_ClockConfig+0xd6>
 800bac6:	2301      	movs	r3, #1
 800bac8:	e079      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800baca:	4b40      	ldr	r3, [pc, #256]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <HAL_RCC_ClockConfig+0xd6>
 800bad6:	2301      	movs	r3, #1
 800bad8:	e071      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800bada:	4b3c      	ldr	r3, [pc, #240]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	f023 0203 	bic.w	r2, r3, #3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	685b      	ldr	r3, [r3, #4]
 800bae6:	4939      	ldr	r1, [pc, #228]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	608b      	str	r3, [r1, #8]
 800baec:	f7fc fd0c 	bl	8008508 <HAL_GetTick>
 800baf0:	6178      	str	r0, [r7, #20]
 800baf2:	e00a      	b.n	800bb0a <HAL_RCC_ClockConfig+0x106>
 800baf4:	f7fc fd08 	bl	8008508 <HAL_GetTick>
 800baf8:	4602      	mov	r2, r0
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	1ad3      	subs	r3, r2, r3
 800bafe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d901      	bls.n	800bb0a <HAL_RCC_ClockConfig+0x106>
 800bb06:	2303      	movs	r3, #3
 800bb08:	e059      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800bb0a:	4b30      	ldr	r3, [pc, #192]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bb0c:	689b      	ldr	r3, [r3, #8]
 800bb0e:	f003 020c 	and.w	r2, r3, #12
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	009b      	lsls	r3, r3, #2
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d1eb      	bne.n	800baf4 <HAL_RCC_ClockConfig+0xf0>
 800bb1c:	4b2a      	ldr	r3, [pc, #168]	; (800bbc8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f003 030f 	and.w	r3, r3, #15
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d20c      	bcs.n	800bb44 <HAL_RCC_ClockConfig+0x140>
 800bb2a:	4b27      	ldr	r3, [pc, #156]	; (800bbc8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	b2d2      	uxtb	r2, r2
 800bb30:	701a      	strb	r2, [r3, #0]
 800bb32:	4b25      	ldr	r3, [pc, #148]	; (800bbc8 <HAL_RCC_ClockConfig+0x1c4>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 030f 	and.w	r3, r3, #15
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d001      	beq.n	800bb44 <HAL_RCC_ClockConfig+0x140>
 800bb40:	2301      	movs	r3, #1
 800bb42:	e03c      	b.n	800bbbe <HAL_RCC_ClockConfig+0x1ba>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f003 0304 	and.w	r3, r3, #4
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d008      	beq.n	800bb62 <HAL_RCC_ClockConfig+0x15e>
 800bb50:	4b1e      	ldr	r3, [pc, #120]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	491b      	ldr	r1, [pc, #108]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	608b      	str	r3, [r1, #8]
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <HAL_RCC_ClockConfig+0x17e>
 800bb6e:	4b17      	ldr	r3, [pc, #92]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bb70:	689b      	ldr	r3, [r3, #8]
 800bb72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	00db      	lsls	r3, r3, #3
 800bb7c:	4913      	ldr	r1, [pc, #76]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	608b      	str	r3, [r1, #8]
 800bb82:	f000 f82b 	bl	800bbdc <HAL_RCC_GetSysClockFreq>
 800bb86:	4601      	mov	r1, r0
 800bb88:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <HAL_RCC_ClockConfig+0x1c8>)
 800bb8a:	689b      	ldr	r3, [r3, #8]
 800bb8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bb90:	22f0      	movs	r2, #240	; 0xf0
 800bb92:	613a      	str	r2, [r7, #16]
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	fa92 f2a2 	rbit	r2, r2
 800bb9a:	60fa      	str	r2, [r7, #12]
 800bb9c:	68fa      	ldr	r2, [r7, #12]
 800bb9e:	fab2 f282 	clz	r2, r2
 800bba2:	b2d2      	uxtb	r2, r2
 800bba4:	40d3      	lsrs	r3, r2
 800bba6:	4a0a      	ldr	r2, [pc, #40]	; (800bbd0 <HAL_RCC_ClockConfig+0x1cc>)
 800bba8:	5cd3      	ldrb	r3, [r2, r3]
 800bbaa:	fa21 f303 	lsr.w	r3, r1, r3
 800bbae:	4a09      	ldr	r2, [pc, #36]	; (800bbd4 <HAL_RCC_ClockConfig+0x1d0>)
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <HAL_RCC_ClockConfig+0x1d4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fc fc64 	bl	8008484 <HAL_InitTick>
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3718      	adds	r7, #24
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	40023c00 	.word	0x40023c00
 800bbcc:	40023800 	.word	0x40023800
 800bbd0:	080102ac 	.word	0x080102ac
 800bbd4:	20000058 	.word	0x20000058
 800bbd8:	2000005c 	.word	0x2000005c

0800bbdc <HAL_RCC_GetSysClockFreq>:
 800bbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbde:	b085      	sub	sp, #20
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	607b      	str	r3, [r7, #4]
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	60fb      	str	r3, [r7, #12]
 800bbea:	2300      	movs	r3, #0
 800bbec:	603b      	str	r3, [r7, #0]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60bb      	str	r3, [r7, #8]
 800bbf2:	4b50      	ldr	r3, [pc, #320]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x158>)
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	f003 030c 	and.w	r3, r3, #12
 800bbfa:	2b04      	cmp	r3, #4
 800bbfc:	d007      	beq.n	800bc0e <HAL_RCC_GetSysClockFreq+0x32>
 800bbfe:	2b08      	cmp	r3, #8
 800bc00:	d008      	beq.n	800bc14 <HAL_RCC_GetSysClockFreq+0x38>
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f040 808d 	bne.w	800bd22 <HAL_RCC_GetSysClockFreq+0x146>
 800bc08:	4b4b      	ldr	r3, [pc, #300]	; (800bd38 <HAL_RCC_GetSysClockFreq+0x15c>)
 800bc0a:	60bb      	str	r3, [r7, #8]
 800bc0c:	e08c      	b.n	800bd28 <HAL_RCC_GetSysClockFreq+0x14c>
 800bc0e:	4b4b      	ldr	r3, [pc, #300]	; (800bd3c <HAL_RCC_GetSysClockFreq+0x160>)
 800bc10:	60bb      	str	r3, [r7, #8]
 800bc12:	e089      	b.n	800bd28 <HAL_RCC_GetSysClockFreq+0x14c>
 800bc14:	4b47      	ldr	r3, [pc, #284]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc1c:	607b      	str	r3, [r7, #4]
 800bc1e:	4b45      	ldr	r3, [pc, #276]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc20:	685b      	ldr	r3, [r3, #4]
 800bc22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d023      	beq.n	800bc72 <HAL_RCC_GetSysClockFreq+0x96>
 800bc2a:	4b42      	ldr	r3, [pc, #264]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	099b      	lsrs	r3, r3, #6
 800bc30:	f04f 0400 	mov.w	r4, #0
 800bc34:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc38:	f04f 0200 	mov.w	r2, #0
 800bc3c:	ea03 0501 	and.w	r5, r3, r1
 800bc40:	ea04 0602 	and.w	r6, r4, r2
 800bc44:	4a3d      	ldr	r2, [pc, #244]	; (800bd3c <HAL_RCC_GetSysClockFreq+0x160>)
 800bc46:	fb02 f106 	mul.w	r1, r2, r6
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	fb02 f205 	mul.w	r2, r2, r5
 800bc50:	440a      	add	r2, r1
 800bc52:	493a      	ldr	r1, [pc, #232]	; (800bd3c <HAL_RCC_GetSysClockFreq+0x160>)
 800bc54:	fba5 0101 	umull	r0, r1, r5, r1
 800bc58:	1853      	adds	r3, r2, r1
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f04f 0400 	mov.w	r4, #0
 800bc62:	461a      	mov	r2, r3
 800bc64:	4623      	mov	r3, r4
 800bc66:	f7f5 fa8f 	bl	8001188 <__aeabi_uldivmod>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	60fb      	str	r3, [r7, #12]
 800bc70:	e049      	b.n	800bd06 <HAL_RCC_GetSysClockFreq+0x12a>
 800bc72:	4b30      	ldr	r3, [pc, #192]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x158>)
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	099b      	lsrs	r3, r3, #6
 800bc78:	f04f 0400 	mov.w	r4, #0
 800bc7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc80:	f04f 0200 	mov.w	r2, #0
 800bc84:	ea03 0501 	and.w	r5, r3, r1
 800bc88:	ea04 0602 	and.w	r6, r4, r2
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4632      	mov	r2, r6
 800bc90:	f04f 0300 	mov.w	r3, #0
 800bc94:	f04f 0400 	mov.w	r4, #0
 800bc98:	0154      	lsls	r4, r2, #5
 800bc9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bc9e:	014b      	lsls	r3, r1, #5
 800bca0:	4619      	mov	r1, r3
 800bca2:	4622      	mov	r2, r4
 800bca4:	1b49      	subs	r1, r1, r5
 800bca6:	eb62 0206 	sbc.w	r2, r2, r6
 800bcaa:	f04f 0300 	mov.w	r3, #0
 800bcae:	f04f 0400 	mov.w	r4, #0
 800bcb2:	0194      	lsls	r4, r2, #6
 800bcb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bcb8:	018b      	lsls	r3, r1, #6
 800bcba:	1a5b      	subs	r3, r3, r1
 800bcbc:	eb64 0402 	sbc.w	r4, r4, r2
 800bcc0:	f04f 0100 	mov.w	r1, #0
 800bcc4:	f04f 0200 	mov.w	r2, #0
 800bcc8:	00e2      	lsls	r2, r4, #3
 800bcca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bcce:	00d9      	lsls	r1, r3, #3
 800bcd0:	460b      	mov	r3, r1
 800bcd2:	4614      	mov	r4, r2
 800bcd4:	195b      	adds	r3, r3, r5
 800bcd6:	eb44 0406 	adc.w	r4, r4, r6
 800bcda:	f04f 0100 	mov.w	r1, #0
 800bcde:	f04f 0200 	mov.w	r2, #0
 800bce2:	02a2      	lsls	r2, r4, #10
 800bce4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bce8:	0299      	lsls	r1, r3, #10
 800bcea:	460b      	mov	r3, r1
 800bcec:	4614      	mov	r4, r2
 800bcee:	4618      	mov	r0, r3
 800bcf0:	4621      	mov	r1, r4
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f04f 0400 	mov.w	r4, #0
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4623      	mov	r3, r4
 800bcfc:	f7f5 fa44 	bl	8001188 <__aeabi_uldivmod>
 800bd00:	4603      	mov	r3, r0
 800bd02:	460c      	mov	r4, r1
 800bd04:	60fb      	str	r3, [r7, #12]
 800bd06:	4b0b      	ldr	r3, [pc, #44]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x158>)
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	0c1b      	lsrs	r3, r3, #16
 800bd0c:	f003 0303 	and.w	r3, r3, #3
 800bd10:	3301      	adds	r3, #1
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	603b      	str	r3, [r7, #0]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1e:	60bb      	str	r3, [r7, #8]
 800bd20:	e002      	b.n	800bd28 <HAL_RCC_GetSysClockFreq+0x14c>
 800bd22:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <HAL_RCC_GetSysClockFreq+0x15c>)
 800bd24:	60bb      	str	r3, [r7, #8]
 800bd26:	bf00      	nop
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3714      	adds	r7, #20
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd32:	bf00      	nop
 800bd34:	40023800 	.word	0x40023800
 800bd38:	00f42400 	.word	0x00f42400
 800bd3c:	017d7840 	.word	0x017d7840

0800bd40 <HAL_RCC_GetHCLKFreq>:
 800bd40:	b480      	push	{r7}
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	4b02      	ldr	r3, [pc, #8]	; (800bd50 <HAL_RCC_GetHCLKFreq+0x10>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bc80      	pop	{r7}
 800bd4e:	4770      	bx	lr
 800bd50:	20000058 	.word	0x20000058

0800bd54 <HAL_RCC_GetPCLK1Freq>:
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b082      	sub	sp, #8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	f7ff fff1 	bl	800bd40 <HAL_RCC_GetHCLKFreq>
 800bd5e:	4601      	mov	r1, r0
 800bd60:	4b0b      	ldr	r3, [pc, #44]	; (800bd90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800bd68:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800bd6c:	607a      	str	r2, [r7, #4]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	fa92 f2a2 	rbit	r2, r2
 800bd74:	603a      	str	r2, [r7, #0]
 800bd76:	683a      	ldr	r2, [r7, #0]
 800bd78:	fab2 f282 	clz	r2, r2
 800bd7c:	b2d2      	uxtb	r2, r2
 800bd7e:	40d3      	lsrs	r3, r2
 800bd80:	4a04      	ldr	r2, [pc, #16]	; (800bd94 <HAL_RCC_GetPCLK1Freq+0x40>)
 800bd82:	5cd3      	ldrb	r3, [r2, r3]
 800bd84:	fa21 f303 	lsr.w	r3, r1, r3
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	40023800 	.word	0x40023800
 800bd94:	080102bc 	.word	0x080102bc

0800bd98 <HAL_RCC_GetPCLK2Freq>:
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	f7ff ffcf 	bl	800bd40 <HAL_RCC_GetHCLKFreq>
 800bda2:	4601      	mov	r1, r0
 800bda4:	4b0b      	ldr	r3, [pc, #44]	; (800bdd4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bdac:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800bdb0:	607a      	str	r2, [r7, #4]
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	fa92 f2a2 	rbit	r2, r2
 800bdb8:	603a      	str	r2, [r7, #0]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	fab2 f282 	clz	r2, r2
 800bdc0:	b2d2      	uxtb	r2, r2
 800bdc2:	40d3      	lsrs	r3, r2
 800bdc4:	4a04      	ldr	r2, [pc, #16]	; (800bdd8 <HAL_RCC_GetPCLK2Freq+0x40>)
 800bdc6:	5cd3      	ldrb	r3, [r2, r3]
 800bdc8:	fa21 f303 	lsr.w	r3, r1, r3
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	40023800 	.word	0x40023800
 800bdd8:	080102bc 	.word	0x080102bc

0800bddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b082      	sub	sp, #8
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d101      	bne.n	800bdee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e01d      	b.n	800be2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d106      	bne.n	800be08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7fc f95e 	bl	80080c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681a      	ldr	r2, [r3, #0]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3304      	adds	r3, #4
 800be18:	4619      	mov	r1, r3
 800be1a:	4610      	mov	r0, r2
 800be1c:	f000 fb74 	bl	800c508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2201      	movs	r2, #1
 800be24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3708      	adds	r7, #8
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}

0800be32 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800be32:	b480      	push	{r7}
 800be34:	b085      	sub	sp, #20
 800be36:	af00      	add	r7, sp, #0
 800be38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2202      	movs	r2, #2
 800be3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	f003 0307 	and.w	r3, r3, #7
 800be4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	2b06      	cmp	r3, #6
 800be52:	d007      	beq.n	800be64 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0201 	orr.w	r2, r2, #1
 800be62:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3714      	adds	r7, #20
 800be72:	46bd      	mov	sp, r7
 800be74:	bc80      	pop	{r7}
 800be76:	4770      	bx	lr

0800be78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f042 0201 	orr.w	r2, r2, #1
 800be8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	2b06      	cmp	r3, #6
 800bea0:	d007      	beq.n	800beb2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f042 0201 	orr.w	r2, r2, #1
 800beb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	bc80      	pop	{r7}
 800bebc:	4770      	bx	lr

0800bebe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bebe:	b580      	push	{r7, lr}
 800bec0:	b082      	sub	sp, #8
 800bec2:	af00      	add	r7, sp, #0
 800bec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d101      	bne.n	800bed0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e01d      	b.n	800bf0c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d106      	bne.n	800beea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2200      	movs	r2, #0
 800bee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f815 	bl	800bf14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2202      	movs	r2, #2
 800beee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	3304      	adds	r3, #4
 800befa:	4619      	mov	r1, r3
 800befc:	4610      	mov	r0, r2
 800befe:	f000 fb03 	bl	800c508 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2201      	movs	r2, #1
 800bf06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bf1c:	bf00      	nop
 800bf1e:	370c      	adds	r7, #12
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bc80      	pop	{r7}
 800bf24:	4770      	bx	lr
	...

0800bf28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2201      	movs	r2, #1
 800bf38:	6839      	ldr	r1, [r7, #0]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 fdc4 	bl	800cac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a15      	ldr	r2, [pc, #84]	; (800bf9c <HAL_TIM_PWM_Start+0x74>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d004      	beq.n	800bf54 <HAL_TIM_PWM_Start+0x2c>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a14      	ldr	r2, [pc, #80]	; (800bfa0 <HAL_TIM_PWM_Start+0x78>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d101      	bne.n	800bf58 <HAL_TIM_PWM_Start+0x30>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e000      	b.n	800bf5a <HAL_TIM_PWM_Start+0x32>
 800bf58:	2300      	movs	r3, #0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d007      	beq.n	800bf6e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f003 0307 	and.w	r3, r3, #7
 800bf78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2b06      	cmp	r3, #6
 800bf7e:	d007      	beq.n	800bf90 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	681a      	ldr	r2, [r3, #0]
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f042 0201 	orr.w	r2, r2, #1
 800bf8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	40010000 	.word	0x40010000
 800bfa0:	40010400 	.word	0x40010400

0800bfa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b082      	sub	sp, #8
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	691b      	ldr	r3, [r3, #16]
 800bfb2:	f003 0302 	and.w	r3, r3, #2
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d122      	bne.n	800c000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	68db      	ldr	r3, [r3, #12]
 800bfc0:	f003 0302 	and.w	r3, r3, #2
 800bfc4:	2b02      	cmp	r3, #2
 800bfc6:	d11b      	bne.n	800c000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f06f 0202 	mvn.w	r2, #2
 800bfd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	f003 0303 	and.w	r3, r3, #3
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d003      	beq.n	800bfee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fa73 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800bfec:	e005      	b.n	800bffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fa66 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f000 fa75 	bl	800c4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2200      	movs	r2, #0
 800bffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	691b      	ldr	r3, [r3, #16]
 800c006:	f003 0304 	and.w	r3, r3, #4
 800c00a:	2b04      	cmp	r3, #4
 800c00c:	d122      	bne.n	800c054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	68db      	ldr	r3, [r3, #12]
 800c014:	f003 0304 	and.w	r3, r3, #4
 800c018:	2b04      	cmp	r3, #4
 800c01a:	d11b      	bne.n	800c054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f06f 0204 	mvn.w	r2, #4
 800c024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2202      	movs	r2, #2
 800c02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	699b      	ldr	r3, [r3, #24]
 800c032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	f000 fa49 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800c040:	e005      	b.n	800c04e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fa3c 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fa4b 	bl	800c4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	f003 0308 	and.w	r3, r3, #8
 800c05e:	2b08      	cmp	r3, #8
 800c060:	d122      	bne.n	800c0a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	f003 0308 	and.w	r3, r3, #8
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d11b      	bne.n	800c0a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f06f 0208 	mvn.w	r2, #8
 800c078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2204      	movs	r2, #4
 800c07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	69db      	ldr	r3, [r3, #28]
 800c086:	f003 0303 	and.w	r3, r3, #3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d003      	beq.n	800c096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fa1f 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800c094:	e005      	b.n	800c0a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fa12 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f000 fa21 	bl	800c4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	f003 0310 	and.w	r3, r3, #16
 800c0b2:	2b10      	cmp	r3, #16
 800c0b4:	d122      	bne.n	800c0fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68db      	ldr	r3, [r3, #12]
 800c0bc:	f003 0310 	and.w	r3, r3, #16
 800c0c0:	2b10      	cmp	r3, #16
 800c0c2:	d11b      	bne.n	800c0fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f06f 0210 	mvn.w	r2, #16
 800c0cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2208      	movs	r2, #8
 800c0d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	69db      	ldr	r3, [r3, #28]
 800c0da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d003      	beq.n	800c0ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f9f5 	bl	800c4d2 <HAL_TIM_IC_CaptureCallback>
 800c0e8:	e005      	b.n	800c0f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f9e8 	bl	800c4c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 f9f7 	bl	800c4e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	691b      	ldr	r3, [r3, #16]
 800c102:	f003 0301 	and.w	r3, r3, #1
 800c106:	2b01      	cmp	r3, #1
 800c108:	d10e      	bne.n	800c128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	2b01      	cmp	r3, #1
 800c116:	d107      	bne.n	800c128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f06f 0201 	mvn.w	r2, #1
 800c120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f9c3 	bl	800c4ae <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c132:	2b80      	cmp	r3, #128	; 0x80
 800c134:	d10e      	bne.n	800c154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c140:	2b80      	cmp	r3, #128	; 0x80
 800c142:	d107      	bne.n	800c154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c14c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fd7c 	bl	800cc4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c15e:	2b40      	cmp	r3, #64	; 0x40
 800c160:	d10e      	bne.n	800c180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c16c:	2b40      	cmp	r3, #64	; 0x40
 800c16e:	d107      	bne.n	800c180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f9bb 	bl	800c4f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	f003 0320 	and.w	r3, r3, #32
 800c18a:	2b20      	cmp	r3, #32
 800c18c:	d10e      	bne.n	800c1ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	f003 0320 	and.w	r3, r3, #32
 800c198:	2b20      	cmp	r3, #32
 800c19a:	d107      	bne.n	800c1ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f06f 0220 	mvn.w	r2, #32
 800c1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 fd47 	bl	800cc3a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c1ac:	bf00      	nop
 800c1ae:	3708      	adds	r7, #8
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	bd80      	pop	{r7, pc}

0800c1b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	60f8      	str	r0, [r7, #12]
 800c1bc:	60b9      	str	r1, [r7, #8]
 800c1be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d101      	bne.n	800c1ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c1ca:	2302      	movs	r3, #2
 800c1cc:	e0b4      	b.n	800c338 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b0c      	cmp	r3, #12
 800c1e2:	f200 809f 	bhi.w	800c324 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c1e6:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c1e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ec:	0800c221 	.word	0x0800c221
 800c1f0:	0800c325 	.word	0x0800c325
 800c1f4:	0800c325 	.word	0x0800c325
 800c1f8:	0800c325 	.word	0x0800c325
 800c1fc:	0800c261 	.word	0x0800c261
 800c200:	0800c325 	.word	0x0800c325
 800c204:	0800c325 	.word	0x0800c325
 800c208:	0800c325 	.word	0x0800c325
 800c20c:	0800c2a3 	.word	0x0800c2a3
 800c210:	0800c325 	.word	0x0800c325
 800c214:	0800c325 	.word	0x0800c325
 800c218:	0800c325 	.word	0x0800c325
 800c21c:	0800c2e3 	.word	0x0800c2e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fa0c 	bl	800c644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	699a      	ldr	r2, [r3, #24]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0208 	orr.w	r2, r2, #8
 800c23a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	699a      	ldr	r2, [r3, #24]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0204 	bic.w	r2, r2, #4
 800c24a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	6999      	ldr	r1, [r3, #24]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	691a      	ldr	r2, [r3, #16]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	619a      	str	r2, [r3, #24]
      break;
 800c25e:	e062      	b.n	800c326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	68b9      	ldr	r1, [r7, #8]
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fa5c 	bl	800c724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	699a      	ldr	r2, [r3, #24]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699a      	ldr	r2, [r3, #24]
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	6999      	ldr	r1, [r3, #24]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	021a      	lsls	r2, r3, #8
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	430a      	orrs	r2, r1
 800c29e:	619a      	str	r2, [r3, #24]
      break;
 800c2a0:	e041      	b.n	800c326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68b9      	ldr	r1, [r7, #8]
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f000 faaf 	bl	800c80c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	69da      	ldr	r2, [r3, #28]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f042 0208 	orr.w	r2, r2, #8
 800c2bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	69da      	ldr	r2, [r3, #28]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 0204 	bic.w	r2, r2, #4
 800c2cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	69d9      	ldr	r1, [r3, #28]
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	691a      	ldr	r2, [r3, #16]
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	61da      	str	r2, [r3, #28]
      break;
 800c2e0:	e021      	b.n	800c326 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	68b9      	ldr	r1, [r7, #8]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fb03 	bl	800c8f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	69da      	ldr	r2, [r3, #28]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	69d9      	ldr	r1, [r3, #28]
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	021a      	lsls	r2, r3, #8
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	61da      	str	r2, [r3, #28]
      break;
 800c322:	e000      	b.n	800c326 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c324:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2201      	movs	r2, #1
 800c32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c336:	2300      	movs	r3, #0
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c350:	2b01      	cmp	r3, #1
 800c352:	d101      	bne.n	800c358 <HAL_TIM_ConfigClockSource+0x18>
 800c354:	2302      	movs	r3, #2
 800c356:	e0a6      	b.n	800c4a6 <HAL_TIM_ConfigClockSource+0x166>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2202      	movs	r2, #2
 800c364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c37e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b40      	cmp	r3, #64	; 0x40
 800c38e:	d067      	beq.n	800c460 <HAL_TIM_ConfigClockSource+0x120>
 800c390:	2b40      	cmp	r3, #64	; 0x40
 800c392:	d80b      	bhi.n	800c3ac <HAL_TIM_ConfigClockSource+0x6c>
 800c394:	2b10      	cmp	r3, #16
 800c396:	d073      	beq.n	800c480 <HAL_TIM_ConfigClockSource+0x140>
 800c398:	2b10      	cmp	r3, #16
 800c39a:	d802      	bhi.n	800c3a2 <HAL_TIM_ConfigClockSource+0x62>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d06f      	beq.n	800c480 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c3a0:	e078      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c3a2:	2b20      	cmp	r3, #32
 800c3a4:	d06c      	beq.n	800c480 <HAL_TIM_ConfigClockSource+0x140>
 800c3a6:	2b30      	cmp	r3, #48	; 0x30
 800c3a8:	d06a      	beq.n	800c480 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c3aa:	e073      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c3ac:	2b70      	cmp	r3, #112	; 0x70
 800c3ae:	d00d      	beq.n	800c3cc <HAL_TIM_ConfigClockSource+0x8c>
 800c3b0:	2b70      	cmp	r3, #112	; 0x70
 800c3b2:	d804      	bhi.n	800c3be <HAL_TIM_ConfigClockSource+0x7e>
 800c3b4:	2b50      	cmp	r3, #80	; 0x50
 800c3b6:	d033      	beq.n	800c420 <HAL_TIM_ConfigClockSource+0xe0>
 800c3b8:	2b60      	cmp	r3, #96	; 0x60
 800c3ba:	d041      	beq.n	800c440 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c3bc:	e06a      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3c2:	d066      	beq.n	800c492 <HAL_TIM_ConfigClockSource+0x152>
 800c3c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c3c8:	d017      	beq.n	800c3fa <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c3ca:	e063      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6818      	ldr	r0, [r3, #0]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	6899      	ldr	r1, [r3, #8]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685a      	ldr	r2, [r3, #4]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	68db      	ldr	r3, [r3, #12]
 800c3dc:	f000 fb55 	bl	800ca8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	689b      	ldr	r3, [r3, #8]
 800c3e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	609a      	str	r2, [r3, #8]
      break;
 800c3f8:	e04c      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6818      	ldr	r0, [r3, #0]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	6899      	ldr	r1, [r3, #8]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	685a      	ldr	r2, [r3, #4]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	f000 fb3e 	bl	800ca8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	689a      	ldr	r2, [r3, #8]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c41c:	609a      	str	r2, [r3, #8]
      break;
 800c41e:	e039      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6818      	ldr	r0, [r3, #0]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	6859      	ldr	r1, [r3, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	461a      	mov	r2, r3
 800c42e:	f000 fab5 	bl	800c99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2150      	movs	r1, #80	; 0x50
 800c438:	4618      	mov	r0, r3
 800c43a:	f000 fb0c 	bl	800ca56 <TIM_ITRx_SetConfig>
      break;
 800c43e:	e029      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6818      	ldr	r0, [r3, #0]
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	6859      	ldr	r1, [r3, #4]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	461a      	mov	r2, r3
 800c44e:	f000 fad3 	bl	800c9f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	2160      	movs	r1, #96	; 0x60
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fafc 	bl	800ca56 <TIM_ITRx_SetConfig>
      break;
 800c45e:	e019      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6818      	ldr	r0, [r3, #0]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	6859      	ldr	r1, [r3, #4]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	461a      	mov	r2, r3
 800c46e:	f000 fa95 	bl	800c99c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2140      	movs	r1, #64	; 0x40
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 faec 	bl	800ca56 <TIM_ITRx_SetConfig>
      break;
 800c47e:	e009      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4619      	mov	r1, r3
 800c48a:	4610      	mov	r0, r2
 800c48c:	f000 fae3 	bl	800ca56 <TIM_ITRx_SetConfig>
      break;
 800c490:	e000      	b.n	800c494 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800c492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4a4:	2300      	movs	r3, #0
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3710      	adds	r7, #16
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4ae:	b480      	push	{r7}
 800c4b0:	b083      	sub	sp, #12
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c4b6:	bf00      	nop
 800c4b8:	370c      	adds	r7, #12
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bc80      	pop	{r7}
 800c4be:	4770      	bx	lr

0800c4c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bc80      	pop	{r7}
 800c4d0:	4770      	bx	lr

0800c4d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4d2:	b480      	push	{r7}
 800c4d4:	b083      	sub	sp, #12
 800c4d6:	af00      	add	r7, sp, #0
 800c4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4da:	bf00      	nop
 800c4dc:	370c      	adds	r7, #12
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bc80      	pop	{r7}
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bc80      	pop	{r7}
 800c4f4:	4770      	bx	lr

0800c4f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4f6:	b480      	push	{r7}
 800c4f8:	b083      	sub	sp, #12
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4fe:	bf00      	nop
 800c500:	370c      	adds	r7, #12
 800c502:	46bd      	mov	sp, r7
 800c504:	bc80      	pop	{r7}
 800c506:	4770      	bx	lr

0800c508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a3f      	ldr	r2, [pc, #252]	; (800c618 <TIM_Base_SetConfig+0x110>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d013      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c526:	d00f      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a3c      	ldr	r2, [pc, #240]	; (800c61c <TIM_Base_SetConfig+0x114>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d00b      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a3b      	ldr	r2, [pc, #236]	; (800c620 <TIM_Base_SetConfig+0x118>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d007      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a3a      	ldr	r2, [pc, #232]	; (800c624 <TIM_Base_SetConfig+0x11c>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d003      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a39      	ldr	r2, [pc, #228]	; (800c628 <TIM_Base_SetConfig+0x120>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d108      	bne.n	800c55a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a2e      	ldr	r2, [pc, #184]	; (800c618 <TIM_Base_SetConfig+0x110>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d02b      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c568:	d027      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a2b      	ldr	r2, [pc, #172]	; (800c61c <TIM_Base_SetConfig+0x114>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d023      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a2a      	ldr	r2, [pc, #168]	; (800c620 <TIM_Base_SetConfig+0x118>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d01f      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a29      	ldr	r2, [pc, #164]	; (800c624 <TIM_Base_SetConfig+0x11c>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d01b      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a28      	ldr	r2, [pc, #160]	; (800c628 <TIM_Base_SetConfig+0x120>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d017      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a27      	ldr	r2, [pc, #156]	; (800c62c <TIM_Base_SetConfig+0x124>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d013      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a26      	ldr	r2, [pc, #152]	; (800c630 <TIM_Base_SetConfig+0x128>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d00f      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a25      	ldr	r2, [pc, #148]	; (800c634 <TIM_Base_SetConfig+0x12c>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d00b      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a24      	ldr	r2, [pc, #144]	; (800c638 <TIM_Base_SetConfig+0x130>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d007      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a23      	ldr	r2, [pc, #140]	; (800c63c <TIM_Base_SetConfig+0x134>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d003      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a22      	ldr	r2, [pc, #136]	; (800c640 <TIM_Base_SetConfig+0x138>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d108      	bne.n	800c5cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a09      	ldr	r2, [pc, #36]	; (800c618 <TIM_Base_SetConfig+0x110>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d003      	beq.n	800c600 <TIM_Base_SetConfig+0xf8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a0b      	ldr	r2, [pc, #44]	; (800c628 <TIM_Base_SetConfig+0x120>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d103      	bne.n	800c608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	691a      	ldr	r2, [r3, #16]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	615a      	str	r2, [r3, #20]
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	bc80      	pop	{r7}
 800c616:	4770      	bx	lr
 800c618:	40010000 	.word	0x40010000
 800c61c:	40000400 	.word	0x40000400
 800c620:	40000800 	.word	0x40000800
 800c624:	40000c00 	.word	0x40000c00
 800c628:	40010400 	.word	0x40010400
 800c62c:	40014000 	.word	0x40014000
 800c630:	40014400 	.word	0x40014400
 800c634:	40014800 	.word	0x40014800
 800c638:	40001800 	.word	0x40001800
 800c63c:	40001c00 	.word	0x40001c00
 800c640:	40002000 	.word	0x40002000

0800c644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	f023 0201 	bic.w	r2, r3, #1
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f023 0303 	bic.w	r3, r3, #3
 800c67a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4313      	orrs	r3, r2
 800c684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	f023 0302 	bic.w	r3, r3, #2
 800c68c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	697a      	ldr	r2, [r7, #20]
 800c694:	4313      	orrs	r3, r2
 800c696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	4a20      	ldr	r2, [pc, #128]	; (800c71c <TIM_OC1_SetConfig+0xd8>)
 800c69c:	4293      	cmp	r3, r2
 800c69e:	d003      	beq.n	800c6a8 <TIM_OC1_SetConfig+0x64>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a1f      	ldr	r2, [pc, #124]	; (800c720 <TIM_OC1_SetConfig+0xdc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d10c      	bne.n	800c6c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	f023 0308 	bic.w	r3, r3, #8
 800c6ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	697a      	ldr	r2, [r7, #20]
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f023 0304 	bic.w	r3, r3, #4
 800c6c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4a15      	ldr	r2, [pc, #84]	; (800c71c <TIM_OC1_SetConfig+0xd8>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d003      	beq.n	800c6d2 <TIM_OC1_SetConfig+0x8e>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	4a14      	ldr	r2, [pc, #80]	; (800c720 <TIM_OC1_SetConfig+0xdc>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d111      	bne.n	800c6f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	695b      	ldr	r3, [r3, #20]
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	699b      	ldr	r3, [r3, #24]
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	685a      	ldr	r2, [r3, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	621a      	str	r2, [r3, #32]
}
 800c710:	bf00      	nop
 800c712:	371c      	adds	r7, #28
 800c714:	46bd      	mov	sp, r7
 800c716:	bc80      	pop	{r7}
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop
 800c71c:	40010000 	.word	0x40010000
 800c720:	40010400 	.word	0x40010400

0800c724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c724:	b480      	push	{r7}
 800c726:	b087      	sub	sp, #28
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	f023 0210 	bic.w	r2, r3, #16
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	021b      	lsls	r3, r3, #8
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	4313      	orrs	r3, r2
 800c766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f023 0320 	bic.w	r3, r3, #32
 800c76e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	011b      	lsls	r3, r3, #4
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	4313      	orrs	r3, r2
 800c77a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a21      	ldr	r2, [pc, #132]	; (800c804 <TIM_OC2_SetConfig+0xe0>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d003      	beq.n	800c78c <TIM_OC2_SetConfig+0x68>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	4a20      	ldr	r2, [pc, #128]	; (800c808 <TIM_OC2_SetConfig+0xe4>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	d10d      	bne.n	800c7a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	011b      	lsls	r3, r3, #4
 800c79a:	697a      	ldr	r2, [r7, #20]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a16      	ldr	r2, [pc, #88]	; (800c804 <TIM_OC2_SetConfig+0xe0>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d003      	beq.n	800c7b8 <TIM_OC2_SetConfig+0x94>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a15      	ldr	r2, [pc, #84]	; (800c808 <TIM_OC2_SetConfig+0xe4>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d113      	bne.n	800c7e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	695b      	ldr	r3, [r3, #20]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	693a      	ldr	r2, [r7, #16]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	693a      	ldr	r2, [r7, #16]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	693a      	ldr	r2, [r7, #16]
 800c7e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	685a      	ldr	r2, [r3, #4]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	621a      	str	r2, [r3, #32]
}
 800c7fa:	bf00      	nop
 800c7fc:	371c      	adds	r7, #28
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bc80      	pop	{r7}
 800c802:	4770      	bx	lr
 800c804:	40010000 	.word	0x40010000
 800c808:	40010400 	.word	0x40010400

0800c80c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c80c:	b480      	push	{r7}
 800c80e:	b087      	sub	sp, #28
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
 800c814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f023 0303 	bic.w	r3, r3, #3
 800c842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	4313      	orrs	r3, r2
 800c84c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	021b      	lsls	r3, r3, #8
 800c85c:	697a      	ldr	r2, [r7, #20]
 800c85e:	4313      	orrs	r3, r2
 800c860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	4a21      	ldr	r2, [pc, #132]	; (800c8ec <TIM_OC3_SetConfig+0xe0>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d003      	beq.n	800c872 <TIM_OC3_SetConfig+0x66>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a20      	ldr	r2, [pc, #128]	; (800c8f0 <TIM_OC3_SetConfig+0xe4>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d10d      	bne.n	800c88e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	021b      	lsls	r3, r3, #8
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4313      	orrs	r3, r2
 800c884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c886:	697b      	ldr	r3, [r7, #20]
 800c888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c88c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a16      	ldr	r2, [pc, #88]	; (800c8ec <TIM_OC3_SetConfig+0xe0>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d003      	beq.n	800c89e <TIM_OC3_SetConfig+0x92>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a15      	ldr	r2, [pc, #84]	; (800c8f0 <TIM_OC3_SetConfig+0xe4>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d113      	bne.n	800c8c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c8ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	695b      	ldr	r3, [r3, #20]
 800c8b2:	011b      	lsls	r3, r3, #4
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	011b      	lsls	r3, r3, #4
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	693a      	ldr	r2, [r7, #16]
 800c8ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	621a      	str	r2, [r3, #32]
}
 800c8e0:	bf00      	nop
 800c8e2:	371c      	adds	r7, #28
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bc80      	pop	{r7}
 800c8e8:	4770      	bx	lr
 800c8ea:	bf00      	nop
 800c8ec:	40010000 	.word	0x40010000
 800c8f0:	40010400 	.word	0x40010400

0800c8f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6a1b      	ldr	r3, [r3, #32]
 800c902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a1b      	ldr	r3, [r3, #32]
 800c90e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	685b      	ldr	r3, [r3, #4]
 800c914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	69db      	ldr	r3, [r3, #28]
 800c91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c92a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	021b      	lsls	r3, r3, #8
 800c932:	68fa      	ldr	r2, [r7, #12]
 800c934:	4313      	orrs	r3, r2
 800c936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c93e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	689b      	ldr	r3, [r3, #8]
 800c944:	031b      	lsls	r3, r3, #12
 800c946:	693a      	ldr	r2, [r7, #16]
 800c948:	4313      	orrs	r3, r2
 800c94a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	4a11      	ldr	r2, [pc, #68]	; (800c994 <TIM_OC4_SetConfig+0xa0>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d003      	beq.n	800c95c <TIM_OC4_SetConfig+0x68>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4a10      	ldr	r2, [pc, #64]	; (800c998 <TIM_OC4_SetConfig+0xa4>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d109      	bne.n	800c970 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	695b      	ldr	r3, [r3, #20]
 800c968:	019b      	lsls	r3, r3, #6
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	4313      	orrs	r3, r2
 800c96e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68fa      	ldr	r2, [r7, #12]
 800c97a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	685a      	ldr	r2, [r3, #4]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	693a      	ldr	r2, [r7, #16]
 800c988:	621a      	str	r2, [r3, #32]
}
 800c98a:	bf00      	nop
 800c98c:	371c      	adds	r7, #28
 800c98e:	46bd      	mov	sp, r7
 800c990:	bc80      	pop	{r7}
 800c992:	4770      	bx	lr
 800c994:	40010000 	.word	0x40010000
 800c998:	40010400 	.word	0x40010400

0800c99c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c99c:	b480      	push	{r7}
 800c99e:	b087      	sub	sp, #28
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a1b      	ldr	r3, [r3, #32]
 800c9ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6a1b      	ldr	r3, [r3, #32]
 800c9b2:	f023 0201 	bic.w	r2, r3, #1
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	699b      	ldr	r3, [r3, #24]
 800c9be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	011b      	lsls	r3, r3, #4
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f023 030a 	bic.w	r3, r3, #10
 800c9d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	621a      	str	r2, [r3, #32]
}
 800c9ee:	bf00      	nop
 800c9f0:	371c      	adds	r7, #28
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bc80      	pop	{r7}
 800c9f6:	4770      	bx	lr

0800c9f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	f023 0210 	bic.w	r2, r3, #16
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	699b      	ldr	r3, [r3, #24]
 800ca14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	031b      	lsls	r3, r3, #12
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	011b      	lsls	r3, r3, #4
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	697a      	ldr	r2, [r7, #20]
 800ca44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	693a      	ldr	r2, [r7, #16]
 800ca4a:	621a      	str	r2, [r3, #32]
}
 800ca4c:	bf00      	nop
 800ca4e:	371c      	adds	r7, #28
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bc80      	pop	{r7}
 800ca54:	4770      	bx	lr

0800ca56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b085      	sub	sp, #20
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	4313      	orrs	r3, r2
 800ca74:	f043 0307 	orr.w	r3, r3, #7
 800ca78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	609a      	str	r2, [r3, #8]
}
 800ca80:	bf00      	nop
 800ca82:	3714      	adds	r7, #20
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bc80      	pop	{r7}
 800ca88:	4770      	bx	lr

0800ca8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca8a:	b480      	push	{r7}
 800ca8c:	b087      	sub	sp, #28
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	60f8      	str	r0, [r7, #12]
 800ca92:	60b9      	str	r1, [r7, #8]
 800ca94:	607a      	str	r2, [r7, #4]
 800ca96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800caa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	021a      	lsls	r2, r3, #8
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	431a      	orrs	r2, r3
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	4313      	orrs	r3, r2
 800cab2:	697a      	ldr	r2, [r7, #20]
 800cab4:	4313      	orrs	r3, r2
 800cab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	697a      	ldr	r2, [r7, #20]
 800cabc:	609a      	str	r2, [r3, #8]
}
 800cabe:	bf00      	nop
 800cac0:	371c      	adds	r7, #28
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bc80      	pop	{r7}
 800cac6:	4770      	bx	lr

0800cac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cac8:	b480      	push	{r7}
 800caca:	b087      	sub	sp, #28
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	f003 031f 	and.w	r3, r3, #31
 800cada:	2201      	movs	r2, #1
 800cadc:	fa02 f303 	lsl.w	r3, r2, r3
 800cae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	6a1a      	ldr	r2, [r3, #32]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	43db      	mvns	r3, r3
 800caea:	401a      	ands	r2, r3
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	6a1a      	ldr	r2, [r3, #32]
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	f003 031f 	and.w	r3, r3, #31
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	fa01 f303 	lsl.w	r3, r1, r3
 800cb00:	431a      	orrs	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	621a      	str	r2, [r3, #32]
}
 800cb06:	bf00      	nop
 800cb08:	371c      	adds	r7, #28
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bc80      	pop	{r7}
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d101      	bne.n	800cb28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb24:	2302      	movs	r3, #2
 800cb26:	e032      	b.n	800cb8e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2202      	movs	r2, #2
 800cb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	685b      	ldr	r3, [r3, #4]
 800cb3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	68fa      	ldr	r2, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800cb5a:	68bb      	ldr	r3, [r7, #8]
 800cb5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cb60:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2200      	movs	r2, #0
 800cb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bc80      	pop	{r7}
 800cb96:	4770      	bx	lr

0800cb98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cba2:	2300      	movs	r3, #0
 800cba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d101      	bne.n	800cbb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cbb0:	2302      	movs	r3, #2
 800cbb2:	e03d      	b.n	800cc30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	691b      	ldr	r3, [r3, #16]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	69db      	ldr	r3, [r3, #28]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bc80      	pop	{r7}
 800cc38:	4770      	bx	lr

0800cc3a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b083      	sub	sp, #12
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc42:	bf00      	nop
 800cc44:	370c      	adds	r7, #12
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bc80      	pop	{r7}
 800cc4a:	4770      	bx	lr

0800cc4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc54:	bf00      	nop
 800cc56:	370c      	adds	r7, #12
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bc80      	pop	{r7}
 800cc5c:	4770      	bx	lr

0800cc5e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b082      	sub	sp, #8
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d101      	bne.n	800cc70 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e03f      	b.n	800ccf0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d106      	bne.n	800cc8a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7fb fb23 	bl	80082d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2224      	movs	r2, #36	; 0x24
 800cc8e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	68da      	ldr	r2, [r3, #12]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cca0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f000 faa6 	bl	800d1f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	691a      	ldr	r2, [r3, #16]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccb6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	695a      	ldr	r2, [r3, #20]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccc6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	68da      	ldr	r2, [r3, #12]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ccd6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2220      	movs	r2, #32
 800cce2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2220      	movs	r2, #32
 800ccea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	4613      	mov	r3, r2
 800cd04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b20      	cmp	r3, #32
 800cd10:	d130      	bne.n	800cd74 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd12:	68bb      	ldr	r3, [r7, #8]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d002      	beq.n	800cd1e <HAL_UART_Transmit_IT+0x26>
 800cd18:	88fb      	ldrh	r3, [r7, #6]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e029      	b.n	800cd76 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d101      	bne.n	800cd30 <HAL_UART_Transmit_IT+0x38>
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	e022      	b.n	800cd76 <HAL_UART_Transmit_IT+0x7e>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2201      	movs	r2, #1
 800cd34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	68ba      	ldr	r2, [r7, #8]
 800cd3c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	88fa      	ldrh	r2, [r7, #6]
 800cd42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	88fa      	ldrh	r2, [r7, #6]
 800cd48:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2221      	movs	r2, #33	; 0x21
 800cd54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68da      	ldr	r2, [r3, #12]
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd6e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	e000      	b.n	800cd76 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800cd74:	2302      	movs	r3, #2
  }
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3714      	adds	r7, #20
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bc80      	pop	{r7}
 800cd7e:	4770      	bx	lr

0800cd80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b088      	sub	sp, #32
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	68db      	ldr	r3, [r3, #12]
 800cd96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	695b      	ldr	r3, [r3, #20]
 800cd9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800cda0:	2300      	movs	r3, #0
 800cda2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800cda4:	2300      	movs	r3, #0
 800cda6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	f003 030f 	and.w	r3, r3, #15
 800cdae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d10d      	bne.n	800cdd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cdb6:	69fb      	ldr	r3, [r7, #28]
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d008      	beq.n	800cdd2 <HAL_UART_IRQHandler+0x52>
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	f003 0320 	and.w	r3, r3, #32
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d003      	beq.n	800cdd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 f991 	bl	800d0f2 <UART_Receive_IT>
      return;
 800cdd0:	e0d1      	b.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 80b0 	beq.w	800cf3a <HAL_UART_IRQHandler+0x1ba>
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	f003 0301 	and.w	r3, r3, #1
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d105      	bne.n	800cdf0 <HAL_UART_IRQHandler+0x70>
 800cde4:	69bb      	ldr	r3, [r7, #24]
 800cde6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f000 80a5 	beq.w	800cf3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00a      	beq.n	800ce10 <HAL_UART_IRQHandler+0x90>
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d005      	beq.n	800ce10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce08:	f043 0201 	orr.w	r2, r3, #1
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	f003 0304 	and.w	r3, r3, #4
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d00a      	beq.n	800ce30 <HAL_UART_IRQHandler+0xb0>
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	f003 0301 	and.w	r3, r3, #1
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d005      	beq.n	800ce30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce28:	f043 0202 	orr.w	r2, r3, #2
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	f003 0302 	and.w	r3, r3, #2
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <HAL_UART_IRQHandler+0xd0>
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d005      	beq.n	800ce50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce48:	f043 0204 	orr.w	r2, r3, #4
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	f003 0308 	and.w	r3, r3, #8
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00f      	beq.n	800ce7a <HAL_UART_IRQHandler+0xfa>
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	f003 0320 	and.w	r3, r3, #32
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d104      	bne.n	800ce6e <HAL_UART_IRQHandler+0xee>
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d005      	beq.n	800ce7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce72:	f043 0208 	orr.w	r2, r3, #8
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d078      	beq.n	800cf74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d007      	beq.n	800ce9c <HAL_UART_IRQHandler+0x11c>
 800ce8c:	69bb      	ldr	r3, [r7, #24]
 800ce8e:	f003 0320 	and.w	r3, r3, #32
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d002      	beq.n	800ce9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f92b 	bl	800d0f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	695b      	ldr	r3, [r3, #20]
 800cea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea6:	2b40      	cmp	r3, #64	; 0x40
 800cea8:	bf0c      	ite	eq
 800ceaa:	2301      	moveq	r3, #1
 800ceac:	2300      	movne	r3, #0
 800ceae:	b2db      	uxtb	r3, r3
 800ceb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceb6:	f003 0308 	and.w	r3, r3, #8
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d102      	bne.n	800cec4 <HAL_UART_IRQHandler+0x144>
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d031      	beq.n	800cf28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f000 f876 	bl	800cfb6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	695b      	ldr	r3, [r3, #20]
 800ced0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ced4:	2b40      	cmp	r3, #64	; 0x40
 800ced6:	d123      	bne.n	800cf20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	695a      	ldr	r2, [r3, #20]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cee6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d013      	beq.n	800cf18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef4:	4a21      	ldr	r2, [pc, #132]	; (800cf7c <HAL_UART_IRQHandler+0x1fc>)
 800cef6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fc ff67 	bl	8009dd0 <HAL_DMA_Abort_IT>
 800cf02:	4603      	mov	r3, r0
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d016      	beq.n	800cf36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cf12:	4610      	mov	r0, r2
 800cf14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf16:	e00e      	b.n	800cf36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f000 f843 	bl	800cfa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf1e:	e00a      	b.n	800cf36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 f83f 	bl	800cfa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf26:	e006      	b.n	800cf36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f83b 	bl	800cfa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800cf34:	e01e      	b.n	800cf74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf36:	bf00      	nop
    return;
 800cf38:	e01c      	b.n	800cf74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d008      	beq.n	800cf56 <HAL_UART_IRQHandler+0x1d6>
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d003      	beq.n	800cf56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f862 	bl	800d018 <UART_Transmit_IT>
    return;
 800cf54:	e00f      	b.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d00a      	beq.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
 800cf60:	69bb      	ldr	r3, [r7, #24]
 800cf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d005      	beq.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 f8a9 	bl	800d0c2 <UART_EndTransmit_IT>
    return;
 800cf70:	bf00      	nop
 800cf72:	e000      	b.n	800cf76 <HAL_UART_IRQHandler+0x1f6>
    return;
 800cf74:	bf00      	nop
  }
}
 800cf76:	3720      	adds	r7, #32
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	0800cff1 	.word	0x0800cff1

0800cf80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bc80      	pop	{r7}
 800cf90:	4770      	bx	lr

0800cf92 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b083      	sub	sp, #12
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cf9a:	bf00      	nop
 800cf9c:	370c      	adds	r7, #12
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bc80      	pop	{r7}
 800cfa2:	4770      	bx	lr

0800cfa4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cfac:	bf00      	nop
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	bc80      	pop	{r7}
 800cfb4:	4770      	bx	lr

0800cfb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cfb6:	b480      	push	{r7}
 800cfb8:	b083      	sub	sp, #12
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	68da      	ldr	r2, [r3, #12]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800cfcc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	695a      	ldr	r2, [r3, #20]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f022 0201 	bic.w	r2, r2, #1
 800cfdc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2220      	movs	r2, #32
 800cfe2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800cfe6:	bf00      	nop
 800cfe8:	370c      	adds	r7, #12
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bc80      	pop	{r7}
 800cfee:	4770      	bx	lr

0800cff0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f7ff ffca 	bl	800cfa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d010:	bf00      	nop
 800d012:	3710      	adds	r7, #16
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}

0800d018 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d018:	b480      	push	{r7}
 800d01a:	b085      	sub	sp, #20
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b21      	cmp	r3, #33	; 0x21
 800d02a:	d144      	bne.n	800d0b6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d034:	d11a      	bne.n	800d06c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6a1b      	ldr	r3, [r3, #32]
 800d03a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d04a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	691b      	ldr	r3, [r3, #16]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	6a1b      	ldr	r3, [r3, #32]
 800d058:	1c9a      	adds	r2, r3, #2
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	621a      	str	r2, [r3, #32]
 800d05e:	e00e      	b.n	800d07e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a1b      	ldr	r3, [r3, #32]
 800d064:	1c5a      	adds	r2, r3, #1
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	621a      	str	r2, [r3, #32]
 800d06a:	e008      	b.n	800d07e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6a1b      	ldr	r3, [r3, #32]
 800d070:	1c59      	adds	r1, r3, #1
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	6211      	str	r1, [r2, #32]
 800d076:	781a      	ldrb	r2, [r3, #0]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d082:	b29b      	uxth	r3, r3
 800d084:	3b01      	subs	r3, #1
 800d086:	b29b      	uxth	r3, r3
 800d088:	687a      	ldr	r2, [r7, #4]
 800d08a:	4619      	mov	r1, r3
 800d08c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10f      	bne.n	800d0b2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	68da      	ldr	r2, [r3, #12]
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d0a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68da      	ldr	r2, [r3, #12]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	e000      	b.n	800d0b8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d0b6:	2302      	movs	r3, #2
  }
}
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	3714      	adds	r7, #20
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bc80      	pop	{r7}
 800d0c0:	4770      	bx	lr

0800d0c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b082      	sub	sp, #8
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	68da      	ldr	r2, [r3, #12]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	2220      	movs	r2, #32
 800d0de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f7ff ff4c 	bl	800cf80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3708      	adds	r7, #8
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b084      	sub	sp, #16
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b22      	cmp	r3, #34	; 0x22
 800d104:	d171      	bne.n	800d1ea <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	689b      	ldr	r3, [r3, #8]
 800d10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d10e:	d123      	bne.n	800d158 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d114:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d10e      	bne.n	800d13c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	b29b      	uxth	r3, r3
 800d126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12a:	b29a      	uxth	r2, r3
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d134:	1c9a      	adds	r2, r3, #2
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	629a      	str	r2, [r3, #40]	; 0x28
 800d13a:	e029      	b.n	800d190 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	685b      	ldr	r3, [r3, #4]
 800d142:	b29b      	uxth	r3, r3
 800d144:	b2db      	uxtb	r3, r3
 800d146:	b29a      	uxth	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	629a      	str	r2, [r3, #40]	; 0x28
 800d156:	e01b      	b.n	800d190 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	691b      	ldr	r3, [r3, #16]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d10a      	bne.n	800d176 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6858      	ldr	r0, [r3, #4]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d16a:	1c59      	adds	r1, r3, #1
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	6291      	str	r1, [r2, #40]	; 0x28
 800d170:	b2c2      	uxtb	r2, r0
 800d172:	701a      	strb	r2, [r3, #0]
 800d174:	e00c      	b.n	800d190 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d182:	1c58      	adds	r0, r3, #1
 800d184:	6879      	ldr	r1, [r7, #4]
 800d186:	6288      	str	r0, [r1, #40]	; 0x28
 800d188:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d18c:	b2d2      	uxtb	r2, r2
 800d18e:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d194:	b29b      	uxth	r3, r3
 800d196:	3b01      	subs	r3, #1
 800d198:	b29b      	uxth	r3, r3
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	4619      	mov	r1, r3
 800d19e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d120      	bne.n	800d1e6 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68da      	ldr	r2, [r3, #12]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f022 0220 	bic.w	r2, r2, #32
 800d1b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68da      	ldr	r2, [r3, #12]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d1c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	695a      	ldr	r2, [r3, #20]
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f022 0201 	bic.w	r2, r2, #1
 800d1d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2220      	movs	r2, #32
 800d1d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f7ff fed8 	bl	800cf92 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	e002      	b.n	800d1ec <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e000      	b.n	800d1ec <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d1ea:	2302      	movs	r3, #2
  }
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3710      	adds	r7, #16
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	68da      	ldr	r2, [r3, #12]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	430a      	orrs	r2, r1
 800d210:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	689a      	ldr	r2, [r3, #8]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	691b      	ldr	r3, [r3, #16]
 800d21a:	431a      	orrs	r2, r3
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	695b      	ldr	r3, [r3, #20]
 800d220:	431a      	orrs	r2, r3
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	69db      	ldr	r3, [r3, #28]
 800d226:	4313      	orrs	r3, r2
 800d228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68db      	ldr	r3, [r3, #12]
 800d230:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d234:	f023 030c 	bic.w	r3, r3, #12
 800d238:	687a      	ldr	r2, [r7, #4]
 800d23a:	6812      	ldr	r2, [r2, #0]
 800d23c:	68f9      	ldr	r1, [r7, #12]
 800d23e:	430b      	orrs	r3, r1
 800d240:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	695b      	ldr	r3, [r3, #20]
 800d248:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	699a      	ldr	r2, [r3, #24]
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	69db      	ldr	r3, [r3, #28]
 800d25c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d260:	f040 80aa 	bne.w	800d3b8 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	4aa9      	ldr	r2, [pc, #676]	; (800d510 <UART_SetConfig+0x31c>)
 800d26a:	4293      	cmp	r3, r2
 800d26c:	d004      	beq.n	800d278 <UART_SetConfig+0x84>
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4aa8      	ldr	r2, [pc, #672]	; (800d514 <UART_SetConfig+0x320>)
 800d274:	4293      	cmp	r3, r2
 800d276:	d14f      	bne.n	800d318 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d278:	f7fe fd8e 	bl	800bd98 <HAL_RCC_GetPCLK2Freq>
 800d27c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4613      	mov	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	4413      	add	r3, r2
 800d286:	009a      	lsls	r2, r3, #2
 800d288:	441a      	add	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	005b      	lsls	r3, r3, #1
 800d290:	fbb2 f3f3 	udiv	r3, r2, r3
 800d294:	4aa0      	ldr	r2, [pc, #640]	; (800d518 <UART_SetConfig+0x324>)
 800d296:	fba2 2303 	umull	r2, r3, r2, r3
 800d29a:	095b      	lsrs	r3, r3, #5
 800d29c:	0119      	lsls	r1, r3, #4
 800d29e:	68ba      	ldr	r2, [r7, #8]
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	009a      	lsls	r2, r3, #2
 800d2a8:	441a      	add	r2, r3
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	005b      	lsls	r3, r3, #1
 800d2b0:	fbb2 f2f3 	udiv	r2, r2, r3
 800d2b4:	4b98      	ldr	r3, [pc, #608]	; (800d518 <UART_SetConfig+0x324>)
 800d2b6:	fba3 0302 	umull	r0, r3, r3, r2
 800d2ba:	095b      	lsrs	r3, r3, #5
 800d2bc:	2064      	movs	r0, #100	; 0x64
 800d2be:	fb00 f303 	mul.w	r3, r0, r3
 800d2c2:	1ad3      	subs	r3, r2, r3
 800d2c4:	00db      	lsls	r3, r3, #3
 800d2c6:	3332      	adds	r3, #50	; 0x32
 800d2c8:	4a93      	ldr	r2, [pc, #588]	; (800d518 <UART_SetConfig+0x324>)
 800d2ca:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ce:	095b      	lsrs	r3, r3, #5
 800d2d0:	005b      	lsls	r3, r3, #1
 800d2d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d2d6:	4419      	add	r1, r3
 800d2d8:	68ba      	ldr	r2, [r7, #8]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	009a      	lsls	r2, r3, #2
 800d2e2:	441a      	add	r2, r3
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800d2ee:	4b8a      	ldr	r3, [pc, #552]	; (800d518 <UART_SetConfig+0x324>)
 800d2f0:	fba3 0302 	umull	r0, r3, r3, r2
 800d2f4:	095b      	lsrs	r3, r3, #5
 800d2f6:	2064      	movs	r0, #100	; 0x64
 800d2f8:	fb00 f303 	mul.w	r3, r0, r3
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	00db      	lsls	r3, r3, #3
 800d300:	3332      	adds	r3, #50	; 0x32
 800d302:	4a85      	ldr	r2, [pc, #532]	; (800d518 <UART_SetConfig+0x324>)
 800d304:	fba2 2303 	umull	r2, r3, r2, r3
 800d308:	095b      	lsrs	r3, r3, #5
 800d30a:	f003 0207 	and.w	r2, r3, #7
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	440a      	add	r2, r1
 800d314:	609a      	str	r2, [r3, #8]
 800d316:	e0f7      	b.n	800d508 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d318:	f7fe fd1c 	bl	800bd54 <HAL_RCC_GetPCLK1Freq>
 800d31c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d31e:	68ba      	ldr	r2, [r7, #8]
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009a      	lsls	r2, r3, #2
 800d328:	441a      	add	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	005b      	lsls	r3, r3, #1
 800d330:	fbb2 f3f3 	udiv	r3, r2, r3
 800d334:	4a78      	ldr	r2, [pc, #480]	; (800d518 <UART_SetConfig+0x324>)
 800d336:	fba2 2303 	umull	r2, r3, r2, r3
 800d33a:	095b      	lsrs	r3, r3, #5
 800d33c:	0119      	lsls	r1, r3, #4
 800d33e:	68ba      	ldr	r2, [r7, #8]
 800d340:	4613      	mov	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	4413      	add	r3, r2
 800d346:	009a      	lsls	r2, r3, #2
 800d348:	441a      	add	r2, r3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	685b      	ldr	r3, [r3, #4]
 800d34e:	005b      	lsls	r3, r3, #1
 800d350:	fbb2 f2f3 	udiv	r2, r2, r3
 800d354:	4b70      	ldr	r3, [pc, #448]	; (800d518 <UART_SetConfig+0x324>)
 800d356:	fba3 0302 	umull	r0, r3, r3, r2
 800d35a:	095b      	lsrs	r3, r3, #5
 800d35c:	2064      	movs	r0, #100	; 0x64
 800d35e:	fb00 f303 	mul.w	r3, r0, r3
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	00db      	lsls	r3, r3, #3
 800d366:	3332      	adds	r3, #50	; 0x32
 800d368:	4a6b      	ldr	r2, [pc, #428]	; (800d518 <UART_SetConfig+0x324>)
 800d36a:	fba2 2303 	umull	r2, r3, r2, r3
 800d36e:	095b      	lsrs	r3, r3, #5
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d376:	4419      	add	r1, r3
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	4613      	mov	r3, r2
 800d37c:	009b      	lsls	r3, r3, #2
 800d37e:	4413      	add	r3, r2
 800d380:	009a      	lsls	r2, r3, #2
 800d382:	441a      	add	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	005b      	lsls	r3, r3, #1
 800d38a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d38e:	4b62      	ldr	r3, [pc, #392]	; (800d518 <UART_SetConfig+0x324>)
 800d390:	fba3 0302 	umull	r0, r3, r3, r2
 800d394:	095b      	lsrs	r3, r3, #5
 800d396:	2064      	movs	r0, #100	; 0x64
 800d398:	fb00 f303 	mul.w	r3, r0, r3
 800d39c:	1ad3      	subs	r3, r2, r3
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	3332      	adds	r3, #50	; 0x32
 800d3a2:	4a5d      	ldr	r2, [pc, #372]	; (800d518 <UART_SetConfig+0x324>)
 800d3a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d3a8:	095b      	lsrs	r3, r3, #5
 800d3aa:	f003 0207 	and.w	r2, r3, #7
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	440a      	add	r2, r1
 800d3b4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800d3b6:	e0a7      	b.n	800d508 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a54      	ldr	r2, [pc, #336]	; (800d510 <UART_SetConfig+0x31c>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d004      	beq.n	800d3cc <UART_SetConfig+0x1d8>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	4a53      	ldr	r2, [pc, #332]	; (800d514 <UART_SetConfig+0x320>)
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d14e      	bne.n	800d46a <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 800d3cc:	f7fe fce4 	bl	800bd98 <HAL_RCC_GetPCLK2Freq>
 800d3d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009a      	lsls	r2, r3, #2
 800d3dc:	441a      	add	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3e8:	4a4b      	ldr	r2, [pc, #300]	; (800d518 <UART_SetConfig+0x324>)
 800d3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ee:	095b      	lsrs	r3, r3, #5
 800d3f0:	0119      	lsls	r1, r3, #4
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	009a      	lsls	r2, r3, #2
 800d3fc:	441a      	add	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	fbb2 f2f3 	udiv	r2, r2, r3
 800d408:	4b43      	ldr	r3, [pc, #268]	; (800d518 <UART_SetConfig+0x324>)
 800d40a:	fba3 0302 	umull	r0, r3, r3, r2
 800d40e:	095b      	lsrs	r3, r3, #5
 800d410:	2064      	movs	r0, #100	; 0x64
 800d412:	fb00 f303 	mul.w	r3, r0, r3
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	011b      	lsls	r3, r3, #4
 800d41a:	3332      	adds	r3, #50	; 0x32
 800d41c:	4a3e      	ldr	r2, [pc, #248]	; (800d518 <UART_SetConfig+0x324>)
 800d41e:	fba2 2303 	umull	r2, r3, r2, r3
 800d422:	095b      	lsrs	r3, r3, #5
 800d424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d428:	4419      	add	r1, r3
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	4613      	mov	r3, r2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	009a      	lsls	r2, r3, #2
 800d434:	441a      	add	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d440:	4b35      	ldr	r3, [pc, #212]	; (800d518 <UART_SetConfig+0x324>)
 800d442:	fba3 0302 	umull	r0, r3, r3, r2
 800d446:	095b      	lsrs	r3, r3, #5
 800d448:	2064      	movs	r0, #100	; 0x64
 800d44a:	fb00 f303 	mul.w	r3, r0, r3
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	011b      	lsls	r3, r3, #4
 800d452:	3332      	adds	r3, #50	; 0x32
 800d454:	4a30      	ldr	r2, [pc, #192]	; (800d518 <UART_SetConfig+0x324>)
 800d456:	fba2 2303 	umull	r2, r3, r2, r3
 800d45a:	095b      	lsrs	r3, r3, #5
 800d45c:	f003 020f 	and.w	r2, r3, #15
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	440a      	add	r2, r1
 800d466:	609a      	str	r2, [r3, #8]
 800d468:	e04e      	b.n	800d508 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 800d46a:	f7fe fc73 	bl	800bd54 <HAL_RCC_GetPCLK1Freq>
 800d46e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	4613      	mov	r3, r2
 800d474:	009b      	lsls	r3, r3, #2
 800d476:	4413      	add	r3, r2
 800d478:	009a      	lsls	r2, r3, #2
 800d47a:	441a      	add	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	fbb2 f3f3 	udiv	r3, r2, r3
 800d486:	4a24      	ldr	r2, [pc, #144]	; (800d518 <UART_SetConfig+0x324>)
 800d488:	fba2 2303 	umull	r2, r3, r2, r3
 800d48c:	095b      	lsrs	r3, r3, #5
 800d48e:	0119      	lsls	r1, r3, #4
 800d490:	68ba      	ldr	r2, [r7, #8]
 800d492:	4613      	mov	r3, r2
 800d494:	009b      	lsls	r3, r3, #2
 800d496:	4413      	add	r3, r2
 800d498:	009a      	lsls	r2, r3, #2
 800d49a:	441a      	add	r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	685b      	ldr	r3, [r3, #4]
 800d4a0:	009b      	lsls	r3, r3, #2
 800d4a2:	fbb2 f2f3 	udiv	r2, r2, r3
 800d4a6:	4b1c      	ldr	r3, [pc, #112]	; (800d518 <UART_SetConfig+0x324>)
 800d4a8:	fba3 0302 	umull	r0, r3, r3, r2
 800d4ac:	095b      	lsrs	r3, r3, #5
 800d4ae:	2064      	movs	r0, #100	; 0x64
 800d4b0:	fb00 f303 	mul.w	r3, r0, r3
 800d4b4:	1ad3      	subs	r3, r2, r3
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	3332      	adds	r3, #50	; 0x32
 800d4ba:	4a17      	ldr	r2, [pc, #92]	; (800d518 <UART_SetConfig+0x324>)
 800d4bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d4c0:	095b      	lsrs	r3, r3, #5
 800d4c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4c6:	4419      	add	r1, r3
 800d4c8:	68ba      	ldr	r2, [r7, #8]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	009a      	lsls	r2, r3, #2
 800d4d2:	441a      	add	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	685b      	ldr	r3, [r3, #4]
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	fbb2 f2f3 	udiv	r2, r2, r3
 800d4de:	4b0e      	ldr	r3, [pc, #56]	; (800d518 <UART_SetConfig+0x324>)
 800d4e0:	fba3 0302 	umull	r0, r3, r3, r2
 800d4e4:	095b      	lsrs	r3, r3, #5
 800d4e6:	2064      	movs	r0, #100	; 0x64
 800d4e8:	fb00 f303 	mul.w	r3, r0, r3
 800d4ec:	1ad3      	subs	r3, r2, r3
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	3332      	adds	r3, #50	; 0x32
 800d4f2:	4a09      	ldr	r2, [pc, #36]	; (800d518 <UART_SetConfig+0x324>)
 800d4f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d4f8:	095b      	lsrs	r3, r3, #5
 800d4fa:	f003 020f 	and.w	r2, r3, #15
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	440a      	add	r2, r1
 800d504:	609a      	str	r2, [r3, #8]
}
 800d506:	e7ff      	b.n	800d508 <UART_SetConfig+0x314>
 800d508:	bf00      	nop
 800d50a:	3710      	adds	r7, #16
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	40011000 	.word	0x40011000
 800d514:	40011400 	.word	0x40011400
 800d518:	51eb851f 	.word	0x51eb851f

0800d51c <__errno>:
 800d51c:	4b01      	ldr	r3, [pc, #4]	; (800d524 <__errno+0x8>)
 800d51e:	6818      	ldr	r0, [r3, #0]
 800d520:	4770      	bx	lr
 800d522:	bf00      	nop
 800d524:	20000064 	.word	0x20000064

0800d528 <__libc_init_array>:
 800d528:	b570      	push	{r4, r5, r6, lr}
 800d52a:	2500      	movs	r5, #0
 800d52c:	4e0c      	ldr	r6, [pc, #48]	; (800d560 <__libc_init_array+0x38>)
 800d52e:	4c0d      	ldr	r4, [pc, #52]	; (800d564 <__libc_init_array+0x3c>)
 800d530:	1ba4      	subs	r4, r4, r6
 800d532:	10a4      	asrs	r4, r4, #2
 800d534:	42a5      	cmp	r5, r4
 800d536:	d109      	bne.n	800d54c <__libc_init_array+0x24>
 800d538:	f002 fa94 	bl	800fa64 <_init>
 800d53c:	2500      	movs	r5, #0
 800d53e:	4e0a      	ldr	r6, [pc, #40]	; (800d568 <__libc_init_array+0x40>)
 800d540:	4c0a      	ldr	r4, [pc, #40]	; (800d56c <__libc_init_array+0x44>)
 800d542:	1ba4      	subs	r4, r4, r6
 800d544:	10a4      	asrs	r4, r4, #2
 800d546:	42a5      	cmp	r5, r4
 800d548:	d105      	bne.n	800d556 <__libc_init_array+0x2e>
 800d54a:	bd70      	pop	{r4, r5, r6, pc}
 800d54c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d550:	4798      	blx	r3
 800d552:	3501      	adds	r5, #1
 800d554:	e7ee      	b.n	800d534 <__libc_init_array+0xc>
 800d556:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d55a:	4798      	blx	r3
 800d55c:	3501      	adds	r5, #1
 800d55e:	e7f2      	b.n	800d546 <__libc_init_array+0x1e>
 800d560:	08010534 	.word	0x08010534
 800d564:	08010534 	.word	0x08010534
 800d568:	08010534 	.word	0x08010534
 800d56c:	08010538 	.word	0x08010538

0800d570 <memset>:
 800d570:	4603      	mov	r3, r0
 800d572:	4402      	add	r2, r0
 800d574:	4293      	cmp	r3, r2
 800d576:	d100      	bne.n	800d57a <memset+0xa>
 800d578:	4770      	bx	lr
 800d57a:	f803 1b01 	strb.w	r1, [r3], #1
 800d57e:	e7f9      	b.n	800d574 <memset+0x4>

0800d580 <__cvt>:
 800d580:	2b00      	cmp	r3, #0
 800d582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d586:	461e      	mov	r6, r3
 800d588:	bfbb      	ittet	lt
 800d58a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800d58e:	461e      	movlt	r6, r3
 800d590:	2300      	movge	r3, #0
 800d592:	232d      	movlt	r3, #45	; 0x2d
 800d594:	b088      	sub	sp, #32
 800d596:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d598:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800d59c:	f027 0720 	bic.w	r7, r7, #32
 800d5a0:	2f46      	cmp	r7, #70	; 0x46
 800d5a2:	4614      	mov	r4, r2
 800d5a4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d5a6:	700b      	strb	r3, [r1, #0]
 800d5a8:	d004      	beq.n	800d5b4 <__cvt+0x34>
 800d5aa:	2f45      	cmp	r7, #69	; 0x45
 800d5ac:	d100      	bne.n	800d5b0 <__cvt+0x30>
 800d5ae:	3501      	adds	r5, #1
 800d5b0:	2302      	movs	r3, #2
 800d5b2:	e000      	b.n	800d5b6 <__cvt+0x36>
 800d5b4:	2303      	movs	r3, #3
 800d5b6:	aa07      	add	r2, sp, #28
 800d5b8:	9204      	str	r2, [sp, #16]
 800d5ba:	aa06      	add	r2, sp, #24
 800d5bc:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d5c0:	e9cd 3500 	strd	r3, r5, [sp]
 800d5c4:	4622      	mov	r2, r4
 800d5c6:	4633      	mov	r3, r6
 800d5c8:	f000 fcda 	bl	800df80 <_dtoa_r>
 800d5cc:	2f47      	cmp	r7, #71	; 0x47
 800d5ce:	4680      	mov	r8, r0
 800d5d0:	d102      	bne.n	800d5d8 <__cvt+0x58>
 800d5d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d5d4:	07db      	lsls	r3, r3, #31
 800d5d6:	d526      	bpl.n	800d626 <__cvt+0xa6>
 800d5d8:	2f46      	cmp	r7, #70	; 0x46
 800d5da:	eb08 0905 	add.w	r9, r8, r5
 800d5de:	d111      	bne.n	800d604 <__cvt+0x84>
 800d5e0:	f898 3000 	ldrb.w	r3, [r8]
 800d5e4:	2b30      	cmp	r3, #48	; 0x30
 800d5e6:	d10a      	bne.n	800d5fe <__cvt+0x7e>
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	4620      	mov	r0, r4
 800d5ee:	4631      	mov	r1, r6
 800d5f0:	f7f3 fa16 	bl	8000a20 <__aeabi_dcmpeq>
 800d5f4:	b918      	cbnz	r0, 800d5fe <__cvt+0x7e>
 800d5f6:	f1c5 0501 	rsb	r5, r5, #1
 800d5fa:	f8ca 5000 	str.w	r5, [sl]
 800d5fe:	f8da 3000 	ldr.w	r3, [sl]
 800d602:	4499      	add	r9, r3
 800d604:	2200      	movs	r2, #0
 800d606:	2300      	movs	r3, #0
 800d608:	4620      	mov	r0, r4
 800d60a:	4631      	mov	r1, r6
 800d60c:	f7f3 fa08 	bl	8000a20 <__aeabi_dcmpeq>
 800d610:	b938      	cbnz	r0, 800d622 <__cvt+0xa2>
 800d612:	2230      	movs	r2, #48	; 0x30
 800d614:	9b07      	ldr	r3, [sp, #28]
 800d616:	454b      	cmp	r3, r9
 800d618:	d205      	bcs.n	800d626 <__cvt+0xa6>
 800d61a:	1c59      	adds	r1, r3, #1
 800d61c:	9107      	str	r1, [sp, #28]
 800d61e:	701a      	strb	r2, [r3, #0]
 800d620:	e7f8      	b.n	800d614 <__cvt+0x94>
 800d622:	f8cd 901c 	str.w	r9, [sp, #28]
 800d626:	4640      	mov	r0, r8
 800d628:	9b07      	ldr	r3, [sp, #28]
 800d62a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d62c:	eba3 0308 	sub.w	r3, r3, r8
 800d630:	6013      	str	r3, [r2, #0]
 800d632:	b008      	add	sp, #32
 800d634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d638 <__exponent>:
 800d638:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d63a:	2900      	cmp	r1, #0
 800d63c:	bfb4      	ite	lt
 800d63e:	232d      	movlt	r3, #45	; 0x2d
 800d640:	232b      	movge	r3, #43	; 0x2b
 800d642:	4604      	mov	r4, r0
 800d644:	bfb8      	it	lt
 800d646:	4249      	neglt	r1, r1
 800d648:	2909      	cmp	r1, #9
 800d64a:	f804 2b02 	strb.w	r2, [r4], #2
 800d64e:	7043      	strb	r3, [r0, #1]
 800d650:	dd21      	ble.n	800d696 <__exponent+0x5e>
 800d652:	f10d 0307 	add.w	r3, sp, #7
 800d656:	461f      	mov	r7, r3
 800d658:	260a      	movs	r6, #10
 800d65a:	fb91 f5f6 	sdiv	r5, r1, r6
 800d65e:	fb06 1115 	mls	r1, r6, r5, r1
 800d662:	2d09      	cmp	r5, #9
 800d664:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800d668:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d66c:	f103 32ff 	add.w	r2, r3, #4294967295
 800d670:	4629      	mov	r1, r5
 800d672:	dc09      	bgt.n	800d688 <__exponent+0x50>
 800d674:	3130      	adds	r1, #48	; 0x30
 800d676:	3b02      	subs	r3, #2
 800d678:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d67c:	42bb      	cmp	r3, r7
 800d67e:	4622      	mov	r2, r4
 800d680:	d304      	bcc.n	800d68c <__exponent+0x54>
 800d682:	1a10      	subs	r0, r2, r0
 800d684:	b003      	add	sp, #12
 800d686:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d688:	4613      	mov	r3, r2
 800d68a:	e7e6      	b.n	800d65a <__exponent+0x22>
 800d68c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d690:	f804 2b01 	strb.w	r2, [r4], #1
 800d694:	e7f2      	b.n	800d67c <__exponent+0x44>
 800d696:	2330      	movs	r3, #48	; 0x30
 800d698:	4419      	add	r1, r3
 800d69a:	7083      	strb	r3, [r0, #2]
 800d69c:	1d02      	adds	r2, r0, #4
 800d69e:	70c1      	strb	r1, [r0, #3]
 800d6a0:	e7ef      	b.n	800d682 <__exponent+0x4a>
	...

0800d6a4 <_printf_float>:
 800d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	b091      	sub	sp, #68	; 0x44
 800d6aa:	460c      	mov	r4, r1
 800d6ac:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800d6ae:	4693      	mov	fp, r2
 800d6b0:	461e      	mov	r6, r3
 800d6b2:	4605      	mov	r5, r0
 800d6b4:	f001 fa18 	bl	800eae8 <_localeconv_r>
 800d6b8:	6803      	ldr	r3, [r0, #0]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d6be:	f7f2 fd83 	bl	80001c8 <strlen>
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	930e      	str	r3, [sp, #56]	; 0x38
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	900a      	str	r0, [sp, #40]	; 0x28
 800d6ca:	3307      	adds	r3, #7
 800d6cc:	f023 0307 	bic.w	r3, r3, #7
 800d6d0:	f103 0208 	add.w	r2, r3, #8
 800d6d4:	f894 8018 	ldrb.w	r8, [r4, #24]
 800d6d8:	f8d4 a000 	ldr.w	sl, [r4]
 800d6dc:	603a      	str	r2, [r7, #0]
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d6e6:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800d6ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d6ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f4:	4ba6      	ldr	r3, [pc, #664]	; (800d990 <_printf_float+0x2ec>)
 800d6f6:	4638      	mov	r0, r7
 800d6f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d6fa:	f7f3 f9c3 	bl	8000a84 <__aeabi_dcmpun>
 800d6fe:	bb68      	cbnz	r0, 800d75c <_printf_float+0xb8>
 800d700:	f04f 32ff 	mov.w	r2, #4294967295
 800d704:	4ba2      	ldr	r3, [pc, #648]	; (800d990 <_printf_float+0x2ec>)
 800d706:	4638      	mov	r0, r7
 800d708:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d70a:	f7f3 f99d 	bl	8000a48 <__aeabi_dcmple>
 800d70e:	bb28      	cbnz	r0, 800d75c <_printf_float+0xb8>
 800d710:	2200      	movs	r2, #0
 800d712:	2300      	movs	r3, #0
 800d714:	4638      	mov	r0, r7
 800d716:	4649      	mov	r1, r9
 800d718:	f7f3 f98c 	bl	8000a34 <__aeabi_dcmplt>
 800d71c:	b110      	cbz	r0, 800d724 <_printf_float+0x80>
 800d71e:	232d      	movs	r3, #45	; 0x2d
 800d720:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d724:	4f9b      	ldr	r7, [pc, #620]	; (800d994 <_printf_float+0x2f0>)
 800d726:	4b9c      	ldr	r3, [pc, #624]	; (800d998 <_printf_float+0x2f4>)
 800d728:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d72c:	bf98      	it	ls
 800d72e:	461f      	movls	r7, r3
 800d730:	2303      	movs	r3, #3
 800d732:	f04f 0900 	mov.w	r9, #0
 800d736:	6123      	str	r3, [r4, #16]
 800d738:	f02a 0304 	bic.w	r3, sl, #4
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	9600      	str	r6, [sp, #0]
 800d740:	465b      	mov	r3, fp
 800d742:	aa0f      	add	r2, sp, #60	; 0x3c
 800d744:	4621      	mov	r1, r4
 800d746:	4628      	mov	r0, r5
 800d748:	f000 f9e2 	bl	800db10 <_printf_common>
 800d74c:	3001      	adds	r0, #1
 800d74e:	f040 8090 	bne.w	800d872 <_printf_float+0x1ce>
 800d752:	f04f 30ff 	mov.w	r0, #4294967295
 800d756:	b011      	add	sp, #68	; 0x44
 800d758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d75c:	463a      	mov	r2, r7
 800d75e:	464b      	mov	r3, r9
 800d760:	4638      	mov	r0, r7
 800d762:	4649      	mov	r1, r9
 800d764:	f7f3 f98e 	bl	8000a84 <__aeabi_dcmpun>
 800d768:	b110      	cbz	r0, 800d770 <_printf_float+0xcc>
 800d76a:	4f8c      	ldr	r7, [pc, #560]	; (800d99c <_printf_float+0x2f8>)
 800d76c:	4b8c      	ldr	r3, [pc, #560]	; (800d9a0 <_printf_float+0x2fc>)
 800d76e:	e7db      	b.n	800d728 <_printf_float+0x84>
 800d770:	6863      	ldr	r3, [r4, #4]
 800d772:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800d776:	1c59      	adds	r1, r3, #1
 800d778:	a80d      	add	r0, sp, #52	; 0x34
 800d77a:	a90e      	add	r1, sp, #56	; 0x38
 800d77c:	d140      	bne.n	800d800 <_printf_float+0x15c>
 800d77e:	2306      	movs	r3, #6
 800d780:	6063      	str	r3, [r4, #4]
 800d782:	f04f 0c00 	mov.w	ip, #0
 800d786:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800d78a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d78e:	6863      	ldr	r3, [r4, #4]
 800d790:	6022      	str	r2, [r4, #0]
 800d792:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	463a      	mov	r2, r7
 800d79a:	464b      	mov	r3, r9
 800d79c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f7ff feed 	bl	800d580 <__cvt>
 800d7a6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800d7aa:	2b47      	cmp	r3, #71	; 0x47
 800d7ac:	4607      	mov	r7, r0
 800d7ae:	d109      	bne.n	800d7c4 <_printf_float+0x120>
 800d7b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7b2:	1cd8      	adds	r0, r3, #3
 800d7b4:	db02      	blt.n	800d7bc <_printf_float+0x118>
 800d7b6:	6862      	ldr	r2, [r4, #4]
 800d7b8:	4293      	cmp	r3, r2
 800d7ba:	dd47      	ble.n	800d84c <_printf_float+0x1a8>
 800d7bc:	f1a8 0802 	sub.w	r8, r8, #2
 800d7c0:	fa5f f888 	uxtb.w	r8, r8
 800d7c4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800d7c8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d7ca:	d824      	bhi.n	800d816 <_printf_float+0x172>
 800d7cc:	3901      	subs	r1, #1
 800d7ce:	4642      	mov	r2, r8
 800d7d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d7d4:	910d      	str	r1, [sp, #52]	; 0x34
 800d7d6:	f7ff ff2f 	bl	800d638 <__exponent>
 800d7da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7dc:	4681      	mov	r9, r0
 800d7de:	1813      	adds	r3, r2, r0
 800d7e0:	2a01      	cmp	r2, #1
 800d7e2:	6123      	str	r3, [r4, #16]
 800d7e4:	dc02      	bgt.n	800d7ec <_printf_float+0x148>
 800d7e6:	6822      	ldr	r2, [r4, #0]
 800d7e8:	07d1      	lsls	r1, r2, #31
 800d7ea:	d501      	bpl.n	800d7f0 <_printf_float+0x14c>
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	6123      	str	r3, [r4, #16]
 800d7f0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d0a2      	beq.n	800d73e <_printf_float+0x9a>
 800d7f8:	232d      	movs	r3, #45	; 0x2d
 800d7fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7fe:	e79e      	b.n	800d73e <_printf_float+0x9a>
 800d800:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800d804:	f000 816e 	beq.w	800dae4 <_printf_float+0x440>
 800d808:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d80c:	d1b9      	bne.n	800d782 <_printf_float+0xde>
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1b7      	bne.n	800d782 <_printf_float+0xde>
 800d812:	2301      	movs	r3, #1
 800d814:	e7b4      	b.n	800d780 <_printf_float+0xdc>
 800d816:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800d81a:	d119      	bne.n	800d850 <_printf_float+0x1ac>
 800d81c:	2900      	cmp	r1, #0
 800d81e:	6863      	ldr	r3, [r4, #4]
 800d820:	dd0c      	ble.n	800d83c <_printf_float+0x198>
 800d822:	6121      	str	r1, [r4, #16]
 800d824:	b913      	cbnz	r3, 800d82c <_printf_float+0x188>
 800d826:	6822      	ldr	r2, [r4, #0]
 800d828:	07d2      	lsls	r2, r2, #31
 800d82a:	d502      	bpl.n	800d832 <_printf_float+0x18e>
 800d82c:	3301      	adds	r3, #1
 800d82e:	440b      	add	r3, r1
 800d830:	6123      	str	r3, [r4, #16]
 800d832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d834:	f04f 0900 	mov.w	r9, #0
 800d838:	65a3      	str	r3, [r4, #88]	; 0x58
 800d83a:	e7d9      	b.n	800d7f0 <_printf_float+0x14c>
 800d83c:	b913      	cbnz	r3, 800d844 <_printf_float+0x1a0>
 800d83e:	6822      	ldr	r2, [r4, #0]
 800d840:	07d0      	lsls	r0, r2, #31
 800d842:	d501      	bpl.n	800d848 <_printf_float+0x1a4>
 800d844:	3302      	adds	r3, #2
 800d846:	e7f3      	b.n	800d830 <_printf_float+0x18c>
 800d848:	2301      	movs	r3, #1
 800d84a:	e7f1      	b.n	800d830 <_printf_float+0x18c>
 800d84c:	f04f 0867 	mov.w	r8, #103	; 0x67
 800d850:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d854:	4293      	cmp	r3, r2
 800d856:	db05      	blt.n	800d864 <_printf_float+0x1c0>
 800d858:	6822      	ldr	r2, [r4, #0]
 800d85a:	6123      	str	r3, [r4, #16]
 800d85c:	07d1      	lsls	r1, r2, #31
 800d85e:	d5e8      	bpl.n	800d832 <_printf_float+0x18e>
 800d860:	3301      	adds	r3, #1
 800d862:	e7e5      	b.n	800d830 <_printf_float+0x18c>
 800d864:	2b00      	cmp	r3, #0
 800d866:	bfcc      	ite	gt
 800d868:	2301      	movgt	r3, #1
 800d86a:	f1c3 0302 	rsble	r3, r3, #2
 800d86e:	4413      	add	r3, r2
 800d870:	e7de      	b.n	800d830 <_printf_float+0x18c>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	055a      	lsls	r2, r3, #21
 800d876:	d407      	bmi.n	800d888 <_printf_float+0x1e4>
 800d878:	6923      	ldr	r3, [r4, #16]
 800d87a:	463a      	mov	r2, r7
 800d87c:	4659      	mov	r1, fp
 800d87e:	4628      	mov	r0, r5
 800d880:	47b0      	blx	r6
 800d882:	3001      	adds	r0, #1
 800d884:	d129      	bne.n	800d8da <_printf_float+0x236>
 800d886:	e764      	b.n	800d752 <_printf_float+0xae>
 800d888:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800d88c:	f240 80d7 	bls.w	800da3e <_printf_float+0x39a>
 800d890:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d894:	2200      	movs	r2, #0
 800d896:	2300      	movs	r3, #0
 800d898:	f7f3 f8c2 	bl	8000a20 <__aeabi_dcmpeq>
 800d89c:	b388      	cbz	r0, 800d902 <_printf_float+0x25e>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	4a40      	ldr	r2, [pc, #256]	; (800d9a4 <_printf_float+0x300>)
 800d8a2:	4659      	mov	r1, fp
 800d8a4:	4628      	mov	r0, r5
 800d8a6:	47b0      	blx	r6
 800d8a8:	3001      	adds	r0, #1
 800d8aa:	f43f af52 	beq.w	800d752 <_printf_float+0xae>
 800d8ae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	db02      	blt.n	800d8bc <_printf_float+0x218>
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	07d8      	lsls	r0, r3, #31
 800d8ba:	d50e      	bpl.n	800d8da <_printf_float+0x236>
 800d8bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8c0:	4659      	mov	r1, fp
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	47b0      	blx	r6
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f43f af43 	beq.w	800d752 <_printf_float+0xae>
 800d8cc:	2700      	movs	r7, #0
 800d8ce:	f104 081a 	add.w	r8, r4, #26
 800d8d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d8d4:	3b01      	subs	r3, #1
 800d8d6:	42bb      	cmp	r3, r7
 800d8d8:	dc09      	bgt.n	800d8ee <_printf_float+0x24a>
 800d8da:	6823      	ldr	r3, [r4, #0]
 800d8dc:	079f      	lsls	r7, r3, #30
 800d8de:	f100 80fd 	bmi.w	800dadc <_printf_float+0x438>
 800d8e2:	68e0      	ldr	r0, [r4, #12]
 800d8e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8e6:	4298      	cmp	r0, r3
 800d8e8:	bfb8      	it	lt
 800d8ea:	4618      	movlt	r0, r3
 800d8ec:	e733      	b.n	800d756 <_printf_float+0xb2>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4642      	mov	r2, r8
 800d8f2:	4659      	mov	r1, fp
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	47b0      	blx	r6
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	f43f af2a 	beq.w	800d752 <_printf_float+0xae>
 800d8fe:	3701      	adds	r7, #1
 800d900:	e7e7      	b.n	800d8d2 <_printf_float+0x22e>
 800d902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d904:	2b00      	cmp	r3, #0
 800d906:	dc2b      	bgt.n	800d960 <_printf_float+0x2bc>
 800d908:	2301      	movs	r3, #1
 800d90a:	4a26      	ldr	r2, [pc, #152]	; (800d9a4 <_printf_float+0x300>)
 800d90c:	4659      	mov	r1, fp
 800d90e:	4628      	mov	r0, r5
 800d910:	47b0      	blx	r6
 800d912:	3001      	adds	r0, #1
 800d914:	f43f af1d 	beq.w	800d752 <_printf_float+0xae>
 800d918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d91a:	b923      	cbnz	r3, 800d926 <_printf_float+0x282>
 800d91c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d91e:	b913      	cbnz	r3, 800d926 <_printf_float+0x282>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	07d9      	lsls	r1, r3, #31
 800d924:	d5d9      	bpl.n	800d8da <_printf_float+0x236>
 800d926:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d92a:	4659      	mov	r1, fp
 800d92c:	4628      	mov	r0, r5
 800d92e:	47b0      	blx	r6
 800d930:	3001      	adds	r0, #1
 800d932:	f43f af0e 	beq.w	800d752 <_printf_float+0xae>
 800d936:	f04f 0800 	mov.w	r8, #0
 800d93a:	f104 091a 	add.w	r9, r4, #26
 800d93e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d940:	425b      	negs	r3, r3
 800d942:	4543      	cmp	r3, r8
 800d944:	dc01      	bgt.n	800d94a <_printf_float+0x2a6>
 800d946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d948:	e797      	b.n	800d87a <_printf_float+0x1d6>
 800d94a:	2301      	movs	r3, #1
 800d94c:	464a      	mov	r2, r9
 800d94e:	4659      	mov	r1, fp
 800d950:	4628      	mov	r0, r5
 800d952:	47b0      	blx	r6
 800d954:	3001      	adds	r0, #1
 800d956:	f43f aefc 	beq.w	800d752 <_printf_float+0xae>
 800d95a:	f108 0801 	add.w	r8, r8, #1
 800d95e:	e7ee      	b.n	800d93e <_printf_float+0x29a>
 800d960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d962:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d964:	429a      	cmp	r2, r3
 800d966:	bfa8      	it	ge
 800d968:	461a      	movge	r2, r3
 800d96a:	2a00      	cmp	r2, #0
 800d96c:	4690      	mov	r8, r2
 800d96e:	dd07      	ble.n	800d980 <_printf_float+0x2dc>
 800d970:	4613      	mov	r3, r2
 800d972:	4659      	mov	r1, fp
 800d974:	463a      	mov	r2, r7
 800d976:	4628      	mov	r0, r5
 800d978:	47b0      	blx	r6
 800d97a:	3001      	adds	r0, #1
 800d97c:	f43f aee9 	beq.w	800d752 <_printf_float+0xae>
 800d980:	f104 031a 	add.w	r3, r4, #26
 800d984:	f04f 0a00 	mov.w	sl, #0
 800d988:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800d98c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d98e:	e015      	b.n	800d9bc <_printf_float+0x318>
 800d990:	7fefffff 	.word	0x7fefffff
 800d994:	080102d0 	.word	0x080102d0
 800d998:	080102cc 	.word	0x080102cc
 800d99c:	080102d8 	.word	0x080102d8
 800d9a0:	080102d4 	.word	0x080102d4
 800d9a4:	080102dc 	.word	0x080102dc
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d9ac:	4659      	mov	r1, fp
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	47b0      	blx	r6
 800d9b2:	3001      	adds	r0, #1
 800d9b4:	f43f aecd 	beq.w	800d752 <_printf_float+0xae>
 800d9b8:	f10a 0a01 	add.w	sl, sl, #1
 800d9bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800d9c0:	eba9 0308 	sub.w	r3, r9, r8
 800d9c4:	4553      	cmp	r3, sl
 800d9c6:	dcef      	bgt.n	800d9a8 <_printf_float+0x304>
 800d9c8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	444f      	add	r7, r9
 800d9d0:	db14      	blt.n	800d9fc <_printf_float+0x358>
 800d9d2:	6823      	ldr	r3, [r4, #0]
 800d9d4:	07da      	lsls	r2, r3, #31
 800d9d6:	d411      	bmi.n	800d9fc <_printf_float+0x358>
 800d9d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9da:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d9dc:	eba3 0209 	sub.w	r2, r3, r9
 800d9e0:	eba3 0901 	sub.w	r9, r3, r1
 800d9e4:	4591      	cmp	r9, r2
 800d9e6:	bfa8      	it	ge
 800d9e8:	4691      	movge	r9, r2
 800d9ea:	f1b9 0f00 	cmp.w	r9, #0
 800d9ee:	dc0d      	bgt.n	800da0c <_printf_float+0x368>
 800d9f0:	2700      	movs	r7, #0
 800d9f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9f6:	f104 081a 	add.w	r8, r4, #26
 800d9fa:	e018      	b.n	800da2e <_printf_float+0x38a>
 800d9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da00:	4659      	mov	r1, fp
 800da02:	4628      	mov	r0, r5
 800da04:	47b0      	blx	r6
 800da06:	3001      	adds	r0, #1
 800da08:	d1e6      	bne.n	800d9d8 <_printf_float+0x334>
 800da0a:	e6a2      	b.n	800d752 <_printf_float+0xae>
 800da0c:	464b      	mov	r3, r9
 800da0e:	463a      	mov	r2, r7
 800da10:	4659      	mov	r1, fp
 800da12:	4628      	mov	r0, r5
 800da14:	47b0      	blx	r6
 800da16:	3001      	adds	r0, #1
 800da18:	d1ea      	bne.n	800d9f0 <_printf_float+0x34c>
 800da1a:	e69a      	b.n	800d752 <_printf_float+0xae>
 800da1c:	2301      	movs	r3, #1
 800da1e:	4642      	mov	r2, r8
 800da20:	4659      	mov	r1, fp
 800da22:	4628      	mov	r0, r5
 800da24:	47b0      	blx	r6
 800da26:	3001      	adds	r0, #1
 800da28:	f43f ae93 	beq.w	800d752 <_printf_float+0xae>
 800da2c:	3701      	adds	r7, #1
 800da2e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800da32:	1a9b      	subs	r3, r3, r2
 800da34:	eba3 0309 	sub.w	r3, r3, r9
 800da38:	42bb      	cmp	r3, r7
 800da3a:	dcef      	bgt.n	800da1c <_printf_float+0x378>
 800da3c:	e74d      	b.n	800d8da <_printf_float+0x236>
 800da3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800da40:	2a01      	cmp	r2, #1
 800da42:	dc01      	bgt.n	800da48 <_printf_float+0x3a4>
 800da44:	07db      	lsls	r3, r3, #31
 800da46:	d538      	bpl.n	800daba <_printf_float+0x416>
 800da48:	2301      	movs	r3, #1
 800da4a:	463a      	mov	r2, r7
 800da4c:	4659      	mov	r1, fp
 800da4e:	4628      	mov	r0, r5
 800da50:	47b0      	blx	r6
 800da52:	3001      	adds	r0, #1
 800da54:	f43f ae7d 	beq.w	800d752 <_printf_float+0xae>
 800da58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da5c:	4659      	mov	r1, fp
 800da5e:	4628      	mov	r0, r5
 800da60:	47b0      	blx	r6
 800da62:	3001      	adds	r0, #1
 800da64:	f107 0701 	add.w	r7, r7, #1
 800da68:	f43f ae73 	beq.w	800d752 <_printf_float+0xae>
 800da6c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800da72:	2200      	movs	r2, #0
 800da74:	f103 38ff 	add.w	r8, r3, #4294967295
 800da78:	2300      	movs	r3, #0
 800da7a:	f7f2 ffd1 	bl	8000a20 <__aeabi_dcmpeq>
 800da7e:	b9c0      	cbnz	r0, 800dab2 <_printf_float+0x40e>
 800da80:	4643      	mov	r3, r8
 800da82:	463a      	mov	r2, r7
 800da84:	4659      	mov	r1, fp
 800da86:	4628      	mov	r0, r5
 800da88:	47b0      	blx	r6
 800da8a:	3001      	adds	r0, #1
 800da8c:	d10d      	bne.n	800daaa <_printf_float+0x406>
 800da8e:	e660      	b.n	800d752 <_printf_float+0xae>
 800da90:	2301      	movs	r3, #1
 800da92:	4642      	mov	r2, r8
 800da94:	4659      	mov	r1, fp
 800da96:	4628      	mov	r0, r5
 800da98:	47b0      	blx	r6
 800da9a:	3001      	adds	r0, #1
 800da9c:	f43f ae59 	beq.w	800d752 <_printf_float+0xae>
 800daa0:	3701      	adds	r7, #1
 800daa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800daa4:	3b01      	subs	r3, #1
 800daa6:	42bb      	cmp	r3, r7
 800daa8:	dcf2      	bgt.n	800da90 <_printf_float+0x3ec>
 800daaa:	464b      	mov	r3, r9
 800daac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dab0:	e6e4      	b.n	800d87c <_printf_float+0x1d8>
 800dab2:	2700      	movs	r7, #0
 800dab4:	f104 081a 	add.w	r8, r4, #26
 800dab8:	e7f3      	b.n	800daa2 <_printf_float+0x3fe>
 800daba:	2301      	movs	r3, #1
 800dabc:	e7e1      	b.n	800da82 <_printf_float+0x3de>
 800dabe:	2301      	movs	r3, #1
 800dac0:	4642      	mov	r2, r8
 800dac2:	4659      	mov	r1, fp
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b0      	blx	r6
 800dac8:	3001      	adds	r0, #1
 800daca:	f43f ae42 	beq.w	800d752 <_printf_float+0xae>
 800dace:	3701      	adds	r7, #1
 800dad0:	68e3      	ldr	r3, [r4, #12]
 800dad2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800dad4:	1a9b      	subs	r3, r3, r2
 800dad6:	42bb      	cmp	r3, r7
 800dad8:	dcf1      	bgt.n	800dabe <_printf_float+0x41a>
 800dada:	e702      	b.n	800d8e2 <_printf_float+0x23e>
 800dadc:	2700      	movs	r7, #0
 800dade:	f104 0819 	add.w	r8, r4, #25
 800dae2:	e7f5      	b.n	800dad0 <_printf_float+0x42c>
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	f43f ae94 	beq.w	800d812 <_printf_float+0x16e>
 800daea:	f04f 0c00 	mov.w	ip, #0
 800daee:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800daf2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800daf6:	6022      	str	r2, [r4, #0]
 800daf8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800dafc:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	463a      	mov	r2, r7
 800db04:	464b      	mov	r3, r9
 800db06:	4628      	mov	r0, r5
 800db08:	f7ff fd3a 	bl	800d580 <__cvt>
 800db0c:	4607      	mov	r7, r0
 800db0e:	e64f      	b.n	800d7b0 <_printf_float+0x10c>

0800db10 <_printf_common>:
 800db10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db14:	4691      	mov	r9, r2
 800db16:	461f      	mov	r7, r3
 800db18:	688a      	ldr	r2, [r1, #8]
 800db1a:	690b      	ldr	r3, [r1, #16]
 800db1c:	4606      	mov	r6, r0
 800db1e:	4293      	cmp	r3, r2
 800db20:	bfb8      	it	lt
 800db22:	4613      	movlt	r3, r2
 800db24:	f8c9 3000 	str.w	r3, [r9]
 800db28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800db2c:	460c      	mov	r4, r1
 800db2e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800db32:	b112      	cbz	r2, 800db3a <_printf_common+0x2a>
 800db34:	3301      	adds	r3, #1
 800db36:	f8c9 3000 	str.w	r3, [r9]
 800db3a:	6823      	ldr	r3, [r4, #0]
 800db3c:	0699      	lsls	r1, r3, #26
 800db3e:	bf42      	ittt	mi
 800db40:	f8d9 3000 	ldrmi.w	r3, [r9]
 800db44:	3302      	addmi	r3, #2
 800db46:	f8c9 3000 	strmi.w	r3, [r9]
 800db4a:	6825      	ldr	r5, [r4, #0]
 800db4c:	f015 0506 	ands.w	r5, r5, #6
 800db50:	d107      	bne.n	800db62 <_printf_common+0x52>
 800db52:	f104 0a19 	add.w	sl, r4, #25
 800db56:	68e3      	ldr	r3, [r4, #12]
 800db58:	f8d9 2000 	ldr.w	r2, [r9]
 800db5c:	1a9b      	subs	r3, r3, r2
 800db5e:	42ab      	cmp	r3, r5
 800db60:	dc29      	bgt.n	800dbb6 <_printf_common+0xa6>
 800db62:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800db66:	6822      	ldr	r2, [r4, #0]
 800db68:	3300      	adds	r3, #0
 800db6a:	bf18      	it	ne
 800db6c:	2301      	movne	r3, #1
 800db6e:	0692      	lsls	r2, r2, #26
 800db70:	d42e      	bmi.n	800dbd0 <_printf_common+0xc0>
 800db72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db76:	4639      	mov	r1, r7
 800db78:	4630      	mov	r0, r6
 800db7a:	47c0      	blx	r8
 800db7c:	3001      	adds	r0, #1
 800db7e:	d021      	beq.n	800dbc4 <_printf_common+0xb4>
 800db80:	6823      	ldr	r3, [r4, #0]
 800db82:	68e5      	ldr	r5, [r4, #12]
 800db84:	f003 0306 	and.w	r3, r3, #6
 800db88:	2b04      	cmp	r3, #4
 800db8a:	bf18      	it	ne
 800db8c:	2500      	movne	r5, #0
 800db8e:	f8d9 2000 	ldr.w	r2, [r9]
 800db92:	f04f 0900 	mov.w	r9, #0
 800db96:	bf08      	it	eq
 800db98:	1aad      	subeq	r5, r5, r2
 800db9a:	68a3      	ldr	r3, [r4, #8]
 800db9c:	6922      	ldr	r2, [r4, #16]
 800db9e:	bf08      	it	eq
 800dba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dba4:	4293      	cmp	r3, r2
 800dba6:	bfc4      	itt	gt
 800dba8:	1a9b      	subgt	r3, r3, r2
 800dbaa:	18ed      	addgt	r5, r5, r3
 800dbac:	341a      	adds	r4, #26
 800dbae:	454d      	cmp	r5, r9
 800dbb0:	d11a      	bne.n	800dbe8 <_printf_common+0xd8>
 800dbb2:	2000      	movs	r0, #0
 800dbb4:	e008      	b.n	800dbc8 <_printf_common+0xb8>
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	4652      	mov	r2, sl
 800dbba:	4639      	mov	r1, r7
 800dbbc:	4630      	mov	r0, r6
 800dbbe:	47c0      	blx	r8
 800dbc0:	3001      	adds	r0, #1
 800dbc2:	d103      	bne.n	800dbcc <_printf_common+0xbc>
 800dbc4:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbcc:	3501      	adds	r5, #1
 800dbce:	e7c2      	b.n	800db56 <_printf_common+0x46>
 800dbd0:	2030      	movs	r0, #48	; 0x30
 800dbd2:	18e1      	adds	r1, r4, r3
 800dbd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dbd8:	1c5a      	adds	r2, r3, #1
 800dbda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dbde:	4422      	add	r2, r4
 800dbe0:	3302      	adds	r3, #2
 800dbe2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dbe6:	e7c4      	b.n	800db72 <_printf_common+0x62>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	4622      	mov	r2, r4
 800dbec:	4639      	mov	r1, r7
 800dbee:	4630      	mov	r0, r6
 800dbf0:	47c0      	blx	r8
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	d0e6      	beq.n	800dbc4 <_printf_common+0xb4>
 800dbf6:	f109 0901 	add.w	r9, r9, #1
 800dbfa:	e7d8      	b.n	800dbae <_printf_common+0x9e>

0800dbfc <_printf_i>:
 800dbfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc00:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dc04:	460c      	mov	r4, r1
 800dc06:	7e09      	ldrb	r1, [r1, #24]
 800dc08:	b085      	sub	sp, #20
 800dc0a:	296e      	cmp	r1, #110	; 0x6e
 800dc0c:	4617      	mov	r7, r2
 800dc0e:	4606      	mov	r6, r0
 800dc10:	4698      	mov	r8, r3
 800dc12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc14:	f000 80b3 	beq.w	800dd7e <_printf_i+0x182>
 800dc18:	d822      	bhi.n	800dc60 <_printf_i+0x64>
 800dc1a:	2963      	cmp	r1, #99	; 0x63
 800dc1c:	d036      	beq.n	800dc8c <_printf_i+0x90>
 800dc1e:	d80a      	bhi.n	800dc36 <_printf_i+0x3a>
 800dc20:	2900      	cmp	r1, #0
 800dc22:	f000 80b9 	beq.w	800dd98 <_printf_i+0x19c>
 800dc26:	2958      	cmp	r1, #88	; 0x58
 800dc28:	f000 8083 	beq.w	800dd32 <_printf_i+0x136>
 800dc2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc30:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dc34:	e032      	b.n	800dc9c <_printf_i+0xa0>
 800dc36:	2964      	cmp	r1, #100	; 0x64
 800dc38:	d001      	beq.n	800dc3e <_printf_i+0x42>
 800dc3a:	2969      	cmp	r1, #105	; 0x69
 800dc3c:	d1f6      	bne.n	800dc2c <_printf_i+0x30>
 800dc3e:	6820      	ldr	r0, [r4, #0]
 800dc40:	6813      	ldr	r3, [r2, #0]
 800dc42:	0605      	lsls	r5, r0, #24
 800dc44:	f103 0104 	add.w	r1, r3, #4
 800dc48:	d52a      	bpl.n	800dca0 <_printf_i+0xa4>
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6011      	str	r1, [r2, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	da03      	bge.n	800dc5a <_printf_i+0x5e>
 800dc52:	222d      	movs	r2, #45	; 0x2d
 800dc54:	425b      	negs	r3, r3
 800dc56:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dc5a:	486f      	ldr	r0, [pc, #444]	; (800de18 <_printf_i+0x21c>)
 800dc5c:	220a      	movs	r2, #10
 800dc5e:	e039      	b.n	800dcd4 <_printf_i+0xd8>
 800dc60:	2973      	cmp	r1, #115	; 0x73
 800dc62:	f000 809d 	beq.w	800dda0 <_printf_i+0x1a4>
 800dc66:	d808      	bhi.n	800dc7a <_printf_i+0x7e>
 800dc68:	296f      	cmp	r1, #111	; 0x6f
 800dc6a:	d020      	beq.n	800dcae <_printf_i+0xb2>
 800dc6c:	2970      	cmp	r1, #112	; 0x70
 800dc6e:	d1dd      	bne.n	800dc2c <_printf_i+0x30>
 800dc70:	6823      	ldr	r3, [r4, #0]
 800dc72:	f043 0320 	orr.w	r3, r3, #32
 800dc76:	6023      	str	r3, [r4, #0]
 800dc78:	e003      	b.n	800dc82 <_printf_i+0x86>
 800dc7a:	2975      	cmp	r1, #117	; 0x75
 800dc7c:	d017      	beq.n	800dcae <_printf_i+0xb2>
 800dc7e:	2978      	cmp	r1, #120	; 0x78
 800dc80:	d1d4      	bne.n	800dc2c <_printf_i+0x30>
 800dc82:	2378      	movs	r3, #120	; 0x78
 800dc84:	4865      	ldr	r0, [pc, #404]	; (800de1c <_printf_i+0x220>)
 800dc86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc8a:	e055      	b.n	800dd38 <_printf_i+0x13c>
 800dc8c:	6813      	ldr	r3, [r2, #0]
 800dc8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc92:	1d19      	adds	r1, r3, #4
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	6011      	str	r1, [r2, #0]
 800dc98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e08c      	b.n	800ddba <_printf_i+0x1be>
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dca6:	6011      	str	r1, [r2, #0]
 800dca8:	bf18      	it	ne
 800dcaa:	b21b      	sxthne	r3, r3
 800dcac:	e7cf      	b.n	800dc4e <_printf_i+0x52>
 800dcae:	6813      	ldr	r3, [r2, #0]
 800dcb0:	6825      	ldr	r5, [r4, #0]
 800dcb2:	1d18      	adds	r0, r3, #4
 800dcb4:	6010      	str	r0, [r2, #0]
 800dcb6:	0628      	lsls	r0, r5, #24
 800dcb8:	d501      	bpl.n	800dcbe <_printf_i+0xc2>
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	e002      	b.n	800dcc4 <_printf_i+0xc8>
 800dcbe:	0668      	lsls	r0, r5, #25
 800dcc0:	d5fb      	bpl.n	800dcba <_printf_i+0xbe>
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	296f      	cmp	r1, #111	; 0x6f
 800dcc6:	bf14      	ite	ne
 800dcc8:	220a      	movne	r2, #10
 800dcca:	2208      	moveq	r2, #8
 800dccc:	4852      	ldr	r0, [pc, #328]	; (800de18 <_printf_i+0x21c>)
 800dcce:	2100      	movs	r1, #0
 800dcd0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dcd4:	6865      	ldr	r5, [r4, #4]
 800dcd6:	2d00      	cmp	r5, #0
 800dcd8:	60a5      	str	r5, [r4, #8]
 800dcda:	f2c0 8095 	blt.w	800de08 <_printf_i+0x20c>
 800dcde:	6821      	ldr	r1, [r4, #0]
 800dce0:	f021 0104 	bic.w	r1, r1, #4
 800dce4:	6021      	str	r1, [r4, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d13d      	bne.n	800dd66 <_printf_i+0x16a>
 800dcea:	2d00      	cmp	r5, #0
 800dcec:	f040 808e 	bne.w	800de0c <_printf_i+0x210>
 800dcf0:	4665      	mov	r5, ip
 800dcf2:	2a08      	cmp	r2, #8
 800dcf4:	d10b      	bne.n	800dd0e <_printf_i+0x112>
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	07db      	lsls	r3, r3, #31
 800dcfa:	d508      	bpl.n	800dd0e <_printf_i+0x112>
 800dcfc:	6923      	ldr	r3, [r4, #16]
 800dcfe:	6862      	ldr	r2, [r4, #4]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	bfde      	ittt	le
 800dd04:	2330      	movle	r3, #48	; 0x30
 800dd06:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dd0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dd0e:	ebac 0305 	sub.w	r3, ip, r5
 800dd12:	6123      	str	r3, [r4, #16]
 800dd14:	f8cd 8000 	str.w	r8, [sp]
 800dd18:	463b      	mov	r3, r7
 800dd1a:	aa03      	add	r2, sp, #12
 800dd1c:	4621      	mov	r1, r4
 800dd1e:	4630      	mov	r0, r6
 800dd20:	f7ff fef6 	bl	800db10 <_printf_common>
 800dd24:	3001      	adds	r0, #1
 800dd26:	d14d      	bne.n	800ddc4 <_printf_i+0x1c8>
 800dd28:	f04f 30ff 	mov.w	r0, #4294967295
 800dd2c:	b005      	add	sp, #20
 800dd2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd32:	4839      	ldr	r0, [pc, #228]	; (800de18 <_printf_i+0x21c>)
 800dd34:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dd38:	6813      	ldr	r3, [r2, #0]
 800dd3a:	6821      	ldr	r1, [r4, #0]
 800dd3c:	1d1d      	adds	r5, r3, #4
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	6015      	str	r5, [r2, #0]
 800dd42:	060a      	lsls	r2, r1, #24
 800dd44:	d50b      	bpl.n	800dd5e <_printf_i+0x162>
 800dd46:	07ca      	lsls	r2, r1, #31
 800dd48:	bf44      	itt	mi
 800dd4a:	f041 0120 	orrmi.w	r1, r1, #32
 800dd4e:	6021      	strmi	r1, [r4, #0]
 800dd50:	b91b      	cbnz	r3, 800dd5a <_printf_i+0x15e>
 800dd52:	6822      	ldr	r2, [r4, #0]
 800dd54:	f022 0220 	bic.w	r2, r2, #32
 800dd58:	6022      	str	r2, [r4, #0]
 800dd5a:	2210      	movs	r2, #16
 800dd5c:	e7b7      	b.n	800dcce <_printf_i+0xd2>
 800dd5e:	064d      	lsls	r5, r1, #25
 800dd60:	bf48      	it	mi
 800dd62:	b29b      	uxthmi	r3, r3
 800dd64:	e7ef      	b.n	800dd46 <_printf_i+0x14a>
 800dd66:	4665      	mov	r5, ip
 800dd68:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd6c:	fb02 3311 	mls	r3, r2, r1, r3
 800dd70:	5cc3      	ldrb	r3, [r0, r3]
 800dd72:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dd76:	460b      	mov	r3, r1
 800dd78:	2900      	cmp	r1, #0
 800dd7a:	d1f5      	bne.n	800dd68 <_printf_i+0x16c>
 800dd7c:	e7b9      	b.n	800dcf2 <_printf_i+0xf6>
 800dd7e:	6813      	ldr	r3, [r2, #0]
 800dd80:	6825      	ldr	r5, [r4, #0]
 800dd82:	1d18      	adds	r0, r3, #4
 800dd84:	6961      	ldr	r1, [r4, #20]
 800dd86:	6010      	str	r0, [r2, #0]
 800dd88:	0628      	lsls	r0, r5, #24
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	d501      	bpl.n	800dd92 <_printf_i+0x196>
 800dd8e:	6019      	str	r1, [r3, #0]
 800dd90:	e002      	b.n	800dd98 <_printf_i+0x19c>
 800dd92:	066a      	lsls	r2, r5, #25
 800dd94:	d5fb      	bpl.n	800dd8e <_printf_i+0x192>
 800dd96:	8019      	strh	r1, [r3, #0]
 800dd98:	2300      	movs	r3, #0
 800dd9a:	4665      	mov	r5, ip
 800dd9c:	6123      	str	r3, [r4, #16]
 800dd9e:	e7b9      	b.n	800dd14 <_printf_i+0x118>
 800dda0:	6813      	ldr	r3, [r2, #0]
 800dda2:	1d19      	adds	r1, r3, #4
 800dda4:	6011      	str	r1, [r2, #0]
 800dda6:	681d      	ldr	r5, [r3, #0]
 800dda8:	6862      	ldr	r2, [r4, #4]
 800ddaa:	2100      	movs	r1, #0
 800ddac:	4628      	mov	r0, r5
 800ddae:	f000 feb1 	bl	800eb14 <memchr>
 800ddb2:	b108      	cbz	r0, 800ddb8 <_printf_i+0x1bc>
 800ddb4:	1b40      	subs	r0, r0, r5
 800ddb6:	6060      	str	r0, [r4, #4]
 800ddb8:	6863      	ldr	r3, [r4, #4]
 800ddba:	6123      	str	r3, [r4, #16]
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddc2:	e7a7      	b.n	800dd14 <_printf_i+0x118>
 800ddc4:	6923      	ldr	r3, [r4, #16]
 800ddc6:	462a      	mov	r2, r5
 800ddc8:	4639      	mov	r1, r7
 800ddca:	4630      	mov	r0, r6
 800ddcc:	47c0      	blx	r8
 800ddce:	3001      	adds	r0, #1
 800ddd0:	d0aa      	beq.n	800dd28 <_printf_i+0x12c>
 800ddd2:	6823      	ldr	r3, [r4, #0]
 800ddd4:	079b      	lsls	r3, r3, #30
 800ddd6:	d413      	bmi.n	800de00 <_printf_i+0x204>
 800ddd8:	68e0      	ldr	r0, [r4, #12]
 800ddda:	9b03      	ldr	r3, [sp, #12]
 800dddc:	4298      	cmp	r0, r3
 800ddde:	bfb8      	it	lt
 800dde0:	4618      	movlt	r0, r3
 800dde2:	e7a3      	b.n	800dd2c <_printf_i+0x130>
 800dde4:	2301      	movs	r3, #1
 800dde6:	464a      	mov	r2, r9
 800dde8:	4639      	mov	r1, r7
 800ddea:	4630      	mov	r0, r6
 800ddec:	47c0      	blx	r8
 800ddee:	3001      	adds	r0, #1
 800ddf0:	d09a      	beq.n	800dd28 <_printf_i+0x12c>
 800ddf2:	3501      	adds	r5, #1
 800ddf4:	68e3      	ldr	r3, [r4, #12]
 800ddf6:	9a03      	ldr	r2, [sp, #12]
 800ddf8:	1a9b      	subs	r3, r3, r2
 800ddfa:	42ab      	cmp	r3, r5
 800ddfc:	dcf2      	bgt.n	800dde4 <_printf_i+0x1e8>
 800ddfe:	e7eb      	b.n	800ddd8 <_printf_i+0x1dc>
 800de00:	2500      	movs	r5, #0
 800de02:	f104 0919 	add.w	r9, r4, #25
 800de06:	e7f5      	b.n	800ddf4 <_printf_i+0x1f8>
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1ac      	bne.n	800dd66 <_printf_i+0x16a>
 800de0c:	7803      	ldrb	r3, [r0, #0]
 800de0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de16:	e76c      	b.n	800dcf2 <_printf_i+0xf6>
 800de18:	080102de 	.word	0x080102de
 800de1c:	080102ef 	.word	0x080102ef

0800de20 <siprintf>:
 800de20:	b40e      	push	{r1, r2, r3}
 800de22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800de26:	b500      	push	{lr}
 800de28:	b09c      	sub	sp, #112	; 0x70
 800de2a:	ab1d      	add	r3, sp, #116	; 0x74
 800de2c:	9002      	str	r0, [sp, #8]
 800de2e:	9006      	str	r0, [sp, #24]
 800de30:	9107      	str	r1, [sp, #28]
 800de32:	9104      	str	r1, [sp, #16]
 800de34:	4808      	ldr	r0, [pc, #32]	; (800de58 <siprintf+0x38>)
 800de36:	4909      	ldr	r1, [pc, #36]	; (800de5c <siprintf+0x3c>)
 800de38:	f853 2b04 	ldr.w	r2, [r3], #4
 800de3c:	9105      	str	r1, [sp, #20]
 800de3e:	6800      	ldr	r0, [r0, #0]
 800de40:	a902      	add	r1, sp, #8
 800de42:	9301      	str	r3, [sp, #4]
 800de44:	f001 fa6a 	bl	800f31c <_svfiprintf_r>
 800de48:	2200      	movs	r2, #0
 800de4a:	9b02      	ldr	r3, [sp, #8]
 800de4c:	701a      	strb	r2, [r3, #0]
 800de4e:	b01c      	add	sp, #112	; 0x70
 800de50:	f85d eb04 	ldr.w	lr, [sp], #4
 800de54:	b003      	add	sp, #12
 800de56:	4770      	bx	lr
 800de58:	20000064 	.word	0x20000064
 800de5c:	ffff0208 	.word	0xffff0208

0800de60 <quorem>:
 800de60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de64:	6903      	ldr	r3, [r0, #16]
 800de66:	690c      	ldr	r4, [r1, #16]
 800de68:	4680      	mov	r8, r0
 800de6a:	42a3      	cmp	r3, r4
 800de6c:	f2c0 8084 	blt.w	800df78 <quorem+0x118>
 800de70:	3c01      	subs	r4, #1
 800de72:	f101 0714 	add.w	r7, r1, #20
 800de76:	f100 0614 	add.w	r6, r0, #20
 800de7a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800de7e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800de82:	3501      	adds	r5, #1
 800de84:	fbb0 f5f5 	udiv	r5, r0, r5
 800de88:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800de8c:	eb06 030c 	add.w	r3, r6, ip
 800de90:	eb07 090c 	add.w	r9, r7, ip
 800de94:	9301      	str	r3, [sp, #4]
 800de96:	b39d      	cbz	r5, 800df00 <quorem+0xa0>
 800de98:	f04f 0a00 	mov.w	sl, #0
 800de9c:	4638      	mov	r0, r7
 800de9e:	46b6      	mov	lr, r6
 800dea0:	46d3      	mov	fp, sl
 800dea2:	f850 2b04 	ldr.w	r2, [r0], #4
 800dea6:	b293      	uxth	r3, r2
 800dea8:	fb05 a303 	mla	r3, r5, r3, sl
 800deac:	0c12      	lsrs	r2, r2, #16
 800deae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800deb2:	fb05 a202 	mla	r2, r5, r2, sl
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	ebab 0303 	sub.w	r3, fp, r3
 800debc:	f8de b000 	ldr.w	fp, [lr]
 800dec0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dec4:	fa1f fb8b 	uxth.w	fp, fp
 800dec8:	445b      	add	r3, fp
 800deca:	fa1f fb82 	uxth.w	fp, r2
 800dece:	f8de 2000 	ldr.w	r2, [lr]
 800ded2:	4581      	cmp	r9, r0
 800ded4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ded8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dedc:	b29b      	uxth	r3, r3
 800dede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dee2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dee6:	f84e 3b04 	str.w	r3, [lr], #4
 800deea:	d2da      	bcs.n	800dea2 <quorem+0x42>
 800deec:	f856 300c 	ldr.w	r3, [r6, ip]
 800def0:	b933      	cbnz	r3, 800df00 <quorem+0xa0>
 800def2:	9b01      	ldr	r3, [sp, #4]
 800def4:	3b04      	subs	r3, #4
 800def6:	429e      	cmp	r6, r3
 800def8:	461a      	mov	r2, r3
 800defa:	d331      	bcc.n	800df60 <quorem+0x100>
 800defc:	f8c8 4010 	str.w	r4, [r8, #16]
 800df00:	4640      	mov	r0, r8
 800df02:	f001 f835 	bl	800ef70 <__mcmp>
 800df06:	2800      	cmp	r0, #0
 800df08:	db26      	blt.n	800df58 <quorem+0xf8>
 800df0a:	4630      	mov	r0, r6
 800df0c:	f04f 0c00 	mov.w	ip, #0
 800df10:	3501      	adds	r5, #1
 800df12:	f857 1b04 	ldr.w	r1, [r7], #4
 800df16:	f8d0 e000 	ldr.w	lr, [r0]
 800df1a:	b28b      	uxth	r3, r1
 800df1c:	ebac 0303 	sub.w	r3, ip, r3
 800df20:	fa1f f28e 	uxth.w	r2, lr
 800df24:	4413      	add	r3, r2
 800df26:	0c0a      	lsrs	r2, r1, #16
 800df28:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800df2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df30:	b29b      	uxth	r3, r3
 800df32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df36:	45b9      	cmp	r9, r7
 800df38:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800df3c:	f840 3b04 	str.w	r3, [r0], #4
 800df40:	d2e7      	bcs.n	800df12 <quorem+0xb2>
 800df42:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800df46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800df4a:	b92a      	cbnz	r2, 800df58 <quorem+0xf8>
 800df4c:	3b04      	subs	r3, #4
 800df4e:	429e      	cmp	r6, r3
 800df50:	461a      	mov	r2, r3
 800df52:	d30b      	bcc.n	800df6c <quorem+0x10c>
 800df54:	f8c8 4010 	str.w	r4, [r8, #16]
 800df58:	4628      	mov	r0, r5
 800df5a:	b003      	add	sp, #12
 800df5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df60:	6812      	ldr	r2, [r2, #0]
 800df62:	3b04      	subs	r3, #4
 800df64:	2a00      	cmp	r2, #0
 800df66:	d1c9      	bne.n	800defc <quorem+0x9c>
 800df68:	3c01      	subs	r4, #1
 800df6a:	e7c4      	b.n	800def6 <quorem+0x96>
 800df6c:	6812      	ldr	r2, [r2, #0]
 800df6e:	3b04      	subs	r3, #4
 800df70:	2a00      	cmp	r2, #0
 800df72:	d1ef      	bne.n	800df54 <quorem+0xf4>
 800df74:	3c01      	subs	r4, #1
 800df76:	e7ea      	b.n	800df4e <quorem+0xee>
 800df78:	2000      	movs	r0, #0
 800df7a:	e7ee      	b.n	800df5a <quorem+0xfa>
 800df7c:	0000      	movs	r0, r0
	...

0800df80 <_dtoa_r>:
 800df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df84:	4616      	mov	r6, r2
 800df86:	461f      	mov	r7, r3
 800df88:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800df8a:	b095      	sub	sp, #84	; 0x54
 800df8c:	4604      	mov	r4, r0
 800df8e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800df92:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800df96:	b93d      	cbnz	r5, 800dfa8 <_dtoa_r+0x28>
 800df98:	2010      	movs	r0, #16
 800df9a:	f000 fdb3 	bl	800eb04 <malloc>
 800df9e:	6260      	str	r0, [r4, #36]	; 0x24
 800dfa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dfa4:	6005      	str	r5, [r0, #0]
 800dfa6:	60c5      	str	r5, [r0, #12]
 800dfa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfaa:	6819      	ldr	r1, [r3, #0]
 800dfac:	b151      	cbz	r1, 800dfc4 <_dtoa_r+0x44>
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	4093      	lsls	r3, r2
 800dfb4:	604a      	str	r2, [r1, #4]
 800dfb6:	608b      	str	r3, [r1, #8]
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 fdf8 	bl	800ebae <_Bfree>
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	1e3b      	subs	r3, r7, #0
 800dfc6:	bfaf      	iteee	ge
 800dfc8:	2300      	movge	r3, #0
 800dfca:	2201      	movlt	r2, #1
 800dfcc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800dfd0:	9303      	strlt	r3, [sp, #12]
 800dfd2:	bfac      	ite	ge
 800dfd4:	f8c8 3000 	strge.w	r3, [r8]
 800dfd8:	f8c8 2000 	strlt.w	r2, [r8]
 800dfdc:	4bae      	ldr	r3, [pc, #696]	; (800e298 <_dtoa_r+0x318>)
 800dfde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800dfe2:	ea33 0308 	bics.w	r3, r3, r8
 800dfe6:	d11b      	bne.n	800e020 <_dtoa_r+0xa0>
 800dfe8:	f242 730f 	movw	r3, #9999	; 0x270f
 800dfec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800dfee:	6013      	str	r3, [r2, #0]
 800dff0:	9b02      	ldr	r3, [sp, #8]
 800dff2:	b923      	cbnz	r3, 800dffe <_dtoa_r+0x7e>
 800dff4:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f000 8545 	beq.w	800ea88 <_dtoa_r+0xb08>
 800dffe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e000:	b953      	cbnz	r3, 800e018 <_dtoa_r+0x98>
 800e002:	4ba6      	ldr	r3, [pc, #664]	; (800e29c <_dtoa_r+0x31c>)
 800e004:	e021      	b.n	800e04a <_dtoa_r+0xca>
 800e006:	4ba6      	ldr	r3, [pc, #664]	; (800e2a0 <_dtoa_r+0x320>)
 800e008:	9306      	str	r3, [sp, #24]
 800e00a:	3308      	adds	r3, #8
 800e00c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e00e:	6013      	str	r3, [r2, #0]
 800e010:	9806      	ldr	r0, [sp, #24]
 800e012:	b015      	add	sp, #84	; 0x54
 800e014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e018:	4ba0      	ldr	r3, [pc, #640]	; (800e29c <_dtoa_r+0x31c>)
 800e01a:	9306      	str	r3, [sp, #24]
 800e01c:	3303      	adds	r3, #3
 800e01e:	e7f5      	b.n	800e00c <_dtoa_r+0x8c>
 800e020:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e024:	2200      	movs	r2, #0
 800e026:	2300      	movs	r3, #0
 800e028:	4630      	mov	r0, r6
 800e02a:	4639      	mov	r1, r7
 800e02c:	f7f2 fcf8 	bl	8000a20 <__aeabi_dcmpeq>
 800e030:	4682      	mov	sl, r0
 800e032:	b160      	cbz	r0, 800e04e <_dtoa_r+0xce>
 800e034:	2301      	movs	r3, #1
 800e036:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e038:	6013      	str	r3, [r2, #0]
 800e03a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f000 8520 	beq.w	800ea82 <_dtoa_r+0xb02>
 800e042:	4b98      	ldr	r3, [pc, #608]	; (800e2a4 <_dtoa_r+0x324>)
 800e044:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e046:	6013      	str	r3, [r2, #0]
 800e048:	3b01      	subs	r3, #1
 800e04a:	9306      	str	r3, [sp, #24]
 800e04c:	e7e0      	b.n	800e010 <_dtoa_r+0x90>
 800e04e:	ab12      	add	r3, sp, #72	; 0x48
 800e050:	9301      	str	r3, [sp, #4]
 800e052:	ab13      	add	r3, sp, #76	; 0x4c
 800e054:	9300      	str	r3, [sp, #0]
 800e056:	4632      	mov	r2, r6
 800e058:	463b      	mov	r3, r7
 800e05a:	4620      	mov	r0, r4
 800e05c:	f001 f800 	bl	800f060 <__d2b>
 800e060:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e064:	4683      	mov	fp, r0
 800e066:	2d00      	cmp	r5, #0
 800e068:	d07d      	beq.n	800e166 <_dtoa_r+0x1e6>
 800e06a:	46b0      	mov	r8, r6
 800e06c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e070:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800e074:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800e078:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e07c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800e080:	2200      	movs	r2, #0
 800e082:	4b89      	ldr	r3, [pc, #548]	; (800e2a8 <_dtoa_r+0x328>)
 800e084:	4640      	mov	r0, r8
 800e086:	4649      	mov	r1, r9
 800e088:	f7f2 f8aa 	bl	80001e0 <__aeabi_dsub>
 800e08c:	a37c      	add	r3, pc, #496	; (adr r3, 800e280 <_dtoa_r+0x300>)
 800e08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e092:	f7f2 fa5d 	bl	8000550 <__aeabi_dmul>
 800e096:	a37c      	add	r3, pc, #496	; (adr r3, 800e288 <_dtoa_r+0x308>)
 800e098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e09c:	f7f2 f8a2 	bl	80001e4 <__adddf3>
 800e0a0:	4606      	mov	r6, r0
 800e0a2:	4628      	mov	r0, r5
 800e0a4:	460f      	mov	r7, r1
 800e0a6:	f7f2 f9e9 	bl	800047c <__aeabi_i2d>
 800e0aa:	a379      	add	r3, pc, #484	; (adr r3, 800e290 <_dtoa_r+0x310>)
 800e0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0b0:	f7f2 fa4e 	bl	8000550 <__aeabi_dmul>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	4630      	mov	r0, r6
 800e0ba:	4639      	mov	r1, r7
 800e0bc:	f7f2 f892 	bl	80001e4 <__adddf3>
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	460f      	mov	r7, r1
 800e0c4:	f7f2 fcf4 	bl	8000ab0 <__aeabi_d2iz>
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	4682      	mov	sl, r0
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	4630      	mov	r0, r6
 800e0d0:	4639      	mov	r1, r7
 800e0d2:	f7f2 fcaf 	bl	8000a34 <__aeabi_dcmplt>
 800e0d6:	b148      	cbz	r0, 800e0ec <_dtoa_r+0x16c>
 800e0d8:	4650      	mov	r0, sl
 800e0da:	f7f2 f9cf 	bl	800047c <__aeabi_i2d>
 800e0de:	4632      	mov	r2, r6
 800e0e0:	463b      	mov	r3, r7
 800e0e2:	f7f2 fc9d 	bl	8000a20 <__aeabi_dcmpeq>
 800e0e6:	b908      	cbnz	r0, 800e0ec <_dtoa_r+0x16c>
 800e0e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0ec:	f1ba 0f16 	cmp.w	sl, #22
 800e0f0:	d85a      	bhi.n	800e1a8 <_dtoa_r+0x228>
 800e0f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0f6:	496d      	ldr	r1, [pc, #436]	; (800e2ac <_dtoa_r+0x32c>)
 800e0f8:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e0fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e100:	f7f2 fcb6 	bl	8000a70 <__aeabi_dcmpgt>
 800e104:	2800      	cmp	r0, #0
 800e106:	d051      	beq.n	800e1ac <_dtoa_r+0x22c>
 800e108:	2300      	movs	r3, #0
 800e10a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e10e:	930d      	str	r3, [sp, #52]	; 0x34
 800e110:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e112:	1b5d      	subs	r5, r3, r5
 800e114:	1e6b      	subs	r3, r5, #1
 800e116:	9307      	str	r3, [sp, #28]
 800e118:	bf43      	ittte	mi
 800e11a:	2300      	movmi	r3, #0
 800e11c:	f1c5 0901 	rsbmi	r9, r5, #1
 800e120:	9307      	strmi	r3, [sp, #28]
 800e122:	f04f 0900 	movpl.w	r9, #0
 800e126:	f1ba 0f00 	cmp.w	sl, #0
 800e12a:	db41      	blt.n	800e1b0 <_dtoa_r+0x230>
 800e12c:	9b07      	ldr	r3, [sp, #28]
 800e12e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800e132:	4453      	add	r3, sl
 800e134:	9307      	str	r3, [sp, #28]
 800e136:	2300      	movs	r3, #0
 800e138:	9308      	str	r3, [sp, #32]
 800e13a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e13c:	2b09      	cmp	r3, #9
 800e13e:	f200 808f 	bhi.w	800e260 <_dtoa_r+0x2e0>
 800e142:	2b05      	cmp	r3, #5
 800e144:	bfc4      	itt	gt
 800e146:	3b04      	subgt	r3, #4
 800e148:	931e      	strgt	r3, [sp, #120]	; 0x78
 800e14a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e14c:	bfc8      	it	gt
 800e14e:	2500      	movgt	r5, #0
 800e150:	f1a3 0302 	sub.w	r3, r3, #2
 800e154:	bfd8      	it	le
 800e156:	2501      	movle	r5, #1
 800e158:	2b03      	cmp	r3, #3
 800e15a:	f200 808d 	bhi.w	800e278 <_dtoa_r+0x2f8>
 800e15e:	e8df f003 	tbb	[pc, r3]
 800e162:	7d7b      	.short	0x7d7b
 800e164:	6f2f      	.short	0x6f2f
 800e166:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e16a:	441d      	add	r5, r3
 800e16c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e170:	2820      	cmp	r0, #32
 800e172:	dd13      	ble.n	800e19c <_dtoa_r+0x21c>
 800e174:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e178:	9b02      	ldr	r3, [sp, #8]
 800e17a:	fa08 f800 	lsl.w	r8, r8, r0
 800e17e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e182:	fa23 f000 	lsr.w	r0, r3, r0
 800e186:	ea48 0000 	orr.w	r0, r8, r0
 800e18a:	f7f2 f967 	bl	800045c <__aeabi_ui2d>
 800e18e:	2301      	movs	r3, #1
 800e190:	4680      	mov	r8, r0
 800e192:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800e196:	3d01      	subs	r5, #1
 800e198:	9310      	str	r3, [sp, #64]	; 0x40
 800e19a:	e771      	b.n	800e080 <_dtoa_r+0x100>
 800e19c:	9b02      	ldr	r3, [sp, #8]
 800e19e:	f1c0 0020 	rsb	r0, r0, #32
 800e1a2:	fa03 f000 	lsl.w	r0, r3, r0
 800e1a6:	e7f0      	b.n	800e18a <_dtoa_r+0x20a>
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	e7b0      	b.n	800e10e <_dtoa_r+0x18e>
 800e1ac:	900d      	str	r0, [sp, #52]	; 0x34
 800e1ae:	e7af      	b.n	800e110 <_dtoa_r+0x190>
 800e1b0:	f1ca 0300 	rsb	r3, sl, #0
 800e1b4:	9308      	str	r3, [sp, #32]
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	eba9 090a 	sub.w	r9, r9, sl
 800e1bc:	930c      	str	r3, [sp, #48]	; 0x30
 800e1be:	e7bc      	b.n	800e13a <_dtoa_r+0x1ba>
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e1c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	dd74      	ble.n	800e2b4 <_dtoa_r+0x334>
 800e1ca:	4698      	mov	r8, r3
 800e1cc:	9304      	str	r3, [sp, #16]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e1d2:	6072      	str	r2, [r6, #4]
 800e1d4:	2204      	movs	r2, #4
 800e1d6:	f102 0014 	add.w	r0, r2, #20
 800e1da:	4298      	cmp	r0, r3
 800e1dc:	6871      	ldr	r1, [r6, #4]
 800e1de:	d96e      	bls.n	800e2be <_dtoa_r+0x33e>
 800e1e0:	4620      	mov	r0, r4
 800e1e2:	f000 fcb0 	bl	800eb46 <_Balloc>
 800e1e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1e8:	6030      	str	r0, [r6, #0]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f1b8 0f0e 	cmp.w	r8, #14
 800e1f0:	9306      	str	r3, [sp, #24]
 800e1f2:	f200 80ed 	bhi.w	800e3d0 <_dtoa_r+0x450>
 800e1f6:	2d00      	cmp	r5, #0
 800e1f8:	f000 80ea 	beq.w	800e3d0 <_dtoa_r+0x450>
 800e1fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e200:	f1ba 0f00 	cmp.w	sl, #0
 800e204:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e208:	dd77      	ble.n	800e2fa <_dtoa_r+0x37a>
 800e20a:	4a28      	ldr	r2, [pc, #160]	; (800e2ac <_dtoa_r+0x32c>)
 800e20c:	f00a 030f 	and.w	r3, sl, #15
 800e210:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e214:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e218:	06f0      	lsls	r0, r6, #27
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e222:	d568      	bpl.n	800e2f6 <_dtoa_r+0x376>
 800e224:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e228:	4b21      	ldr	r3, [pc, #132]	; (800e2b0 <_dtoa_r+0x330>)
 800e22a:	2503      	movs	r5, #3
 800e22c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e230:	f7f2 fab8 	bl	80007a4 <__aeabi_ddiv>
 800e234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e238:	f006 060f 	and.w	r6, r6, #15
 800e23c:	4f1c      	ldr	r7, [pc, #112]	; (800e2b0 <_dtoa_r+0x330>)
 800e23e:	e04f      	b.n	800e2e0 <_dtoa_r+0x360>
 800e240:	2301      	movs	r3, #1
 800e242:	9309      	str	r3, [sp, #36]	; 0x24
 800e244:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e246:	4453      	add	r3, sl
 800e248:	f103 0801 	add.w	r8, r3, #1
 800e24c:	9304      	str	r3, [sp, #16]
 800e24e:	4643      	mov	r3, r8
 800e250:	2b01      	cmp	r3, #1
 800e252:	bfb8      	it	lt
 800e254:	2301      	movlt	r3, #1
 800e256:	e7ba      	b.n	800e1ce <_dtoa_r+0x24e>
 800e258:	2300      	movs	r3, #0
 800e25a:	e7b2      	b.n	800e1c2 <_dtoa_r+0x242>
 800e25c:	2300      	movs	r3, #0
 800e25e:	e7f0      	b.n	800e242 <_dtoa_r+0x2c2>
 800e260:	2501      	movs	r5, #1
 800e262:	2300      	movs	r3, #0
 800e264:	9509      	str	r5, [sp, #36]	; 0x24
 800e266:	931e      	str	r3, [sp, #120]	; 0x78
 800e268:	f04f 33ff 	mov.w	r3, #4294967295
 800e26c:	2200      	movs	r2, #0
 800e26e:	9304      	str	r3, [sp, #16]
 800e270:	4698      	mov	r8, r3
 800e272:	2312      	movs	r3, #18
 800e274:	921f      	str	r2, [sp, #124]	; 0x7c
 800e276:	e7aa      	b.n	800e1ce <_dtoa_r+0x24e>
 800e278:	2301      	movs	r3, #1
 800e27a:	9309      	str	r3, [sp, #36]	; 0x24
 800e27c:	e7f4      	b.n	800e268 <_dtoa_r+0x2e8>
 800e27e:	bf00      	nop
 800e280:	636f4361 	.word	0x636f4361
 800e284:	3fd287a7 	.word	0x3fd287a7
 800e288:	8b60c8b3 	.word	0x8b60c8b3
 800e28c:	3fc68a28 	.word	0x3fc68a28
 800e290:	509f79fb 	.word	0x509f79fb
 800e294:	3fd34413 	.word	0x3fd34413
 800e298:	7ff00000 	.word	0x7ff00000
 800e29c:	08010309 	.word	0x08010309
 800e2a0:	08010300 	.word	0x08010300
 800e2a4:	080102dd 	.word	0x080102dd
 800e2a8:	3ff80000 	.word	0x3ff80000
 800e2ac:	08010338 	.word	0x08010338
 800e2b0:	08010310 	.word	0x08010310
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	9304      	str	r3, [sp, #16]
 800e2b8:	4698      	mov	r8, r3
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	e7da      	b.n	800e274 <_dtoa_r+0x2f4>
 800e2be:	3101      	adds	r1, #1
 800e2c0:	6071      	str	r1, [r6, #4]
 800e2c2:	0052      	lsls	r2, r2, #1
 800e2c4:	e787      	b.n	800e1d6 <_dtoa_r+0x256>
 800e2c6:	07f1      	lsls	r1, r6, #31
 800e2c8:	d508      	bpl.n	800e2dc <_dtoa_r+0x35c>
 800e2ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e2ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2d2:	f7f2 f93d 	bl	8000550 <__aeabi_dmul>
 800e2d6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e2da:	3501      	adds	r5, #1
 800e2dc:	1076      	asrs	r6, r6, #1
 800e2de:	3708      	adds	r7, #8
 800e2e0:	2e00      	cmp	r6, #0
 800e2e2:	d1f0      	bne.n	800e2c6 <_dtoa_r+0x346>
 800e2e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e2e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2ec:	f7f2 fa5a 	bl	80007a4 <__aeabi_ddiv>
 800e2f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e2f4:	e01b      	b.n	800e32e <_dtoa_r+0x3ae>
 800e2f6:	2502      	movs	r5, #2
 800e2f8:	e7a0      	b.n	800e23c <_dtoa_r+0x2bc>
 800e2fa:	f000 80a4 	beq.w	800e446 <_dtoa_r+0x4c6>
 800e2fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e302:	f1ca 0600 	rsb	r6, sl, #0
 800e306:	4ba0      	ldr	r3, [pc, #640]	; (800e588 <_dtoa_r+0x608>)
 800e308:	f006 020f 	and.w	r2, r6, #15
 800e30c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f7f2 f91c 	bl	8000550 <__aeabi_dmul>
 800e318:	2502      	movs	r5, #2
 800e31a:	2300      	movs	r3, #0
 800e31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e320:	4f9a      	ldr	r7, [pc, #616]	; (800e58c <_dtoa_r+0x60c>)
 800e322:	1136      	asrs	r6, r6, #4
 800e324:	2e00      	cmp	r6, #0
 800e326:	f040 8083 	bne.w	800e430 <_dtoa_r+0x4b0>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1e0      	bne.n	800e2f0 <_dtoa_r+0x370>
 800e32e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e330:	2b00      	cmp	r3, #0
 800e332:	f000 808a 	beq.w	800e44a <_dtoa_r+0x4ca>
 800e336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e33a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e33e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e342:	2200      	movs	r2, #0
 800e344:	4b92      	ldr	r3, [pc, #584]	; (800e590 <_dtoa_r+0x610>)
 800e346:	f7f2 fb75 	bl	8000a34 <__aeabi_dcmplt>
 800e34a:	2800      	cmp	r0, #0
 800e34c:	d07d      	beq.n	800e44a <_dtoa_r+0x4ca>
 800e34e:	f1b8 0f00 	cmp.w	r8, #0
 800e352:	d07a      	beq.n	800e44a <_dtoa_r+0x4ca>
 800e354:	9b04      	ldr	r3, [sp, #16]
 800e356:	2b00      	cmp	r3, #0
 800e358:	dd36      	ble.n	800e3c8 <_dtoa_r+0x448>
 800e35a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e35e:	2200      	movs	r2, #0
 800e360:	4b8c      	ldr	r3, [pc, #560]	; (800e594 <_dtoa_r+0x614>)
 800e362:	f7f2 f8f5 	bl	8000550 <__aeabi_dmul>
 800e366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e36a:	9e04      	ldr	r6, [sp, #16]
 800e36c:	f10a 37ff 	add.w	r7, sl, #4294967295
 800e370:	3501      	adds	r5, #1
 800e372:	4628      	mov	r0, r5
 800e374:	f7f2 f882 	bl	800047c <__aeabi_i2d>
 800e378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e37c:	f7f2 f8e8 	bl	8000550 <__aeabi_dmul>
 800e380:	2200      	movs	r2, #0
 800e382:	4b85      	ldr	r3, [pc, #532]	; (800e598 <_dtoa_r+0x618>)
 800e384:	f7f1 ff2e 	bl	80001e4 <__adddf3>
 800e388:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800e38c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e390:	950b      	str	r5, [sp, #44]	; 0x2c
 800e392:	2e00      	cmp	r6, #0
 800e394:	d15c      	bne.n	800e450 <_dtoa_r+0x4d0>
 800e396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e39a:	2200      	movs	r2, #0
 800e39c:	4b7f      	ldr	r3, [pc, #508]	; (800e59c <_dtoa_r+0x61c>)
 800e39e:	f7f1 ff1f 	bl	80001e0 <__aeabi_dsub>
 800e3a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3a4:	462b      	mov	r3, r5
 800e3a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3aa:	f7f2 fb61 	bl	8000a70 <__aeabi_dcmpgt>
 800e3ae:	2800      	cmp	r0, #0
 800e3b0:	f040 8281 	bne.w	800e8b6 <_dtoa_r+0x936>
 800e3b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e3ba:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800e3be:	f7f2 fb39 	bl	8000a34 <__aeabi_dcmplt>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	f040 8275 	bne.w	800e8b2 <_dtoa_r+0x932>
 800e3c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e3cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e3d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f2c0 814b 	blt.w	800e66e <_dtoa_r+0x6ee>
 800e3d8:	f1ba 0f0e 	cmp.w	sl, #14
 800e3dc:	f300 8147 	bgt.w	800e66e <_dtoa_r+0x6ee>
 800e3e0:	4b69      	ldr	r3, [pc, #420]	; (800e588 <_dtoa_r+0x608>)
 800e3e2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e3e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e3ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	f280 80d7 	bge.w	800e5a4 <_dtoa_r+0x624>
 800e3f6:	f1b8 0f00 	cmp.w	r8, #0
 800e3fa:	f300 80d3 	bgt.w	800e5a4 <_dtoa_r+0x624>
 800e3fe:	f040 8257 	bne.w	800e8b0 <_dtoa_r+0x930>
 800e402:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e406:	2200      	movs	r2, #0
 800e408:	4b64      	ldr	r3, [pc, #400]	; (800e59c <_dtoa_r+0x61c>)
 800e40a:	f7f2 f8a1 	bl	8000550 <__aeabi_dmul>
 800e40e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e412:	f7f2 fb23 	bl	8000a5c <__aeabi_dcmpge>
 800e416:	4646      	mov	r6, r8
 800e418:	4647      	mov	r7, r8
 800e41a:	2800      	cmp	r0, #0
 800e41c:	f040 822d 	bne.w	800e87a <_dtoa_r+0x8fa>
 800e420:	9b06      	ldr	r3, [sp, #24]
 800e422:	9a06      	ldr	r2, [sp, #24]
 800e424:	1c5d      	adds	r5, r3, #1
 800e426:	2331      	movs	r3, #49	; 0x31
 800e428:	f10a 0a01 	add.w	sl, sl, #1
 800e42c:	7013      	strb	r3, [r2, #0]
 800e42e:	e228      	b.n	800e882 <_dtoa_r+0x902>
 800e430:	07f2      	lsls	r2, r6, #31
 800e432:	d505      	bpl.n	800e440 <_dtoa_r+0x4c0>
 800e434:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e438:	f7f2 f88a 	bl	8000550 <__aeabi_dmul>
 800e43c:	2301      	movs	r3, #1
 800e43e:	3501      	adds	r5, #1
 800e440:	1076      	asrs	r6, r6, #1
 800e442:	3708      	adds	r7, #8
 800e444:	e76e      	b.n	800e324 <_dtoa_r+0x3a4>
 800e446:	2502      	movs	r5, #2
 800e448:	e771      	b.n	800e32e <_dtoa_r+0x3ae>
 800e44a:	4657      	mov	r7, sl
 800e44c:	4646      	mov	r6, r8
 800e44e:	e790      	b.n	800e372 <_dtoa_r+0x3f2>
 800e450:	4b4d      	ldr	r3, [pc, #308]	; (800e588 <_dtoa_r+0x608>)
 800e452:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e456:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d048      	beq.n	800e4f2 <_dtoa_r+0x572>
 800e460:	4602      	mov	r2, r0
 800e462:	460b      	mov	r3, r1
 800e464:	2000      	movs	r0, #0
 800e466:	494e      	ldr	r1, [pc, #312]	; (800e5a0 <_dtoa_r+0x620>)
 800e468:	f7f2 f99c 	bl	80007a4 <__aeabi_ddiv>
 800e46c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e470:	f7f1 feb6 	bl	80001e0 <__aeabi_dsub>
 800e474:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e478:	9d06      	ldr	r5, [sp, #24]
 800e47a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e47e:	f7f2 fb17 	bl	8000ab0 <__aeabi_d2iz>
 800e482:	9011      	str	r0, [sp, #68]	; 0x44
 800e484:	f7f1 fffa 	bl	800047c <__aeabi_i2d>
 800e488:	4602      	mov	r2, r0
 800e48a:	460b      	mov	r3, r1
 800e48c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e490:	f7f1 fea6 	bl	80001e0 <__aeabi_dsub>
 800e494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e49a:	3330      	adds	r3, #48	; 0x30
 800e49c:	f805 3b01 	strb.w	r3, [r5], #1
 800e4a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4a4:	f7f2 fac6 	bl	8000a34 <__aeabi_dcmplt>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d163      	bne.n	800e574 <_dtoa_r+0x5f4>
 800e4ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4b0:	2000      	movs	r0, #0
 800e4b2:	4937      	ldr	r1, [pc, #220]	; (800e590 <_dtoa_r+0x610>)
 800e4b4:	f7f1 fe94 	bl	80001e0 <__aeabi_dsub>
 800e4b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4bc:	f7f2 faba 	bl	8000a34 <__aeabi_dcmplt>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	f040 80b5 	bne.w	800e630 <_dtoa_r+0x6b0>
 800e4c6:	9b06      	ldr	r3, [sp, #24]
 800e4c8:	1aeb      	subs	r3, r5, r3
 800e4ca:	429e      	cmp	r6, r3
 800e4cc:	f77f af7c 	ble.w	800e3c8 <_dtoa_r+0x448>
 800e4d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	4b2f      	ldr	r3, [pc, #188]	; (800e594 <_dtoa_r+0x614>)
 800e4d8:	f7f2 f83a 	bl	8000550 <__aeabi_dmul>
 800e4dc:	2200      	movs	r2, #0
 800e4de:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e4e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e4e6:	4b2b      	ldr	r3, [pc, #172]	; (800e594 <_dtoa_r+0x614>)
 800e4e8:	f7f2 f832 	bl	8000550 <__aeabi_dmul>
 800e4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f0:	e7c3      	b.n	800e47a <_dtoa_r+0x4fa>
 800e4f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e4f6:	f7f2 f82b 	bl	8000550 <__aeabi_dmul>
 800e4fa:	9b06      	ldr	r3, [sp, #24]
 800e4fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800e500:	199d      	adds	r5, r3, r6
 800e502:	461e      	mov	r6, r3
 800e504:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e508:	f7f2 fad2 	bl	8000ab0 <__aeabi_d2iz>
 800e50c:	9011      	str	r0, [sp, #68]	; 0x44
 800e50e:	f7f1 ffb5 	bl	800047c <__aeabi_i2d>
 800e512:	4602      	mov	r2, r0
 800e514:	460b      	mov	r3, r1
 800e516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e51a:	f7f1 fe61 	bl	80001e0 <__aeabi_dsub>
 800e51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e520:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e524:	3330      	adds	r3, #48	; 0x30
 800e526:	f806 3b01 	strb.w	r3, [r6], #1
 800e52a:	42ae      	cmp	r6, r5
 800e52c:	f04f 0200 	mov.w	r2, #0
 800e530:	d124      	bne.n	800e57c <_dtoa_r+0x5fc>
 800e532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e536:	4b1a      	ldr	r3, [pc, #104]	; (800e5a0 <_dtoa_r+0x620>)
 800e538:	f7f1 fe54 	bl	80001e4 <__adddf3>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e544:	f7f2 fa94 	bl	8000a70 <__aeabi_dcmpgt>
 800e548:	2800      	cmp	r0, #0
 800e54a:	d171      	bne.n	800e630 <_dtoa_r+0x6b0>
 800e54c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800e550:	2000      	movs	r0, #0
 800e552:	4913      	ldr	r1, [pc, #76]	; (800e5a0 <_dtoa_r+0x620>)
 800e554:	f7f1 fe44 	bl	80001e0 <__aeabi_dsub>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e560:	f7f2 fa68 	bl	8000a34 <__aeabi_dcmplt>
 800e564:	2800      	cmp	r0, #0
 800e566:	f43f af2f 	beq.w	800e3c8 <_dtoa_r+0x448>
 800e56a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e56e:	1e6a      	subs	r2, r5, #1
 800e570:	2b30      	cmp	r3, #48	; 0x30
 800e572:	d001      	beq.n	800e578 <_dtoa_r+0x5f8>
 800e574:	46ba      	mov	sl, r7
 800e576:	e04a      	b.n	800e60e <_dtoa_r+0x68e>
 800e578:	4615      	mov	r5, r2
 800e57a:	e7f6      	b.n	800e56a <_dtoa_r+0x5ea>
 800e57c:	4b05      	ldr	r3, [pc, #20]	; (800e594 <_dtoa_r+0x614>)
 800e57e:	f7f1 ffe7 	bl	8000550 <__aeabi_dmul>
 800e582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e586:	e7bd      	b.n	800e504 <_dtoa_r+0x584>
 800e588:	08010338 	.word	0x08010338
 800e58c:	08010310 	.word	0x08010310
 800e590:	3ff00000 	.word	0x3ff00000
 800e594:	40240000 	.word	0x40240000
 800e598:	401c0000 	.word	0x401c0000
 800e59c:	40140000 	.word	0x40140000
 800e5a0:	3fe00000 	.word	0x3fe00000
 800e5a4:	9d06      	ldr	r5, [sp, #24]
 800e5a6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e5aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	4639      	mov	r1, r7
 800e5b2:	f7f2 f8f7 	bl	80007a4 <__aeabi_ddiv>
 800e5b6:	f7f2 fa7b 	bl	8000ab0 <__aeabi_d2iz>
 800e5ba:	4681      	mov	r9, r0
 800e5bc:	f7f1 ff5e 	bl	800047c <__aeabi_i2d>
 800e5c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5c4:	f7f1 ffc4 	bl	8000550 <__aeabi_dmul>
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	460b      	mov	r3, r1
 800e5cc:	4630      	mov	r0, r6
 800e5ce:	4639      	mov	r1, r7
 800e5d0:	f7f1 fe06 	bl	80001e0 <__aeabi_dsub>
 800e5d4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800e5d8:	f805 6b01 	strb.w	r6, [r5], #1
 800e5dc:	9e06      	ldr	r6, [sp, #24]
 800e5de:	4602      	mov	r2, r0
 800e5e0:	1bae      	subs	r6, r5, r6
 800e5e2:	45b0      	cmp	r8, r6
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	d135      	bne.n	800e654 <_dtoa_r+0x6d4>
 800e5e8:	f7f1 fdfc 	bl	80001e4 <__adddf3>
 800e5ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5f0:	4606      	mov	r6, r0
 800e5f2:	460f      	mov	r7, r1
 800e5f4:	f7f2 fa3c 	bl	8000a70 <__aeabi_dcmpgt>
 800e5f8:	b9c8      	cbnz	r0, 800e62e <_dtoa_r+0x6ae>
 800e5fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5fe:	4630      	mov	r0, r6
 800e600:	4639      	mov	r1, r7
 800e602:	f7f2 fa0d 	bl	8000a20 <__aeabi_dcmpeq>
 800e606:	b110      	cbz	r0, 800e60e <_dtoa_r+0x68e>
 800e608:	f019 0f01 	tst.w	r9, #1
 800e60c:	d10f      	bne.n	800e62e <_dtoa_r+0x6ae>
 800e60e:	4659      	mov	r1, fp
 800e610:	4620      	mov	r0, r4
 800e612:	f000 facc 	bl	800ebae <_Bfree>
 800e616:	2300      	movs	r3, #0
 800e618:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e61a:	702b      	strb	r3, [r5, #0]
 800e61c:	f10a 0301 	add.w	r3, sl, #1
 800e620:	6013      	str	r3, [r2, #0]
 800e622:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e624:	2b00      	cmp	r3, #0
 800e626:	f43f acf3 	beq.w	800e010 <_dtoa_r+0x90>
 800e62a:	601d      	str	r5, [r3, #0]
 800e62c:	e4f0      	b.n	800e010 <_dtoa_r+0x90>
 800e62e:	4657      	mov	r7, sl
 800e630:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e634:	1e6b      	subs	r3, r5, #1
 800e636:	2a39      	cmp	r2, #57	; 0x39
 800e638:	d106      	bne.n	800e648 <_dtoa_r+0x6c8>
 800e63a:	9a06      	ldr	r2, [sp, #24]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d107      	bne.n	800e650 <_dtoa_r+0x6d0>
 800e640:	2330      	movs	r3, #48	; 0x30
 800e642:	7013      	strb	r3, [r2, #0]
 800e644:	4613      	mov	r3, r2
 800e646:	3701      	adds	r7, #1
 800e648:	781a      	ldrb	r2, [r3, #0]
 800e64a:	3201      	adds	r2, #1
 800e64c:	701a      	strb	r2, [r3, #0]
 800e64e:	e791      	b.n	800e574 <_dtoa_r+0x5f4>
 800e650:	461d      	mov	r5, r3
 800e652:	e7ed      	b.n	800e630 <_dtoa_r+0x6b0>
 800e654:	2200      	movs	r2, #0
 800e656:	4b99      	ldr	r3, [pc, #612]	; (800e8bc <_dtoa_r+0x93c>)
 800e658:	f7f1 ff7a 	bl	8000550 <__aeabi_dmul>
 800e65c:	2200      	movs	r2, #0
 800e65e:	2300      	movs	r3, #0
 800e660:	4606      	mov	r6, r0
 800e662:	460f      	mov	r7, r1
 800e664:	f7f2 f9dc 	bl	8000a20 <__aeabi_dcmpeq>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d09e      	beq.n	800e5aa <_dtoa_r+0x62a>
 800e66c:	e7cf      	b.n	800e60e <_dtoa_r+0x68e>
 800e66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e670:	2a00      	cmp	r2, #0
 800e672:	f000 8088 	beq.w	800e786 <_dtoa_r+0x806>
 800e676:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e678:	2a01      	cmp	r2, #1
 800e67a:	dc6d      	bgt.n	800e758 <_dtoa_r+0x7d8>
 800e67c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e67e:	2a00      	cmp	r2, #0
 800e680:	d066      	beq.n	800e750 <_dtoa_r+0x7d0>
 800e682:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e686:	464d      	mov	r5, r9
 800e688:	9e08      	ldr	r6, [sp, #32]
 800e68a:	9a07      	ldr	r2, [sp, #28]
 800e68c:	2101      	movs	r1, #1
 800e68e:	441a      	add	r2, r3
 800e690:	4620      	mov	r0, r4
 800e692:	4499      	add	r9, r3
 800e694:	9207      	str	r2, [sp, #28]
 800e696:	f000 fb2a 	bl	800ecee <__i2b>
 800e69a:	4607      	mov	r7, r0
 800e69c:	2d00      	cmp	r5, #0
 800e69e:	dd0b      	ble.n	800e6b8 <_dtoa_r+0x738>
 800e6a0:	9b07      	ldr	r3, [sp, #28]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dd08      	ble.n	800e6b8 <_dtoa_r+0x738>
 800e6a6:	42ab      	cmp	r3, r5
 800e6a8:	bfa8      	it	ge
 800e6aa:	462b      	movge	r3, r5
 800e6ac:	9a07      	ldr	r2, [sp, #28]
 800e6ae:	eba9 0903 	sub.w	r9, r9, r3
 800e6b2:	1aed      	subs	r5, r5, r3
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	9307      	str	r3, [sp, #28]
 800e6b8:	9b08      	ldr	r3, [sp, #32]
 800e6ba:	b1eb      	cbz	r3, 800e6f8 <_dtoa_r+0x778>
 800e6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d065      	beq.n	800e78e <_dtoa_r+0x80e>
 800e6c2:	b18e      	cbz	r6, 800e6e8 <_dtoa_r+0x768>
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	4632      	mov	r2, r6
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	f000 fbaf 	bl	800ee2c <__pow5mult>
 800e6ce:	465a      	mov	r2, fp
 800e6d0:	4601      	mov	r1, r0
 800e6d2:	4607      	mov	r7, r0
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 fb13 	bl	800ed00 <__multiply>
 800e6da:	4659      	mov	r1, fp
 800e6dc:	900a      	str	r0, [sp, #40]	; 0x28
 800e6de:	4620      	mov	r0, r4
 800e6e0:	f000 fa65 	bl	800ebae <_Bfree>
 800e6e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6e6:	469b      	mov	fp, r3
 800e6e8:	9b08      	ldr	r3, [sp, #32]
 800e6ea:	1b9a      	subs	r2, r3, r6
 800e6ec:	d004      	beq.n	800e6f8 <_dtoa_r+0x778>
 800e6ee:	4659      	mov	r1, fp
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	f000 fb9b 	bl	800ee2c <__pow5mult>
 800e6f6:	4683      	mov	fp, r0
 800e6f8:	2101      	movs	r1, #1
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f000 faf7 	bl	800ecee <__i2b>
 800e700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e702:	4606      	mov	r6, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 81c6 	beq.w	800ea96 <_dtoa_r+0xb16>
 800e70a:	461a      	mov	r2, r3
 800e70c:	4601      	mov	r1, r0
 800e70e:	4620      	mov	r0, r4
 800e710:	f000 fb8c 	bl	800ee2c <__pow5mult>
 800e714:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e716:	4606      	mov	r6, r0
 800e718:	2b01      	cmp	r3, #1
 800e71a:	dc3e      	bgt.n	800e79a <_dtoa_r+0x81a>
 800e71c:	9b02      	ldr	r3, [sp, #8]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d137      	bne.n	800e792 <_dtoa_r+0x812>
 800e722:	9b03      	ldr	r3, [sp, #12]
 800e724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d134      	bne.n	800e796 <_dtoa_r+0x816>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e732:	0d1b      	lsrs	r3, r3, #20
 800e734:	051b      	lsls	r3, r3, #20
 800e736:	b12b      	cbz	r3, 800e744 <_dtoa_r+0x7c4>
 800e738:	9b07      	ldr	r3, [sp, #28]
 800e73a:	f109 0901 	add.w	r9, r9, #1
 800e73e:	3301      	adds	r3, #1
 800e740:	9307      	str	r3, [sp, #28]
 800e742:	2301      	movs	r3, #1
 800e744:	9308      	str	r3, [sp, #32]
 800e746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d128      	bne.n	800e79e <_dtoa_r+0x81e>
 800e74c:	2001      	movs	r0, #1
 800e74e:	e02e      	b.n	800e7ae <_dtoa_r+0x82e>
 800e750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e752:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e756:	e796      	b.n	800e686 <_dtoa_r+0x706>
 800e758:	9b08      	ldr	r3, [sp, #32]
 800e75a:	f108 36ff 	add.w	r6, r8, #4294967295
 800e75e:	42b3      	cmp	r3, r6
 800e760:	bfb7      	itett	lt
 800e762:	9b08      	ldrlt	r3, [sp, #32]
 800e764:	1b9e      	subge	r6, r3, r6
 800e766:	1af2      	sublt	r2, r6, r3
 800e768:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800e76a:	bfbf      	itttt	lt
 800e76c:	9608      	strlt	r6, [sp, #32]
 800e76e:	189b      	addlt	r3, r3, r2
 800e770:	930c      	strlt	r3, [sp, #48]	; 0x30
 800e772:	2600      	movlt	r6, #0
 800e774:	f1b8 0f00 	cmp.w	r8, #0
 800e778:	bfb9      	ittee	lt
 800e77a:	eba9 0508 	sublt.w	r5, r9, r8
 800e77e:	2300      	movlt	r3, #0
 800e780:	464d      	movge	r5, r9
 800e782:	4643      	movge	r3, r8
 800e784:	e781      	b.n	800e68a <_dtoa_r+0x70a>
 800e786:	9e08      	ldr	r6, [sp, #32]
 800e788:	464d      	mov	r5, r9
 800e78a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e78c:	e786      	b.n	800e69c <_dtoa_r+0x71c>
 800e78e:	9a08      	ldr	r2, [sp, #32]
 800e790:	e7ad      	b.n	800e6ee <_dtoa_r+0x76e>
 800e792:	2300      	movs	r3, #0
 800e794:	e7d6      	b.n	800e744 <_dtoa_r+0x7c4>
 800e796:	9b02      	ldr	r3, [sp, #8]
 800e798:	e7d4      	b.n	800e744 <_dtoa_r+0x7c4>
 800e79a:	2300      	movs	r3, #0
 800e79c:	9308      	str	r3, [sp, #32]
 800e79e:	6933      	ldr	r3, [r6, #16]
 800e7a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e7a4:	6918      	ldr	r0, [r3, #16]
 800e7a6:	f000 fa54 	bl	800ec52 <__hi0bits>
 800e7aa:	f1c0 0020 	rsb	r0, r0, #32
 800e7ae:	9b07      	ldr	r3, [sp, #28]
 800e7b0:	4418      	add	r0, r3
 800e7b2:	f010 001f 	ands.w	r0, r0, #31
 800e7b6:	d047      	beq.n	800e848 <_dtoa_r+0x8c8>
 800e7b8:	f1c0 0320 	rsb	r3, r0, #32
 800e7bc:	2b04      	cmp	r3, #4
 800e7be:	dd3b      	ble.n	800e838 <_dtoa_r+0x8b8>
 800e7c0:	9b07      	ldr	r3, [sp, #28]
 800e7c2:	f1c0 001c 	rsb	r0, r0, #28
 800e7c6:	4481      	add	r9, r0
 800e7c8:	4405      	add	r5, r0
 800e7ca:	4403      	add	r3, r0
 800e7cc:	9307      	str	r3, [sp, #28]
 800e7ce:	f1b9 0f00 	cmp.w	r9, #0
 800e7d2:	dd05      	ble.n	800e7e0 <_dtoa_r+0x860>
 800e7d4:	4659      	mov	r1, fp
 800e7d6:	464a      	mov	r2, r9
 800e7d8:	4620      	mov	r0, r4
 800e7da:	f000 fb75 	bl	800eec8 <__lshift>
 800e7de:	4683      	mov	fp, r0
 800e7e0:	9b07      	ldr	r3, [sp, #28]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	dd05      	ble.n	800e7f2 <_dtoa_r+0x872>
 800e7e6:	4631      	mov	r1, r6
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f000 fb6c 	bl	800eec8 <__lshift>
 800e7f0:	4606      	mov	r6, r0
 800e7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7f4:	b353      	cbz	r3, 800e84c <_dtoa_r+0x8cc>
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	4658      	mov	r0, fp
 800e7fa:	f000 fbb9 	bl	800ef70 <__mcmp>
 800e7fe:	2800      	cmp	r0, #0
 800e800:	da24      	bge.n	800e84c <_dtoa_r+0x8cc>
 800e802:	2300      	movs	r3, #0
 800e804:	4659      	mov	r1, fp
 800e806:	220a      	movs	r2, #10
 800e808:	4620      	mov	r0, r4
 800e80a:	f000 f9e7 	bl	800ebdc <__multadd>
 800e80e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e810:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e814:	4683      	mov	fp, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	f000 8144 	beq.w	800eaa4 <_dtoa_r+0xb24>
 800e81c:	2300      	movs	r3, #0
 800e81e:	4639      	mov	r1, r7
 800e820:	220a      	movs	r2, #10
 800e822:	4620      	mov	r0, r4
 800e824:	f000 f9da 	bl	800ebdc <__multadd>
 800e828:	9b04      	ldr	r3, [sp, #16]
 800e82a:	4607      	mov	r7, r0
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	dc4d      	bgt.n	800e8cc <_dtoa_r+0x94c>
 800e830:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e832:	2b02      	cmp	r3, #2
 800e834:	dd4a      	ble.n	800e8cc <_dtoa_r+0x94c>
 800e836:	e011      	b.n	800e85c <_dtoa_r+0x8dc>
 800e838:	d0c9      	beq.n	800e7ce <_dtoa_r+0x84e>
 800e83a:	9a07      	ldr	r2, [sp, #28]
 800e83c:	331c      	adds	r3, #28
 800e83e:	441a      	add	r2, r3
 800e840:	4499      	add	r9, r3
 800e842:	441d      	add	r5, r3
 800e844:	4613      	mov	r3, r2
 800e846:	e7c1      	b.n	800e7cc <_dtoa_r+0x84c>
 800e848:	4603      	mov	r3, r0
 800e84a:	e7f6      	b.n	800e83a <_dtoa_r+0x8ba>
 800e84c:	f1b8 0f00 	cmp.w	r8, #0
 800e850:	dc36      	bgt.n	800e8c0 <_dtoa_r+0x940>
 800e852:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e854:	2b02      	cmp	r3, #2
 800e856:	dd33      	ble.n	800e8c0 <_dtoa_r+0x940>
 800e858:	f8cd 8010 	str.w	r8, [sp, #16]
 800e85c:	9b04      	ldr	r3, [sp, #16]
 800e85e:	b963      	cbnz	r3, 800e87a <_dtoa_r+0x8fa>
 800e860:	4631      	mov	r1, r6
 800e862:	2205      	movs	r2, #5
 800e864:	4620      	mov	r0, r4
 800e866:	f000 f9b9 	bl	800ebdc <__multadd>
 800e86a:	4601      	mov	r1, r0
 800e86c:	4606      	mov	r6, r0
 800e86e:	4658      	mov	r0, fp
 800e870:	f000 fb7e 	bl	800ef70 <__mcmp>
 800e874:	2800      	cmp	r0, #0
 800e876:	f73f add3 	bgt.w	800e420 <_dtoa_r+0x4a0>
 800e87a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e87c:	9d06      	ldr	r5, [sp, #24]
 800e87e:	ea6f 0a03 	mvn.w	sl, r3
 800e882:	f04f 0900 	mov.w	r9, #0
 800e886:	4631      	mov	r1, r6
 800e888:	4620      	mov	r0, r4
 800e88a:	f000 f990 	bl	800ebae <_Bfree>
 800e88e:	2f00      	cmp	r7, #0
 800e890:	f43f aebd 	beq.w	800e60e <_dtoa_r+0x68e>
 800e894:	f1b9 0f00 	cmp.w	r9, #0
 800e898:	d005      	beq.n	800e8a6 <_dtoa_r+0x926>
 800e89a:	45b9      	cmp	r9, r7
 800e89c:	d003      	beq.n	800e8a6 <_dtoa_r+0x926>
 800e89e:	4649      	mov	r1, r9
 800e8a0:	4620      	mov	r0, r4
 800e8a2:	f000 f984 	bl	800ebae <_Bfree>
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f000 f980 	bl	800ebae <_Bfree>
 800e8ae:	e6ae      	b.n	800e60e <_dtoa_r+0x68e>
 800e8b0:	2600      	movs	r6, #0
 800e8b2:	4637      	mov	r7, r6
 800e8b4:	e7e1      	b.n	800e87a <_dtoa_r+0x8fa>
 800e8b6:	46ba      	mov	sl, r7
 800e8b8:	4637      	mov	r7, r6
 800e8ba:	e5b1      	b.n	800e420 <_dtoa_r+0x4a0>
 800e8bc:	40240000 	.word	0x40240000
 800e8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8c2:	f8cd 8010 	str.w	r8, [sp, #16]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f000 80f3 	beq.w	800eab2 <_dtoa_r+0xb32>
 800e8cc:	2d00      	cmp	r5, #0
 800e8ce:	dd05      	ble.n	800e8dc <_dtoa_r+0x95c>
 800e8d0:	4639      	mov	r1, r7
 800e8d2:	462a      	mov	r2, r5
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	f000 faf7 	bl	800eec8 <__lshift>
 800e8da:	4607      	mov	r7, r0
 800e8dc:	9b08      	ldr	r3, [sp, #32]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d04c      	beq.n	800e97c <_dtoa_r+0x9fc>
 800e8e2:	6879      	ldr	r1, [r7, #4]
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	f000 f92e 	bl	800eb46 <_Balloc>
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	693a      	ldr	r2, [r7, #16]
 800e8ee:	f107 010c 	add.w	r1, r7, #12
 800e8f2:	3202      	adds	r2, #2
 800e8f4:	0092      	lsls	r2, r2, #2
 800e8f6:	300c      	adds	r0, #12
 800e8f8:	f000 f91a 	bl	800eb30 <memcpy>
 800e8fc:	2201      	movs	r2, #1
 800e8fe:	4629      	mov	r1, r5
 800e900:	4620      	mov	r0, r4
 800e902:	f000 fae1 	bl	800eec8 <__lshift>
 800e906:	46b9      	mov	r9, r7
 800e908:	4607      	mov	r7, r0
 800e90a:	9b06      	ldr	r3, [sp, #24]
 800e90c:	9307      	str	r3, [sp, #28]
 800e90e:	9b02      	ldr	r3, [sp, #8]
 800e910:	f003 0301 	and.w	r3, r3, #1
 800e914:	9308      	str	r3, [sp, #32]
 800e916:	4631      	mov	r1, r6
 800e918:	4658      	mov	r0, fp
 800e91a:	f7ff faa1 	bl	800de60 <quorem>
 800e91e:	4649      	mov	r1, r9
 800e920:	4605      	mov	r5, r0
 800e922:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e926:	4658      	mov	r0, fp
 800e928:	f000 fb22 	bl	800ef70 <__mcmp>
 800e92c:	463a      	mov	r2, r7
 800e92e:	9002      	str	r0, [sp, #8]
 800e930:	4631      	mov	r1, r6
 800e932:	4620      	mov	r0, r4
 800e934:	f000 fb36 	bl	800efa4 <__mdiff>
 800e938:	68c3      	ldr	r3, [r0, #12]
 800e93a:	4602      	mov	r2, r0
 800e93c:	bb03      	cbnz	r3, 800e980 <_dtoa_r+0xa00>
 800e93e:	4601      	mov	r1, r0
 800e940:	9009      	str	r0, [sp, #36]	; 0x24
 800e942:	4658      	mov	r0, fp
 800e944:	f000 fb14 	bl	800ef70 <__mcmp>
 800e948:	4603      	mov	r3, r0
 800e94a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e94c:	4611      	mov	r1, r2
 800e94e:	4620      	mov	r0, r4
 800e950:	9309      	str	r3, [sp, #36]	; 0x24
 800e952:	f000 f92c 	bl	800ebae <_Bfree>
 800e956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e958:	b9a3      	cbnz	r3, 800e984 <_dtoa_r+0xa04>
 800e95a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e95c:	b992      	cbnz	r2, 800e984 <_dtoa_r+0xa04>
 800e95e:	9a08      	ldr	r2, [sp, #32]
 800e960:	b982      	cbnz	r2, 800e984 <_dtoa_r+0xa04>
 800e962:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e966:	d029      	beq.n	800e9bc <_dtoa_r+0xa3c>
 800e968:	9b02      	ldr	r3, [sp, #8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	dd01      	ble.n	800e972 <_dtoa_r+0x9f2>
 800e96e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e972:	9b07      	ldr	r3, [sp, #28]
 800e974:	1c5d      	adds	r5, r3, #1
 800e976:	f883 8000 	strb.w	r8, [r3]
 800e97a:	e784      	b.n	800e886 <_dtoa_r+0x906>
 800e97c:	4638      	mov	r0, r7
 800e97e:	e7c2      	b.n	800e906 <_dtoa_r+0x986>
 800e980:	2301      	movs	r3, #1
 800e982:	e7e3      	b.n	800e94c <_dtoa_r+0x9cc>
 800e984:	9a02      	ldr	r2, [sp, #8]
 800e986:	2a00      	cmp	r2, #0
 800e988:	db04      	blt.n	800e994 <_dtoa_r+0xa14>
 800e98a:	d123      	bne.n	800e9d4 <_dtoa_r+0xa54>
 800e98c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e98e:	bb0a      	cbnz	r2, 800e9d4 <_dtoa_r+0xa54>
 800e990:	9a08      	ldr	r2, [sp, #32]
 800e992:	b9fa      	cbnz	r2, 800e9d4 <_dtoa_r+0xa54>
 800e994:	2b00      	cmp	r3, #0
 800e996:	ddec      	ble.n	800e972 <_dtoa_r+0x9f2>
 800e998:	4659      	mov	r1, fp
 800e99a:	2201      	movs	r2, #1
 800e99c:	4620      	mov	r0, r4
 800e99e:	f000 fa93 	bl	800eec8 <__lshift>
 800e9a2:	4631      	mov	r1, r6
 800e9a4:	4683      	mov	fp, r0
 800e9a6:	f000 fae3 	bl	800ef70 <__mcmp>
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	dc03      	bgt.n	800e9b6 <_dtoa_r+0xa36>
 800e9ae:	d1e0      	bne.n	800e972 <_dtoa_r+0x9f2>
 800e9b0:	f018 0f01 	tst.w	r8, #1
 800e9b4:	d0dd      	beq.n	800e972 <_dtoa_r+0x9f2>
 800e9b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e9ba:	d1d8      	bne.n	800e96e <_dtoa_r+0x9ee>
 800e9bc:	9b07      	ldr	r3, [sp, #28]
 800e9be:	9a07      	ldr	r2, [sp, #28]
 800e9c0:	1c5d      	adds	r5, r3, #1
 800e9c2:	2339      	movs	r3, #57	; 0x39
 800e9c4:	7013      	strb	r3, [r2, #0]
 800e9c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e9ca:	1e6a      	subs	r2, r5, #1
 800e9cc:	2b39      	cmp	r3, #57	; 0x39
 800e9ce:	d04d      	beq.n	800ea6c <_dtoa_r+0xaec>
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	e052      	b.n	800ea7a <_dtoa_r+0xafa>
 800e9d4:	9a07      	ldr	r2, [sp, #28]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f102 0501 	add.w	r5, r2, #1
 800e9dc:	dd06      	ble.n	800e9ec <_dtoa_r+0xa6c>
 800e9de:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e9e2:	d0eb      	beq.n	800e9bc <_dtoa_r+0xa3c>
 800e9e4:	f108 0801 	add.w	r8, r8, #1
 800e9e8:	9b07      	ldr	r3, [sp, #28]
 800e9ea:	e7c4      	b.n	800e976 <_dtoa_r+0x9f6>
 800e9ec:	9b06      	ldr	r3, [sp, #24]
 800e9ee:	9a04      	ldr	r2, [sp, #16]
 800e9f0:	1aeb      	subs	r3, r5, r3
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e9f8:	d021      	beq.n	800ea3e <_dtoa_r+0xabe>
 800e9fa:	4659      	mov	r1, fp
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	220a      	movs	r2, #10
 800ea00:	4620      	mov	r0, r4
 800ea02:	f000 f8eb 	bl	800ebdc <__multadd>
 800ea06:	45b9      	cmp	r9, r7
 800ea08:	4683      	mov	fp, r0
 800ea0a:	f04f 0300 	mov.w	r3, #0
 800ea0e:	f04f 020a 	mov.w	r2, #10
 800ea12:	4649      	mov	r1, r9
 800ea14:	4620      	mov	r0, r4
 800ea16:	d105      	bne.n	800ea24 <_dtoa_r+0xaa4>
 800ea18:	f000 f8e0 	bl	800ebdc <__multadd>
 800ea1c:	4681      	mov	r9, r0
 800ea1e:	4607      	mov	r7, r0
 800ea20:	9507      	str	r5, [sp, #28]
 800ea22:	e778      	b.n	800e916 <_dtoa_r+0x996>
 800ea24:	f000 f8da 	bl	800ebdc <__multadd>
 800ea28:	4639      	mov	r1, r7
 800ea2a:	4681      	mov	r9, r0
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	220a      	movs	r2, #10
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 f8d3 	bl	800ebdc <__multadd>
 800ea36:	4607      	mov	r7, r0
 800ea38:	e7f2      	b.n	800ea20 <_dtoa_r+0xaa0>
 800ea3a:	f04f 0900 	mov.w	r9, #0
 800ea3e:	4659      	mov	r1, fp
 800ea40:	2201      	movs	r2, #1
 800ea42:	4620      	mov	r0, r4
 800ea44:	f000 fa40 	bl	800eec8 <__lshift>
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4683      	mov	fp, r0
 800ea4c:	f000 fa90 	bl	800ef70 <__mcmp>
 800ea50:	2800      	cmp	r0, #0
 800ea52:	dcb8      	bgt.n	800e9c6 <_dtoa_r+0xa46>
 800ea54:	d102      	bne.n	800ea5c <_dtoa_r+0xadc>
 800ea56:	f018 0f01 	tst.w	r8, #1
 800ea5a:	d1b4      	bne.n	800e9c6 <_dtoa_r+0xa46>
 800ea5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ea60:	1e6a      	subs	r2, r5, #1
 800ea62:	2b30      	cmp	r3, #48	; 0x30
 800ea64:	f47f af0f 	bne.w	800e886 <_dtoa_r+0x906>
 800ea68:	4615      	mov	r5, r2
 800ea6a:	e7f7      	b.n	800ea5c <_dtoa_r+0xadc>
 800ea6c:	9b06      	ldr	r3, [sp, #24]
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d105      	bne.n	800ea7e <_dtoa_r+0xafe>
 800ea72:	2331      	movs	r3, #49	; 0x31
 800ea74:	9a06      	ldr	r2, [sp, #24]
 800ea76:	f10a 0a01 	add.w	sl, sl, #1
 800ea7a:	7013      	strb	r3, [r2, #0]
 800ea7c:	e703      	b.n	800e886 <_dtoa_r+0x906>
 800ea7e:	4615      	mov	r5, r2
 800ea80:	e7a1      	b.n	800e9c6 <_dtoa_r+0xa46>
 800ea82:	4b17      	ldr	r3, [pc, #92]	; (800eae0 <_dtoa_r+0xb60>)
 800ea84:	f7ff bae1 	b.w	800e04a <_dtoa_r+0xca>
 800ea88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	f47f aabb 	bne.w	800e006 <_dtoa_r+0x86>
 800ea90:	4b14      	ldr	r3, [pc, #80]	; (800eae4 <_dtoa_r+0xb64>)
 800ea92:	f7ff bada 	b.w	800e04a <_dtoa_r+0xca>
 800ea96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ea98:	2b01      	cmp	r3, #1
 800ea9a:	f77f ae3f 	ble.w	800e71c <_dtoa_r+0x79c>
 800ea9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaa0:	9308      	str	r3, [sp, #32]
 800eaa2:	e653      	b.n	800e74c <_dtoa_r+0x7cc>
 800eaa4:	9b04      	ldr	r3, [sp, #16]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	dc03      	bgt.n	800eab2 <_dtoa_r+0xb32>
 800eaaa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	f73f aed5 	bgt.w	800e85c <_dtoa_r+0x8dc>
 800eab2:	9d06      	ldr	r5, [sp, #24]
 800eab4:	4631      	mov	r1, r6
 800eab6:	4658      	mov	r0, fp
 800eab8:	f7ff f9d2 	bl	800de60 <quorem>
 800eabc:	9b06      	ldr	r3, [sp, #24]
 800eabe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800eac2:	f805 8b01 	strb.w	r8, [r5], #1
 800eac6:	9a04      	ldr	r2, [sp, #16]
 800eac8:	1aeb      	subs	r3, r5, r3
 800eaca:	429a      	cmp	r2, r3
 800eacc:	ddb5      	ble.n	800ea3a <_dtoa_r+0xaba>
 800eace:	4659      	mov	r1, fp
 800ead0:	2300      	movs	r3, #0
 800ead2:	220a      	movs	r2, #10
 800ead4:	4620      	mov	r0, r4
 800ead6:	f000 f881 	bl	800ebdc <__multadd>
 800eada:	4683      	mov	fp, r0
 800eadc:	e7ea      	b.n	800eab4 <_dtoa_r+0xb34>
 800eade:	bf00      	nop
 800eae0:	080102dc 	.word	0x080102dc
 800eae4:	08010300 	.word	0x08010300

0800eae8 <_localeconv_r>:
 800eae8:	4b04      	ldr	r3, [pc, #16]	; (800eafc <_localeconv_r+0x14>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	6a18      	ldr	r0, [r3, #32]
 800eaee:	4b04      	ldr	r3, [pc, #16]	; (800eb00 <_localeconv_r+0x18>)
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	bf08      	it	eq
 800eaf4:	4618      	moveq	r0, r3
 800eaf6:	30f0      	adds	r0, #240	; 0xf0
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	20000064 	.word	0x20000064
 800eb00:	200000c8 	.word	0x200000c8

0800eb04 <malloc>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <malloc+0xc>)
 800eb06:	4601      	mov	r1, r0
 800eb08:	6818      	ldr	r0, [r3, #0]
 800eb0a:	f000 bb53 	b.w	800f1b4 <_malloc_r>
 800eb0e:	bf00      	nop
 800eb10:	20000064 	.word	0x20000064

0800eb14 <memchr>:
 800eb14:	b510      	push	{r4, lr}
 800eb16:	b2c9      	uxtb	r1, r1
 800eb18:	4402      	add	r2, r0
 800eb1a:	4290      	cmp	r0, r2
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	d101      	bne.n	800eb24 <memchr+0x10>
 800eb20:	2300      	movs	r3, #0
 800eb22:	e003      	b.n	800eb2c <memchr+0x18>
 800eb24:	781c      	ldrb	r4, [r3, #0]
 800eb26:	3001      	adds	r0, #1
 800eb28:	428c      	cmp	r4, r1
 800eb2a:	d1f6      	bne.n	800eb1a <memchr+0x6>
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	bd10      	pop	{r4, pc}

0800eb30 <memcpy>:
 800eb30:	b510      	push	{r4, lr}
 800eb32:	1e43      	subs	r3, r0, #1
 800eb34:	440a      	add	r2, r1
 800eb36:	4291      	cmp	r1, r2
 800eb38:	d100      	bne.n	800eb3c <memcpy+0xc>
 800eb3a:	bd10      	pop	{r4, pc}
 800eb3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb44:	e7f7      	b.n	800eb36 <memcpy+0x6>

0800eb46 <_Balloc>:
 800eb46:	b570      	push	{r4, r5, r6, lr}
 800eb48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eb4a:	4604      	mov	r4, r0
 800eb4c:	460e      	mov	r6, r1
 800eb4e:	b93d      	cbnz	r5, 800eb60 <_Balloc+0x1a>
 800eb50:	2010      	movs	r0, #16
 800eb52:	f7ff ffd7 	bl	800eb04 <malloc>
 800eb56:	6260      	str	r0, [r4, #36]	; 0x24
 800eb58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eb5c:	6005      	str	r5, [r0, #0]
 800eb5e:	60c5      	str	r5, [r0, #12]
 800eb60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800eb62:	68eb      	ldr	r3, [r5, #12]
 800eb64:	b183      	cbz	r3, 800eb88 <_Balloc+0x42>
 800eb66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800eb6e:	b9b8      	cbnz	r0, 800eba0 <_Balloc+0x5a>
 800eb70:	2101      	movs	r1, #1
 800eb72:	fa01 f506 	lsl.w	r5, r1, r6
 800eb76:	1d6a      	adds	r2, r5, #5
 800eb78:	0092      	lsls	r2, r2, #2
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f000 fabf 	bl	800f0fe <_calloc_r>
 800eb80:	b160      	cbz	r0, 800eb9c <_Balloc+0x56>
 800eb82:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800eb86:	e00e      	b.n	800eba6 <_Balloc+0x60>
 800eb88:	2221      	movs	r2, #33	; 0x21
 800eb8a:	2104      	movs	r1, #4
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	f000 fab6 	bl	800f0fe <_calloc_r>
 800eb92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb94:	60e8      	str	r0, [r5, #12]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d1e4      	bne.n	800eb66 <_Balloc+0x20>
 800eb9c:	2000      	movs	r0, #0
 800eb9e:	bd70      	pop	{r4, r5, r6, pc}
 800eba0:	6802      	ldr	r2, [r0, #0]
 800eba2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800eba6:	2300      	movs	r3, #0
 800eba8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ebac:	e7f7      	b.n	800eb9e <_Balloc+0x58>

0800ebae <_Bfree>:
 800ebae:	b570      	push	{r4, r5, r6, lr}
 800ebb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ebb2:	4606      	mov	r6, r0
 800ebb4:	460d      	mov	r5, r1
 800ebb6:	b93c      	cbnz	r4, 800ebc8 <_Bfree+0x1a>
 800ebb8:	2010      	movs	r0, #16
 800ebba:	f7ff ffa3 	bl	800eb04 <malloc>
 800ebbe:	6270      	str	r0, [r6, #36]	; 0x24
 800ebc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ebc4:	6004      	str	r4, [r0, #0]
 800ebc6:	60c4      	str	r4, [r0, #12]
 800ebc8:	b13d      	cbz	r5, 800ebda <_Bfree+0x2c>
 800ebca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ebcc:	686a      	ldr	r2, [r5, #4]
 800ebce:	68db      	ldr	r3, [r3, #12]
 800ebd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ebd4:	6029      	str	r1, [r5, #0]
 800ebd6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ebda:	bd70      	pop	{r4, r5, r6, pc}

0800ebdc <__multadd>:
 800ebdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe0:	461f      	mov	r7, r3
 800ebe2:	4606      	mov	r6, r0
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	690d      	ldr	r5, [r1, #16]
 800ebea:	f101 0c14 	add.w	ip, r1, #20
 800ebee:	f8dc 0000 	ldr.w	r0, [ip]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	b281      	uxth	r1, r0
 800ebf6:	fb02 7101 	mla	r1, r2, r1, r7
 800ebfa:	0c00      	lsrs	r0, r0, #16
 800ebfc:	0c0f      	lsrs	r7, r1, #16
 800ebfe:	fb02 7000 	mla	r0, r2, r0, r7
 800ec02:	b289      	uxth	r1, r1
 800ec04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800ec08:	429d      	cmp	r5, r3
 800ec0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800ec0e:	f84c 1b04 	str.w	r1, [ip], #4
 800ec12:	dcec      	bgt.n	800ebee <__multadd+0x12>
 800ec14:	b1d7      	cbz	r7, 800ec4c <__multadd+0x70>
 800ec16:	68a3      	ldr	r3, [r4, #8]
 800ec18:	42ab      	cmp	r3, r5
 800ec1a:	dc12      	bgt.n	800ec42 <__multadd+0x66>
 800ec1c:	6861      	ldr	r1, [r4, #4]
 800ec1e:	4630      	mov	r0, r6
 800ec20:	3101      	adds	r1, #1
 800ec22:	f7ff ff90 	bl	800eb46 <_Balloc>
 800ec26:	4680      	mov	r8, r0
 800ec28:	6922      	ldr	r2, [r4, #16]
 800ec2a:	f104 010c 	add.w	r1, r4, #12
 800ec2e:	3202      	adds	r2, #2
 800ec30:	0092      	lsls	r2, r2, #2
 800ec32:	300c      	adds	r0, #12
 800ec34:	f7ff ff7c 	bl	800eb30 <memcpy>
 800ec38:	4621      	mov	r1, r4
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f7ff ffb7 	bl	800ebae <_Bfree>
 800ec40:	4644      	mov	r4, r8
 800ec42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec46:	3501      	adds	r5, #1
 800ec48:	615f      	str	r7, [r3, #20]
 800ec4a:	6125      	str	r5, [r4, #16]
 800ec4c:	4620      	mov	r0, r4
 800ec4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ec52 <__hi0bits>:
 800ec52:	0c02      	lsrs	r2, r0, #16
 800ec54:	0412      	lsls	r2, r2, #16
 800ec56:	4603      	mov	r3, r0
 800ec58:	b9b2      	cbnz	r2, 800ec88 <__hi0bits+0x36>
 800ec5a:	0403      	lsls	r3, r0, #16
 800ec5c:	2010      	movs	r0, #16
 800ec5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ec62:	bf04      	itt	eq
 800ec64:	021b      	lsleq	r3, r3, #8
 800ec66:	3008      	addeq	r0, #8
 800ec68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ec6c:	bf04      	itt	eq
 800ec6e:	011b      	lsleq	r3, r3, #4
 800ec70:	3004      	addeq	r0, #4
 800ec72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ec76:	bf04      	itt	eq
 800ec78:	009b      	lsleq	r3, r3, #2
 800ec7a:	3002      	addeq	r0, #2
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	db06      	blt.n	800ec8e <__hi0bits+0x3c>
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	d503      	bpl.n	800ec8c <__hi0bits+0x3a>
 800ec84:	3001      	adds	r0, #1
 800ec86:	4770      	bx	lr
 800ec88:	2000      	movs	r0, #0
 800ec8a:	e7e8      	b.n	800ec5e <__hi0bits+0xc>
 800ec8c:	2020      	movs	r0, #32
 800ec8e:	4770      	bx	lr

0800ec90 <__lo0bits>:
 800ec90:	6803      	ldr	r3, [r0, #0]
 800ec92:	4601      	mov	r1, r0
 800ec94:	f013 0207 	ands.w	r2, r3, #7
 800ec98:	d00b      	beq.n	800ecb2 <__lo0bits+0x22>
 800ec9a:	07da      	lsls	r2, r3, #31
 800ec9c:	d423      	bmi.n	800ece6 <__lo0bits+0x56>
 800ec9e:	0798      	lsls	r0, r3, #30
 800eca0:	bf49      	itett	mi
 800eca2:	085b      	lsrmi	r3, r3, #1
 800eca4:	089b      	lsrpl	r3, r3, #2
 800eca6:	2001      	movmi	r0, #1
 800eca8:	600b      	strmi	r3, [r1, #0]
 800ecaa:	bf5c      	itt	pl
 800ecac:	600b      	strpl	r3, [r1, #0]
 800ecae:	2002      	movpl	r0, #2
 800ecb0:	4770      	bx	lr
 800ecb2:	b298      	uxth	r0, r3
 800ecb4:	b9a8      	cbnz	r0, 800ece2 <__lo0bits+0x52>
 800ecb6:	2010      	movs	r0, #16
 800ecb8:	0c1b      	lsrs	r3, r3, #16
 800ecba:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ecbe:	bf04      	itt	eq
 800ecc0:	0a1b      	lsreq	r3, r3, #8
 800ecc2:	3008      	addeq	r0, #8
 800ecc4:	071a      	lsls	r2, r3, #28
 800ecc6:	bf04      	itt	eq
 800ecc8:	091b      	lsreq	r3, r3, #4
 800ecca:	3004      	addeq	r0, #4
 800eccc:	079a      	lsls	r2, r3, #30
 800ecce:	bf04      	itt	eq
 800ecd0:	089b      	lsreq	r3, r3, #2
 800ecd2:	3002      	addeq	r0, #2
 800ecd4:	07da      	lsls	r2, r3, #31
 800ecd6:	d402      	bmi.n	800ecde <__lo0bits+0x4e>
 800ecd8:	085b      	lsrs	r3, r3, #1
 800ecda:	d006      	beq.n	800ecea <__lo0bits+0x5a>
 800ecdc:	3001      	adds	r0, #1
 800ecde:	600b      	str	r3, [r1, #0]
 800ece0:	4770      	bx	lr
 800ece2:	4610      	mov	r0, r2
 800ece4:	e7e9      	b.n	800ecba <__lo0bits+0x2a>
 800ece6:	2000      	movs	r0, #0
 800ece8:	4770      	bx	lr
 800ecea:	2020      	movs	r0, #32
 800ecec:	4770      	bx	lr

0800ecee <__i2b>:
 800ecee:	b510      	push	{r4, lr}
 800ecf0:	460c      	mov	r4, r1
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	f7ff ff27 	bl	800eb46 <_Balloc>
 800ecf8:	2201      	movs	r2, #1
 800ecfa:	6144      	str	r4, [r0, #20]
 800ecfc:	6102      	str	r2, [r0, #16]
 800ecfe:	bd10      	pop	{r4, pc}

0800ed00 <__multiply>:
 800ed00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	4614      	mov	r4, r2
 800ed06:	690a      	ldr	r2, [r1, #16]
 800ed08:	6923      	ldr	r3, [r4, #16]
 800ed0a:	4688      	mov	r8, r1
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	bfbe      	ittt	lt
 800ed10:	460b      	movlt	r3, r1
 800ed12:	46a0      	movlt	r8, r4
 800ed14:	461c      	movlt	r4, r3
 800ed16:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ed1a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ed1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ed22:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ed26:	eb07 0609 	add.w	r6, r7, r9
 800ed2a:	42b3      	cmp	r3, r6
 800ed2c:	bfb8      	it	lt
 800ed2e:	3101      	addlt	r1, #1
 800ed30:	f7ff ff09 	bl	800eb46 <_Balloc>
 800ed34:	f100 0514 	add.w	r5, r0, #20
 800ed38:	462b      	mov	r3, r5
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ed40:	4573      	cmp	r3, lr
 800ed42:	d316      	bcc.n	800ed72 <__multiply+0x72>
 800ed44:	f104 0214 	add.w	r2, r4, #20
 800ed48:	f108 0114 	add.w	r1, r8, #20
 800ed4c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ed50:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ed54:	9300      	str	r3, [sp, #0]
 800ed56:	9b00      	ldr	r3, [sp, #0]
 800ed58:	9201      	str	r2, [sp, #4]
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d80c      	bhi.n	800ed78 <__multiply+0x78>
 800ed5e:	2e00      	cmp	r6, #0
 800ed60:	dd03      	ble.n	800ed6a <__multiply+0x6a>
 800ed62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d05d      	beq.n	800ee26 <__multiply+0x126>
 800ed6a:	6106      	str	r6, [r0, #16]
 800ed6c:	b003      	add	sp, #12
 800ed6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed72:	f843 2b04 	str.w	r2, [r3], #4
 800ed76:	e7e3      	b.n	800ed40 <__multiply+0x40>
 800ed78:	f8b2 b000 	ldrh.w	fp, [r2]
 800ed7c:	f1bb 0f00 	cmp.w	fp, #0
 800ed80:	d023      	beq.n	800edca <__multiply+0xca>
 800ed82:	4689      	mov	r9, r1
 800ed84:	46ac      	mov	ip, r5
 800ed86:	f04f 0800 	mov.w	r8, #0
 800ed8a:	f859 4b04 	ldr.w	r4, [r9], #4
 800ed8e:	f8dc a000 	ldr.w	sl, [ip]
 800ed92:	b2a3      	uxth	r3, r4
 800ed94:	fa1f fa8a 	uxth.w	sl, sl
 800ed98:	fb0b a303 	mla	r3, fp, r3, sl
 800ed9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eda0:	f8dc 4000 	ldr.w	r4, [ip]
 800eda4:	4443      	add	r3, r8
 800eda6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800edaa:	fb0b 840a 	mla	r4, fp, sl, r8
 800edae:	46e2      	mov	sl, ip
 800edb0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800edba:	454f      	cmp	r7, r9
 800edbc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800edc0:	f84a 3b04 	str.w	r3, [sl], #4
 800edc4:	d82b      	bhi.n	800ee1e <__multiply+0x11e>
 800edc6:	f8cc 8004 	str.w	r8, [ip, #4]
 800edca:	9b01      	ldr	r3, [sp, #4]
 800edcc:	3204      	adds	r2, #4
 800edce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800edd2:	f1ba 0f00 	cmp.w	sl, #0
 800edd6:	d020      	beq.n	800ee1a <__multiply+0x11a>
 800edd8:	4689      	mov	r9, r1
 800edda:	46a8      	mov	r8, r5
 800eddc:	f04f 0b00 	mov.w	fp, #0
 800ede0:	682b      	ldr	r3, [r5, #0]
 800ede2:	f8b9 c000 	ldrh.w	ip, [r9]
 800ede6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800edea:	b29b      	uxth	r3, r3
 800edec:	fb0a 440c 	mla	r4, sl, ip, r4
 800edf0:	46c4      	mov	ip, r8
 800edf2:	445c      	add	r4, fp
 800edf4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800edf8:	f84c 3b04 	str.w	r3, [ip], #4
 800edfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800ee00:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ee04:	0c1b      	lsrs	r3, r3, #16
 800ee06:	fb0a b303 	mla	r3, sl, r3, fp
 800ee0a:	454f      	cmp	r7, r9
 800ee0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ee10:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ee14:	d805      	bhi.n	800ee22 <__multiply+0x122>
 800ee16:	f8c8 3004 	str.w	r3, [r8, #4]
 800ee1a:	3504      	adds	r5, #4
 800ee1c:	e79b      	b.n	800ed56 <__multiply+0x56>
 800ee1e:	46d4      	mov	ip, sl
 800ee20:	e7b3      	b.n	800ed8a <__multiply+0x8a>
 800ee22:	46e0      	mov	r8, ip
 800ee24:	e7dd      	b.n	800ede2 <__multiply+0xe2>
 800ee26:	3e01      	subs	r6, #1
 800ee28:	e799      	b.n	800ed5e <__multiply+0x5e>
	...

0800ee2c <__pow5mult>:
 800ee2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee30:	4615      	mov	r5, r2
 800ee32:	f012 0203 	ands.w	r2, r2, #3
 800ee36:	4606      	mov	r6, r0
 800ee38:	460f      	mov	r7, r1
 800ee3a:	d007      	beq.n	800ee4c <__pow5mult+0x20>
 800ee3c:	4c21      	ldr	r4, [pc, #132]	; (800eec4 <__pow5mult+0x98>)
 800ee3e:	3a01      	subs	r2, #1
 800ee40:	2300      	movs	r3, #0
 800ee42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee46:	f7ff fec9 	bl	800ebdc <__multadd>
 800ee4a:	4607      	mov	r7, r0
 800ee4c:	10ad      	asrs	r5, r5, #2
 800ee4e:	d035      	beq.n	800eebc <__pow5mult+0x90>
 800ee50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee52:	b93c      	cbnz	r4, 800ee64 <__pow5mult+0x38>
 800ee54:	2010      	movs	r0, #16
 800ee56:	f7ff fe55 	bl	800eb04 <malloc>
 800ee5a:	6270      	str	r0, [r6, #36]	; 0x24
 800ee5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee60:	6004      	str	r4, [r0, #0]
 800ee62:	60c4      	str	r4, [r0, #12]
 800ee64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee6c:	b94c      	cbnz	r4, 800ee82 <__pow5mult+0x56>
 800ee6e:	f240 2171 	movw	r1, #625	; 0x271
 800ee72:	4630      	mov	r0, r6
 800ee74:	f7ff ff3b 	bl	800ecee <__i2b>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee80:	6003      	str	r3, [r0, #0]
 800ee82:	f04f 0800 	mov.w	r8, #0
 800ee86:	07eb      	lsls	r3, r5, #31
 800ee88:	d50a      	bpl.n	800eea0 <__pow5mult+0x74>
 800ee8a:	4639      	mov	r1, r7
 800ee8c:	4622      	mov	r2, r4
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7ff ff36 	bl	800ed00 <__multiply>
 800ee94:	4681      	mov	r9, r0
 800ee96:	4639      	mov	r1, r7
 800ee98:	4630      	mov	r0, r6
 800ee9a:	f7ff fe88 	bl	800ebae <_Bfree>
 800ee9e:	464f      	mov	r7, r9
 800eea0:	106d      	asrs	r5, r5, #1
 800eea2:	d00b      	beq.n	800eebc <__pow5mult+0x90>
 800eea4:	6820      	ldr	r0, [r4, #0]
 800eea6:	b938      	cbnz	r0, 800eeb8 <__pow5mult+0x8c>
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4621      	mov	r1, r4
 800eeac:	4630      	mov	r0, r6
 800eeae:	f7ff ff27 	bl	800ed00 <__multiply>
 800eeb2:	6020      	str	r0, [r4, #0]
 800eeb4:	f8c0 8000 	str.w	r8, [r0]
 800eeb8:	4604      	mov	r4, r0
 800eeba:	e7e4      	b.n	800ee86 <__pow5mult+0x5a>
 800eebc:	4638      	mov	r0, r7
 800eebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eec2:	bf00      	nop
 800eec4:	08010400 	.word	0x08010400

0800eec8 <__lshift>:
 800eec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eecc:	460c      	mov	r4, r1
 800eece:	4607      	mov	r7, r0
 800eed0:	4616      	mov	r6, r2
 800eed2:	6923      	ldr	r3, [r4, #16]
 800eed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eed8:	eb0a 0903 	add.w	r9, sl, r3
 800eedc:	6849      	ldr	r1, [r1, #4]
 800eede:	68a3      	ldr	r3, [r4, #8]
 800eee0:	f109 0501 	add.w	r5, r9, #1
 800eee4:	42ab      	cmp	r3, r5
 800eee6:	db32      	blt.n	800ef4e <__lshift+0x86>
 800eee8:	4638      	mov	r0, r7
 800eeea:	f7ff fe2c 	bl	800eb46 <_Balloc>
 800eeee:	2300      	movs	r3, #0
 800eef0:	4680      	mov	r8, r0
 800eef2:	461a      	mov	r2, r3
 800eef4:	f100 0114 	add.w	r1, r0, #20
 800eef8:	4553      	cmp	r3, sl
 800eefa:	db2b      	blt.n	800ef54 <__lshift+0x8c>
 800eefc:	6920      	ldr	r0, [r4, #16]
 800eefe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef02:	f104 0314 	add.w	r3, r4, #20
 800ef06:	f016 021f 	ands.w	r2, r6, #31
 800ef0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef12:	d025      	beq.n	800ef60 <__lshift+0x98>
 800ef14:	2000      	movs	r0, #0
 800ef16:	f1c2 0e20 	rsb	lr, r2, #32
 800ef1a:	468a      	mov	sl, r1
 800ef1c:	681e      	ldr	r6, [r3, #0]
 800ef1e:	4096      	lsls	r6, r2
 800ef20:	4330      	orrs	r0, r6
 800ef22:	f84a 0b04 	str.w	r0, [sl], #4
 800ef26:	f853 0b04 	ldr.w	r0, [r3], #4
 800ef2a:	459c      	cmp	ip, r3
 800ef2c:	fa20 f00e 	lsr.w	r0, r0, lr
 800ef30:	d814      	bhi.n	800ef5c <__lshift+0x94>
 800ef32:	6048      	str	r0, [r1, #4]
 800ef34:	b108      	cbz	r0, 800ef3a <__lshift+0x72>
 800ef36:	f109 0502 	add.w	r5, r9, #2
 800ef3a:	3d01      	subs	r5, #1
 800ef3c:	4638      	mov	r0, r7
 800ef3e:	f8c8 5010 	str.w	r5, [r8, #16]
 800ef42:	4621      	mov	r1, r4
 800ef44:	f7ff fe33 	bl	800ebae <_Bfree>
 800ef48:	4640      	mov	r0, r8
 800ef4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef4e:	3101      	adds	r1, #1
 800ef50:	005b      	lsls	r3, r3, #1
 800ef52:	e7c7      	b.n	800eee4 <__lshift+0x1c>
 800ef54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	e7cd      	b.n	800eef8 <__lshift+0x30>
 800ef5c:	4651      	mov	r1, sl
 800ef5e:	e7dc      	b.n	800ef1a <__lshift+0x52>
 800ef60:	3904      	subs	r1, #4
 800ef62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef66:	459c      	cmp	ip, r3
 800ef68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef6c:	d8f9      	bhi.n	800ef62 <__lshift+0x9a>
 800ef6e:	e7e4      	b.n	800ef3a <__lshift+0x72>

0800ef70 <__mcmp>:
 800ef70:	6903      	ldr	r3, [r0, #16]
 800ef72:	690a      	ldr	r2, [r1, #16]
 800ef74:	b530      	push	{r4, r5, lr}
 800ef76:	1a9b      	subs	r3, r3, r2
 800ef78:	d10c      	bne.n	800ef94 <__mcmp+0x24>
 800ef7a:	0092      	lsls	r2, r2, #2
 800ef7c:	3014      	adds	r0, #20
 800ef7e:	3114      	adds	r1, #20
 800ef80:	1884      	adds	r4, r0, r2
 800ef82:	4411      	add	r1, r2
 800ef84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ef88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ef8c:	4295      	cmp	r5, r2
 800ef8e:	d003      	beq.n	800ef98 <__mcmp+0x28>
 800ef90:	d305      	bcc.n	800ef9e <__mcmp+0x2e>
 800ef92:	2301      	movs	r3, #1
 800ef94:	4618      	mov	r0, r3
 800ef96:	bd30      	pop	{r4, r5, pc}
 800ef98:	42a0      	cmp	r0, r4
 800ef9a:	d3f3      	bcc.n	800ef84 <__mcmp+0x14>
 800ef9c:	e7fa      	b.n	800ef94 <__mcmp+0x24>
 800ef9e:	f04f 33ff 	mov.w	r3, #4294967295
 800efa2:	e7f7      	b.n	800ef94 <__mcmp+0x24>

0800efa4 <__mdiff>:
 800efa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efa8:	460d      	mov	r5, r1
 800efaa:	4607      	mov	r7, r0
 800efac:	4611      	mov	r1, r2
 800efae:	4628      	mov	r0, r5
 800efb0:	4614      	mov	r4, r2
 800efb2:	f7ff ffdd 	bl	800ef70 <__mcmp>
 800efb6:	1e06      	subs	r6, r0, #0
 800efb8:	d108      	bne.n	800efcc <__mdiff+0x28>
 800efba:	4631      	mov	r1, r6
 800efbc:	4638      	mov	r0, r7
 800efbe:	f7ff fdc2 	bl	800eb46 <_Balloc>
 800efc2:	2301      	movs	r3, #1
 800efc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800efc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efcc:	bfa4      	itt	ge
 800efce:	4623      	movge	r3, r4
 800efd0:	462c      	movge	r4, r5
 800efd2:	4638      	mov	r0, r7
 800efd4:	6861      	ldr	r1, [r4, #4]
 800efd6:	bfa6      	itte	ge
 800efd8:	461d      	movge	r5, r3
 800efda:	2600      	movge	r6, #0
 800efdc:	2601      	movlt	r6, #1
 800efde:	f7ff fdb2 	bl	800eb46 <_Balloc>
 800efe2:	f04f 0e00 	mov.w	lr, #0
 800efe6:	60c6      	str	r6, [r0, #12]
 800efe8:	692b      	ldr	r3, [r5, #16]
 800efea:	6926      	ldr	r6, [r4, #16]
 800efec:	f104 0214 	add.w	r2, r4, #20
 800eff0:	f105 0914 	add.w	r9, r5, #20
 800eff4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800eff8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800effc:	f100 0114 	add.w	r1, r0, #20
 800f000:	f852 ab04 	ldr.w	sl, [r2], #4
 800f004:	f859 5b04 	ldr.w	r5, [r9], #4
 800f008:	fa1f f38a 	uxth.w	r3, sl
 800f00c:	4473      	add	r3, lr
 800f00e:	b2ac      	uxth	r4, r5
 800f010:	1b1b      	subs	r3, r3, r4
 800f012:	0c2c      	lsrs	r4, r5, #16
 800f014:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800f018:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800f01c:	b29b      	uxth	r3, r3
 800f01e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800f022:	45c8      	cmp	r8, r9
 800f024:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800f028:	4694      	mov	ip, r2
 800f02a:	f841 4b04 	str.w	r4, [r1], #4
 800f02e:	d8e7      	bhi.n	800f000 <__mdiff+0x5c>
 800f030:	45bc      	cmp	ip, r7
 800f032:	d304      	bcc.n	800f03e <__mdiff+0x9a>
 800f034:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f038:	b183      	cbz	r3, 800f05c <__mdiff+0xb8>
 800f03a:	6106      	str	r6, [r0, #16]
 800f03c:	e7c4      	b.n	800efc8 <__mdiff+0x24>
 800f03e:	f85c 4b04 	ldr.w	r4, [ip], #4
 800f042:	b2a2      	uxth	r2, r4
 800f044:	4472      	add	r2, lr
 800f046:	1413      	asrs	r3, r2, #16
 800f048:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f04c:	b292      	uxth	r2, r2
 800f04e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f052:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f056:	f841 2b04 	str.w	r2, [r1], #4
 800f05a:	e7e9      	b.n	800f030 <__mdiff+0x8c>
 800f05c:	3e01      	subs	r6, #1
 800f05e:	e7e9      	b.n	800f034 <__mdiff+0x90>

0800f060 <__d2b>:
 800f060:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f064:	461c      	mov	r4, r3
 800f066:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800f06a:	2101      	movs	r1, #1
 800f06c:	4690      	mov	r8, r2
 800f06e:	f7ff fd6a 	bl	800eb46 <_Balloc>
 800f072:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800f076:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800f07a:	4607      	mov	r7, r0
 800f07c:	bb34      	cbnz	r4, 800f0cc <__d2b+0x6c>
 800f07e:	9201      	str	r2, [sp, #4]
 800f080:	f1b8 0200 	subs.w	r2, r8, #0
 800f084:	d027      	beq.n	800f0d6 <__d2b+0x76>
 800f086:	a802      	add	r0, sp, #8
 800f088:	f840 2d08 	str.w	r2, [r0, #-8]!
 800f08c:	f7ff fe00 	bl	800ec90 <__lo0bits>
 800f090:	9900      	ldr	r1, [sp, #0]
 800f092:	b1f0      	cbz	r0, 800f0d2 <__d2b+0x72>
 800f094:	9a01      	ldr	r2, [sp, #4]
 800f096:	f1c0 0320 	rsb	r3, r0, #32
 800f09a:	fa02 f303 	lsl.w	r3, r2, r3
 800f09e:	430b      	orrs	r3, r1
 800f0a0:	40c2      	lsrs	r2, r0
 800f0a2:	617b      	str	r3, [r7, #20]
 800f0a4:	9201      	str	r2, [sp, #4]
 800f0a6:	9b01      	ldr	r3, [sp, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	bf14      	ite	ne
 800f0ac:	2102      	movne	r1, #2
 800f0ae:	2101      	moveq	r1, #1
 800f0b0:	61bb      	str	r3, [r7, #24]
 800f0b2:	6139      	str	r1, [r7, #16]
 800f0b4:	b1c4      	cbz	r4, 800f0e8 <__d2b+0x88>
 800f0b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f0ba:	4404      	add	r4, r0
 800f0bc:	6034      	str	r4, [r6, #0]
 800f0be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f0c2:	6028      	str	r0, [r5, #0]
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	b002      	add	sp, #8
 800f0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0cc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f0d0:	e7d5      	b.n	800f07e <__d2b+0x1e>
 800f0d2:	6179      	str	r1, [r7, #20]
 800f0d4:	e7e7      	b.n	800f0a6 <__d2b+0x46>
 800f0d6:	a801      	add	r0, sp, #4
 800f0d8:	f7ff fdda 	bl	800ec90 <__lo0bits>
 800f0dc:	2101      	movs	r1, #1
 800f0de:	9b01      	ldr	r3, [sp, #4]
 800f0e0:	6139      	str	r1, [r7, #16]
 800f0e2:	617b      	str	r3, [r7, #20]
 800f0e4:	3020      	adds	r0, #32
 800f0e6:	e7e5      	b.n	800f0b4 <__d2b+0x54>
 800f0e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f0ec:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f0f0:	6030      	str	r0, [r6, #0]
 800f0f2:	6918      	ldr	r0, [r3, #16]
 800f0f4:	f7ff fdad 	bl	800ec52 <__hi0bits>
 800f0f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f0fc:	e7e1      	b.n	800f0c2 <__d2b+0x62>

0800f0fe <_calloc_r>:
 800f0fe:	b538      	push	{r3, r4, r5, lr}
 800f100:	fb02 f401 	mul.w	r4, r2, r1
 800f104:	4621      	mov	r1, r4
 800f106:	f000 f855 	bl	800f1b4 <_malloc_r>
 800f10a:	4605      	mov	r5, r0
 800f10c:	b118      	cbz	r0, 800f116 <_calloc_r+0x18>
 800f10e:	4622      	mov	r2, r4
 800f110:	2100      	movs	r1, #0
 800f112:	f7fe fa2d 	bl	800d570 <memset>
 800f116:	4628      	mov	r0, r5
 800f118:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f11c <_free_r>:
 800f11c:	b538      	push	{r3, r4, r5, lr}
 800f11e:	4605      	mov	r5, r0
 800f120:	2900      	cmp	r1, #0
 800f122:	d043      	beq.n	800f1ac <_free_r+0x90>
 800f124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f128:	1f0c      	subs	r4, r1, #4
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	bfb8      	it	lt
 800f12e:	18e4      	addlt	r4, r4, r3
 800f130:	f000 fa27 	bl	800f582 <__malloc_lock>
 800f134:	4a1e      	ldr	r2, [pc, #120]	; (800f1b0 <_free_r+0x94>)
 800f136:	6813      	ldr	r3, [r2, #0]
 800f138:	4610      	mov	r0, r2
 800f13a:	b933      	cbnz	r3, 800f14a <_free_r+0x2e>
 800f13c:	6063      	str	r3, [r4, #4]
 800f13e:	6014      	str	r4, [r2, #0]
 800f140:	4628      	mov	r0, r5
 800f142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f146:	f000 ba1d 	b.w	800f584 <__malloc_unlock>
 800f14a:	42a3      	cmp	r3, r4
 800f14c:	d90b      	bls.n	800f166 <_free_r+0x4a>
 800f14e:	6821      	ldr	r1, [r4, #0]
 800f150:	1862      	adds	r2, r4, r1
 800f152:	4293      	cmp	r3, r2
 800f154:	bf01      	itttt	eq
 800f156:	681a      	ldreq	r2, [r3, #0]
 800f158:	685b      	ldreq	r3, [r3, #4]
 800f15a:	1852      	addeq	r2, r2, r1
 800f15c:	6022      	streq	r2, [r4, #0]
 800f15e:	6063      	str	r3, [r4, #4]
 800f160:	6004      	str	r4, [r0, #0]
 800f162:	e7ed      	b.n	800f140 <_free_r+0x24>
 800f164:	4613      	mov	r3, r2
 800f166:	685a      	ldr	r2, [r3, #4]
 800f168:	b10a      	cbz	r2, 800f16e <_free_r+0x52>
 800f16a:	42a2      	cmp	r2, r4
 800f16c:	d9fa      	bls.n	800f164 <_free_r+0x48>
 800f16e:	6819      	ldr	r1, [r3, #0]
 800f170:	1858      	adds	r0, r3, r1
 800f172:	42a0      	cmp	r0, r4
 800f174:	d10b      	bne.n	800f18e <_free_r+0x72>
 800f176:	6820      	ldr	r0, [r4, #0]
 800f178:	4401      	add	r1, r0
 800f17a:	1858      	adds	r0, r3, r1
 800f17c:	4282      	cmp	r2, r0
 800f17e:	6019      	str	r1, [r3, #0]
 800f180:	d1de      	bne.n	800f140 <_free_r+0x24>
 800f182:	6810      	ldr	r0, [r2, #0]
 800f184:	6852      	ldr	r2, [r2, #4]
 800f186:	4401      	add	r1, r0
 800f188:	6019      	str	r1, [r3, #0]
 800f18a:	605a      	str	r2, [r3, #4]
 800f18c:	e7d8      	b.n	800f140 <_free_r+0x24>
 800f18e:	d902      	bls.n	800f196 <_free_r+0x7a>
 800f190:	230c      	movs	r3, #12
 800f192:	602b      	str	r3, [r5, #0]
 800f194:	e7d4      	b.n	800f140 <_free_r+0x24>
 800f196:	6820      	ldr	r0, [r4, #0]
 800f198:	1821      	adds	r1, r4, r0
 800f19a:	428a      	cmp	r2, r1
 800f19c:	bf01      	itttt	eq
 800f19e:	6811      	ldreq	r1, [r2, #0]
 800f1a0:	6852      	ldreq	r2, [r2, #4]
 800f1a2:	1809      	addeq	r1, r1, r0
 800f1a4:	6021      	streq	r1, [r4, #0]
 800f1a6:	6062      	str	r2, [r4, #4]
 800f1a8:	605c      	str	r4, [r3, #4]
 800f1aa:	e7c9      	b.n	800f140 <_free_r+0x24>
 800f1ac:	bd38      	pop	{r3, r4, r5, pc}
 800f1ae:	bf00      	nop
 800f1b0:	2000066c 	.word	0x2000066c

0800f1b4 <_malloc_r>:
 800f1b4:	b570      	push	{r4, r5, r6, lr}
 800f1b6:	1ccd      	adds	r5, r1, #3
 800f1b8:	f025 0503 	bic.w	r5, r5, #3
 800f1bc:	3508      	adds	r5, #8
 800f1be:	2d0c      	cmp	r5, #12
 800f1c0:	bf38      	it	cc
 800f1c2:	250c      	movcc	r5, #12
 800f1c4:	2d00      	cmp	r5, #0
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	db01      	blt.n	800f1ce <_malloc_r+0x1a>
 800f1ca:	42a9      	cmp	r1, r5
 800f1cc:	d903      	bls.n	800f1d6 <_malloc_r+0x22>
 800f1ce:	230c      	movs	r3, #12
 800f1d0:	6033      	str	r3, [r6, #0]
 800f1d2:	2000      	movs	r0, #0
 800f1d4:	bd70      	pop	{r4, r5, r6, pc}
 800f1d6:	f000 f9d4 	bl	800f582 <__malloc_lock>
 800f1da:	4a21      	ldr	r2, [pc, #132]	; (800f260 <_malloc_r+0xac>)
 800f1dc:	6814      	ldr	r4, [r2, #0]
 800f1de:	4621      	mov	r1, r4
 800f1e0:	b991      	cbnz	r1, 800f208 <_malloc_r+0x54>
 800f1e2:	4c20      	ldr	r4, [pc, #128]	; (800f264 <_malloc_r+0xb0>)
 800f1e4:	6823      	ldr	r3, [r4, #0]
 800f1e6:	b91b      	cbnz	r3, 800f1f0 <_malloc_r+0x3c>
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	f000 f98f 	bl	800f50c <_sbrk_r>
 800f1ee:	6020      	str	r0, [r4, #0]
 800f1f0:	4629      	mov	r1, r5
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	f000 f98a 	bl	800f50c <_sbrk_r>
 800f1f8:	1c43      	adds	r3, r0, #1
 800f1fa:	d124      	bne.n	800f246 <_malloc_r+0x92>
 800f1fc:	230c      	movs	r3, #12
 800f1fe:	4630      	mov	r0, r6
 800f200:	6033      	str	r3, [r6, #0]
 800f202:	f000 f9bf 	bl	800f584 <__malloc_unlock>
 800f206:	e7e4      	b.n	800f1d2 <_malloc_r+0x1e>
 800f208:	680b      	ldr	r3, [r1, #0]
 800f20a:	1b5b      	subs	r3, r3, r5
 800f20c:	d418      	bmi.n	800f240 <_malloc_r+0x8c>
 800f20e:	2b0b      	cmp	r3, #11
 800f210:	d90f      	bls.n	800f232 <_malloc_r+0x7e>
 800f212:	600b      	str	r3, [r1, #0]
 800f214:	18cc      	adds	r4, r1, r3
 800f216:	50cd      	str	r5, [r1, r3]
 800f218:	4630      	mov	r0, r6
 800f21a:	f000 f9b3 	bl	800f584 <__malloc_unlock>
 800f21e:	f104 000b 	add.w	r0, r4, #11
 800f222:	1d23      	adds	r3, r4, #4
 800f224:	f020 0007 	bic.w	r0, r0, #7
 800f228:	1ac3      	subs	r3, r0, r3
 800f22a:	d0d3      	beq.n	800f1d4 <_malloc_r+0x20>
 800f22c:	425a      	negs	r2, r3
 800f22e:	50e2      	str	r2, [r4, r3]
 800f230:	e7d0      	b.n	800f1d4 <_malloc_r+0x20>
 800f232:	684b      	ldr	r3, [r1, #4]
 800f234:	428c      	cmp	r4, r1
 800f236:	bf16      	itet	ne
 800f238:	6063      	strne	r3, [r4, #4]
 800f23a:	6013      	streq	r3, [r2, #0]
 800f23c:	460c      	movne	r4, r1
 800f23e:	e7eb      	b.n	800f218 <_malloc_r+0x64>
 800f240:	460c      	mov	r4, r1
 800f242:	6849      	ldr	r1, [r1, #4]
 800f244:	e7cc      	b.n	800f1e0 <_malloc_r+0x2c>
 800f246:	1cc4      	adds	r4, r0, #3
 800f248:	f024 0403 	bic.w	r4, r4, #3
 800f24c:	42a0      	cmp	r0, r4
 800f24e:	d005      	beq.n	800f25c <_malloc_r+0xa8>
 800f250:	1a21      	subs	r1, r4, r0
 800f252:	4630      	mov	r0, r6
 800f254:	f000 f95a 	bl	800f50c <_sbrk_r>
 800f258:	3001      	adds	r0, #1
 800f25a:	d0cf      	beq.n	800f1fc <_malloc_r+0x48>
 800f25c:	6025      	str	r5, [r4, #0]
 800f25e:	e7db      	b.n	800f218 <_malloc_r+0x64>
 800f260:	2000066c 	.word	0x2000066c
 800f264:	20000670 	.word	0x20000670

0800f268 <__ssputs_r>:
 800f268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f26c:	688e      	ldr	r6, [r1, #8]
 800f26e:	4682      	mov	sl, r0
 800f270:	429e      	cmp	r6, r3
 800f272:	460c      	mov	r4, r1
 800f274:	4690      	mov	r8, r2
 800f276:	4699      	mov	r9, r3
 800f278:	d837      	bhi.n	800f2ea <__ssputs_r+0x82>
 800f27a:	898a      	ldrh	r2, [r1, #12]
 800f27c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f280:	d031      	beq.n	800f2e6 <__ssputs_r+0x7e>
 800f282:	2302      	movs	r3, #2
 800f284:	6825      	ldr	r5, [r4, #0]
 800f286:	6909      	ldr	r1, [r1, #16]
 800f288:	1a6f      	subs	r7, r5, r1
 800f28a:	6965      	ldr	r5, [r4, #20]
 800f28c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f290:	fb95 f5f3 	sdiv	r5, r5, r3
 800f294:	f109 0301 	add.w	r3, r9, #1
 800f298:	443b      	add	r3, r7
 800f29a:	429d      	cmp	r5, r3
 800f29c:	bf38      	it	cc
 800f29e:	461d      	movcc	r5, r3
 800f2a0:	0553      	lsls	r3, r2, #21
 800f2a2:	d530      	bpl.n	800f306 <__ssputs_r+0x9e>
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	f7ff ff85 	bl	800f1b4 <_malloc_r>
 800f2aa:	4606      	mov	r6, r0
 800f2ac:	b950      	cbnz	r0, 800f2c4 <__ssputs_r+0x5c>
 800f2ae:	230c      	movs	r3, #12
 800f2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b4:	f8ca 3000 	str.w	r3, [sl]
 800f2b8:	89a3      	ldrh	r3, [r4, #12]
 800f2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c4:	463a      	mov	r2, r7
 800f2c6:	6921      	ldr	r1, [r4, #16]
 800f2c8:	f7ff fc32 	bl	800eb30 <memcpy>
 800f2cc:	89a3      	ldrh	r3, [r4, #12]
 800f2ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f2d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2d6:	81a3      	strh	r3, [r4, #12]
 800f2d8:	6126      	str	r6, [r4, #16]
 800f2da:	443e      	add	r6, r7
 800f2dc:	6026      	str	r6, [r4, #0]
 800f2de:	464e      	mov	r6, r9
 800f2e0:	6165      	str	r5, [r4, #20]
 800f2e2:	1bed      	subs	r5, r5, r7
 800f2e4:	60a5      	str	r5, [r4, #8]
 800f2e6:	454e      	cmp	r6, r9
 800f2e8:	d900      	bls.n	800f2ec <__ssputs_r+0x84>
 800f2ea:	464e      	mov	r6, r9
 800f2ec:	4632      	mov	r2, r6
 800f2ee:	4641      	mov	r1, r8
 800f2f0:	6820      	ldr	r0, [r4, #0]
 800f2f2:	f000 f92d 	bl	800f550 <memmove>
 800f2f6:	68a3      	ldr	r3, [r4, #8]
 800f2f8:	2000      	movs	r0, #0
 800f2fa:	1b9b      	subs	r3, r3, r6
 800f2fc:	60a3      	str	r3, [r4, #8]
 800f2fe:	6823      	ldr	r3, [r4, #0]
 800f300:	441e      	add	r6, r3
 800f302:	6026      	str	r6, [r4, #0]
 800f304:	e7dc      	b.n	800f2c0 <__ssputs_r+0x58>
 800f306:	462a      	mov	r2, r5
 800f308:	f000 f93d 	bl	800f586 <_realloc_r>
 800f30c:	4606      	mov	r6, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	d1e2      	bne.n	800f2d8 <__ssputs_r+0x70>
 800f312:	6921      	ldr	r1, [r4, #16]
 800f314:	4650      	mov	r0, sl
 800f316:	f7ff ff01 	bl	800f11c <_free_r>
 800f31a:	e7c8      	b.n	800f2ae <__ssputs_r+0x46>

0800f31c <_svfiprintf_r>:
 800f31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f320:	461d      	mov	r5, r3
 800f322:	898b      	ldrh	r3, [r1, #12]
 800f324:	b09d      	sub	sp, #116	; 0x74
 800f326:	061f      	lsls	r7, r3, #24
 800f328:	4680      	mov	r8, r0
 800f32a:	460c      	mov	r4, r1
 800f32c:	4616      	mov	r6, r2
 800f32e:	d50f      	bpl.n	800f350 <_svfiprintf_r+0x34>
 800f330:	690b      	ldr	r3, [r1, #16]
 800f332:	b96b      	cbnz	r3, 800f350 <_svfiprintf_r+0x34>
 800f334:	2140      	movs	r1, #64	; 0x40
 800f336:	f7ff ff3d 	bl	800f1b4 <_malloc_r>
 800f33a:	6020      	str	r0, [r4, #0]
 800f33c:	6120      	str	r0, [r4, #16]
 800f33e:	b928      	cbnz	r0, 800f34c <_svfiprintf_r+0x30>
 800f340:	230c      	movs	r3, #12
 800f342:	f8c8 3000 	str.w	r3, [r8]
 800f346:	f04f 30ff 	mov.w	r0, #4294967295
 800f34a:	e0c8      	b.n	800f4de <_svfiprintf_r+0x1c2>
 800f34c:	2340      	movs	r3, #64	; 0x40
 800f34e:	6163      	str	r3, [r4, #20]
 800f350:	2300      	movs	r3, #0
 800f352:	9309      	str	r3, [sp, #36]	; 0x24
 800f354:	2320      	movs	r3, #32
 800f356:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f35a:	2330      	movs	r3, #48	; 0x30
 800f35c:	f04f 0b01 	mov.w	fp, #1
 800f360:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f364:	9503      	str	r5, [sp, #12]
 800f366:	4637      	mov	r7, r6
 800f368:	463d      	mov	r5, r7
 800f36a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f36e:	b10b      	cbz	r3, 800f374 <_svfiprintf_r+0x58>
 800f370:	2b25      	cmp	r3, #37	; 0x25
 800f372:	d13e      	bne.n	800f3f2 <_svfiprintf_r+0xd6>
 800f374:	ebb7 0a06 	subs.w	sl, r7, r6
 800f378:	d00b      	beq.n	800f392 <_svfiprintf_r+0x76>
 800f37a:	4653      	mov	r3, sl
 800f37c:	4632      	mov	r2, r6
 800f37e:	4621      	mov	r1, r4
 800f380:	4640      	mov	r0, r8
 800f382:	f7ff ff71 	bl	800f268 <__ssputs_r>
 800f386:	3001      	adds	r0, #1
 800f388:	f000 80a4 	beq.w	800f4d4 <_svfiprintf_r+0x1b8>
 800f38c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f38e:	4453      	add	r3, sl
 800f390:	9309      	str	r3, [sp, #36]	; 0x24
 800f392:	783b      	ldrb	r3, [r7, #0]
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 809d 	beq.w	800f4d4 <_svfiprintf_r+0x1b8>
 800f39a:	2300      	movs	r3, #0
 800f39c:	f04f 32ff 	mov.w	r2, #4294967295
 800f3a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f3a4:	9304      	str	r3, [sp, #16]
 800f3a6:	9307      	str	r3, [sp, #28]
 800f3a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f3ac:	931a      	str	r3, [sp, #104]	; 0x68
 800f3ae:	462f      	mov	r7, r5
 800f3b0:	2205      	movs	r2, #5
 800f3b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f3b6:	4850      	ldr	r0, [pc, #320]	; (800f4f8 <_svfiprintf_r+0x1dc>)
 800f3b8:	f7ff fbac 	bl	800eb14 <memchr>
 800f3bc:	9b04      	ldr	r3, [sp, #16]
 800f3be:	b9d0      	cbnz	r0, 800f3f6 <_svfiprintf_r+0xda>
 800f3c0:	06d9      	lsls	r1, r3, #27
 800f3c2:	bf44      	itt	mi
 800f3c4:	2220      	movmi	r2, #32
 800f3c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3ca:	071a      	lsls	r2, r3, #28
 800f3cc:	bf44      	itt	mi
 800f3ce:	222b      	movmi	r2, #43	; 0x2b
 800f3d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f3d4:	782a      	ldrb	r2, [r5, #0]
 800f3d6:	2a2a      	cmp	r2, #42	; 0x2a
 800f3d8:	d015      	beq.n	800f406 <_svfiprintf_r+0xea>
 800f3da:	462f      	mov	r7, r5
 800f3dc:	2000      	movs	r0, #0
 800f3de:	250a      	movs	r5, #10
 800f3e0:	9a07      	ldr	r2, [sp, #28]
 800f3e2:	4639      	mov	r1, r7
 800f3e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3e8:	3b30      	subs	r3, #48	; 0x30
 800f3ea:	2b09      	cmp	r3, #9
 800f3ec:	d94d      	bls.n	800f48a <_svfiprintf_r+0x16e>
 800f3ee:	b1b8      	cbz	r0, 800f420 <_svfiprintf_r+0x104>
 800f3f0:	e00f      	b.n	800f412 <_svfiprintf_r+0xf6>
 800f3f2:	462f      	mov	r7, r5
 800f3f4:	e7b8      	b.n	800f368 <_svfiprintf_r+0x4c>
 800f3f6:	4a40      	ldr	r2, [pc, #256]	; (800f4f8 <_svfiprintf_r+0x1dc>)
 800f3f8:	463d      	mov	r5, r7
 800f3fa:	1a80      	subs	r0, r0, r2
 800f3fc:	fa0b f000 	lsl.w	r0, fp, r0
 800f400:	4318      	orrs	r0, r3
 800f402:	9004      	str	r0, [sp, #16]
 800f404:	e7d3      	b.n	800f3ae <_svfiprintf_r+0x92>
 800f406:	9a03      	ldr	r2, [sp, #12]
 800f408:	1d11      	adds	r1, r2, #4
 800f40a:	6812      	ldr	r2, [r2, #0]
 800f40c:	9103      	str	r1, [sp, #12]
 800f40e:	2a00      	cmp	r2, #0
 800f410:	db01      	blt.n	800f416 <_svfiprintf_r+0xfa>
 800f412:	9207      	str	r2, [sp, #28]
 800f414:	e004      	b.n	800f420 <_svfiprintf_r+0x104>
 800f416:	4252      	negs	r2, r2
 800f418:	f043 0302 	orr.w	r3, r3, #2
 800f41c:	9207      	str	r2, [sp, #28]
 800f41e:	9304      	str	r3, [sp, #16]
 800f420:	783b      	ldrb	r3, [r7, #0]
 800f422:	2b2e      	cmp	r3, #46	; 0x2e
 800f424:	d10c      	bne.n	800f440 <_svfiprintf_r+0x124>
 800f426:	787b      	ldrb	r3, [r7, #1]
 800f428:	2b2a      	cmp	r3, #42	; 0x2a
 800f42a:	d133      	bne.n	800f494 <_svfiprintf_r+0x178>
 800f42c:	9b03      	ldr	r3, [sp, #12]
 800f42e:	3702      	adds	r7, #2
 800f430:	1d1a      	adds	r2, r3, #4
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	9203      	str	r2, [sp, #12]
 800f436:	2b00      	cmp	r3, #0
 800f438:	bfb8      	it	lt
 800f43a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f43e:	9305      	str	r3, [sp, #20]
 800f440:	4d2e      	ldr	r5, [pc, #184]	; (800f4fc <_svfiprintf_r+0x1e0>)
 800f442:	2203      	movs	r2, #3
 800f444:	7839      	ldrb	r1, [r7, #0]
 800f446:	4628      	mov	r0, r5
 800f448:	f7ff fb64 	bl	800eb14 <memchr>
 800f44c:	b138      	cbz	r0, 800f45e <_svfiprintf_r+0x142>
 800f44e:	2340      	movs	r3, #64	; 0x40
 800f450:	1b40      	subs	r0, r0, r5
 800f452:	fa03 f000 	lsl.w	r0, r3, r0
 800f456:	9b04      	ldr	r3, [sp, #16]
 800f458:	3701      	adds	r7, #1
 800f45a:	4303      	orrs	r3, r0
 800f45c:	9304      	str	r3, [sp, #16]
 800f45e:	7839      	ldrb	r1, [r7, #0]
 800f460:	2206      	movs	r2, #6
 800f462:	4827      	ldr	r0, [pc, #156]	; (800f500 <_svfiprintf_r+0x1e4>)
 800f464:	1c7e      	adds	r6, r7, #1
 800f466:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f46a:	f7ff fb53 	bl	800eb14 <memchr>
 800f46e:	2800      	cmp	r0, #0
 800f470:	d038      	beq.n	800f4e4 <_svfiprintf_r+0x1c8>
 800f472:	4b24      	ldr	r3, [pc, #144]	; (800f504 <_svfiprintf_r+0x1e8>)
 800f474:	bb13      	cbnz	r3, 800f4bc <_svfiprintf_r+0x1a0>
 800f476:	9b03      	ldr	r3, [sp, #12]
 800f478:	3307      	adds	r3, #7
 800f47a:	f023 0307 	bic.w	r3, r3, #7
 800f47e:	3308      	adds	r3, #8
 800f480:	9303      	str	r3, [sp, #12]
 800f482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f484:	444b      	add	r3, r9
 800f486:	9309      	str	r3, [sp, #36]	; 0x24
 800f488:	e76d      	b.n	800f366 <_svfiprintf_r+0x4a>
 800f48a:	fb05 3202 	mla	r2, r5, r2, r3
 800f48e:	2001      	movs	r0, #1
 800f490:	460f      	mov	r7, r1
 800f492:	e7a6      	b.n	800f3e2 <_svfiprintf_r+0xc6>
 800f494:	2300      	movs	r3, #0
 800f496:	250a      	movs	r5, #10
 800f498:	4619      	mov	r1, r3
 800f49a:	3701      	adds	r7, #1
 800f49c:	9305      	str	r3, [sp, #20]
 800f49e:	4638      	mov	r0, r7
 800f4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f4a4:	3a30      	subs	r2, #48	; 0x30
 800f4a6:	2a09      	cmp	r2, #9
 800f4a8:	d903      	bls.n	800f4b2 <_svfiprintf_r+0x196>
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d0c8      	beq.n	800f440 <_svfiprintf_r+0x124>
 800f4ae:	9105      	str	r1, [sp, #20]
 800f4b0:	e7c6      	b.n	800f440 <_svfiprintf_r+0x124>
 800f4b2:	fb05 2101 	mla	r1, r5, r1, r2
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	4607      	mov	r7, r0
 800f4ba:	e7f0      	b.n	800f49e <_svfiprintf_r+0x182>
 800f4bc:	ab03      	add	r3, sp, #12
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	4622      	mov	r2, r4
 800f4c2:	4b11      	ldr	r3, [pc, #68]	; (800f508 <_svfiprintf_r+0x1ec>)
 800f4c4:	a904      	add	r1, sp, #16
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	f7fe f8ec 	bl	800d6a4 <_printf_float>
 800f4cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f4d0:	4681      	mov	r9, r0
 800f4d2:	d1d6      	bne.n	800f482 <_svfiprintf_r+0x166>
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	065b      	lsls	r3, r3, #25
 800f4d8:	f53f af35 	bmi.w	800f346 <_svfiprintf_r+0x2a>
 800f4dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f4de:	b01d      	add	sp, #116	; 0x74
 800f4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4e4:	ab03      	add	r3, sp, #12
 800f4e6:	9300      	str	r3, [sp, #0]
 800f4e8:	4622      	mov	r2, r4
 800f4ea:	4b07      	ldr	r3, [pc, #28]	; (800f508 <_svfiprintf_r+0x1ec>)
 800f4ec:	a904      	add	r1, sp, #16
 800f4ee:	4640      	mov	r0, r8
 800f4f0:	f7fe fb84 	bl	800dbfc <_printf_i>
 800f4f4:	e7ea      	b.n	800f4cc <_svfiprintf_r+0x1b0>
 800f4f6:	bf00      	nop
 800f4f8:	0801040c 	.word	0x0801040c
 800f4fc:	08010412 	.word	0x08010412
 800f500:	08010416 	.word	0x08010416
 800f504:	0800d6a5 	.word	0x0800d6a5
 800f508:	0800f269 	.word	0x0800f269

0800f50c <_sbrk_r>:
 800f50c:	b538      	push	{r3, r4, r5, lr}
 800f50e:	2300      	movs	r3, #0
 800f510:	4c05      	ldr	r4, [pc, #20]	; (800f528 <_sbrk_r+0x1c>)
 800f512:	4605      	mov	r5, r0
 800f514:	4608      	mov	r0, r1
 800f516:	6023      	str	r3, [r4, #0]
 800f518:	f7f8 fbf2 	bl	8007d00 <_sbrk>
 800f51c:	1c43      	adds	r3, r0, #1
 800f51e:	d102      	bne.n	800f526 <_sbrk_r+0x1a>
 800f520:	6823      	ldr	r3, [r4, #0]
 800f522:	b103      	cbz	r3, 800f526 <_sbrk_r+0x1a>
 800f524:	602b      	str	r3, [r5, #0]
 800f526:	bd38      	pop	{r3, r4, r5, pc}
 800f528:	20001218 	.word	0x20001218

0800f52c <__ascii_mbtowc>:
 800f52c:	b082      	sub	sp, #8
 800f52e:	b901      	cbnz	r1, 800f532 <__ascii_mbtowc+0x6>
 800f530:	a901      	add	r1, sp, #4
 800f532:	b142      	cbz	r2, 800f546 <__ascii_mbtowc+0x1a>
 800f534:	b14b      	cbz	r3, 800f54a <__ascii_mbtowc+0x1e>
 800f536:	7813      	ldrb	r3, [r2, #0]
 800f538:	600b      	str	r3, [r1, #0]
 800f53a:	7812      	ldrb	r2, [r2, #0]
 800f53c:	1c10      	adds	r0, r2, #0
 800f53e:	bf18      	it	ne
 800f540:	2001      	movne	r0, #1
 800f542:	b002      	add	sp, #8
 800f544:	4770      	bx	lr
 800f546:	4610      	mov	r0, r2
 800f548:	e7fb      	b.n	800f542 <__ascii_mbtowc+0x16>
 800f54a:	f06f 0001 	mvn.w	r0, #1
 800f54e:	e7f8      	b.n	800f542 <__ascii_mbtowc+0x16>

0800f550 <memmove>:
 800f550:	4288      	cmp	r0, r1
 800f552:	b510      	push	{r4, lr}
 800f554:	eb01 0302 	add.w	r3, r1, r2
 800f558:	d807      	bhi.n	800f56a <memmove+0x1a>
 800f55a:	1e42      	subs	r2, r0, #1
 800f55c:	4299      	cmp	r1, r3
 800f55e:	d00a      	beq.n	800f576 <memmove+0x26>
 800f560:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f564:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f568:	e7f8      	b.n	800f55c <memmove+0xc>
 800f56a:	4283      	cmp	r3, r0
 800f56c:	d9f5      	bls.n	800f55a <memmove+0xa>
 800f56e:	1881      	adds	r1, r0, r2
 800f570:	1ad2      	subs	r2, r2, r3
 800f572:	42d3      	cmn	r3, r2
 800f574:	d100      	bne.n	800f578 <memmove+0x28>
 800f576:	bd10      	pop	{r4, pc}
 800f578:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f57c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f580:	e7f7      	b.n	800f572 <memmove+0x22>

0800f582 <__malloc_lock>:
 800f582:	4770      	bx	lr

0800f584 <__malloc_unlock>:
 800f584:	4770      	bx	lr

0800f586 <_realloc_r>:
 800f586:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f588:	4607      	mov	r7, r0
 800f58a:	4614      	mov	r4, r2
 800f58c:	460e      	mov	r6, r1
 800f58e:	b921      	cbnz	r1, 800f59a <_realloc_r+0x14>
 800f590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f594:	4611      	mov	r1, r2
 800f596:	f7ff be0d 	b.w	800f1b4 <_malloc_r>
 800f59a:	b922      	cbnz	r2, 800f5a6 <_realloc_r+0x20>
 800f59c:	f7ff fdbe 	bl	800f11c <_free_r>
 800f5a0:	4625      	mov	r5, r4
 800f5a2:	4628      	mov	r0, r5
 800f5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5a6:	f000 f821 	bl	800f5ec <_malloc_usable_size_r>
 800f5aa:	42a0      	cmp	r0, r4
 800f5ac:	d20f      	bcs.n	800f5ce <_realloc_r+0x48>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7ff fdff 	bl	800f1b4 <_malloc_r>
 800f5b6:	4605      	mov	r5, r0
 800f5b8:	2800      	cmp	r0, #0
 800f5ba:	d0f2      	beq.n	800f5a2 <_realloc_r+0x1c>
 800f5bc:	4631      	mov	r1, r6
 800f5be:	4622      	mov	r2, r4
 800f5c0:	f7ff fab6 	bl	800eb30 <memcpy>
 800f5c4:	4631      	mov	r1, r6
 800f5c6:	4638      	mov	r0, r7
 800f5c8:	f7ff fda8 	bl	800f11c <_free_r>
 800f5cc:	e7e9      	b.n	800f5a2 <_realloc_r+0x1c>
 800f5ce:	4635      	mov	r5, r6
 800f5d0:	e7e7      	b.n	800f5a2 <_realloc_r+0x1c>

0800f5d2 <__ascii_wctomb>:
 800f5d2:	b149      	cbz	r1, 800f5e8 <__ascii_wctomb+0x16>
 800f5d4:	2aff      	cmp	r2, #255	; 0xff
 800f5d6:	bf8b      	itete	hi
 800f5d8:	238a      	movhi	r3, #138	; 0x8a
 800f5da:	700a      	strbls	r2, [r1, #0]
 800f5dc:	6003      	strhi	r3, [r0, #0]
 800f5de:	2001      	movls	r0, #1
 800f5e0:	bf88      	it	hi
 800f5e2:	f04f 30ff 	movhi.w	r0, #4294967295
 800f5e6:	4770      	bx	lr
 800f5e8:	4608      	mov	r0, r1
 800f5ea:	4770      	bx	lr

0800f5ec <_malloc_usable_size_r>:
 800f5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5f0:	1f18      	subs	r0, r3, #4
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	bfbc      	itt	lt
 800f5f6:	580b      	ldrlt	r3, [r1, r0]
 800f5f8:	18c0      	addlt	r0, r0, r3
 800f5fa:	4770      	bx	lr

0800f5fc <log>:
 800f5fc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800f600:	b08a      	sub	sp, #40	; 0x28
 800f602:	4604      	mov	r4, r0
 800f604:	460d      	mov	r5, r1
 800f606:	f000 f873 	bl	800f6f0 <__ieee754_log>
 800f60a:	4b34      	ldr	r3, [pc, #208]	; (800f6dc <log+0xe0>)
 800f60c:	4680      	mov	r8, r0
 800f60e:	f993 6000 	ldrsb.w	r6, [r3]
 800f612:	4689      	mov	r9, r1
 800f614:	1c73      	adds	r3, r6, #1
 800f616:	d05b      	beq.n	800f6d0 <log+0xd4>
 800f618:	4622      	mov	r2, r4
 800f61a:	462b      	mov	r3, r5
 800f61c:	4620      	mov	r0, r4
 800f61e:	4629      	mov	r1, r5
 800f620:	f7f1 fa30 	bl	8000a84 <__aeabi_dcmpun>
 800f624:	2800      	cmp	r0, #0
 800f626:	d153      	bne.n	800f6d0 <log+0xd4>
 800f628:	2200      	movs	r2, #0
 800f62a:	2300      	movs	r3, #0
 800f62c:	4620      	mov	r0, r4
 800f62e:	4629      	mov	r1, r5
 800f630:	f7f1 fa1e 	bl	8000a70 <__aeabi_dcmpgt>
 800f634:	2800      	cmp	r0, #0
 800f636:	d14b      	bne.n	800f6d0 <log+0xd4>
 800f638:	4b29      	ldr	r3, [pc, #164]	; (800f6e0 <log+0xe4>)
 800f63a:	9008      	str	r0, [sp, #32]
 800f63c:	9301      	str	r3, [sp, #4]
 800f63e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f642:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800f646:	b9a6      	cbnz	r6, 800f672 <log+0x76>
 800f648:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800f64c:	4b25      	ldr	r3, [pc, #148]	; (800f6e4 <log+0xe8>)
 800f64e:	4620      	mov	r0, r4
 800f650:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f654:	4629      	mov	r1, r5
 800f656:	2200      	movs	r2, #0
 800f658:	2300      	movs	r3, #0
 800f65a:	f7f1 f9e1 	bl	8000a20 <__aeabi_dcmpeq>
 800f65e:	bb40      	cbnz	r0, 800f6b2 <log+0xb6>
 800f660:	2301      	movs	r3, #1
 800f662:	2e02      	cmp	r6, #2
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	d119      	bne.n	800f69c <log+0xa0>
 800f668:	f7fd ff58 	bl	800d51c <__errno>
 800f66c:	2321      	movs	r3, #33	; 0x21
 800f66e:	6003      	str	r3, [r0, #0]
 800f670:	e019      	b.n	800f6a6 <log+0xaa>
 800f672:	2200      	movs	r2, #0
 800f674:	4b1c      	ldr	r3, [pc, #112]	; (800f6e8 <log+0xec>)
 800f676:	4620      	mov	r0, r4
 800f678:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f67c:	4629      	mov	r1, r5
 800f67e:	2200      	movs	r2, #0
 800f680:	2300      	movs	r3, #0
 800f682:	f7f1 f9cd 	bl	8000a20 <__aeabi_dcmpeq>
 800f686:	2800      	cmp	r0, #0
 800f688:	d0ea      	beq.n	800f660 <log+0x64>
 800f68a:	2302      	movs	r3, #2
 800f68c:	429e      	cmp	r6, r3
 800f68e:	9300      	str	r3, [sp, #0]
 800f690:	d111      	bne.n	800f6b6 <log+0xba>
 800f692:	f7fd ff43 	bl	800d51c <__errno>
 800f696:	2322      	movs	r3, #34	; 0x22
 800f698:	6003      	str	r3, [r0, #0]
 800f69a:	e011      	b.n	800f6c0 <log+0xc4>
 800f69c:	4668      	mov	r0, sp
 800f69e:	f000 f9d9 	bl	800fa54 <matherr>
 800f6a2:	2800      	cmp	r0, #0
 800f6a4:	d0e0      	beq.n	800f668 <log+0x6c>
 800f6a6:	4811      	ldr	r0, [pc, #68]	; (800f6ec <log+0xf0>)
 800f6a8:	f000 f9d6 	bl	800fa58 <nan>
 800f6ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f6b0:	e006      	b.n	800f6c0 <log+0xc4>
 800f6b2:	2302      	movs	r3, #2
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	4668      	mov	r0, sp
 800f6b8:	f000 f9cc 	bl	800fa54 <matherr>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d0e8      	beq.n	800f692 <log+0x96>
 800f6c0:	9b08      	ldr	r3, [sp, #32]
 800f6c2:	b11b      	cbz	r3, 800f6cc <log+0xd0>
 800f6c4:	f7fd ff2a 	bl	800d51c <__errno>
 800f6c8:	9b08      	ldr	r3, [sp, #32]
 800f6ca:	6003      	str	r3, [r0, #0]
 800f6cc:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800f6d0:	4640      	mov	r0, r8
 800f6d2:	4649      	mov	r1, r9
 800f6d4:	b00a      	add	sp, #40	; 0x28
 800f6d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800f6da:	bf00      	nop
 800f6dc:	20000234 	.word	0x20000234
 800f6e0:	08010528 	.word	0x08010528
 800f6e4:	c7efffff 	.word	0xc7efffff
 800f6e8:	fff00000 	.word	0xfff00000
 800f6ec:	08010411 	.word	0x08010411

0800f6f0 <__ieee754_log>:
 800f6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800f6f8:	b087      	sub	sp, #28
 800f6fa:	4602      	mov	r2, r0
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	460d      	mov	r5, r1
 800f700:	da24      	bge.n	800f74c <__ieee754_log+0x5c>
 800f702:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800f706:	4304      	orrs	r4, r0
 800f708:	d108      	bne.n	800f71c <__ieee754_log+0x2c>
 800f70a:	2200      	movs	r2, #0
 800f70c:	2300      	movs	r3, #0
 800f70e:	2000      	movs	r0, #0
 800f710:	49cb      	ldr	r1, [pc, #812]	; (800fa40 <__ieee754_log+0x350>)
 800f712:	f7f1 f847 	bl	80007a4 <__aeabi_ddiv>
 800f716:	b007      	add	sp, #28
 800f718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71c:	2900      	cmp	r1, #0
 800f71e:	da04      	bge.n	800f72a <__ieee754_log+0x3a>
 800f720:	f7f0 fd5e 	bl	80001e0 <__aeabi_dsub>
 800f724:	2200      	movs	r2, #0
 800f726:	2300      	movs	r3, #0
 800f728:	e7f3      	b.n	800f712 <__ieee754_log+0x22>
 800f72a:	2200      	movs	r2, #0
 800f72c:	4bc5      	ldr	r3, [pc, #788]	; (800fa44 <__ieee754_log+0x354>)
 800f72e:	f7f0 ff0f 	bl	8000550 <__aeabi_dmul>
 800f732:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	460d      	mov	r5, r1
 800f73c:	49c2      	ldr	r1, [pc, #776]	; (800fa48 <__ieee754_log+0x358>)
 800f73e:	428d      	cmp	r5, r1
 800f740:	dd06      	ble.n	800f750 <__ieee754_log+0x60>
 800f742:	4610      	mov	r0, r2
 800f744:	4619      	mov	r1, r3
 800f746:	f7f0 fd4d 	bl	80001e4 <__adddf3>
 800f74a:	e7e4      	b.n	800f716 <__ieee754_log+0x26>
 800f74c:	2600      	movs	r6, #0
 800f74e:	e7f5      	b.n	800f73c <__ieee754_log+0x4c>
 800f750:	152c      	asrs	r4, r5, #20
 800f752:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800f756:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800f75a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800f75e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800f762:	4426      	add	r6, r4
 800f764:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800f768:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800f76c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800f770:	ea41 0305 	orr.w	r3, r1, r5
 800f774:	4610      	mov	r0, r2
 800f776:	4619      	mov	r1, r3
 800f778:	2200      	movs	r2, #0
 800f77a:	4bb4      	ldr	r3, [pc, #720]	; (800fa4c <__ieee754_log+0x35c>)
 800f77c:	f7f0 fd30 	bl	80001e0 <__aeabi_dsub>
 800f780:	1cab      	adds	r3, r5, #2
 800f782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f786:	2b02      	cmp	r3, #2
 800f788:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800f78c:	4682      	mov	sl, r0
 800f78e:	468b      	mov	fp, r1
 800f790:	f04f 0200 	mov.w	r2, #0
 800f794:	dc53      	bgt.n	800f83e <__ieee754_log+0x14e>
 800f796:	2300      	movs	r3, #0
 800f798:	f7f1 f942 	bl	8000a20 <__aeabi_dcmpeq>
 800f79c:	b1d0      	cbz	r0, 800f7d4 <__ieee754_log+0xe4>
 800f79e:	2c00      	cmp	r4, #0
 800f7a0:	f000 8120 	beq.w	800f9e4 <__ieee754_log+0x2f4>
 800f7a4:	4620      	mov	r0, r4
 800f7a6:	f7f0 fe69 	bl	800047c <__aeabi_i2d>
 800f7aa:	a391      	add	r3, pc, #580	; (adr r3, 800f9f0 <__ieee754_log+0x300>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	460f      	mov	r7, r1
 800f7b4:	f7f0 fecc 	bl	8000550 <__aeabi_dmul>
 800f7b8:	a38f      	add	r3, pc, #572	; (adr r3, 800f9f8 <__ieee754_log+0x308>)
 800f7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7be:	4604      	mov	r4, r0
 800f7c0:	460d      	mov	r5, r1
 800f7c2:	4630      	mov	r0, r6
 800f7c4:	4639      	mov	r1, r7
 800f7c6:	f7f0 fec3 	bl	8000550 <__aeabi_dmul>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	4629      	mov	r1, r5
 800f7d2:	e7b8      	b.n	800f746 <__ieee754_log+0x56>
 800f7d4:	a38a      	add	r3, pc, #552	; (adr r3, 800fa00 <__ieee754_log+0x310>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	4650      	mov	r0, sl
 800f7dc:	4659      	mov	r1, fp
 800f7de:	f7f0 feb7 	bl	8000550 <__aeabi_dmul>
 800f7e2:	4602      	mov	r2, r0
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	2000      	movs	r0, #0
 800f7e8:	4999      	ldr	r1, [pc, #612]	; (800fa50 <__ieee754_log+0x360>)
 800f7ea:	f7f0 fcf9 	bl	80001e0 <__aeabi_dsub>
 800f7ee:	4652      	mov	r2, sl
 800f7f0:	4606      	mov	r6, r0
 800f7f2:	460f      	mov	r7, r1
 800f7f4:	465b      	mov	r3, fp
 800f7f6:	4650      	mov	r0, sl
 800f7f8:	4659      	mov	r1, fp
 800f7fa:	f7f0 fea9 	bl	8000550 <__aeabi_dmul>
 800f7fe:	4602      	mov	r2, r0
 800f800:	460b      	mov	r3, r1
 800f802:	4630      	mov	r0, r6
 800f804:	4639      	mov	r1, r7
 800f806:	f7f0 fea3 	bl	8000550 <__aeabi_dmul>
 800f80a:	4606      	mov	r6, r0
 800f80c:	460f      	mov	r7, r1
 800f80e:	b914      	cbnz	r4, 800f816 <__ieee754_log+0x126>
 800f810:	4632      	mov	r2, r6
 800f812:	463b      	mov	r3, r7
 800f814:	e0a0      	b.n	800f958 <__ieee754_log+0x268>
 800f816:	4620      	mov	r0, r4
 800f818:	f7f0 fe30 	bl	800047c <__aeabi_i2d>
 800f81c:	a374      	add	r3, pc, #464	; (adr r3, 800f9f0 <__ieee754_log+0x300>)
 800f81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f822:	4680      	mov	r8, r0
 800f824:	4689      	mov	r9, r1
 800f826:	f7f0 fe93 	bl	8000550 <__aeabi_dmul>
 800f82a:	a373      	add	r3, pc, #460	; (adr r3, 800f9f8 <__ieee754_log+0x308>)
 800f82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f830:	4604      	mov	r4, r0
 800f832:	460d      	mov	r5, r1
 800f834:	4640      	mov	r0, r8
 800f836:	4649      	mov	r1, r9
 800f838:	f7f0 fe8a 	bl	8000550 <__aeabi_dmul>
 800f83c:	e0a5      	b.n	800f98a <__ieee754_log+0x29a>
 800f83e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f842:	f7f0 fccf 	bl	80001e4 <__adddf3>
 800f846:	4602      	mov	r2, r0
 800f848:	460b      	mov	r3, r1
 800f84a:	4650      	mov	r0, sl
 800f84c:	4659      	mov	r1, fp
 800f84e:	f7f0 ffa9 	bl	80007a4 <__aeabi_ddiv>
 800f852:	e9cd 0100 	strd	r0, r1, [sp]
 800f856:	4620      	mov	r0, r4
 800f858:	f7f0 fe10 	bl	800047c <__aeabi_i2d>
 800f85c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f864:	4610      	mov	r0, r2
 800f866:	4619      	mov	r1, r3
 800f868:	f7f0 fe72 	bl	8000550 <__aeabi_dmul>
 800f86c:	4602      	mov	r2, r0
 800f86e:	460b      	mov	r3, r1
 800f870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f874:	f7f0 fe6c 	bl	8000550 <__aeabi_dmul>
 800f878:	a363      	add	r3, pc, #396	; (adr r3, 800fa08 <__ieee754_log+0x318>)
 800f87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87e:	4680      	mov	r8, r0
 800f880:	4689      	mov	r9, r1
 800f882:	f7f0 fe65 	bl	8000550 <__aeabi_dmul>
 800f886:	a362      	add	r3, pc, #392	; (adr r3, 800fa10 <__ieee754_log+0x320>)
 800f888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88c:	f7f0 fcaa 	bl	80001e4 <__adddf3>
 800f890:	4642      	mov	r2, r8
 800f892:	464b      	mov	r3, r9
 800f894:	f7f0 fe5c 	bl	8000550 <__aeabi_dmul>
 800f898:	a35f      	add	r3, pc, #380	; (adr r3, 800fa18 <__ieee754_log+0x328>)
 800f89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89e:	f7f0 fca1 	bl	80001e4 <__adddf3>
 800f8a2:	4642      	mov	r2, r8
 800f8a4:	464b      	mov	r3, r9
 800f8a6:	f7f0 fe53 	bl	8000550 <__aeabi_dmul>
 800f8aa:	a35d      	add	r3, pc, #372	; (adr r3, 800fa20 <__ieee754_log+0x330>)
 800f8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b0:	f7f0 fc98 	bl	80001e4 <__adddf3>
 800f8b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f8b8:	f7f0 fe4a 	bl	8000550 <__aeabi_dmul>
 800f8bc:	a35a      	add	r3, pc, #360	; (adr r3, 800fa28 <__ieee754_log+0x338>)
 800f8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f8c6:	4640      	mov	r0, r8
 800f8c8:	4649      	mov	r1, r9
 800f8ca:	f7f0 fe41 	bl	8000550 <__aeabi_dmul>
 800f8ce:	a358      	add	r3, pc, #352	; (adr r3, 800fa30 <__ieee754_log+0x340>)
 800f8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d4:	f7f0 fc86 	bl	80001e4 <__adddf3>
 800f8d8:	4642      	mov	r2, r8
 800f8da:	464b      	mov	r3, r9
 800f8dc:	f7f0 fe38 	bl	8000550 <__aeabi_dmul>
 800f8e0:	a355      	add	r3, pc, #340	; (adr r3, 800fa38 <__ieee754_log+0x348>)
 800f8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e6:	f7f0 fc7d 	bl	80001e4 <__adddf3>
 800f8ea:	4642      	mov	r2, r8
 800f8ec:	464b      	mov	r3, r9
 800f8ee:	f7f0 fe2f 	bl	8000550 <__aeabi_dmul>
 800f8f2:	4602      	mov	r2, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8fa:	f7f0 fc73 	bl	80001e4 <__adddf3>
 800f8fe:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 800f902:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800f906:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 800f90a:	3551      	adds	r5, #81	; 0x51
 800f90c:	4335      	orrs	r5, r6
 800f90e:	2d00      	cmp	r5, #0
 800f910:	4680      	mov	r8, r0
 800f912:	4689      	mov	r9, r1
 800f914:	dd48      	ble.n	800f9a8 <__ieee754_log+0x2b8>
 800f916:	2200      	movs	r2, #0
 800f918:	4b4d      	ldr	r3, [pc, #308]	; (800fa50 <__ieee754_log+0x360>)
 800f91a:	4650      	mov	r0, sl
 800f91c:	4659      	mov	r1, fp
 800f91e:	f7f0 fe17 	bl	8000550 <__aeabi_dmul>
 800f922:	4652      	mov	r2, sl
 800f924:	465b      	mov	r3, fp
 800f926:	f7f0 fe13 	bl	8000550 <__aeabi_dmul>
 800f92a:	4602      	mov	r2, r0
 800f92c:	460b      	mov	r3, r1
 800f92e:	4606      	mov	r6, r0
 800f930:	460f      	mov	r7, r1
 800f932:	4640      	mov	r0, r8
 800f934:	4649      	mov	r1, r9
 800f936:	f7f0 fc55 	bl	80001e4 <__adddf3>
 800f93a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f93e:	f7f0 fe07 	bl	8000550 <__aeabi_dmul>
 800f942:	4680      	mov	r8, r0
 800f944:	4689      	mov	r9, r1
 800f946:	b964      	cbnz	r4, 800f962 <__ieee754_log+0x272>
 800f948:	4602      	mov	r2, r0
 800f94a:	460b      	mov	r3, r1
 800f94c:	4630      	mov	r0, r6
 800f94e:	4639      	mov	r1, r7
 800f950:	f7f0 fc46 	bl	80001e0 <__aeabi_dsub>
 800f954:	4602      	mov	r2, r0
 800f956:	460b      	mov	r3, r1
 800f958:	4650      	mov	r0, sl
 800f95a:	4659      	mov	r1, fp
 800f95c:	f7f0 fc40 	bl	80001e0 <__aeabi_dsub>
 800f960:	e6d9      	b.n	800f716 <__ieee754_log+0x26>
 800f962:	a323      	add	r3, pc, #140	; (adr r3, 800f9f0 <__ieee754_log+0x300>)
 800f964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f96c:	f7f0 fdf0 	bl	8000550 <__aeabi_dmul>
 800f970:	a321      	add	r3, pc, #132	; (adr r3, 800f9f8 <__ieee754_log+0x308>)
 800f972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f976:	4604      	mov	r4, r0
 800f978:	460d      	mov	r5, r1
 800f97a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f97e:	f7f0 fde7 	bl	8000550 <__aeabi_dmul>
 800f982:	4642      	mov	r2, r8
 800f984:	464b      	mov	r3, r9
 800f986:	f7f0 fc2d 	bl	80001e4 <__adddf3>
 800f98a:	4602      	mov	r2, r0
 800f98c:	460b      	mov	r3, r1
 800f98e:	4630      	mov	r0, r6
 800f990:	4639      	mov	r1, r7
 800f992:	f7f0 fc25 	bl	80001e0 <__aeabi_dsub>
 800f996:	4652      	mov	r2, sl
 800f998:	465b      	mov	r3, fp
 800f99a:	f7f0 fc21 	bl	80001e0 <__aeabi_dsub>
 800f99e:	4602      	mov	r2, r0
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	4620      	mov	r0, r4
 800f9a4:	4629      	mov	r1, r5
 800f9a6:	e7d9      	b.n	800f95c <__ieee754_log+0x26c>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	4650      	mov	r0, sl
 800f9ae:	4659      	mov	r1, fp
 800f9b0:	f7f0 fc16 	bl	80001e0 <__aeabi_dsub>
 800f9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9b8:	f7f0 fdca 	bl	8000550 <__aeabi_dmul>
 800f9bc:	4606      	mov	r6, r0
 800f9be:	460f      	mov	r7, r1
 800f9c0:	2c00      	cmp	r4, #0
 800f9c2:	f43f af25 	beq.w	800f810 <__ieee754_log+0x120>
 800f9c6:	a30a      	add	r3, pc, #40	; (adr r3, 800f9f0 <__ieee754_log+0x300>)
 800f9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9d0:	f7f0 fdbe 	bl	8000550 <__aeabi_dmul>
 800f9d4:	a308      	add	r3, pc, #32	; (adr r3, 800f9f8 <__ieee754_log+0x308>)
 800f9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9da:	4604      	mov	r4, r0
 800f9dc:	460d      	mov	r5, r1
 800f9de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9e2:	e729      	b.n	800f838 <__ieee754_log+0x148>
 800f9e4:	2000      	movs	r0, #0
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	e695      	b.n	800f716 <__ieee754_log+0x26>
 800f9ea:	bf00      	nop
 800f9ec:	f3af 8000 	nop.w
 800f9f0:	fee00000 	.word	0xfee00000
 800f9f4:	3fe62e42 	.word	0x3fe62e42
 800f9f8:	35793c76 	.word	0x35793c76
 800f9fc:	3dea39ef 	.word	0x3dea39ef
 800fa00:	55555555 	.word	0x55555555
 800fa04:	3fd55555 	.word	0x3fd55555
 800fa08:	df3e5244 	.word	0xdf3e5244
 800fa0c:	3fc2f112 	.word	0x3fc2f112
 800fa10:	96cb03de 	.word	0x96cb03de
 800fa14:	3fc74664 	.word	0x3fc74664
 800fa18:	94229359 	.word	0x94229359
 800fa1c:	3fd24924 	.word	0x3fd24924
 800fa20:	55555593 	.word	0x55555593
 800fa24:	3fe55555 	.word	0x3fe55555
 800fa28:	d078c69f 	.word	0xd078c69f
 800fa2c:	3fc39a09 	.word	0x3fc39a09
 800fa30:	1d8e78af 	.word	0x1d8e78af
 800fa34:	3fcc71c5 	.word	0x3fcc71c5
 800fa38:	9997fa04 	.word	0x9997fa04
 800fa3c:	3fd99999 	.word	0x3fd99999
 800fa40:	c3500000 	.word	0xc3500000
 800fa44:	43500000 	.word	0x43500000
 800fa48:	7fefffff 	.word	0x7fefffff
 800fa4c:	3ff00000 	.word	0x3ff00000
 800fa50:	3fe00000 	.word	0x3fe00000

0800fa54 <matherr>:
 800fa54:	2000      	movs	r0, #0
 800fa56:	4770      	bx	lr

0800fa58 <nan>:
 800fa58:	2000      	movs	r0, #0
 800fa5a:	4901      	ldr	r1, [pc, #4]	; (800fa60 <nan+0x8>)
 800fa5c:	4770      	bx	lr
 800fa5e:	bf00      	nop
 800fa60:	7ff80000 	.word	0x7ff80000

0800fa64 <_init>:
 800fa64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa66:	bf00      	nop
 800fa68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa6a:	bc08      	pop	{r3}
 800fa6c:	469e      	mov	lr, r3
 800fa6e:	4770      	bx	lr

0800fa70 <_fini>:
 800fa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa72:	bf00      	nop
 800fa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa76:	bc08      	pop	{r3}
 800fa78:	469e      	mov	lr, r3
 800fa7a:	4770      	bx	lr
