
GEN Charger Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010024  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  080101b0  080101b0  000201b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cb4  08010cb4  00030234  2**0
                  CONTENTS
  4 .ARM          00000008  08010cb4  08010cb4  00020cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010cbc  08010cbc  00030234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cbc  08010cbc  00020cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cc0  08010cc0  00020cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  08010cc4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e0  20000234  08010ef8  00030234  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001714  08010ef8  00031714  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020893  00000000  00000000  0003025d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a29  00000000  00000000  00050af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013b8  00000000  00000000  00054520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011f0  00000000  00000000  000558d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021cf0  00000000  00000000  00056ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013ce7  00000000  00000000  000787b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2bac  00000000  00000000  0008c49f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f04b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d88  00000000  00000000  0014f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000234 	.word	0x20000234
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08010194 	.word	0x08010194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000238 	.word	0x20000238
 80001c4:	08010194 	.word	0x08010194

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	d1ed      	bne.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_fmul>:
 8000dbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dc4:	bf1e      	ittt	ne
 8000dc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dca:	ea92 0f0c 	teqne	r2, ip
 8000dce:	ea93 0f0c 	teqne	r3, ip
 8000dd2:	d06f      	beq.n	8000eb4 <__aeabi_fmul+0xf8>
 8000dd4:	441a      	add	r2, r3
 8000dd6:	ea80 0c01 	eor.w	ip, r0, r1
 8000dda:	0240      	lsls	r0, r0, #9
 8000ddc:	bf18      	it	ne
 8000dde:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000de2:	d01e      	beq.n	8000e22 <__aeabi_fmul+0x66>
 8000de4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000df0:	fba0 3101 	umull	r3, r1, r0, r1
 8000df4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dfc:	bf3e      	ittt	cc
 8000dfe:	0049      	lslcc	r1, r1, #1
 8000e00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e04:	005b      	lslcc	r3, r3, #1
 8000e06:	ea40 0001 	orr.w	r0, r0, r1
 8000e0a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e0e:	2afd      	cmp	r2, #253	; 0xfd
 8000e10:	d81d      	bhi.n	8000e4e <__aeabi_fmul+0x92>
 8000e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e1a:	bf08      	it	eq
 8000e1c:	f020 0001 	biceq.w	r0, r0, #1
 8000e20:	4770      	bx	lr
 8000e22:	f090 0f00 	teq	r0, #0
 8000e26:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e2a:	bf08      	it	eq
 8000e2c:	0249      	lsleq	r1, r1, #9
 8000e2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e36:	3a7f      	subs	r2, #127	; 0x7f
 8000e38:	bfc2      	ittt	gt
 8000e3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e42:	4770      	bxgt	lr
 8000e44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	3a01      	subs	r2, #1
 8000e4e:	dc5d      	bgt.n	8000f0c <__aeabi_fmul+0x150>
 8000e50:	f112 0f19 	cmn.w	r2, #25
 8000e54:	bfdc      	itt	le
 8000e56:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e5a:	4770      	bxle	lr
 8000e5c:	f1c2 0200 	rsb	r2, r2, #0
 8000e60:	0041      	lsls	r1, r0, #1
 8000e62:	fa21 f102 	lsr.w	r1, r1, r2
 8000e66:	f1c2 0220 	rsb	r2, r2, #32
 8000e6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e72:	f140 0000 	adc.w	r0, r0, #0
 8000e76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e7a:	bf08      	it	eq
 8000e7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e80:	4770      	bx	lr
 8000e82:	f092 0f00 	teq	r2, #0
 8000e86:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e8a:	bf02      	ittt	eq
 8000e8c:	0040      	lsleq	r0, r0, #1
 8000e8e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e92:	3a01      	subeq	r2, #1
 8000e94:	d0f9      	beq.n	8000e8a <__aeabi_fmul+0xce>
 8000e96:	ea40 000c 	orr.w	r0, r0, ip
 8000e9a:	f093 0f00 	teq	r3, #0
 8000e9e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ea2:	bf02      	ittt	eq
 8000ea4:	0049      	lsleq	r1, r1, #1
 8000ea6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eaa:	3b01      	subeq	r3, #1
 8000eac:	d0f9      	beq.n	8000ea2 <__aeabi_fmul+0xe6>
 8000eae:	ea41 010c 	orr.w	r1, r1, ip
 8000eb2:	e78f      	b.n	8000dd4 <__aeabi_fmul+0x18>
 8000eb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	bf18      	it	ne
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d00a      	beq.n	8000eda <__aeabi_fmul+0x11e>
 8000ec4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec8:	bf18      	it	ne
 8000eca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ece:	d1d8      	bne.n	8000e82 <__aeabi_fmul+0xc6>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	4770      	bx	lr
 8000eda:	f090 0f00 	teq	r0, #0
 8000ede:	bf17      	itett	ne
 8000ee0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ee4:	4608      	moveq	r0, r1
 8000ee6:	f091 0f00 	teqne	r1, #0
 8000eea:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eee:	d014      	beq.n	8000f1a <__aeabi_fmul+0x15e>
 8000ef0:	ea92 0f0c 	teq	r2, ip
 8000ef4:	d101      	bne.n	8000efa <__aeabi_fmul+0x13e>
 8000ef6:	0242      	lsls	r2, r0, #9
 8000ef8:	d10f      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000efa:	ea93 0f0c 	teq	r3, ip
 8000efe:	d103      	bne.n	8000f08 <__aeabi_fmul+0x14c>
 8000f00:	024b      	lsls	r3, r1, #9
 8000f02:	bf18      	it	ne
 8000f04:	4608      	movne	r0, r1
 8000f06:	d108      	bne.n	8000f1a <__aeabi_fmul+0x15e>
 8000f08:	ea80 0001 	eor.w	r0, r0, r1
 8000f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f1e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_fdiv>:
 8000f24:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f2c:	bf1e      	ittt	ne
 8000f2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f32:	ea92 0f0c 	teqne	r2, ip
 8000f36:	ea93 0f0c 	teqne	r3, ip
 8000f3a:	d069      	beq.n	8001010 <__aeabi_fdiv+0xec>
 8000f3c:	eba2 0203 	sub.w	r2, r2, r3
 8000f40:	ea80 0c01 	eor.w	ip, r0, r1
 8000f44:	0249      	lsls	r1, r1, #9
 8000f46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f4a:	d037      	beq.n	8000fbc <__aeabi_fdiv+0x98>
 8000f4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f58:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf38      	it	cc
 8000f60:	005b      	lslcc	r3, r3, #1
 8000f62:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f66:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f6a:	428b      	cmp	r3, r1
 8000f6c:	bf24      	itt	cs
 8000f6e:	1a5b      	subcs	r3, r3, r1
 8000f70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f78:	bf24      	itt	cs
 8000f7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f86:	bf24      	itt	cs
 8000f88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f94:	bf24      	itt	cs
 8000f96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	bf18      	it	ne
 8000fa2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fa6:	d1e0      	bne.n	8000f6a <__aeabi_fdiv+0x46>
 8000fa8:	2afd      	cmp	r2, #253	; 0xfd
 8000faa:	f63f af50 	bhi.w	8000e4e <__aeabi_fmul+0x92>
 8000fae:	428b      	cmp	r3, r1
 8000fb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fb4:	bf08      	it	eq
 8000fb6:	f020 0001 	biceq.w	r0, r0, #1
 8000fba:	4770      	bx	lr
 8000fbc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fc4:	327f      	adds	r2, #127	; 0x7f
 8000fc6:	bfc2      	ittt	gt
 8000fc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fcc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fd0:	4770      	bxgt	lr
 8000fd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	e737      	b.n	8000e4e <__aeabi_fmul+0x92>
 8000fde:	f092 0f00 	teq	r2, #0
 8000fe2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fe6:	bf02      	ittt	eq
 8000fe8:	0040      	lsleq	r0, r0, #1
 8000fea:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fee:	3a01      	subeq	r2, #1
 8000ff0:	d0f9      	beq.n	8000fe6 <__aeabi_fdiv+0xc2>
 8000ff2:	ea40 000c 	orr.w	r0, r0, ip
 8000ff6:	f093 0f00 	teq	r3, #0
 8000ffa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ffe:	bf02      	ittt	eq
 8001000:	0049      	lsleq	r1, r1, #1
 8001002:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8001006:	3b01      	subeq	r3, #1
 8001008:	d0f9      	beq.n	8000ffe <__aeabi_fdiv+0xda>
 800100a:	ea41 010c 	orr.w	r1, r1, ip
 800100e:	e795      	b.n	8000f3c <__aeabi_fdiv+0x18>
 8001010:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001014:	ea92 0f0c 	teq	r2, ip
 8001018:	d108      	bne.n	800102c <__aeabi_fdiv+0x108>
 800101a:	0242      	lsls	r2, r0, #9
 800101c:	f47f af7d 	bne.w	8000f1a <__aeabi_fmul+0x15e>
 8001020:	ea93 0f0c 	teq	r3, ip
 8001024:	f47f af70 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001028:	4608      	mov	r0, r1
 800102a:	e776      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	d104      	bne.n	800103c <__aeabi_fdiv+0x118>
 8001032:	024b      	lsls	r3, r1, #9
 8001034:	f43f af4c 	beq.w	8000ed0 <__aeabi_fmul+0x114>
 8001038:	4608      	mov	r0, r1
 800103a:	e76e      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800103c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001040:	bf18      	it	ne
 8001042:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001046:	d1ca      	bne.n	8000fde <__aeabi_fdiv+0xba>
 8001048:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800104c:	f47f af5c 	bne.w	8000f08 <__aeabi_fmul+0x14c>
 8001050:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001054:	f47f af3c 	bne.w	8000ed0 <__aeabi_fmul+0x114>
 8001058:	e75f      	b.n	8000f1a <__aeabi_fmul+0x15e>
 800105a:	bf00      	nop

0800105c <__gesf2>:
 800105c:	f04f 3cff 	mov.w	ip, #4294967295
 8001060:	e006      	b.n	8001070 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__lesf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	e002      	b.n	8001070 <__cmpsf2+0x4>
 800106a:	bf00      	nop

0800106c <__cmpsf2>:
 800106c:	f04f 0c01 	mov.w	ip, #1
 8001070:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001074:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001078:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800107c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001080:	bf18      	it	ne
 8001082:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001086:	d011      	beq.n	80010ac <__cmpsf2+0x40>
 8001088:	b001      	add	sp, #4
 800108a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800108e:	bf18      	it	ne
 8001090:	ea90 0f01 	teqne	r0, r1
 8001094:	bf58      	it	pl
 8001096:	ebb2 0003 	subspl.w	r0, r2, r3
 800109a:	bf88      	it	hi
 800109c:	17c8      	asrhi	r0, r1, #31
 800109e:	bf38      	it	cc
 80010a0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010a4:	bf18      	it	ne
 80010a6:	f040 0001 	orrne.w	r0, r0, #1
 80010aa:	4770      	bx	lr
 80010ac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b0:	d102      	bne.n	80010b8 <__cmpsf2+0x4c>
 80010b2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010b6:	d105      	bne.n	80010c4 <__cmpsf2+0x58>
 80010b8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010bc:	d1e4      	bne.n	8001088 <__cmpsf2+0x1c>
 80010be:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c2:	d0e1      	beq.n	8001088 <__cmpsf2+0x1c>
 80010c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop

080010cc <__aeabi_cfrcmple>:
 80010cc:	4684      	mov	ip, r0
 80010ce:	4608      	mov	r0, r1
 80010d0:	4661      	mov	r1, ip
 80010d2:	e7ff      	b.n	80010d4 <__aeabi_cfcmpeq>

080010d4 <__aeabi_cfcmpeq>:
 80010d4:	b50f      	push	{r0, r1, r2, r3, lr}
 80010d6:	f7ff ffc9 	bl	800106c <__cmpsf2>
 80010da:	2800      	cmp	r0, #0
 80010dc:	bf48      	it	mi
 80010de:	f110 0f00 	cmnmi.w	r0, #0
 80010e2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010e4 <__aeabi_fcmpeq>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff fff4 	bl	80010d4 <__aeabi_cfcmpeq>
 80010ec:	bf0c      	ite	eq
 80010ee:	2001      	moveq	r0, #1
 80010f0:	2000      	movne	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmplt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffea 	bl	80010d4 <__aeabi_cfcmpeq>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmple>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffe0 	bl	80010d4 <__aeabi_cfcmpeq>
 8001114:	bf94      	ite	ls
 8001116:	2001      	movls	r0, #1
 8001118:	2000      	movhi	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_fcmpge>:
 8001120:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001124:	f7ff ffd2 	bl	80010cc <__aeabi_cfrcmple>
 8001128:	bf94      	ite	ls
 800112a:	2001      	movls	r0, #1
 800112c:	2000      	movhi	r0, #0
 800112e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001132:	bf00      	nop

08001134 <__aeabi_fcmpgt>:
 8001134:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001138:	f7ff ffc8 	bl	80010cc <__aeabi_cfrcmple>
 800113c:	bf34      	ite	cc
 800113e:	2001      	movcc	r0, #1
 8001140:	2000      	movcs	r0, #0
 8001142:	f85d fb08 	ldr.w	pc, [sp], #8
 8001146:	bf00      	nop

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_uldivmod>:
 8001188:	b953      	cbnz	r3, 80011a0 <__aeabi_uldivmod+0x18>
 800118a:	b94a      	cbnz	r2, 80011a0 <__aeabi_uldivmod+0x18>
 800118c:	2900      	cmp	r1, #0
 800118e:	bf08      	it	eq
 8001190:	2800      	cmpeq	r0, #0
 8001192:	bf1c      	itt	ne
 8001194:	f04f 31ff 	movne.w	r1, #4294967295
 8001198:	f04f 30ff 	movne.w	r0, #4294967295
 800119c:	f000 b974 	b.w	8001488 <__aeabi_idiv0>
 80011a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a8:	f000 f806 	bl	80011b8 <__udivmoddi4>
 80011ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b4:	b004      	add	sp, #16
 80011b6:	4770      	bx	lr

080011b8 <__udivmoddi4>:
 80011b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011bc:	468c      	mov	ip, r1
 80011be:	4604      	mov	r4, r0
 80011c0:	9e08      	ldr	r6, [sp, #32]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d14b      	bne.n	800125e <__udivmoddi4+0xa6>
 80011c6:	428a      	cmp	r2, r1
 80011c8:	4615      	mov	r5, r2
 80011ca:	d967      	bls.n	800129c <__udivmoddi4+0xe4>
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	b14a      	cbz	r2, 80011e6 <__udivmoddi4+0x2e>
 80011d2:	f1c2 0720 	rsb	r7, r2, #32
 80011d6:	fa01 f302 	lsl.w	r3, r1, r2
 80011da:	fa20 f707 	lsr.w	r7, r0, r7
 80011de:	4095      	lsls	r5, r2
 80011e0:	ea47 0c03 	orr.w	ip, r7, r3
 80011e4:	4094      	lsls	r4, r2
 80011e6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011ea:	fbbc f7fe 	udiv	r7, ip, lr
 80011ee:	fa1f f885 	uxth.w	r8, r5
 80011f2:	fb0e c317 	mls	r3, lr, r7, ip
 80011f6:	fb07 f908 	mul.w	r9, r7, r8
 80011fa:	0c21      	lsrs	r1, r4, #16
 80011fc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001200:	4599      	cmp	r9, r3
 8001202:	d909      	bls.n	8001218 <__udivmoddi4+0x60>
 8001204:	18eb      	adds	r3, r5, r3
 8001206:	f107 31ff 	add.w	r1, r7, #4294967295
 800120a:	f080 811c 	bcs.w	8001446 <__udivmoddi4+0x28e>
 800120e:	4599      	cmp	r9, r3
 8001210:	f240 8119 	bls.w	8001446 <__udivmoddi4+0x28e>
 8001214:	3f02      	subs	r7, #2
 8001216:	442b      	add	r3, r5
 8001218:	eba3 0309 	sub.w	r3, r3, r9
 800121c:	fbb3 f0fe 	udiv	r0, r3, lr
 8001220:	fb0e 3310 	mls	r3, lr, r0, r3
 8001224:	fb00 f108 	mul.w	r1, r0, r8
 8001228:	b2a4      	uxth	r4, r4
 800122a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800122e:	42a1      	cmp	r1, r4
 8001230:	d909      	bls.n	8001246 <__udivmoddi4+0x8e>
 8001232:	192c      	adds	r4, r5, r4
 8001234:	f100 33ff 	add.w	r3, r0, #4294967295
 8001238:	f080 8107 	bcs.w	800144a <__udivmoddi4+0x292>
 800123c:	42a1      	cmp	r1, r4
 800123e:	f240 8104 	bls.w	800144a <__udivmoddi4+0x292>
 8001242:	3802      	subs	r0, #2
 8001244:	442c      	add	r4, r5
 8001246:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800124a:	2700      	movs	r7, #0
 800124c:	1a64      	subs	r4, r4, r1
 800124e:	b11e      	cbz	r6, 8001258 <__udivmoddi4+0xa0>
 8001250:	2300      	movs	r3, #0
 8001252:	40d4      	lsrs	r4, r2
 8001254:	e9c6 4300 	strd	r4, r3, [r6]
 8001258:	4639      	mov	r1, r7
 800125a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800125e:	428b      	cmp	r3, r1
 8001260:	d909      	bls.n	8001276 <__udivmoddi4+0xbe>
 8001262:	2e00      	cmp	r6, #0
 8001264:	f000 80ec 	beq.w	8001440 <__udivmoddi4+0x288>
 8001268:	2700      	movs	r7, #0
 800126a:	e9c6 0100 	strd	r0, r1, [r6]
 800126e:	4638      	mov	r0, r7
 8001270:	4639      	mov	r1, r7
 8001272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001276:	fab3 f783 	clz	r7, r3
 800127a:	2f00      	cmp	r7, #0
 800127c:	d148      	bne.n	8001310 <__udivmoddi4+0x158>
 800127e:	428b      	cmp	r3, r1
 8001280:	d302      	bcc.n	8001288 <__udivmoddi4+0xd0>
 8001282:	4282      	cmp	r2, r0
 8001284:	f200 80fb 	bhi.w	800147e <__udivmoddi4+0x2c6>
 8001288:	1a84      	subs	r4, r0, r2
 800128a:	eb61 0303 	sbc.w	r3, r1, r3
 800128e:	2001      	movs	r0, #1
 8001290:	469c      	mov	ip, r3
 8001292:	2e00      	cmp	r6, #0
 8001294:	d0e0      	beq.n	8001258 <__udivmoddi4+0xa0>
 8001296:	e9c6 4c00 	strd	r4, ip, [r6]
 800129a:	e7dd      	b.n	8001258 <__udivmoddi4+0xa0>
 800129c:	b902      	cbnz	r2, 80012a0 <__udivmoddi4+0xe8>
 800129e:	deff      	udf	#255	; 0xff
 80012a0:	fab2 f282 	clz	r2, r2
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 808f 	bne.w	80013c8 <__udivmoddi4+0x210>
 80012aa:	2701      	movs	r7, #1
 80012ac:	1b49      	subs	r1, r1, r5
 80012ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80012b2:	fa1f f985 	uxth.w	r9, r5
 80012b6:	fbb1 fef8 	udiv	lr, r1, r8
 80012ba:	fb08 111e 	mls	r1, r8, lr, r1
 80012be:	fb09 f00e 	mul.w	r0, r9, lr
 80012c2:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80012c6:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80012ca:	4298      	cmp	r0, r3
 80012cc:	d907      	bls.n	80012de <__udivmoddi4+0x126>
 80012ce:	18eb      	adds	r3, r5, r3
 80012d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80012d4:	d202      	bcs.n	80012dc <__udivmoddi4+0x124>
 80012d6:	4298      	cmp	r0, r3
 80012d8:	f200 80cd 	bhi.w	8001476 <__udivmoddi4+0x2be>
 80012dc:	468e      	mov	lr, r1
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80012e4:	fb08 3310 	mls	r3, r8, r0, r3
 80012e8:	fb09 f900 	mul.w	r9, r9, r0
 80012ec:	b2a4      	uxth	r4, r4
 80012ee:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80012f2:	45a1      	cmp	r9, r4
 80012f4:	d907      	bls.n	8001306 <__udivmoddi4+0x14e>
 80012f6:	192c      	adds	r4, r5, r4
 80012f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80012fc:	d202      	bcs.n	8001304 <__udivmoddi4+0x14c>
 80012fe:	45a1      	cmp	r9, r4
 8001300:	f200 80b6 	bhi.w	8001470 <__udivmoddi4+0x2b8>
 8001304:	4618      	mov	r0, r3
 8001306:	eba4 0409 	sub.w	r4, r4, r9
 800130a:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800130e:	e79e      	b.n	800124e <__udivmoddi4+0x96>
 8001310:	f1c7 0520 	rsb	r5, r7, #32
 8001314:	40bb      	lsls	r3, r7
 8001316:	fa22 fc05 	lsr.w	ip, r2, r5
 800131a:	ea4c 0c03 	orr.w	ip, ip, r3
 800131e:	fa21 f405 	lsr.w	r4, r1, r5
 8001322:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001326:	fbb4 f9fe 	udiv	r9, r4, lr
 800132a:	fa1f f88c 	uxth.w	r8, ip
 800132e:	fb0e 4419 	mls	r4, lr, r9, r4
 8001332:	fa20 f305 	lsr.w	r3, r0, r5
 8001336:	40b9      	lsls	r1, r7
 8001338:	fb09 fa08 	mul.w	sl, r9, r8
 800133c:	4319      	orrs	r1, r3
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001344:	45a2      	cmp	sl, r4
 8001346:	fa02 f207 	lsl.w	r2, r2, r7
 800134a:	fa00 f307 	lsl.w	r3, r0, r7
 800134e:	d90b      	bls.n	8001368 <__udivmoddi4+0x1b0>
 8001350:	eb1c 0404 	adds.w	r4, ip, r4
 8001354:	f109 30ff 	add.w	r0, r9, #4294967295
 8001358:	f080 8088 	bcs.w	800146c <__udivmoddi4+0x2b4>
 800135c:	45a2      	cmp	sl, r4
 800135e:	f240 8085 	bls.w	800146c <__udivmoddi4+0x2b4>
 8001362:	f1a9 0902 	sub.w	r9, r9, #2
 8001366:	4464      	add	r4, ip
 8001368:	eba4 040a 	sub.w	r4, r4, sl
 800136c:	fbb4 f0fe 	udiv	r0, r4, lr
 8001370:	fb0e 4410 	mls	r4, lr, r0, r4
 8001374:	fb00 fa08 	mul.w	sl, r0, r8
 8001378:	b289      	uxth	r1, r1
 800137a:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800137e:	45a2      	cmp	sl, r4
 8001380:	d908      	bls.n	8001394 <__udivmoddi4+0x1dc>
 8001382:	eb1c 0404 	adds.w	r4, ip, r4
 8001386:	f100 31ff 	add.w	r1, r0, #4294967295
 800138a:	d26b      	bcs.n	8001464 <__udivmoddi4+0x2ac>
 800138c:	45a2      	cmp	sl, r4
 800138e:	d969      	bls.n	8001464 <__udivmoddi4+0x2ac>
 8001390:	3802      	subs	r0, #2
 8001392:	4464      	add	r4, ip
 8001394:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001398:	fba0 8902 	umull	r8, r9, r0, r2
 800139c:	eba4 040a 	sub.w	r4, r4, sl
 80013a0:	454c      	cmp	r4, r9
 80013a2:	4641      	mov	r1, r8
 80013a4:	46ce      	mov	lr, r9
 80013a6:	d354      	bcc.n	8001452 <__udivmoddi4+0x29a>
 80013a8:	d051      	beq.n	800144e <__udivmoddi4+0x296>
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d069      	beq.n	8001482 <__udivmoddi4+0x2ca>
 80013ae:	1a5a      	subs	r2, r3, r1
 80013b0:	eb64 040e 	sbc.w	r4, r4, lr
 80013b4:	fa04 f505 	lsl.w	r5, r4, r5
 80013b8:	fa22 f307 	lsr.w	r3, r2, r7
 80013bc:	40fc      	lsrs	r4, r7
 80013be:	431d      	orrs	r5, r3
 80013c0:	e9c6 5400 	strd	r5, r4, [r6]
 80013c4:	2700      	movs	r7, #0
 80013c6:	e747      	b.n	8001258 <__udivmoddi4+0xa0>
 80013c8:	4095      	lsls	r5, r2
 80013ca:	f1c2 0320 	rsb	r3, r2, #32
 80013ce:	fa21 f003 	lsr.w	r0, r1, r3
 80013d2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013d6:	fbb0 f7f8 	udiv	r7, r0, r8
 80013da:	fa1f f985 	uxth.w	r9, r5
 80013de:	fb08 0017 	mls	r0, r8, r7, r0
 80013e2:	fa24 f303 	lsr.w	r3, r4, r3
 80013e6:	4091      	lsls	r1, r2
 80013e8:	fb07 fc09 	mul.w	ip, r7, r9
 80013ec:	430b      	orrs	r3, r1
 80013ee:	0c19      	lsrs	r1, r3, #16
 80013f0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f4:	458c      	cmp	ip, r1
 80013f6:	fa04 f402 	lsl.w	r4, r4, r2
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x254>
 80013fc:	1869      	adds	r1, r5, r1
 80013fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8001402:	d231      	bcs.n	8001468 <__udivmoddi4+0x2b0>
 8001404:	458c      	cmp	ip, r1
 8001406:	d92f      	bls.n	8001468 <__udivmoddi4+0x2b0>
 8001408:	3f02      	subs	r7, #2
 800140a:	4429      	add	r1, r5
 800140c:	eba1 010c 	sub.w	r1, r1, ip
 8001410:	fbb1 f0f8 	udiv	r0, r1, r8
 8001414:	fb08 1c10 	mls	ip, r8, r0, r1
 8001418:	fb00 fe09 	mul.w	lr, r0, r9
 800141c:	b299      	uxth	r1, r3
 800141e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001422:	458e      	cmp	lr, r1
 8001424:	d907      	bls.n	8001436 <__udivmoddi4+0x27e>
 8001426:	1869      	adds	r1, r5, r1
 8001428:	f100 33ff 	add.w	r3, r0, #4294967295
 800142c:	d218      	bcs.n	8001460 <__udivmoddi4+0x2a8>
 800142e:	458e      	cmp	lr, r1
 8001430:	d916      	bls.n	8001460 <__udivmoddi4+0x2a8>
 8001432:	3802      	subs	r0, #2
 8001434:	4429      	add	r1, r5
 8001436:	eba1 010e 	sub.w	r1, r1, lr
 800143a:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800143e:	e73a      	b.n	80012b6 <__udivmoddi4+0xfe>
 8001440:	4637      	mov	r7, r6
 8001442:	4630      	mov	r0, r6
 8001444:	e708      	b.n	8001258 <__udivmoddi4+0xa0>
 8001446:	460f      	mov	r7, r1
 8001448:	e6e6      	b.n	8001218 <__udivmoddi4+0x60>
 800144a:	4618      	mov	r0, r3
 800144c:	e6fb      	b.n	8001246 <__udivmoddi4+0x8e>
 800144e:	4543      	cmp	r3, r8
 8001450:	d2ab      	bcs.n	80013aa <__udivmoddi4+0x1f2>
 8001452:	ebb8 0102 	subs.w	r1, r8, r2
 8001456:	eb69 020c 	sbc.w	r2, r9, ip
 800145a:	3801      	subs	r0, #1
 800145c:	4696      	mov	lr, r2
 800145e:	e7a4      	b.n	80013aa <__udivmoddi4+0x1f2>
 8001460:	4618      	mov	r0, r3
 8001462:	e7e8      	b.n	8001436 <__udivmoddi4+0x27e>
 8001464:	4608      	mov	r0, r1
 8001466:	e795      	b.n	8001394 <__udivmoddi4+0x1dc>
 8001468:	4607      	mov	r7, r0
 800146a:	e7cf      	b.n	800140c <__udivmoddi4+0x254>
 800146c:	4681      	mov	r9, r0
 800146e:	e77b      	b.n	8001368 <__udivmoddi4+0x1b0>
 8001470:	3802      	subs	r0, #2
 8001472:	442c      	add	r4, r5
 8001474:	e747      	b.n	8001306 <__udivmoddi4+0x14e>
 8001476:	f1ae 0e02 	sub.w	lr, lr, #2
 800147a:	442b      	add	r3, r5
 800147c:	e72f      	b.n	80012de <__udivmoddi4+0x126>
 800147e:	4638      	mov	r0, r7
 8001480:	e707      	b.n	8001292 <__udivmoddi4+0xda>
 8001482:	4637      	mov	r7, r6
 8001484:	e6e8      	b.n	8001258 <__udivmoddi4+0xa0>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	0000      	movs	r0, r0
	...

08001490 <Constant_Current>:
float 	SetPoint_CC;
float	CC_Value;

//test git2
void Constant_Current()
{
 8001490:	b598      	push	{r3, r4, r7, lr}
 8001492:	af00      	add	r7, sp, #0
	CC_Value = 0.3*BPack_Capacity;
 8001494:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <Constant_Current+0x58>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f801 	bl	80004a0 <__aeabi_f2d>
 800149e:	a310      	add	r3, pc, #64	; (adr r3, 80014e0 <Constant_Current+0x50>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f854 	bl	8000550 <__aeabi_dmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	4618      	mov	r0, r3
 80014ae:	4621      	mov	r1, r4
 80014b0:	f7ff fb26 	bl	8000b00 <__aeabi_d2f>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <Constant_Current+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
	if(flag_Derating==1)
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <Constant_Current+0x60>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d11a      	bne.n	80014f8 <Constant_Current+0x68>
		SetPoint_CC = 0.5*CC_Value;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <Constant_Current+0x5c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fc76 	bl	8000dbc <__aeabi_fmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <Constant_Current+0x64>)
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	e08e      	b.n	80015f8 <Constant_Current+0x168>
 80014da:	bf00      	nop
 80014dc:	f3af 8000 	nop.w
 80014e0:	33333333 	.word	0x33333333
 80014e4:	3fd33333 	.word	0x3fd33333
 80014e8:	2000125c 	.word	0x2000125c
 80014ec:	20000f04 	.word	0x20000f04
 80014f0:	200010b8 	.word	0x200010b8
 80014f4:	20000c80 	.word	0x20000c80
	else {
		if(BPack_Temp <= 10)
 80014f8:	4b8d      	ldr	r3, [pc, #564]	; (8001730 <Constant_Current+0x2a0>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	498d      	ldr	r1, [pc, #564]	; (8001734 <Constant_Current+0x2a4>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fe04 	bl	800110c <__aeabi_fcmple>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00a      	beq.n	8001520 <Constant_Current+0x90>
			SetPoint_CC = 0.5*CC_Value;
 800150a:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <Constant_Current+0x2a8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff fc52 	bl	8000dbc <__aeabi_fmul>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	4b87      	ldr	r3, [pc, #540]	; (800173c <Constant_Current+0x2ac>)
 800151e:	601a      	str	r2, [r3, #0]

		if(BPack_Temp >10 && BPack_Temp < 20) // Temperature 10 ~ 20
 8001520:	4b83      	ldr	r3, [pc, #524]	; (8001730 <Constant_Current+0x2a0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4983      	ldr	r1, [pc, #524]	; (8001734 <Constant_Current+0x2a4>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe04 	bl	8001134 <__aeabi_fcmpgt>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d013      	beq.n	800155a <Constant_Current+0xca>
 8001532:	4b7f      	ldr	r3, [pc, #508]	; (8001730 <Constant_Current+0x2a0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4982      	ldr	r1, [pc, #520]	; (8001740 <Constant_Current+0x2b0>)
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fddd 	bl	80010f8 <__aeabi_fcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00a      	beq.n	800155a <Constant_Current+0xca>
			SetPoint_CC = 0.5*CC_Value;
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <Constant_Current+0x2a8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc35 	bl	8000dbc <__aeabi_fmul>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b79      	ldr	r3, [pc, #484]	; (800173c <Constant_Current+0x2ac>)
 8001558:	601a      	str	r2, [r3, #0]

		if(BPack_Temp >= 20 && BPack_Temp < 30) // Temperature 20 ~ 30
 800155a:	4b75      	ldr	r3, [pc, #468]	; (8001730 <Constant_Current+0x2a0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4978      	ldr	r1, [pc, #480]	; (8001740 <Constant_Current+0x2b0>)
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fddd 	bl	8001120 <__aeabi_fcmpge>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01b      	beq.n	80015a4 <Constant_Current+0x114>
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <Constant_Current+0x2a0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4974      	ldr	r1, [pc, #464]	; (8001744 <Constant_Current+0x2b4>)
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fdc0 	bl	80010f8 <__aeabi_fcmplt>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d012      	beq.n	80015a4 <Constant_Current+0x114>
			SetPoint_CC = 0.7*CC_Value;
 800157e:	4b6e      	ldr	r3, [pc, #440]	; (8001738 <Constant_Current+0x2a8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7fe ff8c 	bl	80004a0 <__aeabi_f2d>
 8001588:	a367      	add	r3, pc, #412	; (adr r3, 8001728 <Constant_Current+0x298>)
 800158a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158e:	f7fe ffdf 	bl	8000550 <__aeabi_dmul>
 8001592:	4603      	mov	r3, r0
 8001594:	460c      	mov	r4, r1
 8001596:	4618      	mov	r0, r3
 8001598:	4621      	mov	r1, r4
 800159a:	f7ff fab1 	bl	8000b00 <__aeabi_d2f>
 800159e:	4602      	mov	r2, r0
 80015a0:	4b66      	ldr	r3, [pc, #408]	; (800173c <Constant_Current+0x2ac>)
 80015a2:	601a      	str	r2, [r3, #0]

		if(BPack_Temp >= 30 && BPack_Temp <= 60)
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <Constant_Current+0x2a0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4966      	ldr	r1, [pc, #408]	; (8001744 <Constant_Current+0x2b4>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fdb8 	bl	8001120 <__aeabi_fcmpge>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00c      	beq.n	80015d0 <Constant_Current+0x140>
 80015b6:	4b5e      	ldr	r3, [pc, #376]	; (8001730 <Constant_Current+0x2a0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4963      	ldr	r1, [pc, #396]	; (8001748 <Constant_Current+0x2b8>)
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fda5 	bl	800110c <__aeabi_fcmple>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <Constant_Current+0x140>
			SetPoint_CC = CC_Value;
 80015c8:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <Constant_Current+0x2a8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a5b      	ldr	r2, [pc, #364]	; (800173c <Constant_Current+0x2ac>)
 80015ce:	6013      	str	r3, [r2, #0]

		if(BPack_Temp > 72)
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <Constant_Current+0x2a0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	495d      	ldr	r1, [pc, #372]	; (800174c <Constant_Current+0x2bc>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fdac 	bl	8001134 <__aeabi_fcmpgt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00a      	beq.n	80015f8 <Constant_Current+0x168>
			SetPoint_CC = 0.5*CC_Value;
 80015e2:	4b55      	ldr	r3, [pc, #340]	; (8001738 <Constant_Current+0x2a8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fbe6 	bl	8000dbc <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b51      	ldr	r3, [pc, #324]	; (800173c <Constant_Current+0x2ac>)
 80015f6:	601a      	str	r2, [r3, #0]
	}

	sp = SetPoint_CC;
 80015f8:	4b50      	ldr	r3, [pc, #320]	; (800173c <Constant_Current+0x2ac>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a54      	ldr	r2, [pc, #336]	; (8001750 <Constant_Current+0x2c0>)
 80015fe:	6013      	str	r3, [r2, #0]
	pv = Current_Charger;
 8001600:	4b54      	ldr	r3, [pc, #336]	; (8001754 <Constant_Current+0x2c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <Constant_Current+0x2c8>)
 8001606:	6013      	str	r3, [r2, #0]
	e = sp-pv;
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <Constant_Current+0x2c0>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b52      	ldr	r3, [pc, #328]	; (8001758 <Constant_Current+0x2c8>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fac8 	bl	8000ba8 <__aeabi_fsub>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b4f      	ldr	r3, [pc, #316]	; (800175c <Constant_Current+0x2cc>)
 800161e:	601a      	str	r2, [r3, #0]
	d = e-esblm;
 8001620:	4b4e      	ldr	r3, [pc, #312]	; (800175c <Constant_Current+0x2cc>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b4e      	ldr	r3, [pc, #312]	; (8001760 <Constant_Current+0x2d0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f7ff fabc 	bl	8000ba8 <__aeabi_fsub>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <Constant_Current+0x2d4>)
 8001636:	601a      	str	r2, [r3, #0]
	esblm = e;
 8001638:	4b48      	ldr	r3, [pc, #288]	; (800175c <Constant_Current+0x2cc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <Constant_Current+0x2d0>)
 800163e:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-6)
 8001640:	4b46      	ldr	r3, [pc, #280]	; (800175c <Constant_Current+0x2cc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4948      	ldr	r1, [pc, #288]	; (8001768 <Constant_Current+0x2d8>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fd60 	bl	800110c <__aeabi_fcmple>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01b      	beq.n	800168a <Constant_Current+0x1fa>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 8001652:	4b46      	ldr	r3, [pc, #280]	; (800176c <Constant_Current+0x2dc>)
 8001654:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	4b45      	ldr	r3, [pc, #276]	; (8001770 <Constant_Current+0x2e0>)
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	4b43      	ldr	r3, [pc, #268]	; (8001770 <Constant_Current+0x2e0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a43      	ldr	r2, [pc, #268]	; (8001774 <Constant_Current+0x2e4>)
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b42      	ldr	r3, [pc, #264]	; (8001774 <Constant_Current+0x2e4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a42      	ldr	r2, [pc, #264]	; (8001778 <Constant_Current+0x2e8>)
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b41      	ldr	r3, [pc, #260]	; (8001778 <Constant_Current+0x2e8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a41      	ldr	r2, [pc, #260]	; (800177c <Constant_Current+0x2ec>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <Constant_Current+0x2ec>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a40      	ldr	r2, [pc, #256]	; (8001780 <Constant_Current+0x2f0>)
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <Constant_Current+0x2f0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <Constant_Current+0x2f4>)
 8001688:	6013      	str	r3, [r2, #0]

	if(e>=-6&&e<=-4)
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <Constant_Current+0x2cc>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4936      	ldr	r1, [pc, #216]	; (8001768 <Constant_Current+0x2d8>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fd45 	bl	8001120 <__aeabi_fcmpge>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d079      	beq.n	8001790 <Constant_Current+0x300>
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <Constant_Current+0x2cc>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4939      	ldr	r1, [pc, #228]	; (8001788 <Constant_Current+0x2f8>)
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd32 	bl	800110c <__aeabi_fcmple>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d070      	beq.n	8001790 <Constant_Current+0x300>
	{ eNB=(-(e+6)/2)+1;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	; (800175c <Constant_Current+0x2cc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4936      	ldr	r1, [pc, #216]	; (800178c <Constant_Current+0x2fc>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fa79 	bl	8000bac <__addsf3>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fc2d 	bl	8000f24 <__aeabi_fdiv>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fa6b 	bl	8000bac <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b24      	ldr	r3, [pc, #144]	; (800176c <Constant_Current+0x2dc>)
 80016dc:	601a      	str	r2, [r3, #0]
	   eNM=(e+6)/2;
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <Constant_Current+0x2cc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	492a      	ldr	r1, [pc, #168]	; (800178c <Constant_Current+0x2fc>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fa61 	bl	8000bac <__addsf3>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc17 	bl	8000f24 <__aeabi_fdiv>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b22      	ldr	r3, [pc, #136]	; (8001784 <Constant_Current+0x2f4>)
 80016fc:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 80016fe:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <Constant_Current+0x2e0>)
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <Constant_Current+0x2e0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <Constant_Current+0x2e4>)
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <Constant_Current+0x2e4>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a19      	ldr	r2, [pc, #100]	; (8001778 <Constant_Current+0x2e8>)
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	4b18      	ldr	r3, [pc, #96]	; (8001778 <Constant_Current+0x2e8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a18      	ldr	r2, [pc, #96]	; (800177c <Constant_Current+0x2ec>)
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b17      	ldr	r3, [pc, #92]	; (800177c <Constant_Current+0x2ec>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <Constant_Current+0x2f0>)
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e1fa      	b.n	8001b1e <Constant_Current+0x68e>
 8001728:	66666666 	.word	0x66666666
 800172c:	3fe66666 	.word	0x3fe66666
 8001730:	20000cd8 	.word	0x20000cd8
 8001734:	41200000 	.word	0x41200000
 8001738:	20000f04 	.word	0x20000f04
 800173c:	20000c80 	.word	0x20000c80
 8001740:	41a00000 	.word	0x41a00000
 8001744:	41f00000 	.word	0x41f00000
 8001748:	42700000 	.word	0x42700000
 800174c:	42900000 	.word	0x42900000
 8001750:	20000efc 	.word	0x20000efc
 8001754:	20001264 	.word	0x20001264
 8001758:	200010bc 	.word	0x200010bc
 800175c:	20001274 	.word	0x20001274
 8001760:	20001278 	.word	0x20001278
 8001764:	20000d40 	.word	0x20000d40
 8001768:	c0c00000 	.word	0xc0c00000
 800176c:	2000127c 	.word	0x2000127c
 8001770:	20000c84 	.word	0x20000c84
 8001774:	20000d48 	.word	0x20000d48
 8001778:	20000cbc 	.word	0x20000cbc
 800177c:	200012c8 	.word	0x200012c8
 8001780:	200006bc 	.word	0x200006bc
 8001784:	200012b4 	.word	0x200012b4
 8001788:	c0800000 	.word	0xc0800000
 800178c:	40c00000 	.word	0x40c00000
	}

	else if(e>=-4&&e<=-2)
 8001790:	4b9e      	ldr	r3, [pc, #632]	; (8001a0c <Constant_Current+0x57c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	499e      	ldr	r1, [pc, #632]	; (8001a10 <Constant_Current+0x580>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fcc2 	bl	8001120 <__aeabi_fcmpge>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d048      	beq.n	8001834 <Constant_Current+0x3a4>
 80017a2:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <Constant_Current+0x57c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fcae 	bl	800110c <__aeabi_fcmple>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d03e      	beq.n	8001834 <Constant_Current+0x3a4>
	{ eNM=(-(e+4)/2)+1;
 80017b6:	4b95      	ldr	r3, [pc, #596]	; (8001a0c <Constant_Current+0x57c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f9f4 	bl	8000bac <__addsf3>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80017ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fba8 	bl	8000f24 <__aeabi_fdiv>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff f9e6 	bl	8000bac <__addsf3>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	4b8b      	ldr	r3, [pc, #556]	; (8001a14 <Constant_Current+0x584>)
 80017e6:	601a      	str	r2, [r3, #0]
	   eNS=(e+4)/2;
 80017e8:	4b88      	ldr	r3, [pc, #544]	; (8001a0c <Constant_Current+0x57c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff f9db 	bl	8000bac <__addsf3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fb91 	bl	8000f24 <__aeabi_fdiv>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	4b84      	ldr	r3, [pc, #528]	; (8001a18 <Constant_Current+0x588>)
 8001808:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 800180a:	4b84      	ldr	r3, [pc, #528]	; (8001a1c <Constant_Current+0x58c>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	4b82      	ldr	r3, [pc, #520]	; (8001a1c <Constant_Current+0x58c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a82      	ldr	r2, [pc, #520]	; (8001a20 <Constant_Current+0x590>)
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <Constant_Current+0x590>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a81      	ldr	r2, [pc, #516]	; (8001a24 <Constant_Current+0x594>)
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b80      	ldr	r3, [pc, #512]	; (8001a24 <Constant_Current+0x594>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <Constant_Current+0x598>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7f      	ldr	r3, [pc, #508]	; (8001a28 <Constant_Current+0x598>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7f      	ldr	r2, [pc, #508]	; (8001a2c <Constant_Current+0x59c>)
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e174      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=-2&&e<=0)
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <Constant_Current+0x57c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff fc6f 	bl	8001120 <__aeabi_fcmpge>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d048      	beq.n	80018da <Constant_Current+0x44a>
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <Constant_Current+0x57c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f04f 0100 	mov.w	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fc5b 	bl	800110c <__aeabi_fcmple>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d03e      	beq.n	80018da <Constant_Current+0x44a>
	{ eNS=(-(e+2)/2)+1;
 800185c:	4b6b      	ldr	r3, [pc, #428]	; (8001a0c <Constant_Current+0x57c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff f9a1 	bl	8000bac <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001870:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb55 	bl	8000f24 <__aeabi_fdiv>
 800187a:	4603      	mov	r3, r0
 800187c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f993 	bl	8000bac <__addsf3>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b63      	ldr	r3, [pc, #396]	; (8001a18 <Constant_Current+0x588>)
 800188c:	601a      	str	r2, [r3, #0]
	   eZ=(e/2)+1;
 800188e:	4b5f      	ldr	r3, [pc, #380]	; (8001a0c <Constant_Current+0x57c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fb44 	bl	8000f24 <__aeabi_fdiv>
 800189c:	4603      	mov	r3, r0
 800189e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff f982 	bl	8000bac <__addsf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4b5e      	ldr	r3, [pc, #376]	; (8001a28 <Constant_Current+0x598>)
 80018ae:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 80018b0:	4b5a      	ldr	r3, [pc, #360]	; (8001a1c <Constant_Current+0x58c>)
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <Constant_Current+0x58c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <Constant_Current+0x590>)
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b57      	ldr	r3, [pc, #348]	; (8001a20 <Constant_Current+0x590>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <Constant_Current+0x594>)
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <Constant_Current+0x594>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a51      	ldr	r2, [pc, #324]	; (8001a14 <Constant_Current+0x584>)
 80018ce:	6013      	str	r3, [r2, #0]
 80018d0:	4b50      	ldr	r3, [pc, #320]	; (8001a14 <Constant_Current+0x584>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <Constant_Current+0x59c>)
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e121      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=0&&e<=2)
 80018da:	4b4c      	ldr	r3, [pc, #304]	; (8001a0c <Constant_Current+0x57c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc1c 	bl	8001120 <__aeabi_fcmpge>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d03a      	beq.n	8001964 <Constant_Current+0x4d4>
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <Constant_Current+0x57c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff fc08 	bl	800110c <__aeabi_fcmple>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d030      	beq.n	8001964 <Constant_Current+0x4d4>
	{ eZ=-(e/2)+1;
 8001902:	4b42      	ldr	r3, [pc, #264]	; (8001a0c <Constant_Current+0x57c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fb0a 	bl	8000f24 <__aeabi_fdiv>
 8001910:	4603      	mov	r3, r0
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001918:	f7ff f946 	bl	8000ba8 <__aeabi_fsub>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <Constant_Current+0x598>)
 8001922:	601a      	str	r2, [r3, #0]
	   ePS=e/2;
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <Constant_Current+0x57c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff faf9 	bl	8000f24 <__aeabi_fdiv>
 8001932:	4603      	mov	r3, r0
 8001934:	461a      	mov	r2, r3
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <Constant_Current+0x594>)
 8001938:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 800193a:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <Constant_Current+0x58c>)
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	4b36      	ldr	r3, [pc, #216]	; (8001a1c <Constant_Current+0x58c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <Constant_Current+0x590>)
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <Constant_Current+0x590>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <Constant_Current+0x588>)
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	4b31      	ldr	r3, [pc, #196]	; (8001a18 <Constant_Current+0x588>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <Constant_Current+0x584>)
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <Constant_Current+0x584>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a33      	ldr	r2, [pc, #204]	; (8001a2c <Constant_Current+0x59c>)
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e0dc      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=2&&e<=4)
 8001964:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <Constant_Current+0x57c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fbd7 	bl	8001120 <__aeabi_fcmpge>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d05b      	beq.n	8001a30 <Constant_Current+0x5a0>
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <Constant_Current+0x57c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fbc3 	bl	800110c <__aeabi_fcmple>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d051      	beq.n	8001a30 <Constant_Current+0x5a0>
	{ ePS=(-(e-2)/2)+1;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <Constant_Current+0x57c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff f907 	bl	8000ba8 <__aeabi_fsub>
 800199a:	4603      	mov	r3, r0
 800199c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fabd 	bl	8000f24 <__aeabi_fdiv>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff f8fb 	bl	8000bac <__addsf3>
 80019b6:	4603      	mov	r3, r0
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <Constant_Current+0x594>)
 80019bc:	601a      	str	r2, [r3, #0]
	   ePM=(e-2)/2;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <Constant_Current+0x57c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff f8ee 	bl	8000ba8 <__aeabi_fsub>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff faa6 	bl	8000f24 <__aeabi_fdiv>
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <Constant_Current+0x590>)
 80019de:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <Constant_Current+0x58c>)
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <Constant_Current+0x58c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <Constant_Current+0x598>)
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <Constant_Current+0x598>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <Constant_Current+0x588>)
 80019f6:	6013      	str	r3, [r2, #0]
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <Constant_Current+0x588>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a05      	ldr	r2, [pc, #20]	; (8001a14 <Constant_Current+0x584>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <Constant_Current+0x584>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a09      	ldr	r2, [pc, #36]	; (8001a2c <Constant_Current+0x59c>)
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e089      	b.n	8001b1e <Constant_Current+0x68e>
 8001a0a:	bf00      	nop
 8001a0c:	20001274 	.word	0x20001274
 8001a10:	c0800000 	.word	0xc0800000
 8001a14:	200012b4 	.word	0x200012b4
 8001a18:	200006bc 	.word	0x200006bc
 8001a1c:	20000c84 	.word	0x20000c84
 8001a20:	20000d48 	.word	0x20000d48
 8001a24:	20000cbc 	.word	0x20000cbc
 8001a28:	200012c8 	.word	0x200012c8
 8001a2c:	2000127c 	.word	0x2000127c
	}

	else if(e>=4&&e<=6)
 8001a30:	4b75      	ldr	r3, [pc, #468]	; (8001c08 <Constant_Current+0x778>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fb71 	bl	8001120 <__aeabi_fcmpge>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d047      	beq.n	8001ad4 <Constant_Current+0x644>
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <Constant_Current+0x778>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4970      	ldr	r1, [pc, #448]	; (8001c0c <Constant_Current+0x77c>)
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff fb5e 	bl	800110c <__aeabi_fcmple>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d03e      	beq.n	8001ad4 <Constant_Current+0x644>
	{ ePM=(-(e-4)/2)+1;
 8001a56:	4b6c      	ldr	r3, [pc, #432]	; (8001c08 <Constant_Current+0x778>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f8a2 	bl	8000ba8 <__aeabi_fsub>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fa58 	bl	8000f24 <__aeabi_fdiv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f896 	bl	8000bac <__addsf3>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <Constant_Current+0x780>)
 8001a86:	601a      	str	r2, [r3, #0]
	   ePB=(e-4)/2;
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <Constant_Current+0x778>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff f889 	bl	8000ba8 <__aeabi_fsub>
 8001a96:	4603      	mov	r3, r0
 8001a98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa41 	bl	8000f24 <__aeabi_fdiv>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <Constant_Current+0x784>)
 8001aa8:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 8001aaa:	4b5b      	ldr	r3, [pc, #364]	; (8001c18 <Constant_Current+0x788>)
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	4b59      	ldr	r3, [pc, #356]	; (8001c18 <Constant_Current+0x788>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a59      	ldr	r2, [pc, #356]	; (8001c1c <Constant_Current+0x78c>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	4b58      	ldr	r3, [pc, #352]	; (8001c1c <Constant_Current+0x78c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a58      	ldr	r2, [pc, #352]	; (8001c20 <Constant_Current+0x790>)
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b57      	ldr	r3, [pc, #348]	; (8001c20 <Constant_Current+0x790>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a57      	ldr	r2, [pc, #348]	; (8001c24 <Constant_Current+0x794>)
 8001ac8:	6013      	str	r3, [r2, #0]
 8001aca:	4b56      	ldr	r3, [pc, #344]	; (8001c24 <Constant_Current+0x794>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a56      	ldr	r2, [pc, #344]	; (8001c28 <Constant_Current+0x798>)
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	e024      	b.n	8001b1e <Constant_Current+0x68e>
	}

	else if(e>=6)
 8001ad4:	4b4c      	ldr	r3, [pc, #304]	; (8001c08 <Constant_Current+0x778>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	494c      	ldr	r1, [pc, #304]	; (8001c0c <Constant_Current+0x77c>)
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fb20 	bl	8001120 <__aeabi_fcmpge>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01b      	beq.n	8001b1e <Constant_Current+0x68e>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <Constant_Current+0x784>)
 8001ae8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <Constant_Current+0x780>)
 8001af0:	f04f 0200 	mov.w	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <Constant_Current+0x780>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a47      	ldr	r2, [pc, #284]	; (8001c18 <Constant_Current+0x788>)
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <Constant_Current+0x788>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a46      	ldr	r2, [pc, #280]	; (8001c1c <Constant_Current+0x78c>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <Constant_Current+0x78c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a45      	ldr	r2, [pc, #276]	; (8001c20 <Constant_Current+0x790>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b44      	ldr	r3, [pc, #272]	; (8001c20 <Constant_Current+0x790>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a44      	ldr	r2, [pc, #272]	; (8001c24 <Constant_Current+0x794>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <Constant_Current+0x794>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a43      	ldr	r2, [pc, #268]	; (8001c28 <Constant_Current+0x798>)
 8001b1c:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-6)
 8001b1e:	4b43      	ldr	r3, [pc, #268]	; (8001c2c <Constant_Current+0x79c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4943      	ldr	r1, [pc, #268]	; (8001c30 <Constant_Current+0x7a0>)
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff faf1 	bl	800110c <__aeabi_fcmple>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d01b      	beq.n	8001b68 <Constant_Current+0x6d8>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8001b30:	4b40      	ldr	r3, [pc, #256]	; (8001c34 <Constant_Current+0x7a4>)
 8001b32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <Constant_Current+0x7a8>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <Constant_Current+0x7a8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a3d      	ldr	r2, [pc, #244]	; (8001c3c <Constant_Current+0x7ac>)
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b3c      	ldr	r3, [pc, #240]	; (8001c3c <Constant_Current+0x7ac>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a3c      	ldr	r2, [pc, #240]	; (8001c40 <Constant_Current+0x7b0>)
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <Constant_Current+0x7b0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3b      	ldr	r2, [pc, #236]	; (8001c44 <Constant_Current+0x7b4>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <Constant_Current+0x7b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <Constant_Current+0x7b8>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <Constant_Current+0x7b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a39      	ldr	r2, [pc, #228]	; (8001c4c <Constant_Current+0x7bc>)
 8001b66:	6013      	str	r3, [r2, #0]

	if(d>=-6&&d<=-4)
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <Constant_Current+0x79c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4930      	ldr	r1, [pc, #192]	; (8001c30 <Constant_Current+0x7a0>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fad6 	bl	8001120 <__aeabi_fcmpge>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d06c      	beq.n	8001c54 <Constant_Current+0x7c4>
 8001b7a:	4b2c      	ldr	r3, [pc, #176]	; (8001c2c <Constant_Current+0x79c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4934      	ldr	r1, [pc, #208]	; (8001c50 <Constant_Current+0x7c0>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fac3 	bl	800110c <__aeabi_fcmple>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d063      	beq.n	8001c54 <Constant_Current+0x7c4>
	{ dNB=(-(d+6)/2)+1;
 8001b8c:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <Constant_Current+0x79c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	491e      	ldr	r1, [pc, #120]	; (8001c0c <Constant_Current+0x77c>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f80a 	bl	8000bac <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff f9be 	bl	8000f24 <__aeabi_fdiv>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fffc 	bl	8000bac <__addsf3>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <Constant_Current+0x7a4>)
 8001bba:	601a      	str	r2, [r3, #0]
	   dNM=(d+6)/2;
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <Constant_Current+0x79c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4912      	ldr	r1, [pc, #72]	; (8001c0c <Constant_Current+0x77c>)
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fff2 	bl	8000bac <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f9a8 	bl	8000f24 <__aeabi_fdiv>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <Constant_Current+0x7bc>)
 8001bda:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <Constant_Current+0x7a8>)
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <Constant_Current+0x7a8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <Constant_Current+0x7ac>)
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <Constant_Current+0x7ac>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <Constant_Current+0x7b0>)
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <Constant_Current+0x7b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <Constant_Current+0x7b4>)
 8001bfa:	6013      	str	r3, [r2, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <Constant_Current+0x7b4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <Constant_Current+0x7b8>)
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e1ff      	b.n	8002006 <Constant_Current+0xb76>
 8001c06:	bf00      	nop
 8001c08:	20001274 	.word	0x20001274
 8001c0c:	40c00000 	.word	0x40c00000
 8001c10:	20000d48 	.word	0x20000d48
 8001c14:	20000c84 	.word	0x20000c84
 8001c18:	20000cbc 	.word	0x20000cbc
 8001c1c:	200012c8 	.word	0x200012c8
 8001c20:	200006bc 	.word	0x200006bc
 8001c24:	200012b4 	.word	0x200012b4
 8001c28:	2000127c 	.word	0x2000127c
 8001c2c:	20000d40 	.word	0x20000d40
 8001c30:	c0c00000 	.word	0xc0c00000
 8001c34:	200006f8 	.word	0x200006f8
 8001c38:	20000d50 	.word	0x20000d50
 8001c3c:	20000704 	.word	0x20000704
 8001c40:	20001290 	.word	0x20001290
 8001c44:	200012a8 	.word	0x200012a8
 8001c48:	20000918 	.word	0x20000918
 8001c4c:	20000cb8 	.word	0x20000cb8
 8001c50:	c0800000 	.word	0xc0800000
	}

	else if(d>=-4&&d<=-2)
 8001c54:	4b9e      	ldr	r3, [pc, #632]	; (8001ed0 <Constant_Current+0xa40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	499e      	ldr	r1, [pc, #632]	; (8001ed4 <Constant_Current+0xa44>)
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fa60 	bl	8001120 <__aeabi_fcmpge>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d048      	beq.n	8001cf8 <Constant_Current+0x868>
 8001c66:	4b9a      	ldr	r3, [pc, #616]	; (8001ed0 <Constant_Current+0xa40>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff fa4c 	bl	800110c <__aeabi_fcmple>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03e      	beq.n	8001cf8 <Constant_Current+0x868>
	{ dNM=(-(d+4)/2)+1;
 8001c7a:	4b95      	ldr	r3, [pc, #596]	; (8001ed0 <Constant_Current+0xa40>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff92 	bl	8000bac <__addsf3>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001c8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff f946 	bl	8000f24 <__aeabi_fdiv>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe ff84 	bl	8000bac <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b8b      	ldr	r3, [pc, #556]	; (8001ed8 <Constant_Current+0xa48>)
 8001caa:	601a      	str	r2, [r3, #0]
	   dNS=(d+4)/2;
 8001cac:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <Constant_Current+0xa40>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe ff79 	bl	8000bac <__addsf3>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f92f 	bl	8000f24 <__aeabi_fdiv>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b84      	ldr	r3, [pc, #528]	; (8001edc <Constant_Current+0xa4c>)
 8001ccc:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8001cce:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <Constant_Current+0xa50>)
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	4b82      	ldr	r3, [pc, #520]	; (8001ee0 <Constant_Current+0xa50>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a82      	ldr	r2, [pc, #520]	; (8001ee4 <Constant_Current+0xa54>)
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b81      	ldr	r3, [pc, #516]	; (8001ee4 <Constant_Current+0xa54>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a81      	ldr	r2, [pc, #516]	; (8001ee8 <Constant_Current+0xa58>)
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <Constant_Current+0xa58>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a80      	ldr	r2, [pc, #512]	; (8001eec <Constant_Current+0xa5c>)
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <Constant_Current+0xa5c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <Constant_Current+0xa60>)
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e186      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=-2&&d<=0)
 8001cf8:	4b75      	ldr	r3, [pc, #468]	; (8001ed0 <Constant_Current+0xa40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff fa0d 	bl	8001120 <__aeabi_fcmpge>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d048      	beq.n	8001d9e <Constant_Current+0x90e>
 8001d0c:	4b70      	ldr	r3, [pc, #448]	; (8001ed0 <Constant_Current+0xa40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 0100 	mov.w	r1, #0
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f9f9 	bl	800110c <__aeabi_fcmple>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d03e      	beq.n	8001d9e <Constant_Current+0x90e>
	{ dNS=(-(d+2)/2)+1;
 8001d20:	4b6b      	ldr	r3, [pc, #428]	; (8001ed0 <Constant_Current+0xa40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff3f 	bl	8000bac <__addsf3>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff f8f3 	bl	8000f24 <__aeabi_fdiv>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe ff31 	bl	8000bac <__addsf3>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b63      	ldr	r3, [pc, #396]	; (8001edc <Constant_Current+0xa4c>)
 8001d50:	601a      	str	r2, [r3, #0]
	   dZ=(d+2)/2;
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <Constant_Current+0xa40>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe ff26 	bl	8000bac <__addsf3>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f8dc 	bl	8000f24 <__aeabi_fdiv>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b5e      	ldr	r3, [pc, #376]	; (8001eec <Constant_Current+0xa5c>)
 8001d72:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8001d74:	4b5a      	ldr	r3, [pc, #360]	; (8001ee0 <Constant_Current+0xa50>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	4b58      	ldr	r3, [pc, #352]	; (8001ee0 <Constant_Current+0xa50>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a58      	ldr	r2, [pc, #352]	; (8001ee4 <Constant_Current+0xa54>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <Constant_Current+0xa54>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a57      	ldr	r2, [pc, #348]	; (8001ee8 <Constant_Current+0xa58>)
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b56      	ldr	r3, [pc, #344]	; (8001ee8 <Constant_Current+0xa58>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <Constant_Current+0xa48>)
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <Constant_Current+0xa48>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a55      	ldr	r2, [pc, #340]	; (8001ef0 <Constant_Current+0xa60>)
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e133      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=0&&d<=2)
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <Constant_Current+0xa40>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f04f 0100 	mov.w	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f9ba 	bl	8001120 <__aeabi_fcmpge>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d03a      	beq.n	8001e28 <Constant_Current+0x998>
 8001db2:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <Constant_Current+0xa40>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f9a6 	bl	800110c <__aeabi_fcmple>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d030      	beq.n	8001e28 <Constant_Current+0x998>
	{ dZ=-(d/2)+1;
 8001dc6:	4b42      	ldr	r3, [pc, #264]	; (8001ed0 <Constant_Current+0xa40>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8a8 	bl	8000f24 <__aeabi_fdiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001ddc:	f7fe fee4 	bl	8000ba8 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <Constant_Current+0xa5c>)
 8001de6:	601a      	str	r2, [r3, #0]
	   dPS=d/2;
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <Constant_Current+0xa40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f897 	bl	8000f24 <__aeabi_fdiv>
 8001df6:	4603      	mov	r3, r0
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <Constant_Current+0xa58>)
 8001dfc:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8001dfe:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <Constant_Current+0xa50>)
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <Constant_Current+0xa50>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a36      	ldr	r2, [pc, #216]	; (8001ee4 <Constant_Current+0xa54>)
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <Constant_Current+0xa54>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a32      	ldr	r2, [pc, #200]	; (8001edc <Constant_Current+0xa4c>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	4b31      	ldr	r3, [pc, #196]	; (8001edc <Constant_Current+0xa4c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <Constant_Current+0xa48>)
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <Constant_Current+0xa48>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a33      	ldr	r2, [pc, #204]	; (8001ef0 <Constant_Current+0xa60>)
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	e0ee      	b.n	8002006 <Constant_Current+0xb76>
	}

	else if(d>=2&&d<=4)
 8001e28:	4b29      	ldr	r3, [pc, #164]	; (8001ed0 <Constant_Current+0xa40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff f975 	bl	8001120 <__aeabi_fcmpge>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05b      	beq.n	8001ef4 <Constant_Current+0xa64>
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <Constant_Current+0xa40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff f961 	bl	800110c <__aeabi_fcmple>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d051      	beq.n	8001ef4 <Constant_Current+0xa64>
	{ dPS=(-(d-2)/2)+1;
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <Constant_Current+0xa40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fea5 	bl	8000ba8 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff f85b 	bl	8000f24 <__aeabi_fdiv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fe99 	bl	8000bac <__addsf3>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <Constant_Current+0xa58>)
 8001e80:	601a      	str	r2, [r3, #0]
	   dPM=(d-2)/2;
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <Constant_Current+0xa40>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fe8c 	bl	8000ba8 <__aeabi_fsub>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f844 	bl	8000f24 <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <Constant_Current+0xa54>)
 8001ea2:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <Constant_Current+0xa50>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <Constant_Current+0xa50>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <Constant_Current+0xa5c>)
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <Constant_Current+0xa5c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <Constant_Current+0xa4c>)
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <Constant_Current+0xa4c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <Constant_Current+0xa48>)
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <Constant_Current+0xa48>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <Constant_Current+0xa60>)
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e09b      	b.n	8002006 <Constant_Current+0xb76>
 8001ece:	bf00      	nop
 8001ed0:	20000d40 	.word	0x20000d40
 8001ed4:	c0800000 	.word	0xc0800000
 8001ed8:	20000cb8 	.word	0x20000cb8
 8001edc:	20000918 	.word	0x20000918
 8001ee0:	20000d50 	.word	0x20000d50
 8001ee4:	20000704 	.word	0x20000704
 8001ee8:	20001290 	.word	0x20001290
 8001eec:	200012a8 	.word	0x200012a8
 8001ef0:	200006f8 	.word	0x200006f8
	}

	else if(d>=4&&d<=6)
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <Constant_Current+0xb08>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f90f 	bl	8001120 <__aeabi_fcmpge>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d059      	beq.n	8001fbc <Constant_Current+0xb2c>
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <Constant_Current+0xb08>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4923      	ldr	r1, [pc, #140]	; (8001f9c <Constant_Current+0xb0c>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff f8fc 	bl	800110c <__aeabi_fcmple>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d050      	beq.n	8001fbc <Constant_Current+0xb2c>
	{ dPM=(-(d-4)/2)+1;
 8001f1a:	4b1f      	ldr	r3, [pc, #124]	; (8001f98 <Constant_Current+0xb08>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fe40 	bl	8000ba8 <__aeabi_fsub>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fff6 	bl	8000f24 <__aeabi_fdiv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fe34 	bl	8000bac <__addsf3>
 8001f44:	4603      	mov	r3, r0
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <Constant_Current+0xb10>)
 8001f4a:	601a      	str	r2, [r3, #0]
	   dPB=(d-4)/2;
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <Constant_Current+0xb08>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fe27 	bl	8000ba8 <__aeabi_fsub>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe ffdf 	bl	8000f24 <__aeabi_fdiv>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <Constant_Current+0xb14>)
 8001f6c:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8001f6e:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <Constant_Current+0xb18>)
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <Constant_Current+0xb18>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a0c      	ldr	r2, [pc, #48]	; (8001fac <Constant_Current+0xb1c>)
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <Constant_Current+0xb1c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <Constant_Current+0xb20>)
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <Constant_Current+0xb20>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <Constant_Current+0xb24>)
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <Constant_Current+0xb24>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <Constant_Current+0xb28>)
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e036      	b.n	8002006 <Constant_Current+0xb76>
 8001f98:	20000d40 	.word	0x20000d40
 8001f9c:	40c00000 	.word	0x40c00000
 8001fa0:	20000704 	.word	0x20000704
 8001fa4:	20000d50 	.word	0x20000d50
 8001fa8:	20001290 	.word	0x20001290
 8001fac:	200012a8 	.word	0x200012a8
 8001fb0:	20000918 	.word	0x20000918
 8001fb4:	20000cb8 	.word	0x20000cb8
 8001fb8:	200006f8 	.word	0x200006f8
	}

	else if(d>=6)
 8001fbc:	4b8d      	ldr	r3, [pc, #564]	; (80021f4 <Constant_Current+0xd64>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	498d      	ldr	r1, [pc, #564]	; (80021f8 <Constant_Current+0xd68>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f8ac 	bl	8001120 <__aeabi_fcmpge>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d01b      	beq.n	8002006 <Constant_Current+0xb76>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <Constant_Current+0xd6c>)
 8001fd0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	4b8a      	ldr	r3, [pc, #552]	; (8002200 <Constant_Current+0xd70>)
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <Constant_Current+0xd70>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a88      	ldr	r2, [pc, #544]	; (8002204 <Constant_Current+0xd74>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b87      	ldr	r3, [pc, #540]	; (8002204 <Constant_Current+0xd74>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a87      	ldr	r2, [pc, #540]	; (8002208 <Constant_Current+0xd78>)
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b86      	ldr	r3, [pc, #536]	; (8002208 <Constant_Current+0xd78>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a86      	ldr	r2, [pc, #536]	; (800220c <Constant_Current+0xd7c>)
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b85      	ldr	r3, [pc, #532]	; (800220c <Constant_Current+0xd7c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a85      	ldr	r2, [pc, #532]	; (8002210 <Constant_Current+0xd80>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b84      	ldr	r3, [pc, #528]	; (8002210 <Constant_Current+0xd80>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a84      	ldr	r2, [pc, #528]	; (8002214 <Constant_Current+0xd84>)
 8002004:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//r1=max(dPB,eNB);
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <Constant_Current+0xd6c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a83      	ldr	r2, [pc, #524]	; (8002218 <Constant_Current+0xd88>)
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	4b83      	ldr	r3, [pc, #524]	; (800221c <Constant_Current+0xd8c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <Constant_Current+0xd6c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4619      	mov	r1, r3
 8002018:	4610      	mov	r0, r2
 800201a:	f7ff f86d 	bl	80010f8 <__aeabi_fcmplt>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <Constant_Current+0xb9c>
 8002024:	4b7d      	ldr	r3, [pc, #500]	; (800221c <Constant_Current+0xd8c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a7b      	ldr	r2, [pc, #492]	; (8002218 <Constant_Current+0xd88>)
 800202a:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;		//r2=max(dPB,eNM);
 800202c:	4b73      	ldr	r3, [pc, #460]	; (80021fc <Constant_Current+0xd6c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a7b      	ldr	r2, [pc, #492]	; (8002220 <Constant_Current+0xd90>)
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <Constant_Current+0xd94>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4b70      	ldr	r3, [pc, #448]	; (80021fc <Constant_Current+0xd6c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	4610      	mov	r0, r2
 8002040:	f7ff f85a 	bl	80010f8 <__aeabi_fcmplt>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <Constant_Current+0xbc2>
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <Constant_Current+0xd94>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a74      	ldr	r2, [pc, #464]	; (8002220 <Constant_Current+0xd90>)
 8002050:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;		//r3=max(dPB,eNS);
 8002052:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <Constant_Current+0xd6c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a74      	ldr	r2, [pc, #464]	; (8002228 <Constant_Current+0xd98>)
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	4b74      	ldr	r3, [pc, #464]	; (800222c <Constant_Current+0xd9c>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <Constant_Current+0xd6c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4619      	mov	r1, r3
 8002064:	4610      	mov	r0, r2
 8002066:	f7ff f847 	bl	80010f8 <__aeabi_fcmplt>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <Constant_Current+0xbe8>
 8002070:	4b6e      	ldr	r3, [pc, #440]	; (800222c <Constant_Current+0xd9c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <Constant_Current+0xd98>)
 8002076:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;		//r4=max(dPB,eZ);
 8002078:	4b60      	ldr	r3, [pc, #384]	; (80021fc <Constant_Current+0xd6c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a6c      	ldr	r2, [pc, #432]	; (8002230 <Constant_Current+0xda0>)
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b6c      	ldr	r3, [pc, #432]	; (8002234 <Constant_Current+0xda4>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4b5d      	ldr	r3, [pc, #372]	; (80021fc <Constant_Current+0xd6c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4619      	mov	r1, r3
 800208a:	4610      	mov	r0, r2
 800208c:	f7ff f834 	bl	80010f8 <__aeabi_fcmplt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <Constant_Current+0xc0e>
 8002096:	4b67      	ldr	r3, [pc, #412]	; (8002234 <Constant_Current+0xda4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a65      	ldr	r2, [pc, #404]	; (8002230 <Constant_Current+0xda0>)
 800209c:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;		//r5=max(dPB,ePS);
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <Constant_Current+0xd6c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a65      	ldr	r2, [pc, #404]	; (8002238 <Constant_Current+0xda8>)
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b65      	ldr	r3, [pc, #404]	; (800223c <Constant_Current+0xdac>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <Constant_Current+0xd6c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f7ff f821 	bl	80010f8 <__aeabi_fcmplt>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <Constant_Current+0xc34>
 80020bc:	4b5f      	ldr	r3, [pc, #380]	; (800223c <Constant_Current+0xdac>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a5d      	ldr	r2, [pc, #372]	; (8002238 <Constant_Current+0xda8>)
 80020c2:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;		//r6=max(dPB,ePM);
 80020c4:	4b4d      	ldr	r3, [pc, #308]	; (80021fc <Constant_Current+0xd6c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <Constant_Current+0xdb0>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b5d      	ldr	r3, [pc, #372]	; (8002244 <Constant_Current+0xdb4>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <Constant_Current+0xd6c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4610      	mov	r0, r2
 80020d8:	f7ff f80e 	bl	80010f8 <__aeabi_fcmplt>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <Constant_Current+0xc5a>
 80020e2:	4b58      	ldr	r3, [pc, #352]	; (8002244 <Constant_Current+0xdb4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a56      	ldr	r2, [pc, #344]	; (8002240 <Constant_Current+0xdb0>)
 80020e8:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;		//r7=max(dPB,ePB);
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <Constant_Current+0xd6c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a56      	ldr	r2, [pc, #344]	; (8002248 <Constant_Current+0xdb8>)
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b56      	ldr	r3, [pc, #344]	; (800224c <Constant_Current+0xdbc>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <Constant_Current+0xd6c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	4610      	mov	r0, r2
 80020fe:	f7fe fffb 	bl	80010f8 <__aeabi_fcmplt>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <Constant_Current+0xc80>
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <Constant_Current+0xdbc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a4e      	ldr	r2, [pc, #312]	; (8002248 <Constant_Current+0xdb8>)
 800210e:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8002110:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <Constant_Current+0xd70>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a4e      	ldr	r2, [pc, #312]	; (8002250 <Constant_Current+0xdc0>)
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	4b40      	ldr	r3, [pc, #256]	; (800221c <Constant_Current+0xd8c>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <Constant_Current+0xd70>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	4610      	mov	r0, r2
 8002124:	f7fe ffe8 	bl	80010f8 <__aeabi_fcmplt>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <Constant_Current+0xca6>
 800212e:	4b3b      	ldr	r3, [pc, #236]	; (800221c <Constant_Current+0xd8c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a47      	ldr	r2, [pc, #284]	; (8002250 <Constant_Current+0xdc0>)
 8002134:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <Constant_Current+0xd70>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a46      	ldr	r2, [pc, #280]	; (8002254 <Constant_Current+0xdc4>)
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <Constant_Current+0xd94>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4b2f      	ldr	r3, [pc, #188]	; (8002200 <Constant_Current+0xd70>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f7fe ffd5 	bl	80010f8 <__aeabi_fcmplt>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <Constant_Current+0xccc>
 8002154:	4b33      	ldr	r3, [pc, #204]	; (8002224 <Constant_Current+0xd94>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a3e      	ldr	r2, [pc, #248]	; (8002254 <Constant_Current+0xdc4>)
 800215a:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <Constant_Current+0xd70>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a3d      	ldr	r2, [pc, #244]	; (8002258 <Constant_Current+0xdc8>)
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <Constant_Current+0xd9c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b25      	ldr	r3, [pc, #148]	; (8002200 <Constant_Current+0xd70>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f7fe ffc2 	bl	80010f8 <__aeabi_fcmplt>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <Constant_Current+0xcf2>
 800217a:	4b2c      	ldr	r3, [pc, #176]	; (800222c <Constant_Current+0xd9c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a36      	ldr	r2, [pc, #216]	; (8002258 <Constant_Current+0xdc8>)
 8002180:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 8002182:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <Constant_Current+0xd70>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a35      	ldr	r2, [pc, #212]	; (800225c <Constant_Current+0xdcc>)
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <Constant_Current+0xda4>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <Constant_Current+0xd70>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f7fe ffaf 	bl	80010f8 <__aeabi_fcmplt>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <Constant_Current+0xd18>
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <Constant_Current+0xda4>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2d      	ldr	r2, [pc, #180]	; (800225c <Constant_Current+0xdcc>)
 80021a6:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 80021a8:	4b15      	ldr	r3, [pc, #84]	; (8002200 <Constant_Current+0xd70>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <Constant_Current+0xdd0>)
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b22      	ldr	r3, [pc, #136]	; (800223c <Constant_Current+0xdac>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <Constant_Current+0xd70>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f7fe ff9c 	bl	80010f8 <__aeabi_fcmplt>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <Constant_Current+0xd3e>
 80021c6:	4b1d      	ldr	r3, [pc, #116]	; (800223c <Constant_Current+0xdac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a25      	ldr	r2, [pc, #148]	; (8002260 <Constant_Current+0xdd0>)
 80021cc:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <Constant_Current+0xd70>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a24      	ldr	r2, [pc, #144]	; (8002264 <Constant_Current+0xdd4>)
 80021d4:	6013      	str	r3, [r2, #0]
 80021d6:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <Constant_Current+0xdb4>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <Constant_Current+0xd70>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7fe ff89 	bl	80010f8 <__aeabi_fcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d03f      	beq.n	800226c <Constant_Current+0xddc>
 80021ec:	4b15      	ldr	r3, [pc, #84]	; (8002244 <Constant_Current+0xdb4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	e03a      	b.n	8002268 <Constant_Current+0xdd8>
 80021f2:	bf00      	nop
 80021f4:	20000d40 	.word	0x20000d40
 80021f8:	40c00000 	.word	0x40c00000
 80021fc:	20000d50 	.word	0x20000d50
 8002200:	20000704 	.word	0x20000704
 8002204:	20001290 	.word	0x20001290
 8002208:	200012a8 	.word	0x200012a8
 800220c:	20000918 	.word	0x20000918
 8002210:	20000cb8 	.word	0x20000cb8
 8002214:	200006f8 	.word	0x200006f8
 8002218:	200012cc 	.word	0x200012cc
 800221c:	2000127c 	.word	0x2000127c
 8002220:	20000f08 	.word	0x20000f08
 8002224:	200012b4 	.word	0x200012b4
 8002228:	200006e4 	.word	0x200006e4
 800222c:	200006bc 	.word	0x200006bc
 8002230:	200008e8 	.word	0x200008e8
 8002234:	200012c8 	.word	0x200012c8
 8002238:	200012bc 	.word	0x200012bc
 800223c:	20000cbc 	.word	0x20000cbc
 8002240:	200008d4 	.word	0x200008d4
 8002244:	20000d48 	.word	0x20000d48
 8002248:	20000d2c 	.word	0x20000d2c
 800224c:	20000c84 	.word	0x20000c84
 8002250:	20000c94 	.word	0x20000c94
 8002254:	20000718 	.word	0x20000718
 8002258:	20000c78 	.word	0x20000c78
 800225c:	20000f00 	.word	0x20000f00
 8002260:	2000129c 	.word	0x2000129c
 8002264:	200012d0 	.word	0x200012d0
 8002268:	4a8d      	ldr	r2, [pc, #564]	; (80024a0 <Constant_Current+0x1010>)
 800226a:	6013      	str	r3, [r2, #0]
	r14=dPM; if(ePB<dPM) r14=ePB;	//r14=max(dPM,ePB);
 800226c:	4b8d      	ldr	r3, [pc, #564]	; (80024a4 <Constant_Current+0x1014>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a8d      	ldr	r2, [pc, #564]	; (80024a8 <Constant_Current+0x1018>)
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <Constant_Current+0x101c>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	4b8a      	ldr	r3, [pc, #552]	; (80024a4 <Constant_Current+0x1014>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4619      	mov	r1, r3
 800227e:	4610      	mov	r0, r2
 8002280:	f7fe ff3a 	bl	80010f8 <__aeabi_fcmplt>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <Constant_Current+0xe02>
 800228a:	4b88      	ldr	r3, [pc, #544]	; (80024ac <Constant_Current+0x101c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <Constant_Current+0x1018>)
 8002290:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 8002292:	4b87      	ldr	r3, [pc, #540]	; (80024b0 <Constant_Current+0x1020>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a87      	ldr	r2, [pc, #540]	; (80024b4 <Constant_Current+0x1024>)
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b87      	ldr	r3, [pc, #540]	; (80024b8 <Constant_Current+0x1028>)
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b84      	ldr	r3, [pc, #528]	; (80024b0 <Constant_Current+0x1020>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	4610      	mov	r0, r2
 80022a6:	f7fe ff27 	bl	80010f8 <__aeabi_fcmplt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <Constant_Current+0xe28>
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <Constant_Current+0x1028>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a7f      	ldr	r2, [pc, #508]	; (80024b4 <Constant_Current+0x1024>)
 80022b6:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 80022b8:	4b7d      	ldr	r3, [pc, #500]	; (80024b0 <Constant_Current+0x1020>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <Constant_Current+0x102c>)
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b7f      	ldr	r3, [pc, #508]	; (80024c0 <Constant_Current+0x1030>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b7a      	ldr	r3, [pc, #488]	; (80024b0 <Constant_Current+0x1020>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f7fe ff14 	bl	80010f8 <__aeabi_fcmplt>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <Constant_Current+0xe4e>
 80022d6:	4b7a      	ldr	r3, [pc, #488]	; (80024c0 <Constant_Current+0x1030>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a78      	ldr	r2, [pc, #480]	; (80024bc <Constant_Current+0x102c>)
 80022dc:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 80022de:	4b74      	ldr	r3, [pc, #464]	; (80024b0 <Constant_Current+0x1020>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a78      	ldr	r2, [pc, #480]	; (80024c4 <Constant_Current+0x1034>)
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b78      	ldr	r3, [pc, #480]	; (80024c8 <Constant_Current+0x1038>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b71      	ldr	r3, [pc, #452]	; (80024b0 <Constant_Current+0x1020>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4619      	mov	r1, r3
 80022f0:	4610      	mov	r0, r2
 80022f2:	f7fe ff01 	bl	80010f8 <__aeabi_fcmplt>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <Constant_Current+0xe74>
 80022fc:	4b72      	ldr	r3, [pc, #456]	; (80024c8 <Constant_Current+0x1038>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a70      	ldr	r2, [pc, #448]	; (80024c4 <Constant_Current+0x1034>)
 8002302:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <Constant_Current+0x1020>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a70      	ldr	r2, [pc, #448]	; (80024cc <Constant_Current+0x103c>)
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b70      	ldr	r3, [pc, #448]	; (80024d0 <Constant_Current+0x1040>)
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b67      	ldr	r3, [pc, #412]	; (80024b0 <Constant_Current+0x1020>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4619      	mov	r1, r3
 8002316:	4610      	mov	r0, r2
 8002318:	f7fe feee 	bl	80010f8 <__aeabi_fcmplt>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d003      	beq.n	800232a <Constant_Current+0xe9a>
 8002322:	4b6b      	ldr	r3, [pc, #428]	; (80024d0 <Constant_Current+0x1040>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a69      	ldr	r2, [pc, #420]	; (80024cc <Constant_Current+0x103c>)
 8002328:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 800232a:	4b61      	ldr	r3, [pc, #388]	; (80024b0 <Constant_Current+0x1020>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a69      	ldr	r2, [pc, #420]	; (80024d4 <Constant_Current+0x1044>)
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	4b69      	ldr	r3, [pc, #420]	; (80024d8 <Constant_Current+0x1048>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <Constant_Current+0x1020>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7fe fedb 	bl	80010f8 <__aeabi_fcmplt>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d003      	beq.n	8002350 <Constant_Current+0xec0>
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <Constant_Current+0x1048>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a61      	ldr	r2, [pc, #388]	; (80024d4 <Constant_Current+0x1044>)
 800234e:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 8002350:	4b57      	ldr	r3, [pc, #348]	; (80024b0 <Constant_Current+0x1020>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a61      	ldr	r2, [pc, #388]	; (80024dc <Constant_Current+0x104c>)
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <Constant_Current+0x1050>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b54      	ldr	r3, [pc, #336]	; (80024b0 <Constant_Current+0x1020>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4619      	mov	r1, r3
 8002362:	4610      	mov	r0, r2
 8002364:	f7fe fec8 	bl	80010f8 <__aeabi_fcmplt>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <Constant_Current+0xee6>
 800236e:	4b5c      	ldr	r3, [pc, #368]	; (80024e0 <Constant_Current+0x1050>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5a      	ldr	r2, [pc, #360]	; (80024dc <Constant_Current+0x104c>)
 8002374:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <Constant_Current+0x1020>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a5a      	ldr	r2, [pc, #360]	; (80024e4 <Constant_Current+0x1054>)
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <Constant_Current+0x101c>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <Constant_Current+0x1020>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	4610      	mov	r0, r2
 800238a:	f7fe feb5 	bl	80010f8 <__aeabi_fcmplt>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <Constant_Current+0xf0c>
 8002394:	4b45      	ldr	r3, [pc, #276]	; (80024ac <Constant_Current+0x101c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a52      	ldr	r2, [pc, #328]	; (80024e4 <Constant_Current+0x1054>)
 800239a:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 800239c:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <Constant_Current+0x1058>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a52      	ldr	r2, [pc, #328]	; (80024ec <Constant_Current+0x105c>)
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <Constant_Current+0x1028>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <Constant_Current+0x1058>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f7fe fea2 	bl	80010f8 <__aeabi_fcmplt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <Constant_Current+0xf32>
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <Constant_Current+0x1028>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <Constant_Current+0x105c>)
 80023c0:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <Constant_Current+0x1058>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <Constant_Current+0x1060>)
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <Constant_Current+0x1030>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <Constant_Current+0x1058>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4619      	mov	r1, r3
 80023d4:	4610      	mov	r0, r2
 80023d6:	f7fe fe8f 	bl	80010f8 <__aeabi_fcmplt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <Constant_Current+0xf58>
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <Constant_Current+0x1030>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a42      	ldr	r2, [pc, #264]	; (80024f0 <Constant_Current+0x1060>)
 80023e6:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 80023e8:	4b3f      	ldr	r3, [pc, #252]	; (80024e8 <Constant_Current+0x1058>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a41      	ldr	r2, [pc, #260]	; (80024f4 <Constant_Current+0x1064>)
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <Constant_Current+0x1038>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <Constant_Current+0x1058>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4619      	mov	r1, r3
 80023fa:	4610      	mov	r0, r2
 80023fc:	f7fe fe7c 	bl	80010f8 <__aeabi_fcmplt>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <Constant_Current+0xf7e>
 8002406:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <Constant_Current+0x1038>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a3a      	ldr	r2, [pc, #232]	; (80024f4 <Constant_Current+0x1064>)
 800240c:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 800240e:	4b36      	ldr	r3, [pc, #216]	; (80024e8 <Constant_Current+0x1058>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a39      	ldr	r2, [pc, #228]	; (80024f8 <Constant_Current+0x1068>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <Constant_Current+0x1040>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b33      	ldr	r3, [pc, #204]	; (80024e8 <Constant_Current+0x1058>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4619      	mov	r1, r3
 8002420:	4610      	mov	r0, r2
 8002422:	f7fe fe69 	bl	80010f8 <__aeabi_fcmplt>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <Constant_Current+0xfa4>
 800242c:	4b28      	ldr	r3, [pc, #160]	; (80024d0 <Constant_Current+0x1040>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a31      	ldr	r2, [pc, #196]	; (80024f8 <Constant_Current+0x1068>)
 8002432:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 8002434:	4b2c      	ldr	r3, [pc, #176]	; (80024e8 <Constant_Current+0x1058>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a30      	ldr	r2, [pc, #192]	; (80024fc <Constant_Current+0x106c>)
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <Constant_Current+0x1048>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b29      	ldr	r3, [pc, #164]	; (80024e8 <Constant_Current+0x1058>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	4610      	mov	r0, r2
 8002448:	f7fe fe56 	bl	80010f8 <__aeabi_fcmplt>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <Constant_Current+0xfca>
 8002452:	4b21      	ldr	r3, [pc, #132]	; (80024d8 <Constant_Current+0x1048>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a29      	ldr	r2, [pc, #164]	; (80024fc <Constant_Current+0x106c>)
 8002458:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 800245a:	4b23      	ldr	r3, [pc, #140]	; (80024e8 <Constant_Current+0x1058>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <Constant_Current+0x1070>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <Constant_Current+0x1050>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b20      	ldr	r3, [pc, #128]	; (80024e8 <Constant_Current+0x1058>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	4610      	mov	r0, r2
 800246e:	f7fe fe43 	bl	80010f8 <__aeabi_fcmplt>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <Constant_Current+0xff0>
 8002478:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <Constant_Current+0x1050>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a20      	ldr	r2, [pc, #128]	; (8002500 <Constant_Current+0x1070>)
 800247e:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 8002480:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <Constant_Current+0x1058>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1f      	ldr	r2, [pc, #124]	; (8002504 <Constant_Current+0x1074>)
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <Constant_Current+0x101c>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <Constant_Current+0x1058>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f7fe fe30 	bl	80010f8 <__aeabi_fcmplt>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d038      	beq.n	8002510 <Constant_Current+0x1080>
 800249e:	e033      	b.n	8002508 <Constant_Current+0x1078>
 80024a0:	200012d0 	.word	0x200012d0
 80024a4:	20000704 	.word	0x20000704
 80024a8:	20000680 	.word	0x20000680
 80024ac:	20000c84 	.word	0x20000c84
 80024b0:	20001290 	.word	0x20001290
 80024b4:	200012a0 	.word	0x200012a0
 80024b8:	2000127c 	.word	0x2000127c
 80024bc:	20000d44 	.word	0x20000d44
 80024c0:	200012b4 	.word	0x200012b4
 80024c4:	200008c8 	.word	0x200008c8
 80024c8:	200006bc 	.word	0x200006bc
 80024cc:	20000cc4 	.word	0x20000cc4
 80024d0:	200012c8 	.word	0x200012c8
 80024d4:	20001298 	.word	0x20001298
 80024d8:	20000cbc 	.word	0x20000cbc
 80024dc:	20000c8c 	.word	0x20000c8c
 80024e0:	20000d48 	.word	0x20000d48
 80024e4:	200008dc 	.word	0x200008dc
 80024e8:	200012a8 	.word	0x200012a8
 80024ec:	200010c8 	.word	0x200010c8
 80024f0:	200012b0 	.word	0x200012b0
 80024f4:	200012c4 	.word	0x200012c4
 80024f8:	200006b8 	.word	0x200006b8
 80024fc:	200008b8 	.word	0x200008b8
 8002500:	20000ca4 	.word	0x20000ca4
 8002504:	20000690 	.word	0x20000690
 8002508:	4b8d      	ldr	r3, [pc, #564]	; (8002740 <Constant_Current+0x12b0>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a8d      	ldr	r2, [pc, #564]	; (8002744 <Constant_Current+0x12b4>)
 800250e:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 8002510:	4b8d      	ldr	r3, [pc, #564]	; (8002748 <Constant_Current+0x12b8>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a8d      	ldr	r2, [pc, #564]	; (800274c <Constant_Current+0x12bc>)
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b8d      	ldr	r3, [pc, #564]	; (8002750 <Constant_Current+0x12c0>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b8a      	ldr	r3, [pc, #552]	; (8002748 <Constant_Current+0x12b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f7fe fde8 	bl	80010f8 <__aeabi_fcmplt>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <Constant_Current+0x10a6>
 800252e:	4b88      	ldr	r3, [pc, #544]	; (8002750 <Constant_Current+0x12c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a86      	ldr	r2, [pc, #536]	; (800274c <Constant_Current+0x12bc>)
 8002534:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 8002536:	4b84      	ldr	r3, [pc, #528]	; (8002748 <Constant_Current+0x12b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a86      	ldr	r2, [pc, #536]	; (8002754 <Constant_Current+0x12c4>)
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b86      	ldr	r3, [pc, #536]	; (8002758 <Constant_Current+0x12c8>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b81      	ldr	r3, [pc, #516]	; (8002748 <Constant_Current+0x12b8>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f7fe fdd5 	bl	80010f8 <__aeabi_fcmplt>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <Constant_Current+0x10cc>
 8002554:	4b80      	ldr	r3, [pc, #512]	; (8002758 <Constant_Current+0x12c8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a7e      	ldr	r2, [pc, #504]	; (8002754 <Constant_Current+0x12c4>)
 800255a:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 800255c:	4b7a      	ldr	r3, [pc, #488]	; (8002748 <Constant_Current+0x12b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a7e      	ldr	r2, [pc, #504]	; (800275c <Constant_Current+0x12cc>)
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	4b7e      	ldr	r3, [pc, #504]	; (8002760 <Constant_Current+0x12d0>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b77      	ldr	r3, [pc, #476]	; (8002748 <Constant_Current+0x12b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	4610      	mov	r0, r2
 8002570:	f7fe fdc2 	bl	80010f8 <__aeabi_fcmplt>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <Constant_Current+0x10f2>
 800257a:	4b79      	ldr	r3, [pc, #484]	; (8002760 <Constant_Current+0x12d0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a77      	ldr	r2, [pc, #476]	; (800275c <Constant_Current+0x12cc>)
 8002580:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 8002582:	4b71      	ldr	r3, [pc, #452]	; (8002748 <Constant_Current+0x12b8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a77      	ldr	r2, [pc, #476]	; (8002764 <Constant_Current+0x12d4>)
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b77      	ldr	r3, [pc, #476]	; (8002768 <Constant_Current+0x12d8>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b6e      	ldr	r3, [pc, #440]	; (8002748 <Constant_Current+0x12b8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4619      	mov	r1, r3
 8002594:	4610      	mov	r0, r2
 8002596:	f7fe fdaf 	bl	80010f8 <__aeabi_fcmplt>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <Constant_Current+0x1118>
 80025a0:	4b71      	ldr	r3, [pc, #452]	; (8002768 <Constant_Current+0x12d8>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a6f      	ldr	r2, [pc, #444]	; (8002764 <Constant_Current+0x12d4>)
 80025a6:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 80025a8:	4b67      	ldr	r3, [pc, #412]	; (8002748 <Constant_Current+0x12b8>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6f      	ldr	r2, [pc, #444]	; (800276c <Constant_Current+0x12dc>)
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	4b6f      	ldr	r3, [pc, #444]	; (8002770 <Constant_Current+0x12e0>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b64      	ldr	r3, [pc, #400]	; (8002748 <Constant_Current+0x12b8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	4610      	mov	r0, r2
 80025bc:	f7fe fd9c 	bl	80010f8 <__aeabi_fcmplt>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <Constant_Current+0x113e>
 80025c6:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <Constant_Current+0x12e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a68      	ldr	r2, [pc, #416]	; (800276c <Constant_Current+0x12dc>)
 80025cc:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 80025ce:	4b5e      	ldr	r3, [pc, #376]	; (8002748 <Constant_Current+0x12b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a68      	ldr	r2, [pc, #416]	; (8002774 <Constant_Current+0x12e4>)
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b68      	ldr	r3, [pc, #416]	; (8002778 <Constant_Current+0x12e8>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4b5b      	ldr	r3, [pc, #364]	; (8002748 <Constant_Current+0x12b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7fe fd89 	bl	80010f8 <__aeabi_fcmplt>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <Constant_Current+0x1164>
 80025ec:	4b62      	ldr	r3, [pc, #392]	; (8002778 <Constant_Current+0x12e8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a60      	ldr	r2, [pc, #384]	; (8002774 <Constant_Current+0x12e4>)
 80025f2:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 80025f4:	4b54      	ldr	r3, [pc, #336]	; (8002748 <Constant_Current+0x12b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a60      	ldr	r2, [pc, #384]	; (800277c <Constant_Current+0x12ec>)
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <Constant_Current+0x12b0>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b51      	ldr	r3, [pc, #324]	; (8002748 <Constant_Current+0x12b8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	4610      	mov	r0, r2
 8002608:	f7fe fd76 	bl	80010f8 <__aeabi_fcmplt>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <Constant_Current+0x118a>
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <Constant_Current+0x12b0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a59      	ldr	r2, [pc, #356]	; (800277c <Constant_Current+0x12ec>)
 8002618:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 800261a:	4b59      	ldr	r3, [pc, #356]	; (8002780 <Constant_Current+0x12f0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a59      	ldr	r2, [pc, #356]	; (8002784 <Constant_Current+0x12f4>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b4b      	ldr	r3, [pc, #300]	; (8002750 <Constant_Current+0x12c0>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b56      	ldr	r3, [pc, #344]	; (8002780 <Constant_Current+0x12f0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7fe fd63 	bl	80010f8 <__aeabi_fcmplt>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <Constant_Current+0x11b0>
 8002638:	4b45      	ldr	r3, [pc, #276]	; (8002750 <Constant_Current+0x12c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a51      	ldr	r2, [pc, #324]	; (8002784 <Constant_Current+0x12f4>)
 800263e:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 8002640:	4b4f      	ldr	r3, [pc, #316]	; (8002780 <Constant_Current+0x12f0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a50      	ldr	r2, [pc, #320]	; (8002788 <Constant_Current+0x12f8>)
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	4b43      	ldr	r3, [pc, #268]	; (8002758 <Constant_Current+0x12c8>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b4c      	ldr	r3, [pc, #304]	; (8002780 <Constant_Current+0x12f0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f7fe fd50 	bl	80010f8 <__aeabi_fcmplt>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <Constant_Current+0x11d6>
 800265e:	4b3e      	ldr	r3, [pc, #248]	; (8002758 <Constant_Current+0x12c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a49      	ldr	r2, [pc, #292]	; (8002788 <Constant_Current+0x12f8>)
 8002664:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 8002666:	4b46      	ldr	r3, [pc, #280]	; (8002780 <Constant_Current+0x12f0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a48      	ldr	r2, [pc, #288]	; (800278c <Constant_Current+0x12fc>)
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <Constant_Current+0x12d0>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	4b43      	ldr	r3, [pc, #268]	; (8002780 <Constant_Current+0x12f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	4610      	mov	r0, r2
 800267a:	f7fe fd3d 	bl	80010f8 <__aeabi_fcmplt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d003      	beq.n	800268c <Constant_Current+0x11fc>
 8002684:	4b36      	ldr	r3, [pc, #216]	; (8002760 <Constant_Current+0x12d0>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <Constant_Current+0x12fc>)
 800268a:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 800268c:	4b3c      	ldr	r3, [pc, #240]	; (8002780 <Constant_Current+0x12f0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a3f      	ldr	r2, [pc, #252]	; (8002790 <Constant_Current+0x1300>)
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <Constant_Current+0x12d8>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b39      	ldr	r3, [pc, #228]	; (8002780 <Constant_Current+0x12f0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4619      	mov	r1, r3
 800269e:	4610      	mov	r0, r2
 80026a0:	f7fe fd2a 	bl	80010f8 <__aeabi_fcmplt>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <Constant_Current+0x1222>
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <Constant_Current+0x12d8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a38      	ldr	r2, [pc, #224]	; (8002790 <Constant_Current+0x1300>)
 80026b0:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 80026b2:	4b33      	ldr	r3, [pc, #204]	; (8002780 <Constant_Current+0x12f0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a37      	ldr	r2, [pc, #220]	; (8002794 <Constant_Current+0x1304>)
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <Constant_Current+0x12e0>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	4b30      	ldr	r3, [pc, #192]	; (8002780 <Constant_Current+0x12f0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4619      	mov	r1, r3
 80026c4:	4610      	mov	r0, r2
 80026c6:	f7fe fd17 	bl	80010f8 <__aeabi_fcmplt>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <Constant_Current+0x1248>
 80026d0:	4b27      	ldr	r3, [pc, #156]	; (8002770 <Constant_Current+0x12e0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <Constant_Current+0x1304>)
 80026d6:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <Constant_Current+0x12f0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <Constant_Current+0x1308>)
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b25      	ldr	r3, [pc, #148]	; (8002778 <Constant_Current+0x12e8>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <Constant_Current+0x12f0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4610      	mov	r0, r2
 80026ec:	f7fe fd04 	bl	80010f8 <__aeabi_fcmplt>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <Constant_Current+0x126e>
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <Constant_Current+0x12e8>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a27      	ldr	r2, [pc, #156]	; (8002798 <Constant_Current+0x1308>)
 80026fc:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <Constant_Current+0x12f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	; (800279c <Constant_Current+0x130c>)
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <Constant_Current+0x12b0>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <Constant_Current+0x12f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4619      	mov	r1, r3
 8002710:	4610      	mov	r0, r2
 8002712:	f7fe fcf1 	bl	80010f8 <__aeabi_fcmplt>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <Constant_Current+0x1294>
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <Constant_Current+0x12b0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <Constant_Current+0x130c>)
 8002722:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <Constant_Current+0x1310>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <Constant_Current+0x1314>)
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <Constant_Current+0x12c0>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <Constant_Current+0x1310>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4610      	mov	r0, r2
 8002738:	f7fe fcde 	bl	80010f8 <__aeabi_fcmplt>
 800273c:	e034      	b.n	80027a8 <Constant_Current+0x1318>
 800273e:	bf00      	nop
 8002740:	20000c84 	.word	0x20000c84
 8002744:	20000690 	.word	0x20000690
 8002748:	20000918 	.word	0x20000918
 800274c:	200006b0 	.word	0x200006b0
 8002750:	2000127c 	.word	0x2000127c
 8002754:	20000ef0 	.word	0x20000ef0
 8002758:	200012b4 	.word	0x200012b4
 800275c:	200008cc 	.word	0x200008cc
 8002760:	200006bc 	.word	0x200006bc
 8002764:	2000091c 	.word	0x2000091c
 8002768:	200012c8 	.word	0x200012c8
 800276c:	20000cb0 	.word	0x20000cb0
 8002770:	20000cbc 	.word	0x20000cbc
 8002774:	20000eec 	.word	0x20000eec
 8002778:	20000d48 	.word	0x20000d48
 800277c:	200010c0 	.word	0x200010c0
 8002780:	20000cb8 	.word	0x20000cb8
 8002784:	200006ec 	.word	0x200006ec
 8002788:	20000ac8 	.word	0x20000ac8
 800278c:	20000c88 	.word	0x20000c88
 8002790:	2000128c 	.word	0x2000128c
 8002794:	20000d24 	.word	0x20000d24
 8002798:	200006c8 	.word	0x200006c8
 800279c:	200006dc 	.word	0x200006dc
 80027a0:	200006f8 	.word	0x200006f8
 80027a4:	20001294 	.word	0x20001294
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <Constant_Current+0x1326>
 80027ae:	4b8f      	ldr	r3, [pc, #572]	; (80029ec <Constant_Current+0x155c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8f      	ldr	r2, [pc, #572]	; (80029f0 <Constant_Current+0x1560>)
 80027b4:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 80027b6:	4b8f      	ldr	r3, [pc, #572]	; (80029f4 <Constant_Current+0x1564>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a8f      	ldr	r2, [pc, #572]	; (80029f8 <Constant_Current+0x1568>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b8f      	ldr	r3, [pc, #572]	; (80029fc <Constant_Current+0x156c>)
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b8c      	ldr	r3, [pc, #560]	; (80029f4 <Constant_Current+0x1564>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4619      	mov	r1, r3
 80027c8:	4610      	mov	r0, r2
 80027ca:	f7fe fc95 	bl	80010f8 <__aeabi_fcmplt>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <Constant_Current+0x134c>
 80027d4:	4b89      	ldr	r3, [pc, #548]	; (80029fc <Constant_Current+0x156c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a87      	ldr	r2, [pc, #540]	; (80029f8 <Constant_Current+0x1568>)
 80027da:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 80027dc:	4b85      	ldr	r3, [pc, #532]	; (80029f4 <Constant_Current+0x1564>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <Constant_Current+0x1570>)
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	4b87      	ldr	r3, [pc, #540]	; (8002a04 <Constant_Current+0x1574>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b82      	ldr	r3, [pc, #520]	; (80029f4 <Constant_Current+0x1564>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4619      	mov	r1, r3
 80027ee:	4610      	mov	r0, r2
 80027f0:	f7fe fc82 	bl	80010f8 <__aeabi_fcmplt>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d003      	beq.n	8002802 <Constant_Current+0x1372>
 80027fa:	4b82      	ldr	r3, [pc, #520]	; (8002a04 <Constant_Current+0x1574>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <Constant_Current+0x1570>)
 8002800:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 8002802:	4b7c      	ldr	r3, [pc, #496]	; (80029f4 <Constant_Current+0x1564>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a80      	ldr	r2, [pc, #512]	; (8002a08 <Constant_Current+0x1578>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <Constant_Current+0x157c>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b79      	ldr	r3, [pc, #484]	; (80029f4 <Constant_Current+0x1564>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4619      	mov	r1, r3
 8002814:	4610      	mov	r0, r2
 8002816:	f7fe fc6f 	bl	80010f8 <__aeabi_fcmplt>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d003      	beq.n	8002828 <Constant_Current+0x1398>
 8002820:	4b7a      	ldr	r3, [pc, #488]	; (8002a0c <Constant_Current+0x157c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a78      	ldr	r2, [pc, #480]	; (8002a08 <Constant_Current+0x1578>)
 8002826:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 8002828:	4b72      	ldr	r3, [pc, #456]	; (80029f4 <Constant_Current+0x1564>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a78      	ldr	r2, [pc, #480]	; (8002a10 <Constant_Current+0x1580>)
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b78      	ldr	r3, [pc, #480]	; (8002a14 <Constant_Current+0x1584>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	4b6f      	ldr	r3, [pc, #444]	; (80029f4 <Constant_Current+0x1564>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4619      	mov	r1, r3
 800283a:	4610      	mov	r0, r2
 800283c:	f7fe fc5c 	bl	80010f8 <__aeabi_fcmplt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <Constant_Current+0x13be>
 8002846:	4b73      	ldr	r3, [pc, #460]	; (8002a14 <Constant_Current+0x1584>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a71      	ldr	r2, [pc, #452]	; (8002a10 <Constant_Current+0x1580>)
 800284c:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 800284e:	4b69      	ldr	r3, [pc, #420]	; (80029f4 <Constant_Current+0x1564>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a71      	ldr	r2, [pc, #452]	; (8002a18 <Constant_Current+0x1588>)
 8002854:	6013      	str	r3, [r2, #0]
 8002856:	4b71      	ldr	r3, [pc, #452]	; (8002a1c <Constant_Current+0x158c>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <Constant_Current+0x1564>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4619      	mov	r1, r3
 8002860:	4610      	mov	r0, r2
 8002862:	f7fe fc49 	bl	80010f8 <__aeabi_fcmplt>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <Constant_Current+0x13e4>
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <Constant_Current+0x158c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a69      	ldr	r2, [pc, #420]	; (8002a18 <Constant_Current+0x1588>)
 8002872:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8002874:	4b5f      	ldr	r3, [pc, #380]	; (80029f4 <Constant_Current+0x1564>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a69      	ldr	r2, [pc, #420]	; (8002a20 <Constant_Current+0x1590>)
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b69      	ldr	r3, [pc, #420]	; (8002a24 <Constant_Current+0x1594>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <Constant_Current+0x1564>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f7fe fc36 	bl	80010f8 <__aeabi_fcmplt>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <Constant_Current+0x140a>
 8002892:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <Constant_Current+0x1594>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <Constant_Current+0x1590>)
 8002898:	6013      	str	r3, [r2, #0]

	///////////////////////////////DEFUZZIFIKASI///////////////////////////////////

	A=(r1*outZ)+(r2*outPS)+(r3*outPM)+(r4*outPB)+(r5*outPH)+(r6*outPH)+(r7*outPH);
 800289a:	4b63      	ldr	r3, [pc, #396]	; (8002a28 <Constant_Current+0x1598>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	4b63      	ldr	r3, [pc, #396]	; (8002a2c <Constant_Current+0x159c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4619      	mov	r1, r3
 80028a4:	4610      	mov	r0, r2
 80028a6:	f7fe fa89 	bl	8000dbc <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461c      	mov	r4, r3
 80028ae:	4b60      	ldr	r3, [pc, #384]	; (8002a30 <Constant_Current+0x15a0>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	4b60      	ldr	r3, [pc, #384]	; (8002a34 <Constant_Current+0x15a4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	4610      	mov	r0, r2
 80028ba:	f7fe fa7f 	bl	8000dbc <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe f972 	bl	8000bac <__addsf3>
 80028c8:	4603      	mov	r3, r0
 80028ca:	461c      	mov	r4, r3
 80028cc:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <Constant_Current+0x15a8>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b5a      	ldr	r3, [pc, #360]	; (8002a3c <Constant_Current+0x15ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7fe fa70 	bl	8000dbc <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7fe f963 	bl	8000bac <__addsf3>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	4b55      	ldr	r3, [pc, #340]	; (8002a40 <Constant_Current+0x15b0>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b55      	ldr	r3, [pc, #340]	; (8002a44 <Constant_Current+0x15b4>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7fe fa61 	bl	8000dbc <__aeabi_fmul>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4619      	mov	r1, r3
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fe f954 	bl	8000bac <__addsf3>
 8002904:	4603      	mov	r3, r0
 8002906:	461c      	mov	r4, r3
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <Constant_Current+0x15b8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <Constant_Current+0x15bc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4619      	mov	r1, r3
 8002912:	4610      	mov	r0, r2
 8002914:	f7fe fa52 	bl	8000dbc <__aeabi_fmul>
 8002918:	4603      	mov	r3, r0
 800291a:	4619      	mov	r1, r3
 800291c:	4620      	mov	r0, r4
 800291e:	f7fe f945 	bl	8000bac <__addsf3>
 8002922:	4603      	mov	r3, r0
 8002924:	461c      	mov	r4, r3
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <Constant_Current+0x15c0>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <Constant_Current+0x15bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4619      	mov	r1, r3
 8002930:	4610      	mov	r0, r2
 8002932:	f7fe fa43 	bl	8000dbc <__aeabi_fmul>
 8002936:	4603      	mov	r3, r0
 8002938:	4619      	mov	r1, r3
 800293a:	4620      	mov	r0, r4
 800293c:	f7fe f936 	bl	8000bac <__addsf3>
 8002940:	4603      	mov	r3, r0
 8002942:	461c      	mov	r4, r3
 8002944:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <Constant_Current+0x15c4>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <Constant_Current+0x15bc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f7fe fa34 	bl	8000dbc <__aeabi_fmul>
 8002954:	4603      	mov	r3, r0
 8002956:	4619      	mov	r1, r3
 8002958:	4620      	mov	r0, r4
 800295a:	f7fe f927 	bl	8000bac <__addsf3>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b3d      	ldr	r3, [pc, #244]	; (8002a58 <Constant_Current+0x15c8>)
 8002964:	601a      	str	r2, [r3, #0]
	B=(r8*outNS)+(r9*outZ)+(r10*outPS)+(r11*outPM)+(r12*outPB)+(r13*outPH)+(r14*outPH);
 8002966:	4b3d      	ldr	r3, [pc, #244]	; (8002a5c <Constant_Current+0x15cc>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b3d      	ldr	r3, [pc, #244]	; (8002a60 <Constant_Current+0x15d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7fe fa23 	bl	8000dbc <__aeabi_fmul>
 8002976:	4603      	mov	r3, r0
 8002978:	461c      	mov	r4, r3
 800297a:	4b3a      	ldr	r3, [pc, #232]	; (8002a64 <Constant_Current+0x15d4>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b2b      	ldr	r3, [pc, #172]	; (8002a2c <Constant_Current+0x159c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f7fe fa19 	bl	8000dbc <__aeabi_fmul>
 800298a:	4603      	mov	r3, r0
 800298c:	4619      	mov	r1, r3
 800298e:	4620      	mov	r0, r4
 8002990:	f7fe f90c 	bl	8000bac <__addsf3>
 8002994:	4603      	mov	r3, r0
 8002996:	461c      	mov	r4, r3
 8002998:	4b33      	ldr	r3, [pc, #204]	; (8002a68 <Constant_Current+0x15d8>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <Constant_Current+0x15a4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f7fe fa0a 	bl	8000dbc <__aeabi_fmul>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4619      	mov	r1, r3
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7fe f8fd 	bl	8000bac <__addsf3>
 80029b2:	4603      	mov	r3, r0
 80029b4:	461c      	mov	r4, r3
 80029b6:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <Constant_Current+0x15dc>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b20      	ldr	r3, [pc, #128]	; (8002a3c <Constant_Current+0x15ac>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4619      	mov	r1, r3
 80029c0:	4610      	mov	r0, r2
 80029c2:	f7fe f9fb 	bl	8000dbc <__aeabi_fmul>
 80029c6:	4603      	mov	r3, r0
 80029c8:	4619      	mov	r1, r3
 80029ca:	4620      	mov	r0, r4
 80029cc:	f7fe f8ee 	bl	8000bac <__addsf3>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461c      	mov	r4, r3
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <Constant_Current+0x15e0>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <Constant_Current+0x15b4>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7fe f9ec 	bl	8000dbc <__aeabi_fmul>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4619      	mov	r1, r3
 80029e8:	4620      	mov	r0, r4
 80029ea:	e043      	b.n	8002a74 <Constant_Current+0x15e4>
 80029ec:	2000127c 	.word	0x2000127c
 80029f0:	20001294 	.word	0x20001294
 80029f4:	200006f8 	.word	0x200006f8
 80029f8:	20000ab8 	.word	0x20000ab8
 80029fc:	200012b4 	.word	0x200012b4
 8002a00:	20000914 	.word	0x20000914
 8002a04:	200006bc 	.word	0x200006bc
 8002a08:	2000071c 	.word	0x2000071c
 8002a0c:	200012c8 	.word	0x200012c8
 8002a10:	20001284 	.word	0x20001284
 8002a14:	20000cbc 	.word	0x20000cbc
 8002a18:	20000d30 	.word	0x20000d30
 8002a1c:	20000d48 	.word	0x20000d48
 8002a20:	20000cac 	.word	0x20000cac
 8002a24:	20000c84 	.word	0x20000c84
 8002a28:	200012cc 	.word	0x200012cc
 8002a2c:	20000250 	.word	0x20000250
 8002a30:	20000f08 	.word	0x20000f08
 8002a34:	20000010 	.word	0x20000010
 8002a38:	200006e4 	.word	0x200006e4
 8002a3c:	20000014 	.word	0x20000014
 8002a40:	200008e8 	.word	0x200008e8
 8002a44:	20000018 	.word	0x20000018
 8002a48:	200012bc 	.word	0x200012bc
 8002a4c:	2000001c 	.word	0x2000001c
 8002a50:	200008d4 	.word	0x200008d4
 8002a54:	20000d2c 	.word	0x20000d2c
 8002a58:	20000710 	.word	0x20000710
 8002a5c:	20000c94 	.word	0x20000c94
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	20000718 	.word	0x20000718
 8002a68:	20000c78 	.word	0x20000c78
 8002a6c:	20000f00 	.word	0x20000f00
 8002a70:	2000129c 	.word	0x2000129c
 8002a74:	f7fe f89a 	bl	8000bac <__addsf3>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <Constant_Current+0x1834>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b91      	ldr	r3, [pc, #580]	; (8002cc8 <Constant_Current+0x1838>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f7fe f998 	bl	8000dbc <__aeabi_fmul>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4620      	mov	r0, r4
 8002a92:	f7fe f88b 	bl	8000bac <__addsf3>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461c      	mov	r4, r3
 8002a9a:	4b8c      	ldr	r3, [pc, #560]	; (8002ccc <Constant_Current+0x183c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b8a      	ldr	r3, [pc, #552]	; (8002cc8 <Constant_Current+0x1838>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f7fe f989 	bl	8000dbc <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f7fe f87c 	bl	8000bac <__addsf3>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b85      	ldr	r3, [pc, #532]	; (8002cd0 <Constant_Current+0x1840>)
 8002aba:	601a      	str	r2, [r3, #0]
	C=(r15*outNM)+(r16*outNS)+(r17*outZ)+(r18*outPS)+(r19*outPM)+(r20*outPB)+(r21*outPH);
 8002abc:	4b85      	ldr	r3, [pc, #532]	; (8002cd4 <Constant_Current+0x1844>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b85      	ldr	r3, [pc, #532]	; (8002cd8 <Constant_Current+0x1848>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	f7fe f978 	bl	8000dbc <__aeabi_fmul>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461c      	mov	r4, r3
 8002ad0:	4b82      	ldr	r3, [pc, #520]	; (8002cdc <Constant_Current+0x184c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <Constant_Current+0x1850>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4610      	mov	r0, r2
 8002adc:	f7fe f96e 	bl	8000dbc <__aeabi_fmul>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7fe f861 	bl	8000bac <__addsf3>
 8002aea:	4603      	mov	r3, r0
 8002aec:	461c      	mov	r4, r3
 8002aee:	4b7d      	ldr	r3, [pc, #500]	; (8002ce4 <Constant_Current+0x1854>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <Constant_Current+0x1858>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4619      	mov	r1, r3
 8002af8:	4610      	mov	r0, r2
 8002afa:	f7fe f95f 	bl	8000dbc <__aeabi_fmul>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7fe f852 	bl	8000bac <__addsf3>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461c      	mov	r4, r3
 8002b0c:	4b77      	ldr	r3, [pc, #476]	; (8002cec <Constant_Current+0x185c>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <Constant_Current+0x1860>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	4610      	mov	r0, r2
 8002b18:	f7fe f950 	bl	8000dbc <__aeabi_fmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4620      	mov	r0, r4
 8002b22:	f7fe f843 	bl	8000bac <__addsf3>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461c      	mov	r4, r3
 8002b2a:	4b72      	ldr	r3, [pc, #456]	; (8002cf4 <Constant_Current+0x1864>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b72      	ldr	r3, [pc, #456]	; (8002cf8 <Constant_Current+0x1868>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f7fe f941 	bl	8000dbc <__aeabi_fmul>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4620      	mov	r0, r4
 8002b40:	f7fe f834 	bl	8000bac <__addsf3>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461c      	mov	r4, r3
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <Constant_Current+0x186c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b6c      	ldr	r3, [pc, #432]	; (8002d00 <Constant_Current+0x1870>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f7fe f932 	bl	8000dbc <__aeabi_fmul>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7fe f825 	bl	8000bac <__addsf3>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461c      	mov	r4, r3
 8002b66:	4b67      	ldr	r3, [pc, #412]	; (8002d04 <Constant_Current+0x1874>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <Constant_Current+0x1838>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7fe f923 	bl	8000dbc <__aeabi_fmul>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7fe f816 	bl	8000bac <__addsf3>
 8002b80:	4603      	mov	r3, r0
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b60      	ldr	r3, [pc, #384]	; (8002d08 <Constant_Current+0x1878>)
 8002b86:	601a      	str	r2, [r3, #0]
	D=(r22*outNB)+(r23*outNM)+(r24*outNS)+(r25*outZ)+(r26*outPS)+(r27*outPM)+(r28*outPB);
 8002b88:	4b60      	ldr	r3, [pc, #384]	; (8002d0c <Constant_Current+0x187c>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <Constant_Current+0x1880>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f7fe f912 	bl	8000dbc <__aeabi_fmul>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	461c      	mov	r4, r3
 8002b9c:	4b5d      	ldr	r3, [pc, #372]	; (8002d14 <Constant_Current+0x1884>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b4d      	ldr	r3, [pc, #308]	; (8002cd8 <Constant_Current+0x1848>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	f7fe f908 	bl	8000dbc <__aeabi_fmul>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7fd fffb 	bl	8000bac <__addsf3>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461c      	mov	r4, r3
 8002bba:	4b57      	ldr	r3, [pc, #348]	; (8002d18 <Constant_Current+0x1888>)
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b48      	ldr	r3, [pc, #288]	; (8002ce0 <Constant_Current+0x1850>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	f7fe f8f9 	bl	8000dbc <__aeabi_fmul>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4620      	mov	r0, r4
 8002bd0:	f7fd ffec 	bl	8000bac <__addsf3>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461c      	mov	r4, r3
 8002bd8:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <Constant_Current+0x188c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <Constant_Current+0x1858>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4619      	mov	r1, r3
 8002be2:	4610      	mov	r0, r2
 8002be4:	f7fe f8ea 	bl	8000dbc <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4619      	mov	r1, r3
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7fd ffdd 	bl	8000bac <__addsf3>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	461c      	mov	r4, r3
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	; (8002d20 <Constant_Current+0x1890>)
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4b3d      	ldr	r3, [pc, #244]	; (8002cf0 <Constant_Current+0x1860>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7fe f8db 	bl	8000dbc <__aeabi_fmul>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7fd ffce 	bl	8000bac <__addsf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461c      	mov	r4, r3
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <Constant_Current+0x1894>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b37      	ldr	r3, [pc, #220]	; (8002cf8 <Constant_Current+0x1868>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7fe f8cc 	bl	8000dbc <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	4619      	mov	r1, r3
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f7fd ffbf 	bl	8000bac <__addsf3>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	461c      	mov	r4, r3
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <Constant_Current+0x1898>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <Constant_Current+0x1870>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	f7fe f8bd 	bl	8000dbc <__aeabi_fmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4619      	mov	r1, r3
 8002c46:	4620      	mov	r0, r4
 8002c48:	f7fd ffb0 	bl	8000bac <__addsf3>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <Constant_Current+0x189c>)
 8002c52:	601a      	str	r2, [r3, #0]
	E=(r29*outNH)+(r30*outNB)+(r31*outNM)+(r32*outNS)+(r33*outZ)+(r34*outPS)+(r35*outPM);
 8002c54:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <Constant_Current+0x18a0>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b36      	ldr	r3, [pc, #216]	; (8002d34 <Constant_Current+0x18a4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f7fe f8ac 	bl	8000dbc <__aeabi_fmul>
 8002c64:	4603      	mov	r3, r0
 8002c66:	461c      	mov	r4, r3
 8002c68:	4b33      	ldr	r3, [pc, #204]	; (8002d38 <Constant_Current+0x18a8>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <Constant_Current+0x1880>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4619      	mov	r1, r3
 8002c72:	4610      	mov	r0, r2
 8002c74:	f7fe f8a2 	bl	8000dbc <__aeabi_fmul>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	f7fd ff95 	bl	8000bac <__addsf3>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461c      	mov	r4, r3
 8002c86:	4b2d      	ldr	r3, [pc, #180]	; (8002d3c <Constant_Current+0x18ac>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <Constant_Current+0x1848>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4610      	mov	r0, r2
 8002c92:	f7fe f893 	bl	8000dbc <__aeabi_fmul>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	f7fd ff86 	bl	8000bac <__addsf3>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	461c      	mov	r4, r3
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <Constant_Current+0x18b0>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <Constant_Current+0x1850>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	4610      	mov	r0, r2
 8002cb0:	f7fe f884 	bl	8000dbc <__aeabi_fmul>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f7fd ff77 	bl	8000bac <__addsf3>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	e040      	b.n	8002d44 <Constant_Current+0x18b4>
 8002cc2:	bf00      	nop
 8002cc4:	200012d0 	.word	0x200012d0
 8002cc8:	2000001c 	.word	0x2000001c
 8002ccc:	20000680 	.word	0x20000680
 8002cd0:	20000ab0 	.word	0x20000ab0
 8002cd4:	200012a0 	.word	0x200012a0
 8002cd8:	20000008 	.word	0x20000008
 8002cdc:	20000d44 	.word	0x20000d44
 8002ce0:	2000000c 	.word	0x2000000c
 8002ce4:	200008c8 	.word	0x200008c8
 8002ce8:	20000250 	.word	0x20000250
 8002cec:	20000cc4 	.word	0x20000cc4
 8002cf0:	20000010 	.word	0x20000010
 8002cf4:	20001298 	.word	0x20001298
 8002cf8:	20000014 	.word	0x20000014
 8002cfc:	20000c8c 	.word	0x20000c8c
 8002d00:	20000018 	.word	0x20000018
 8002d04:	200008dc 	.word	0x200008dc
 8002d08:	20000ad0 	.word	0x20000ad0
 8002d0c:	200010c8 	.word	0x200010c8
 8002d10:	20000004 	.word	0x20000004
 8002d14:	200012b0 	.word	0x200012b0
 8002d18:	200012c4 	.word	0x200012c4
 8002d1c:	200006b8 	.word	0x200006b8
 8002d20:	200008b8 	.word	0x200008b8
 8002d24:	20000ca4 	.word	0x20000ca4
 8002d28:	20000690 	.word	0x20000690
 8002d2c:	2000067c 	.word	0x2000067c
 8002d30:	200006b0 	.word	0x200006b0
 8002d34:	20000000 	.word	0x20000000
 8002d38:	20000ef0 	.word	0x20000ef0
 8002d3c:	200008cc 	.word	0x200008cc
 8002d40:	2000091c 	.word	0x2000091c
 8002d44:	461c      	mov	r4, r3
 8002d46:	4b91      	ldr	r3, [pc, #580]	; (8002f8c <Constant_Current+0x1afc>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b91      	ldr	r3, [pc, #580]	; (8002f90 <Constant_Current+0x1b00>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f7fe f833 	bl	8000dbc <__aeabi_fmul>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd ff26 	bl	8000bac <__addsf3>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461c      	mov	r4, r3
 8002d64:	4b8b      	ldr	r3, [pc, #556]	; (8002f94 <Constant_Current+0x1b04>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <Constant_Current+0x1b08>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f7fe f824 	bl	8000dbc <__aeabi_fmul>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4619      	mov	r1, r3
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd ff17 	bl	8000bac <__addsf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	461c      	mov	r4, r3
 8002d82:	4b86      	ldr	r3, [pc, #536]	; (8002f9c <Constant_Current+0x1b0c>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b86      	ldr	r3, [pc, #536]	; (8002fa0 <Constant_Current+0x1b10>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f7fe f815 	bl	8000dbc <__aeabi_fmul>
 8002d92:	4603      	mov	r3, r0
 8002d94:	4619      	mov	r1, r3
 8002d96:	4620      	mov	r0, r4
 8002d98:	f7fd ff08 	bl	8000bac <__addsf3>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	4b80      	ldr	r3, [pc, #512]	; (8002fa4 <Constant_Current+0x1b14>)
 8002da2:	601a      	str	r2, [r3, #0]
	F=(r36*outNH)+(r37*outNH)+(r38*outNB)+(r39*outNM)+(r40*outNS)+(r41*outZ)+(r42*outPS);
 8002da4:	4b80      	ldr	r3, [pc, #512]	; (8002fa8 <Constant_Current+0x1b18>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b80      	ldr	r3, [pc, #512]	; (8002fac <Constant_Current+0x1b1c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe f804 	bl	8000dbc <__aeabi_fmul>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461c      	mov	r4, r3
 8002db8:	4b7d      	ldr	r3, [pc, #500]	; (8002fb0 <Constant_Current+0x1b20>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <Constant_Current+0x1b1c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7fd fffa 	bl	8000dbc <__aeabi_fmul>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	4620      	mov	r0, r4
 8002dce:	f7fd feed 	bl	8000bac <__addsf3>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461c      	mov	r4, r3
 8002dd6:	4b77      	ldr	r3, [pc, #476]	; (8002fb4 <Constant_Current+0x1b24>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	4b77      	ldr	r3, [pc, #476]	; (8002fb8 <Constant_Current+0x1b28>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4619      	mov	r1, r3
 8002de0:	4610      	mov	r0, r2
 8002de2:	f7fd ffeb 	bl	8000dbc <__aeabi_fmul>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4619      	mov	r1, r3
 8002dea:	4620      	mov	r0, r4
 8002dec:	f7fd fede 	bl	8000bac <__addsf3>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461c      	mov	r4, r3
 8002df4:	4b71      	ldr	r3, [pc, #452]	; (8002fbc <Constant_Current+0x1b2c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b71      	ldr	r3, [pc, #452]	; (8002fc0 <Constant_Current+0x1b30>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	4610      	mov	r0, r2
 8002e00:	f7fd ffdc 	bl	8000dbc <__aeabi_fmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	4619      	mov	r1, r3
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fd fecf 	bl	8000bac <__addsf3>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	461c      	mov	r4, r3
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <Constant_Current+0x1b34>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4b6c      	ldr	r3, [pc, #432]	; (8002fc8 <Constant_Current+0x1b38>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	f7fd ffcd 	bl	8000dbc <__aeabi_fmul>
 8002e22:	4603      	mov	r3, r0
 8002e24:	4619      	mov	r1, r3
 8002e26:	4620      	mov	r0, r4
 8002e28:	f7fd fec0 	bl	8000bac <__addsf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	461c      	mov	r4, r3
 8002e30:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <Constant_Current+0x1b3c>)
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <Constant_Current+0x1b00>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f7fd ffbe 	bl	8000dbc <__aeabi_fmul>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4619      	mov	r1, r3
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fd feb1 	bl	8000bac <__addsf3>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	4b60      	ldr	r3, [pc, #384]	; (8002fd0 <Constant_Current+0x1b40>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4b51      	ldr	r3, [pc, #324]	; (8002f98 <Constant_Current+0x1b08>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4619      	mov	r1, r3
 8002e58:	4610      	mov	r0, r2
 8002e5a:	f7fd ffaf 	bl	8000dbc <__aeabi_fmul>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4619      	mov	r1, r3
 8002e62:	4620      	mov	r0, r4
 8002e64:	f7fd fea2 	bl	8000bac <__addsf3>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b59      	ldr	r3, [pc, #356]	; (8002fd4 <Constant_Current+0x1b44>)
 8002e6e:	601a      	str	r2, [r3, #0]
	G=(r43*outNH)+(r44*outNH)+(r45*outNH)+(r46*outNB)+(r47*outNM)+(r48*outNS)+(r49*outZ);
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <Constant_Current+0x1b48>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <Constant_Current+0x1b1c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f7fd ff9e 	bl	8000dbc <__aeabi_fmul>
 8002e80:	4603      	mov	r3, r0
 8002e82:	461c      	mov	r4, r3
 8002e84:	4b55      	ldr	r3, [pc, #340]	; (8002fdc <Constant_Current+0x1b4c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b48      	ldr	r3, [pc, #288]	; (8002fac <Constant_Current+0x1b1c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4610      	mov	r0, r2
 8002e90:	f7fd ff94 	bl	8000dbc <__aeabi_fmul>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7fd fe87 	bl	8000bac <__addsf3>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461c      	mov	r4, r3
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <Constant_Current+0x1b50>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <Constant_Current+0x1b1c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fd ff85 	bl	8000dbc <__aeabi_fmul>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f7fd fe78 	bl	8000bac <__addsf3>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461c      	mov	r4, r3
 8002ec0:	4b48      	ldr	r3, [pc, #288]	; (8002fe4 <Constant_Current+0x1b54>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b3c      	ldr	r3, [pc, #240]	; (8002fb8 <Constant_Current+0x1b28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7fd ff76 	bl	8000dbc <__aeabi_fmul>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	f7fd fe69 	bl	8000bac <__addsf3>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461c      	mov	r4, r3
 8002ede:	4b42      	ldr	r3, [pc, #264]	; (8002fe8 <Constant_Current+0x1b58>)
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <Constant_Current+0x1b30>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4610      	mov	r0, r2
 8002eea:	f7fd ff67 	bl	8000dbc <__aeabi_fmul>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4620      	mov	r0, r4
 8002ef4:	f7fd fe5a 	bl	8000bac <__addsf3>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461c      	mov	r4, r3
 8002efc:	4b3b      	ldr	r3, [pc, #236]	; (8002fec <Constant_Current+0x1b5c>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b31      	ldr	r3, [pc, #196]	; (8002fc8 <Constant_Current+0x1b38>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f7fd ff58 	bl	8000dbc <__aeabi_fmul>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4620      	mov	r0, r4
 8002f12:	f7fd fe4b 	bl	8000bac <__addsf3>
 8002f16:	4603      	mov	r3, r0
 8002f18:	461c      	mov	r4, r3
 8002f1a:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <Constant_Current+0x1b60>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <Constant_Current+0x1b00>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4619      	mov	r1, r3
 8002f24:	4610      	mov	r0, r2
 8002f26:	f7fd ff49 	bl	8000dbc <__aeabi_fmul>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f7fd fe3c 	bl	8000bac <__addsf3>
 8002f34:	4603      	mov	r3, r0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4b2e      	ldr	r3, [pc, #184]	; (8002ff4 <Constant_Current+0x1b64>)
 8002f3a:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8002f3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ff8 <Constant_Current+0x1b68>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b2e      	ldr	r3, [pc, #184]	; (8002ffc <Constant_Current+0x1b6c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4619      	mov	r1, r3
 8002f46:	4610      	mov	r0, r2
 8002f48:	f7fd fe30 	bl	8000bac <__addsf3>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	461a      	mov	r2, r3
 8002f50:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <Constant_Current+0x1b70>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	4610      	mov	r0, r2
 8002f58:	f7fd fe28 	bl	8000bac <__addsf3>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b28      	ldr	r3, [pc, #160]	; (8003004 <Constant_Current+0x1b74>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f7fd fe20 	bl	8000bac <__addsf3>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	461a      	mov	r2, r3
 8002f70:	4b25      	ldr	r3, [pc, #148]	; (8003008 <Constant_Current+0x1b78>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	4610      	mov	r0, r2
 8002f78:	f7fd fe18 	bl	8000bac <__addsf3>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	461a      	mov	r2, r3
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <Constant_Current+0x1b7c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	e042      	b.n	8003010 <Constant_Current+0x1b80>
 8002f8a:	bf00      	nop
 8002f8c:	20000cb0 	.word	0x20000cb0
 8002f90:	20000250 	.word	0x20000250
 8002f94:	20000eec 	.word	0x20000eec
 8002f98:	20000010 	.word	0x20000010
 8002f9c:	200010c0 	.word	0x200010c0
 8002fa0:	20000014 	.word	0x20000014
 8002fa4:	200010a8 	.word	0x200010a8
 8002fa8:	200006ec 	.word	0x200006ec
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000ac8 	.word	0x20000ac8
 8002fb4:	20000c88 	.word	0x20000c88
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	2000128c 	.word	0x2000128c
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	20000d24 	.word	0x20000d24
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	200006c8 	.word	0x200006c8
 8002fd0:	200006dc 	.word	0x200006dc
 8002fd4:	200012b8 	.word	0x200012b8
 8002fd8:	20001294 	.word	0x20001294
 8002fdc:	20000ab8 	.word	0x20000ab8
 8002fe0:	20000914 	.word	0x20000914
 8002fe4:	2000071c 	.word	0x2000071c
 8002fe8:	20001284 	.word	0x20001284
 8002fec:	20000d30 	.word	0x20000d30
 8002ff0:	20000cac 	.word	0x20000cac
 8002ff4:	20000c98 	.word	0x20000c98
 8002ff8:	200012cc 	.word	0x200012cc
 8002ffc:	20000f08 	.word	0x20000f08
 8003000:	200006e4 	.word	0x200006e4
 8003004:	200008e8 	.word	0x200008e8
 8003008:	200012bc 	.word	0x200012bc
 800300c:	200008d4 	.word	0x200008d4
 8003010:	f7fd fdcc 	bl	8000bac <__addsf3>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b90      	ldr	r3, [pc, #576]	; (800325c <Constant_Current+0x1dcc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4619      	mov	r1, r3
 800301e:	4610      	mov	r0, r2
 8003020:	f7fd fdc4 	bl	8000bac <__addsf3>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <Constant_Current+0x1dd0>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	4610      	mov	r0, r2
 8003030:	f7fd fdbc 	bl	8000bac <__addsf3>
 8003034:	4603      	mov	r3, r0
 8003036:	461a      	mov	r2, r3
 8003038:	4b8a      	ldr	r3, [pc, #552]	; (8003264 <Constant_Current+0x1dd4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f7fd fdb4 	bl	8000bac <__addsf3>
 8003044:	4603      	mov	r3, r0
 8003046:	461a      	mov	r2, r3
 8003048:	4b87      	ldr	r3, [pc, #540]	; (8003268 <Constant_Current+0x1dd8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7fd fdac 	bl	8000bac <__addsf3>
 8003054:	4603      	mov	r3, r0
 8003056:	461a      	mov	r2, r3
 8003058:	4b84      	ldr	r3, [pc, #528]	; (800326c <Constant_Current+0x1ddc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f7fd fda4 	bl	8000bac <__addsf3>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b81      	ldr	r3, [pc, #516]	; (8003270 <Constant_Current+0x1de0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fd fd9c 	bl	8000bac <__addsf3>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4b7e      	ldr	r3, [pc, #504]	; (8003274 <Constant_Current+0x1de4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f7fd fd94 	bl	8000bac <__addsf3>
 8003084:	4603      	mov	r3, r0
 8003086:	461a      	mov	r2, r3
 8003088:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <Constant_Current+0x1de8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fd fd8c 	bl	8000bac <__addsf3>
 8003094:	4603      	mov	r3, r0
 8003096:	461a      	mov	r2, r3
 8003098:	4b78      	ldr	r3, [pc, #480]	; (800327c <Constant_Current+0x1dec>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4619      	mov	r1, r3
 800309e:	4610      	mov	r0, r2
 80030a0:	f7fd fd84 	bl	8000bac <__addsf3>
 80030a4:	4603      	mov	r3, r0
 80030a6:	461a      	mov	r2, r3
 80030a8:	4b75      	ldr	r3, [pc, #468]	; (8003280 <Constant_Current+0x1df0>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7fd fd7c 	bl	8000bac <__addsf3>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b72      	ldr	r3, [pc, #456]	; (8003284 <Constant_Current+0x1df4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4619      	mov	r1, r3
 80030be:	4610      	mov	r0, r2
 80030c0:	f7fd fd74 	bl	8000bac <__addsf3>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <Constant_Current+0x1df8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	4610      	mov	r0, r2
 80030d0:	f7fd fd6c 	bl	8000bac <__addsf3>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b6c      	ldr	r3, [pc, #432]	; (800328c <Constant_Current+0x1dfc>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7fd fd64 	bl	8000bac <__addsf3>
 80030e4:	4603      	mov	r3, r0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <Constant_Current+0x1e00>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4619      	mov	r1, r3
 80030ee:	4610      	mov	r0, r2
 80030f0:	f7fd fd5c 	bl	8000bac <__addsf3>
 80030f4:	4603      	mov	r3, r0
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b66      	ldr	r3, [pc, #408]	; (8003294 <Constant_Current+0x1e04>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f7fd fd54 	bl	8000bac <__addsf3>
 8003104:	4603      	mov	r3, r0
 8003106:	461a      	mov	r2, r3
 8003108:	4b63      	ldr	r3, [pc, #396]	; (8003298 <Constant_Current+0x1e08>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f7fd fd4c 	bl	8000bac <__addsf3>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b60      	ldr	r3, [pc, #384]	; (800329c <Constant_Current+0x1e0c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4610      	mov	r0, r2
 8003120:	f7fd fd44 	bl	8000bac <__addsf3>
 8003124:	4603      	mov	r3, r0
 8003126:	461a      	mov	r2, r3
 8003128:	4b5d      	ldr	r3, [pc, #372]	; (80032a0 <Constant_Current+0x1e10>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7fd fd3c 	bl	8000bac <__addsf3>
 8003134:	4603      	mov	r3, r0
 8003136:	461a      	mov	r2, r3
 8003138:	4b5a      	ldr	r3, [pc, #360]	; (80032a4 <Constant_Current+0x1e14>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4619      	mov	r1, r3
 800313e:	4610      	mov	r0, r2
 8003140:	f7fd fd34 	bl	8000bac <__addsf3>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <Constant_Current+0x1e18>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7fd fd2c 	bl	8000bac <__addsf3>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	4b54      	ldr	r3, [pc, #336]	; (80032ac <Constant_Current+0x1e1c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	4610      	mov	r0, r2
 8003160:	f7fd fd24 	bl	8000bac <__addsf3>
 8003164:	4603      	mov	r3, r0
 8003166:	461a      	mov	r2, r3
 8003168:	4b51      	ldr	r3, [pc, #324]	; (80032b0 <Constant_Current+0x1e20>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7fd fd1c 	bl	8000bac <__addsf3>
 8003174:	4603      	mov	r3, r0
 8003176:	461a      	mov	r2, r3
 8003178:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <Constant_Current+0x1e24>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7fd fd14 	bl	8000bac <__addsf3>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b4b      	ldr	r3, [pc, #300]	; (80032b8 <Constant_Current+0x1e28>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f7fd fd0c 	bl	8000bac <__addsf3>
 8003194:	4603      	mov	r3, r0
 8003196:	461a      	mov	r2, r3
 8003198:	4b48      	ldr	r3, [pc, #288]	; (80032bc <Constant_Current+0x1e2c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f7fd fd04 	bl	8000bac <__addsf3>
 80031a4:	4603      	mov	r3, r0
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b45      	ldr	r3, [pc, #276]	; (80032c0 <Constant_Current+0x1e30>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	4610      	mov	r0, r2
 80031b0:	f7fd fcfc 	bl	8000bac <__addsf3>
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	4b42      	ldr	r3, [pc, #264]	; (80032c4 <Constant_Current+0x1e34>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fd fcf4 	bl	8000bac <__addsf3>
 80031c4:	4603      	mov	r3, r0
 80031c6:	461a      	mov	r2, r3
 80031c8:	4b3f      	ldr	r3, [pc, #252]	; (80032c8 <Constant_Current+0x1e38>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4619      	mov	r1, r3
 80031ce:	4610      	mov	r0, r2
 80031d0:	f7fd fcec 	bl	8000bac <__addsf3>
 80031d4:	4603      	mov	r3, r0
 80031d6:	461a      	mov	r2, r3
 80031d8:	4b3c      	ldr	r3, [pc, #240]	; (80032cc <Constant_Current+0x1e3c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4619      	mov	r1, r3
 80031de:	4610      	mov	r0, r2
 80031e0:	f7fd fce4 	bl	8000bac <__addsf3>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <Constant_Current+0x1e40>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f7fd fcdc 	bl	8000bac <__addsf3>
 80031f4:	4603      	mov	r3, r0
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <Constant_Current+0x1e44>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	4610      	mov	r0, r2
 8003200:	f7fd fcd4 	bl	8000bac <__addsf3>
 8003204:	4603      	mov	r3, r0
 8003206:	461a      	mov	r2, r3
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <Constant_Current+0x1e48>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f7fd fccc 	bl	8000bac <__addsf3>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <Constant_Current+0x1e4c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	4610      	mov	r0, r2
 8003220:	f7fd fcc4 	bl	8000bac <__addsf3>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b2d      	ldr	r3, [pc, #180]	; (80032e0 <Constant_Current+0x1e50>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	4610      	mov	r0, r2
 8003230:	f7fd fcbc 	bl	8000bac <__addsf3>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <Constant_Current+0x1e54>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fd fcb4 	bl	8000bac <__addsf3>
 8003244:	4603      	mov	r3, r0
 8003246:	461a      	mov	r2, r3
 8003248:	4b27      	ldr	r3, [pc, #156]	; (80032e8 <Constant_Current+0x1e58>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4619      	mov	r1, r3
 800324e:	4610      	mov	r0, r2
 8003250:	f7fd fcac 	bl	8000bac <__addsf3>
 8003254:	4603      	mov	r3, r0
 8003256:	461a      	mov	r2, r3
 8003258:	e048      	b.n	80032ec <Constant_Current+0x1e5c>
 800325a:	bf00      	nop
 800325c:	20000d2c 	.word	0x20000d2c
 8003260:	20000c94 	.word	0x20000c94
 8003264:	20000718 	.word	0x20000718
 8003268:	20000c78 	.word	0x20000c78
 800326c:	20000f00 	.word	0x20000f00
 8003270:	2000129c 	.word	0x2000129c
 8003274:	200012d0 	.word	0x200012d0
 8003278:	20000680 	.word	0x20000680
 800327c:	200012a0 	.word	0x200012a0
 8003280:	20000d44 	.word	0x20000d44
 8003284:	200008c8 	.word	0x200008c8
 8003288:	20000cc4 	.word	0x20000cc4
 800328c:	20001298 	.word	0x20001298
 8003290:	20000c8c 	.word	0x20000c8c
 8003294:	200008dc 	.word	0x200008dc
 8003298:	200010c8 	.word	0x200010c8
 800329c:	200012b0 	.word	0x200012b0
 80032a0:	200012c4 	.word	0x200012c4
 80032a4:	200006b8 	.word	0x200006b8
 80032a8:	200008b8 	.word	0x200008b8
 80032ac:	20000ca4 	.word	0x20000ca4
 80032b0:	20000690 	.word	0x20000690
 80032b4:	200006b0 	.word	0x200006b0
 80032b8:	20000ef0 	.word	0x20000ef0
 80032bc:	200008cc 	.word	0x200008cc
 80032c0:	2000091c 	.word	0x2000091c
 80032c4:	20000cb0 	.word	0x20000cb0
 80032c8:	20000eec 	.word	0x20000eec
 80032cc:	200010c0 	.word	0x200010c0
 80032d0:	200006ec 	.word	0x200006ec
 80032d4:	20000ac8 	.word	0x20000ac8
 80032d8:	20000c88 	.word	0x20000c88
 80032dc:	2000128c 	.word	0x2000128c
 80032e0:	20000d24 	.word	0x20000d24
 80032e4:	200006c8 	.word	0x200006c8
 80032e8:	200006dc 	.word	0x200006dc
 80032ec:	4b7a      	ldr	r3, [pc, #488]	; (80034d8 <Constant_Current+0x2048>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4619      	mov	r1, r3
 80032f2:	4610      	mov	r0, r2
 80032f4:	f7fd fc5a 	bl	8000bac <__addsf3>
 80032f8:	4603      	mov	r3, r0
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b77      	ldr	r3, [pc, #476]	; (80034dc <Constant_Current+0x204c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7fd fc52 	bl	8000bac <__addsf3>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	4b74      	ldr	r3, [pc, #464]	; (80034e0 <Constant_Current+0x2050>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4619      	mov	r1, r3
 8003312:	4610      	mov	r0, r2
 8003314:	f7fd fc4a 	bl	8000bac <__addsf3>
 8003318:	4603      	mov	r3, r0
 800331a:	461a      	mov	r2, r3
 800331c:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <Constant_Current+0x2054>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f7fd fc42 	bl	8000bac <__addsf3>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	4b6e      	ldr	r3, [pc, #440]	; (80034e8 <Constant_Current+0x2058>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f7fd fc3a 	bl	8000bac <__addsf3>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b6b      	ldr	r3, [pc, #428]	; (80034ec <Constant_Current+0x205c>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	4610      	mov	r0, r2
 8003344:	f7fd fc32 	bl	8000bac <__addsf3>
 8003348:	4603      	mov	r3, r0
 800334a:	461a      	mov	r2, r3
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <Constant_Current+0x2060>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4619      	mov	r1, r3
 8003352:	4610      	mov	r0, r2
 8003354:	f7fd fc2a 	bl	8000bac <__addsf3>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <Constant_Current+0x2064>)
 800335e:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 8003360:	4b65      	ldr	r3, [pc, #404]	; (80034f8 <Constant_Current+0x2068>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	4b65      	ldr	r3, [pc, #404]	; (80034fc <Constant_Current+0x206c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4619      	mov	r1, r3
 800336a:	4610      	mov	r0, r2
 800336c:	f7fd fc1e 	bl	8000bac <__addsf3>
 8003370:	4603      	mov	r3, r0
 8003372:	461a      	mov	r2, r3
 8003374:	4b62      	ldr	r3, [pc, #392]	; (8003500 <Constant_Current+0x2070>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4619      	mov	r1, r3
 800337a:	4610      	mov	r0, r2
 800337c:	f7fd fc16 	bl	8000bac <__addsf3>
 8003380:	4603      	mov	r3, r0
 8003382:	461a      	mov	r2, r3
 8003384:	4b5f      	ldr	r3, [pc, #380]	; (8003504 <Constant_Current+0x2074>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f7fd fc0e 	bl	8000bac <__addsf3>
 8003390:	4603      	mov	r3, r0
 8003392:	461a      	mov	r2, r3
 8003394:	4b5c      	ldr	r3, [pc, #368]	; (8003508 <Constant_Current+0x2078>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4619      	mov	r1, r3
 800339a:	4610      	mov	r0, r2
 800339c:	f7fd fc06 	bl	8000bac <__addsf3>
 80033a0:	4603      	mov	r3, r0
 80033a2:	461a      	mov	r2, r3
 80033a4:	4b59      	ldr	r3, [pc, #356]	; (800350c <Constant_Current+0x207c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7fd fbfe 	bl	8000bac <__addsf3>
 80033b0:	4603      	mov	r3, r0
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b56      	ldr	r3, [pc, #344]	; (8003510 <Constant_Current+0x2080>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fd fbf6 	bl	8000bac <__addsf3>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b4b      	ldr	r3, [pc, #300]	; (80034f4 <Constant_Current+0x2064>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4619      	mov	r1, r3
 80033ca:	4610      	mov	r0, r2
 80033cc:	f7fd fdaa 	bl	8000f24 <__aeabi_fdiv>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <Constant_Current+0x2084>)
 80033d6:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 80033d8:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <Constant_Current+0x2088>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	4b4d      	ldr	r3, [pc, #308]	; (8003514 <Constant_Current+0x2084>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f7fd fbe2 	bl	8000bac <__addsf3>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <Constant_Current+0x2088>)
 80033ee:	601a      	str	r2, [r3, #0]

	if(dc>=88)
 80033f0:	4b49      	ldr	r3, [pc, #292]	; (8003518 <Constant_Current+0x2088>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4949      	ldr	r1, [pc, #292]	; (800351c <Constant_Current+0x208c>)
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd fe92 	bl	8001120 <__aeabi_fcmpge>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <Constant_Current+0x1f78>
		dc=88;
 8003402:	4b45      	ldr	r3, [pc, #276]	; (8003518 <Constant_Current+0x2088>)
 8003404:	4a45      	ldr	r2, [pc, #276]	; (800351c <Constant_Current+0x208c>)
 8003406:	601a      	str	r2, [r3, #0]
	if(dc<=0)
 8003408:	4b43      	ldr	r3, [pc, #268]	; (8003518 <Constant_Current+0x2088>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f04f 0100 	mov.w	r1, #0
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd fe7b 	bl	800110c <__aeabi_fcmple>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <Constant_Current+0x1f94>
		dc=0;
 800341c:	4b3e      	ldr	r3, [pc, #248]	; (8003518 <Constant_Current+0x2088>)
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 8003424:	4b3c      	ldr	r3, [pc, #240]	; (8003518 <Constant_Current+0x2088>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	493d      	ldr	r1, [pc, #244]	; (8003520 <Constant_Current+0x2090>)
 800342a:	4618      	mov	r0, r3
 800342c:	f7fd fd7a 	bl	8000f24 <__aeabi_fdiv>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4b3b      	ldr	r3, [pc, #236]	; (8003524 <Constant_Current+0x2094>)
 8003436:	601a      	str	r2, [r3, #0]
//			  	while(p>0)
//			  		p--;
//			  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//		}

	if(	flag_trip_overvoltage == 1		||
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <Constant_Current+0x2098>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d02f      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_overtemperature == 1	||
 8003440:	4b3a      	ldr	r3, [pc, #232]	; (800352c <Constant_Current+0x209c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8003444:	2b01      	cmp	r3, #1
 8003446:	d02b      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_undertemperature == 1	||
 8003448:	4b39      	ldr	r3, [pc, #228]	; (8003530 <Constant_Current+0x20a0>)
 800344a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 800344c:	2b01      	cmp	r3, #1
 800344e:	d027      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_overcurrentcharge == 1||
 8003450:	4b38      	ldr	r3, [pc, #224]	; (8003534 <Constant_Current+0x20a4>)
 8003452:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8003454:	2b01      	cmp	r3, #1
 8003456:	d023      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_SOCOverCharge == 1	||
 8003458:	4b37      	ldr	r3, [pc, #220]	; (8003538 <Constant_Current+0x20a8>)
 800345a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 800345c:	2b01      	cmp	r3, #1
 800345e:	d01f      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_shortcircuit == 1		||
 8003460:	4b36      	ldr	r3, [pc, #216]	; (800353c <Constant_Current+0x20ac>)
 8003462:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8003464:	2b01      	cmp	r3, #1
 8003466:	d01b      	beq.n	80034a0 <Constant_Current+0x2010>
		flag_trip_systemfailure == 1	||
 8003468:	4b35      	ldr	r3, [pc, #212]	; (8003540 <Constant_Current+0x20b0>)
 800346a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 800346c:	2b01      	cmp	r3, #1
 800346e:	d017      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerShortCircuit == 1	||
 8003470:	4b34      	ldr	r3, [pc, #208]	; (8003544 <Constant_Current+0x20b4>)
 8003472:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8003474:	2b01      	cmp	r3, #1
 8003476:	d013      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerOverCurrent == 1	||
 8003478:	4b33      	ldr	r3, [pc, #204]	; (8003548 <Constant_Current+0x20b8>)
 800347a:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 800347c:	2b01      	cmp	r3, #1
 800347e:	d00f      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerOverTemperature == 1||
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <Constant_Current+0x20bc>)
 8003482:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8003484:	2b01      	cmp	r3, #1
 8003486:	d00b      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_ChargerOverVoltage == 1	||
 8003488:	4b31      	ldr	r3, [pc, #196]	; (8003550 <Constant_Current+0x20c0>)
 800348a:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 800348c:	2b01      	cmp	r3, #1
 800348e:	d007      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_MiniPC_LostCommunication==1||
 8003490:	4b30      	ldr	r3, [pc, #192]	; (8003554 <Constant_Current+0x20c4>)
 8003492:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8003494:	2b01      	cmp	r3, #1
 8003496:	d003      	beq.n	80034a0 <Constant_Current+0x2010>
		Flag_BMS_LostCommunication == 1)
 8003498:	4b2f      	ldr	r3, [pc, #188]	; (8003558 <Constant_Current+0x20c8>)
 800349a:	781b      	ldrb	r3, [r3, #0]
		Flag_MiniPC_LostCommunication==1||
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <Constant_Current+0x201e>
		{
			duty=0;
 80034a0:	4b20      	ldr	r3, [pc, #128]	; (8003524 <Constant_Current+0x2094>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 80034a8:	4b2c      	ldr	r3, [pc, #176]	; (800355c <Constant_Current+0x20cc>)
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
		}

	TIM1->CCR1=duty*TIM1->ARR;
 80034ae:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <Constant_Current+0x20d0>)
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fd fc2a 	bl	8000d0c <__aeabi_ui2f>
 80034b8:	4602      	mov	r2, r0
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <Constant_Current+0x2094>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f7fd fc7b 	bl	8000dbc <__aeabi_fmul>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4c25      	ldr	r4, [pc, #148]	; (8003560 <Constant_Current+0x20d0>)
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd fe3c 	bl	8001148 <__aeabi_f2uiz>
 80034d0:	4603      	mov	r3, r0
 80034d2:	6363      	str	r3, [r4, #52]	; 0x34

}
 80034d4:	bf00      	nop
 80034d6:	bd98      	pop	{r3, r4, r7, pc}
 80034d8:	20001294 	.word	0x20001294
 80034dc:	20000ab8 	.word	0x20000ab8
 80034e0:	20000914 	.word	0x20000914
 80034e4:	2000071c 	.word	0x2000071c
 80034e8:	20001284 	.word	0x20001284
 80034ec:	20000d30 	.word	0x20000d30
 80034f0:	20000cac 	.word	0x20000cac
 80034f4:	20000d20 	.word	0x20000d20
 80034f8:	20000710 	.word	0x20000710
 80034fc:	20000ab0 	.word	0x20000ab0
 8003500:	20000ad0 	.word	0x20000ad0
 8003504:	2000067c 	.word	0x2000067c
 8003508:	200010a8 	.word	0x200010a8
 800350c:	200012b8 	.word	0x200012b8
 8003510:	20000c98 	.word	0x20000c98
 8003514:	200010a0 	.word	0x200010a0
 8003518:	200006c4 	.word	0x200006c4
 800351c:	42b00000 	.word	0x42b00000
 8003520:	42c80000 	.word	0x42c80000
 8003524:	2000126c 	.word	0x2000126c
 8003528:	200012a4 	.word	0x200012a4
 800352c:	200008b4 	.word	0x200008b4
 8003530:	20000ac4 	.word	0x20000ac4
 8003534:	20000d34 	.word	0x20000d34
 8003538:	20000699 	.word	0x20000699
 800353c:	200006b4 	.word	0x200006b4
 8003540:	200006e0 	.word	0x200006e0
 8003544:	200008ec 	.word	0x200008ec
 8003548:	200008d0 	.word	0x200008d0
 800354c:	200006ff 	.word	0x200006ff
 8003550:	200008f8 	.word	0x200008f8
 8003554:	20001268 	.word	0x20001268
 8003558:	200006da 	.word	0x200006da
 800355c:	20000720 	.word	0x20000720
 8003560:	40010000 	.word	0x40010000

08003564 <Constant_Voltage>:
float oNH=-0.1, oNB=-0.05, oNM=-0.025, oNS=-0.01, oZ=0, oPS=0.0075, oPM=0.01, oPB=0.025, oPH=0.05;
float SetPoint_CV = MAX_CHARGE_VOLTAGE-0.1;
extern float Voltage_Charger;

void Constant_Voltage(void)
{
 8003564:	b598      	push	{r3, r4, r7, lr}
 8003566:	af00      	add	r7, sp, #0
	sp=SetPoint_CV;
 8003568:	4b71      	ldr	r3, [pc, #452]	; (8003730 <Constant_Voltage+0x1cc>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a71      	ldr	r2, [pc, #452]	; (8003734 <Constant_Voltage+0x1d0>)
 800356e:	6013      	str	r3, [r2, #0]
	pv=Voltage_Charger;
 8003570:	4b71      	ldr	r3, [pc, #452]	; (8003738 <Constant_Voltage+0x1d4>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a71      	ldr	r2, [pc, #452]	; (800373c <Constant_Voltage+0x1d8>)
 8003576:	6013      	str	r3, [r2, #0]
	e=sp-pv;
 8003578:	4b6e      	ldr	r3, [pc, #440]	; (8003734 <Constant_Voltage+0x1d0>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4b6f      	ldr	r3, [pc, #444]	; (800373c <Constant_Voltage+0x1d8>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4619      	mov	r1, r3
 8003582:	4610      	mov	r0, r2
 8003584:	f7fd fb10 	bl	8000ba8 <__aeabi_fsub>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <Constant_Voltage+0x1dc>)
 800358e:	601a      	str	r2, [r3, #0]
	d=e-esblm;
 8003590:	4b6b      	ldr	r3, [pc, #428]	; (8003740 <Constant_Voltage+0x1dc>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <Constant_Voltage+0x1e0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4619      	mov	r1, r3
 800359a:	4610      	mov	r0, r2
 800359c:	f7fd fb04 	bl	8000ba8 <__aeabi_fsub>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b68      	ldr	r3, [pc, #416]	; (8003748 <Constant_Voltage+0x1e4>)
 80035a6:	601a      	str	r2, [r3, #0]
	esblm=e;
 80035a8:	4b65      	ldr	r3, [pc, #404]	; (8003740 <Constant_Voltage+0x1dc>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a65      	ldr	r2, [pc, #404]	; (8003744 <Constant_Voltage+0x1e0>)
 80035ae:	6013      	str	r3, [r2, #0]

	///////////////////////////fuzzifikasi error//////////////////////////////

	if(e<=-75)
 80035b0:	4b63      	ldr	r3, [pc, #396]	; (8003740 <Constant_Voltage+0x1dc>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4965      	ldr	r1, [pc, #404]	; (800374c <Constant_Voltage+0x1e8>)
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fda8 	bl	800110c <__aeabi_fcmple>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d01b      	beq.n	80035fa <Constant_Voltage+0x96>
	{ eNB=1;  eNM=eNS=eZ=ePS=ePM=ePB=0;}
 80035c2:	4b63      	ldr	r3, [pc, #396]	; (8003750 <Constant_Voltage+0x1ec>)
 80035c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	4b62      	ldr	r3, [pc, #392]	; (8003754 <Constant_Voltage+0x1f0>)
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	4b60      	ldr	r3, [pc, #384]	; (8003754 <Constant_Voltage+0x1f0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a60      	ldr	r2, [pc, #384]	; (8003758 <Constant_Voltage+0x1f4>)
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <Constant_Voltage+0x1f4>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5f      	ldr	r2, [pc, #380]	; (800375c <Constant_Voltage+0x1f8>)
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b5e      	ldr	r3, [pc, #376]	; (800375c <Constant_Voltage+0x1f8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <Constant_Voltage+0x1fc>)
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b5d      	ldr	r3, [pc, #372]	; (8003760 <Constant_Voltage+0x1fc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a5d      	ldr	r2, [pc, #372]	; (8003764 <Constant_Voltage+0x200>)
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b5c      	ldr	r3, [pc, #368]	; (8003764 <Constant_Voltage+0x200>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <Constant_Voltage+0x204>)
 80035f8:	6013      	str	r3, [r2, #0]

	if(e>=-75&&e<=-50)
 80035fa:	4b51      	ldr	r3, [pc, #324]	; (8003740 <Constant_Voltage+0x1dc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4953      	ldr	r1, [pc, #332]	; (800374c <Constant_Voltage+0x1e8>)
 8003600:	4618      	mov	r0, r3
 8003602:	f7fd fd8d 	bl	8001120 <__aeabi_fcmpge>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d043      	beq.n	8003694 <Constant_Voltage+0x130>
 800360c:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <Constant_Voltage+0x1dc>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4956      	ldr	r1, [pc, #344]	; (800376c <Constant_Voltage+0x208>)
 8003612:	4618      	mov	r0, r3
 8003614:	f7fd fd7a 	bl	800110c <__aeabi_fcmple>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d03a      	beq.n	8003694 <Constant_Voltage+0x130>
	{ eNB=(-(e+75)/25)+1;
 800361e:	4b48      	ldr	r3, [pc, #288]	; (8003740 <Constant_Voltage+0x1dc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4953      	ldr	r1, [pc, #332]	; (8003770 <Constant_Voltage+0x20c>)
 8003624:	4618      	mov	r0, r3
 8003626:	f7fd fac1 	bl	8000bac <__addsf3>
 800362a:	4603      	mov	r3, r0
 800362c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003630:	4950      	ldr	r1, [pc, #320]	; (8003774 <Constant_Voltage+0x210>)
 8003632:	4618      	mov	r0, r3
 8003634:	f7fd fc76 	bl	8000f24 <__aeabi_fdiv>
 8003638:	4603      	mov	r3, r0
 800363a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800363e:	4618      	mov	r0, r3
 8003640:	f7fd fab4 	bl	8000bac <__addsf3>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	4b41      	ldr	r3, [pc, #260]	; (8003750 <Constant_Voltage+0x1ec>)
 800364a:	601a      	str	r2, [r3, #0]
	   eNM=(e+75)/25;
 800364c:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <Constant_Voltage+0x1dc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4947      	ldr	r1, [pc, #284]	; (8003770 <Constant_Voltage+0x20c>)
 8003652:	4618      	mov	r0, r3
 8003654:	f7fd faaa 	bl	8000bac <__addsf3>
 8003658:	4603      	mov	r3, r0
 800365a:	4946      	ldr	r1, [pc, #280]	; (8003774 <Constant_Voltage+0x210>)
 800365c:	4618      	mov	r0, r3
 800365e:	f7fd fc61 	bl	8000f24 <__aeabi_fdiv>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	4b40      	ldr	r3, [pc, #256]	; (8003768 <Constant_Voltage+0x204>)
 8003668:	601a      	str	r2, [r3, #0]
	   eNS=eZ=ePS=ePM=ePB=0;
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <Constant_Voltage+0x1f0>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	4b38      	ldr	r3, [pc, #224]	; (8003754 <Constant_Voltage+0x1f0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a38      	ldr	r2, [pc, #224]	; (8003758 <Constant_Voltage+0x1f4>)
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b37      	ldr	r3, [pc, #220]	; (8003758 <Constant_Voltage+0x1f4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a37      	ldr	r2, [pc, #220]	; (800375c <Constant_Voltage+0x1f8>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b36      	ldr	r3, [pc, #216]	; (800375c <Constant_Voltage+0x1f8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a36      	ldr	r2, [pc, #216]	; (8003760 <Constant_Voltage+0x1fc>)
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	4b35      	ldr	r3, [pc, #212]	; (8003760 <Constant_Voltage+0x1fc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a35      	ldr	r2, [pc, #212]	; (8003764 <Constant_Voltage+0x200>)
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e1de      	b.n	8003a52 <Constant_Voltage+0x4ee>
	}

	else if(e>=-50&&e<=-25)
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <Constant_Voltage+0x1dc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4934      	ldr	r1, [pc, #208]	; (800376c <Constant_Voltage+0x208>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fd40 	bl	8001120 <__aeabi_fcmpge>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d06c      	beq.n	8003780 <Constant_Voltage+0x21c>
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <Constant_Voltage+0x1dc>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4933      	ldr	r1, [pc, #204]	; (8003778 <Constant_Voltage+0x214>)
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd fd2d 	bl	800110c <__aeabi_fcmple>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d063      	beq.n	8003780 <Constant_Voltage+0x21c>
	{ eNM=(-(e+50)/25)+1;
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <Constant_Voltage+0x1dc>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	492f      	ldr	r1, [pc, #188]	; (800377c <Constant_Voltage+0x218>)
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fd fa74 	bl	8000bac <__addsf3>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80036ca:	492a      	ldr	r1, [pc, #168]	; (8003774 <Constant_Voltage+0x210>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fc29 	bl	8000f24 <__aeabi_fdiv>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fd fa67 	bl	8000bac <__addsf3>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b21      	ldr	r3, [pc, #132]	; (8003768 <Constant_Voltage+0x204>)
 80036e4:	601a      	str	r2, [r3, #0]
	   eNS=(e+50)/25;
 80036e6:	4b16      	ldr	r3, [pc, #88]	; (8003740 <Constant_Voltage+0x1dc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4924      	ldr	r1, [pc, #144]	; (800377c <Constant_Voltage+0x218>)
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fd fa5d 	bl	8000bac <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	491f      	ldr	r1, [pc, #124]	; (8003774 <Constant_Voltage+0x210>)
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fc14 	bl	8000f24 <__aeabi_fdiv>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b18      	ldr	r3, [pc, #96]	; (8003764 <Constant_Voltage+0x200>)
 8003702:	601a      	str	r2, [r3, #0]
	   eNB=eZ=ePS=ePM=ePB=0;
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <Constant_Voltage+0x1f0>)
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <Constant_Voltage+0x1f0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <Constant_Voltage+0x1f4>)
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b10      	ldr	r3, [pc, #64]	; (8003758 <Constant_Voltage+0x1f4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a10      	ldr	r2, [pc, #64]	; (800375c <Constant_Voltage+0x1f8>)
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <Constant_Voltage+0x1f8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a0f      	ldr	r2, [pc, #60]	; (8003760 <Constant_Voltage+0x1fc>)
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b0e      	ldr	r3, [pc, #56]	; (8003760 <Constant_Voltage+0x1fc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a09      	ldr	r2, [pc, #36]	; (8003750 <Constant_Voltage+0x1ec>)
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e191      	b.n	8003a52 <Constant_Voltage+0x4ee>
 800372e:	bf00      	nop
 8003730:	20000040 	.word	0x20000040
 8003734:	20000efc 	.word	0x20000efc
 8003738:	20000ef4 	.word	0x20000ef4
 800373c:	200010bc 	.word	0x200010bc
 8003740:	20001274 	.word	0x20001274
 8003744:	20001278 	.word	0x20001278
 8003748:	20000d40 	.word	0x20000d40
 800374c:	c2960000 	.word	0xc2960000
 8003750:	2000127c 	.word	0x2000127c
 8003754:	20000c84 	.word	0x20000c84
 8003758:	20000d48 	.word	0x20000d48
 800375c:	20000cbc 	.word	0x20000cbc
 8003760:	200012c8 	.word	0x200012c8
 8003764:	200006bc 	.word	0x200006bc
 8003768:	200012b4 	.word	0x200012b4
 800376c:	c2480000 	.word	0xc2480000
 8003770:	42960000 	.word	0x42960000
 8003774:	41c80000 	.word	0x41c80000
 8003778:	c1c80000 	.word	0xc1c80000
 800377c:	42480000 	.word	0x42480000
	}

	else if(e>=-25&&e<=0)
 8003780:	4b95      	ldr	r3, [pc, #596]	; (80039d8 <Constant_Voltage+0x474>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4995      	ldr	r1, [pc, #596]	; (80039dc <Constant_Voltage+0x478>)
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fcca 	bl	8001120 <__aeabi_fcmpge>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d045      	beq.n	800381e <Constant_Voltage+0x2ba>
 8003792:	4b91      	ldr	r3, [pc, #580]	; (80039d8 <Constant_Voltage+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f04f 0100 	mov.w	r1, #0
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fcb6 	bl	800110c <__aeabi_fcmple>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d03b      	beq.n	800381e <Constant_Voltage+0x2ba>
	{ eNS=(-(e+25)/25)+1;
 80037a6:	4b8c      	ldr	r3, [pc, #560]	; (80039d8 <Constant_Voltage+0x474>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	498d      	ldr	r1, [pc, #564]	; (80039e0 <Constant_Voltage+0x47c>)
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fd f9fd 	bl	8000bac <__addsf3>
 80037b2:	4603      	mov	r3, r0
 80037b4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80037b8:	4989      	ldr	r1, [pc, #548]	; (80039e0 <Constant_Voltage+0x47c>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fd fbb2 	bl	8000f24 <__aeabi_fdiv>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd f9f0 	bl	8000bac <__addsf3>
 80037cc:	4603      	mov	r3, r0
 80037ce:	461a      	mov	r2, r3
 80037d0:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <Constant_Voltage+0x480>)
 80037d2:	601a      	str	r2, [r3, #0]
	   eZ=(e/25)+1;
 80037d4:	4b80      	ldr	r3, [pc, #512]	; (80039d8 <Constant_Voltage+0x474>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4981      	ldr	r1, [pc, #516]	; (80039e0 <Constant_Voltage+0x47c>)
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fba2 	bl	8000f24 <__aeabi_fdiv>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fd f9e0 	bl	8000bac <__addsf3>
 80037ec:	4603      	mov	r3, r0
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b7d      	ldr	r3, [pc, #500]	; (80039e8 <Constant_Voltage+0x484>)
 80037f2:	601a      	str	r2, [r3, #0]
	   eNB=eNM=ePS=ePM=ePB=0;
 80037f4:	4b7d      	ldr	r3, [pc, #500]	; (80039ec <Constant_Voltage+0x488>)
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	4b7b      	ldr	r3, [pc, #492]	; (80039ec <Constant_Voltage+0x488>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7b      	ldr	r2, [pc, #492]	; (80039f0 <Constant_Voltage+0x48c>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <Constant_Voltage+0x48c>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a7a      	ldr	r2, [pc, #488]	; (80039f4 <Constant_Voltage+0x490>)
 800380a:	6013      	str	r3, [r2, #0]
 800380c:	4b79      	ldr	r3, [pc, #484]	; (80039f4 <Constant_Voltage+0x490>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a79      	ldr	r2, [pc, #484]	; (80039f8 <Constant_Voltage+0x494>)
 8003812:	6013      	str	r3, [r2, #0]
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <Constant_Voltage+0x494>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a78      	ldr	r2, [pc, #480]	; (80039fc <Constant_Voltage+0x498>)
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	e119      	b.n	8003a52 <Constant_Voltage+0x4ee>
	}

	else if(e>=0&&e<=25)
 800381e:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <Constant_Voltage+0x474>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f04f 0100 	mov.w	r1, #0
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd fc7a 	bl	8001120 <__aeabi_fcmpge>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d037      	beq.n	80038a2 <Constant_Voltage+0x33e>
 8003832:	4b69      	ldr	r3, [pc, #420]	; (80039d8 <Constant_Voltage+0x474>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	496a      	ldr	r1, [pc, #424]	; (80039e0 <Constant_Voltage+0x47c>)
 8003838:	4618      	mov	r0, r3
 800383a:	f7fd fc67 	bl	800110c <__aeabi_fcmple>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d02e      	beq.n	80038a2 <Constant_Voltage+0x33e>
	{ eZ=-(e/25)+1;
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <Constant_Voltage+0x474>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4965      	ldr	r1, [pc, #404]	; (80039e0 <Constant_Voltage+0x47c>)
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fb6a 	bl	8000f24 <__aeabi_fdiv>
 8003850:	4603      	mov	r3, r0
 8003852:	4619      	mov	r1, r3
 8003854:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003858:	f7fd f9a6 	bl	8000ba8 <__aeabi_fsub>
 800385c:	4603      	mov	r3, r0
 800385e:	461a      	mov	r2, r3
 8003860:	4b61      	ldr	r3, [pc, #388]	; (80039e8 <Constant_Voltage+0x484>)
 8003862:	601a      	str	r2, [r3, #0]
	   ePS=e/25;
 8003864:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <Constant_Voltage+0x474>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	495d      	ldr	r1, [pc, #372]	; (80039e0 <Constant_Voltage+0x47c>)
 800386a:	4618      	mov	r0, r3
 800386c:	f7fd fb5a 	bl	8000f24 <__aeabi_fdiv>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	4b5f      	ldr	r3, [pc, #380]	; (80039f4 <Constant_Voltage+0x490>)
 8003876:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=ePM=ePB=0;
 8003878:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <Constant_Voltage+0x488>)
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	4b5a      	ldr	r3, [pc, #360]	; (80039ec <Constant_Voltage+0x488>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <Constant_Voltage+0x48c>)
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <Constant_Voltage+0x48c>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a55      	ldr	r2, [pc, #340]	; (80039e4 <Constant_Voltage+0x480>)
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b54      	ldr	r3, [pc, #336]	; (80039e4 <Constant_Voltage+0x480>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a58      	ldr	r2, [pc, #352]	; (80039f8 <Constant_Voltage+0x494>)
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b57      	ldr	r3, [pc, #348]	; (80039f8 <Constant_Voltage+0x494>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a57      	ldr	r2, [pc, #348]	; (80039fc <Constant_Voltage+0x498>)
 800389e:	6013      	str	r3, [r2, #0]
 80038a0:	e0d7      	b.n	8003a52 <Constant_Voltage+0x4ee>
	}

	else if(e>=25&&e<=50)
 80038a2:	4b4d      	ldr	r3, [pc, #308]	; (80039d8 <Constant_Voltage+0x474>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	494e      	ldr	r1, [pc, #312]	; (80039e0 <Constant_Voltage+0x47c>)
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fd fc39 	bl	8001120 <__aeabi_fcmpge>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d043      	beq.n	800393c <Constant_Voltage+0x3d8>
 80038b4:	4b48      	ldr	r3, [pc, #288]	; (80039d8 <Constant_Voltage+0x474>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4951      	ldr	r1, [pc, #324]	; (8003a00 <Constant_Voltage+0x49c>)
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fd fc26 	bl	800110c <__aeabi_fcmple>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03a      	beq.n	800393c <Constant_Voltage+0x3d8>
	{ ePS=(-(e-25)/25)+1;
 80038c6:	4b44      	ldr	r3, [pc, #272]	; (80039d8 <Constant_Voltage+0x474>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4945      	ldr	r1, [pc, #276]	; (80039e0 <Constant_Voltage+0x47c>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd f96b 	bl	8000ba8 <__aeabi_fsub>
 80038d2:	4603      	mov	r3, r0
 80038d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80038d8:	4941      	ldr	r1, [pc, #260]	; (80039e0 <Constant_Voltage+0x47c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fd fb22 	bl	8000f24 <__aeabi_fdiv>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd f960 	bl	8000bac <__addsf3>
 80038ec:	4603      	mov	r3, r0
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b40      	ldr	r3, [pc, #256]	; (80039f4 <Constant_Voltage+0x490>)
 80038f2:	601a      	str	r2, [r3, #0]
	   ePM=(e-25)/25;
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <Constant_Voltage+0x474>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4939      	ldr	r1, [pc, #228]	; (80039e0 <Constant_Voltage+0x47c>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fd f954 	bl	8000ba8 <__aeabi_fsub>
 8003900:	4603      	mov	r3, r0
 8003902:	4937      	ldr	r1, [pc, #220]	; (80039e0 <Constant_Voltage+0x47c>)
 8003904:	4618      	mov	r0, r3
 8003906:	f7fd fb0d 	bl	8000f24 <__aeabi_fdiv>
 800390a:	4603      	mov	r3, r0
 800390c:	461a      	mov	r2, r3
 800390e:	4b38      	ldr	r3, [pc, #224]	; (80039f0 <Constant_Voltage+0x48c>)
 8003910:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePB=0;
 8003912:	4b36      	ldr	r3, [pc, #216]	; (80039ec <Constant_Voltage+0x488>)
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <Constant_Voltage+0x488>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <Constant_Voltage+0x484>)
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	4b31      	ldr	r3, [pc, #196]	; (80039e8 <Constant_Voltage+0x484>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2f      	ldr	r2, [pc, #188]	; (80039e4 <Constant_Voltage+0x480>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <Constant_Voltage+0x480>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a32      	ldr	r2, [pc, #200]	; (80039f8 <Constant_Voltage+0x494>)
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <Constant_Voltage+0x494>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <Constant_Voltage+0x498>)
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e08a      	b.n	8003a52 <Constant_Voltage+0x4ee>
	}

	else if(e>=50&&e<=75)
 800393c:	4b26      	ldr	r3, [pc, #152]	; (80039d8 <Constant_Voltage+0x474>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	492f      	ldr	r1, [pc, #188]	; (8003a00 <Constant_Voltage+0x49c>)
 8003942:	4618      	mov	r0, r3
 8003944:	f7fd fbec 	bl	8001120 <__aeabi_fcmpge>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d05c      	beq.n	8003a08 <Constant_Voltage+0x4a4>
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <Constant_Voltage+0x474>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	492c      	ldr	r1, [pc, #176]	; (8003a04 <Constant_Voltage+0x4a0>)
 8003954:	4618      	mov	r0, r3
 8003956:	f7fd fbd9 	bl	800110c <__aeabi_fcmple>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d053      	beq.n	8003a08 <Constant_Voltage+0x4a4>
	{ ePM=(-(e-50)/25)+1;
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <Constant_Voltage+0x474>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4926      	ldr	r1, [pc, #152]	; (8003a00 <Constant_Voltage+0x49c>)
 8003966:	4618      	mov	r0, r3
 8003968:	f7fd f91e 	bl	8000ba8 <__aeabi_fsub>
 800396c:	4603      	mov	r3, r0
 800396e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003972:	491b      	ldr	r1, [pc, #108]	; (80039e0 <Constant_Voltage+0x47c>)
 8003974:	4618      	mov	r0, r3
 8003976:	f7fd fad5 	bl	8000f24 <__aeabi_fdiv>
 800397a:	4603      	mov	r3, r0
 800397c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd f913 	bl	8000bac <__addsf3>
 8003986:	4603      	mov	r3, r0
 8003988:	461a      	mov	r2, r3
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <Constant_Voltage+0x48c>)
 800398c:	601a      	str	r2, [r3, #0]
	   ePB=(e-50)/25;
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <Constant_Voltage+0x474>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	491b      	ldr	r1, [pc, #108]	; (8003a00 <Constant_Voltage+0x49c>)
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd f907 	bl	8000ba8 <__aeabi_fsub>
 800399a:	4603      	mov	r3, r0
 800399c:	4910      	ldr	r1, [pc, #64]	; (80039e0 <Constant_Voltage+0x47c>)
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd fac0 	bl	8000f24 <__aeabi_fdiv>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b10      	ldr	r3, [pc, #64]	; (80039ec <Constant_Voltage+0x488>)
 80039aa:	601a      	str	r2, [r3, #0]
	   eNB=eNM=eNS=eZ=ePS=0;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <Constant_Voltage+0x490>)
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <Constant_Voltage+0x490>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	; (80039e8 <Constant_Voltage+0x484>)
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	4b0a      	ldr	r3, [pc, #40]	; (80039e8 <Constant_Voltage+0x484>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <Constant_Voltage+0x480>)
 80039c2:	6013      	str	r3, [r2, #0]
 80039c4:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <Constant_Voltage+0x480>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a0b      	ldr	r2, [pc, #44]	; (80039f8 <Constant_Voltage+0x494>)
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <Constant_Voltage+0x494>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <Constant_Voltage+0x498>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e03d      	b.n	8003a52 <Constant_Voltage+0x4ee>
 80039d6:	bf00      	nop
 80039d8:	20001274 	.word	0x20001274
 80039dc:	c1c80000 	.word	0xc1c80000
 80039e0:	41c80000 	.word	0x41c80000
 80039e4:	200006bc 	.word	0x200006bc
 80039e8:	200012c8 	.word	0x200012c8
 80039ec:	20000c84 	.word	0x20000c84
 80039f0:	20000d48 	.word	0x20000d48
 80039f4:	20000cbc 	.word	0x20000cbc
 80039f8:	200012b4 	.word	0x200012b4
 80039fc:	2000127c 	.word	0x2000127c
 8003a00:	42480000 	.word	0x42480000
 8003a04:	42960000 	.word	0x42960000
	}

	else if(e>=75)
 8003a08:	4b71      	ldr	r3, [pc, #452]	; (8003bd0 <Constant_Voltage+0x66c>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4971      	ldr	r1, [pc, #452]	; (8003bd4 <Constant_Voltage+0x670>)
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fd fb86 	bl	8001120 <__aeabi_fcmpge>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01b      	beq.n	8003a52 <Constant_Voltage+0x4ee>
	{ ePB=1; eNB=eNM=eNS=eZ=ePS=ePM=0;}
 8003a1a:	4b6f      	ldr	r3, [pc, #444]	; (8003bd8 <Constant_Voltage+0x674>)
 8003a1c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	4b6e      	ldr	r3, [pc, #440]	; (8003bdc <Constant_Voltage+0x678>)
 8003a24:	f04f 0200 	mov.w	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <Constant_Voltage+0x678>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a6c      	ldr	r2, [pc, #432]	; (8003be0 <Constant_Voltage+0x67c>)
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	4b6b      	ldr	r3, [pc, #428]	; (8003be0 <Constant_Voltage+0x67c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6b      	ldr	r2, [pc, #428]	; (8003be4 <Constant_Voltage+0x680>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b6a      	ldr	r3, [pc, #424]	; (8003be4 <Constant_Voltage+0x680>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6a      	ldr	r2, [pc, #424]	; (8003be8 <Constant_Voltage+0x684>)
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	4b69      	ldr	r3, [pc, #420]	; (8003be8 <Constant_Voltage+0x684>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a69      	ldr	r2, [pc, #420]	; (8003bec <Constant_Voltage+0x688>)
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b68      	ldr	r3, [pc, #416]	; (8003bec <Constant_Voltage+0x688>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a68      	ldr	r2, [pc, #416]	; (8003bf0 <Constant_Voltage+0x68c>)
 8003a50:	6013      	str	r3, [r2, #0]

	/////////////////////fuzzifikasi delta error //////////////
	if(d<=-30)
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <Constant_Voltage+0x690>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4968      	ldr	r1, [pc, #416]	; (8003bf8 <Constant_Voltage+0x694>)
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7fd fb57 	bl	800110c <__aeabi_fcmple>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d01b      	beq.n	8003a9c <Constant_Voltage+0x538>
	{ dNB=1;  dNM=dNS=dZ=dPS=dPM=dPB=0;}
 8003a64:	4b65      	ldr	r3, [pc, #404]	; (8003bfc <Constant_Voltage+0x698>)
 8003a66:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <Constant_Voltage+0x69c>)
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	4b62      	ldr	r3, [pc, #392]	; (8003c00 <Constant_Voltage+0x69c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a62      	ldr	r2, [pc, #392]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a61      	ldr	r2, [pc, #388]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b60      	ldr	r3, [pc, #384]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a60      	ldr	r2, [pc, #384]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	4b5f      	ldr	r3, [pc, #380]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5e      	ldr	r2, [pc, #376]	; (8003c14 <Constant_Voltage+0x6b0>)
 8003a9a:	6013      	str	r3, [r2, #0]

	if(d>=-30&&d<=-20)
 8003a9c:	4b55      	ldr	r3, [pc, #340]	; (8003bf4 <Constant_Voltage+0x690>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4955      	ldr	r1, [pc, #340]	; (8003bf8 <Constant_Voltage+0x694>)
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7fd fb3c 	bl	8001120 <__aeabi_fcmpge>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d043      	beq.n	8003b36 <Constant_Voltage+0x5d2>
 8003aae:	4b51      	ldr	r3, [pc, #324]	; (8003bf4 <Constant_Voltage+0x690>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4959      	ldr	r1, [pc, #356]	; (8003c18 <Constant_Voltage+0x6b4>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fb29 	bl	800110c <__aeabi_fcmple>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d03a      	beq.n	8003b36 <Constant_Voltage+0x5d2>
	{ dNB=(-(d+30)/10)+1;
 8003ac0:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <Constant_Voltage+0x690>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4955      	ldr	r1, [pc, #340]	; (8003c1c <Constant_Voltage+0x6b8>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd f870 	bl	8000bac <__addsf3>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003ad2:	4953      	ldr	r1, [pc, #332]	; (8003c20 <Constant_Voltage+0x6bc>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fd fa25 	bl	8000f24 <__aeabi_fdiv>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fd f863 	bl	8000bac <__addsf3>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <Constant_Voltage+0x698>)
 8003aec:	601a      	str	r2, [r3, #0]
	   dNM=(d+30)/10;
 8003aee:	4b41      	ldr	r3, [pc, #260]	; (8003bf4 <Constant_Voltage+0x690>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	494a      	ldr	r1, [pc, #296]	; (8003c1c <Constant_Voltage+0x6b8>)
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fd f859 	bl	8000bac <__addsf3>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4948      	ldr	r1, [pc, #288]	; (8003c20 <Constant_Voltage+0x6bc>)
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7fd fa10 	bl	8000f24 <__aeabi_fdiv>
 8003b04:	4603      	mov	r3, r0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b42      	ldr	r3, [pc, #264]	; (8003c14 <Constant_Voltage+0x6b0>)
 8003b0a:	601a      	str	r2, [r3, #0]
	   dNS=dZ=dPS=dPM=dPB=0;
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <Constant_Voltage+0x69c>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	4b3a      	ldr	r3, [pc, #232]	; (8003c00 <Constant_Voltage+0x69c>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a3a      	ldr	r2, [pc, #232]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b39      	ldr	r3, [pc, #228]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a39      	ldr	r2, [pc, #228]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a38      	ldr	r2, [pc, #224]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b37      	ldr	r3, [pc, #220]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a37      	ldr	r2, [pc, #220]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003b32:	6013      	str	r3, [r2, #0]
 8003b34:	e1e1      	b.n	8003efa <Constant_Voltage+0x996>
	}

	else if(d>=-20&&d<=-10)
 8003b36:	4b2f      	ldr	r3, [pc, #188]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4937      	ldr	r1, [pc, #220]	; (8003c18 <Constant_Voltage+0x6b4>)
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd faef 	bl	8001120 <__aeabi_fcmpge>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d071      	beq.n	8003c2c <Constant_Voltage+0x6c8>
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4935      	ldr	r1, [pc, #212]	; (8003c24 <Constant_Voltage+0x6c0>)
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd fadc 	bl	800110c <__aeabi_fcmple>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d068      	beq.n	8003c2c <Constant_Voltage+0x6c8>
	{ dNM=(-(d+20)/10)+1;
 8003b5a:	4b26      	ldr	r3, [pc, #152]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4932      	ldr	r1, [pc, #200]	; (8003c28 <Constant_Voltage+0x6c4>)
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fd f823 	bl	8000bac <__addsf3>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003b6c:	492c      	ldr	r1, [pc, #176]	; (8003c20 <Constant_Voltage+0x6bc>)
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd f9d8 	bl	8000f24 <__aeabi_fdiv>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f816 	bl	8000bac <__addsf3>
 8003b80:	4603      	mov	r3, r0
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b23      	ldr	r3, [pc, #140]	; (8003c14 <Constant_Voltage+0x6b0>)
 8003b86:	601a      	str	r2, [r3, #0]
	   dNS=(d+20)/10;
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <Constant_Voltage+0x690>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4926      	ldr	r1, [pc, #152]	; (8003c28 <Constant_Voltage+0x6c4>)
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fd f80c 	bl	8000bac <__addsf3>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4922      	ldr	r1, [pc, #136]	; (8003c20 <Constant_Voltage+0x6bc>)
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fd f9c3 	bl	8000f24 <__aeabi_fdiv>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <Constant_Voltage+0x6ac>)
 8003ba4:	601a      	str	r2, [r3, #0]
	   dNB=dZ=dPS=dPM=dPB=0;
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <Constant_Voltage+0x69c>)
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <Constant_Voltage+0x69c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	4b13      	ldr	r3, [pc, #76]	; (8003c04 <Constant_Voltage+0x6a0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <Constant_Voltage+0x6a4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <Constant_Voltage+0x6a8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <Constant_Voltage+0x698>)
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e194      	b.n	8003efa <Constant_Voltage+0x996>
 8003bd0:	20001274 	.word	0x20001274
 8003bd4:	42960000 	.word	0x42960000
 8003bd8:	20000c84 	.word	0x20000c84
 8003bdc:	20000d48 	.word	0x20000d48
 8003be0:	20000cbc 	.word	0x20000cbc
 8003be4:	200012c8 	.word	0x200012c8
 8003be8:	200006bc 	.word	0x200006bc
 8003bec:	200012b4 	.word	0x200012b4
 8003bf0:	2000127c 	.word	0x2000127c
 8003bf4:	20000d40 	.word	0x20000d40
 8003bf8:	c1f00000 	.word	0xc1f00000
 8003bfc:	200006f8 	.word	0x200006f8
 8003c00:	20000d50 	.word	0x20000d50
 8003c04:	20000704 	.word	0x20000704
 8003c08:	20001290 	.word	0x20001290
 8003c0c:	200012a8 	.word	0x200012a8
 8003c10:	20000918 	.word	0x20000918
 8003c14:	20000cb8 	.word	0x20000cb8
 8003c18:	c1a00000 	.word	0xc1a00000
 8003c1c:	41f00000 	.word	0x41f00000
 8003c20:	41200000 	.word	0x41200000
 8003c24:	c1200000 	.word	0xc1200000
 8003c28:	41a00000 	.word	0x41a00000
	}

	else if(d>=-10&&d<=0)
 8003c2c:	4b94      	ldr	r3, [pc, #592]	; (8003e80 <Constant_Voltage+0x91c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4994      	ldr	r1, [pc, #592]	; (8003e84 <Constant_Voltage+0x920>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd fa74 	bl	8001120 <__aeabi_fcmpge>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d044      	beq.n	8003cc8 <Constant_Voltage+0x764>
 8003c3e:	4b90      	ldr	r3, [pc, #576]	; (8003e80 <Constant_Voltage+0x91c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fd fa60 	bl	800110c <__aeabi_fcmple>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03a      	beq.n	8003cc8 <Constant_Voltage+0x764>
	{ dNS=(-(d+10)/10)+1;
 8003c52:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <Constant_Voltage+0x91c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	498c      	ldr	r1, [pc, #560]	; (8003e88 <Constant_Voltage+0x924>)
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc ffa7 	bl	8000bac <__addsf3>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003c64:	4988      	ldr	r1, [pc, #544]	; (8003e88 <Constant_Voltage+0x924>)
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fd f95c 	bl	8000f24 <__aeabi_fdiv>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc ff9a 	bl	8000bac <__addsf3>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b83      	ldr	r3, [pc, #524]	; (8003e8c <Constant_Voltage+0x928>)
 8003c7e:	601a      	str	r2, [r3, #0]
	   dZ=(d+10)/10;
 8003c80:	4b7f      	ldr	r3, [pc, #508]	; (8003e80 <Constant_Voltage+0x91c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4980      	ldr	r1, [pc, #512]	; (8003e88 <Constant_Voltage+0x924>)
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fc ff90 	bl	8000bac <__addsf3>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	497e      	ldr	r1, [pc, #504]	; (8003e88 <Constant_Voltage+0x924>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7fd f947 	bl	8000f24 <__aeabi_fdiv>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b7d      	ldr	r3, [pc, #500]	; (8003e90 <Constant_Voltage+0x92c>)
 8003c9c:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dPS=dPM=dPB=0;
 8003c9e:	4b7d      	ldr	r3, [pc, #500]	; (8003e94 <Constant_Voltage+0x930>)
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	4b7b      	ldr	r3, [pc, #492]	; (8003e94 <Constant_Voltage+0x930>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7b      	ldr	r2, [pc, #492]	; (8003e98 <Constant_Voltage+0x934>)
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b7a      	ldr	r3, [pc, #488]	; (8003e98 <Constant_Voltage+0x934>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a7a      	ldr	r2, [pc, #488]	; (8003e9c <Constant_Voltage+0x938>)
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <Constant_Voltage+0x938>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a79      	ldr	r2, [pc, #484]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	4b78      	ldr	r3, [pc, #480]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a78      	ldr	r2, [pc, #480]	; (8003ea4 <Constant_Voltage+0x940>)
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e118      	b.n	8003efa <Constant_Voltage+0x996>
	}

	else if(d>=0&&d<=10)
 8003cc8:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <Constant_Voltage+0x91c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f04f 0100 	mov.w	r1, #0
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd fa25 	bl	8001120 <__aeabi_fcmpge>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d037      	beq.n	8003d4c <Constant_Voltage+0x7e8>
 8003cdc:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <Constant_Voltage+0x91c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4969      	ldr	r1, [pc, #420]	; (8003e88 <Constant_Voltage+0x924>)
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fd fa12 	bl	800110c <__aeabi_fcmple>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d02e      	beq.n	8003d4c <Constant_Voltage+0x7e8>
	{ dZ=-(d/10)+1;
 8003cee:	4b64      	ldr	r3, [pc, #400]	; (8003e80 <Constant_Voltage+0x91c>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4965      	ldr	r1, [pc, #404]	; (8003e88 <Constant_Voltage+0x924>)
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd f915 	bl	8000f24 <__aeabi_fdiv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8003d02:	f7fc ff51 	bl	8000ba8 <__aeabi_fsub>
 8003d06:	4603      	mov	r3, r0
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <Constant_Voltage+0x92c>)
 8003d0c:	601a      	str	r2, [r3, #0]
	   dPS=d/10;
 8003d0e:	4b5c      	ldr	r3, [pc, #368]	; (8003e80 <Constant_Voltage+0x91c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	495d      	ldr	r1, [pc, #372]	; (8003e88 <Constant_Voltage+0x924>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7fd f905 	bl	8000f24 <__aeabi_fdiv>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4b5f      	ldr	r3, [pc, #380]	; (8003e9c <Constant_Voltage+0x938>)
 8003d20:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dPM=dPB=0;
 8003d22:	4b5c      	ldr	r3, [pc, #368]	; (8003e94 <Constant_Voltage+0x930>)
 8003d24:	f04f 0200 	mov.w	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	4b5a      	ldr	r3, [pc, #360]	; (8003e94 <Constant_Voltage+0x930>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5a      	ldr	r2, [pc, #360]	; (8003e98 <Constant_Voltage+0x934>)
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	4b59      	ldr	r3, [pc, #356]	; (8003e98 <Constant_Voltage+0x934>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a55      	ldr	r2, [pc, #340]	; (8003e8c <Constant_Voltage+0x928>)
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	4b54      	ldr	r3, [pc, #336]	; (8003e8c <Constant_Voltage+0x928>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a58      	ldr	r2, [pc, #352]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b57      	ldr	r3, [pc, #348]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a57      	ldr	r2, [pc, #348]	; (8003ea4 <Constant_Voltage+0x940>)
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e0d6      	b.n	8003efa <Constant_Voltage+0x996>
	}

	else if(d>=10&&d<=20)
 8003d4c:	4b4c      	ldr	r3, [pc, #304]	; (8003e80 <Constant_Voltage+0x91c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	494d      	ldr	r1, [pc, #308]	; (8003e88 <Constant_Voltage+0x924>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fd f9e4 	bl	8001120 <__aeabi_fcmpge>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d043      	beq.n	8003de6 <Constant_Voltage+0x882>
 8003d5e:	4b48      	ldr	r3, [pc, #288]	; (8003e80 <Constant_Voltage+0x91c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4951      	ldr	r1, [pc, #324]	; (8003ea8 <Constant_Voltage+0x944>)
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7fd f9d1 	bl	800110c <__aeabi_fcmple>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03a      	beq.n	8003de6 <Constant_Voltage+0x882>
	{ dPS=(-(d-10)/10)+1;
 8003d70:	4b43      	ldr	r3, [pc, #268]	; (8003e80 <Constant_Voltage+0x91c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4944      	ldr	r1, [pc, #272]	; (8003e88 <Constant_Voltage+0x924>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fc ff16 	bl	8000ba8 <__aeabi_fsub>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003d82:	4941      	ldr	r1, [pc, #260]	; (8003e88 <Constant_Voltage+0x924>)
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fd f8cd 	bl	8000f24 <__aeabi_fdiv>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7fc ff0b 	bl	8000bac <__addsf3>
 8003d96:	4603      	mov	r3, r0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <Constant_Voltage+0x938>)
 8003d9c:	601a      	str	r2, [r3, #0]
	   dPM=(d-10)/10;
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <Constant_Voltage+0x91c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4939      	ldr	r1, [pc, #228]	; (8003e88 <Constant_Voltage+0x924>)
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7fc feff 	bl	8000ba8 <__aeabi_fsub>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4936      	ldr	r1, [pc, #216]	; (8003e88 <Constant_Voltage+0x924>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fd f8b8 	bl	8000f24 <__aeabi_fdiv>
 8003db4:	4603      	mov	r3, r0
 8003db6:	461a      	mov	r2, r3
 8003db8:	4b37      	ldr	r3, [pc, #220]	; (8003e98 <Constant_Voltage+0x934>)
 8003dba:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPB=0;
 8003dbc:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <Constant_Voltage+0x930>)
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	4b33      	ldr	r3, [pc, #204]	; (8003e94 <Constant_Voltage+0x930>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a31      	ldr	r2, [pc, #196]	; (8003e90 <Constant_Voltage+0x92c>)
 8003dca:	6013      	str	r3, [r2, #0]
 8003dcc:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <Constant_Voltage+0x92c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a2e      	ldr	r2, [pc, #184]	; (8003e8c <Constant_Voltage+0x928>)
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b2d      	ldr	r3, [pc, #180]	; (8003e8c <Constant_Voltage+0x928>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003dda:	6013      	str	r3, [r2, #0]
 8003ddc:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a30      	ldr	r2, [pc, #192]	; (8003ea4 <Constant_Voltage+0x940>)
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e089      	b.n	8003efa <Constant_Voltage+0x996>
	}

	else if(d>=20&&d<=30)
 8003de6:	4b26      	ldr	r3, [pc, #152]	; (8003e80 <Constant_Voltage+0x91c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	492f      	ldr	r1, [pc, #188]	; (8003ea8 <Constant_Voltage+0x944>)
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd f997 	bl	8001120 <__aeabi_fcmpge>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d05b      	beq.n	8003eb0 <Constant_Voltage+0x94c>
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <Constant_Voltage+0x91c>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	492b      	ldr	r1, [pc, #172]	; (8003eac <Constant_Voltage+0x948>)
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7fd f984 	bl	800110c <__aeabi_fcmple>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d052      	beq.n	8003eb0 <Constant_Voltage+0x94c>
	{ dPM=(-(d-20)/10)+1;
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <Constant_Voltage+0x91c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4926      	ldr	r1, [pc, #152]	; (8003ea8 <Constant_Voltage+0x944>)
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fc fec9 	bl	8000ba8 <__aeabi_fsub>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003e1c:	491a      	ldr	r1, [pc, #104]	; (8003e88 <Constant_Voltage+0x924>)
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f880 	bl	8000f24 <__aeabi_fdiv>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fc febe 	bl	8000bac <__addsf3>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	4b18      	ldr	r3, [pc, #96]	; (8003e98 <Constant_Voltage+0x934>)
 8003e36:	601a      	str	r2, [r3, #0]
	   dPB=(d-20)/10;
 8003e38:	4b11      	ldr	r3, [pc, #68]	; (8003e80 <Constant_Voltage+0x91c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	491a      	ldr	r1, [pc, #104]	; (8003ea8 <Constant_Voltage+0x944>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc feb2 	bl	8000ba8 <__aeabi_fsub>
 8003e44:	4603      	mov	r3, r0
 8003e46:	4910      	ldr	r1, [pc, #64]	; (8003e88 <Constant_Voltage+0x924>)
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd f86b 	bl	8000f24 <__aeabi_fdiv>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <Constant_Voltage+0x930>)
 8003e54:	601a      	str	r2, [r3, #0]
	   dNB=dNM=dNS=dZ=dPS=0;
 8003e56:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <Constant_Voltage+0x938>)
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <Constant_Voltage+0x938>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <Constant_Voltage+0x92c>)
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b0a      	ldr	r3, [pc, #40]	; (8003e90 <Constant_Voltage+0x92c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <Constant_Voltage+0x928>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4b07      	ldr	r3, [pc, #28]	; (8003e8c <Constant_Voltage+0x928>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a0b      	ldr	r2, [pc, #44]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <Constant_Voltage+0x93c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ea4 <Constant_Voltage+0x940>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e03c      	b.n	8003efa <Constant_Voltage+0x996>
 8003e80:	20000d40 	.word	0x20000d40
 8003e84:	c1200000 	.word	0xc1200000
 8003e88:	41200000 	.word	0x41200000
 8003e8c:	20000918 	.word	0x20000918
 8003e90:	200012a8 	.word	0x200012a8
 8003e94:	20000d50 	.word	0x20000d50
 8003e98:	20000704 	.word	0x20000704
 8003e9c:	20001290 	.word	0x20001290
 8003ea0:	20000cb8 	.word	0x20000cb8
 8003ea4:	200006f8 	.word	0x200006f8
 8003ea8:	41a00000 	.word	0x41a00000
 8003eac:	41f00000 	.word	0x41f00000
	}

	else if(d>=30)
 8003eb0:	4b8e      	ldr	r3, [pc, #568]	; (80040ec <Constant_Voltage+0xb88>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	498e      	ldr	r1, [pc, #568]	; (80040f0 <Constant_Voltage+0xb8c>)
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fd f932 	bl	8001120 <__aeabi_fcmpge>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01b      	beq.n	8003efa <Constant_Voltage+0x996>
	{ dPB=1; dNB=dNM=dNS=dZ=dPS=dPM=0;}
 8003ec2:	4b8c      	ldr	r3, [pc, #560]	; (80040f4 <Constant_Voltage+0xb90>)
 8003ec4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <Constant_Voltage+0xb94>)
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	4b89      	ldr	r3, [pc, #548]	; (80040f8 <Constant_Voltage+0xb94>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a89      	ldr	r2, [pc, #548]	; (80040fc <Constant_Voltage+0xb98>)
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b88      	ldr	r3, [pc, #544]	; (80040fc <Constant_Voltage+0xb98>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a88      	ldr	r2, [pc, #544]	; (8004100 <Constant_Voltage+0xb9c>)
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b87      	ldr	r3, [pc, #540]	; (8004100 <Constant_Voltage+0xb9c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a87      	ldr	r2, [pc, #540]	; (8004104 <Constant_Voltage+0xba0>)
 8003ee8:	6013      	str	r3, [r2, #0]
 8003eea:	4b86      	ldr	r3, [pc, #536]	; (8004104 <Constant_Voltage+0xba0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a86      	ldr	r2, [pc, #536]	; (8004108 <Constant_Voltage+0xba4>)
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	4b85      	ldr	r3, [pc, #532]	; (8004108 <Constant_Voltage+0xba4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a85      	ldr	r2, [pc, #532]	; (800410c <Constant_Voltage+0xba8>)
 8003ef8:	6013      	str	r3, [r2, #0]

	/////////////////////inferensi///////////////////////

	r1=dPB; if(eNB<dPB) r1=eNB;		//max(dPB,eNB);
 8003efa:	4b7e      	ldr	r3, [pc, #504]	; (80040f4 <Constant_Voltage+0xb90>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a84      	ldr	r2, [pc, #528]	; (8004110 <Constant_Voltage+0xbac>)
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	4b84      	ldr	r3, [pc, #528]	; (8004114 <Constant_Voltage+0xbb0>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	f7fd f8f3 	bl	80010f8 <__aeabi_fcmplt>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <Constant_Voltage+0x9bc>
 8003f18:	4b7e      	ldr	r3, [pc, #504]	; (8004114 <Constant_Voltage+0xbb0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a7c      	ldr	r2, [pc, #496]	; (8004110 <Constant_Voltage+0xbac>)
 8003f1e:	6013      	str	r3, [r2, #0]
	r2=dPB; if(eNM<dPB) r2=eNM;
 8003f20:	4b74      	ldr	r3, [pc, #464]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7c      	ldr	r2, [pc, #496]	; (8004118 <Constant_Voltage+0xbb4>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	4b7c      	ldr	r3, [pc, #496]	; (800411c <Constant_Voltage+0xbb8>)
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	4b71      	ldr	r3, [pc, #452]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f7fd f8e0 	bl	80010f8 <__aeabi_fcmplt>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <Constant_Voltage+0x9e2>
 8003f3e:	4b77      	ldr	r3, [pc, #476]	; (800411c <Constant_Voltage+0xbb8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a75      	ldr	r2, [pc, #468]	; (8004118 <Constant_Voltage+0xbb4>)
 8003f44:	6013      	str	r3, [r2, #0]
	r3=dPB; if(eNS<dPB) r3=eNS;
 8003f46:	4b6b      	ldr	r3, [pc, #428]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	; (8004120 <Constant_Voltage+0xbbc>)
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b75      	ldr	r3, [pc, #468]	; (8004124 <Constant_Voltage+0xbc0>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fd f8cd 	bl	80010f8 <__aeabi_fcmplt>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <Constant_Voltage+0xa08>
 8003f64:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <Constant_Voltage+0xbc0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a6d      	ldr	r2, [pc, #436]	; (8004120 <Constant_Voltage+0xbbc>)
 8003f6a:	6013      	str	r3, [r2, #0]
	r4=dPB; if(eZ<dPB) r4=eZ;
 8003f6c:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a6d      	ldr	r2, [pc, #436]	; (8004128 <Constant_Voltage+0xbc4>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	4b6d      	ldr	r3, [pc, #436]	; (800412c <Constant_Voltage+0xbc8>)
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	f7fd f8ba 	bl	80010f8 <__aeabi_fcmplt>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <Constant_Voltage+0xa2e>
 8003f8a:	4b68      	ldr	r3, [pc, #416]	; (800412c <Constant_Voltage+0xbc8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a66      	ldr	r2, [pc, #408]	; (8004128 <Constant_Voltage+0xbc4>)
 8003f90:	6013      	str	r3, [r2, #0]
	r5=dPB; if(ePS<dPB) r5=ePS;
 8003f92:	4b58      	ldr	r3, [pc, #352]	; (80040f4 <Constant_Voltage+0xb90>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a66      	ldr	r2, [pc, #408]	; (8004130 <Constant_Voltage+0xbcc>)
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	4b66      	ldr	r3, [pc, #408]	; (8004134 <Constant_Voltage+0xbd0>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b55      	ldr	r3, [pc, #340]	; (80040f4 <Constant_Voltage+0xb90>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4610      	mov	r0, r2
 8003fa6:	f7fd f8a7 	bl	80010f8 <__aeabi_fcmplt>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <Constant_Voltage+0xa54>
 8003fb0:	4b60      	ldr	r3, [pc, #384]	; (8004134 <Constant_Voltage+0xbd0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5e      	ldr	r2, [pc, #376]	; (8004130 <Constant_Voltage+0xbcc>)
 8003fb6:	6013      	str	r3, [r2, #0]
	r6=dPB; if(ePM<dPB) r6=ePM;
 8003fb8:	4b4e      	ldr	r3, [pc, #312]	; (80040f4 <Constant_Voltage+0xb90>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <Constant_Voltage+0xbd4>)
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b5e      	ldr	r3, [pc, #376]	; (800413c <Constant_Voltage+0xbd8>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	4b4b      	ldr	r3, [pc, #300]	; (80040f4 <Constant_Voltage+0xb90>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f7fd f894 	bl	80010f8 <__aeabi_fcmplt>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <Constant_Voltage+0xa7a>
 8003fd6:	4b59      	ldr	r3, [pc, #356]	; (800413c <Constant_Voltage+0xbd8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a57      	ldr	r2, [pc, #348]	; (8004138 <Constant_Voltage+0xbd4>)
 8003fdc:	6013      	str	r3, [r2, #0]
	r7=dPB; if(ePB<dPB) r7=ePB;
 8003fde:	4b45      	ldr	r3, [pc, #276]	; (80040f4 <Constant_Voltage+0xb90>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a57      	ldr	r2, [pc, #348]	; (8004140 <Constant_Voltage+0xbdc>)
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4b57      	ldr	r3, [pc, #348]	; (8004144 <Constant_Voltage+0xbe0>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <Constant_Voltage+0xb90>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7fd f881 	bl	80010f8 <__aeabi_fcmplt>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <Constant_Voltage+0xaa0>
 8003ffc:	4b51      	ldr	r3, [pc, #324]	; (8004144 <Constant_Voltage+0xbe0>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <Constant_Voltage+0xbdc>)
 8004002:	6013      	str	r3, [r2, #0]


	r8=dPM; if(eNB<dPM) r8=eNB;		//r8=max(dPM,eNB);
 8004004:	4b3c      	ldr	r3, [pc, #240]	; (80040f8 <Constant_Voltage+0xb94>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a4f      	ldr	r2, [pc, #316]	; (8004148 <Constant_Voltage+0xbe4>)
 800400a:	6013      	str	r3, [r2, #0]
 800400c:	4b41      	ldr	r3, [pc, #260]	; (8004114 <Constant_Voltage+0xbb0>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <Constant_Voltage+0xb94>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fd f86e 	bl	80010f8 <__aeabi_fcmplt>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <Constant_Voltage+0xac6>
 8004022:	4b3c      	ldr	r3, [pc, #240]	; (8004114 <Constant_Voltage+0xbb0>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a48      	ldr	r2, [pc, #288]	; (8004148 <Constant_Voltage+0xbe4>)
 8004028:	6013      	str	r3, [r2, #0]
	r9=dPM; if(eNM<dPM) r9=eNM;		//r9=max(dPM,eNM);
 800402a:	4b33      	ldr	r3, [pc, #204]	; (80040f8 <Constant_Voltage+0xb94>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a47      	ldr	r2, [pc, #284]	; (800414c <Constant_Voltage+0xbe8>)
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b3a      	ldr	r3, [pc, #232]	; (800411c <Constant_Voltage+0xbb8>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b30      	ldr	r3, [pc, #192]	; (80040f8 <Constant_Voltage+0xb94>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4619      	mov	r1, r3
 800403c:	4610      	mov	r0, r2
 800403e:	f7fd f85b 	bl	80010f8 <__aeabi_fcmplt>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <Constant_Voltage+0xaec>
 8004048:	4b34      	ldr	r3, [pc, #208]	; (800411c <Constant_Voltage+0xbb8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a3f      	ldr	r2, [pc, #252]	; (800414c <Constant_Voltage+0xbe8>)
 800404e:	6013      	str	r3, [r2, #0]
	r10=dPM; if(eNS<dPM) r10=eNS;	//r10=max(dPM,eNS);
 8004050:	4b29      	ldr	r3, [pc, #164]	; (80040f8 <Constant_Voltage+0xb94>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3e      	ldr	r2, [pc, #248]	; (8004150 <Constant_Voltage+0xbec>)
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b32      	ldr	r3, [pc, #200]	; (8004124 <Constant_Voltage+0xbc0>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b26      	ldr	r3, [pc, #152]	; (80040f8 <Constant_Voltage+0xb94>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	4610      	mov	r0, r2
 8004064:	f7fd f848 	bl	80010f8 <__aeabi_fcmplt>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <Constant_Voltage+0xb12>
 800406e:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <Constant_Voltage+0xbc0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a37      	ldr	r2, [pc, #220]	; (8004150 <Constant_Voltage+0xbec>)
 8004074:	6013      	str	r3, [r2, #0]
	r11=dPM; if(eZ<dPM) r11=eZ;		//r11=max(dPM,eZ);
 8004076:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <Constant_Voltage+0xb94>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a36      	ldr	r2, [pc, #216]	; (8004154 <Constant_Voltage+0xbf0>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <Constant_Voltage+0xbc8>)
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <Constant_Voltage+0xb94>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fd f835 	bl	80010f8 <__aeabi_fcmplt>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <Constant_Voltage+0xb38>
 8004094:	4b25      	ldr	r3, [pc, #148]	; (800412c <Constant_Voltage+0xbc8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a2e      	ldr	r2, [pc, #184]	; (8004154 <Constant_Voltage+0xbf0>)
 800409a:	6013      	str	r3, [r2, #0]
	r12=dPM; if(ePS<dPM) r12=ePS;	//r12=max(dPM,ePS);
 800409c:	4b16      	ldr	r3, [pc, #88]	; (80040f8 <Constant_Voltage+0xb94>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a2d      	ldr	r2, [pc, #180]	; (8004158 <Constant_Voltage+0xbf4>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	4b23      	ldr	r3, [pc, #140]	; (8004134 <Constant_Voltage+0xbd0>)
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <Constant_Voltage+0xb94>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	4610      	mov	r0, r2
 80040b0:	f7fd f822 	bl	80010f8 <__aeabi_fcmplt>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <Constant_Voltage+0xb5e>
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <Constant_Voltage+0xbd0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a26      	ldr	r2, [pc, #152]	; (8004158 <Constant_Voltage+0xbf4>)
 80040c0:	6013      	str	r3, [r2, #0]
	r13=dPM; if(ePM<dPM) r13=ePM;	//r13=max(dPM,ePM);
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <Constant_Voltage+0xb94>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a25      	ldr	r2, [pc, #148]	; (800415c <Constant_Voltage+0xbf8>)
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b1c      	ldr	r3, [pc, #112]	; (800413c <Constant_Voltage+0xbd8>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <Constant_Voltage+0xb94>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f7fd f80f 	bl	80010f8 <__aeabi_fcmplt>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d03f      	beq.n	8004160 <Constant_Voltage+0xbfc>
 80040e0:	4b16      	ldr	r3, [pc, #88]	; (800413c <Constant_Voltage+0xbd8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1d      	ldr	r2, [pc, #116]	; (800415c <Constant_Voltage+0xbf8>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	e03a      	b.n	8004160 <Constant_Voltage+0xbfc>
 80040ea:	bf00      	nop
 80040ec:	20000d40 	.word	0x20000d40
 80040f0:	41f00000 	.word	0x41f00000
 80040f4:	20000d50 	.word	0x20000d50
 80040f8:	20000704 	.word	0x20000704
 80040fc:	20001290 	.word	0x20001290
 8004100:	200012a8 	.word	0x200012a8
 8004104:	20000918 	.word	0x20000918
 8004108:	20000cb8 	.word	0x20000cb8
 800410c:	200006f8 	.word	0x200006f8
 8004110:	200012cc 	.word	0x200012cc
 8004114:	2000127c 	.word	0x2000127c
 8004118:	20000f08 	.word	0x20000f08
 800411c:	200012b4 	.word	0x200012b4
 8004120:	200006e4 	.word	0x200006e4
 8004124:	200006bc 	.word	0x200006bc
 8004128:	200008e8 	.word	0x200008e8
 800412c:	200012c8 	.word	0x200012c8
 8004130:	200012bc 	.word	0x200012bc
 8004134:	20000cbc 	.word	0x20000cbc
 8004138:	200008d4 	.word	0x200008d4
 800413c:	20000d48 	.word	0x20000d48
 8004140:	20000d2c 	.word	0x20000d2c
 8004144:	20000c84 	.word	0x20000c84
 8004148:	20000c94 	.word	0x20000c94
 800414c:	20000718 	.word	0x20000718
 8004150:	20000c78 	.word	0x20000c78
 8004154:	20000f00 	.word	0x20000f00
 8004158:	2000129c 	.word	0x2000129c
 800415c:	200012d0 	.word	0x200012d0
	r14=dPM; if(ePB<dPM) r14=ePB;		//r14=max(dPM,ePB);
 8004160:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <Constant_Voltage+0xe34>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a8d      	ldr	r2, [pc, #564]	; (800439c <Constant_Voltage+0xe38>)
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	4b8d      	ldr	r3, [pc, #564]	; (80043a0 <Constant_Voltage+0xe3c>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b8a      	ldr	r3, [pc, #552]	; (8004398 <Constant_Voltage+0xe34>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4619      	mov	r1, r3
 8004172:	4610      	mov	r0, r2
 8004174:	f7fc ffc0 	bl	80010f8 <__aeabi_fcmplt>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <Constant_Voltage+0xc22>
 800417e:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a86      	ldr	r2, [pc, #536]	; (800439c <Constant_Voltage+0xe38>)
 8004184:	6013      	str	r3, [r2, #0]

	r15=dPS; if(eNB<dPS) r15=eNB;	//r15=max(dPS,eNB);
 8004186:	4b87      	ldr	r3, [pc, #540]	; (80043a4 <Constant_Voltage+0xe40>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a87      	ldr	r2, [pc, #540]	; (80043a8 <Constant_Voltage+0xe44>)
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b87      	ldr	r3, [pc, #540]	; (80043ac <Constant_Voltage+0xe48>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	4b84      	ldr	r3, [pc, #528]	; (80043a4 <Constant_Voltage+0xe40>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f7fc ffad 	bl	80010f8 <__aeabi_fcmplt>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <Constant_Voltage+0xc48>
 80041a4:	4b81      	ldr	r3, [pc, #516]	; (80043ac <Constant_Voltage+0xe48>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a7f      	ldr	r2, [pc, #508]	; (80043a8 <Constant_Voltage+0xe44>)
 80041aa:	6013      	str	r3, [r2, #0]
	r16=dPS; if(eNM<dPS) r16=eNM;	//r16=max(dPS,eNM);
 80041ac:	4b7d      	ldr	r3, [pc, #500]	; (80043a4 <Constant_Voltage+0xe40>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a7f      	ldr	r2, [pc, #508]	; (80043b0 <Constant_Voltage+0xe4c>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <Constant_Voltage+0xe50>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4b7a      	ldr	r3, [pc, #488]	; (80043a4 <Constant_Voltage+0xe40>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	4610      	mov	r0, r2
 80041c0:	f7fc ff9a 	bl	80010f8 <__aeabi_fcmplt>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <Constant_Voltage+0xc6e>
 80041ca:	4b7a      	ldr	r3, [pc, #488]	; (80043b4 <Constant_Voltage+0xe50>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a78      	ldr	r2, [pc, #480]	; (80043b0 <Constant_Voltage+0xe4c>)
 80041d0:	6013      	str	r3, [r2, #0]
	r17=dPS; if(eNS<dPS) r17=eNS;	//r17=max(dPS,eNS);
 80041d2:	4b74      	ldr	r3, [pc, #464]	; (80043a4 <Constant_Voltage+0xe40>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a78      	ldr	r2, [pc, #480]	; (80043b8 <Constant_Voltage+0xe54>)
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b78      	ldr	r3, [pc, #480]	; (80043bc <Constant_Voltage+0xe58>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	4b71      	ldr	r3, [pc, #452]	; (80043a4 <Constant_Voltage+0xe40>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4619      	mov	r1, r3
 80041e4:	4610      	mov	r0, r2
 80041e6:	f7fc ff87 	bl	80010f8 <__aeabi_fcmplt>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <Constant_Voltage+0xc94>
 80041f0:	4b72      	ldr	r3, [pc, #456]	; (80043bc <Constant_Voltage+0xe58>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a70      	ldr	r2, [pc, #448]	; (80043b8 <Constant_Voltage+0xe54>)
 80041f6:	6013      	str	r3, [r2, #0]
	r18=dPS; if(eZ<dPS) r18=eZ;		//r18=max(dPS,eZ);
 80041f8:	4b6a      	ldr	r3, [pc, #424]	; (80043a4 <Constant_Voltage+0xe40>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a70      	ldr	r2, [pc, #448]	; (80043c0 <Constant_Voltage+0xe5c>)
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <Constant_Voltage+0xe60>)
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b67      	ldr	r3, [pc, #412]	; (80043a4 <Constant_Voltage+0xe40>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4619      	mov	r1, r3
 800420a:	4610      	mov	r0, r2
 800420c:	f7fc ff74 	bl	80010f8 <__aeabi_fcmplt>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <Constant_Voltage+0xcba>
 8004216:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <Constant_Voltage+0xe60>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a69      	ldr	r2, [pc, #420]	; (80043c0 <Constant_Voltage+0xe5c>)
 800421c:	6013      	str	r3, [r2, #0]
	r19=dPS; if(ePS<dPS) r19=ePS;	//r19=max(dPS,ePS);
 800421e:	4b61      	ldr	r3, [pc, #388]	; (80043a4 <Constant_Voltage+0xe40>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a69      	ldr	r2, [pc, #420]	; (80043c8 <Constant_Voltage+0xe64>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b69      	ldr	r3, [pc, #420]	; (80043cc <Constant_Voltage+0xe68>)
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b5e      	ldr	r3, [pc, #376]	; (80043a4 <Constant_Voltage+0xe40>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f7fc ff61 	bl	80010f8 <__aeabi_fcmplt>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <Constant_Voltage+0xce0>
 800423c:	4b63      	ldr	r3, [pc, #396]	; (80043cc <Constant_Voltage+0xe68>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a61      	ldr	r2, [pc, #388]	; (80043c8 <Constant_Voltage+0xe64>)
 8004242:	6013      	str	r3, [r2, #0]
	r20=dPS; if(ePM<dPS) r20=ePM;	//r20=max(dPS,ePM);
 8004244:	4b57      	ldr	r3, [pc, #348]	; (80043a4 <Constant_Voltage+0xe40>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a61      	ldr	r2, [pc, #388]	; (80043d0 <Constant_Voltage+0xe6c>)
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b61      	ldr	r3, [pc, #388]	; (80043d4 <Constant_Voltage+0xe70>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b54      	ldr	r3, [pc, #336]	; (80043a4 <Constant_Voltage+0xe40>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4619      	mov	r1, r3
 8004256:	4610      	mov	r0, r2
 8004258:	f7fc ff4e 	bl	80010f8 <__aeabi_fcmplt>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <Constant_Voltage+0xd06>
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <Constant_Voltage+0xe70>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <Constant_Voltage+0xe6c>)
 8004268:	6013      	str	r3, [r2, #0]
	r21=dPS; if(ePB<dPS) r21=ePB;	//r21=max(dPS,ePB);
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <Constant_Voltage+0xe40>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a5a      	ldr	r2, [pc, #360]	; (80043d8 <Constant_Voltage+0xe74>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	4b4b      	ldr	r3, [pc, #300]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b4b      	ldr	r3, [pc, #300]	; (80043a4 <Constant_Voltage+0xe40>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f7fc ff3b 	bl	80010f8 <__aeabi_fcmplt>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <Constant_Voltage+0xd2c>
 8004288:	4b45      	ldr	r3, [pc, #276]	; (80043a0 <Constant_Voltage+0xe3c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a52      	ldr	r2, [pc, #328]	; (80043d8 <Constant_Voltage+0xe74>)
 800428e:	6013      	str	r3, [r2, #0]

	r22=dZ; if(eNB<dZ) r22=eNB;		//r22=max(dZ,eNB);
 8004290:	4b52      	ldr	r3, [pc, #328]	; (80043dc <Constant_Voltage+0xe78>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a52      	ldr	r2, [pc, #328]	; (80043e0 <Constant_Voltage+0xe7c>)
 8004296:	6013      	str	r3, [r2, #0]
 8004298:	4b44      	ldr	r3, [pc, #272]	; (80043ac <Constant_Voltage+0xe48>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b4f      	ldr	r3, [pc, #316]	; (80043dc <Constant_Voltage+0xe78>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4619      	mov	r1, r3
 80042a2:	4610      	mov	r0, r2
 80042a4:	f7fc ff28 	bl	80010f8 <__aeabi_fcmplt>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d003      	beq.n	80042b6 <Constant_Voltage+0xd52>
 80042ae:	4b3f      	ldr	r3, [pc, #252]	; (80043ac <Constant_Voltage+0xe48>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a4b      	ldr	r2, [pc, #300]	; (80043e0 <Constant_Voltage+0xe7c>)
 80042b4:	6013      	str	r3, [r2, #0]
	r23=dZ; if(eNM<dZ) r23=eNM;		//r23=max(dZ,eNM);
 80042b6:	4b49      	ldr	r3, [pc, #292]	; (80043dc <Constant_Voltage+0xe78>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a4a      	ldr	r2, [pc, #296]	; (80043e4 <Constant_Voltage+0xe80>)
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <Constant_Voltage+0xe50>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b46      	ldr	r3, [pc, #280]	; (80043dc <Constant_Voltage+0xe78>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fc ff15 	bl	80010f8 <__aeabi_fcmplt>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <Constant_Voltage+0xd78>
 80042d4:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <Constant_Voltage+0xe50>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a42      	ldr	r2, [pc, #264]	; (80043e4 <Constant_Voltage+0xe80>)
 80042da:	6013      	str	r3, [r2, #0]
	r24=dZ; if(eNS<dZ) r24=eNS;		//r24=max(dZ,eNS);
 80042dc:	4b3f      	ldr	r3, [pc, #252]	; (80043dc <Constant_Voltage+0xe78>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a41      	ldr	r2, [pc, #260]	; (80043e8 <Constant_Voltage+0xe84>)
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b35      	ldr	r3, [pc, #212]	; (80043bc <Constant_Voltage+0xe58>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b3c      	ldr	r3, [pc, #240]	; (80043dc <Constant_Voltage+0xe78>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4619      	mov	r1, r3
 80042ee:	4610      	mov	r0, r2
 80042f0:	f7fc ff02 	bl	80010f8 <__aeabi_fcmplt>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <Constant_Voltage+0xd9e>
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <Constant_Voltage+0xe58>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a3a      	ldr	r2, [pc, #232]	; (80043e8 <Constant_Voltage+0xe84>)
 8004300:	6013      	str	r3, [r2, #0]
	r25=dZ; if(eZ<dZ) r25=eZ;		//r25=max(dZ,eZ);
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <Constant_Voltage+0xe78>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a39      	ldr	r2, [pc, #228]	; (80043ec <Constant_Voltage+0xe88>)
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <Constant_Voltage+0xe60>)
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	4b33      	ldr	r3, [pc, #204]	; (80043dc <Constant_Voltage+0xe78>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fc feef 	bl	80010f8 <__aeabi_fcmplt>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <Constant_Voltage+0xdc4>
 8004320:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <Constant_Voltage+0xe60>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a31      	ldr	r2, [pc, #196]	; (80043ec <Constant_Voltage+0xe88>)
 8004326:	6013      	str	r3, [r2, #0]
	r26=dZ; if(ePS<dZ) r26=ePS;		//r26=max(dZ,ePS);
 8004328:	4b2c      	ldr	r3, [pc, #176]	; (80043dc <Constant_Voltage+0xe78>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a30      	ldr	r2, [pc, #192]	; (80043f0 <Constant_Voltage+0xe8c>)
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <Constant_Voltage+0xe68>)
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b29      	ldr	r3, [pc, #164]	; (80043dc <Constant_Voltage+0xe78>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f7fc fedc 	bl	80010f8 <__aeabi_fcmplt>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <Constant_Voltage+0xdea>
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <Constant_Voltage+0xe68>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a29      	ldr	r2, [pc, #164]	; (80043f0 <Constant_Voltage+0xe8c>)
 800434c:	6013      	str	r3, [r2, #0]
	r27=dZ; if(ePM<dZ) r27=ePM;		//r27=max(dZ,ePM);
 800434e:	4b23      	ldr	r3, [pc, #140]	; (80043dc <Constant_Voltage+0xe78>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a28      	ldr	r2, [pc, #160]	; (80043f4 <Constant_Voltage+0xe90>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <Constant_Voltage+0xe70>)
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b20      	ldr	r3, [pc, #128]	; (80043dc <Constant_Voltage+0xe78>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4619      	mov	r1, r3
 8004360:	4610      	mov	r0, r2
 8004362:	f7fc fec9 	bl	80010f8 <__aeabi_fcmplt>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <Constant_Voltage+0xe10>
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <Constant_Voltage+0xe70>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <Constant_Voltage+0xe90>)
 8004372:	6013      	str	r3, [r2, #0]
	r28=dZ; if(ePB<dZ) r28=ePB;		//r28=max(dZ,ePB);
 8004374:	4b19      	ldr	r3, [pc, #100]	; (80043dc <Constant_Voltage+0xe78>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1f      	ldr	r2, [pc, #124]	; (80043f8 <Constant_Voltage+0xe94>)
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b08      	ldr	r3, [pc, #32]	; (80043a0 <Constant_Voltage+0xe3c>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b16      	ldr	r3, [pc, #88]	; (80043dc <Constant_Voltage+0xe78>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4619      	mov	r1, r3
 8004386:	4610      	mov	r0, r2
 8004388:	f7fc feb6 	bl	80010f8 <__aeabi_fcmplt>
 800438c:	4603      	mov	r3, r0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <Constant_Voltage+0xe9c>
 8004392:	4b03      	ldr	r3, [pc, #12]	; (80043a0 <Constant_Voltage+0xe3c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	e031      	b.n	80043fc <Constant_Voltage+0xe98>
 8004398:	20000704 	.word	0x20000704
 800439c:	20000680 	.word	0x20000680
 80043a0:	20000c84 	.word	0x20000c84
 80043a4:	20001290 	.word	0x20001290
 80043a8:	200012a0 	.word	0x200012a0
 80043ac:	2000127c 	.word	0x2000127c
 80043b0:	20000d44 	.word	0x20000d44
 80043b4:	200012b4 	.word	0x200012b4
 80043b8:	200008c8 	.word	0x200008c8
 80043bc:	200006bc 	.word	0x200006bc
 80043c0:	20000cc4 	.word	0x20000cc4
 80043c4:	200012c8 	.word	0x200012c8
 80043c8:	20001298 	.word	0x20001298
 80043cc:	20000cbc 	.word	0x20000cbc
 80043d0:	20000c8c 	.word	0x20000c8c
 80043d4:	20000d48 	.word	0x20000d48
 80043d8:	200008dc 	.word	0x200008dc
 80043dc:	200012a8 	.word	0x200012a8
 80043e0:	200010c8 	.word	0x200010c8
 80043e4:	200012b0 	.word	0x200012b0
 80043e8:	200012c4 	.word	0x200012c4
 80043ec:	200006b8 	.word	0x200006b8
 80043f0:	200008b8 	.word	0x200008b8
 80043f4:	20000ca4 	.word	0x20000ca4
 80043f8:	20000690 	.word	0x20000690
 80043fc:	4a8d      	ldr	r2, [pc, #564]	; (8004634 <Constant_Voltage+0x10d0>)
 80043fe:	6013      	str	r3, [r2, #0]

	r29=dNS; if(eNB<dNS) r29=eNB;	//r29=max(dNS,eNB);
 8004400:	4b8d      	ldr	r3, [pc, #564]	; (8004638 <Constant_Voltage+0x10d4>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a8d      	ldr	r2, [pc, #564]	; (800463c <Constant_Voltage+0x10d8>)
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	4b8d      	ldr	r3, [pc, #564]	; (8004640 <Constant_Voltage+0x10dc>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b8a      	ldr	r3, [pc, #552]	; (8004638 <Constant_Voltage+0x10d4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4619      	mov	r1, r3
 8004412:	4610      	mov	r0, r2
 8004414:	f7fc fe70 	bl	80010f8 <__aeabi_fcmplt>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <Constant_Voltage+0xec2>
 800441e:	4b88      	ldr	r3, [pc, #544]	; (8004640 <Constant_Voltage+0x10dc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a86      	ldr	r2, [pc, #536]	; (800463c <Constant_Voltage+0x10d8>)
 8004424:	6013      	str	r3, [r2, #0]
	r30=dNS; if(eNM<dNS) r30=eNM;	//r30=max(dNS,eNM);
 8004426:	4b84      	ldr	r3, [pc, #528]	; (8004638 <Constant_Voltage+0x10d4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a86      	ldr	r2, [pc, #536]	; (8004644 <Constant_Voltage+0x10e0>)
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b86      	ldr	r3, [pc, #536]	; (8004648 <Constant_Voltage+0x10e4>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b81      	ldr	r3, [pc, #516]	; (8004638 <Constant_Voltage+0x10d4>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4619      	mov	r1, r3
 8004438:	4610      	mov	r0, r2
 800443a:	f7fc fe5d 	bl	80010f8 <__aeabi_fcmplt>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <Constant_Voltage+0xee8>
 8004444:	4b80      	ldr	r3, [pc, #512]	; (8004648 <Constant_Voltage+0x10e4>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a7e      	ldr	r2, [pc, #504]	; (8004644 <Constant_Voltage+0x10e0>)
 800444a:	6013      	str	r3, [r2, #0]
	r31=dNS; if(eNS<dNS) r31=eNS;	//r31=max(dNS,eNS);
 800444c:	4b7a      	ldr	r3, [pc, #488]	; (8004638 <Constant_Voltage+0x10d4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a7e      	ldr	r2, [pc, #504]	; (800464c <Constant_Voltage+0x10e8>)
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b7e      	ldr	r3, [pc, #504]	; (8004650 <Constant_Voltage+0x10ec>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b77      	ldr	r3, [pc, #476]	; (8004638 <Constant_Voltage+0x10d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fc fe4a 	bl	80010f8 <__aeabi_fcmplt>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <Constant_Voltage+0xf0e>
 800446a:	4b79      	ldr	r3, [pc, #484]	; (8004650 <Constant_Voltage+0x10ec>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a77      	ldr	r2, [pc, #476]	; (800464c <Constant_Voltage+0x10e8>)
 8004470:	6013      	str	r3, [r2, #0]
	r32=dNS; if(eZ<dNS) r32=eZ;		//r32=max(dNS,eZ);
 8004472:	4b71      	ldr	r3, [pc, #452]	; (8004638 <Constant_Voltage+0x10d4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a77      	ldr	r2, [pc, #476]	; (8004654 <Constant_Voltage+0x10f0>)
 8004478:	6013      	str	r3, [r2, #0]
 800447a:	4b77      	ldr	r3, [pc, #476]	; (8004658 <Constant_Voltage+0x10f4>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <Constant_Voltage+0x10d4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f7fc fe37 	bl	80010f8 <__aeabi_fcmplt>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d003      	beq.n	8004498 <Constant_Voltage+0xf34>
 8004490:	4b71      	ldr	r3, [pc, #452]	; (8004658 <Constant_Voltage+0x10f4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a6f      	ldr	r2, [pc, #444]	; (8004654 <Constant_Voltage+0x10f0>)
 8004496:	6013      	str	r3, [r2, #0]
	r33=dNS; if(ePS<dNS) r33=ePS;	//r33=max(dNS,ePS);
 8004498:	4b67      	ldr	r3, [pc, #412]	; (8004638 <Constant_Voltage+0x10d4>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a6f      	ldr	r2, [pc, #444]	; (800465c <Constant_Voltage+0x10f8>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <Constant_Voltage+0x10fc>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	4b64      	ldr	r3, [pc, #400]	; (8004638 <Constant_Voltage+0x10d4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4619      	mov	r1, r3
 80044aa:	4610      	mov	r0, r2
 80044ac:	f7fc fe24 	bl	80010f8 <__aeabi_fcmplt>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <Constant_Voltage+0xf5a>
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <Constant_Voltage+0x10fc>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a68      	ldr	r2, [pc, #416]	; (800465c <Constant_Voltage+0x10f8>)
 80044bc:	6013      	str	r3, [r2, #0]
	r34=dNS; if(ePM<dNS) r34=ePM;	//r34=max(dNS,ePM);
 80044be:	4b5e      	ldr	r3, [pc, #376]	; (8004638 <Constant_Voltage+0x10d4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a68      	ldr	r2, [pc, #416]	; (8004664 <Constant_Voltage+0x1100>)
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	4b68      	ldr	r3, [pc, #416]	; (8004668 <Constant_Voltage+0x1104>)
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4b5b      	ldr	r3, [pc, #364]	; (8004638 <Constant_Voltage+0x10d4>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4619      	mov	r1, r3
 80044d0:	4610      	mov	r0, r2
 80044d2:	f7fc fe11 	bl	80010f8 <__aeabi_fcmplt>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <Constant_Voltage+0xf80>
 80044dc:	4b62      	ldr	r3, [pc, #392]	; (8004668 <Constant_Voltage+0x1104>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a60      	ldr	r2, [pc, #384]	; (8004664 <Constant_Voltage+0x1100>)
 80044e2:	6013      	str	r3, [r2, #0]
	r35=dNS; if(ePB<dNS) r35=ePB;	//r35=max(dNS,ePB);
 80044e4:	4b54      	ldr	r3, [pc, #336]	; (8004638 <Constant_Voltage+0x10d4>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a60      	ldr	r2, [pc, #384]	; (800466c <Constant_Voltage+0x1108>)
 80044ea:	6013      	str	r3, [r2, #0]
 80044ec:	4b60      	ldr	r3, [pc, #384]	; (8004670 <Constant_Voltage+0x110c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	4b51      	ldr	r3, [pc, #324]	; (8004638 <Constant_Voltage+0x10d4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f7fc fdfe 	bl	80010f8 <__aeabi_fcmplt>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <Constant_Voltage+0xfa6>
 8004502:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <Constant_Voltage+0x110c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a59      	ldr	r2, [pc, #356]	; (800466c <Constant_Voltage+0x1108>)
 8004508:	6013      	str	r3, [r2, #0]

	r36=dNM; if(eNB<dNM) r36=eNB;	//r36=max(dNM,eNB);
 800450a:	4b5a      	ldr	r3, [pc, #360]	; (8004674 <Constant_Voltage+0x1110>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5a      	ldr	r2, [pc, #360]	; (8004678 <Constant_Voltage+0x1114>)
 8004510:	6013      	str	r3, [r2, #0]
 8004512:	4b4b      	ldr	r3, [pc, #300]	; (8004640 <Constant_Voltage+0x10dc>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b57      	ldr	r3, [pc, #348]	; (8004674 <Constant_Voltage+0x1110>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f7fc fdeb 	bl	80010f8 <__aeabi_fcmplt>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <Constant_Voltage+0xfcc>
 8004528:	4b45      	ldr	r3, [pc, #276]	; (8004640 <Constant_Voltage+0x10dc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <Constant_Voltage+0x1114>)
 800452e:	6013      	str	r3, [r2, #0]
	r37=dNM; if(eNM<dNM) r37=eNM;	//r37=max(dNM,eNM);
 8004530:	4b50      	ldr	r3, [pc, #320]	; (8004674 <Constant_Voltage+0x1110>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a51      	ldr	r2, [pc, #324]	; (800467c <Constant_Voltage+0x1118>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	4b43      	ldr	r3, [pc, #268]	; (8004648 <Constant_Voltage+0x10e4>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b4d      	ldr	r3, [pc, #308]	; (8004674 <Constant_Voltage+0x1110>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7fc fdd8 	bl	80010f8 <__aeabi_fcmplt>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <Constant_Voltage+0xff2>
 800454e:	4b3e      	ldr	r3, [pc, #248]	; (8004648 <Constant_Voltage+0x10e4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4a      	ldr	r2, [pc, #296]	; (800467c <Constant_Voltage+0x1118>)
 8004554:	6013      	str	r3, [r2, #0]
	r38=dNM; if(eNS<dNM) r38=eNS;	//r38=max(dNM,eNS);
 8004556:	4b47      	ldr	r3, [pc, #284]	; (8004674 <Constant_Voltage+0x1110>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a49      	ldr	r2, [pc, #292]	; (8004680 <Constant_Voltage+0x111c>)
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b3c      	ldr	r3, [pc, #240]	; (8004650 <Constant_Voltage+0x10ec>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b44      	ldr	r3, [pc, #272]	; (8004674 <Constant_Voltage+0x1110>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4619      	mov	r1, r3
 8004568:	4610      	mov	r0, r2
 800456a:	f7fc fdc5 	bl	80010f8 <__aeabi_fcmplt>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <Constant_Voltage+0x1018>
 8004574:	4b36      	ldr	r3, [pc, #216]	; (8004650 <Constant_Voltage+0x10ec>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a41      	ldr	r2, [pc, #260]	; (8004680 <Constant_Voltage+0x111c>)
 800457a:	6013      	str	r3, [r2, #0]
	r39=dNM; if(eZ<dNM) r39=eZ;		//r39=max(dNM,eZ);
 800457c:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <Constant_Voltage+0x1110>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a40      	ldr	r2, [pc, #256]	; (8004684 <Constant_Voltage+0x1120>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	4b34      	ldr	r3, [pc, #208]	; (8004658 <Constant_Voltage+0x10f4>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b3a      	ldr	r3, [pc, #232]	; (8004674 <Constant_Voltage+0x1110>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4619      	mov	r1, r3
 800458e:	4610      	mov	r0, r2
 8004590:	f7fc fdb2 	bl	80010f8 <__aeabi_fcmplt>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <Constant_Voltage+0x103e>
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <Constant_Voltage+0x10f4>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a39      	ldr	r2, [pc, #228]	; (8004684 <Constant_Voltage+0x1120>)
 80045a0:	6013      	str	r3, [r2, #0]
	r40=dNM; if(ePS<dNM) r40=ePS;	//r40=max(dNM,ePS);
 80045a2:	4b34      	ldr	r3, [pc, #208]	; (8004674 <Constant_Voltage+0x1110>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a38      	ldr	r2, [pc, #224]	; (8004688 <Constant_Voltage+0x1124>)
 80045a8:	6013      	str	r3, [r2, #0]
 80045aa:	4b2d      	ldr	r3, [pc, #180]	; (8004660 <Constant_Voltage+0x10fc>)
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <Constant_Voltage+0x1110>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4619      	mov	r1, r3
 80045b4:	4610      	mov	r0, r2
 80045b6:	f7fc fd9f 	bl	80010f8 <__aeabi_fcmplt>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <Constant_Voltage+0x1064>
 80045c0:	4b27      	ldr	r3, [pc, #156]	; (8004660 <Constant_Voltage+0x10fc>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a30      	ldr	r2, [pc, #192]	; (8004688 <Constant_Voltage+0x1124>)
 80045c6:	6013      	str	r3, [r2, #0]
	r41=dNM; if(ePM<dNM) r41=ePM;	//r41=max(dNM,ePM);
 80045c8:	4b2a      	ldr	r3, [pc, #168]	; (8004674 <Constant_Voltage+0x1110>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a2f      	ldr	r2, [pc, #188]	; (800468c <Constant_Voltage+0x1128>)
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	4b25      	ldr	r3, [pc, #148]	; (8004668 <Constant_Voltage+0x1104>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b27      	ldr	r3, [pc, #156]	; (8004674 <Constant_Voltage+0x1110>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4619      	mov	r1, r3
 80045da:	4610      	mov	r0, r2
 80045dc:	f7fc fd8c 	bl	80010f8 <__aeabi_fcmplt>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <Constant_Voltage+0x108a>
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <Constant_Voltage+0x1104>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <Constant_Voltage+0x1128>)
 80045ec:	6013      	str	r3, [r2, #0]
	r42=dNM; if(ePB<dNM) r42=ePB;	//r42=max(dNM,ePB);
 80045ee:	4b21      	ldr	r3, [pc, #132]	; (8004674 <Constant_Voltage+0x1110>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a27      	ldr	r2, [pc, #156]	; (8004690 <Constant_Voltage+0x112c>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <Constant_Voltage+0x110c>)
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b1e      	ldr	r3, [pc, #120]	; (8004674 <Constant_Voltage+0x1110>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4619      	mov	r1, r3
 8004600:	4610      	mov	r0, r2
 8004602:	f7fc fd79 	bl	80010f8 <__aeabi_fcmplt>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <Constant_Voltage+0x10b0>
 800460c:	4b18      	ldr	r3, [pc, #96]	; (8004670 <Constant_Voltage+0x110c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a1f      	ldr	r2, [pc, #124]	; (8004690 <Constant_Voltage+0x112c>)
 8004612:	6013      	str	r3, [r2, #0]

	r43=dNB; if(eNB<dNB) r43=eNB;	//r43=max(dNB,eNB);
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <Constant_Voltage+0x1130>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1f      	ldr	r2, [pc, #124]	; (8004698 <Constant_Voltage+0x1134>)
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b08      	ldr	r3, [pc, #32]	; (8004640 <Constant_Voltage+0x10dc>)
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <Constant_Voltage+0x1130>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f7fc fd66 	bl	80010f8 <__aeabi_fcmplt>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d038      	beq.n	80046a4 <Constant_Voltage+0x1140>
 8004632:	e033      	b.n	800469c <Constant_Voltage+0x1138>
 8004634:	20000690 	.word	0x20000690
 8004638:	20000918 	.word	0x20000918
 800463c:	200006b0 	.word	0x200006b0
 8004640:	2000127c 	.word	0x2000127c
 8004644:	20000ef0 	.word	0x20000ef0
 8004648:	200012b4 	.word	0x200012b4
 800464c:	200008cc 	.word	0x200008cc
 8004650:	200006bc 	.word	0x200006bc
 8004654:	2000091c 	.word	0x2000091c
 8004658:	200012c8 	.word	0x200012c8
 800465c:	20000cb0 	.word	0x20000cb0
 8004660:	20000cbc 	.word	0x20000cbc
 8004664:	20000eec 	.word	0x20000eec
 8004668:	20000d48 	.word	0x20000d48
 800466c:	200010c0 	.word	0x200010c0
 8004670:	20000c84 	.word	0x20000c84
 8004674:	20000cb8 	.word	0x20000cb8
 8004678:	200006ec 	.word	0x200006ec
 800467c:	20000ac8 	.word	0x20000ac8
 8004680:	20000c88 	.word	0x20000c88
 8004684:	2000128c 	.word	0x2000128c
 8004688:	20000d24 	.word	0x20000d24
 800468c:	200006c8 	.word	0x200006c8
 8004690:	200006dc 	.word	0x200006dc
 8004694:	200006f8 	.word	0x200006f8
 8004698:	20001294 	.word	0x20001294
 800469c:	4b90      	ldr	r3, [pc, #576]	; (80048e0 <Constant_Voltage+0x137c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a90      	ldr	r2, [pc, #576]	; (80048e4 <Constant_Voltage+0x1380>)
 80046a2:	6013      	str	r3, [r2, #0]
	r44=dNB; if(eNM<dNB) r44=eNM;	//r44=max(dNB,eNM);
 80046a4:	4b90      	ldr	r3, [pc, #576]	; (80048e8 <Constant_Voltage+0x1384>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a90      	ldr	r2, [pc, #576]	; (80048ec <Constant_Voltage+0x1388>)
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	4b90      	ldr	r3, [pc, #576]	; (80048f0 <Constant_Voltage+0x138c>)
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	4b8d      	ldr	r3, [pc, #564]	; (80048e8 <Constant_Voltage+0x1384>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f7fc fd1e 	bl	80010f8 <__aeabi_fcmplt>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <Constant_Voltage+0x1166>
 80046c2:	4b8b      	ldr	r3, [pc, #556]	; (80048f0 <Constant_Voltage+0x138c>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a89      	ldr	r2, [pc, #548]	; (80048ec <Constant_Voltage+0x1388>)
 80046c8:	6013      	str	r3, [r2, #0]
	r45=dNB; if(eNS<dNB) r45=eNS;	//r45=max(dNB,eNS);
 80046ca:	4b87      	ldr	r3, [pc, #540]	; (80048e8 <Constant_Voltage+0x1384>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a89      	ldr	r2, [pc, #548]	; (80048f4 <Constant_Voltage+0x1390>)
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b89      	ldr	r3, [pc, #548]	; (80048f8 <Constant_Voltage+0x1394>)
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b84      	ldr	r3, [pc, #528]	; (80048e8 <Constant_Voltage+0x1384>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4619      	mov	r1, r3
 80046dc:	4610      	mov	r0, r2
 80046de:	f7fc fd0b 	bl	80010f8 <__aeabi_fcmplt>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <Constant_Voltage+0x118c>
 80046e8:	4b83      	ldr	r3, [pc, #524]	; (80048f8 <Constant_Voltage+0x1394>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a81      	ldr	r2, [pc, #516]	; (80048f4 <Constant_Voltage+0x1390>)
 80046ee:	6013      	str	r3, [r2, #0]
	r46=dNB; if(eZ<dNB) r46=eZ;		//r46=max(dNB,eZ);
 80046f0:	4b7d      	ldr	r3, [pc, #500]	; (80048e8 <Constant_Voltage+0x1384>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a81      	ldr	r2, [pc, #516]	; (80048fc <Constant_Voltage+0x1398>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	4b81      	ldr	r3, [pc, #516]	; (8004900 <Constant_Voltage+0x139c>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b7a      	ldr	r3, [pc, #488]	; (80048e8 <Constant_Voltage+0x1384>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f7fc fcf8 	bl	80010f8 <__aeabi_fcmplt>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <Constant_Voltage+0x11b2>
 800470e:	4b7c      	ldr	r3, [pc, #496]	; (8004900 <Constant_Voltage+0x139c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <Constant_Voltage+0x1398>)
 8004714:	6013      	str	r3, [r2, #0]
	r47=dNB; if(ePS<dNB) r47=ePS;	//r47=max(dNB,ePS);
 8004716:	4b74      	ldr	r3, [pc, #464]	; (80048e8 <Constant_Voltage+0x1384>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a7a      	ldr	r2, [pc, #488]	; (8004904 <Constant_Voltage+0x13a0>)
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b7a      	ldr	r3, [pc, #488]	; (8004908 <Constant_Voltage+0x13a4>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b71      	ldr	r3, [pc, #452]	; (80048e8 <Constant_Voltage+0x1384>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4619      	mov	r1, r3
 8004728:	4610      	mov	r0, r2
 800472a:	f7fc fce5 	bl	80010f8 <__aeabi_fcmplt>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <Constant_Voltage+0x11d8>
 8004734:	4b74      	ldr	r3, [pc, #464]	; (8004908 <Constant_Voltage+0x13a4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a72      	ldr	r2, [pc, #456]	; (8004904 <Constant_Voltage+0x13a0>)
 800473a:	6013      	str	r3, [r2, #0]
	r48=dNB; if(ePM<dNB) r48=ePM;	//r48=max(dNB,ePM);
 800473c:	4b6a      	ldr	r3, [pc, #424]	; (80048e8 <Constant_Voltage+0x1384>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a72      	ldr	r2, [pc, #456]	; (800490c <Constant_Voltage+0x13a8>)
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	4b72      	ldr	r3, [pc, #456]	; (8004910 <Constant_Voltage+0x13ac>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b67      	ldr	r3, [pc, #412]	; (80048e8 <Constant_Voltage+0x1384>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fc fcd2 	bl	80010f8 <__aeabi_fcmplt>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <Constant_Voltage+0x11fe>
 800475a:	4b6d      	ldr	r3, [pc, #436]	; (8004910 <Constant_Voltage+0x13ac>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a6b      	ldr	r2, [pc, #428]	; (800490c <Constant_Voltage+0x13a8>)
 8004760:	6013      	str	r3, [r2, #0]
	r49=dNB; if(ePB<dNB) r49=ePB;	//r49=max(dNB,ePB);
 8004762:	4b61      	ldr	r3, [pc, #388]	; (80048e8 <Constant_Voltage+0x1384>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6b      	ldr	r2, [pc, #428]	; (8004914 <Constant_Voltage+0x13b0>)
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4b6b      	ldr	r3, [pc, #428]	; (8004918 <Constant_Voltage+0x13b4>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <Constant_Voltage+0x1384>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f7fc fcbf 	bl	80010f8 <__aeabi_fcmplt>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <Constant_Voltage+0x1224>
 8004780:	4b65      	ldr	r3, [pc, #404]	; (8004918 <Constant_Voltage+0x13b4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a63      	ldr	r2, [pc, #396]	; (8004914 <Constant_Voltage+0x13b0>)
 8004786:	6013      	str	r3, [r2, #0]

	///////////////////////////DEFUZZIFIKASI///////////////////////

	A=(r1*oZ)+(r2*oPS)+(r3*oPM)+(r4*oPB)+(r5*oPH)+(r6*oPH)+(r7*oPH);
 8004788:	4b64      	ldr	r3, [pc, #400]	; (800491c <Constant_Voltage+0x13b8>)
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	4b64      	ldr	r3, [pc, #400]	; (8004920 <Constant_Voltage+0x13bc>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4619      	mov	r1, r3
 8004792:	4610      	mov	r0, r2
 8004794:	f7fc fb12 	bl	8000dbc <__aeabi_fmul>
 8004798:	4603      	mov	r3, r0
 800479a:	461c      	mov	r4, r3
 800479c:	4b61      	ldr	r3, [pc, #388]	; (8004924 <Constant_Voltage+0x13c0>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b61      	ldr	r3, [pc, #388]	; (8004928 <Constant_Voltage+0x13c4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7fc fb08 	bl	8000dbc <__aeabi_fmul>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4619      	mov	r1, r3
 80047b0:	4620      	mov	r0, r4
 80047b2:	f7fc f9fb 	bl	8000bac <__addsf3>
 80047b6:	4603      	mov	r3, r0
 80047b8:	461c      	mov	r4, r3
 80047ba:	4b5c      	ldr	r3, [pc, #368]	; (800492c <Constant_Voltage+0x13c8>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4b5c      	ldr	r3, [pc, #368]	; (8004930 <Constant_Voltage+0x13cc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4619      	mov	r1, r3
 80047c4:	4610      	mov	r0, r2
 80047c6:	f7fc faf9 	bl	8000dbc <__aeabi_fmul>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4619      	mov	r1, r3
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7fc f9ec 	bl	8000bac <__addsf3>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461c      	mov	r4, r3
 80047d8:	4b56      	ldr	r3, [pc, #344]	; (8004934 <Constant_Voltage+0x13d0>)
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	4b56      	ldr	r3, [pc, #344]	; (8004938 <Constant_Voltage+0x13d4>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f7fc faea 	bl	8000dbc <__aeabi_fmul>
 80047e8:	4603      	mov	r3, r0
 80047ea:	4619      	mov	r1, r3
 80047ec:	4620      	mov	r0, r4
 80047ee:	f7fc f9dd 	bl	8000bac <__addsf3>
 80047f2:	4603      	mov	r3, r0
 80047f4:	461c      	mov	r4, r3
 80047f6:	4b51      	ldr	r3, [pc, #324]	; (800493c <Constant_Voltage+0x13d8>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	4b51      	ldr	r3, [pc, #324]	; (8004940 <Constant_Voltage+0x13dc>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4619      	mov	r1, r3
 8004800:	4610      	mov	r0, r2
 8004802:	f7fc fadb 	bl	8000dbc <__aeabi_fmul>
 8004806:	4603      	mov	r3, r0
 8004808:	4619      	mov	r1, r3
 800480a:	4620      	mov	r0, r4
 800480c:	f7fc f9ce 	bl	8000bac <__addsf3>
 8004810:	4603      	mov	r3, r0
 8004812:	461c      	mov	r4, r3
 8004814:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <Constant_Voltage+0x13e0>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b49      	ldr	r3, [pc, #292]	; (8004940 <Constant_Voltage+0x13dc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4619      	mov	r1, r3
 800481e:	4610      	mov	r0, r2
 8004820:	f7fc facc 	bl	8000dbc <__aeabi_fmul>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	4620      	mov	r0, r4
 800482a:	f7fc f9bf 	bl	8000bac <__addsf3>
 800482e:	4603      	mov	r3, r0
 8004830:	461c      	mov	r4, r3
 8004832:	4b45      	ldr	r3, [pc, #276]	; (8004948 <Constant_Voltage+0x13e4>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	4b42      	ldr	r3, [pc, #264]	; (8004940 <Constant_Voltage+0x13dc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f7fc fabd 	bl	8000dbc <__aeabi_fmul>
 8004842:	4603      	mov	r3, r0
 8004844:	4619      	mov	r1, r3
 8004846:	4620      	mov	r0, r4
 8004848:	f7fc f9b0 	bl	8000bac <__addsf3>
 800484c:	4603      	mov	r3, r0
 800484e:	461a      	mov	r2, r3
 8004850:	4b3e      	ldr	r3, [pc, #248]	; (800494c <Constant_Voltage+0x13e8>)
 8004852:	601a      	str	r2, [r3, #0]
	B=(r8*oNS)+(r9*oZ)+(r10*oPS)+(r11*oPM)+(r12*oPB)+(r13*oPH)+(r14*oPH);
 8004854:	4b3e      	ldr	r3, [pc, #248]	; (8004950 <Constant_Voltage+0x13ec>)
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b3e      	ldr	r3, [pc, #248]	; (8004954 <Constant_Voltage+0x13f0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f7fc faac 	bl	8000dbc <__aeabi_fmul>
 8004864:	4603      	mov	r3, r0
 8004866:	461c      	mov	r4, r3
 8004868:	4b3b      	ldr	r3, [pc, #236]	; (8004958 <Constant_Voltage+0x13f4>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	4b2c      	ldr	r3, [pc, #176]	; (8004920 <Constant_Voltage+0x13bc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4619      	mov	r1, r3
 8004872:	4610      	mov	r0, r2
 8004874:	f7fc faa2 	bl	8000dbc <__aeabi_fmul>
 8004878:	4603      	mov	r3, r0
 800487a:	4619      	mov	r1, r3
 800487c:	4620      	mov	r0, r4
 800487e:	f7fc f995 	bl	8000bac <__addsf3>
 8004882:	4603      	mov	r3, r0
 8004884:	461c      	mov	r4, r3
 8004886:	4b35      	ldr	r3, [pc, #212]	; (800495c <Constant_Voltage+0x13f8>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b27      	ldr	r3, [pc, #156]	; (8004928 <Constant_Voltage+0x13c4>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f7fc fa93 	bl	8000dbc <__aeabi_fmul>
 8004896:	4603      	mov	r3, r0
 8004898:	4619      	mov	r1, r3
 800489a:	4620      	mov	r0, r4
 800489c:	f7fc f986 	bl	8000bac <__addsf3>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461c      	mov	r4, r3
 80048a4:	4b2e      	ldr	r3, [pc, #184]	; (8004960 <Constant_Voltage+0x13fc>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	4b21      	ldr	r3, [pc, #132]	; (8004930 <Constant_Voltage+0x13cc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7fc fa84 	bl	8000dbc <__aeabi_fmul>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4619      	mov	r1, r3
 80048b8:	4620      	mov	r0, r4
 80048ba:	f7fc f977 	bl	8000bac <__addsf3>
 80048be:	4603      	mov	r3, r0
 80048c0:	461c      	mov	r4, r3
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <Constant_Voltage+0x1400>)
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <Constant_Voltage+0x13d4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fc fa75 	bl	8000dbc <__aeabi_fmul>
 80048d2:	4603      	mov	r3, r0
 80048d4:	4619      	mov	r1, r3
 80048d6:	4620      	mov	r0, r4
 80048d8:	f7fc f968 	bl	8000bac <__addsf3>
 80048dc:	e044      	b.n	8004968 <Constant_Voltage+0x1404>
 80048de:	bf00      	nop
 80048e0:	2000127c 	.word	0x2000127c
 80048e4:	20001294 	.word	0x20001294
 80048e8:	200006f8 	.word	0x200006f8
 80048ec:	20000ab8 	.word	0x20000ab8
 80048f0:	200012b4 	.word	0x200012b4
 80048f4:	20000914 	.word	0x20000914
 80048f8:	200006bc 	.word	0x200006bc
 80048fc:	2000071c 	.word	0x2000071c
 8004900:	200012c8 	.word	0x200012c8
 8004904:	20001284 	.word	0x20001284
 8004908:	20000cbc 	.word	0x20000cbc
 800490c:	20000d30 	.word	0x20000d30
 8004910:	20000d48 	.word	0x20000d48
 8004914:	20000cac 	.word	0x20000cac
 8004918:	20000c84 	.word	0x20000c84
 800491c:	200012cc 	.word	0x200012cc
 8004920:	20000254 	.word	0x20000254
 8004924:	20000f08 	.word	0x20000f08
 8004928:	20000030 	.word	0x20000030
 800492c:	200006e4 	.word	0x200006e4
 8004930:	20000034 	.word	0x20000034
 8004934:	200008e8 	.word	0x200008e8
 8004938:	20000038 	.word	0x20000038
 800493c:	200012bc 	.word	0x200012bc
 8004940:	2000003c 	.word	0x2000003c
 8004944:	200008d4 	.word	0x200008d4
 8004948:	20000d2c 	.word	0x20000d2c
 800494c:	20000710 	.word	0x20000710
 8004950:	20000c94 	.word	0x20000c94
 8004954:	2000002c 	.word	0x2000002c
 8004958:	20000718 	.word	0x20000718
 800495c:	20000c78 	.word	0x20000c78
 8004960:	20000f00 	.word	0x20000f00
 8004964:	2000129c 	.word	0x2000129c
 8004968:	4603      	mov	r3, r0
 800496a:	461c      	mov	r4, r3
 800496c:	4b91      	ldr	r3, [pc, #580]	; (8004bb4 <Constant_Voltage+0x1650>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	4b91      	ldr	r3, [pc, #580]	; (8004bb8 <Constant_Voltage+0x1654>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f7fc fa20 	bl	8000dbc <__aeabi_fmul>
 800497c:	4603      	mov	r3, r0
 800497e:	4619      	mov	r1, r3
 8004980:	4620      	mov	r0, r4
 8004982:	f7fc f913 	bl	8000bac <__addsf3>
 8004986:	4603      	mov	r3, r0
 8004988:	461c      	mov	r4, r3
 800498a:	4b8c      	ldr	r3, [pc, #560]	; (8004bbc <Constant_Voltage+0x1658>)
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b8a      	ldr	r3, [pc, #552]	; (8004bb8 <Constant_Voltage+0x1654>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fc fa11 	bl	8000dbc <__aeabi_fmul>
 800499a:	4603      	mov	r3, r0
 800499c:	4619      	mov	r1, r3
 800499e:	4620      	mov	r0, r4
 80049a0:	f7fc f904 	bl	8000bac <__addsf3>
 80049a4:	4603      	mov	r3, r0
 80049a6:	461a      	mov	r2, r3
 80049a8:	4b85      	ldr	r3, [pc, #532]	; (8004bc0 <Constant_Voltage+0x165c>)
 80049aa:	601a      	str	r2, [r3, #0]
	C=(r15*oNM)+(r16*oNS)+(r17*oZ)+(r18*oPS)+(r19*oPM)+(r20*oPB)+(r21*oPH);
 80049ac:	4b85      	ldr	r3, [pc, #532]	; (8004bc4 <Constant_Voltage+0x1660>)
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	4b85      	ldr	r3, [pc, #532]	; (8004bc8 <Constant_Voltage+0x1664>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fc fa00 	bl	8000dbc <__aeabi_fmul>
 80049bc:	4603      	mov	r3, r0
 80049be:	461c      	mov	r4, r3
 80049c0:	4b82      	ldr	r3, [pc, #520]	; (8004bcc <Constant_Voltage+0x1668>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b82      	ldr	r3, [pc, #520]	; (8004bd0 <Constant_Voltage+0x166c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4619      	mov	r1, r3
 80049ca:	4610      	mov	r0, r2
 80049cc:	f7fc f9f6 	bl	8000dbc <__aeabi_fmul>
 80049d0:	4603      	mov	r3, r0
 80049d2:	4619      	mov	r1, r3
 80049d4:	4620      	mov	r0, r4
 80049d6:	f7fc f8e9 	bl	8000bac <__addsf3>
 80049da:	4603      	mov	r3, r0
 80049dc:	461c      	mov	r4, r3
 80049de:	4b7d      	ldr	r3, [pc, #500]	; (8004bd4 <Constant_Voltage+0x1670>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b7d      	ldr	r3, [pc, #500]	; (8004bd8 <Constant_Voltage+0x1674>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fc f9e7 	bl	8000dbc <__aeabi_fmul>
 80049ee:	4603      	mov	r3, r0
 80049f0:	4619      	mov	r1, r3
 80049f2:	4620      	mov	r0, r4
 80049f4:	f7fc f8da 	bl	8000bac <__addsf3>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461c      	mov	r4, r3
 80049fc:	4b77      	ldr	r3, [pc, #476]	; (8004bdc <Constant_Voltage+0x1678>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	4b77      	ldr	r3, [pc, #476]	; (8004be0 <Constant_Voltage+0x167c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f7fc f9d8 	bl	8000dbc <__aeabi_fmul>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7fc f8cb 	bl	8000bac <__addsf3>
 8004a16:	4603      	mov	r3, r0
 8004a18:	461c      	mov	r4, r3
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <Constant_Voltage+0x1680>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b72      	ldr	r3, [pc, #456]	; (8004be8 <Constant_Voltage+0x1684>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7fc f9c9 	bl	8000dbc <__aeabi_fmul>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f7fc f8bc 	bl	8000bac <__addsf3>
 8004a34:	4603      	mov	r3, r0
 8004a36:	461c      	mov	r4, r3
 8004a38:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <Constant_Voltage+0x1688>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b6c      	ldr	r3, [pc, #432]	; (8004bf0 <Constant_Voltage+0x168c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7fc f9ba 	bl	8000dbc <__aeabi_fmul>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f7fc f8ad 	bl	8000bac <__addsf3>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461c      	mov	r4, r3
 8004a56:	4b67      	ldr	r3, [pc, #412]	; (8004bf4 <Constant_Voltage+0x1690>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b57      	ldr	r3, [pc, #348]	; (8004bb8 <Constant_Voltage+0x1654>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f7fc f9ab 	bl	8000dbc <__aeabi_fmul>
 8004a66:	4603      	mov	r3, r0
 8004a68:	4619      	mov	r1, r3
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f7fc f89e 	bl	8000bac <__addsf3>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b60      	ldr	r3, [pc, #384]	; (8004bf8 <Constant_Voltage+0x1694>)
 8004a76:	601a      	str	r2, [r3, #0]
	D=(r22*oNB)+(r23*oNM)+(r24*oNS)+(r25*oZ)+(r26*oPS)+(r27*oPM)+(r28*oPB);
 8004a78:	4b60      	ldr	r3, [pc, #384]	; (8004bfc <Constant_Voltage+0x1698>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b60      	ldr	r3, [pc, #384]	; (8004c00 <Constant_Voltage+0x169c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f7fc f99a 	bl	8000dbc <__aeabi_fmul>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <Constant_Voltage+0x16a0>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <Constant_Voltage+0x1664>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4619      	mov	r1, r3
 8004a96:	4610      	mov	r0, r2
 8004a98:	f7fc f990 	bl	8000dbc <__aeabi_fmul>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7fc f883 	bl	8000bac <__addsf3>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	461c      	mov	r4, r3
 8004aaa:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <Constant_Voltage+0x16a4>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b48      	ldr	r3, [pc, #288]	; (8004bd0 <Constant_Voltage+0x166c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	f7fc f981 	bl	8000dbc <__aeabi_fmul>
 8004aba:	4603      	mov	r3, r0
 8004abc:	4619      	mov	r1, r3
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7fc f874 	bl	8000bac <__addsf3>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	461c      	mov	r4, r3
 8004ac8:	4b50      	ldr	r3, [pc, #320]	; (8004c0c <Constant_Voltage+0x16a8>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b42      	ldr	r3, [pc, #264]	; (8004bd8 <Constant_Voltage+0x1674>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fc f972 	bl	8000dbc <__aeabi_fmul>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	4619      	mov	r1, r3
 8004adc:	4620      	mov	r0, r4
 8004ade:	f7fc f865 	bl	8000bac <__addsf3>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	461c      	mov	r4, r3
 8004ae6:	4b4a      	ldr	r3, [pc, #296]	; (8004c10 <Constant_Voltage+0x16ac>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4b3d      	ldr	r3, [pc, #244]	; (8004be0 <Constant_Voltage+0x167c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4619      	mov	r1, r3
 8004af0:	4610      	mov	r0, r2
 8004af2:	f7fc f963 	bl	8000dbc <__aeabi_fmul>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4619      	mov	r1, r3
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7fc f856 	bl	8000bac <__addsf3>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461c      	mov	r4, r3
 8004b04:	4b43      	ldr	r3, [pc, #268]	; (8004c14 <Constant_Voltage+0x16b0>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <Constant_Voltage+0x1684>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fc f954 	bl	8000dbc <__aeabi_fmul>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4619      	mov	r1, r3
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7fc f847 	bl	8000bac <__addsf3>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	461c      	mov	r4, r3
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <Constant_Voltage+0x16b4>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b32      	ldr	r3, [pc, #200]	; (8004bf0 <Constant_Voltage+0x168c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4610      	mov	r0, r2
 8004b2e:	f7fc f945 	bl	8000dbc <__aeabi_fmul>
 8004b32:	4603      	mov	r3, r0
 8004b34:	4619      	mov	r1, r3
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7fc f838 	bl	8000bac <__addsf3>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b36      	ldr	r3, [pc, #216]	; (8004c1c <Constant_Voltage+0x16b8>)
 8004b42:	601a      	str	r2, [r3, #0]
	E=(r29*oNH)+(r30*oNB)+(r31*oNM)+(r32*oNS)+(r33*oZ)+(r34*oPS)+(r35*oPM);
 8004b44:	4b36      	ldr	r3, [pc, #216]	; (8004c20 <Constant_Voltage+0x16bc>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b36      	ldr	r3, [pc, #216]	; (8004c24 <Constant_Voltage+0x16c0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f7fc f934 	bl	8000dbc <__aeabi_fmul>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461c      	mov	r4, r3
 8004b58:	4b33      	ldr	r3, [pc, #204]	; (8004c28 <Constant_Voltage+0x16c4>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <Constant_Voltage+0x169c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4619      	mov	r1, r3
 8004b62:	4610      	mov	r0, r2
 8004b64:	f7fc f92a 	bl	8000dbc <__aeabi_fmul>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	f7fc f81d 	bl	8000bac <__addsf3>
 8004b72:	4603      	mov	r3, r0
 8004b74:	461c      	mov	r4, r3
 8004b76:	4b2d      	ldr	r3, [pc, #180]	; (8004c2c <Constant_Voltage+0x16c8>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <Constant_Voltage+0x1664>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4610      	mov	r0, r2
 8004b82:	f7fc f91b 	bl	8000dbc <__aeabi_fmul>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7fc f80e 	bl	8000bac <__addsf3>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461c      	mov	r4, r3
 8004b94:	4b26      	ldr	r3, [pc, #152]	; (8004c30 <Constant_Voltage+0x16cc>)
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <Constant_Voltage+0x166c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7fc f90c 	bl	8000dbc <__aeabi_fmul>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7fb ffff 	bl	8000bac <__addsf3>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	461c      	mov	r4, r3
 8004bb2:	e03f      	b.n	8004c34 <Constant_Voltage+0x16d0>
 8004bb4:	200012d0 	.word	0x200012d0
 8004bb8:	2000003c 	.word	0x2000003c
 8004bbc:	20000680 	.word	0x20000680
 8004bc0:	20000ab0 	.word	0x20000ab0
 8004bc4:	200012a0 	.word	0x200012a0
 8004bc8:	20000028 	.word	0x20000028
 8004bcc:	20000d44 	.word	0x20000d44
 8004bd0:	2000002c 	.word	0x2000002c
 8004bd4:	200008c8 	.word	0x200008c8
 8004bd8:	20000254 	.word	0x20000254
 8004bdc:	20000cc4 	.word	0x20000cc4
 8004be0:	20000030 	.word	0x20000030
 8004be4:	20001298 	.word	0x20001298
 8004be8:	20000034 	.word	0x20000034
 8004bec:	20000c8c 	.word	0x20000c8c
 8004bf0:	20000038 	.word	0x20000038
 8004bf4:	200008dc 	.word	0x200008dc
 8004bf8:	20000ad0 	.word	0x20000ad0
 8004bfc:	200010c8 	.word	0x200010c8
 8004c00:	20000024 	.word	0x20000024
 8004c04:	200012b0 	.word	0x200012b0
 8004c08:	200012c4 	.word	0x200012c4
 8004c0c:	200006b8 	.word	0x200006b8
 8004c10:	200008b8 	.word	0x200008b8
 8004c14:	20000ca4 	.word	0x20000ca4
 8004c18:	20000690 	.word	0x20000690
 8004c1c:	2000067c 	.word	0x2000067c
 8004c20:	200006b0 	.word	0x200006b0
 8004c24:	20000020 	.word	0x20000020
 8004c28:	20000ef0 	.word	0x20000ef0
 8004c2c:	200008cc 	.word	0x200008cc
 8004c30:	2000091c 	.word	0x2000091c
 8004c34:	4b91      	ldr	r3, [pc, #580]	; (8004e7c <Constant_Voltage+0x1918>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b91      	ldr	r3, [pc, #580]	; (8004e80 <Constant_Voltage+0x191c>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f7fc f8bc 	bl	8000dbc <__aeabi_fmul>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4619      	mov	r1, r3
 8004c48:	4620      	mov	r0, r4
 8004c4a:	f7fb ffaf 	bl	8000bac <__addsf3>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	461c      	mov	r4, r3
 8004c52:	4b8c      	ldr	r3, [pc, #560]	; (8004e84 <Constant_Voltage+0x1920>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b8c      	ldr	r3, [pc, #560]	; (8004e88 <Constant_Voltage+0x1924>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	4610      	mov	r0, r2
 8004c5e:	f7fc f8ad 	bl	8000dbc <__aeabi_fmul>
 8004c62:	4603      	mov	r3, r0
 8004c64:	4619      	mov	r1, r3
 8004c66:	4620      	mov	r0, r4
 8004c68:	f7fb ffa0 	bl	8000bac <__addsf3>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461c      	mov	r4, r3
 8004c70:	4b86      	ldr	r3, [pc, #536]	; (8004e8c <Constant_Voltage+0x1928>)
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	4b86      	ldr	r3, [pc, #536]	; (8004e90 <Constant_Voltage+0x192c>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fc f89e 	bl	8000dbc <__aeabi_fmul>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4619      	mov	r1, r3
 8004c84:	4620      	mov	r0, r4
 8004c86:	f7fb ff91 	bl	8000bac <__addsf3>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <Constant_Voltage+0x1930>)
 8004c90:	601a      	str	r2, [r3, #0]
	F=(r36*oNH)+(r37*oNH)+(r38*oNB)+(r39*oNM)+(r40*oNS)+(r41*oZ)+(r42*oPS);
 8004c92:	4b81      	ldr	r3, [pc, #516]	; (8004e98 <Constant_Voltage+0x1934>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b81      	ldr	r3, [pc, #516]	; (8004e9c <Constant_Voltage+0x1938>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	f7fc f88d 	bl	8000dbc <__aeabi_fmul>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	461c      	mov	r4, r3
 8004ca6:	4b7e      	ldr	r3, [pc, #504]	; (8004ea0 <Constant_Voltage+0x193c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b7c      	ldr	r3, [pc, #496]	; (8004e9c <Constant_Voltage+0x1938>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f7fc f883 	bl	8000dbc <__aeabi_fmul>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f7fb ff76 	bl	8000bac <__addsf3>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <Constant_Voltage+0x1940>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	4b77      	ldr	r3, [pc, #476]	; (8004ea8 <Constant_Voltage+0x1944>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f7fc f874 	bl	8000dbc <__aeabi_fmul>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4620      	mov	r0, r4
 8004cda:	f7fb ff67 	bl	8000bac <__addsf3>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461c      	mov	r4, r3
 8004ce2:	4b72      	ldr	r3, [pc, #456]	; (8004eac <Constant_Voltage+0x1948>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b72      	ldr	r3, [pc, #456]	; (8004eb0 <Constant_Voltage+0x194c>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4619      	mov	r1, r3
 8004cec:	4610      	mov	r0, r2
 8004cee:	f7fc f865 	bl	8000dbc <__aeabi_fmul>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7fb ff58 	bl	8000bac <__addsf3>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	461c      	mov	r4, r3
 8004d00:	4b6c      	ldr	r3, [pc, #432]	; (8004eb4 <Constant_Voltage+0x1950>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b6c      	ldr	r3, [pc, #432]	; (8004eb8 <Constant_Voltage+0x1954>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f7fc f856 	bl	8000dbc <__aeabi_fmul>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4619      	mov	r1, r3
 8004d14:	4620      	mov	r0, r4
 8004d16:	f7fb ff49 	bl	8000bac <__addsf3>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	461c      	mov	r4, r3
 8004d1e:	4b67      	ldr	r3, [pc, #412]	; (8004ebc <Constant_Voltage+0x1958>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4b57      	ldr	r3, [pc, #348]	; (8004e80 <Constant_Voltage+0x191c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f7fc f847 	bl	8000dbc <__aeabi_fmul>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4619      	mov	r1, r3
 8004d32:	4620      	mov	r0, r4
 8004d34:	f7fb ff3a 	bl	8000bac <__addsf3>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461c      	mov	r4, r3
 8004d3c:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <Constant_Voltage+0x195c>)
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	4b51      	ldr	r3, [pc, #324]	; (8004e88 <Constant_Voltage+0x1924>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7fc f838 	bl	8000dbc <__aeabi_fmul>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4620      	mov	r0, r4
 8004d52:	f7fb ff2b 	bl	8000bac <__addsf3>
 8004d56:	4603      	mov	r3, r0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <Constant_Voltage+0x1960>)
 8004d5c:	601a      	str	r2, [r3, #0]
	G=(r43*oNH)+(r44*oNH)+(r45*oNH)+(r46*oNB)+(r47*oNM)+(r48*oNS)+(r49*oZ);
 8004d5e:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <Constant_Voltage+0x1964>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4b4e      	ldr	r3, [pc, #312]	; (8004e9c <Constant_Voltage+0x1938>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fc f827 	bl	8000dbc <__aeabi_fmul>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	461c      	mov	r4, r3
 8004d72:	4b56      	ldr	r3, [pc, #344]	; (8004ecc <Constant_Voltage+0x1968>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	4b49      	ldr	r3, [pc, #292]	; (8004e9c <Constant_Voltage+0x1938>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f7fc f81d 	bl	8000dbc <__aeabi_fmul>
 8004d82:	4603      	mov	r3, r0
 8004d84:	4619      	mov	r1, r3
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7fb ff10 	bl	8000bac <__addsf3>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	461c      	mov	r4, r3
 8004d90:	4b4f      	ldr	r3, [pc, #316]	; (8004ed0 <Constant_Voltage+0x196c>)
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <Constant_Voltage+0x1938>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	f7fc f80e 	bl	8000dbc <__aeabi_fmul>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4619      	mov	r1, r3
 8004da4:	4620      	mov	r0, r4
 8004da6:	f7fb ff01 	bl	8000bac <__addsf3>
 8004daa:	4603      	mov	r3, r0
 8004dac:	461c      	mov	r4, r3
 8004dae:	4b49      	ldr	r3, [pc, #292]	; (8004ed4 <Constant_Voltage+0x1970>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b3d      	ldr	r3, [pc, #244]	; (8004ea8 <Constant_Voltage+0x1944>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f7fb ffff 	bl	8000dbc <__aeabi_fmul>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f7fb fef2 	bl	8000bac <__addsf3>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461c      	mov	r4, r3
 8004dcc:	4b42      	ldr	r3, [pc, #264]	; (8004ed8 <Constant_Voltage+0x1974>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b37      	ldr	r3, [pc, #220]	; (8004eb0 <Constant_Voltage+0x194c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	4610      	mov	r0, r2
 8004dd8:	f7fb fff0 	bl	8000dbc <__aeabi_fmul>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4619      	mov	r1, r3
 8004de0:	4620      	mov	r0, r4
 8004de2:	f7fb fee3 	bl	8000bac <__addsf3>
 8004de6:	4603      	mov	r3, r0
 8004de8:	461c      	mov	r4, r3
 8004dea:	4b3c      	ldr	r3, [pc, #240]	; (8004edc <Constant_Voltage+0x1978>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b32      	ldr	r3, [pc, #200]	; (8004eb8 <Constant_Voltage+0x1954>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4619      	mov	r1, r3
 8004df4:	4610      	mov	r0, r2
 8004df6:	f7fb ffe1 	bl	8000dbc <__aeabi_fmul>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f7fb fed4 	bl	8000bac <__addsf3>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461c      	mov	r4, r3
 8004e08:	4b35      	ldr	r3, [pc, #212]	; (8004ee0 <Constant_Voltage+0x197c>)
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <Constant_Voltage+0x191c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4619      	mov	r1, r3
 8004e12:	4610      	mov	r0, r2
 8004e14:	f7fb ffd2 	bl	8000dbc <__aeabi_fmul>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	f7fb fec5 	bl	8000bac <__addsf3>
 8004e22:	4603      	mov	r3, r0
 8004e24:	461a      	mov	r2, r3
 8004e26:	4b2f      	ldr	r3, [pc, #188]	; (8004ee4 <Constant_Voltage+0x1980>)
 8004e28:	601a      	str	r2, [r3, #0]

	H=r1+r2+r3+r4+r5+r6+r7+r8+r9+r10+r11+r12+r13+r14+r15+r16+ r17+ r18+ r19+ r20+ r21+ r22+ r23+ r24+r25+r26+r27+r28+r29+r30+r31+r32+r33+r34+r35+r36+r37+r38+r39+r40+r41+r42+r43+r44+r45+r46+r47+r48+r49;
 8004e2a:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <Constant_Voltage+0x1984>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	4b2f      	ldr	r3, [pc, #188]	; (8004eec <Constant_Voltage+0x1988>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	4610      	mov	r0, r2
 8004e36:	f7fb feb9 	bl	8000bac <__addsf3>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b2c      	ldr	r3, [pc, #176]	; (8004ef0 <Constant_Voltage+0x198c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4619      	mov	r1, r3
 8004e44:	4610      	mov	r0, r2
 8004e46:	f7fb feb1 	bl	8000bac <__addsf3>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <Constant_Voltage+0x1990>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fb fea9 	bl	8000bac <__addsf3>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <Constant_Voltage+0x1994>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f7fb fea1 	bl	8000bac <__addsf3>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b23      	ldr	r3, [pc, #140]	; (8004efc <Constant_Voltage+0x1998>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4619      	mov	r1, r3
 8004e74:	4610      	mov	r0, r2
 8004e76:	f7fb fe99 	bl	8000bac <__addsf3>
 8004e7a:	e041      	b.n	8004f00 <Constant_Voltage+0x199c>
 8004e7c:	20000cb0 	.word	0x20000cb0
 8004e80:	20000254 	.word	0x20000254
 8004e84:	20000eec 	.word	0x20000eec
 8004e88:	20000030 	.word	0x20000030
 8004e8c:	200010c0 	.word	0x200010c0
 8004e90:	20000034 	.word	0x20000034
 8004e94:	200010a8 	.word	0x200010a8
 8004e98:	200006ec 	.word	0x200006ec
 8004e9c:	20000020 	.word	0x20000020
 8004ea0:	20000ac8 	.word	0x20000ac8
 8004ea4:	20000c88 	.word	0x20000c88
 8004ea8:	20000024 	.word	0x20000024
 8004eac:	2000128c 	.word	0x2000128c
 8004eb0:	20000028 	.word	0x20000028
 8004eb4:	20000d24 	.word	0x20000d24
 8004eb8:	2000002c 	.word	0x2000002c
 8004ebc:	200006c8 	.word	0x200006c8
 8004ec0:	200006dc 	.word	0x200006dc
 8004ec4:	200012b8 	.word	0x200012b8
 8004ec8:	20001294 	.word	0x20001294
 8004ecc:	20000ab8 	.word	0x20000ab8
 8004ed0:	20000914 	.word	0x20000914
 8004ed4:	2000071c 	.word	0x2000071c
 8004ed8:	20001284 	.word	0x20001284
 8004edc:	20000d30 	.word	0x20000d30
 8004ee0:	20000cac 	.word	0x20000cac
 8004ee4:	20000c98 	.word	0x20000c98
 8004ee8:	200012cc 	.word	0x200012cc
 8004eec:	20000f08 	.word	0x20000f08
 8004ef0:	200006e4 	.word	0x200006e4
 8004ef4:	200008e8 	.word	0x200008e8
 8004ef8:	200012bc 	.word	0x200012bc
 8004efc:	200008d4 	.word	0x200008d4
 8004f00:	4603      	mov	r3, r0
 8004f02:	461a      	mov	r2, r3
 8004f04:	4b91      	ldr	r3, [pc, #580]	; (800514c <Constant_Voltage+0x1be8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fb fe4e 	bl	8000bac <__addsf3>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	4b8e      	ldr	r3, [pc, #568]	; (8005150 <Constant_Voltage+0x1bec>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	f7fb fe46 	bl	8000bac <__addsf3>
 8004f20:	4603      	mov	r3, r0
 8004f22:	461a      	mov	r2, r3
 8004f24:	4b8b      	ldr	r3, [pc, #556]	; (8005154 <Constant_Voltage+0x1bf0>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fb fe3e 	bl	8000bac <__addsf3>
 8004f30:	4603      	mov	r3, r0
 8004f32:	461a      	mov	r2, r3
 8004f34:	4b88      	ldr	r3, [pc, #544]	; (8005158 <Constant_Voltage+0x1bf4>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	f7fb fe36 	bl	8000bac <__addsf3>
 8004f40:	4603      	mov	r3, r0
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b85      	ldr	r3, [pc, #532]	; (800515c <Constant_Voltage+0x1bf8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f7fb fe2e 	bl	8000bac <__addsf3>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b82      	ldr	r3, [pc, #520]	; (8005160 <Constant_Voltage+0x1bfc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f7fb fe26 	bl	8000bac <__addsf3>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	4b7f      	ldr	r3, [pc, #508]	; (8005164 <Constant_Voltage+0x1c00>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7fb fe1e 	bl	8000bac <__addsf3>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b7c      	ldr	r3, [pc, #496]	; (8005168 <Constant_Voltage+0x1c04>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4610      	mov	r0, r2
 8004f7c:	f7fb fe16 	bl	8000bac <__addsf3>
 8004f80:	4603      	mov	r3, r0
 8004f82:	461a      	mov	r2, r3
 8004f84:	4b79      	ldr	r3, [pc, #484]	; (800516c <Constant_Voltage+0x1c08>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fb fe0e 	bl	8000bac <__addsf3>
 8004f90:	4603      	mov	r3, r0
 8004f92:	461a      	mov	r2, r3
 8004f94:	4b76      	ldr	r3, [pc, #472]	; (8005170 <Constant_Voltage+0x1c0c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	f7fb fe06 	bl	8000bac <__addsf3>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4b73      	ldr	r3, [pc, #460]	; (8005174 <Constant_Voltage+0x1c10>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fb fdfe 	bl	8000bac <__addsf3>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b70      	ldr	r3, [pc, #448]	; (8005178 <Constant_Voltage+0x1c14>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f7fb fdf6 	bl	8000bac <__addsf3>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	4b6d      	ldr	r3, [pc, #436]	; (800517c <Constant_Voltage+0x1c18>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	4610      	mov	r0, r2
 8004fcc:	f7fb fdee 	bl	8000bac <__addsf3>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <Constant_Voltage+0x1c1c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fb fde6 	bl	8000bac <__addsf3>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b67      	ldr	r3, [pc, #412]	; (8005184 <Constant_Voltage+0x1c20>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4619      	mov	r1, r3
 8004fea:	4610      	mov	r0, r2
 8004fec:	f7fb fdde 	bl	8000bac <__addsf3>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	4b64      	ldr	r3, [pc, #400]	; (8005188 <Constant_Voltage+0x1c24>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4610      	mov	r0, r2
 8004ffc:	f7fb fdd6 	bl	8000bac <__addsf3>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	4b61      	ldr	r3, [pc, #388]	; (800518c <Constant_Voltage+0x1c28>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f7fb fdce 	bl	8000bac <__addsf3>
 8005010:	4603      	mov	r3, r0
 8005012:	461a      	mov	r2, r3
 8005014:	4b5e      	ldr	r3, [pc, #376]	; (8005190 <Constant_Voltage+0x1c2c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4619      	mov	r1, r3
 800501a:	4610      	mov	r0, r2
 800501c:	f7fb fdc6 	bl	8000bac <__addsf3>
 8005020:	4603      	mov	r3, r0
 8005022:	461a      	mov	r2, r3
 8005024:	4b5b      	ldr	r3, [pc, #364]	; (8005194 <Constant_Voltage+0x1c30>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fb fdbe 	bl	8000bac <__addsf3>
 8005030:	4603      	mov	r3, r0
 8005032:	461a      	mov	r2, r3
 8005034:	4b58      	ldr	r3, [pc, #352]	; (8005198 <Constant_Voltage+0x1c34>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4619      	mov	r1, r3
 800503a:	4610      	mov	r0, r2
 800503c:	f7fb fdb6 	bl	8000bac <__addsf3>
 8005040:	4603      	mov	r3, r0
 8005042:	461a      	mov	r2, r3
 8005044:	4b55      	ldr	r3, [pc, #340]	; (800519c <Constant_Voltage+0x1c38>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4619      	mov	r1, r3
 800504a:	4610      	mov	r0, r2
 800504c:	f7fb fdae 	bl	8000bac <__addsf3>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	4b52      	ldr	r3, [pc, #328]	; (80051a0 <Constant_Voltage+0x1c3c>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fb fda6 	bl	8000bac <__addsf3>
 8005060:	4603      	mov	r3, r0
 8005062:	461a      	mov	r2, r3
 8005064:	4b4f      	ldr	r3, [pc, #316]	; (80051a4 <Constant_Voltage+0x1c40>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f7fb fd9e 	bl	8000bac <__addsf3>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <Constant_Voltage+0x1c44>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fb fd96 	bl	8000bac <__addsf3>
 8005080:	4603      	mov	r3, r0
 8005082:	461a      	mov	r2, r3
 8005084:	4b49      	ldr	r3, [pc, #292]	; (80051ac <Constant_Voltage+0x1c48>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f7fb fd8e 	bl	8000bac <__addsf3>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <Constant_Voltage+0x1c4c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f7fb fd86 	bl	8000bac <__addsf3>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b43      	ldr	r3, [pc, #268]	; (80051b4 <Constant_Voltage+0x1c50>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fb fd7e 	bl	8000bac <__addsf3>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b40      	ldr	r3, [pc, #256]	; (80051b8 <Constant_Voltage+0x1c54>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	4610      	mov	r0, r2
 80050bc:	f7fb fd76 	bl	8000bac <__addsf3>
 80050c0:	4603      	mov	r3, r0
 80050c2:	461a      	mov	r2, r3
 80050c4:	4b3d      	ldr	r3, [pc, #244]	; (80051bc <Constant_Voltage+0x1c58>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4619      	mov	r1, r3
 80050ca:	4610      	mov	r0, r2
 80050cc:	f7fb fd6e 	bl	8000bac <__addsf3>
 80050d0:	4603      	mov	r3, r0
 80050d2:	461a      	mov	r2, r3
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <Constant_Voltage+0x1c5c>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	4610      	mov	r0, r2
 80050dc:	f7fb fd66 	bl	8000bac <__addsf3>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	4b37      	ldr	r3, [pc, #220]	; (80051c4 <Constant_Voltage+0x1c60>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	4610      	mov	r0, r2
 80050ec:	f7fb fd5e 	bl	8000bac <__addsf3>
 80050f0:	4603      	mov	r3, r0
 80050f2:	461a      	mov	r2, r3
 80050f4:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <Constant_Voltage+0x1c64>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fb fd56 	bl	8000bac <__addsf3>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	4b31      	ldr	r3, [pc, #196]	; (80051cc <Constant_Voltage+0x1c68>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f7fb fd4e 	bl	8000bac <__addsf3>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	4b2e      	ldr	r3, [pc, #184]	; (80051d0 <Constant_Voltage+0x1c6c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f7fb fd46 	bl	8000bac <__addsf3>
 8005120:	4603      	mov	r3, r0
 8005122:	461a      	mov	r2, r3
 8005124:	4b2b      	ldr	r3, [pc, #172]	; (80051d4 <Constant_Voltage+0x1c70>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f7fb fd3e 	bl	8000bac <__addsf3>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	4b28      	ldr	r3, [pc, #160]	; (80051d8 <Constant_Voltage+0x1c74>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7fb fd36 	bl	8000bac <__addsf3>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	4b25      	ldr	r3, [pc, #148]	; (80051dc <Constant_Voltage+0x1c78>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	e04a      	b.n	80051e0 <Constant_Voltage+0x1c7c>
 800514a:	bf00      	nop
 800514c:	20000d2c 	.word	0x20000d2c
 8005150:	20000c94 	.word	0x20000c94
 8005154:	20000718 	.word	0x20000718
 8005158:	20000c78 	.word	0x20000c78
 800515c:	20000f00 	.word	0x20000f00
 8005160:	2000129c 	.word	0x2000129c
 8005164:	200012d0 	.word	0x200012d0
 8005168:	20000680 	.word	0x20000680
 800516c:	200012a0 	.word	0x200012a0
 8005170:	20000d44 	.word	0x20000d44
 8005174:	200008c8 	.word	0x200008c8
 8005178:	20000cc4 	.word	0x20000cc4
 800517c:	20001298 	.word	0x20001298
 8005180:	20000c8c 	.word	0x20000c8c
 8005184:	200008dc 	.word	0x200008dc
 8005188:	200010c8 	.word	0x200010c8
 800518c:	200012b0 	.word	0x200012b0
 8005190:	200012c4 	.word	0x200012c4
 8005194:	200006b8 	.word	0x200006b8
 8005198:	200008b8 	.word	0x200008b8
 800519c:	20000ca4 	.word	0x20000ca4
 80051a0:	20000690 	.word	0x20000690
 80051a4:	200006b0 	.word	0x200006b0
 80051a8:	20000ef0 	.word	0x20000ef0
 80051ac:	200008cc 	.word	0x200008cc
 80051b0:	2000091c 	.word	0x2000091c
 80051b4:	20000cb0 	.word	0x20000cb0
 80051b8:	20000eec 	.word	0x20000eec
 80051bc:	200010c0 	.word	0x200010c0
 80051c0:	200006ec 	.word	0x200006ec
 80051c4:	20000ac8 	.word	0x20000ac8
 80051c8:	20000c88 	.word	0x20000c88
 80051cc:	2000128c 	.word	0x2000128c
 80051d0:	20000d24 	.word	0x20000d24
 80051d4:	200006c8 	.word	0x200006c8
 80051d8:	200006dc 	.word	0x200006dc
 80051dc:	20001294 	.word	0x20001294
 80051e0:	4619      	mov	r1, r3
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7fb fce2 	bl	8000bac <__addsf3>
 80051e8:	4603      	mov	r3, r0
 80051ea:	461a      	mov	r2, r3
 80051ec:	4b76      	ldr	r3, [pc, #472]	; (80053c8 <Constant_Voltage+0x1e64>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f7fb fcda 	bl	8000bac <__addsf3>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b73      	ldr	r3, [pc, #460]	; (80053cc <Constant_Voltage+0x1e68>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f7fb fcd2 	bl	8000bac <__addsf3>
 8005208:	4603      	mov	r3, r0
 800520a:	461a      	mov	r2, r3
 800520c:	4b70      	ldr	r3, [pc, #448]	; (80053d0 <Constant_Voltage+0x1e6c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f7fb fcca 	bl	8000bac <__addsf3>
 8005218:	4603      	mov	r3, r0
 800521a:	461a      	mov	r2, r3
 800521c:	4b6d      	ldr	r3, [pc, #436]	; (80053d4 <Constant_Voltage+0x1e70>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f7fb fcc2 	bl	8000bac <__addsf3>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	4b6a      	ldr	r3, [pc, #424]	; (80053d8 <Constant_Voltage+0x1e74>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f7fb fcba 	bl	8000bac <__addsf3>
 8005238:	4603      	mov	r3, r0
 800523a:	461a      	mov	r2, r3
 800523c:	4b67      	ldr	r3, [pc, #412]	; (80053dc <Constant_Voltage+0x1e78>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4619      	mov	r1, r3
 8005242:	4610      	mov	r0, r2
 8005244:	f7fb fcb2 	bl	8000bac <__addsf3>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	4b64      	ldr	r3, [pc, #400]	; (80053e0 <Constant_Voltage+0x1e7c>)
 800524e:	601a      	str	r2, [r3, #0]

	step=(A+B+C+D+E+F+G)/H;
 8005250:	4b64      	ldr	r3, [pc, #400]	; (80053e4 <Constant_Voltage+0x1e80>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b64      	ldr	r3, [pc, #400]	; (80053e8 <Constant_Voltage+0x1e84>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	4610      	mov	r0, r2
 800525c:	f7fb fca6 	bl	8000bac <__addsf3>
 8005260:	4603      	mov	r3, r0
 8005262:	461a      	mov	r2, r3
 8005264:	4b61      	ldr	r3, [pc, #388]	; (80053ec <Constant_Voltage+0x1e88>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4619      	mov	r1, r3
 800526a:	4610      	mov	r0, r2
 800526c:	f7fb fc9e 	bl	8000bac <__addsf3>
 8005270:	4603      	mov	r3, r0
 8005272:	461a      	mov	r2, r3
 8005274:	4b5e      	ldr	r3, [pc, #376]	; (80053f0 <Constant_Voltage+0x1e8c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fb fc96 	bl	8000bac <__addsf3>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	4b5b      	ldr	r3, [pc, #364]	; (80053f4 <Constant_Voltage+0x1e90>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4619      	mov	r1, r3
 800528a:	4610      	mov	r0, r2
 800528c:	f7fb fc8e 	bl	8000bac <__addsf3>
 8005290:	4603      	mov	r3, r0
 8005292:	461a      	mov	r2, r3
 8005294:	4b58      	ldr	r3, [pc, #352]	; (80053f8 <Constant_Voltage+0x1e94>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4619      	mov	r1, r3
 800529a:	4610      	mov	r0, r2
 800529c:	f7fb fc86 	bl	8000bac <__addsf3>
 80052a0:	4603      	mov	r3, r0
 80052a2:	461a      	mov	r2, r3
 80052a4:	4b55      	ldr	r3, [pc, #340]	; (80053fc <Constant_Voltage+0x1e98>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4619      	mov	r1, r3
 80052aa:	4610      	mov	r0, r2
 80052ac:	f7fb fc7e 	bl	8000bac <__addsf3>
 80052b0:	4603      	mov	r3, r0
 80052b2:	461a      	mov	r2, r3
 80052b4:	4b4a      	ldr	r3, [pc, #296]	; (80053e0 <Constant_Voltage+0x1e7c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fb fe32 	bl	8000f24 <__aeabi_fdiv>
 80052c0:	4603      	mov	r3, r0
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b4e      	ldr	r3, [pc, #312]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052c6:	601a      	str	r2, [r3, #0]

	dc=dc+step;
 80052c8:	4b4e      	ldr	r3, [pc, #312]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	4b4c      	ldr	r3, [pc, #304]	; (8005400 <Constant_Voltage+0x1e9c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	4610      	mov	r0, r2
 80052d4:	f7fb fc6a 	bl	8000bac <__addsf3>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	4b49      	ldr	r3, [pc, #292]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052de:	601a      	str	r2, [r3, #0]

	if(dc>=85)	dc=85;
 80052e0:	4b48      	ldr	r3, [pc, #288]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4948      	ldr	r1, [pc, #288]	; (8005408 <Constant_Voltage+0x1ea4>)
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb ff1a 	bl	8001120 <__aeabi_fcmpge>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <Constant_Voltage+0x1d94>
 80052f2:	4b44      	ldr	r3, [pc, #272]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052f4:	4a44      	ldr	r2, [pc, #272]	; (8005408 <Constant_Voltage+0x1ea4>)
 80052f6:	601a      	str	r2, [r3, #0]
	if(dc<=0)	dc=0;
 80052f8:	4b42      	ldr	r3, [pc, #264]	; (8005404 <Constant_Voltage+0x1ea0>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f04f 0100 	mov.w	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f7fb ff03 	bl	800110c <__aeabi_fcmple>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <Constant_Voltage+0x1db0>
 800530c:	4b3d      	ldr	r3, [pc, #244]	; (8005404 <Constant_Voltage+0x1ea0>)
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

	duty = dc/100;
 8005314:	4b3b      	ldr	r3, [pc, #236]	; (8005404 <Constant_Voltage+0x1ea0>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	493c      	ldr	r1, [pc, #240]	; (800540c <Constant_Voltage+0x1ea8>)
 800531a:	4618      	mov	r0, r3
 800531c:	f7fb fe02 	bl	8000f24 <__aeabi_fdiv>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <Constant_Voltage+0x1eac>)
 8005326:	601a      	str	r2, [r3, #0]
//		  	while(p>0)
//		  		p--;
//		  HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,0);
//	}

	if(	flag_trip_overvoltage == 1		||
 8005328:	4b3a      	ldr	r3, [pc, #232]	; (8005414 <Constant_Voltage+0x1eb0>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d02f      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		flag_trip_overtemperature == 1	||
 8005330:	4b39      	ldr	r3, [pc, #228]	; (8005418 <Constant_Voltage+0x1eb4>)
 8005332:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8005334:	2b01      	cmp	r3, #1
 8005336:	d02b      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		flag_trip_undertemperature == 1	||
 8005338:	4b38      	ldr	r3, [pc, #224]	; (800541c <Constant_Voltage+0x1eb8>)
 800533a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 800533c:	2b01      	cmp	r3, #1
 800533e:	d027      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		flag_trip_overcurrentcharge == 1||
 8005340:	4b37      	ldr	r3, [pc, #220]	; (8005420 <Constant_Voltage+0x1ebc>)
 8005342:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8005344:	2b01      	cmp	r3, #1
 8005346:	d023      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		flag_trip_SOCOverCharge == 1	||
 8005348:	4b36      	ldr	r3, [pc, #216]	; (8005424 <Constant_Voltage+0x1ec0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 800534c:	2b01      	cmp	r3, #1
 800534e:	d01f      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		flag_trip_shortcircuit == 1		||
 8005350:	4b35      	ldr	r3, [pc, #212]	; (8005428 <Constant_Voltage+0x1ec4>)
 8005352:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8005354:	2b01      	cmp	r3, #1
 8005356:	d01b      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		flag_trip_systemfailure == 1	||
 8005358:	4b34      	ldr	r3, [pc, #208]	; (800542c <Constant_Voltage+0x1ec8>)
 800535a:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 800535c:	2b01      	cmp	r3, #1
 800535e:	d017      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		Flag_ChargerShortCircuit == 1	||
 8005360:	4b33      	ldr	r3, [pc, #204]	; (8005430 <Constant_Voltage+0x1ecc>)
 8005362:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8005364:	2b01      	cmp	r3, #1
 8005366:	d013      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		Flag_ChargerOverCurrent == 1	||
 8005368:	4b32      	ldr	r3, [pc, #200]	; (8005434 <Constant_Voltage+0x1ed0>)
 800536a:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 800536c:	2b01      	cmp	r3, #1
 800536e:	d00f      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		Flag_ChargerOverTemperature == 1||
 8005370:	4b31      	ldr	r3, [pc, #196]	; (8005438 <Constant_Voltage+0x1ed4>)
 8005372:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8005374:	2b01      	cmp	r3, #1
 8005376:	d00b      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		Flag_ChargerOverVoltage == 1	||
 8005378:	4b30      	ldr	r3, [pc, #192]	; (800543c <Constant_Voltage+0x1ed8>)
 800537a:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 800537c:	2b01      	cmp	r3, #1
 800537e:	d007      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		Flag_MiniPC_LostCommunication==1||
 8005380:	4b2f      	ldr	r3, [pc, #188]	; (8005440 <Constant_Voltage+0x1edc>)
 8005382:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8005384:	2b01      	cmp	r3, #1
 8005386:	d003      	beq.n	8005390 <Constant_Voltage+0x1e2c>
		Flag_BMS_LostCommunication == 1  )
 8005388:	4b2e      	ldr	r3, [pc, #184]	; (8005444 <Constant_Voltage+0x1ee0>)
 800538a:	781b      	ldrb	r3, [r3, #0]
		Flag_MiniPC_LostCommunication==1||
 800538c:	2b01      	cmp	r3, #1
 800538e:	d106      	bne.n	800539e <Constant_Voltage+0x1e3a>
		{
			duty=0;
 8005390:	4b1f      	ldr	r3, [pc, #124]	; (8005410 <Constant_Voltage+0x1eac>)
 8005392:	f04f 0200 	mov.w	r2, #0
 8005396:	601a      	str	r2, [r3, #0]
			Charger_Mode = 2;
 8005398:	4b2b      	ldr	r3, [pc, #172]	; (8005448 <Constant_Voltage+0x1ee4>)
 800539a:	2202      	movs	r2, #2
 800539c:	701a      	strb	r2, [r3, #0]
		}
	TIM1->CCR1=duty*TIM1->ARR;
 800539e:	4b2b      	ldr	r3, [pc, #172]	; (800544c <Constant_Voltage+0x1ee8>)
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb fcb2 	bl	8000d0c <__aeabi_ui2f>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b19      	ldr	r3, [pc, #100]	; (8005410 <Constant_Voltage+0x1eac>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f7fb fd03 	bl	8000dbc <__aeabi_fmul>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4c24      	ldr	r4, [pc, #144]	; (800544c <Constant_Voltage+0x1ee8>)
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb fec4 	bl	8001148 <__aeabi_f2uiz>
 80053c0:	4603      	mov	r3, r0
 80053c2:	6363      	str	r3, [r4, #52]	; 0x34
}
 80053c4:	bf00      	nop
 80053c6:	bd98      	pop	{r3, r4, r7, pc}
 80053c8:	20000ab8 	.word	0x20000ab8
 80053cc:	20000914 	.word	0x20000914
 80053d0:	2000071c 	.word	0x2000071c
 80053d4:	20001284 	.word	0x20001284
 80053d8:	20000d30 	.word	0x20000d30
 80053dc:	20000cac 	.word	0x20000cac
 80053e0:	20000d20 	.word	0x20000d20
 80053e4:	20000710 	.word	0x20000710
 80053e8:	20000ab0 	.word	0x20000ab0
 80053ec:	20000ad0 	.word	0x20000ad0
 80053f0:	2000067c 	.word	0x2000067c
 80053f4:	200010a8 	.word	0x200010a8
 80053f8:	200012b8 	.word	0x200012b8
 80053fc:	20000c98 	.word	0x20000c98
 8005400:	200010a0 	.word	0x200010a0
 8005404:	200006c4 	.word	0x200006c4
 8005408:	42aa0000 	.word	0x42aa0000
 800540c:	42c80000 	.word	0x42c80000
 8005410:	2000126c 	.word	0x2000126c
 8005414:	200012a4 	.word	0x200012a4
 8005418:	200008b4 	.word	0x200008b4
 800541c:	20000ac4 	.word	0x20000ac4
 8005420:	20000d34 	.word	0x20000d34
 8005424:	20000699 	.word	0x20000699
 8005428:	200006b4 	.word	0x200006b4
 800542c:	200006e0 	.word	0x200006e0
 8005430:	200008ec 	.word	0x200008ec
 8005434:	200008d0 	.word	0x200008d0
 8005438:	200006ff 	.word	0x200006ff
 800543c:	200008f8 	.word	0x200008f8
 8005440:	20001268 	.word	0x20001268
 8005444:	200006da 	.word	0x200006da
 8005448:	20000720 	.word	0x20000720
 800544c:	40010000 	.word	0x40010000

08005450 <EEPROM_isDeviceReady>:
 *      Author: faiz
 */
#include "EEPROM.h"

void EEPROM_isDeviceReady(uint16_t addr)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	4603      	mov	r3, r0
 8005458:	80fb      	strh	r3, [r7, #6]
	if (HAL_I2C_IsDeviceReady(&hi2c1, addr, 3, 100)!=HAL_OK){
 800545a:	88f9      	ldrh	r1, [r7, #6]
 800545c:	2364      	movs	r3, #100	; 0x64
 800545e:	2203      	movs	r2, #3
 8005460:	4808      	ldr	r0, [pc, #32]	; (8005484 <EEPROM_isDeviceReady+0x34>)
 8005462:	f005 ff7b 	bl	800b35c <HAL_I2C_IsDeviceReady>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <EEPROM_isDeviceReady+0x2c>
		while(1){
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800546c:	2140      	movs	r1, #64	; 0x40
 800546e:	4806      	ldr	r0, [pc, #24]	; (8005488 <EEPROM_isDeviceReady+0x38>)
 8005470:	f005 fc2b 	bl	800acca <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8005474:	2064      	movs	r0, #100	; 0x64
 8005476:	f003 fb4d 	bl	8008b14 <HAL_Delay>
			HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800547a:	e7f7      	b.n	800546c <EEPROM_isDeviceReady+0x1c>
		}
	}
}
 800547c:	bf00      	nop
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	200013c0 	.word	0x200013c0
 8005488:	40020800 	.word	0x40020800

0800548c <EEPROM_WriteData>:

void EEPROM_WriteData(uint16_t addr, uint8_t data)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b086      	sub	sp, #24
 8005490:	af04      	add	r7, sp, #16
 8005492:	4603      	mov	r3, r0
 8005494:	460a      	mov	r2, r1
 8005496:	80fb      	strh	r3, [r7, #6]
 8005498:	4613      	mov	r3, r2
 800549a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1,EEPROM_ADDRESS,addr,64,&data,1,10);
 800549c:	88fa      	ldrh	r2, [r7, #6]
 800549e:	230a      	movs	r3, #10
 80054a0:	9302      	str	r3, [sp, #8]
 80054a2:	2301      	movs	r3, #1
 80054a4:	9301      	str	r3, [sp, #4]
 80054a6:	1d7b      	adds	r3, r7, #5
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2340      	movs	r3, #64	; 0x40
 80054ac:	21a0      	movs	r1, #160	; 0xa0
 80054ae:	4805      	ldr	r0, [pc, #20]	; (80054c4 <EEPROM_WriteData+0x38>)
 80054b0:	f005 fe5a 	bl	800b168 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80054b4:	2064      	movs	r0, #100	; 0x64
 80054b6:	f003 fb2d 	bl	8008b14 <HAL_Delay>
}
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200013c0 	.word	0x200013c0

080054c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80054ce:	463b      	mov	r3, r7
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	605a      	str	r2, [r3, #4]
 80054d6:	609a      	str	r2, [r3, #8]
 80054d8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80054da:	4b51      	ldr	r3, [pc, #324]	; (8005620 <MX_ADC1_Init+0x158>)
 80054dc:	4a51      	ldr	r2, [pc, #324]	; (8005624 <MX_ADC1_Init+0x15c>)
 80054de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80054e0:	4b4f      	ldr	r3, [pc, #316]	; (8005620 <MX_ADC1_Init+0x158>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80054e6:	4b4e      	ldr	r3, [pc, #312]	; (8005620 <MX_ADC1_Init+0x158>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80054ec:	4b4c      	ldr	r3, [pc, #304]	; (8005620 <MX_ADC1_Init+0x158>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80054f2:	4b4b      	ldr	r3, [pc, #300]	; (8005620 <MX_ADC1_Init+0x158>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80054f8:	4b49      	ldr	r3, [pc, #292]	; (8005620 <MX_ADC1_Init+0x158>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80054fe:	4b48      	ldr	r3, [pc, #288]	; (8005620 <MX_ADC1_Init+0x158>)
 8005500:	2200      	movs	r2, #0
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005504:	4b46      	ldr	r3, [pc, #280]	; (8005620 <MX_ADC1_Init+0x158>)
 8005506:	4a48      	ldr	r2, [pc, #288]	; (8005628 <MX_ADC1_Init+0x160>)
 8005508:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800550a:	4b45      	ldr	r3, [pc, #276]	; (8005620 <MX_ADC1_Init+0x158>)
 800550c:	2200      	movs	r2, #0
 800550e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8005510:	4b43      	ldr	r3, [pc, #268]	; (8005620 <MX_ADC1_Init+0x158>)
 8005512:	2208      	movs	r2, #8
 8005514:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005516:	4b42      	ldr	r3, [pc, #264]	; (8005620 <MX_ADC1_Init+0x158>)
 8005518:	2201      	movs	r2, #1
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800551c:	4b40      	ldr	r3, [pc, #256]	; (8005620 <MX_ADC1_Init+0x158>)
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005522:	483f      	ldr	r0, [pc, #252]	; (8005620 <MX_ADC1_Init+0x158>)
 8005524:	f003 fb18 	bl	8008b58 <HAL_ADC_Init>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 800552e:	f001 fc01 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005532:	2301      	movs	r3, #1
 8005534:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005536:	2301      	movs	r3, #1
 8005538:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800553a:	2306      	movs	r3, #6
 800553c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800553e:	463b      	mov	r3, r7
 8005540:	4619      	mov	r1, r3
 8005542:	4837      	ldr	r0, [pc, #220]	; (8005620 <MX_ADC1_Init+0x158>)
 8005544:	f003 fc30 	bl	8008da8 <HAL_ADC_ConfigChannel>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800554e:	f001 fbf1 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005552:	2302      	movs	r3, #2
 8005554:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005556:	2302      	movs	r3, #2
 8005558:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800555a:	463b      	mov	r3, r7
 800555c:	4619      	mov	r1, r3
 800555e:	4830      	ldr	r0, [pc, #192]	; (8005620 <MX_ADC1_Init+0x158>)
 8005560:	f003 fc22 	bl	8008da8 <HAL_ADC_ConfigChannel>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800556a:	f001 fbe3 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800556e:	2303      	movs	r3, #3
 8005570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005572:	2303      	movs	r3, #3
 8005574:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005576:	463b      	mov	r3, r7
 8005578:	4619      	mov	r1, r3
 800557a:	4829      	ldr	r0, [pc, #164]	; (8005620 <MX_ADC1_Init+0x158>)
 800557c:	f003 fc14 	bl	8008da8 <HAL_ADC_ConfigChannel>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8005586:	f001 fbd5 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800558a:	230e      	movs	r3, #14
 800558c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800558e:	2304      	movs	r3, #4
 8005590:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005592:	463b      	mov	r3, r7
 8005594:	4619      	mov	r1, r3
 8005596:	4822      	ldr	r0, [pc, #136]	; (8005620 <MX_ADC1_Init+0x158>)
 8005598:	f003 fc06 	bl	8008da8 <HAL_ADC_ConfigChannel>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80055a2:	f001 fbc7 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80055a6:	230f      	movs	r3, #15
 80055a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80055aa:	2305      	movs	r3, #5
 80055ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ae:	463b      	mov	r3, r7
 80055b0:	4619      	mov	r1, r3
 80055b2:	481b      	ldr	r0, [pc, #108]	; (8005620 <MX_ADC1_Init+0x158>)
 80055b4:	f003 fbf8 	bl	8008da8 <HAL_ADC_ConfigChannel>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80055be:	f001 fbb9 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80055c2:	230b      	movs	r3, #11
 80055c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80055c6:	2306      	movs	r3, #6
 80055c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055ca:	463b      	mov	r3, r7
 80055cc:	4619      	mov	r1, r3
 80055ce:	4814      	ldr	r0, [pc, #80]	; (8005620 <MX_ADC1_Init+0x158>)
 80055d0:	f003 fbea 	bl	8008da8 <HAL_ADC_ConfigChannel>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80055da:	f001 fbab 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80055de:	230c      	movs	r3, #12
 80055e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80055e2:	2307      	movs	r3, #7
 80055e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80055e6:	463b      	mov	r3, r7
 80055e8:	4619      	mov	r1, r3
 80055ea:	480d      	ldr	r0, [pc, #52]	; (8005620 <MX_ADC1_Init+0x158>)
 80055ec:	f003 fbdc 	bl	8008da8 <HAL_ADC_ConfigChannel>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80055f6:	f001 fb9d 	bl	8006d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80055fa:	2308      	movs	r3, #8
 80055fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80055fe:	2308      	movs	r3, #8
 8005600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005602:	463b      	mov	r3, r7
 8005604:	4619      	mov	r1, r3
 8005606:	4806      	ldr	r0, [pc, #24]	; (8005620 <MX_ADC1_Init+0x158>)
 8005608:	f003 fbce 	bl	8008da8 <HAL_ADC_ConfigChannel>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8005612:	f001 fb8f 	bl	8006d34 <Error_Handler>
  }

}
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	200012d8 	.word	0x200012d8
 8005624:	40012000 	.word	0x40012000
 8005628:	0f000001 	.word	0x0f000001

0800562c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08c      	sub	sp, #48	; 0x30
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005634:	f107 031c 	add.w	r3, r7, #28
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a4a      	ldr	r2, [pc, #296]	; (8005774 <HAL_ADC_MspInit+0x148>)
 800564a:	4293      	cmp	r3, r2
 800564c:	f040 808d 	bne.w	800576a <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005650:	2300      	movs	r3, #0
 8005652:	61bb      	str	r3, [r7, #24]
 8005654:	4b48      	ldr	r3, [pc, #288]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005658:	4a47      	ldr	r2, [pc, #284]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800565a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800565e:	6453      	str	r3, [r2, #68]	; 0x44
 8005660:	4b45      	ldr	r3, [pc, #276]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	61bb      	str	r3, [r7, #24]
 800566a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800566c:	2300      	movs	r3, #0
 800566e:	617b      	str	r3, [r7, #20]
 8005670:	4b41      	ldr	r3, [pc, #260]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	4a40      	ldr	r2, [pc, #256]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005676:	f043 0304 	orr.w	r3, r3, #4
 800567a:	6313      	str	r3, [r2, #48]	; 0x30
 800567c:	4b3e      	ldr	r3, [pc, #248]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	f003 0304 	and.w	r3, r3, #4
 8005684:	617b      	str	r3, [r7, #20]
 8005686:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005688:	2300      	movs	r3, #0
 800568a:	613b      	str	r3, [r7, #16]
 800568c:	4b3a      	ldr	r3, [pc, #232]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005690:	4a39      	ldr	r2, [pc, #228]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 8005692:	f043 0301 	orr.w	r3, r3, #1
 8005696:	6313      	str	r3, [r2, #48]	; 0x30
 8005698:	4b37      	ldr	r3, [pc, #220]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 800569a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	613b      	str	r3, [r7, #16]
 80056a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a4:	2300      	movs	r3, #0
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	4b33      	ldr	r3, [pc, #204]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	4a32      	ldr	r2, [pc, #200]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 80056ae:	f043 0302 	orr.w	r3, r3, #2
 80056b2:	6313      	str	r3, [r2, #48]	; 0x30
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_ADC_MspInit+0x14c>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 80056c0:	2336      	movs	r3, #54	; 0x36
 80056c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056c4:	2303      	movs	r3, #3
 80056c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056cc:	f107 031c 	add.w	r3, r7, #28
 80056d0:	4619      	mov	r1, r3
 80056d2:	482a      	ldr	r0, [pc, #168]	; (800577c <HAL_ADC_MspInit+0x150>)
 80056d4:	f005 f92c 	bl	800a930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80056d8:	230e      	movs	r3, #14
 80056da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056dc:	2303      	movs	r3, #3
 80056de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e4:	f107 031c 	add.w	r3, r7, #28
 80056e8:	4619      	mov	r1, r3
 80056ea:	4825      	ldr	r0, [pc, #148]	; (8005780 <HAL_ADC_MspInit+0x154>)
 80056ec:	f005 f920 	bl	800a930 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056f0:	2301      	movs	r3, #1
 80056f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80056f4:	2303      	movs	r3, #3
 80056f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fc:	f107 031c 	add.w	r3, r7, #28
 8005700:	4619      	mov	r1, r3
 8005702:	4820      	ldr	r0, [pc, #128]	; (8005784 <HAL_ADC_MspInit+0x158>)
 8005704:	f005 f914 	bl	800a930 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005708:	4b1f      	ldr	r3, [pc, #124]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800570a:	4a20      	ldr	r2, [pc, #128]	; (800578c <HAL_ADC_MspInit+0x160>)
 800570c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800570e:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005710:	2200      	movs	r2, #0
 8005712:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005714:	4b1c      	ldr	r3, [pc, #112]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005716:	2200      	movs	r2, #0
 8005718:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800571c:	2200      	movs	r2, #0
 800571e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005720:	4b19      	ldr	r3, [pc, #100]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005722:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005726:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005728:	4b17      	ldr	r3, [pc, #92]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800572a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800572e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005730:	4b15      	ldr	r3, [pc, #84]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005732:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005736:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005738:	4b13      	ldr	r3, [pc, #76]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800573a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800573e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8005740:	4b11      	ldr	r3, [pc, #68]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005742:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005746:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005748:	4b0f      	ldr	r3, [pc, #60]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 800574a:	2200      	movs	r2, #0
 800574c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800574e:	480e      	ldr	r0, [pc, #56]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005750:	f004 fd60 	bl	800a214 <HAL_DMA_Init>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800575a:	f001 faeb 	bl	8006d34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a09      	ldr	r2, [pc, #36]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
 8005764:	4a08      	ldr	r2, [pc, #32]	; (8005788 <HAL_ADC_MspInit+0x15c>)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800576a:	bf00      	nop
 800576c:	3730      	adds	r7, #48	; 0x30
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40012000 	.word	0x40012000
 8005778:	40023800 	.word	0x40023800
 800577c:	40020800 	.word	0x40020800
 8005780:	40020000 	.word	0x40020000
 8005784:	40020400 	.word	0x40020400
 8005788:	20001320 	.word	0x20001320
 800578c:	40026410 	.word	0x40026410

08005790 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <MX_CAN1_Init+0x64>)
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <MX_CAN1_Init+0x68>)
 8005798:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800579a:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <MX_CAN1_Init+0x64>)
 800579c:	2204      	movs	r2, #4
 800579e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80057a0:	4b14      	ldr	r3, [pc, #80]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 80057ac:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057ae:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 80057b2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80057b4:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057ba:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80057bc:	4b0d      	ldr	r3, [pc, #52]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057be:	2200      	movs	r2, #0
 80057c0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80057c2:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80057ce:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80057da:	4b06      	ldr	r3, [pc, #24]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057dc:	2200      	movs	r2, #0
 80057de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80057e0:	4804      	ldr	r0, [pc, #16]	; (80057f4 <MX_CAN1_Init+0x64>)
 80057e2:	f003 fd87 	bl	80092f4 <HAL_CAN_Init>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80057ec:	f001 faa2 	bl	8006d34 <Error_Handler>
  }

}
 80057f0:	bf00      	nop
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20001398 	.word	0x20001398
 80057f8:	40006400 	.word	0x40006400

080057fc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	f107 0314 	add.w	r3, r7, #20
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_CAN_MspInit+0x94>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d134      	bne.n	8005888 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005828:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800582c:	6413      	str	r3, [r2, #64]	; 0x40
 800582e:	4b19      	ldr	r3, [pc, #100]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b15      	ldr	r3, [pc, #84]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	4a14      	ldr	r2, [pc, #80]	; (8005894 <HAL_CAN_MspInit+0x98>)
 8005844:	f043 0301 	orr.w	r3, r3, #1
 8005848:	6313      	str	r3, [r2, #48]	; 0x30
 800584a:	4b12      	ldr	r3, [pc, #72]	; (8005894 <HAL_CAN_MspInit+0x98>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	f003 0301 	and.w	r3, r3, #1
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005856:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800585a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585c:	2302      	movs	r3, #2
 800585e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005860:	2300      	movs	r3, #0
 8005862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005864:	2303      	movs	r3, #3
 8005866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005868:	2309      	movs	r3, #9
 800586a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	4809      	ldr	r0, [pc, #36]	; (8005898 <HAL_CAN_MspInit+0x9c>)
 8005874:	f005 f85c 	bl	800a930 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8005878:	2200      	movs	r2, #0
 800587a:	2100      	movs	r1, #0
 800587c:	2014      	movs	r0, #20
 800587e:	f004 fc92 	bl	800a1a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005882:	2014      	movs	r0, #20
 8005884:	f004 fcab 	bl	800a1de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8005888:	bf00      	nop
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40006400 	.word	0x40006400
 8005894:	40023800 	.word	0x40023800
 8005898:	40020000 	.word	0x40020000

0800589c <CAN_Setting>:
  }
} 

/* USER CODE BEGIN 1 */
void CAN_Setting(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
/* Configure the CAN Filter */
	CAN_FilterTypeDef  sFilterConfig;
	sFilterConfig.FilterBank = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80058aa:	2301      	movs	r3, #1
 80058ac:	61fb      	str	r3, [r7, #28]
	//sFilterConfig.FilterIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterIdHigh = 0x0000;
 80058ae:	2300      	movs	r3, #0
 80058b0:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x00B0 << 5;
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80058b6:	2300      	movs	r3, #0
 80058b8:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80058ba:	2300      	movs	r3, #0
 80058bc:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80058c2:	2301      	movs	r3, #1
 80058c4:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 80058c6:	230e      	movs	r3, #14
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) Error_Handler();
 80058ca:	463b      	mov	r3, r7
 80058cc:	4619      	mov	r1, r3
 80058ce:	4810      	ldr	r0, [pc, #64]	; (8005910 <CAN_Setting+0x74>)
 80058d0:	f003 fe0c 	bl	80094ec <HAL_CAN_ConfigFilter>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <CAN_Setting+0x42>
 80058da:	f001 fa2b 	bl	8006d34 <Error_Handler>

	/* Start the CAN peripheral */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) Error_Handler();
 80058de:	480c      	ldr	r0, [pc, #48]	; (8005910 <CAN_Setting+0x74>)
 80058e0:	f003 fee4 	bl	80096ac <HAL_CAN_Start>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <CAN_Setting+0x52>
 80058ea:	f001 fa23 	bl	8006d34 <Error_Handler>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80058ee:	2102      	movs	r1, #2
 80058f0:	4807      	ldr	r0, [pc, #28]	; (8005910 <CAN_Setting+0x74>)
 80058f2:	f004 f93e 	bl	8009b72 <HAL_CAN_ActivateNotification>

	/* Configure Transmission process */
	Tx_Header.TransmitGlobalTime = DISABLE;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <CAN_Setting+0x78>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	751a      	strb	r2, [r3, #20]
	Tx_Header.RTR = CAN_RTR_DATA;
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <CAN_Setting+0x78>)
 80058fe:	2200      	movs	r2, #0
 8005900:	60da      	str	r2, [r3, #12]
	Tx_Header.IDE = CAN_ID_STD;
 8005902:	4b04      	ldr	r3, [pc, #16]	; (8005914 <CAN_Setting+0x78>)
 8005904:	2200      	movs	r2, #0
 8005906:	609a      	str	r2, [r3, #8]


}
 8005908:	bf00      	nop
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20001398 	.word	0x20001398
 8005914:	2000155c 	.word	0x2000155c

08005918 <CAN_Tx_Process>:

void CAN_Tx_Process(void)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
	if(!(Handshaking == 0 && identified == 1 )){
 800591c:	4baa      	ldr	r3, [pc, #680]	; (8005bc8 <CAN_Tx_Process+0x2b0>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d103      	bne.n	800592c <CAN_Tx_Process+0x14>
 8005924:	4ba9      	ldr	r3, [pc, #676]	; (8005bcc <CAN_Tx_Process+0x2b4>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d03d      	beq.n	80059a8 <CAN_Tx_Process+0x90>
//		check = 1;
		Tx_Header.IDE = CAN_ID_STD;
 800592c:	4ba8      	ldr	r3, [pc, #672]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 800592e:	2200      	movs	r2, #0
 8005930:	609a      	str	r2, [r3, #8]
		Tx_Header.StdId = 0x0C0|HOLE;
 8005932:	4ba7      	ldr	r3, [pc, #668]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005934:	22c6      	movs	r2, #198	; 0xc6
 8005936:	601a      	str	r2, [r3, #0]
		Tx_Header.DLC = 8;
 8005938:	4ba5      	ldr	r3, [pc, #660]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 800593a:	2208      	movs	r2, #8
 800593c:	611a      	str	r2, [r3, #16]
		Tx_data[0] = UNIQUE_Code >> 16;
 800593e:	4ba5      	ldr	r3, [pc, #660]	; (8005bd4 <CAN_Tx_Process+0x2bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	0c1b      	lsrs	r3, r3, #16
 8005944:	b2da      	uxtb	r2, r3
 8005946:	4ba4      	ldr	r3, [pc, #656]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005948:	701a      	strb	r2, [r3, #0]
		Tx_data[1] = UNIQUE_Code >> 8;
 800594a:	4ba2      	ldr	r3, [pc, #648]	; (8005bd4 <CAN_Tx_Process+0x2bc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	0a1b      	lsrs	r3, r3, #8
 8005950:	b2da      	uxtb	r2, r3
 8005952:	4ba1      	ldr	r3, [pc, #644]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005954:	705a      	strb	r2, [r3, #1]
		Tx_data[2] = UNIQUE_Code;
 8005956:	4b9f      	ldr	r3, [pc, #636]	; (8005bd4 <CAN_Tx_Process+0x2bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	b2da      	uxtb	r2, r3
 800595c:	4b9e      	ldr	r3, [pc, #632]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 800595e:	709a      	strb	r2, [r3, #2]
		Tx_data[3] = Eror_Code;
 8005960:	4b9e      	ldr	r3, [pc, #632]	; (8005bdc <CAN_Tx_Process+0x2c4>)
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	4b9c      	ldr	r3, [pc, #624]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005966:	70da      	strb	r2, [r3, #3]
		Tx_data[4] = Handshaking;
 8005968:	4b97      	ldr	r3, [pc, #604]	; (8005bc8 <CAN_Tx_Process+0x2b0>)
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	4b9a      	ldr	r3, [pc, #616]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 800596e:	711a      	strb	r2, [r3, #4]
		Tx_data[5] = Ready_toCharge;
 8005970:	4b9b      	ldr	r3, [pc, #620]	; (8005be0 <CAN_Tx_Process+0x2c8>)
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	4b98      	ldr	r3, [pc, #608]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005976:	715a      	strb	r2, [r3, #5]
		Tx_data[6] = 0;
 8005978:	4b97      	ldr	r3, [pc, #604]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 800597a:	2200      	movs	r2, #0
 800597c:	719a      	strb	r2, [r3, #6]
		Tx_data[7] = 0;
 800597e:	4b96      	ldr	r3, [pc, #600]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005980:	2200      	movs	r2, #0
 8005982:	71da      	strb	r2, [r3, #7]
		while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005984:	bf00      	nop
 8005986:	4897      	ldr	r0, [pc, #604]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005988:	f003 ffae 	bl	80098e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0f9      	beq.n	8005986 <CAN_Tx_Process+0x6e>
		if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005992:	4b95      	ldr	r3, [pc, #596]	; (8005be8 <CAN_Tx_Process+0x2d0>)
 8005994:	4a90      	ldr	r2, [pc, #576]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005996:	498e      	ldr	r1, [pc, #568]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005998:	4892      	ldr	r0, [pc, #584]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 800599a:	f003 fecb 	bl	8009734 <HAL_CAN_AddTxMessage>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <CAN_Tx_Process+0x90>
 80059a4:	f001 f9c6 	bl	8006d34 <Error_Handler>
	}

	if((send == 0 || send == 1 || send == 2 || send == 5 || send == 6) && HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1){
 80059a8:	4b90      	ldr	r3, [pc, #576]	; (8005bec <CAN_Tx_Process+0x2d4>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d010      	beq.n	80059d2 <CAN_Tx_Process+0xba>
 80059b0:	4b8e      	ldr	r3, [pc, #568]	; (8005bec <CAN_Tx_Process+0x2d4>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d00c      	beq.n	80059d2 <CAN_Tx_Process+0xba>
 80059b8:	4b8c      	ldr	r3, [pc, #560]	; (8005bec <CAN_Tx_Process+0x2d4>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d008      	beq.n	80059d2 <CAN_Tx_Process+0xba>
 80059c0:	4b8a      	ldr	r3, [pc, #552]	; (8005bec <CAN_Tx_Process+0x2d4>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b05      	cmp	r3, #5
 80059c6:	d004      	beq.n	80059d2 <CAN_Tx_Process+0xba>
 80059c8:	4b88      	ldr	r3, [pc, #544]	; (8005bec <CAN_Tx_Process+0x2d4>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	2b06      	cmp	r3, #6
 80059ce:	f040 80f9 	bne.w	8005bc4 <CAN_Tx_Process+0x2ac>
 80059d2:	2180      	movs	r1, #128	; 0x80
 80059d4:	4886      	ldr	r0, [pc, #536]	; (8005bf0 <CAN_Tx_Process+0x2d8>)
 80059d6:	f005 f949 	bl	800ac6c <HAL_GPIO_ReadPin>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b01      	cmp	r3, #1
 80059de:	f040 80f1 	bne.w	8005bc4 <CAN_Tx_Process+0x2ac>
		if(send == 0){
 80059e2:	4b82      	ldr	r3, [pc, #520]	; (8005bec <CAN_Tx_Process+0x2d4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d135      	bne.n	8005a56 <CAN_Tx_Process+0x13e>
			Tx_Header.IDE = CAN_ID_STD;
 80059ea:	4b79      	ldr	r3, [pc, #484]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	609a      	str	r2, [r3, #8]
			Tx_Header.StdId = 0x1B2;
 80059f0:	4b77      	ldr	r3, [pc, #476]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 80059f2:	f44f 72d9 	mov.w	r2, #434	; 0x1b2
 80059f6:	601a      	str	r2, [r3, #0]
			Tx_data[0] = 0;
 80059f8:	4b77      	ldr	r3, [pc, #476]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
			Tx_data[1] = 0;
 80059fe:	4b76      	ldr	r3, [pc, #472]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a00:	2200      	movs	r2, #0
 8005a02:	705a      	strb	r2, [r3, #1]
			Tx_data[2] = 0;
 8005a04:	4b74      	ldr	r3, [pc, #464]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	709a      	strb	r2, [r3, #2]
			Tx_data[3] = 0;
 8005a0a:	4b73      	ldr	r3, [pc, #460]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	70da      	strb	r2, [r3, #3]
			Tx_data[4] = 0;
 8005a10:	4b71      	ldr	r3, [pc, #452]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	711a      	strb	r2, [r3, #4]
			Tx_data[5] = 0;
 8005a16:	4b70      	ldr	r3, [pc, #448]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	715a      	strb	r2, [r3, #5]
			Tx_data[6] = 0;
 8005a1c:	4b6e      	ldr	r3, [pc, #440]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	719a      	strb	r2, [r3, #6]
			Tx_data[7] = 0x01;
 8005a22:	4b6d      	ldr	r3, [pc, #436]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	71da      	strb	r2, [r3, #7]
			Tx_Header.DLC = 8;
 8005a28:	4b69      	ldr	r3, [pc, #420]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	611a      	str	r2, [r3, #16]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005a2e:	bf00      	nop
 8005a30:	486c      	ldr	r0, [pc, #432]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005a32:	f003 ff59 	bl	80098e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0f9      	beq.n	8005a30 <CAN_Tx_Process+0x118>
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005a3c:	4b6a      	ldr	r3, [pc, #424]	; (8005be8 <CAN_Tx_Process+0x2d0>)
 8005a3e:	4a66      	ldr	r2, [pc, #408]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a40:	4963      	ldr	r1, [pc, #396]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005a42:	4868      	ldr	r0, [pc, #416]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005a44:	f003 fe76 	bl	8009734 <HAL_CAN_AddTxMessage>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 80ba 	beq.w	8005bc4 <CAN_Tx_Process+0x2ac>
 8005a50:	f001 f970 	bl	8006d34 <Error_Handler>
			Tx_data[7] = 0x01;
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
		}
	}
}
 8005a54:	e0b6      	b.n	8005bc4 <CAN_Tx_Process+0x2ac>
		else if(send == 1){
 8005a56:	4b65      	ldr	r3, [pc, #404]	; (8005bec <CAN_Tx_Process+0x2d4>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d131      	bne.n	8005ac2 <CAN_Tx_Process+0x1aa>
			Tx_Header.IDE = CAN_ID_STD;
 8005a5e:	4b5c      	ldr	r3, [pc, #368]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	609a      	str	r2, [r3, #8]
			Tx_Header.StdId = 0x0E2;
 8005a64:	4b5a      	ldr	r3, [pc, #360]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005a66:	22e2      	movs	r2, #226	; 0xe2
 8005a68:	601a      	str	r2, [r3, #0]
			Tx_data[0] = 0;
 8005a6a:	4b5b      	ldr	r3, [pc, #364]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]
			Tx_data[1] = 0;
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	705a      	strb	r2, [r3, #1]
			Tx_data[2] = 0;
 8005a76:	4b58      	ldr	r3, [pc, #352]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	709a      	strb	r2, [r3, #2]
			Tx_data[3] = 0;
 8005a7c:	4b56      	ldr	r3, [pc, #344]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	70da      	strb	r2, [r3, #3]
			Tx_data[4] = 0;
 8005a82:	4b55      	ldr	r3, [pc, #340]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	711a      	strb	r2, [r3, #4]
			Tx_data[5] = 0;
 8005a88:	4b53      	ldr	r3, [pc, #332]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	715a      	strb	r2, [r3, #5]
			Tx_data[6] = 0x55;
 8005a8e:	4b52      	ldr	r3, [pc, #328]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a90:	2255      	movs	r2, #85	; 0x55
 8005a92:	719a      	strb	r2, [r3, #6]
			Tx_data[7] = 0;
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005a96:	2200      	movs	r2, #0
 8005a98:	71da      	strb	r2, [r3, #7]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005a9a:	bf00      	nop
 8005a9c:	4851      	ldr	r0, [pc, #324]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005a9e:	f003 ff23 	bl	80098e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f9      	beq.n	8005a9c <CAN_Tx_Process+0x184>
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005aa8:	4b4f      	ldr	r3, [pc, #316]	; (8005be8 <CAN_Tx_Process+0x2d0>)
 8005aaa:	4a4b      	ldr	r2, [pc, #300]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005aac:	4948      	ldr	r1, [pc, #288]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005aae:	484d      	ldr	r0, [pc, #308]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005ab0:	f003 fe40 	bl	8009734 <HAL_CAN_AddTxMessage>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 8084 	beq.w	8005bc4 <CAN_Tx_Process+0x2ac>
 8005abc:	f001 f93a 	bl	8006d34 <Error_Handler>
}
 8005ac0:	e080      	b.n	8005bc4 <CAN_Tx_Process+0x2ac>
		else if(send == 2){
 8005ac2:	4b4a      	ldr	r3, [pc, #296]	; (8005bec <CAN_Tx_Process+0x2d4>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d130      	bne.n	8005b2c <CAN_Tx_Process+0x214>
			Tx_Header.IDE = CAN_ID_STD;
 8005aca:	4b41      	ldr	r3, [pc, #260]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	609a      	str	r2, [r3, #8]
			Tx_Header.StdId = 0x0E2;
 8005ad0:	4b3f      	ldr	r3, [pc, #252]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005ad2:	22e2      	movs	r2, #226	; 0xe2
 8005ad4:	601a      	str	r2, [r3, #0]
			Tx_data[0] = 0;
 8005ad6:	4b40      	ldr	r3, [pc, #256]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
			Tx_data[1] = 0;
 8005adc:	4b3e      	ldr	r3, [pc, #248]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	705a      	strb	r2, [r3, #1]
			Tx_data[2] = 0;
 8005ae2:	4b3d      	ldr	r3, [pc, #244]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	709a      	strb	r2, [r3, #2]
			Tx_data[3] = 0;
 8005ae8:	4b3b      	ldr	r3, [pc, #236]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	70da      	strb	r2, [r3, #3]
			Tx_data[4] = 0;
 8005aee:	4b3a      	ldr	r3, [pc, #232]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	711a      	strb	r2, [r3, #4]
			Tx_data[5] = 0;
 8005af4:	4b38      	ldr	r3, [pc, #224]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	715a      	strb	r2, [r3, #5]
			Tx_data[6] = 0xAA;
 8005afa:	4b37      	ldr	r3, [pc, #220]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005afc:	22aa      	movs	r2, #170	; 0xaa
 8005afe:	719a      	strb	r2, [r3, #6]
			Tx_data[7] = 0;
 8005b00:	4b35      	ldr	r3, [pc, #212]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005b02:	2200      	movs	r2, #0
 8005b04:	71da      	strb	r2, [r3, #7]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005b06:	bf00      	nop
 8005b08:	4836      	ldr	r0, [pc, #216]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005b0a:	f003 feed 	bl	80098e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0f9      	beq.n	8005b08 <CAN_Tx_Process+0x1f0>
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005b14:	4b34      	ldr	r3, [pc, #208]	; (8005be8 <CAN_Tx_Process+0x2d0>)
 8005b16:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005b18:	492d      	ldr	r1, [pc, #180]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005b1a:	4832      	ldr	r0, [pc, #200]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005b1c:	f003 fe0a 	bl	8009734 <HAL_CAN_AddTxMessage>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d04e      	beq.n	8005bc4 <CAN_Tx_Process+0x2ac>
 8005b26:	f001 f905 	bl	8006d34 <Error_Handler>
}
 8005b2a:	e04b      	b.n	8005bc4 <CAN_Tx_Process+0x2ac>
		else if(send == 5){
 8005b2c:	4b2f      	ldr	r3, [pc, #188]	; (8005bec <CAN_Tx_Process+0x2d4>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b05      	cmp	r3, #5
 8005b32:	d120      	bne.n	8005b76 <CAN_Tx_Process+0x25e>
			Tx_Header.IDE = CAN_ID_EXT;
 8005b34:	4b26      	ldr	r3, [pc, #152]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005b36:	2204      	movs	r2, #4
 8005b38:	609a      	str	r2, [r3, #8]
			Tx_Header.ExtId = (0x1B2<<20)|LAST_UNIQUE_Code;
 8005b3a:	4b2e      	ldr	r3, [pc, #184]	; (8005bf4 <CAN_Tx_Process+0x2dc>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f043 53d9 	orr.w	r3, r3, #455081984	; 0x1b200000
 8005b42:	4a23      	ldr	r2, [pc, #140]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005b44:	6053      	str	r3, [r2, #4]
			memset(Tx_data, 0, 8*sizeof(Tx_data[0]));
 8005b46:	2208      	movs	r2, #8
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4823      	ldr	r0, [pc, #140]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005b4c:	f008 f872 	bl	800dc34 <memset>
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005b50:	bf00      	nop
 8005b52:	4824      	ldr	r0, [pc, #144]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005b54:	f003 fec8 	bl	80098e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d0f9      	beq.n	8005b52 <CAN_Tx_Process+0x23a>
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005b5e:	4b22      	ldr	r3, [pc, #136]	; (8005be8 <CAN_Tx_Process+0x2d0>)
 8005b60:	4a1d      	ldr	r2, [pc, #116]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005b62:	491b      	ldr	r1, [pc, #108]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005b64:	481f      	ldr	r0, [pc, #124]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005b66:	f003 fde5 	bl	8009734 <HAL_CAN_AddTxMessage>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d029      	beq.n	8005bc4 <CAN_Tx_Process+0x2ac>
 8005b70:	f001 f8e0 	bl	8006d34 <Error_Handler>
}
 8005b74:	e026      	b.n	8005bc4 <CAN_Tx_Process+0x2ac>
		else if(send == 6){
 8005b76:	4b1d      	ldr	r3, [pc, #116]	; (8005bec <CAN_Tx_Process+0x2d4>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b06      	cmp	r3, #6
 8005b7c:	d122      	bne.n	8005bc4 <CAN_Tx_Process+0x2ac>
			Tx_Header.IDE = CAN_ID_EXT;
 8005b7e:	4b14      	ldr	r3, [pc, #80]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005b80:	2204      	movs	r2, #4
 8005b82:	609a      	str	r2, [r3, #8]
			Tx_Header.ExtId = (0x1B2<<20)|LAST_UNIQUE_Code;
 8005b84:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <CAN_Tx_Process+0x2dc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f043 53d9 	orr.w	r3, r3, #455081984	; 0x1b200000
 8005b8c:	4a10      	ldr	r2, [pc, #64]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005b8e:	6053      	str	r3, [r2, #4]
			memset(Tx_data, 0, 8*sizeof(Tx_data[0]));
 8005b90:	2208      	movs	r2, #8
 8005b92:	2100      	movs	r1, #0
 8005b94:	4810      	ldr	r0, [pc, #64]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005b96:	f008 f84d 	bl	800dc34 <memset>
			Tx_data[7] = 0x01;
 8005b9a:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	71da      	strb	r2, [r3, #7]
			while(!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1));
 8005ba0:	bf00      	nop
 8005ba2:	4810      	ldr	r0, [pc, #64]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005ba4:	f003 fea0 	bl	80098e8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0f9      	beq.n	8005ba2 <CAN_Tx_Process+0x28a>
			if(HAL_CAN_AddTxMessage(&hcan1, &Tx_Header, Tx_data, &TxMailbox)!= HAL_OK) Error_Handler();
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <CAN_Tx_Process+0x2d0>)
 8005bb0:	4a09      	ldr	r2, [pc, #36]	; (8005bd8 <CAN_Tx_Process+0x2c0>)
 8005bb2:	4907      	ldr	r1, [pc, #28]	; (8005bd0 <CAN_Tx_Process+0x2b8>)
 8005bb4:	480b      	ldr	r0, [pc, #44]	; (8005be4 <CAN_Tx_Process+0x2cc>)
 8005bb6:	f003 fdbd 	bl	8009734 <HAL_CAN_AddTxMessage>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d001      	beq.n	8005bc4 <CAN_Tx_Process+0x2ac>
 8005bc0:	f001 f8b8 	bl	8006d34 <Error_Handler>
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	20000d54 	.word	0x20000d54
 8005bcc:	20000ad4 	.word	0x20000ad4
 8005bd0:	2000155c 	.word	0x2000155c
 8005bd4:	20000d38 	.word	0x20000d38
 8005bd8:	20001380 	.word	0x20001380
 8005bdc:	20000694 	.word	0x20000694
 8005be0:	20000d3c 	.word	0x20000d3c
 8005be4:	20001398 	.word	0x20001398
 8005be8:	20001394 	.word	0x20001394
 8005bec:	200008f0 	.word	0x200008f0
 8005bf0:	40020800 	.word	0x40020800
 8005bf4:	20000678 	.word	0x20000678

08005bf8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &Rx_Header, Rx_data)== HAL_OK && HAL_GPIO_ReadPin(GPIOC, Button2_Pin)==1){
 8005c00:	4b88      	ldr	r3, [pc, #544]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8005c02:	4a89      	ldr	r2, [pc, #548]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8005c04:	2100      	movs	r1, #0
 8005c06:	4889      	ldr	r0, [pc, #548]	; (8005e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x234>)
 8005c08:	f003 fea2 	bl	8009950 <HAL_CAN_GetRxMessage>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 8366 	bne.w	80062e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e8>
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	4886      	ldr	r0, [pc, #536]	; (8005e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x238>)
 8005c18:	f005 f828 	bl	800ac6c <HAL_GPIO_ReadPin>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	f040 835e 	bne.w	80062e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e8>
		HAL_GPIO_TogglePin(GPIOB, Led2_Pin);
 8005c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c28:	4882      	ldr	r0, [pc, #520]	; (8005e34 <HAL_CAN_RxFifo0MsgPendingCallback+0x23c>)
 8005c2a:	f005 f84e 	bl	800acca <HAL_GPIO_TogglePin>

		if(Handshaking == 0){
 8005c2e:	4b82      	ldr	r3, [pc, #520]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
			if(Rx_Header.StdId == 0x1C0)
 8005c36:	4b7c      	ldr	r3, [pc, #496]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005c3e:	d102      	bne.n	8005c46 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
				Communication_MiniPC_Flag = 1;
 8005c40:	4b7e      	ldr	r3, [pc, #504]	; (8005e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8005c42:	2201      	movs	r2, #1
 8005c44:	701a      	strb	r2, [r3, #0]
		}

		if(Handshaking==0 && Ready_Handshaking == 1){
 8005c46:	4b7c      	ldr	r3, [pc, #496]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d15f      	bne.n	8005d0e <HAL_CAN_RxFifo0MsgPendingCallback+0x116>
 8005c4e:	4b7c      	ldr	r3, [pc, #496]	; (8005e40 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d15b      	bne.n	8005d0e <HAL_CAN_RxFifo0MsgPendingCallback+0x116>

			if(identified <= 0){
 8005c56:	4b7b      	ldr	r3, [pc, #492]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d102      	bne.n	8005c64 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>
				send = 0;
 8005c5e:	4b7a      	ldr	r3, [pc, #488]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
			}

			// CAN ID receive (Handshaking)
			if(Rx_Header.ExtId>>20==0x0E0){
 8005c64:	4b70      	ldr	r3, [pc, #448]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	0d1b      	lsrs	r3, r3, #20
 8005c6a:	2be0      	cmp	r3, #224	; 0xe0
 8005c6c:	f040 832c 	bne.w	80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d0>
				if(Rx_data[6]==0x55 && identified==0){
 8005c70:	4b6c      	ldr	r3, [pc, #432]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8005c72:	799b      	ldrb	r3, [r3, #6]
 8005c74:	2b55      	cmp	r3, #85	; 0x55
 8005c76:	d109      	bne.n	8005c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 8005c78:	4b72      	ldr	r3, [pc, #456]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
					send = 1;
 8005c80:	4b71      	ldr	r3, [pc, #452]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	701a      	strb	r2, [r3, #0]
					identified=1;
 8005c86:	4b6f      	ldr	r3, [pc, #444]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8005c88:	2201      	movs	r2, #1
 8005c8a:	701a      	strb	r2, [r3, #0]
				}

				if(Rx_data[6]==0xAA && identified==1){
 8005c8c:	4b65      	ldr	r3, [pc, #404]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8005c8e:	799b      	ldrb	r3, [r3, #6]
 8005c90:	2baa      	cmp	r3, #170	; 0xaa
 8005c92:	f040 8319 	bne.w	80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d0>
 8005c96:	4b6b      	ldr	r3, [pc, #428]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	f040 8314 	bne.w	80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d0>
					send = 2;
 8005ca0:	4b69      	ldr	r3, [pc, #420]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	701a      	strb	r2, [r3, #0]
					UNIQUE_Code = Rx_Header.ExtId & 0x000FFFFF;
 8005ca6:	4b60      	ldr	r3, [pc, #384]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cae:	4a67      	ldr	r2, [pc, #412]	; (8005e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8005cb0:	6013      	str	r3, [r2, #0]
					Handshaking=1;
 8005cb2:	4b61      	ldr	r3, [pc, #388]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	701a      	strb	r2, [r3, #0]
					itoa(UNIQUE_Code, lower_UNIQUE_Code, 16);
 8005cb8:	4b64      	ldr	r3, [pc, #400]	; (8005e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2210      	movs	r2, #16
 8005cbe:	4964      	ldr	r1, [pc, #400]	; (8005e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f007 ff95 	bl	800dbf0 <itoa>
					int ii=0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60fb      	str	r3, [r7, #12]
					while(ii<6){
 8005cca:	e01c      	b.n	8005d06 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
						UPPER_UNIQUE_Code[ii] = toupper(lower_UNIQUE_Code[ii]);
 8005ccc:	4a60      	ldr	r2, [pc, #384]	; (8005e50 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	72fb      	strb	r3, [r7, #11]
 8005cd6:	f007 ff8d 	bl	800dbf4 <__locale_ctype_ptr>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d102      	bne.n	8005cf2 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
 8005cec:	7afb      	ldrb	r3, [r7, #11]
 8005cee:	3b20      	subs	r3, #32
 8005cf0:	e000      	b.n	8005cf4 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>
 8005cf2:	7afb      	ldrb	r3, [r7, #11]
 8005cf4:	b2d9      	uxtb	r1, r3
 8005cf6:	4a57      	ldr	r2, [pc, #348]	; (8005e54 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	460a      	mov	r2, r1
 8005cfe:	701a      	strb	r2, [r3, #0]
						ii++;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3301      	adds	r3, #1
 8005d04:	60fb      	str	r3, [r7, #12]
					while(ii<6){
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	dddf      	ble.n	8005ccc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
			if(Rx_Header.ExtId>>20==0x0E0){
 8005d0c:	e2dc      	b.n	80062c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6d0>
					}
				}
			}
		}

		else if(Handshaking==1){
 8005d0e:	4b4a      	ldr	r3, [pc, #296]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	f040 82d9 	bne.w	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>

			if(Rx_Header.StdId == 0x1C0){
 8005d18:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8005d20:	f040 80b0 	bne.w	8005e84 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
				Start_Charge = Rx_data[HOLE-1];
 8005d24:	4b3f      	ldr	r3, [pc, #252]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8005d26:	795a      	ldrb	r2, [r3, #5]
 8005d28:	4b4b      	ldr	r3, [pc, #300]	; (8005e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8005d2a:	701a      	strb	r2, [r3, #0]
				Communication_MiniPC_Flag = 1;
 8005d2c:	4b43      	ldr	r3, [pc, #268]	; (8005e3c <HAL_CAN_RxFifo0MsgPendingCallback+0x244>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]

				if(Rx_data[HOLE-1] == 1 && LastCharger_Mode == 0 && Ready_toCharge == 1 ){
 8005d32:	4b3c      	ldr	r3, [pc, #240]	; (8005e24 <HAL_CAN_RxFifo0MsgPendingCallback+0x22c>)
 8005d34:	795b      	ldrb	r3, [r3, #5]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d112      	bne.n	8005d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8005d3a:	4b48      	ldr	r3, [pc, #288]	; (8005e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10e      	bne.n	8005d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
 8005d42:	4b47      	ldr	r3, [pc, #284]	; (8005e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10a      	bne.n	8005d60 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>
					Charger_Mode = Start_Charge;
 8005d4a:	4b43      	ldr	r3, [pc, #268]	; (8005e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	4b45      	ldr	r3, [pc, #276]	; (8005e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8005d50:	701a      	strb	r2, [r3, #0]
					LastCharger_Mode = 1;
 8005d52:	4b42      	ldr	r3, [pc, #264]	; (8005e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
					send = 4;
 8005d58:	4b3b      	ldr	r3, [pc, #236]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8005d5a:	2204      	movs	r2, #4
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	e05d      	b.n	8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
				}

				else if(Start_Charge == 0 && LastCharger_Mode == 1 ){
 8005d60:	4b3d      	ldr	r3, [pc, #244]	; (8005e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d126      	bne.n	8005db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
 8005d68:	4b3c      	ldr	r3, [pc, #240]	; (8005e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d122      	bne.n	8005db6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1be>
					flag_ForceSwap = 1;
 8005d70:	4b3d      	ldr	r3, [pc, #244]	; (8005e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x270>)
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
					Handshaking = 0;
 8005d76:	4b30      	ldr	r3, [pc, #192]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	701a      	strb	r2, [r3, #0]
					LAST_UNIQUE_Code = UNIQUE_Code;
 8005d7c:	4b33      	ldr	r3, [pc, #204]	; (8005e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a3a      	ldr	r2, [pc, #232]	; (8005e6c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>)
 8005d82:	6013      	str	r3, [r2, #0]
					UNIQUE_Code = 0;
 8005d84:	4b31      	ldr	r3, [pc, #196]	; (8005e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
					LastCharger_Mode = 0;
 8005d8a:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	701a      	strb	r2, [r3, #0]
					identified = 0;
 8005d90:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	701a      	strb	r2, [r3, #0]
					Ready_toCharge = 0;
 8005d96:	4b32      	ldr	r3, [pc, #200]	; (8005e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 0;
 8005d9c:	4b34      	ldr	r3, [pc, #208]	; (8005e70 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]

					Charger_Mode = Start_Charge;
 8005da2:	4b2d      	ldr	r3, [pc, #180]	; (8005e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8005da4:	781a      	ldrb	r2, [r3, #0]
 8005da6:	4b2f      	ldr	r3, [pc, #188]	; (8005e64 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8005da8:	701a      	strb	r2, [r3, #0]
					Clear_ProtectionFlag();
 8005daa:	f002 f915 	bl	8007fd8 <Clear_ProtectionFlag>
					Eror_Code = 0;
 8005dae:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e032      	b.n	8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
				}

				else if(Start_Charge == 0 && flag_FullCharge == 1){
 8005db6:	4b28      	ldr	r3, [pc, #160]	; (8005e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d12e      	bne.n	8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
 8005dbe:	4b2e      	ldr	r3, [pc, #184]	; (8005e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d12a      	bne.n	8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
					send = 5;
 8005dc6:	4b20      	ldr	r3, [pc, #128]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8005dc8:	2205      	movs	r2, #5
 8005dca:	701a      	strb	r2, [r3, #0]
					Delay_SWAP +=1;
 8005dcc:	4b2b      	ldr	r3, [pc, #172]	; (8005e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8005dd4:	6013      	str	r3, [r2, #0]
					if(Delay_SWAP >= 10){
 8005dd6:	4b29      	ldr	r3, [pc, #164]	; (8005e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	2b09      	cmp	r3, #9
 8005ddc:	dd1e      	ble.n	8005e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x224>
						Handshaking = 0;
 8005dde:	4b16      	ldr	r3, [pc, #88]	; (8005e38 <HAL_CAN_RxFifo0MsgPendingCallback+0x240>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
						UNIQUE_Code = 0;
 8005de4:	4b19      	ldr	r3, [pc, #100]	; (8005e4c <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]
						LastCharger_Mode = 0;
 8005dea:	4b1c      	ldr	r3, [pc, #112]	; (8005e5c <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
						identified = 0;
 8005df0:	4b14      	ldr	r3, [pc, #80]	; (8005e44 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
						Ready_toCharge = 0;
 8005df6:	4b1a      	ldr	r3, [pc, #104]	; (8005e60 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	701a      	strb	r2, [r3, #0]
						flag_Check_SOCawal = 0;
 8005dfc:	4b1c      	ldr	r3, [pc, #112]	; (8005e70 <HAL_CAN_RxFifo0MsgPendingCallback+0x278>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	701a      	strb	r2, [r3, #0]
						send = 0;
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	701a      	strb	r2, [r3, #0]
						Delay_SWAP = 0;
 8005e08:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]
						BPack_SOC = 0;
 8005e0e:	4b1c      	ldr	r3, [pc, #112]	; (8005e80 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	601a      	str	r2, [r3, #0]
						flag_FullCharge = 0;
 8005e16:	4b18      	ldr	r3, [pc, #96]	; (8005e78 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
					}
				}

				Rx_Header.StdId = 0;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <HAL_CAN_RxFifo0MsgPendingCallback+0x230>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	e252      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
 8005e24:	20001388 	.word	0x20001388
 8005e28:	20001540 	.word	0x20001540
 8005e2c:	20001398 	.word	0x20001398
 8005e30:	40020800 	.word	0x40020800
 8005e34:	40020400 	.word	0x40020400
 8005e38:	20000d54 	.word	0x20000d54
 8005e3c:	2000109c 	.word	0x2000109c
 8005e40:	200010a4 	.word	0x200010a4
 8005e44:	20000ad4 	.word	0x20000ad4
 8005e48:	200008f0 	.word	0x200008f0
 8005e4c:	20000d38 	.word	0x20000d38
 8005e50:	20000c6c 	.word	0x20000c6c
 8005e54:	200006d0 	.word	0x200006d0
 8005e58:	20001270 	.word	0x20001270
 8005e5c:	20000695 	.word	0x20000695
 8005e60:	20000d3c 	.word	0x20000d3c
 8005e64:	20000720 	.word	0x20000720
 8005e68:	20000684 	.word	0x20000684
 8005e6c:	20000678 	.word	0x20000678
 8005e70:	200006db 	.word	0x200006db
 8005e74:	20000694 	.word	0x20000694
 8005e78:	20001260 	.word	0x20001260
 8005e7c:	20000258 	.word	0x20000258
 8005e80:	20000abc 	.word	0x20000abc
			}

			// CAN ID receive #1 (0x7b1)
			else if(Rx_Header.ExtId == (0x0B0<<20|UNIQUE_Code)){
 8005e84:	4b92      	ldr	r3, [pc, #584]	; (80060d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	4b92      	ldr	r3, [pc, #584]	; (80060d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f043 6330 	orr.w	r3, r3, #184549376	; 0xb000000
 8005e90:	429a      	cmp	r2, r3
 8005e92:	f040 8099 	bne.w	8005fc8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3d0>
				Communication_BMS_Flag = 1;
 8005e96:	4b90      	ldr	r3, [pc, #576]	; (80060d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e0>)
 8005e98:	2201      	movs	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
				//send = 3;
				Batt_voltage.m_bytes[0] = Rx_data[0];
 8005e9c:	4b8f      	ldr	r3, [pc, #572]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005e9e:	781a      	ldrb	r2, [r3, #0]
 8005ea0:	4b8f      	ldr	r3, [pc, #572]	; (80060e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8005ea2:	701a      	strb	r2, [r3, #0]
				Batt_voltage.m_bytes[1] = Rx_data[1];
 8005ea4:	4b8d      	ldr	r3, [pc, #564]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ea6:	785a      	ldrb	r2, [r3, #1]
 8005ea8:	4b8d      	ldr	r3, [pc, #564]	; (80060e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8005eaa:	705a      	strb	r2, [r3, #1]
				Batt_current.m_bytes[0] = Rx_data[2];
 8005eac:	4b8b      	ldr	r3, [pc, #556]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005eae:	789a      	ldrb	r2, [r3, #2]
 8005eb0:	4b8c      	ldr	r3, [pc, #560]	; (80060e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 8005eb2:	701a      	strb	r2, [r3, #0]
				Batt_current.m_bytes[1] = Rx_data[3];
 8005eb4:	4b89      	ldr	r3, [pc, #548]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005eb6:	78da      	ldrb	r2, [r3, #3]
 8005eb8:	4b8a      	ldr	r3, [pc, #552]	; (80060e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 8005eba:	705a      	strb	r2, [r3, #1]
				Batt_SOC.m_bytes[0] = Rx_data[4];
 8005ebc:	4b87      	ldr	r3, [pc, #540]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ebe:	791a      	ldrb	r2, [r3, #4]
 8005ec0:	4b89      	ldr	r3, [pc, #548]	; (80060e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f0>)
 8005ec2:	701a      	strb	r2, [r3, #0]
				Batt_SOC.m_bytes[1] = Rx_data[5];
 8005ec4:	4b85      	ldr	r3, [pc, #532]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ec6:	795a      	ldrb	r2, [r3, #5]
 8005ec8:	4b87      	ldr	r3, [pc, #540]	; (80060e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f0>)
 8005eca:	705a      	strb	r2, [r3, #1]
				Batt_temp.m_bytes[0] = Rx_data[6];
 8005ecc:	4b83      	ldr	r3, [pc, #524]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ece:	799a      	ldrb	r2, [r3, #6]
 8005ed0:	4b86      	ldr	r3, [pc, #536]	; (80060ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 8005ed2:	701a      	strb	r2, [r3, #0]
				Batt_temp.m_bytes[1] = Rx_data[7];
 8005ed4:	4b81      	ldr	r3, [pc, #516]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ed6:	79da      	ldrb	r2, [r3, #7]
 8005ed8:	4b84      	ldr	r3, [pc, #528]	; (80060ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 8005eda:	705a      	strb	r2, [r3, #1]

				BPack_Temp = (Batt_temp.m_uint16t/10)-40;
 8005edc:	4b83      	ldr	r3, [pc, #524]	; (80060ec <HAL_CAN_RxFifo0MsgPendingCallback+0x4f4>)
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	4a83      	ldr	r2, [pc, #524]	; (80060f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f8>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b28      	subs	r3, #40	; 0x28
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa ff11 	bl	8000d14 <__aeabi_i2f>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	4b7f      	ldr	r3, [pc, #508]	; (80060f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4fc>)
 8005ef6:	601a      	str	r2, [r3, #0]
				BPack_Voltage = Batt_voltage.m_uint16t/100;
 8005ef8:	4b79      	ldr	r3, [pc, #484]	; (80060e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e8>)
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	4a7e      	ldr	r2, [pc, #504]	; (80060f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fa ff04 	bl	8000d14 <__aeabi_i2f>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	4b7b      	ldr	r3, [pc, #492]	; (80060fc <HAL_CAN_RxFifo0MsgPendingCallback+0x504>)
 8005f10:	601a      	str	r2, [r3, #0]
				BPack_SOC = (float)Batt_SOC.m_uint16t/100;
 8005f12:	4b75      	ldr	r3, [pc, #468]	; (80060e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4f0>)
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fa fef8 	bl	8000d0c <__aeabi_ui2f>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4978      	ldr	r1, [pc, #480]	; (8006100 <HAL_CAN_RxFifo0MsgPendingCallback+0x508>)
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7fa ffff 	bl	8000f24 <__aeabi_fdiv>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4b76      	ldr	r3, [pc, #472]	; (8006104 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8005f2c:	601a      	str	r2, [r3, #0]
				BPack_Current = (Batt_current.m_uint16t/100)-50;
 8005f2e:	4b6d      	ldr	r3, [pc, #436]	; (80060e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4ec>)
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	4a71      	ldr	r2, [pc, #452]	; (80060f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b32      	subs	r3, #50	; 0x32
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa fee8 	bl	8000d14 <__aeabi_i2f>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b70      	ldr	r3, [pc, #448]	; (8006108 <HAL_CAN_RxFifo0MsgPendingCallback+0x510>)
 8005f48:	601a      	str	r2, [r3, #0]

				if(BPack_SOC < 100 && flag_Check_SOCawal != 1) {
 8005f4a:	4b6e      	ldr	r3, [pc, #440]	; (8006104 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	496c      	ldr	r1, [pc, #432]	; (8006100 <HAL_CAN_RxFifo0MsgPendingCallback+0x508>)
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fb f8d1 	bl	80010f8 <__aeabi_fcmplt>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_CAN_RxFifo0MsgPendingCallback+0x37a>
 8005f5c:	4b6b      	ldr	r3, [pc, #428]	; (800610c <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d006      	beq.n	8005f72 <HAL_CAN_RxFifo0MsgPendingCallback+0x37a>
					Ready_toCharge = 1;
 8005f64:	4b6a      	ldr	r3, [pc, #424]	; (8006110 <HAL_CAN_RxFifo0MsgPendingCallback+0x518>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8005f6a:	4b68      	ldr	r3, [pc, #416]	; (800610c <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e012      	b.n	8005f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>
				}
				else if(BPack_SOC >= 100 && flag_Check_SOCawal != 1) {
 8005f72:	4b64      	ldr	r3, [pc, #400]	; (8006104 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4962      	ldr	r1, [pc, #392]	; (8006100 <HAL_CAN_RxFifo0MsgPendingCallback+0x508>)
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fb f8d1 	bl	8001120 <__aeabi_fcmpge>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>
 8005f84:	4b61      	ldr	r3, [pc, #388]	; (800610c <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d005      	beq.n	8005f98 <HAL_CAN_RxFifo0MsgPendingCallback+0x3a0>
					Ready_toCharge = 0;
 8005f8c:	4b60      	ldr	r3, [pc, #384]	; (8006110 <HAL_CAN_RxFifo0MsgPendingCallback+0x518>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	701a      	strb	r2, [r3, #0]
					flag_Check_SOCawal = 1;
 8005f92:	4b5e      	ldr	r3, [pc, #376]	; (800610c <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	701a      	strb	r2, [r3, #0]
				}

				if(Ready_toCharge == 0 && flag_Check_SOCawal != 0){
 8005f98:	4b5d      	ldr	r3, [pc, #372]	; (8006110 <HAL_CAN_RxFifo0MsgPendingCallback+0x518>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f040 8194 	bne.w	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
 8005fa2:	4b5a      	ldr	r3, [pc, #360]	; (800610c <HAL_CAN_RxFifo0MsgPendingCallback+0x514>)
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 818f 	beq.w	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
					if(BPack_SOC < 70) Ready_toCharge = 1;
 8005fac:	4b55      	ldr	r3, [pc, #340]	; (8006104 <HAL_CAN_RxFifo0MsgPendingCallback+0x50c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4958      	ldr	r1, [pc, #352]	; (8006114 <HAL_CAN_RxFifo0MsgPendingCallback+0x51c>)
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fb f8a0 	bl	80010f8 <__aeabi_fcmplt>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8185 	beq.w	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
 8005fc0:	4b53      	ldr	r3, [pc, #332]	; (8006110 <HAL_CAN_RxFifo0MsgPendingCallback+0x518>)
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	e180      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
				}
			}

			// CAN ID receive #2 (0x7b2)
			else if(Rx_Header.ExtId == (0x0B1<<20|UNIQUE_Code)){
 8005fc8:	4b41      	ldr	r3, [pc, #260]	; (80060d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4d8>)
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4dc>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f043 6331 	orr.w	r3, r3, #185597952	; 0xb100000
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	f040 80c3 	bne.w	8006160 <HAL_CAN_RxFifo0MsgPendingCallback+0x568>
				Communication_BMS_Flag = 1;
 8005fda:	4b3f      	ldr	r3, [pc, #252]	; (80060d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4e0>)
 8005fdc:	2201      	movs	r2, #1
 8005fde:	701a      	strb	r2, [r3, #0]
				Batt_capacity.m_bytes[0] = Rx_data[0];
 8005fe0:	4b3e      	ldr	r3, [pc, #248]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005fe2:	781a      	ldrb	r2, [r3, #0]
 8005fe4:	4b4c      	ldr	r3, [pc, #304]	; (8006118 <HAL_CAN_RxFifo0MsgPendingCallback+0x520>)
 8005fe6:	701a      	strb	r2, [r3, #0]
				Batt_capacity.m_bytes[1] = Rx_data[1];
 8005fe8:	4b3c      	ldr	r3, [pc, #240]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005fea:	785a      	ldrb	r2, [r3, #1]
 8005fec:	4b4a      	ldr	r3, [pc, #296]	; (8006118 <HAL_CAN_RxFifo0MsgPendingCallback+0x520>)
 8005fee:	705a      	strb	r2, [r3, #1]
				Batt_SOH.m_bytes[0] = Rx_data[2];
 8005ff0:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ff2:	789a      	ldrb	r2, [r3, #2]
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <HAL_CAN_RxFifo0MsgPendingCallback+0x524>)
 8005ff6:	701a      	strb	r2, [r3, #0]
				Batt_SOH.m_bytes[1] = Rx_data[3];
 8005ff8:	4b38      	ldr	r3, [pc, #224]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8005ffa:	78da      	ldrb	r2, [r3, #3]
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <HAL_CAN_RxFifo0MsgPendingCallback+0x524>)
 8005ffe:	705a      	strb	r2, [r3, #1]
				Batt_cycle.m_bytes[0] = Rx_data[4];
 8006000:	4b36      	ldr	r3, [pc, #216]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006002:	791a      	ldrb	r2, [r3, #4]
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <HAL_CAN_RxFifo0MsgPendingCallback+0x528>)
 8006006:	701a      	strb	r2, [r3, #0]
				Batt_cycle.m_bytes[1] = Rx_data[5];
 8006008:	4b34      	ldr	r3, [pc, #208]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 800600a:	795a      	ldrb	r2, [r3, #5]
 800600c:	4b44      	ldr	r3, [pc, #272]	; (8006120 <HAL_CAN_RxFifo0MsgPendingCallback+0x528>)
 800600e:	705a      	strb	r2, [r3, #1]

				flag_trip_shortcircuit = Rx_data[6]&0x01;
 8006010:	4b32      	ldr	r3, [pc, #200]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006012:	799b      	ldrb	r3, [r3, #6]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b42      	ldr	r3, [pc, #264]	; (8006124 <HAL_CAN_RxFifo0MsgPendingCallback+0x52c>)
 800601c:	701a      	strb	r2, [r3, #0]
				flag_trip_overcurrentdischarge = (Rx_data[6]>>1)&0x01;
 800601e:	4b2f      	ldr	r3, [pc, #188]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006020:	799b      	ldrb	r3, [r3, #6]
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	b2da      	uxtb	r2, r3
 800602c:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_CAN_RxFifo0MsgPendingCallback+0x530>)
 800602e:	701a      	strb	r2, [r3, #0]
				flag_trip_overcurrentcharge = (Rx_data[6]>>2)&0x01;
 8006030:	4b2a      	ldr	r3, [pc, #168]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006032:	799b      	ldrb	r3, [r3, #6]
 8006034:	089b      	lsrs	r3, r3, #2
 8006036:	b2db      	uxtb	r3, r3
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	b2da      	uxtb	r2, r3
 800603e:	4b3b      	ldr	r3, [pc, #236]	; (800612c <HAL_CAN_RxFifo0MsgPendingCallback+0x534>)
 8006040:	701a      	strb	r2, [r3, #0]
				flag_trip_overtemperature = (Rx_data[6]>>3)&0x01;
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006044:	799b      	ldrb	r3, [r3, #6]
 8006046:	08db      	lsrs	r3, r3, #3
 8006048:	b2db      	uxtb	r3, r3
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	b2da      	uxtb	r2, r3
 8006050:	4b37      	ldr	r3, [pc, #220]	; (8006130 <HAL_CAN_RxFifo0MsgPendingCallback+0x538>)
 8006052:	701a      	strb	r2, [r3, #0]
				flag_trip_undertemperature = (Rx_data[6]>>4)&0x01;
 8006054:	4b21      	ldr	r3, [pc, #132]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006056:	799b      	ldrb	r3, [r3, #6]
 8006058:	091b      	lsrs	r3, r3, #4
 800605a:	b2db      	uxtb	r3, r3
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	b2da      	uxtb	r2, r3
 8006062:	4b34      	ldr	r3, [pc, #208]	; (8006134 <HAL_CAN_RxFifo0MsgPendingCallback+0x53c>)
 8006064:	701a      	strb	r2, [r3, #0]
				//flag_trip_overtemperature = (Rx_data[6]>>5)&0x01;
				//flag_trip_undertemperature = (Rx_data[6]>>6)&0x01;
				flag_trip_unbalance = (Rx_data[6]>>7)&0x01;
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006068:	799b      	ldrb	r3, [r3, #6]
 800606a:	09db      	lsrs	r3, r3, #7
 800606c:	b2da      	uxtb	r2, r3
 800606e:	4b32      	ldr	r3, [pc, #200]	; (8006138 <HAL_CAN_RxFifo0MsgPendingCallback+0x540>)
 8006070:	701a      	strb	r2, [r3, #0]
				flag_trip_undervoltage = Rx_data[7]&0x01;
 8006072:	4b1a      	ldr	r3, [pc, #104]	; (80060dc <HAL_CAN_RxFifo0MsgPendingCallback+0x4e4>)
 8006074:	79db      	ldrb	r3, [r3, #7]
 8006076:	f003 0301 	and.w	r3, r3, #1
 800607a:	b2da      	uxtb	r2, r3
 800607c:	4b2f      	ldr	r3, [pc, #188]	; (800613c <HAL_CAN_RxFifo0MsgPendingCallback+0x544>)
 800607e:	701a      	strb	r2, [r3, #0]
				flag_trip_overvoltage = (Rx_data[7]<<1)&0x01;
 8006080:	4b2f      	ldr	r3, [pc, #188]	; (8006140 <HAL_CAN_RxFifo0MsgPendingCallback+0x548>)
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
				flag_trip_SOCOverDischarge = (Rx_data[7]<<2)&0x01;
 8006086:	4b2f      	ldr	r3, [pc, #188]	; (8006144 <HAL_CAN_RxFifo0MsgPendingCallback+0x54c>)
 8006088:	2200      	movs	r2, #0
 800608a:	701a      	strb	r2, [r3, #0]
				flag_trip_systemfailure = (Rx_data[7]<<3)&0x01;
 800608c:	4b2e      	ldr	r3, [pc, #184]	; (8006148 <HAL_CAN_RxFifo0MsgPendingCallback+0x550>)
 800608e:	2200      	movs	r2, #0
 8006090:	701a      	strb	r2, [r3, #0]
				charge_state = (Rx_data[7]<<4)&0x01;
 8006092:	4b2e      	ldr	r3, [pc, #184]	; (800614c <HAL_CAN_RxFifo0MsgPendingCallback+0x554>)
 8006094:	2200      	movs	r2, #0
 8006096:	701a      	strb	r2, [r3, #0]
				discharge_state = (Rx_data[7]<<5)&0x01;
 8006098:	4b2d      	ldr	r3, [pc, #180]	; (8006150 <HAL_CAN_RxFifo0MsgPendingCallback+0x558>)
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
				sleep_state = (Rx_data[7]<<6)&0x01;
 800609e:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <HAL_CAN_RxFifo0MsgPendingCallback+0x55c>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	701a      	strb	r2, [r3, #0]

				BPack_Capacity = Batt_capacity.m_uint16t/100;
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <HAL_CAN_RxFifo0MsgPendingCallback+0x520>)
 80060a6:	881b      	ldrh	r3, [r3, #0]
 80060a8:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x500>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fa fe2e 	bl	8000d14 <__aeabi_i2f>
 80060b8:	4602      	mov	r2, r0
 80060ba:	4b27      	ldr	r3, [pc, #156]	; (8006158 <HAL_CAN_RxFifo0MsgPendingCallback+0x560>)
 80060bc:	601a      	str	r2, [r3, #0]
				BPack_SOH = Batt_SOH.m_uint16t;
 80060be:	4b17      	ldr	r3, [pc, #92]	; (800611c <HAL_CAN_RxFifo0MsgPendingCallback+0x524>)
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fe22 	bl	8000d0c <__aeabi_ui2f>
 80060c8:	4602      	mov	r2, r0
 80060ca:	4b24      	ldr	r3, [pc, #144]	; (800615c <HAL_CAN_RxFifo0MsgPendingCallback+0x564>)
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	e0fc      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
 80060d0:	20001540 	.word	0x20001540
 80060d4:	20000d38 	.word	0x20000d38
 80060d8:	20000ab4 	.word	0x20000ab4
 80060dc:	20001388 	.word	0x20001388
 80060e0:	200012d4 	.word	0x200012d4
 80060e4:	20000c9c 	.word	0x20000c9c
 80060e8:	20000ce0 	.word	0x20000ce0
 80060ec:	20000d28 	.word	0x20000d28
 80060f0:	cccccccd 	.word	0xcccccccd
 80060f4:	20000cd8 	.word	0x20000cd8
 80060f8:	51eb851f 	.word	0x51eb851f
 80060fc:	20000ccc 	.word	0x20000ccc
 8006100:	42c80000 	.word	0x42c80000
 8006104:	20000abc 	.word	0x20000abc
 8006108:	2000069c 	.word	0x2000069c
 800610c:	200006db 	.word	0x200006db
 8006110:	20000d3c 	.word	0x20000d3c
 8006114:	428c0000 	.word	0x428c0000
 8006118:	20001280 	.word	0x20001280
 800611c:	200006a4 	.word	0x200006a4
 8006120:	20000c7c 	.word	0x20000c7c
 8006124:	200006b4 	.word	0x200006b4
 8006128:	20000c90 	.word	0x20000c90
 800612c:	20000d34 	.word	0x20000d34
 8006130:	200008b4 	.word	0x200008b4
 8006134:	20000ac4 	.word	0x20000ac4
 8006138:	20000698 	.word	0x20000698
 800613c:	20000ac5 	.word	0x20000ac5
 8006140:	200012a4 	.word	0x200012a4
 8006144:	20000d4c 	.word	0x20000d4c
 8006148:	200006e0 	.word	0x200006e0
 800614c:	20000ef9 	.word	0x20000ef9
 8006150:	200008d8 	.word	0x200008d8
 8006154:	200012ac 	.word	0x200012ac
 8006158:	2000125c 	.word	0x2000125c
 800615c:	2000070c 	.word	0x2000070c
			}


			// *********************** Start Cell  Voltage Data Send ******************************
			else if(Rx_Header.ExtId == (0x0B4<<20|UNIQUE_Code)){
 8006160:	4b61      	ldr	r3, [pc, #388]	; (80062e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f0>)
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	4b61      	ldr	r3, [pc, #388]	; (80062ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6f4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f043 6334 	orr.w	r3, r3, #188743680	; 0xb400000
 800616c:	429a      	cmp	r2, r3
 800616e:	d120      	bne.n	80061b2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5ba>
				vcell_15databyte[0].m_bytes[1] = Rx_data[0];
 8006170:	4b5f      	ldr	r3, [pc, #380]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006172:	781a      	ldrb	r2, [r3, #0]
 8006174:	4b5f      	ldr	r3, [pc, #380]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006176:	705a      	strb	r2, [r3, #1]
				vcell_15databyte[0].m_bytes[0] = Rx_data[1];
 8006178:	4b5d      	ldr	r3, [pc, #372]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800617a:	785a      	ldrb	r2, [r3, #1]
 800617c:	4b5d      	ldr	r3, [pc, #372]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800617e:	701a      	strb	r2, [r3, #0]
				vcell_15databyte[1].m_bytes[1] = Rx_data[2];
 8006180:	4b5b      	ldr	r3, [pc, #364]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006182:	789a      	ldrb	r2, [r3, #2]
 8006184:	4b5b      	ldr	r3, [pc, #364]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006186:	715a      	strb	r2, [r3, #5]
				vcell_15databyte[1].m_bytes[0] = Rx_data[3];
 8006188:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800618a:	78da      	ldrb	r2, [r3, #3]
 800618c:	4b59      	ldr	r3, [pc, #356]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800618e:	711a      	strb	r2, [r3, #4]
				vcell_15databyte[2].m_bytes[1] = Rx_data[4];
 8006190:	4b57      	ldr	r3, [pc, #348]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006192:	791a      	ldrb	r2, [r3, #4]
 8006194:	4b57      	ldr	r3, [pc, #348]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006196:	725a      	strb	r2, [r3, #9]
				vcell_15databyte[2].m_bytes[0] = Rx_data[5];
 8006198:	4b55      	ldr	r3, [pc, #340]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800619a:	795a      	ldrb	r2, [r3, #5]
 800619c:	4b55      	ldr	r3, [pc, #340]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800619e:	721a      	strb	r2, [r3, #8]
				vcell_15databyte[3].m_bytes[1] = Rx_data[6];
 80061a0:	4b53      	ldr	r3, [pc, #332]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061a2:	799a      	ldrb	r2, [r3, #6]
 80061a4:	4b53      	ldr	r3, [pc, #332]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061a6:	735a      	strb	r2, [r3, #13]
				vcell_15databyte[3].m_bytes[0] = Rx_data[7];
 80061a8:	4b51      	ldr	r3, [pc, #324]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061aa:	79da      	ldrb	r2, [r3, #7]
 80061ac:	4b51      	ldr	r3, [pc, #324]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061ae:	731a      	strb	r2, [r3, #12]
 80061b0:	e08b      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
			}

			else if(Rx_Header.ExtId == (0x0B5<<20|UNIQUE_Code)){
 80061b2:	4b4d      	ldr	r3, [pc, #308]	; (80062e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f0>)
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b4d      	ldr	r3, [pc, #308]	; (80062ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6f4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f043 6335 	orr.w	r3, r3, #189792256	; 0xb500000
 80061be:	429a      	cmp	r2, r3
 80061c0:	d120      	bne.n	8006204 <HAL_CAN_RxFifo0MsgPendingCallback+0x60c>
				vcell_15databyte[4].m_bytes[1] = Rx_data[0];
 80061c2:	4b4b      	ldr	r3, [pc, #300]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	4b4b      	ldr	r3, [pc, #300]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061c8:	745a      	strb	r2, [r3, #17]
				vcell_15databyte[4].m_bytes[0] = Rx_data[1];
 80061ca:	4b49      	ldr	r3, [pc, #292]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061cc:	785a      	ldrb	r2, [r3, #1]
 80061ce:	4b49      	ldr	r3, [pc, #292]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061d0:	741a      	strb	r2, [r3, #16]
				vcell_15databyte[5].m_bytes[1] = Rx_data[2];
 80061d2:	4b47      	ldr	r3, [pc, #284]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061d4:	789a      	ldrb	r2, [r3, #2]
 80061d6:	4b47      	ldr	r3, [pc, #284]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061d8:	755a      	strb	r2, [r3, #21]
				vcell_15databyte[5].m_bytes[0] = Rx_data[3];
 80061da:	4b45      	ldr	r3, [pc, #276]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061dc:	78da      	ldrb	r2, [r3, #3]
 80061de:	4b45      	ldr	r3, [pc, #276]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061e0:	751a      	strb	r2, [r3, #20]
				vcell_15databyte[6].m_bytes[1] = Rx_data[4];
 80061e2:	4b43      	ldr	r3, [pc, #268]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061e4:	791a      	ldrb	r2, [r3, #4]
 80061e6:	4b43      	ldr	r3, [pc, #268]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061e8:	765a      	strb	r2, [r3, #25]
				vcell_15databyte[6].m_bytes[0] = Rx_data[5];
 80061ea:	4b41      	ldr	r3, [pc, #260]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061ec:	795a      	ldrb	r2, [r3, #5]
 80061ee:	4b41      	ldr	r3, [pc, #260]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061f0:	761a      	strb	r2, [r3, #24]
				vcell_15databyte[7].m_bytes[1] = Rx_data[6];
 80061f2:	4b3f      	ldr	r3, [pc, #252]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061f4:	799a      	ldrb	r2, [r3, #6]
 80061f6:	4b3f      	ldr	r3, [pc, #252]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80061f8:	775a      	strb	r2, [r3, #29]
				vcell_15databyte[7].m_bytes[0] = Rx_data[7];
 80061fa:	4b3d      	ldr	r3, [pc, #244]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80061fc:	79da      	ldrb	r2, [r3, #7]
 80061fe:	4b3d      	ldr	r3, [pc, #244]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006200:	771a      	strb	r2, [r3, #28]
 8006202:	e062      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
			}

			else if(Rx_Header.ExtId == (0x0B6<<20|UNIQUE_Code)){
 8006204:	4b38      	ldr	r3, [pc, #224]	; (80062e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f0>)
 8006206:	685a      	ldr	r2, [r3, #4]
 8006208:	4b38      	ldr	r3, [pc, #224]	; (80062ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6f4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f043 6336 	orr.w	r3, r3, #190840832	; 0xb600000
 8006210:	429a      	cmp	r2, r3
 8006212:	d128      	bne.n	8006266 <HAL_CAN_RxFifo0MsgPendingCallback+0x66e>
				vcell_15databyte[8].m_bytes[1] = Rx_data[0];
 8006214:	4b36      	ldr	r3, [pc, #216]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	4b36      	ldr	r3, [pc, #216]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800621a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				vcell_15databyte[8].m_bytes[0] = Rx_data[1];
 800621e:	4b34      	ldr	r3, [pc, #208]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006220:	785a      	ldrb	r2, [r3, #1]
 8006222:	4b34      	ldr	r3, [pc, #208]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006224:	f883 2020 	strb.w	r2, [r3, #32]
				vcell_15databyte[9].m_bytes[1] = Rx_data[2];
 8006228:	4b31      	ldr	r3, [pc, #196]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800622a:	789a      	ldrb	r2, [r3, #2]
 800622c:	4b31      	ldr	r3, [pc, #196]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800622e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				vcell_15databyte[9].m_bytes[0] = Rx_data[3];
 8006232:	4b2f      	ldr	r3, [pc, #188]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006234:	78da      	ldrb	r2, [r3, #3]
 8006236:	4b2f      	ldr	r3, [pc, #188]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006238:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				vcell_15databyte[10].m_bytes[1] = Rx_data[4];
 800623c:	4b2c      	ldr	r3, [pc, #176]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800623e:	791a      	ldrb	r2, [r3, #4]
 8006240:	4b2c      	ldr	r3, [pc, #176]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006242:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
				vcell_15databyte[10].m_bytes[0] = Rx_data[5];
 8006246:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006248:	795a      	ldrb	r2, [r3, #5]
 800624a:	4b2a      	ldr	r3, [pc, #168]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800624c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				vcell_15databyte[11].m_bytes[1] = Rx_data[6];
 8006250:	4b27      	ldr	r3, [pc, #156]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006252:	799a      	ldrb	r2, [r3, #6]
 8006254:	4b27      	ldr	r3, [pc, #156]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006256:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				vcell_15databyte[11].m_bytes[0] = Rx_data[7];
 800625a:	4b25      	ldr	r3, [pc, #148]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800625c:	79da      	ldrb	r2, [r3, #7]
 800625e:	4b25      	ldr	r3, [pc, #148]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006260:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006264:	e031      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
			}

			else if(Rx_Header.ExtId == (0x0B7<<20|UNIQUE_Code)){
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f0>)
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <HAL_CAN_RxFifo0MsgPendingCallback+0x6f4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f043 6337 	orr.w	r3, r3, #191889408	; 0xb700000
 8006272:	429a      	cmp	r2, r3
 8006274:	d129      	bne.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
				vcell_15databyte[12].m_bytes[1] = Rx_data[0];
 8006276:	4b1e      	ldr	r3, [pc, #120]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	4b1e      	ldr	r3, [pc, #120]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800627c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				vcell_15databyte[12].m_bytes[0] = Rx_data[1];
 8006280:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006282:	785a      	ldrb	r2, [r3, #1]
 8006284:	4b1b      	ldr	r3, [pc, #108]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006286:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				vcell_15databyte[13].m_bytes[1] = Rx_data[2];
 800628a:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 800628c:	789a      	ldrb	r2, [r3, #2]
 800628e:	4b19      	ldr	r3, [pc, #100]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 8006290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
				vcell_15databyte[13].m_bytes[0] = Rx_data[3];
 8006294:	4b16      	ldr	r3, [pc, #88]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 8006296:	78da      	ldrb	r2, [r3, #3]
 8006298:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 800629a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
				vcell_15databyte[14].m_bytes[1] = Rx_data[4];
 800629e:	4b14      	ldr	r3, [pc, #80]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80062a0:	791a      	ldrb	r2, [r3, #4]
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80062a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
				vcell_15databyte[14].m_bytes[0] = Rx_data[5];
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80062aa:	795a      	ldrb	r2, [r3, #5]
 80062ac:	4b11      	ldr	r3, [pc, #68]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80062ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
				vcell_15databyte[15].m_bytes[1] = Rx_data[6];
 80062b2:	4b0f      	ldr	r3, [pc, #60]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80062b4:	799a      	ldrb	r2, [r3, #6]
 80062b6:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
				vcell_15databyte[15].m_bytes[0] = Rx_data[7];
 80062bc:	4b0c      	ldr	r3, [pc, #48]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80062be:	79da      	ldrb	r2, [r3, #7]
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x6fc>)
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80062c6:	e000      	b.n	80062ca <HAL_CAN_RxFifo0MsgPendingCallback+0x6d2>
			if(Rx_Header.ExtId>>20==0x0E0){
 80062c8:	bf00      	nop
			}
		}
				// ******************************End Cell  Voltage Data Send**************************************
		Rx_Header.ExtId = 0;
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f0>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	605a      	str	r2, [r3, #4]
		Rx_Header.StdId = 0;
 80062d0:	4b05      	ldr	r3, [pc, #20]	; (80062e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f0>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	601a      	str	r2, [r3, #0]
		memset(Rx_data, 0, 8*sizeof(Rx_data[0]));
 80062d6:	2208      	movs	r2, #8
 80062d8:	2100      	movs	r1, #0
 80062da:	4805      	ldr	r0, [pc, #20]	; (80062f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x6f8>)
 80062dc:	f007 fcaa 	bl	800dc34 <memset>
	}
}
 80062e0:	bf00      	nop
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20001540 	.word	0x20001540
 80062ec:	20000d38 	.word	0x20000d38
 80062f0:	20001388 	.word	0x20001388
 80062f4:	20000ce4 	.word	0x20000ce4

080062f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
 8006302:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <MX_DMA_Init+0x3c>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	4a0b      	ldr	r2, [pc, #44]	; (8006334 <MX_DMA_Init+0x3c>)
 8006308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800630c:	6313      	str	r3, [r2, #48]	; 0x30
 800630e:	4b09      	ldr	r3, [pc, #36]	; (8006334 <MX_DMA_Init+0x3c>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800631a:	2200      	movs	r2, #0
 800631c:	2100      	movs	r1, #0
 800631e:	2038      	movs	r0, #56	; 0x38
 8006320:	f003 ff41 	bl	800a1a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8006324:	2038      	movs	r0, #56	; 0x38
 8006326:	f003 ff5a 	bl	800a1de <HAL_NVIC_EnableIRQ>

}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	40023800 	.word	0x40023800

08006338 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800633e:	f107 030c 	add.w	r3, r7, #12
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	605a      	str	r2, [r3, #4]
 8006348:	609a      	str	r2, [r3, #8]
 800634a:	60da      	str	r2, [r3, #12]
 800634c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
 8006352:	4b31      	ldr	r3, [pc, #196]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	4a30      	ldr	r2, [pc, #192]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006358:	f043 0304 	orr.w	r3, r3, #4
 800635c:	6313      	str	r3, [r2, #48]	; 0x30
 800635e:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	4a29      	ldr	r2, [pc, #164]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	6313      	str	r3, [r2, #48]	; 0x30
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <MX_GPIO_Init+0xe0>)
 800637c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637e:	f003 0301 	and.w	r3, r3, #1
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	4b23      	ldr	r3, [pc, #140]	; (8006418 <MX_GPIO_Init+0xe0>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	4a22      	ldr	r2, [pc, #136]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006390:	f043 0302 	orr.w	r3, r3, #2
 8006394:	6313      	str	r3, [r2, #48]	; 0x30
 8006396:	4b20      	ldr	r3, [pc, #128]	; (8006418 <MX_GPIO_Init+0xe0>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led1_Pin|Led2_Pin, GPIO_PIN_RESET);
 80063a2:	2200      	movs	r2, #0
 80063a4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80063a8:	481c      	ldr	r0, [pc, #112]	; (800641c <MX_GPIO_Init+0xe4>)
 80063aa:	f004 fc76 	bl	800ac9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Led3_Pin|Buzzer_Pin, GPIO_PIN_RESET);
 80063ae:	2200      	movs	r2, #0
 80063b0:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80063b4:	481a      	ldr	r0, [pc, #104]	; (8006420 <MX_GPIO_Init+0xe8>)
 80063b6:	f004 fc70 	bl	800ac9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Led1_Pin|Led2_Pin;
 80063ba:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80063be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063c0:	2301      	movs	r3, #1
 80063c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c8:	2300      	movs	r3, #0
 80063ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063cc:	f107 030c 	add.w	r3, r7, #12
 80063d0:	4619      	mov	r1, r3
 80063d2:	4812      	ldr	r0, [pc, #72]	; (800641c <MX_GPIO_Init+0xe4>)
 80063d4:	f004 faac 	bl	800a930 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Led3_Pin|Buzzer_Pin;
 80063d8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80063dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80063de:	2301      	movs	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	4619      	mov	r1, r3
 80063f0:	480b      	ldr	r0, [pc, #44]	; (8006420 <MX_GPIO_Init+0xe8>)
 80063f2:	f004 fa9d 	bl	800a930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button2_Pin;
 80063f6:	2380      	movs	r3, #128	; 0x80
 80063f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80063fa:	2300      	movs	r3, #0
 80063fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80063fe:	2302      	movs	r3, #2
 8006400:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button2_GPIO_Port, &GPIO_InitStruct);
 8006402:	f107 030c 	add.w	r3, r7, #12
 8006406:	4619      	mov	r1, r3
 8006408:	4805      	ldr	r0, [pc, #20]	; (8006420 <MX_GPIO_Init+0xe8>)
 800640a:	f004 fa91 	bl	800a930 <HAL_GPIO_Init>

}
 800640e:	bf00      	nop
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40023800 	.word	0x40023800
 800641c:	40020400 	.word	0x40020400
 8006420:	40020800 	.word	0x40020800

08006424 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8006428:	4b12      	ldr	r3, [pc, #72]	; (8006474 <MX_I2C1_Init+0x50>)
 800642a:	4a13      	ldr	r2, [pc, #76]	; (8006478 <MX_I2C1_Init+0x54>)
 800642c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <MX_I2C1_Init+0x50>)
 8006430:	4a12      	ldr	r2, [pc, #72]	; (800647c <MX_I2C1_Init+0x58>)
 8006432:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006434:	4b0f      	ldr	r3, [pc, #60]	; (8006474 <MX_I2C1_Init+0x50>)
 8006436:	2200      	movs	r2, #0
 8006438:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800643a:	4b0e      	ldr	r3, [pc, #56]	; (8006474 <MX_I2C1_Init+0x50>)
 800643c:	2200      	movs	r2, #0
 800643e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006440:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <MX_I2C1_Init+0x50>)
 8006442:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006446:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006448:	4b0a      	ldr	r3, [pc, #40]	; (8006474 <MX_I2C1_Init+0x50>)
 800644a:	2200      	movs	r2, #0
 800644c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800644e:	4b09      	ldr	r3, [pc, #36]	; (8006474 <MX_I2C1_Init+0x50>)
 8006450:	2200      	movs	r2, #0
 8006452:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <MX_I2C1_Init+0x50>)
 8006456:	2200      	movs	r2, #0
 8006458:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800645a:	4b06      	ldr	r3, [pc, #24]	; (8006474 <MX_I2C1_Init+0x50>)
 800645c:	2200      	movs	r2, #0
 800645e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006460:	4804      	ldr	r0, [pc, #16]	; (8006474 <MX_I2C1_Init+0x50>)
 8006462:	f004 fc4b 	bl	800acfc <HAL_I2C_Init>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800646c:	f000 fc62 	bl	8006d34 <Error_Handler>
  }

}
 8006470:	bf00      	nop
 8006472:	bd80      	pop	{r7, pc}
 8006474:	200013c0 	.word	0x200013c0
 8006478:	40005400 	.word	0x40005400
 800647c:	000186a0 	.word	0x000186a0

08006480 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8006484:	4b12      	ldr	r3, [pc, #72]	; (80064d0 <MX_I2C2_Init+0x50>)
 8006486:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <MX_I2C2_Init+0x54>)
 8006488:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800648a:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <MX_I2C2_Init+0x50>)
 800648c:	4a12      	ldr	r2, [pc, #72]	; (80064d8 <MX_I2C2_Init+0x58>)
 800648e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006490:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <MX_I2C2_Init+0x50>)
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8006496:	4b0e      	ldr	r3, [pc, #56]	; (80064d0 <MX_I2C2_Init+0x50>)
 8006498:	2200      	movs	r2, #0
 800649a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800649c:	4b0c      	ldr	r3, [pc, #48]	; (80064d0 <MX_I2C2_Init+0x50>)
 800649e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80064a2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064a4:	4b0a      	ldr	r3, [pc, #40]	; (80064d0 <MX_I2C2_Init+0x50>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80064aa:	4b09      	ldr	r3, [pc, #36]	; (80064d0 <MX_I2C2_Init+0x50>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <MX_I2C2_Init+0x50>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064b6:	4b06      	ldr	r3, [pc, #24]	; (80064d0 <MX_I2C2_Init+0x50>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80064bc:	4804      	ldr	r0, [pc, #16]	; (80064d0 <MX_I2C2_Init+0x50>)
 80064be:	f004 fc1d 	bl	800acfc <HAL_I2C_Init>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d001      	beq.n	80064cc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80064c8:	f000 fc34 	bl	8006d34 <Error_Handler>
  }

}
 80064cc:	bf00      	nop
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20001414 	.word	0x20001414
 80064d4:	40005800 	.word	0x40005800
 80064d8:	00061a80 	.word	0x00061a80

080064dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08c      	sub	sp, #48	; 0x30
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064e4:	f107 031c 	add.w	r3, r7, #28
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	605a      	str	r2, [r3, #4]
 80064ee:	609a      	str	r2, [r3, #8]
 80064f0:	60da      	str	r2, [r3, #12]
 80064f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a33      	ldr	r2, [pc, #204]	; (80065c8 <HAL_I2C_MspInit+0xec>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d12d      	bne.n	800655a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80064fe:	2300      	movs	r3, #0
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	4b32      	ldr	r3, [pc, #200]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 8006504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006506:	4a31      	ldr	r2, [pc, #196]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	6313      	str	r3, [r2, #48]	; 0x30
 800650e:	4b2f      	ldr	r3, [pc, #188]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 8006510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800651a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800651e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006520:	2312      	movs	r3, #18
 8006522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006524:	2301      	movs	r3, #1
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006528:	2303      	movs	r3, #3
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800652c:	2304      	movs	r3, #4
 800652e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006530:	f107 031c 	add.w	r3, r7, #28
 8006534:	4619      	mov	r1, r3
 8006536:	4826      	ldr	r0, [pc, #152]	; (80065d0 <HAL_I2C_MspInit+0xf4>)
 8006538:	f004 f9fa 	bl	800a930 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	4b22      	ldr	r3, [pc, #136]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 8006542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006544:	4a21      	ldr	r2, [pc, #132]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 8006546:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800654a:	6413      	str	r3, [r2, #64]	; 0x40
 800654c:	4b1f      	ldr	r3, [pc, #124]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 800654e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006558:	e031      	b.n	80065be <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a1d      	ldr	r2, [pc, #116]	; (80065d4 <HAL_I2C_MspInit+0xf8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d12c      	bne.n	80065be <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006564:	2300      	movs	r3, #0
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	4b18      	ldr	r3, [pc, #96]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656c:	4a17      	ldr	r2, [pc, #92]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 800656e:	f043 0302 	orr.w	r3, r3, #2
 8006572:	6313      	str	r3, [r2, #48]	; 0x30
 8006574:	4b15      	ldr	r3, [pc, #84]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006580:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006586:	2312      	movs	r3, #18
 8006588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800658a:	2301      	movs	r3, #1
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800658e:	2303      	movs	r3, #3
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006592:	2304      	movs	r3, #4
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006596:	f107 031c 	add.w	r3, r7, #28
 800659a:	4619      	mov	r1, r3
 800659c:	480c      	ldr	r0, [pc, #48]	; (80065d0 <HAL_I2C_MspInit+0xf4>)
 800659e:	f004 f9c7 	bl	800a930 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	4b09      	ldr	r3, [pc, #36]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	4a08      	ldr	r2, [pc, #32]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 80065ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065b0:	6413      	str	r3, [r2, #64]	; 0x40
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <HAL_I2C_MspInit+0xf0>)
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
}
 80065be:	bf00      	nop
 80065c0:	3730      	adds	r7, #48	; 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40005400 	.word	0x40005400
 80065cc:	40023800 	.word	0x40023800
 80065d0:	40020400 	.word	0x40020400
 80065d4:	40005800 	.word	0x40005800

080065d8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0

  hiwdg.Instance = IWDG;
 80065dc:	4b09      	ldr	r3, [pc, #36]	; (8006604 <MX_IWDG_Init+0x2c>)
 80065de:	4a0a      	ldr	r2, [pc, #40]	; (8006608 <MX_IWDG_Init+0x30>)
 80065e0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80065e2:	4b08      	ldr	r3, [pc, #32]	; (8006604 <MX_IWDG_Init+0x2c>)
 80065e4:	2204      	movs	r2, #4
 80065e6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <MX_IWDG_Init+0x2c>)
 80065ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80065ee:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80065f0:	4804      	ldr	r0, [pc, #16]	; (8006604 <MX_IWDG_Init+0x2c>)
 80065f2:	f005 fa7d 	bl	800baf0 <HAL_IWDG_Init>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d001      	beq.n	8006600 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80065fc:	f000 fb9a 	bl	8006d34 <Error_Handler>
  }

}
 8006600:	bf00      	nop
 8006602:	bd80      	pop	{r7, pc}
 8006604:	20001468 	.word	0x20001468
 8006608:	40003000 	.word	0x40003000

0800660c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8006610:	f002 fa12 	bl	8008a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006614:	f000 f88c 	bl	8006730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006618:	f7ff fe8e 	bl	8006338 <MX_GPIO_Init>
  MX_DMA_Init();
 800661c:	f7ff fe6c 	bl	80062f8 <MX_DMA_Init>
  MX_I2C2_Init();
 8006620:	f7ff ff2e 	bl	8006480 <MX_I2C2_Init>
  MX_TIM1_Init();
 8006624:	f001 fec2 	bl	80083ac <MX_TIM1_Init>
  MX_CAN1_Init();
 8006628:	f7ff f8b2 	bl	8005790 <MX_CAN1_Init>
  MX_I2C1_Init();
 800662c:	f7ff fefa 	bl	8006424 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8006630:	f002 f920 	bl	8008874 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8006634:	f7fe ff48 	bl	80054c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8006638:	f001 ff58 	bl	80084ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800663c:	f002 f8f0 	bl	8008820 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8006640:	f001 ffa0 	bl	8008584 <MX_TIM3_Init>
  MX_IWDG_Init();
 8006644:	f7ff ffc8 	bl	80065d8 <MX_IWDG_Init>
  MX_TIM4_Init();
 8006648:	f001 ffea 	bl	8008620 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(500);
 800664c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006650:	f002 fa60 	bl	8008b14 <HAL_Delay>
  Charger_Mode = 0;
 8006654:	4b2b      	ldr	r3, [pc, #172]	; (8006704 <main+0xf8>)
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
  flag_CHARGE_MODE=0;
 800665a:	4b2b      	ldr	r3, [pc, #172]	; (8006708 <main+0xfc>)
 800665c:	2200      	movs	r2, #0
 800665e:	701a      	strb	r2, [r3, #0]
  Eror_Code = 0;
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <main+0x100>)
 8006662:	2200      	movs	r2, #0
 8006664:	701a      	strb	r2, [r3, #0]
  CHARGER_ON_Init();
 8006666:	f000 f8ef 	bl	8006848 <CHARGER_ON_Init>
  reset=0;
 800666a:	4b29      	ldr	r3, [pc, #164]	; (8006710 <main+0x104>)
 800666c:	2200      	movs	r2, #0
 800666e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  EEPROM_isDeviceReady(0XA0);
 8006670:	20a0      	movs	r0, #160	; 0xa0
 8006672:	f7fe feed 	bl	8005450 <EEPROM_isDeviceReady>
  EEPROM_WriteData(10, 15);
 8006676:	210f      	movs	r1, #15
 8006678:	200a      	movs	r0, #10
 800667a:	f7fe ff07 	bl	800548c <EEPROM_WriteData>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(Charger_Mode==1) 		{
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <main+0xf8>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <main+0x86>
		  Display_ChargeMode();
 8006686:	f000 f9cf 	bl	8006a28 <Display_ChargeMode>
		  flag_charge = 1;
 800668a:	4b22      	ldr	r3, [pc, #136]	; (8006714 <main+0x108>)
 800668c:	2201      	movs	r2, #1
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	e008      	b.n	80066a4 <main+0x98>
	  }
	  else if (Charger_Mode==2)	Display_ProtectionMode();
 8006692:	4b1c      	ldr	r3, [pc, #112]	; (8006704 <main+0xf8>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d102      	bne.n	80066a0 <main+0x94>
 800669a:	f000 f999 	bl	80069d0 <Display_ProtectionMode>
 800669e:	e001      	b.n	80066a4 <main+0x98>
	  else						Display_StanbyMode();
 80066a0:	f000 f978 	bl	8006994 <Display_StanbyMode>

	  if(flag_charge == 1 && Charger_Mode == 0){	// Deteksi perubahan state dari charge ke standby
 80066a4:	4b1b      	ldr	r3, [pc, #108]	; (8006714 <main+0x108>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d127      	bne.n	80066fc <main+0xf0>
 80066ac:	4b15      	ldr	r3, [pc, #84]	; (8006704 <main+0xf8>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d123      	bne.n	80066fc <main+0xf0>
		  if(flag_FullCharge == 1) send=6;
 80066b4:	4b18      	ldr	r3, [pc, #96]	; (8006718 <main+0x10c>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d102      	bne.n	80066c2 <main+0xb6>
 80066bc:	4b17      	ldr	r3, [pc, #92]	; (800671c <main+0x110>)
 80066be:	2206      	movs	r2, #6
 80066c0:	701a      	strb	r2, [r3, #0]
		  if(flag_ForceSwap == 1) send=5;
 80066c2:	4b17      	ldr	r3, [pc, #92]	; (8006720 <main+0x114>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d102      	bne.n	80066d0 <main+0xc4>
 80066ca:	4b14      	ldr	r3, [pc, #80]	; (800671c <main+0x110>)
 80066cc:	2205      	movs	r2, #5
 80066ce:	701a      	strb	r2, [r3, #0]

		  Ready_Handshaking = 0;					// Variable bantu untuk delay handshaking
 80066d0:	4b14      	ldr	r3, [pc, #80]	; (8006724 <main+0x118>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	701a      	strb	r2, [r3, #0]
		  Delay_ForceSWAP += 1;
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <main+0x11c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	3301      	adds	r3, #1
 80066dc:	4a12      	ldr	r2, [pc, #72]	; (8006728 <main+0x11c>)
 80066de:	6013      	str	r3, [r2, #0]
		  if(Delay_ForceSWAP >= 300){
 80066e0:	4b11      	ldr	r3, [pc, #68]	; (8006728 <main+0x11c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80066e8:	db08      	blt.n	80066fc <main+0xf0>
			  Ready_Handshaking = 1;
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <main+0x118>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]
			  flag_charge = 0;
 80066f0:	4b08      	ldr	r3, [pc, #32]	; (8006714 <main+0x108>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
			  Delay_ForceSWAP = 0;
 80066f6:	4b0c      	ldr	r3, [pc, #48]	; (8006728 <main+0x11c>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
		  }
	  }

	  HAL_IWDG_Refresh(&hiwdg);
 80066fc:	480b      	ldr	r0, [pc, #44]	; (800672c <main+0x120>)
 80066fe:	f005 fa30 	bl	800bb62 <HAL_IWDG_Refresh>
	  if(Charger_Mode==1) 		{
 8006702:	e7bc      	b.n	800667e <main+0x72>
 8006704:	20000720 	.word	0x20000720
 8006708:	200006e8 	.word	0x200006e8
 800670c:	20000694 	.word	0x20000694
 8006710:	200006f0 	.word	0x200006f0
 8006714:	20000ef8 	.word	0x20000ef8
 8006718:	20001260 	.word	0x20001260
 800671c:	200008f0 	.word	0x200008f0
 8006720:	20000684 	.word	0x20000684
 8006724:	200010a4 	.word	0x200010a4
 8006728:	2000025c 	.word	0x2000025c
 800672c:	20001468 	.word	0x20001468

08006730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b092      	sub	sp, #72	; 0x48
 8006734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006736:	f107 0318 	add.w	r3, r7, #24
 800673a:	2230      	movs	r2, #48	; 0x30
 800673c:	2100      	movs	r1, #0
 800673e:	4618      	mov	r0, r3
 8006740:	f007 fa78 	bl	800dc34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	609a      	str	r2, [r3, #8]
 800674e:	60da      	str	r2, [r3, #12]
 8006750:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006752:	230a      	movs	r3, #10
 8006754:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006756:	2301      	movs	r3, #1
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800675a:	2310      	movs	r3, #16
 800675c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800675e:	2301      	movs	r3, #1
 8006760:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006762:	2302      	movs	r3, #2
 8006764:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006766:	2300      	movs	r3, #0
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800676a:	230d      	movs	r3, #13
 800676c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800676e:	23c3      	movs	r3, #195	; 0xc3
 8006770:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006772:	2302      	movs	r3, #2
 8006774:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006776:	2304      	movs	r3, #4
 8006778:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800677a:	f107 0318 	add.w	r3, r7, #24
 800677e:	4618      	mov	r0, r3
 8006780:	f005 f9fe 	bl	800bb80 <HAL_RCC_OscConfig>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800678a:	f000 fad3 	bl	8006d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800678e:	230f      	movs	r3, #15
 8006790:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006792:	2302      	movs	r3, #2
 8006794:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006796:	2300      	movs	r3, #0
 8006798:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800679a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800679e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80067a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80067a6:	1d3b      	adds	r3, r7, #4
 80067a8:	2103      	movs	r1, #3
 80067aa:	4618      	mov	r0, r3
 80067ac:	f005 fc52 	bl	800c054 <HAL_RCC_ClockConfig>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80067b6:	f000 fabd 	bl	8006d34 <Error_Handler>
  }
}
 80067ba:	bf00      	nop
 80067bc:	3748      	adds	r7, #72	; 0x48
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
	...

080067c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	if (hadc->Instance==ADC1)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a13      	ldr	r2, [pc, #76]	; (8006820 <HAL_ADC_ConvCpltCallback+0x5c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d11f      	bne.n	8006816 <HAL_ADC_ConvCpltCallback+0x52>
	{
		ADC_VoutN = ADC_value[0];
 80067d6:	4b13      	ldr	r3, [pc, #76]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 80067d8:	881a      	ldrh	r2, [r3, #0]
 80067da:	4b13      	ldr	r3, [pc, #76]	; (8006828 <HAL_ADC_ConvCpltCallback+0x64>)
 80067dc:	801a      	strh	r2, [r3, #0]
		ADC_VoutP = ADC_value[1];
 80067de:	4b11      	ldr	r3, [pc, #68]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 80067e0:	885a      	ldrh	r2, [r3, #2]
 80067e2:	4b12      	ldr	r3, [pc, #72]	; (800682c <HAL_ADC_ConvCpltCallback+0x68>)
 80067e4:	801a      	strh	r2, [r3, #0]
		ADC_Iin = ADC_value[2];
 80067e6:	4b0f      	ldr	r3, [pc, #60]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 80067e8:	889a      	ldrh	r2, [r3, #4]
 80067ea:	4b11      	ldr	r3, [pc, #68]	; (8006830 <HAL_ADC_ConvCpltCallback+0x6c>)
 80067ec:	801a      	strh	r2, [r3, #0]
		ADC_temp1 = ADC_value[3];
 80067ee:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 80067f0:	88da      	ldrh	r2, [r3, #6]
 80067f2:	4b10      	ldr	r3, [pc, #64]	; (8006834 <HAL_ADC_ConvCpltCallback+0x70>)
 80067f4:	801a      	strh	r2, [r3, #0]
		ADC_temp2 = ADC_value[4];
 80067f6:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 80067f8:	891a      	ldrh	r2, [r3, #8]
 80067fa:	4b0f      	ldr	r3, [pc, #60]	; (8006838 <HAL_ADC_ConvCpltCallback+0x74>)
 80067fc:	801a      	strh	r2, [r3, #0]
		ADC_VinN = ADC_value[5];
 80067fe:	4b09      	ldr	r3, [pc, #36]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 8006800:	895a      	ldrh	r2, [r3, #10]
 8006802:	4b0e      	ldr	r3, [pc, #56]	; (800683c <HAL_ADC_ConvCpltCallback+0x78>)
 8006804:	801a      	strh	r2, [r3, #0]
		ADC_VinP = ADC_value[6];
 8006806:	4b07      	ldr	r3, [pc, #28]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 8006808:	899a      	ldrh	r2, [r3, #12]
 800680a:	4b0d      	ldr	r3, [pc, #52]	; (8006840 <HAL_ADC_ConvCpltCallback+0x7c>)
 800680c:	801a      	strh	r2, [r3, #0]
		ADC_Iout = ADC_value[7];
 800680e:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_ADC_ConvCpltCallback+0x60>)
 8006810:	89da      	ldrh	r2, [r3, #14]
 8006812:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <HAL_ADC_ConvCpltCallback+0x80>)
 8006814:	801a      	strh	r2, [r3, #0]
	}
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr
 8006820:	40012000 	.word	0x40012000
 8006824:	20000904 	.word	0x20000904
 8006828:	20000696 	.word	0x20000696
 800682c:	200008e4 	.word	0x200008e4
 8006830:	200006b6 	.word	0x200006b6
 8006834:	200008ee 	.word	0x200008ee
 8006838:	2000069a 	.word	0x2000069a
 800683c:	20000ca0 	.word	0x20000ca0
 8006840:	20000714 	.word	0x20000714
 8006844:	200006fc 	.word	0x200006fc

08006848 <CHARGER_ON_Init>:

void CHARGER_ON_Init(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 800684c:	2201      	movs	r2, #1
 800684e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006852:	4845      	ldr	r0, [pc, #276]	; (8006968 <CHARGER_ON_Init+0x120>)
 8006854:	f004 fa21 	bl	800ac9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Led3_Pin,1);
 8006858:	2201      	movs	r2, #1
 800685a:	2140      	movs	r1, #64	; 0x40
 800685c:	4842      	ldr	r0, [pc, #264]	; (8006968 <CHARGER_ON_Init+0x120>)
 800685e:	f004 fa1c 	bl	800ac9a <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8006862:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006866:	f002 f955 	bl	8008b14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 800686a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800686e:	483e      	ldr	r0, [pc, #248]	; (8006968 <CHARGER_ON_Init+0x120>)
 8006870:	f004 fa2b 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 8006874:	2140      	movs	r1, #64	; 0x40
 8006876:	483c      	ldr	r0, [pc, #240]	; (8006968 <CHARGER_ON_Init+0x120>)
 8006878:	f004 fa27 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_Delay(300);
 800687c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006880:	f002 f948 	bl	8008b14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8006884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006888:	4837      	ldr	r0, [pc, #220]	; (8006968 <CHARGER_ON_Init+0x120>)
 800688a:	f004 fa1e 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 800688e:	2140      	movs	r1, #64	; 0x40
 8006890:	4835      	ldr	r0, [pc, #212]	; (8006968 <CHARGER_ON_Init+0x120>)
 8006892:	f004 fa1a 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8006896:	2064      	movs	r0, #100	; 0x64
 8006898:	f002 f93c 	bl	8008b14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 800689c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a0:	4831      	ldr	r0, [pc, #196]	; (8006968 <CHARGER_ON_Init+0x120>)
 80068a2:	f004 fa12 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 80068a6:	2140      	movs	r1, #64	; 0x40
 80068a8:	482f      	ldr	r0, [pc, #188]	; (8006968 <CHARGER_ON_Init+0x120>)
 80068aa:	f004 fa0e 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80068ae:	2064      	movs	r0, #100	; 0x64
 80068b0:	f002 f930 	bl	8008b14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80068b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068b8:	482b      	ldr	r0, [pc, #172]	; (8006968 <CHARGER_ON_Init+0x120>)
 80068ba:	f004 fa06 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 80068be:	2140      	movs	r1, #64	; 0x40
 80068c0:	4829      	ldr	r0, [pc, #164]	; (8006968 <CHARGER_ON_Init+0x120>)
 80068c2:	f004 fa02 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80068c6:	2064      	movs	r0, #100	; 0x64
 80068c8:	f002 f924 	bl	8008b14 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 80068cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d0:	4825      	ldr	r0, [pc, #148]	; (8006968 <CHARGER_ON_Init+0x120>)
 80068d2:	f004 f9fa 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOC, Led3_Pin);
 80068d6:	2140      	movs	r1, #64	; 0x40
 80068d8:	4823      	ldr	r0, [pc, #140]	; (8006968 <CHARGER_ON_Init+0x120>)
 80068da:	f004 f9f6 	bl	800acca <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80068de:	2064      	movs	r0, #100	; 0x64
 80068e0:	f002 f918 	bl	8008b14 <HAL_Delay>

	SSD1306_Init();
 80068e4:	f000 fa2c 	bl	8006d40 <SSD1306_Init>
	HAL_Delay(1000);
 80068e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068ec:	f002 f912 	bl	8008b14 <HAL_Delay>
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80068f0:	2000      	movs	r0, #0
 80068f2:	f000 fb11 	bl	8006f18 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80068f6:	f000 fae1 	bl	8006ebc <SSD1306_UpdateScreen>

	CAN_Setting();
 80068fa:	f7fe ffcf 	bl	800589c <CAN_Setting>

	SSD1306_GotoXY (15,10);
 80068fe:	210a      	movs	r1, #10
 8006900:	200f      	movs	r0, #15
 8006902:	f000 fb7f 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts ("GEN-I Charger", &Font_7x10, 1);
 8006906:	2201      	movs	r2, #1
 8006908:	4918      	ldr	r1, [pc, #96]	; (800696c <CHARGER_ON_Init+0x124>)
 800690a:	4819      	ldr	r0, [pc, #100]	; (8006970 <CHARGER_ON_Init+0x128>)
 800690c:	f000 fc10 	bl	8007130 <SSD1306_Puts>
	SSD1306_GotoXY (50, 30);
 8006910:	211e      	movs	r1, #30
 8006912:	2032      	movs	r0, #50	; 0x32
 8006914:	f000 fb76 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts ("V1.0", &Font_7x10, 1);
 8006918:	2201      	movs	r2, #1
 800691a:	4914      	ldr	r1, [pc, #80]	; (800696c <CHARGER_ON_Init+0x124>)
 800691c:	4815      	ldr	r0, [pc, #84]	; (8006974 <CHARGER_ON_Init+0x12c>)
 800691e:	f000 fc07 	bl	8007130 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8006922:	f000 facb 	bl	8006ebc <SSD1306_UpdateScreen>
	SSD1306_Fill (0);
 8006926:	2000      	movs	r0, #0
 8006928:	f000 faf6 	bl	8006f18 <SSD1306_Fill>

	Ready_Handshaking = 1;
 800692c:	4b12      	ldr	r3, [pc, #72]	; (8006978 <CHARGER_ON_Init+0x130>)
 800692e:	2201      	movs	r2, #1
 8006930:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&htim1);
 8006932:	4812      	ldr	r0, [pc, #72]	; (800697c <CHARGER_ON_Init+0x134>)
 8006934:	f005 fda5 	bl	800c482 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006938:	2100      	movs	r1, #0
 800693a:	4810      	ldr	r0, [pc, #64]	; (800697c <CHARGER_ON_Init+0x134>)
 800693c:	f005 fe1c 	bl	800c578 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8006940:	480f      	ldr	r0, [pc, #60]	; (8006980 <CHARGER_ON_Init+0x138>)
 8006942:	f005 fdc1 	bl	800c4c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8006946:	480f      	ldr	r0, [pc, #60]	; (8006984 <CHARGER_ON_Init+0x13c>)
 8006948:	f005 fdbe 	bl	800c4c8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 800694c:	480e      	ldr	r0, [pc, #56]	; (8006988 <CHARGER_ON_Init+0x140>)
 800694e:	f005 fdbb 	bl	800c4c8 <HAL_TIM_Base_Start_IT>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_value, 8);
 8006952:	2208      	movs	r2, #8
 8006954:	490d      	ldr	r1, [pc, #52]	; (800698c <CHARGER_ON_Init+0x144>)
 8006956:	480e      	ldr	r0, [pc, #56]	; (8006990 <CHARGER_ON_Init+0x148>)
 8006958:	f002 f942 	bl	8008be0 <HAL_ADC_Start_DMA>
	HAL_Delay(1000);
 800695c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006960:	f002 f8d8 	bl	8008b14 <HAL_Delay>
//	Charger_Mode=1;
}
 8006964:	bf00      	nop
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40020800 	.word	0x40020800
 800696c:	20000044 	.word	0x20000044
 8006970:	080101b0 	.word	0x080101b0
 8006974:	080101c0 	.word	0x080101c0
 8006978:	200010a4 	.word	0x200010a4
 800697c:	2000160c 	.word	0x2000160c
 8006980:	2000164c 	.word	0x2000164c
 8006984:	200015cc 	.word	0x200015cc
 8006988:	2000158c 	.word	0x2000158c
 800698c:	20000904 	.word	0x20000904
 8006990:	200012d8 	.word	0x200012d8

08006994 <Display_StanbyMode>:

void Display_StanbyMode(void){
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006998:	2000      	movs	r0, #0
 800699a:	f000 fabd 	bl	8006f18 <SSD1306_Fill>
	SSD1306_GotoXY (20,30);
 800699e:	211e      	movs	r1, #30
 80069a0:	2014      	movs	r0, #20
 80069a2:	f000 fb2f 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts ("STANBY-Mode", &Font_7x10, 1);
 80069a6:	2201      	movs	r2, #1
 80069a8:	4906      	ldr	r1, [pc, #24]	; (80069c4 <Display_StanbyMode+0x30>)
 80069aa:	4807      	ldr	r0, [pc, #28]	; (80069c8 <Display_StanbyMode+0x34>)
 80069ac:	f000 fbc0 	bl	8007130 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 80069b0:	f000 fa84 	bl	8006ebc <SSD1306_UpdateScreen>
	HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 80069b4:	2200      	movs	r2, #0
 80069b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80069ba:	4804      	ldr	r0, [pc, #16]	; (80069cc <Display_StanbyMode+0x38>)
 80069bc:	f004 f96d 	bl	800ac9a <HAL_GPIO_WritePin>
}
 80069c0:	bf00      	nop
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	20000044 	.word	0x20000044
 80069c8:	080101c8 	.word	0x080101c8
 80069cc:	40020800 	.word	0x40020800

080069d0 <Display_ProtectionMode>:

void Display_ProtectionMode(void){
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80069d4:	2000      	movs	r0, #0
 80069d6:	f000 fa9f 	bl	8006f18 <SSD1306_Fill>
	SSD1306_GotoXY (20,10);
 80069da:	210a      	movs	r1, #10
 80069dc:	2014      	movs	r0, #20
 80069de:	f000 fb11 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts ("FAULT Protect", &Font_7x10, 1);
 80069e2:	2201      	movs	r2, #1
 80069e4:	490b      	ldr	r1, [pc, #44]	; (8006a14 <Display_ProtectionMode+0x44>)
 80069e6:	480c      	ldr	r0, [pc, #48]	; (8006a18 <Display_ProtectionMode+0x48>)
 80069e8:	f000 fba2 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, "Eror =%2d", Eror_Code);
 80069ec:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <Display_ProtectionMode+0x4c>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	490b      	ldr	r1, [pc, #44]	; (8006a20 <Display_ProtectionMode+0x50>)
 80069f4:	480b      	ldr	r0, [pc, #44]	; (8006a24 <Display_ProtectionMode+0x54>)
 80069f6:	f007 fd75 	bl	800e4e4 <siprintf>
	SSD1306_GotoXY (20,30);
 80069fa:	211e      	movs	r1, #30
 80069fc:	2014      	movs	r0, #20
 80069fe:	f000 fb01 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006a02:	2201      	movs	r2, #1
 8006a04:	4903      	ldr	r1, [pc, #12]	; (8006a14 <Display_ProtectionMode+0x44>)
 8006a06:	4807      	ldr	r0, [pc, #28]	; (8006a24 <Display_ProtectionMode+0x54>)
 8006a08:	f000 fb92 	bl	8007130 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006a0c:	f000 fa56 	bl	8006ebc <SSD1306_UpdateScreen>
}
 8006a10:	bf00      	nop
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	20000044 	.word	0x20000044
 8006a18:	080101d4 	.word	0x080101d4
 8006a1c:	20000694 	.word	0x20000694
 8006a20:	080101e4 	.word	0x080101e4
 8006a24:	20001474 	.word	0x20001474

08006a28 <Display_ChargeMode>:

void Display_ChargeMode(void){
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	b08b      	sub	sp, #44	; 0x2c
 8006a2e:	af08      	add	r7, sp, #32
	SSD1306_Fill (0);
 8006a30:	2000      	movs	r0, #0
 8006a32:	f000 fa71 	bl	8006f18 <SSD1306_Fill>

	sprintf(buffer_i2c, "HOLE-%d :",HOLE);
 8006a36:	2206      	movs	r2, #6
 8006a38:	499f      	ldr	r1, [pc, #636]	; (8006cb8 <Display_ChargeMode+0x290>)
 8006a3a:	48a0      	ldr	r0, [pc, #640]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a3c:	f007 fd52 	bl	800e4e4 <siprintf>
	SSD1306_GotoXY (3,0);
 8006a40:	2100      	movs	r1, #0
 8006a42:	2003      	movs	r0, #3
 8006a44:	f000 fade 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006a48:	2201      	movs	r2, #1
 8006a4a:	499d      	ldr	r1, [pc, #628]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006a4c:	489b      	ldr	r0, [pc, #620]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a4e:	f000 fb6f 	bl	8007130 <SSD1306_Puts>

	if(flag_CHARGE_MODE == 0) sprintf(buffer_i2c, "(CC)");
 8006a52:	4b9c      	ldr	r3, [pc, #624]	; (8006cc4 <Display_ChargeMode+0x29c>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d106      	bne.n	8006a68 <Display_ChargeMode+0x40>
 8006a5a:	4b98      	ldr	r3, [pc, #608]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a5c:	4a9a      	ldr	r2, [pc, #616]	; (8006cc8 <Display_ChargeMode+0x2a0>)
 8006a5e:	6810      	ldr	r0, [r2, #0]
 8006a60:	6018      	str	r0, [r3, #0]
 8006a62:	7912      	ldrb	r2, [r2, #4]
 8006a64:	711a      	strb	r2, [r3, #4]
 8006a66:	e00e      	b.n	8006a86 <Display_ChargeMode+0x5e>
	else if(flag_CHARGE_MODE == 1) sprintf(buffer_i2c, "(CV)");
 8006a68:	4b96      	ldr	r3, [pc, #600]	; (8006cc4 <Display_ChargeMode+0x29c>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d106      	bne.n	8006a7e <Display_ChargeMode+0x56>
 8006a70:	4b92      	ldr	r3, [pc, #584]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a72:	4a96      	ldr	r2, [pc, #600]	; (8006ccc <Display_ChargeMode+0x2a4>)
 8006a74:	6810      	ldr	r0, [r2, #0]
 8006a76:	6018      	str	r0, [r3, #0]
 8006a78:	7912      	ldrb	r2, [r2, #4]
 8006a7a:	711a      	strb	r2, [r3, #4]
 8006a7c:	e003      	b.n	8006a86 <Display_ChargeMode+0x5e>
	else sprintf(buffer_i2c, "(-)");
 8006a7e:	4b8f      	ldr	r3, [pc, #572]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a80:	4a93      	ldr	r2, [pc, #588]	; (8006cd0 <Display_ChargeMode+0x2a8>)
 8006a82:	6810      	ldr	r0, [r2, #0]
 8006a84:	6018      	str	r0, [r3, #0]

	SSD1306_GotoXY (95,0);
 8006a86:	2100      	movs	r1, #0
 8006a88:	205f      	movs	r0, #95	; 0x5f
 8006a8a:	f000 fabb 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006a8e:	2201      	movs	r2, #1
 8006a90:	498b      	ldr	r1, [pc, #556]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006a92:	488a      	ldr	r0, [pc, #552]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a94:	f000 fb4c 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, "%s", UPPER_UNIQUE_Code);
 8006a98:	498e      	ldr	r1, [pc, #568]	; (8006cd4 <Display_ChargeMode+0x2ac>)
 8006a9a:	4888      	ldr	r0, [pc, #544]	; (8006cbc <Display_ChargeMode+0x294>)
 8006a9c:	f007 fd42 	bl	800e524 <strcpy>
	SSD1306_GotoXY (60,0);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	203c      	movs	r0, #60	; 0x3c
 8006aa4:	f000 faae 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	4985      	ldr	r1, [pc, #532]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006aac:	4883      	ldr	r0, [pc, #524]	; (8006cbc <Display_ChargeMode+0x294>)
 8006aae:	f000 fb3f 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, ">> %4.1f|%4.1f|%4.1f \r\n", dc, BPack_SOC, BPack_Temp);
 8006ab2:	4b89      	ldr	r3, [pc, #548]	; (8006cd8 <Display_ChargeMode+0x2b0>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f7f9 fcf2 	bl	80004a0 <__aeabi_f2d>
 8006abc:	4680      	mov	r8, r0
 8006abe:	4689      	mov	r9, r1
 8006ac0:	4b86      	ldr	r3, [pc, #536]	; (8006cdc <Display_ChargeMode+0x2b4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7f9 fceb 	bl	80004a0 <__aeabi_f2d>
 8006aca:	4604      	mov	r4, r0
 8006acc:	460d      	mov	r5, r1
 8006ace:	4b84      	ldr	r3, [pc, #528]	; (8006ce0 <Display_ChargeMode+0x2b8>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7f9 fce4 	bl	80004a0 <__aeabi_f2d>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ae0:	e9cd 4500 	strd	r4, r5, [sp]
 8006ae4:	4642      	mov	r2, r8
 8006ae6:	464b      	mov	r3, r9
 8006ae8:	497e      	ldr	r1, [pc, #504]	; (8006ce4 <Display_ChargeMode+0x2bc>)
 8006aea:	4874      	ldr	r0, [pc, #464]	; (8006cbc <Display_ChargeMode+0x294>)
 8006aec:	f007 fcfa 	bl	800e4e4 <siprintf>
//	sprintf(buffer_i2c, "D = %4.1f | %4d   \r\n", dc, EEPROM_ReadData(10));
	SSD1306_GotoXY (3,13);
 8006af0:	210d      	movs	r1, #13
 8006af2:	2003      	movs	r0, #3
 8006af4:	f000 fa86 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006af8:	2201      	movs	r2, #1
 8006afa:	4971      	ldr	r1, [pc, #452]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006afc:	486f      	ldr	r0, [pc, #444]	; (8006cbc <Display_ChargeMode+0x294>)
 8006afe:	f000 fb17 	bl	8007130 <SSD1306_Puts>

	if(Delay_USART == 1){
 8006b02:	4b79      	ldr	r3, [pc, #484]	; (8006ce8 <Display_ChargeMode+0x2c0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d147      	bne.n	8006b9a <Display_ChargeMode+0x172>
	sprintf(buffer_i2c,"%4.3f,%4.2f,%4.2f,%4.2f,%4.0f \r\n", duty, Voltage_Charger, Current_Charger, BPack_SOC, Ah_CONSUMPTION);
 8006b0a:	4b78      	ldr	r3, [pc, #480]	; (8006cec <Display_ChargeMode+0x2c4>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7f9 fcc6 	bl	80004a0 <__aeabi_f2d>
 8006b14:	e9c7 0100 	strd	r0, r1, [r7]
 8006b18:	4b75      	ldr	r3, [pc, #468]	; (8006cf0 <Display_ChargeMode+0x2c8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7f9 fcbf 	bl	80004a0 <__aeabi_f2d>
 8006b22:	4604      	mov	r4, r0
 8006b24:	460d      	mov	r5, r1
 8006b26:	4b73      	ldr	r3, [pc, #460]	; (8006cf4 <Display_ChargeMode+0x2cc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7f9 fcb8 	bl	80004a0 <__aeabi_f2d>
 8006b30:	4680      	mov	r8, r0
 8006b32:	4689      	mov	r9, r1
 8006b34:	4b69      	ldr	r3, [pc, #420]	; (8006cdc <Display_ChargeMode+0x2b4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7f9 fcb1 	bl	80004a0 <__aeabi_f2d>
 8006b3e:	4682      	mov	sl, r0
 8006b40:	468b      	mov	fp, r1
 8006b42:	4b6d      	ldr	r3, [pc, #436]	; (8006cf8 <Display_ChargeMode+0x2d0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7f9 fcaa 	bl	80004a0 <__aeabi_f2d>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	460b      	mov	r3, r1
 8006b50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b54:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006b58:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006b5c:	e9cd 4500 	strd	r4, r5, [sp]
 8006b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b64:	4965      	ldr	r1, [pc, #404]	; (8006cfc <Display_ChargeMode+0x2d4>)
 8006b66:	4855      	ldr	r0, [pc, #340]	; (8006cbc <Display_ChargeMode+0x294>)
 8006b68:	f007 fcbc 	bl	800e4e4 <siprintf>
//	sprintf(buffer_i2c,"%4.0f,%4.0f,%4.0f",ADC_Average_VoutP,ADC_Average_VoutN,ADC_VoltageResult);
	HAL_UART_Transmit_IT(&huart3, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006b6c:	4853      	ldr	r0, [pc, #332]	; (8006cbc <Display_ChargeMode+0x294>)
 8006b6e:	f7f9 fb2b 	bl	80001c8 <strlen>
 8006b72:	4603      	mov	r3, r0
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	4950      	ldr	r1, [pc, #320]	; (8006cbc <Display_ChargeMode+0x294>)
 8006b7a:	4861      	ldr	r0, [pc, #388]	; (8006d00 <Display_ChargeMode+0x2d8>)
 8006b7c:	f006 fbe4 	bl	800d348 <HAL_UART_Transmit_IT>
	HAL_UART_Transmit_IT(&huart1, (uint8_t *)buffer_i2c, strlen(buffer_i2c));
 8006b80:	484e      	ldr	r0, [pc, #312]	; (8006cbc <Display_ChargeMode+0x294>)
 8006b82:	f7f9 fb21 	bl	80001c8 <strlen>
 8006b86:	4603      	mov	r3, r0
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	494b      	ldr	r1, [pc, #300]	; (8006cbc <Display_ChargeMode+0x294>)
 8006b8e:	485d      	ldr	r0, [pc, #372]	; (8006d04 <Display_ChargeMode+0x2dc>)
 8006b90:	f006 fbda 	bl	800d348 <HAL_UART_Transmit_IT>
	Delay_USART = 0;
 8006b94:	4b54      	ldr	r3, [pc, #336]	; (8006ce8 <Display_ChargeMode+0x2c0>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]
	}

	HAL_Delay(10);
 8006b9a:	200a      	movs	r0, #10
 8006b9c:	f001 ffba 	bl	8008b14 <HAL_Delay>

	sprintf(buffer_i2c, "T = %4.1f | %4.1f", Temp_T1, Temp_T2);
 8006ba0:	4b59      	ldr	r3, [pc, #356]	; (8006d08 <Display_ChargeMode+0x2e0>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7f9 fc7b 	bl	80004a0 <__aeabi_f2d>
 8006baa:	4605      	mov	r5, r0
 8006bac:	460e      	mov	r6, r1
 8006bae:	4b57      	ldr	r3, [pc, #348]	; (8006d0c <Display_ChargeMode+0x2e4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f7f9 fc74 	bl	80004a0 <__aeabi_f2d>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	460c      	mov	r4, r1
 8006bbc:	e9cd 3400 	strd	r3, r4, [sp]
 8006bc0:	462a      	mov	r2, r5
 8006bc2:	4633      	mov	r3, r6
 8006bc4:	4952      	ldr	r1, [pc, #328]	; (8006d10 <Display_ChargeMode+0x2e8>)
 8006bc6:	483d      	ldr	r0, [pc, #244]	; (8006cbc <Display_ChargeMode+0x294>)
 8006bc8:	f007 fc8c 	bl	800e4e4 <siprintf>
	SSD1306_GotoXY (3,23);
 8006bcc:	2117      	movs	r1, #23
 8006bce:	2003      	movs	r0, #3
 8006bd0:	f000 fa18 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	493a      	ldr	r1, [pc, #232]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006bd8:	4838      	ldr	r0, [pc, #224]	; (8006cbc <Display_ChargeMode+0x294>)
 8006bda:	f000 faa9 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, "V = %4.0f | %5.2f", ADC_VoltageResult, Voltage_Charger);
 8006bde:	4b4d      	ldr	r3, [pc, #308]	; (8006d14 <Display_ChargeMode+0x2ec>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7f9 fc5c 	bl	80004a0 <__aeabi_f2d>
 8006be8:	4605      	mov	r5, r0
 8006bea:	460e      	mov	r6, r1
 8006bec:	4b40      	ldr	r3, [pc, #256]	; (8006cf0 <Display_ChargeMode+0x2c8>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7f9 fc55 	bl	80004a0 <__aeabi_f2d>
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	e9cd 3400 	strd	r3, r4, [sp]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	4633      	mov	r3, r6
 8006c02:	4945      	ldr	r1, [pc, #276]	; (8006d18 <Display_ChargeMode+0x2f0>)
 8006c04:	482d      	ldr	r0, [pc, #180]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c06:	f007 fc6d 	bl	800e4e4 <siprintf>
//	sprintf(buffer_i2c,"%4.0f|%4.0f|%4.0f",ADC_Average_VoutP,ADC_Average_VoutN,ADC_VoltageResult);
	SSD1306_GotoXY (3,33);
 8006c0a:	2121      	movs	r1, #33	; 0x21
 8006c0c:	2003      	movs	r0, #3
 8006c0e:	f000 f9f9 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006c12:	2201      	movs	r2, #1
 8006c14:	492a      	ldr	r1, [pc, #168]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006c16:	4829      	ldr	r0, [pc, #164]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c18:	f000 fa8a 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, "A = %4.0f | %5.2f", ADC_Average_Iout, Current_Charger);
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <Display_ChargeMode+0x2f4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7f9 fc3d 	bl	80004a0 <__aeabi_f2d>
 8006c26:	4605      	mov	r5, r0
 8006c28:	460e      	mov	r6, r1
 8006c2a:	4b32      	ldr	r3, [pc, #200]	; (8006cf4 <Display_ChargeMode+0x2cc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7f9 fc36 	bl	80004a0 <__aeabi_f2d>
 8006c34:	4603      	mov	r3, r0
 8006c36:	460c      	mov	r4, r1
 8006c38:	e9cd 3400 	strd	r3, r4, [sp]
 8006c3c:	462a      	mov	r2, r5
 8006c3e:	4633      	mov	r3, r6
 8006c40:	4937      	ldr	r1, [pc, #220]	; (8006d20 <Display_ChargeMode+0x2f8>)
 8006c42:	481e      	ldr	r0, [pc, #120]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c44:	f007 fc4e 	bl	800e4e4 <siprintf>
	SSD1306_GotoXY (3,43);
 8006c48:	212b      	movs	r1, #43	; 0x2b
 8006c4a:	2003      	movs	r0, #3
 8006c4c:	f000 f9da 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006c50:	2201      	movs	r2, #1
 8006c52:	491b      	ldr	r1, [pc, #108]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006c54:	4819      	ldr	r0, [pc, #100]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c56:	f000 fa6b 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, "E =%2d--%2d ", Eror_Code, LastEror_code);
 8006c5a:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <Display_ChargeMode+0x2fc>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <Display_ChargeMode+0x300>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	4931      	ldr	r1, [pc, #196]	; (8006d2c <Display_ChargeMode+0x304>)
 8006c66:	4815      	ldr	r0, [pc, #84]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c68:	f007 fc3c 	bl	800e4e4 <siprintf>
	SSD1306_GotoXY (3,53);
 8006c6c:	2135      	movs	r1, #53	; 0x35
 8006c6e:	2003      	movs	r0, #3
 8006c70:	f000 f9c8 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006c74:	2201      	movs	r2, #1
 8006c76:	4912      	ldr	r1, [pc, #72]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006c78:	4810      	ldr	r0, [pc, #64]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c7a:	f000 fa59 	bl	8007130 <SSD1306_Puts>

	sprintf(buffer_i2c, "%5.0f", Ah_CONSUMPTION);
 8006c7e:	4b1e      	ldr	r3, [pc, #120]	; (8006cf8 <Display_ChargeMode+0x2d0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7f9 fc0c 	bl	80004a0 <__aeabi_f2d>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	4623      	mov	r3, r4
 8006c90:	4927      	ldr	r1, [pc, #156]	; (8006d30 <Display_ChargeMode+0x308>)
 8006c92:	480a      	ldr	r0, [pc, #40]	; (8006cbc <Display_ChargeMode+0x294>)
 8006c94:	f007 fc26 	bl	800e4e4 <siprintf>
	SSD1306_GotoXY (80,53);
 8006c98:	2135      	movs	r1, #53	; 0x35
 8006c9a:	2050      	movs	r0, #80	; 0x50
 8006c9c:	f000 f9b2 	bl	8007004 <SSD1306_GotoXY>
	SSD1306_Puts (buffer_i2c, &Font_7x10, 1);
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	4907      	ldr	r1, [pc, #28]	; (8006cc0 <Display_ChargeMode+0x298>)
 8006ca4:	4805      	ldr	r0, [pc, #20]	; (8006cbc <Display_ChargeMode+0x294>)
 8006ca6:	f000 fa43 	bl	8007130 <SSD1306_Puts>

	SSD1306_UpdateScreen(); //display
 8006caa:	f000 f907 	bl	8006ebc <SSD1306_UpdateScreen>
}
 8006cae:	bf00      	nop
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	080101f0 	.word	0x080101f0
 8006cbc:	20001474 	.word	0x20001474
 8006cc0:	20000044 	.word	0x20000044
 8006cc4:	200006e8 	.word	0x200006e8
 8006cc8:	080101fc 	.word	0x080101fc
 8006ccc:	08010204 	.word	0x08010204
 8006cd0:	0801020c 	.word	0x0801020c
 8006cd4:	200006d0 	.word	0x200006d0
 8006cd8:	200006c4 	.word	0x200006c4
 8006cdc:	20000abc 	.word	0x20000abc
 8006ce0:	20000cd8 	.word	0x20000cd8
 8006ce4:	08010210 	.word	0x08010210
 8006ce8:	200006a8 	.word	0x200006a8
 8006cec:	2000126c 	.word	0x2000126c
 8006cf0:	20000ef4 	.word	0x20000ef4
 8006cf4:	20001264 	.word	0x20001264
 8006cf8:	200008f4 	.word	0x200008f4
 8006cfc:	08010228 	.word	0x08010228
 8006d00:	2000168c 	.word	0x2000168c
 8006d04:	200016cc 	.word	0x200016cc
 8006d08:	20000cd0 	.word	0x20000cd0
 8006d0c:	200006a0 	.word	0x200006a0
 8006d10:	0801024c 	.word	0x0801024c
 8006d14:	20000cd4 	.word	0x20000cd4
 8006d18:	08010260 	.word	0x08010260
 8006d1c:	20001288 	.word	0x20001288
 8006d20:	08010274 	.word	0x08010274
 8006d24:	20000694 	.word	0x20000694
 8006d28:	200006fe 	.word	0x200006fe
 8006d2c:	08010288 	.word	0x08010288
 8006d30:	08010298 	.word	0x08010298

08006d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d34:	b480      	push	{r7}
 8006d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006d38:	bf00      	nop
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bc80      	pop	{r7}
 8006d3e:	4770      	bx	lr

08006d40 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006d46:	f000 fa19 	bl	800717c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8006d4a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8006d4e:	2201      	movs	r2, #1
 8006d50:	2178      	movs	r1, #120	; 0x78
 8006d52:	4858      	ldr	r0, [pc, #352]	; (8006eb4 <SSD1306_Init+0x174>)
 8006d54:	f004 fb02 	bl	800b35c <HAL_I2C_IsDeviceReady>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e0a4      	b.n	8006eac <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 25000;
 8006d62:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8006d66:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006d68:	e002      	b.n	8006d70 <SSD1306_Init+0x30>
		p--;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d1f9      	bne.n	8006d6a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8006d76:	22ae      	movs	r2, #174	; 0xae
 8006d78:	2100      	movs	r1, #0
 8006d7a:	2078      	movs	r0, #120	; 0x78
 8006d7c:	f000 fa6c 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8006d80:	2220      	movs	r2, #32
 8006d82:	2100      	movs	r1, #0
 8006d84:	2078      	movs	r0, #120	; 0x78
 8006d86:	f000 fa67 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006d8a:	2210      	movs	r2, #16
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	2078      	movs	r0, #120	; 0x78
 8006d90:	f000 fa62 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006d94:	22b0      	movs	r2, #176	; 0xb0
 8006d96:	2100      	movs	r1, #0
 8006d98:	2078      	movs	r0, #120	; 0x78
 8006d9a:	f000 fa5d 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006d9e:	22c8      	movs	r2, #200	; 0xc8
 8006da0:	2100      	movs	r1, #0
 8006da2:	2078      	movs	r0, #120	; 0x78
 8006da4:	f000 fa58 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006da8:	2200      	movs	r2, #0
 8006daa:	2100      	movs	r1, #0
 8006dac:	2078      	movs	r0, #120	; 0x78
 8006dae:	f000 fa53 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006db2:	2210      	movs	r2, #16
 8006db4:	2100      	movs	r1, #0
 8006db6:	2078      	movs	r0, #120	; 0x78
 8006db8:	f000 fa4e 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006dbc:	2240      	movs	r2, #64	; 0x40
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	2078      	movs	r0, #120	; 0x78
 8006dc2:	f000 fa49 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006dc6:	2281      	movs	r2, #129	; 0x81
 8006dc8:	2100      	movs	r1, #0
 8006dca:	2078      	movs	r0, #120	; 0x78
 8006dcc:	f000 fa44 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006dd0:	22ff      	movs	r2, #255	; 0xff
 8006dd2:	2100      	movs	r1, #0
 8006dd4:	2078      	movs	r0, #120	; 0x78
 8006dd6:	f000 fa3f 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006dda:	22a1      	movs	r2, #161	; 0xa1
 8006ddc:	2100      	movs	r1, #0
 8006dde:	2078      	movs	r0, #120	; 0x78
 8006de0:	f000 fa3a 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006de4:	22a6      	movs	r2, #166	; 0xa6
 8006de6:	2100      	movs	r1, #0
 8006de8:	2078      	movs	r0, #120	; 0x78
 8006dea:	f000 fa35 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006dee:	22a8      	movs	r2, #168	; 0xa8
 8006df0:	2100      	movs	r1, #0
 8006df2:	2078      	movs	r0, #120	; 0x78
 8006df4:	f000 fa30 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006df8:	223f      	movs	r2, #63	; 0x3f
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	2078      	movs	r0, #120	; 0x78
 8006dfe:	f000 fa2b 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006e02:	22a4      	movs	r2, #164	; 0xa4
 8006e04:	2100      	movs	r1, #0
 8006e06:	2078      	movs	r0, #120	; 0x78
 8006e08:	f000 fa26 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006e0c:	22d3      	movs	r2, #211	; 0xd3
 8006e0e:	2100      	movs	r1, #0
 8006e10:	2078      	movs	r0, #120	; 0x78
 8006e12:	f000 fa21 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006e16:	2200      	movs	r2, #0
 8006e18:	2100      	movs	r1, #0
 8006e1a:	2078      	movs	r0, #120	; 0x78
 8006e1c:	f000 fa1c 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006e20:	22d5      	movs	r2, #213	; 0xd5
 8006e22:	2100      	movs	r1, #0
 8006e24:	2078      	movs	r0, #120	; 0x78
 8006e26:	f000 fa17 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006e2a:	22f0      	movs	r2, #240	; 0xf0
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	2078      	movs	r0, #120	; 0x78
 8006e30:	f000 fa12 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006e34:	22d9      	movs	r2, #217	; 0xd9
 8006e36:	2100      	movs	r1, #0
 8006e38:	2078      	movs	r0, #120	; 0x78
 8006e3a:	f000 fa0d 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8006e3e:	2222      	movs	r2, #34	; 0x22
 8006e40:	2100      	movs	r1, #0
 8006e42:	2078      	movs	r0, #120	; 0x78
 8006e44:	f000 fa08 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006e48:	22da      	movs	r2, #218	; 0xda
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	2078      	movs	r0, #120	; 0x78
 8006e4e:	f000 fa03 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8006e52:	2212      	movs	r2, #18
 8006e54:	2100      	movs	r1, #0
 8006e56:	2078      	movs	r0, #120	; 0x78
 8006e58:	f000 f9fe 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006e5c:	22db      	movs	r2, #219	; 0xdb
 8006e5e:	2100      	movs	r1, #0
 8006e60:	2078      	movs	r0, #120	; 0x78
 8006e62:	f000 f9f9 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8006e66:	2220      	movs	r2, #32
 8006e68:	2100      	movs	r1, #0
 8006e6a:	2078      	movs	r0, #120	; 0x78
 8006e6c:	f000 f9f4 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006e70:	228d      	movs	r2, #141	; 0x8d
 8006e72:	2100      	movs	r1, #0
 8006e74:	2078      	movs	r0, #120	; 0x78
 8006e76:	f000 f9ef 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8006e7a:	2214      	movs	r2, #20
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	2078      	movs	r0, #120	; 0x78
 8006e80:	f000 f9ea 	bl	8007258 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006e84:	22af      	movs	r2, #175	; 0xaf
 8006e86:	2100      	movs	r1, #0
 8006e88:	2078      	movs	r0, #120	; 0x78
 8006e8a:	f000 f9e5 	bl	8007258 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006e8e:	2000      	movs	r0, #0
 8006e90:	f000 f842 	bl	8006f18 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8006e94:	f000 f812 	bl	8006ebc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <SSD1306_Init+0x178>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006e9e:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <SSD1306_Init+0x178>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006ea4:	4b04      	ldr	r3, [pc, #16]	; (8006eb8 <SSD1306_Init+0x178>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006eaa:	2301      	movs	r3, #1
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	20001414 	.word	0x20001414
 8006eb8:	20000660 	.word	0x20000660

08006ebc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	71fb      	strb	r3, [r7, #7]
 8006ec6:	e01d      	b.n	8006f04 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	3b50      	subs	r3, #80	; 0x50
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2078      	movs	r0, #120	; 0x78
 8006ed4:	f000 f9c0 	bl	8007258 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006ed8:	2200      	movs	r2, #0
 8006eda:	2100      	movs	r1, #0
 8006edc:	2078      	movs	r0, #120	; 0x78
 8006ede:	f000 f9bb 	bl	8007258 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006ee2:	2210      	movs	r2, #16
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	2078      	movs	r0, #120	; 0x78
 8006ee8:	f000 f9b6 	bl	8007258 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	01db      	lsls	r3, r3, #7
 8006ef0:	4a08      	ldr	r2, [pc, #32]	; (8006f14 <SSD1306_UpdateScreen+0x58>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	2140      	movs	r1, #64	; 0x40
 8006ef8:	2078      	movs	r0, #120	; 0x78
 8006efa:	f000 f953 	bl	80071a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	3301      	adds	r3, #1
 8006f02:	71fb      	strb	r3, [r7, #7]
 8006f04:	79fb      	ldrb	r3, [r7, #7]
 8006f06:	2b07      	cmp	r3, #7
 8006f08:	d9de      	bls.n	8006ec8 <SSD1306_UpdateScreen+0xc>
	}
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000260 	.word	0x20000260

08006f18 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0x100, sizeof(SSD1306_Buffer));
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <SSD1306_Fill+0x14>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e001      	b.n	8006f30 <SSD1306_Fill+0x18>
 8006f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f34:	4619      	mov	r1, r3
 8006f36:	4803      	ldr	r0, [pc, #12]	; (8006f44 <SSD1306_Fill+0x2c>)
 8006f38:	f006 fe7c 	bl	800dc34 <memset>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000260 	.word	0x20000260

08006f48 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	80fb      	strh	r3, [r7, #6]
 8006f52:	460b      	mov	r3, r1
 8006f54:	80bb      	strh	r3, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	70fb      	strb	r3, [r7, #3]
	if (
 8006f5a:	88fb      	ldrh	r3, [r7, #6]
 8006f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f5e:	d848      	bhi.n	8006ff2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006f60:	88bb      	ldrh	r3, [r7, #4]
 8006f62:	2b3f      	cmp	r3, #63	; 0x3f
 8006f64:	d845      	bhi.n	8006ff2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006f66:	4b25      	ldr	r3, [pc, #148]	; (8006ffc <SSD1306_DrawPixel+0xb4>)
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d006      	beq.n	8006f7c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006f6e:	78fb      	ldrb	r3, [r7, #3]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf0c      	ite	eq
 8006f74:	2301      	moveq	r3, #1
 8006f76:	2300      	movne	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006f7c:	78fb      	ldrb	r3, [r7, #3]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d11a      	bne.n	8006fb8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	88bb      	ldrh	r3, [r7, #4]
 8006f86:	08db      	lsrs	r3, r3, #3
 8006f88:	b298      	uxth	r0, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	01db      	lsls	r3, r3, #7
 8006f8e:	4413      	add	r3, r2
 8006f90:	4a1b      	ldr	r2, [pc, #108]	; (8007000 <SSD1306_DrawPixel+0xb8>)
 8006f92:	5cd3      	ldrb	r3, [r2, r3]
 8006f94:	b25a      	sxtb	r2, r3
 8006f96:	88bb      	ldrh	r3, [r7, #4]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa2:	b25b      	sxtb	r3, r3
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	b259      	sxtb	r1, r3
 8006fa8:	88fa      	ldrh	r2, [r7, #6]
 8006faa:	4603      	mov	r3, r0
 8006fac:	01db      	lsls	r3, r3, #7
 8006fae:	4413      	add	r3, r2
 8006fb0:	b2c9      	uxtb	r1, r1
 8006fb2:	4a13      	ldr	r2, [pc, #76]	; (8007000 <SSD1306_DrawPixel+0xb8>)
 8006fb4:	54d1      	strb	r1, [r2, r3]
 8006fb6:	e01d      	b.n	8006ff4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	88bb      	ldrh	r3, [r7, #4]
 8006fbc:	08db      	lsrs	r3, r3, #3
 8006fbe:	b298      	uxth	r0, r3
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	01db      	lsls	r3, r3, #7
 8006fc4:	4413      	add	r3, r2
 8006fc6:	4a0e      	ldr	r2, [pc, #56]	; (8007000 <SSD1306_DrawPixel+0xb8>)
 8006fc8:	5cd3      	ldrb	r3, [r2, r3]
 8006fca:	b25a      	sxtb	r2, r3
 8006fcc:	88bb      	ldrh	r3, [r7, #4]
 8006fce:	f003 0307 	and.w	r3, r3, #7
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	4013      	ands	r3, r2
 8006fe0:	b259      	sxtb	r1, r3
 8006fe2:	88fa      	ldrh	r2, [r7, #6]
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	01db      	lsls	r3, r3, #7
 8006fe8:	4413      	add	r3, r2
 8006fea:	b2c9      	uxtb	r1, r1
 8006fec:	4a04      	ldr	r2, [pc, #16]	; (8007000 <SSD1306_DrawPixel+0xb8>)
 8006fee:	54d1      	strb	r1, [r2, r3]
 8006ff0:	e000      	b.n	8006ff4 <SSD1306_DrawPixel+0xac>
		return;
 8006ff2:	bf00      	nop
	}
}
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bc80      	pop	{r7}
 8006ffa:	4770      	bx	lr
 8006ffc:	20000660 	.word	0x20000660
 8007000:	20000260 	.word	0x20000260

08007004 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	460a      	mov	r2, r1
 800700e:	80fb      	strh	r3, [r7, #6]
 8007010:	4613      	mov	r3, r2
 8007012:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8007014:	4a05      	ldr	r2, [pc, #20]	; (800702c <SSD1306_GotoXY+0x28>)
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800701a:	4a04      	ldr	r2, [pc, #16]	; (800702c <SSD1306_GotoXY+0x28>)
 800701c:	88bb      	ldrh	r3, [r7, #4]
 800701e:	8053      	strh	r3, [r2, #2]
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	bc80      	pop	{r7}
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	20000660 	.word	0x20000660

08007030 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	4603      	mov	r3, r0
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	71fb      	strb	r3, [r7, #7]
 800703c:	4613      	mov	r3, r2
 800703e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007040:	4b3a      	ldr	r3, [pc, #232]	; (800712c <SSD1306_Putc+0xfc>)
 8007042:	881b      	ldrh	r3, [r3, #0]
 8007044:	461a      	mov	r2, r3
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	4413      	add	r3, r2
	if (
 800704c:	2b7f      	cmp	r3, #127	; 0x7f
 800704e:	dc07      	bgt.n	8007060 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8007050:	4b36      	ldr	r3, [pc, #216]	; (800712c <SSD1306_Putc+0xfc>)
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	461a      	mov	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	785b      	ldrb	r3, [r3, #1]
 800705a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800705c:	2b3f      	cmp	r3, #63	; 0x3f
 800705e:	dd01      	ble.n	8007064 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8007060:	2300      	movs	r3, #0
 8007062:	e05e      	b.n	8007122 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8007064:	2300      	movs	r3, #0
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	e04b      	b.n	8007102 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	79fb      	ldrb	r3, [r7, #7]
 8007070:	3b20      	subs	r3, #32
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	7849      	ldrb	r1, [r1, #1]
 8007076:	fb01 f303 	mul.w	r3, r1, r3
 800707a:	4619      	mov	r1, r3
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	440b      	add	r3, r1
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8007088:	2300      	movs	r3, #0
 800708a:	613b      	str	r3, [r7, #16]
 800708c:	e030      	b.n	80070f0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d010      	beq.n	80070c0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800709e:	4b23      	ldr	r3, [pc, #140]	; (800712c <SSD1306_Putc+0xfc>)
 80070a0:	881a      	ldrh	r2, [r3, #0]
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	4413      	add	r3, r2
 80070a8:	b298      	uxth	r0, r3
 80070aa:	4b20      	ldr	r3, [pc, #128]	; (800712c <SSD1306_Putc+0xfc>)
 80070ac:	885a      	ldrh	r2, [r3, #2]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	4413      	add	r3, r2
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	79ba      	ldrb	r2, [r7, #6]
 80070b8:	4619      	mov	r1, r3
 80070ba:	f7ff ff45 	bl	8006f48 <SSD1306_DrawPixel>
 80070be:	e014      	b.n	80070ea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80070c0:	4b1a      	ldr	r3, [pc, #104]	; (800712c <SSD1306_Putc+0xfc>)
 80070c2:	881a      	ldrh	r2, [r3, #0]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	4413      	add	r3, r2
 80070ca:	b298      	uxth	r0, r3
 80070cc:	4b17      	ldr	r3, [pc, #92]	; (800712c <SSD1306_Putc+0xfc>)
 80070ce:	885a      	ldrh	r2, [r3, #2]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	b299      	uxth	r1, r3
 80070d8:	79bb      	ldrb	r3, [r7, #6]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	bf0c      	ite	eq
 80070de:	2301      	moveq	r3, #1
 80070e0:	2300      	movne	r3, #0
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	461a      	mov	r2, r3
 80070e6:	f7ff ff2f 	bl	8006f48 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	3301      	adds	r3, #1
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	461a      	mov	r2, r3
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d3c8      	bcc.n	800708e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	3301      	adds	r3, #1
 8007100:	617b      	str	r3, [r7, #20]
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	461a      	mov	r2, r3
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	4293      	cmp	r3, r2
 800710c:	d3ad      	bcc.n	800706a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800710e:	4b07      	ldr	r3, [pc, #28]	; (800712c <SSD1306_Putc+0xfc>)
 8007110:	881a      	ldrh	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	b29b      	uxth	r3, r3
 8007118:	4413      	add	r3, r2
 800711a:	b29a      	uxth	r2, r3
 800711c:	4b03      	ldr	r3, [pc, #12]	; (800712c <SSD1306_Putc+0xfc>)
 800711e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8007120:	79fb      	ldrb	r3, [r7, #7]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000660 	.word	0x20000660

08007130 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	4613      	mov	r3, r2
 800713c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800713e:	e012      	b.n	8007166 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	79fa      	ldrb	r2, [r7, #7]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f7ff ff71 	bl	8007030 <SSD1306_Putc>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	429a      	cmp	r2, r3
 8007158:	d002      	beq.n	8007160 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	e008      	b.n	8007172 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	3301      	adds	r3, #1
 8007164:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1e8      	bne.n	8007140 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	781b      	ldrb	r3, [r3, #0]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 350000;
 8007182:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <ssd1306_I2C_Init+0x24>)
 8007184:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007186:	e002      	b.n	800718e <ssd1306_I2C_Init+0x12>
		p--;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3b01      	subs	r3, #1
 800718c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f9      	bne.n	8007188 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8007194:	bf00      	nop
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	bc80      	pop	{r7}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	00055730 	.word	0x00055730

080071a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	603a      	str	r2, [r7, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	4603      	mov	r3, r0
 80071b0:	71fb      	strb	r3, [r7, #7]
 80071b2:	460b      	mov	r3, r1
 80071b4:	71bb      	strb	r3, [r7, #6]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80bb      	strh	r3, [r7, #4]
 80071ba:	466b      	mov	r3, sp
 80071bc:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80071be:	88bb      	ldrh	r3, [r7, #4]
 80071c0:	1c58      	adds	r0, r3, #1
 80071c2:	1e43      	subs	r3, r0, #1
 80071c4:	613b      	str	r3, [r7, #16]
 80071c6:	4603      	mov	r3, r0
 80071c8:	4619      	mov	r1, r3
 80071ca:	f04f 0200 	mov.w	r2, #0
 80071ce:	f04f 0300 	mov.w	r3, #0
 80071d2:	f04f 0400 	mov.w	r4, #0
 80071d6:	00d4      	lsls	r4, r2, #3
 80071d8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80071dc:	00cb      	lsls	r3, r1, #3
 80071de:	4603      	mov	r3, r0
 80071e0:	4619      	mov	r1, r3
 80071e2:	f04f 0200 	mov.w	r2, #0
 80071e6:	f04f 0300 	mov.w	r3, #0
 80071ea:	f04f 0400 	mov.w	r4, #0
 80071ee:	00d4      	lsls	r4, r2, #3
 80071f0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80071f4:	00cb      	lsls	r3, r1, #3
 80071f6:	4603      	mov	r3, r0
 80071f8:	3307      	adds	r3, #7
 80071fa:	08db      	lsrs	r3, r3, #3
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	ebad 0d03 	sub.w	sp, sp, r3
 8007202:	ab02      	add	r3, sp, #8
 8007204:	3300      	adds	r3, #0
 8007206:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	79ba      	ldrb	r2, [r7, #6]
 800720c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800720e:	2301      	movs	r3, #1
 8007210:	75fb      	strb	r3, [r7, #23]
 8007212:	e00a      	b.n	800722a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8007214:	7dfb      	ldrb	r3, [r7, #23]
 8007216:	3b01      	subs	r3, #1
 8007218:	683a      	ldr	r2, [r7, #0]
 800721a:	441a      	add	r2, r3
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	7811      	ldrb	r1, [r2, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8007224:	7dfb      	ldrb	r3, [r7, #23]
 8007226:	3301      	adds	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
 800722a:	7dfb      	ldrb	r3, [r7, #23]
 800722c:	b29b      	uxth	r3, r3
 800722e:	88ba      	ldrh	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d2ef      	bcs.n	8007214 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	b299      	uxth	r1, r3
 8007238:	68fa      	ldr	r2, [r7, #12]
 800723a:	88b8      	ldrh	r0, [r7, #4]
 800723c:	230a      	movs	r3, #10
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	4603      	mov	r3, r0
 8007242:	4804      	ldr	r0, [pc, #16]	; (8007254 <ssd1306_I2C_WriteMulti+0xb0>)
 8007244:	f003 fe92 	bl	800af6c <HAL_I2C_Master_Transmit>
 8007248:	46ad      	mov	sp, r5
}
 800724a:	bf00      	nop
 800724c:	3718      	adds	r7, #24
 800724e:	46bd      	mov	sp, r7
 8007250:	bdb0      	pop	{r4, r5, r7, pc}
 8007252:	bf00      	nop
 8007254:	20001414 	.word	0x20001414

08007258 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af02      	add	r7, sp, #8
 800725e:	4603      	mov	r3, r0
 8007260:	71fb      	strb	r3, [r7, #7]
 8007262:	460b      	mov	r3, r1
 8007264:	71bb      	strb	r3, [r7, #6]
 8007266:	4613      	mov	r3, r2
 8007268:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800726a:	79bb      	ldrb	r3, [r7, #6]
 800726c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800726e:	797b      	ldrb	r3, [r7, #5]
 8007270:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8007272:	79fb      	ldrb	r3, [r7, #7]
 8007274:	b299      	uxth	r1, r3
 8007276:	f107 020c 	add.w	r2, r7, #12
 800727a:	230a      	movs	r3, #10
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	2302      	movs	r3, #2
 8007280:	4803      	ldr	r0, [pc, #12]	; (8007290 <ssd1306_I2C_Write+0x38>)
 8007282:	f003 fe73 	bl	800af6c <HAL_I2C_Master_Transmit>
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20001414 	.word	0x20001414

08007294 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <HAL_MspInit+0x48>)
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <HAL_MspInit+0x48>)
 80072a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072a8:	6453      	str	r3, [r2, #68]	; 0x44
 80072aa:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <HAL_MspInit+0x48>)
 80072ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b2:	607b      	str	r3, [r7, #4]
 80072b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072b6:	2300      	movs	r3, #0
 80072b8:	603b      	str	r3, [r7, #0]
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <HAL_MspInit+0x48>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	4a07      	ldr	r2, [pc, #28]	; (80072dc <HAL_MspInit+0x48>)
 80072c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072c4:	6413      	str	r3, [r2, #64]	; 0x40
 80072c6:	4b05      	ldr	r3, [pc, #20]	; (80072dc <HAL_MspInit+0x48>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bc80      	pop	{r7}
 80072da:	4770      	bx	lr
 80072dc:	40023800 	.word	0x40023800

080072e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072e0:	b480      	push	{r7}
 80072e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bc80      	pop	{r7}
 80072ea:	4770      	bx	lr

080072ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072f0:	e7fe      	b.n	80072f0 <HardFault_Handler+0x4>

080072f2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80072f2:	b480      	push	{r7}
 80072f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80072f6:	e7fe      	b.n	80072f6 <MemManage_Handler+0x4>

080072f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80072fc:	e7fe      	b.n	80072fc <BusFault_Handler+0x4>

080072fe <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80072fe:	b480      	push	{r7}
 8007300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007302:	e7fe      	b.n	8007302 <UsageFault_Handler+0x4>

08007304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007308:	bf00      	nop
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007314:	bf00      	nop
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr

0800731c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007320:	bf00      	nop
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr

08007328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800732c:	f001 fbd6 	bl	8008adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007330:	bf00      	nop
 8007332:	bd80      	pop	{r7, pc}

08007334 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007338:	4802      	ldr	r0, [pc, #8]	; (8007344 <CAN1_RX0_IRQHandler+0x10>)
 800733a:	f002 fc3f 	bl	8009bbc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800733e:	bf00      	nop
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20001398 	.word	0x20001398

08007348 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007348:	b5b0      	push	{r4, r5, r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	// *********************** Sensing Process (ADC average) ******************************
	ADC_SUM_Iin = ADC_SUM_Iin - ADC_Array_Iin[i];		//delete old data
 800734c:	4ba2      	ldr	r3, [pc, #648]	; (80075d8 <TIM2_IRQHandler+0x290>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4aa2      	ldr	r2, [pc, #648]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007352:	7812      	ldrb	r2, [r2, #0]
 8007354:	4611      	mov	r1, r2
 8007356:	4aa2      	ldr	r2, [pc, #648]	; (80075e0 <TIM2_IRQHandler+0x298>)
 8007358:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	4a9e      	ldr	r2, [pc, #632]	; (80075d8 <TIM2_IRQHandler+0x290>)
 8007360:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN - ADC_Array_VinN[i];
 8007362:	4ba0      	ldr	r3, [pc, #640]	; (80075e4 <TIM2_IRQHandler+0x29c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a9d      	ldr	r2, [pc, #628]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007368:	7812      	ldrb	r2, [r2, #0]
 800736a:	4611      	mov	r1, r2
 800736c:	4a9e      	ldr	r2, [pc, #632]	; (80075e8 <TIM2_IRQHandler+0x2a0>)
 800736e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007372:	1a9b      	subs	r3, r3, r2
 8007374:	4a9b      	ldr	r2, [pc, #620]	; (80075e4 <TIM2_IRQHandler+0x29c>)
 8007376:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP - ADC_Array_VinP[i];
 8007378:	4b9c      	ldr	r3, [pc, #624]	; (80075ec <TIM2_IRQHandler+0x2a4>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a97      	ldr	r2, [pc, #604]	; (80075dc <TIM2_IRQHandler+0x294>)
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	4611      	mov	r1, r2
 8007382:	4a9b      	ldr	r2, [pc, #620]	; (80075f0 <TIM2_IRQHandler+0x2a8>)
 8007384:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	4a98      	ldr	r2, [pc, #608]	; (80075ec <TIM2_IRQHandler+0x2a4>)
 800738c:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout - ADC_Array_Iout[i];
 800738e:	4b99      	ldr	r3, [pc, #612]	; (80075f4 <TIM2_IRQHandler+0x2ac>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a92      	ldr	r2, [pc, #584]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007394:	7812      	ldrb	r2, [r2, #0]
 8007396:	4611      	mov	r1, r2
 8007398:	4a97      	ldr	r2, [pc, #604]	; (80075f8 <TIM2_IRQHandler+0x2b0>)
 800739a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	4a94      	ldr	r2, [pc, #592]	; (80075f4 <TIM2_IRQHandler+0x2ac>)
 80073a2:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN - ADC_Array_VoutN[i];
 80073a4:	4b95      	ldr	r3, [pc, #596]	; (80075fc <TIM2_IRQHandler+0x2b4>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a8c      	ldr	r2, [pc, #560]	; (80075dc <TIM2_IRQHandler+0x294>)
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	4611      	mov	r1, r2
 80073ae:	4a94      	ldr	r2, [pc, #592]	; (8007600 <TIM2_IRQHandler+0x2b8>)
 80073b0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	4a91      	ldr	r2, [pc, #580]	; (80075fc <TIM2_IRQHandler+0x2b4>)
 80073b8:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP - ADC_Array_VoutP[i];
 80073ba:	4b92      	ldr	r3, [pc, #584]	; (8007604 <TIM2_IRQHandler+0x2bc>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a87      	ldr	r2, [pc, #540]	; (80075dc <TIM2_IRQHandler+0x294>)
 80073c0:	7812      	ldrb	r2, [r2, #0]
 80073c2:	4611      	mov	r1, r2
 80073c4:	4a90      	ldr	r2, [pc, #576]	; (8007608 <TIM2_IRQHandler+0x2c0>)
 80073c6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80073ca:	1a9b      	subs	r3, r3, r2
 80073cc:	4a8d      	ldr	r2, [pc, #564]	; (8007604 <TIM2_IRQHandler+0x2bc>)
 80073ce:	6013      	str	r3, [r2, #0]

	ADC_Array_Iin[i] = ADC_Iin;				//save data from ADC read
 80073d0:	4b82      	ldr	r3, [pc, #520]	; (80075dc <TIM2_IRQHandler+0x294>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
 80073d6:	4b8d      	ldr	r3, [pc, #564]	; (800760c <TIM2_IRQHandler+0x2c4>)
 80073d8:	8819      	ldrh	r1, [r3, #0]
 80073da:	4b81      	ldr	r3, [pc, #516]	; (80075e0 <TIM2_IRQHandler+0x298>)
 80073dc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinN[i] = ADC_VinN;
 80073e0:	4b7e      	ldr	r3, [pc, #504]	; (80075dc <TIM2_IRQHandler+0x294>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	461a      	mov	r2, r3
 80073e6:	4b8a      	ldr	r3, [pc, #552]	; (8007610 <TIM2_IRQHandler+0x2c8>)
 80073e8:	8819      	ldrh	r1, [r3, #0]
 80073ea:	4b7f      	ldr	r3, [pc, #508]	; (80075e8 <TIM2_IRQHandler+0x2a0>)
 80073ec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VinP[i] = ADC_VinP;
 80073f0:	4b7a      	ldr	r3, [pc, #488]	; (80075dc <TIM2_IRQHandler+0x294>)
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	4b87      	ldr	r3, [pc, #540]	; (8007614 <TIM2_IRQHandler+0x2cc>)
 80073f8:	8819      	ldrh	r1, [r3, #0]
 80073fa:	4b7d      	ldr	r3, [pc, #500]	; (80075f0 <TIM2_IRQHandler+0x2a8>)
 80073fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_Iout[i] = ADC_Iout;
 8007400:	4b76      	ldr	r3, [pc, #472]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	461a      	mov	r2, r3
 8007406:	4b84      	ldr	r3, [pc, #528]	; (8007618 <TIM2_IRQHandler+0x2d0>)
 8007408:	8819      	ldrh	r1, [r3, #0]
 800740a:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <TIM2_IRQHandler+0x2b0>)
 800740c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutN[i] = ADC_VoutN;
 8007410:	4b72      	ldr	r3, [pc, #456]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	461a      	mov	r2, r3
 8007416:	4b81      	ldr	r3, [pc, #516]	; (800761c <TIM2_IRQHandler+0x2d4>)
 8007418:	8819      	ldrh	r1, [r3, #0]
 800741a:	4b79      	ldr	r3, [pc, #484]	; (8007600 <TIM2_IRQHandler+0x2b8>)
 800741c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	ADC_Array_VoutP[i] = ADC_VoutP;
 8007420:	4b6e      	ldr	r3, [pc, #440]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	461a      	mov	r2, r3
 8007426:	4b7e      	ldr	r3, [pc, #504]	; (8007620 <TIM2_IRQHandler+0x2d8>)
 8007428:	8819      	ldrh	r1, [r3, #0]
 800742a:	4b77      	ldr	r3, [pc, #476]	; (8007608 <TIM2_IRQHandler+0x2c0>)
 800742c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	ADC_SUM_Iin = ADC_SUM_Iin + ADC_Array_Iin[i];		//summing data and add new data
 8007430:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	461a      	mov	r2, r3
 8007436:	4b6a      	ldr	r3, [pc, #424]	; (80075e0 <TIM2_IRQHandler+0x298>)
 8007438:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800743c:	461a      	mov	r2, r3
 800743e:	4b66      	ldr	r3, [pc, #408]	; (80075d8 <TIM2_IRQHandler+0x290>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4413      	add	r3, r2
 8007444:	4a64      	ldr	r2, [pc, #400]	; (80075d8 <TIM2_IRQHandler+0x290>)
 8007446:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinN = ADC_SUM_VinN + ADC_Array_VinN[i];
 8007448:	4b64      	ldr	r3, [pc, #400]	; (80075dc <TIM2_IRQHandler+0x294>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	461a      	mov	r2, r3
 800744e:	4b66      	ldr	r3, [pc, #408]	; (80075e8 <TIM2_IRQHandler+0x2a0>)
 8007450:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007454:	461a      	mov	r2, r3
 8007456:	4b63      	ldr	r3, [pc, #396]	; (80075e4 <TIM2_IRQHandler+0x29c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4413      	add	r3, r2
 800745c:	4a61      	ldr	r2, [pc, #388]	; (80075e4 <TIM2_IRQHandler+0x29c>)
 800745e:	6013      	str	r3, [r2, #0]
	ADC_SUM_VinP = ADC_SUM_VinP + ADC_Array_VinP[i];
 8007460:	4b5e      	ldr	r3, [pc, #376]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	4b62      	ldr	r3, [pc, #392]	; (80075f0 <TIM2_IRQHandler+0x2a8>)
 8007468:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800746c:	461a      	mov	r2, r3
 800746e:	4b5f      	ldr	r3, [pc, #380]	; (80075ec <TIM2_IRQHandler+0x2a4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4413      	add	r3, r2
 8007474:	4a5d      	ldr	r2, [pc, #372]	; (80075ec <TIM2_IRQHandler+0x2a4>)
 8007476:	6013      	str	r3, [r2, #0]
	ADC_SUM_Iout = ADC_SUM_Iout + ADC_Array_Iout[i];
 8007478:	4b58      	ldr	r3, [pc, #352]	; (80075dc <TIM2_IRQHandler+0x294>)
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	461a      	mov	r2, r3
 800747e:	4b5e      	ldr	r3, [pc, #376]	; (80075f8 <TIM2_IRQHandler+0x2b0>)
 8007480:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007484:	461a      	mov	r2, r3
 8007486:	4b5b      	ldr	r3, [pc, #364]	; (80075f4 <TIM2_IRQHandler+0x2ac>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4413      	add	r3, r2
 800748c:	4a59      	ldr	r2, [pc, #356]	; (80075f4 <TIM2_IRQHandler+0x2ac>)
 800748e:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutN = ADC_SUM_VoutN + ADC_Array_VoutN[i];
 8007490:	4b52      	ldr	r3, [pc, #328]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	4b5a      	ldr	r3, [pc, #360]	; (8007600 <TIM2_IRQHandler+0x2b8>)
 8007498:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800749c:	461a      	mov	r2, r3
 800749e:	4b57      	ldr	r3, [pc, #348]	; (80075fc <TIM2_IRQHandler+0x2b4>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4413      	add	r3, r2
 80074a4:	4a55      	ldr	r2, [pc, #340]	; (80075fc <TIM2_IRQHandler+0x2b4>)
 80074a6:	6013      	str	r3, [r2, #0]
	ADC_SUM_VoutP = ADC_SUM_VoutP + ADC_Array_VoutP[i];
 80074a8:	4b4c      	ldr	r3, [pc, #304]	; (80075dc <TIM2_IRQHandler+0x294>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	4b56      	ldr	r3, [pc, #344]	; (8007608 <TIM2_IRQHandler+0x2c0>)
 80074b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b53      	ldr	r3, [pc, #332]	; (8007604 <TIM2_IRQHandler+0x2bc>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4413      	add	r3, r2
 80074bc:	4a51      	ldr	r2, [pc, #324]	; (8007604 <TIM2_IRQHandler+0x2bc>)
 80074be:	6013      	str	r3, [r2, #0]

	ADC_Average_Iin = (float) ADC_SUM_Iin / maxdata;	//calculate average data
 80074c0:	4b45      	ldr	r3, [pc, #276]	; (80075d8 <TIM2_IRQHandler+0x290>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7f9 fc25 	bl	8000d14 <__aeabi_i2f>
 80074ca:	4603      	mov	r3, r0
 80074cc:	4955      	ldr	r1, [pc, #340]	; (8007624 <TIM2_IRQHandler+0x2dc>)
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7f9 fd28 	bl	8000f24 <__aeabi_fdiv>
 80074d4:	4603      	mov	r3, r0
 80074d6:	461a      	mov	r2, r3
 80074d8:	4b53      	ldr	r3, [pc, #332]	; (8007628 <TIM2_IRQHandler+0x2e0>)
 80074da:	601a      	str	r2, [r3, #0]
	ADC_Average_VinN = (float) ADC_SUM_VinN / maxdata;
 80074dc:	4b41      	ldr	r3, [pc, #260]	; (80075e4 <TIM2_IRQHandler+0x29c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7f9 fc17 	bl	8000d14 <__aeabi_i2f>
 80074e6:	4603      	mov	r3, r0
 80074e8:	494e      	ldr	r1, [pc, #312]	; (8007624 <TIM2_IRQHandler+0x2dc>)
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7f9 fd1a 	bl	8000f24 <__aeabi_fdiv>
 80074f0:	4603      	mov	r3, r0
 80074f2:	461a      	mov	r2, r3
 80074f4:	4b4d      	ldr	r3, [pc, #308]	; (800762c <TIM2_IRQHandler+0x2e4>)
 80074f6:	601a      	str	r2, [r3, #0]
	ADC_Average_VinP = (float) ADC_SUM_VinP / maxdata;
 80074f8:	4b3c      	ldr	r3, [pc, #240]	; (80075ec <TIM2_IRQHandler+0x2a4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7f9 fc09 	bl	8000d14 <__aeabi_i2f>
 8007502:	4603      	mov	r3, r0
 8007504:	4947      	ldr	r1, [pc, #284]	; (8007624 <TIM2_IRQHandler+0x2dc>)
 8007506:	4618      	mov	r0, r3
 8007508:	f7f9 fd0c 	bl	8000f24 <__aeabi_fdiv>
 800750c:	4603      	mov	r3, r0
 800750e:	461a      	mov	r2, r3
 8007510:	4b47      	ldr	r3, [pc, #284]	; (8007630 <TIM2_IRQHandler+0x2e8>)
 8007512:	601a      	str	r2, [r3, #0]
	ADC_Average_Iout = (float) ADC_SUM_Iout / maxdata;
 8007514:	4b37      	ldr	r3, [pc, #220]	; (80075f4 <TIM2_IRQHandler+0x2ac>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f7f9 fbfb 	bl	8000d14 <__aeabi_i2f>
 800751e:	4603      	mov	r3, r0
 8007520:	4940      	ldr	r1, [pc, #256]	; (8007624 <TIM2_IRQHandler+0x2dc>)
 8007522:	4618      	mov	r0, r3
 8007524:	f7f9 fcfe 	bl	8000f24 <__aeabi_fdiv>
 8007528:	4603      	mov	r3, r0
 800752a:	461a      	mov	r2, r3
 800752c:	4b41      	ldr	r3, [pc, #260]	; (8007634 <TIM2_IRQHandler+0x2ec>)
 800752e:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutN = (float) ADC_SUM_VoutN / maxdata;
 8007530:	4b32      	ldr	r3, [pc, #200]	; (80075fc <TIM2_IRQHandler+0x2b4>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4618      	mov	r0, r3
 8007536:	f7f9 fbed 	bl	8000d14 <__aeabi_i2f>
 800753a:	4603      	mov	r3, r0
 800753c:	4939      	ldr	r1, [pc, #228]	; (8007624 <TIM2_IRQHandler+0x2dc>)
 800753e:	4618      	mov	r0, r3
 8007540:	f7f9 fcf0 	bl	8000f24 <__aeabi_fdiv>
 8007544:	4603      	mov	r3, r0
 8007546:	461a      	mov	r2, r3
 8007548:	4b3b      	ldr	r3, [pc, #236]	; (8007638 <TIM2_IRQHandler+0x2f0>)
 800754a:	601a      	str	r2, [r3, #0]
	ADC_Average_VoutP = (float) ADC_SUM_VoutP / maxdata;
 800754c:	4b2d      	ldr	r3, [pc, #180]	; (8007604 <TIM2_IRQHandler+0x2bc>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f7f9 fbdf 	bl	8000d14 <__aeabi_i2f>
 8007556:	4603      	mov	r3, r0
 8007558:	4932      	ldr	r1, [pc, #200]	; (8007624 <TIM2_IRQHandler+0x2dc>)
 800755a:	4618      	mov	r0, r3
 800755c:	f7f9 fce2 	bl	8000f24 <__aeabi_fdiv>
 8007560:	4603      	mov	r3, r0
 8007562:	461a      	mov	r2, r3
 8007564:	4b35      	ldr	r3, [pc, #212]	; (800763c <TIM2_IRQHandler+0x2f4>)
 8007566:	601a      	str	r2, [r3, #0]

	i++;
 8007568:	4b1c      	ldr	r3, [pc, #112]	; (80075dc <TIM2_IRQHandler+0x294>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	3301      	adds	r3, #1
 800756e:	b2da      	uxtb	r2, r3
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007572:	701a      	strb	r2, [r3, #0]
	i = i % maxdata;
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <TIM2_IRQHandler+0x294>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4a31      	ldr	r2, [pc, #196]	; (8007640 <TIM2_IRQHandler+0x2f8>)
 800757a:	fba2 1203 	umull	r1, r2, r2, r3
 800757e:	0992      	lsrs	r2, r2, #6
 8007580:	21c8      	movs	r1, #200	; 0xc8
 8007582:	fb01 f202 	mul.w	r2, r1, r2
 8007586:	1a9b      	subs	r3, r3, r2
 8007588:	b2da      	uxtb	r2, r3
 800758a:	4b14      	ldr	r3, [pc, #80]	; (80075dc <TIM2_IRQHandler+0x294>)
 800758c:	701a      	strb	r2, [r3, #0]

	//Current value calculation and calibration
	Current_Charger = 0.0125*ADC_Average_Iout - 24.845 - OFFSET_CurrentSense;
 800758e:	4b29      	ldr	r3, [pc, #164]	; (8007634 <TIM2_IRQHandler+0x2ec>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4618      	mov	r0, r3
 8007594:	f7f8 ff84 	bl	80004a0 <__aeabi_f2d>
 8007598:	a30b      	add	r3, pc, #44	; (adr r3, 80075c8 <TIM2_IRQHandler+0x280>)
 800759a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759e:	f7f8 ffd7 	bl	8000550 <__aeabi_dmul>
 80075a2:	4603      	mov	r3, r0
 80075a4:	460c      	mov	r4, r1
 80075a6:	4618      	mov	r0, r3
 80075a8:	4621      	mov	r1, r4
 80075aa:	a309      	add	r3, pc, #36	; (adr r3, 80075d0 <TIM2_IRQHandler+0x288>)
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	f7f8 fe16 	bl	80001e0 <__aeabi_dsub>
 80075b4:	4603      	mov	r3, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	4625      	mov	r5, r4
 80075ba:	461c      	mov	r4, r3
 80075bc:	4b21      	ldr	r3, [pc, #132]	; (8007644 <TIM2_IRQHandler+0x2fc>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	e042      	b.n	8007648 <TIM2_IRQHandler+0x300>
 80075c2:	bf00      	nop
 80075c4:	f3af 8000 	nop.w
 80075c8:	9999999a 	.word	0x9999999a
 80075cc:	3f899999 	.word	0x3f899999
 80075d0:	eb851eb8 	.word	0xeb851eb8
 80075d4:	4038d851 	.word	0x4038d851
 80075d8:	20000700 	.word	0x20000700
 80075dc:	2000157c 	.word	0x2000157c
 80075e0:	20000724 	.word	0x20000724
 80075e4:	20000c68 	.word	0x20000c68
 80075e8:	20000d5c 	.word	0x20000d5c
 80075ec:	200010b0 	.word	0x200010b0
 80075f0:	20000f0c 	.word	0x20000f0c
 80075f4:	20000cc8 	.word	0x20000cc8
 80075f8:	20000ad8 	.word	0x20000ad8
 80075fc:	20000688 	.word	0x20000688
 8007600:	20000920 	.word	0x20000920
 8007604:	20000708 	.word	0x20000708
 8007608:	200010cc 	.word	0x200010cc
 800760c:	200006b6 	.word	0x200006b6
 8007610:	20000ca0 	.word	0x20000ca0
 8007614:	20000714 	.word	0x20000714
 8007618:	200006fc 	.word	0x200006fc
 800761c:	20000696 	.word	0x20000696
 8007620:	200008e4 	.word	0x200008e4
 8007624:	43480000 	.word	0x43480000
 8007628:	20000acc 	.word	0x20000acc
 800762c:	200008c4 	.word	0x200008c4
 8007630:	20000cb4 	.word	0x20000cb4
 8007634:	20001288 	.word	0x20001288
 8007638:	2000068c 	.word	0x2000068c
 800763c:	200008e0 	.word	0x200008e0
 8007640:	51eb851f 	.word	0x51eb851f
 8007644:	200008c0 	.word	0x200008c0
 8007648:	4618      	mov	r0, r3
 800764a:	f7f8 ff29 	bl	80004a0 <__aeabi_f2d>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	4620      	mov	r0, r4
 8007654:	4629      	mov	r1, r5
 8007656:	f7f8 fdc3 	bl	80001e0 <__aeabi_dsub>
 800765a:	4603      	mov	r3, r0
 800765c:	460c      	mov	r4, r1
 800765e:	4618      	mov	r0, r3
 8007660:	4621      	mov	r1, r4
 8007662:	f7f9 fa4d 	bl	8000b00 <__aeabi_d2f>
 8007666:	4602      	mov	r2, r0
 8007668:	4b99      	ldr	r3, [pc, #612]	; (80078d0 <TIM2_IRQHandler+0x588>)
 800766a:	601a      	str	r2, [r3, #0]
	OFFSET_Calibration = 0.0125*ADC_Average_Iout - 24.845;
 800766c:	4b99      	ldr	r3, [pc, #612]	; (80078d4 <TIM2_IRQHandler+0x58c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4618      	mov	r0, r3
 8007672:	f7f8 ff15 	bl	80004a0 <__aeabi_f2d>
 8007676:	a388      	add	r3, pc, #544	; (adr r3, 8007898 <TIM2_IRQHandler+0x550>)
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f7f8 ff68 	bl	8000550 <__aeabi_dmul>
 8007680:	4603      	mov	r3, r0
 8007682:	460c      	mov	r4, r1
 8007684:	4618      	mov	r0, r3
 8007686:	4621      	mov	r1, r4
 8007688:	a385      	add	r3, pc, #532	; (adr r3, 80078a0 <TIM2_IRQHandler+0x558>)
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f8 fda7 	bl	80001e0 <__aeabi_dsub>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	4618      	mov	r0, r3
 8007698:	4621      	mov	r1, r4
 800769a:	f7f9 fa31 	bl	8000b00 <__aeabi_d2f>
 800769e:	4602      	mov	r2, r0
 80076a0:	4b8d      	ldr	r3, [pc, #564]	; (80078d8 <TIM2_IRQHandler+0x590>)
 80076a2:	601a      	str	r2, [r3, #0]
	if (Current_Charger<=0)
 80076a4:	4b8a      	ldr	r3, [pc, #552]	; (80078d0 <TIM2_IRQHandler+0x588>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f04f 0100 	mov.w	r1, #0
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7f9 fd2d 	bl	800110c <__aeabi_fcmple>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <TIM2_IRQHandler+0x378>
		Current_Charger = 0;
 80076b8:	4b85      	ldr	r3, [pc, #532]	; (80078d0 <TIM2_IRQHandler+0x588>)
 80076ba:	f04f 0200 	mov.w	r2, #0
 80076be:	601a      	str	r2, [r3, #0]

	//Voltage value calculation and calibration
	ADC_VoltageResult = fabs (ADC_Average_VoutN - ADC_Average_VoutP);
 80076c0:	4b86      	ldr	r3, [pc, #536]	; (80078dc <TIM2_IRQHandler+0x594>)
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b86      	ldr	r3, [pc, #536]	; (80078e0 <TIM2_IRQHandler+0x598>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4619      	mov	r1, r3
 80076ca:	4610      	mov	r0, r2
 80076cc:	f7f9 fa6c 	bl	8000ba8 <__aeabi_fsub>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076d6:	4a83      	ldr	r2, [pc, #524]	; (80078e4 <TIM2_IRQHandler+0x59c>)
 80076d8:	6013      	str	r3, [r2, #0]
	Voltage_Charger = ADC_VoltageResult*0.042318765307477 - 0.240709805391821;
 80076da:	4b82      	ldr	r3, [pc, #520]	; (80078e4 <TIM2_IRQHandler+0x59c>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7f8 fede 	bl	80004a0 <__aeabi_f2d>
 80076e4:	a370      	add	r3, pc, #448	; (adr r3, 80078a8 <TIM2_IRQHandler+0x560>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 ff31 	bl	8000550 <__aeabi_dmul>
 80076ee:	4603      	mov	r3, r0
 80076f0:	460c      	mov	r4, r1
 80076f2:	4618      	mov	r0, r3
 80076f4:	4621      	mov	r1, r4
 80076f6:	a36e      	add	r3, pc, #440	; (adr r3, 80078b0 <TIM2_IRQHandler+0x568>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd70 	bl	80001e0 <__aeabi_dsub>
 8007700:	4603      	mov	r3, r0
 8007702:	460c      	mov	r4, r1
 8007704:	4618      	mov	r0, r3
 8007706:	4621      	mov	r1, r4
 8007708:	f7f9 f9fa 	bl	8000b00 <__aeabi_d2f>
 800770c:	4602      	mov	r2, r0
 800770e:	4b76      	ldr	r3, [pc, #472]	; (80078e8 <TIM2_IRQHandler+0x5a0>)
 8007710:	601a      	str	r2, [r3, #0]
	if(Voltage_Charger <= 0)
 8007712:	4b75      	ldr	r3, [pc, #468]	; (80078e8 <TIM2_IRQHandler+0x5a0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f04f 0100 	mov.w	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f7f9 fcf6 	bl	800110c <__aeabi_fcmple>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <TIM2_IRQHandler+0x3e6>
		Voltage_Charger = 0;
 8007726:	4b70      	ldr	r3, [pc, #448]	; (80078e8 <TIM2_IRQHandler+0x5a0>)
 8007728:	f04f 0200 	mov.w	r2, #0
 800772c:	601a      	str	r2, [r3, #0]

	Temp_delay_calc++;
 800772e:	4b6f      	ldr	r3, [pc, #444]	; (80078ec <TIM2_IRQHandler+0x5a4>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	b2da      	uxtb	r2, r3
 8007736:	4b6d      	ldr	r3, [pc, #436]	; (80078ec <TIM2_IRQHandler+0x5a4>)
 8007738:	701a      	strb	r2, [r3, #0]

	if(Temp_delay_calc >= 100)
 800773a:	4b6c      	ldr	r3, [pc, #432]	; (80078ec <TIM2_IRQHandler+0x5a4>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	2b63      	cmp	r3, #99	; 0x63
 8007740:	d96e      	bls.n	8007820 <TIM2_IRQHandler+0x4d8>
	{
		Temp_delay_calc = 0;
 8007742:	4b6a      	ldr	r3, [pc, #424]	; (80078ec <TIM2_IRQHandler+0x5a4>)
 8007744:	2200      	movs	r2, #0
 8007746:	701a      	strb	r2, [r3, #0]
		Res_T1 = ADC_temp1*10000/(3900-ADC_temp1); 	// 10000 => R1 , 3900 => Vcc dalam nilai digital
 8007748:	4b69      	ldr	r3, [pc, #420]	; (80078f0 <TIM2_IRQHandler+0x5a8>)
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	f242 7310 	movw	r3, #10000	; 0x2710
 8007752:	fb03 f202 	mul.w	r2, r3, r2
 8007756:	4b66      	ldr	r3, [pc, #408]	; (80078f0 <TIM2_IRQHandler+0x5a8>)
 8007758:	881b      	ldrh	r3, [r3, #0]
 800775a:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 800775e:	330c      	adds	r3, #12
 8007760:	fb92 f3f3 	sdiv	r3, r2, r3
 8007764:	4618      	mov	r0, r3
 8007766:	f7f9 fad5 	bl	8000d14 <__aeabi_i2f>
 800776a:	4602      	mov	r2, r0
 800776c:	4b61      	ldr	r3, [pc, #388]	; (80078f4 <TIM2_IRQHandler+0x5ac>)
 800776e:	601a      	str	r2, [r3, #0]
		Temp_T1 = -24.05*log(Res_T1) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 8007770:	4b60      	ldr	r3, [pc, #384]	; (80078f4 <TIM2_IRQHandler+0x5ac>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4618      	mov	r0, r3
 8007776:	f7f8 fe93 	bl	80004a0 <__aeabi_f2d>
 800777a:	4603      	mov	r3, r0
 800777c:	460c      	mov	r4, r1
 800777e:	4618      	mov	r0, r3
 8007780:	4621      	mov	r1, r4
 8007782:	f008 fad1 	bl	800fd28 <log>
 8007786:	a34c      	add	r3, pc, #304	; (adr r3, 80078b8 <TIM2_IRQHandler+0x570>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	f7f8 fee0 	bl	8000550 <__aeabi_dmul>
 8007790:	4603      	mov	r3, r0
 8007792:	460c      	mov	r4, r1
 8007794:	4618      	mov	r0, r3
 8007796:	4621      	mov	r1, r4
 8007798:	a349      	add	r3, pc, #292	; (adr r3, 80078c0 <TIM2_IRQHandler+0x578>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f8 fd21 	bl	80001e4 <__adddf3>
 80077a2:	4603      	mov	r3, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	4618      	mov	r0, r3
 80077a8:	4621      	mov	r1, r4
 80077aa:	f7f9 f9a9 	bl	8000b00 <__aeabi_d2f>
 80077ae:	4602      	mov	r2, r0
 80077b0:	4b51      	ldr	r3, [pc, #324]	; (80078f8 <TIM2_IRQHandler+0x5b0>)
 80077b2:	601a      	str	r2, [r3, #0]
		Res_T2 = ADC_temp2*10000/(3900-ADC_temp2);
 80077b4:	4b51      	ldr	r3, [pc, #324]	; (80078fc <TIM2_IRQHandler+0x5b4>)
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	f242 7310 	movw	r3, #10000	; 0x2710
 80077be:	fb03 f202 	mul.w	r2, r3, r2
 80077c2:	4b4e      	ldr	r3, [pc, #312]	; (80078fc <TIM2_IRQHandler+0x5b4>)
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	f5c3 6373 	rsb	r3, r3, #3888	; 0xf30
 80077ca:	330c      	adds	r3, #12
 80077cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7f9 fa9f 	bl	8000d14 <__aeabi_i2f>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b49      	ldr	r3, [pc, #292]	; (8007900 <TIM2_IRQHandler+0x5b8>)
 80077da:	601a      	str	r2, [r3, #0]
		Temp_T2 = -24.05*log(Res_T2) + 246.41;			//1 / a + b (Ln RT / R25) + c b (Ln RT / R25)2
 80077dc:	4b48      	ldr	r3, [pc, #288]	; (8007900 <TIM2_IRQHandler+0x5b8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7f8 fe5d 	bl	80004a0 <__aeabi_f2d>
 80077e6:	4603      	mov	r3, r0
 80077e8:	460c      	mov	r4, r1
 80077ea:	4618      	mov	r0, r3
 80077ec:	4621      	mov	r1, r4
 80077ee:	f008 fa9b 	bl	800fd28 <log>
 80077f2:	a331      	add	r3, pc, #196	; (adr r3, 80078b8 <TIM2_IRQHandler+0x570>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 feaa 	bl	8000550 <__aeabi_dmul>
 80077fc:	4603      	mov	r3, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	4618      	mov	r0, r3
 8007802:	4621      	mov	r1, r4
 8007804:	a32e      	add	r3, pc, #184	; (adr r3, 80078c0 <TIM2_IRQHandler+0x578>)
 8007806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780a:	f7f8 fceb 	bl	80001e4 <__adddf3>
 800780e:	4603      	mov	r3, r0
 8007810:	460c      	mov	r4, r1
 8007812:	4618      	mov	r0, r3
 8007814:	4621      	mov	r1, r4
 8007816:	f7f9 f973 	bl	8000b00 <__aeabi_d2f>
 800781a:	4602      	mov	r2, r0
 800781c:	4b39      	ldr	r3, [pc, #228]	; (8007904 <TIM2_IRQHandler+0x5bc>)
 800781e:	601a      	str	r2, [r3, #0]
	// *********************** end of Sensing Process (ADC average) ******************************


	// ***********************Charge or standby State ******************************

	if (Charger_Mode == 1){	//charge mode
 8007820:	4b39      	ldr	r3, [pc, #228]	; (8007908 <TIM2_IRQHandler+0x5c0>)
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b01      	cmp	r3, #1
 8007826:	f040 80f3 	bne.w	8007a10 <TIM2_IRQHandler+0x6c8>
		flag_FullCharge = 0;
 800782a:	4b38      	ldr	r3, [pc, #224]	; (800790c <TIM2_IRQHandler+0x5c4>)
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
		flag_ForceSwap = 0;
 8007830:	4b37      	ldr	r3, [pc, #220]	; (8007910 <TIM2_IRQHandler+0x5c8>)
 8007832:	2200      	movs	r2, #0
 8007834:	701a      	strb	r2, [r3, #0]
		Fault_Check();
 8007836:	f000 fc13 	bl	8008060 <Fault_Check>
		htim1.Instance->CCR1=duty*TIM1->ARR;
 800783a:	4b36      	ldr	r3, [pc, #216]	; (8007914 <TIM2_IRQHandler+0x5cc>)
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	4618      	mov	r0, r3
 8007840:	f7f9 fa64 	bl	8000d0c <__aeabi_ui2f>
 8007844:	4602      	mov	r2, r0
 8007846:	4b34      	ldr	r3, [pc, #208]	; (8007918 <TIM2_IRQHandler+0x5d0>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4619      	mov	r1, r3
 800784c:	4610      	mov	r0, r2
 800784e:	f7f9 fab5 	bl	8000dbc <__aeabi_fmul>
 8007852:	4603      	mov	r3, r0
 8007854:	461a      	mov	r2, r3
 8007856:	4b31      	ldr	r3, [pc, #196]	; (800791c <TIM2_IRQHandler+0x5d4>)
 8007858:	681c      	ldr	r4, [r3, #0]
 800785a:	4610      	mov	r0, r2
 800785c:	f7f9 fc74 	bl	8001148 <__aeabi_f2uiz>
 8007860:	4603      	mov	r3, r0
 8007862:	6363      	str	r3, [r4, #52]	; 0x34
//		if(duty>=0.85)
//			duty=0.85;

		if(Voltage_Charger > MAX_CHARGE_VOLTAGE) flag_CHARGE_MODE = 1;
 8007864:	4b20      	ldr	r3, [pc, #128]	; (80078e8 <TIM2_IRQHandler+0x5a0>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f7f8 fe19 	bl	80004a0 <__aeabi_f2d>
 800786e:	a316      	add	r3, pc, #88	; (adr r3, 80078c8 <TIM2_IRQHandler+0x580>)
 8007870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007874:	f7f9 f8fc 	bl	8000a70 <__aeabi_dcmpgt>
 8007878:	4603      	mov	r3, r0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <TIM2_IRQHandler+0x53c>
 800787e:	4b28      	ldr	r3, [pc, #160]	; (8007920 <TIM2_IRQHandler+0x5d8>)
 8007880:	2201      	movs	r2, #1
 8007882:	701a      	strb	r2, [r3, #0]

		if(flag_CHARGE_MODE == 0) Constant_Current();
 8007884:	4b26      	ldr	r3, [pc, #152]	; (8007920 <TIM2_IRQHandler+0x5d8>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d14b      	bne.n	8007924 <TIM2_IRQHandler+0x5dc>
 800788c:	f7f9 fe00 	bl	8001490 <Constant_Current>
 8007890:	e04e      	b.n	8007930 <TIM2_IRQHandler+0x5e8>
 8007892:	bf00      	nop
 8007894:	f3af 8000 	nop.w
 8007898:	9999999a 	.word	0x9999999a
 800789c:	3f899999 	.word	0x3f899999
 80078a0:	eb851eb8 	.word	0xeb851eb8
 80078a4:	4038d851 	.word	0x4038d851
 80078a8:	2201639d 	.word	0x2201639d
 80078ac:	3fa5aace 	.word	0x3fa5aace
 80078b0:	32fe00ad 	.word	0x32fe00ad
 80078b4:	3fcecf94 	.word	0x3fcecf94
 80078b8:	cccccccd 	.word	0xcccccccd
 80078bc:	c0380ccc 	.word	0xc0380ccc
 80078c0:	b851eb85 	.word	0xb851eb85
 80078c4:	406ecd1e 	.word	0x406ecd1e
 80078c8:	66666666 	.word	0x66666666
 80078cc:	404f2666 	.word	0x404f2666
 80078d0:	20001264 	.word	0x20001264
 80078d4:	20001288 	.word	0x20001288
 80078d8:	200006f4 	.word	0x200006f4
 80078dc:	2000068c 	.word	0x2000068c
 80078e0:	200008e0 	.word	0x200008e0
 80078e4:	20000cd4 	.word	0x20000cd4
 80078e8:	20000ef4 	.word	0x20000ef4
 80078ec:	20001586 	.word	0x20001586
 80078f0:	200008ee 	.word	0x200008ee
 80078f4:	20000900 	.word	0x20000900
 80078f8:	20000cd0 	.word	0x20000cd0
 80078fc:	2000069a 	.word	0x2000069a
 8007900:	20000d58 	.word	0x20000d58
 8007904:	200006a0 	.word	0x200006a0
 8007908:	20000720 	.word	0x20000720
 800790c:	20001260 	.word	0x20001260
 8007910:	20000684 	.word	0x20000684
 8007914:	40010000 	.word	0x40010000
 8007918:	2000126c 	.word	0x2000126c
 800791c:	2000160c 	.word	0x2000160c
 8007920:	200006e8 	.word	0x200006e8
		else if(flag_CHARGE_MODE == 1) Constant_Voltage();
 8007924:	4ba8      	ldr	r3, [pc, #672]	; (8007bc8 <TIM2_IRQHandler+0x880>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <TIM2_IRQHandler+0x5e8>
 800792c:	f7fb fe1a 	bl	8003564 <Constant_Voltage>

		//Clearing Charger Decrease rating flag
		if (flag_Derating == 1 && Temp_T1<=(SetProtection_Temp1-15) && Temp_T2<=(SetProtection_Temp2-25)){
 8007930:	4ba6      	ldr	r3, [pc, #664]	; (8007bcc <TIM2_IRQHandler+0x884>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d122      	bne.n	800797e <TIM2_IRQHandler+0x636>
 8007938:	4ba5      	ldr	r3, [pc, #660]	; (8007bd0 <TIM2_IRQHandler+0x888>)
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	3b0f      	subs	r3, #15
 800793e:	4618      	mov	r0, r3
 8007940:	f7f9 f9e8 	bl	8000d14 <__aeabi_i2f>
 8007944:	4602      	mov	r2, r0
 8007946:	4ba3      	ldr	r3, [pc, #652]	; (8007bd4 <TIM2_IRQHandler+0x88c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7f9 fbe7 	bl	8001120 <__aeabi_fcmpge>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d012      	beq.n	800797e <TIM2_IRQHandler+0x636>
 8007958:	4b9f      	ldr	r3, [pc, #636]	; (8007bd8 <TIM2_IRQHandler+0x890>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	3b19      	subs	r3, #25
 800795e:	4618      	mov	r0, r3
 8007960:	f7f9 f9d8 	bl	8000d14 <__aeabi_i2f>
 8007964:	4602      	mov	r2, r0
 8007966:	4b9d      	ldr	r3, [pc, #628]	; (8007bdc <TIM2_IRQHandler+0x894>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4619      	mov	r1, r3
 800796c:	4610      	mov	r0, r2
 800796e:	f7f9 fbd7 	bl	8001120 <__aeabi_fcmpge>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d002      	beq.n	800797e <TIM2_IRQHandler+0x636>
			flag_Derating = 0;
 8007978:	4b94      	ldr	r3, [pc, #592]	; (8007bcc <TIM2_IRQHandler+0x884>)
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
		}

		if(BPack_SOC>=100 || (Current_Charger < (0.02*BPack_Capacity) && flag_CHARGE_MODE == 1)) {
 800797e:	4b98      	ldr	r3, [pc, #608]	; (8007be0 <TIM2_IRQHandler+0x898>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4998      	ldr	r1, [pc, #608]	; (8007be4 <TIM2_IRQHandler+0x89c>)
 8007984:	4618      	mov	r0, r3
 8007986:	f7f9 fbcb 	bl	8001120 <__aeabi_fcmpge>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d11d      	bne.n	80079cc <TIM2_IRQHandler+0x684>
 8007990:	4b95      	ldr	r3, [pc, #596]	; (8007be8 <TIM2_IRQHandler+0x8a0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f7f8 fd83 	bl	80004a0 <__aeabi_f2d>
 800799a:	4604      	mov	r4, r0
 800799c:	460d      	mov	r5, r1
 800799e:	4b93      	ldr	r3, [pc, #588]	; (8007bec <TIM2_IRQHandler+0x8a4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7f8 fd7c 	bl	80004a0 <__aeabi_f2d>
 80079a8:	a385      	add	r3, pc, #532	; (adr r3, 8007bc0 <TIM2_IRQHandler+0x878>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fdcf 	bl	8000550 <__aeabi_dmul>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4620      	mov	r0, r4
 80079b8:	4629      	mov	r1, r5
 80079ba:	f7f9 f83b 	bl	8000a34 <__aeabi_dcmplt>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d01e      	beq.n	8007a02 <TIM2_IRQHandler+0x6ba>
 80079c4:	4b80      	ldr	r3, [pc, #512]	; (8007bc8 <TIM2_IRQHandler+0x880>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d11a      	bne.n	8007a02 <TIM2_IRQHandler+0x6ba>
//			check=15;
			LAST_UNIQUE_Code = UNIQUE_Code;
 80079cc:	4b88      	ldr	r3, [pc, #544]	; (8007bf0 <TIM2_IRQHandler+0x8a8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a88      	ldr	r2, [pc, #544]	; (8007bf4 <TIM2_IRQHandler+0x8ac>)
 80079d2:	6013      	str	r3, [r2, #0]
			send = 6;
 80079d4:	4b88      	ldr	r3, [pc, #544]	; (8007bf8 <TIM2_IRQHandler+0x8b0>)
 80079d6:	2206      	movs	r2, #6
 80079d8:	701a      	strb	r2, [r3, #0]
			duty=0;
 80079da:	4b88      	ldr	r3, [pc, #544]	; (8007bfc <TIM2_IRQHandler+0x8b4>)
 80079dc:	f04f 0200 	mov.w	r2, #0
 80079e0:	601a      	str	r2, [r3, #0]
			LastCharger_Mode = 0;
 80079e2:	4b87      	ldr	r3, [pc, #540]	; (8007c00 <TIM2_IRQHandler+0x8b8>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 0;
 80079e8:	4b86      	ldr	r3, [pc, #536]	; (8007c04 <TIM2_IRQHandler+0x8bc>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]
			Ready_toCharge = 0;
 80079ee:	4b86      	ldr	r3, [pc, #536]	; (8007c08 <TIM2_IRQHandler+0x8c0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
			flag_FullCharge = 1;
 80079f4:	4b85      	ldr	r3, [pc, #532]	; (8007c0c <TIM2_IRQHandler+0x8c4>)
 80079f6:	2201      	movs	r2, #1
 80079f8:	701a      	strb	r2, [r3, #0]
			BPack_SOC=0;
 80079fa:	4b79      	ldr	r3, [pc, #484]	; (8007be0 <TIM2_IRQHandler+0x898>)
 80079fc:	f04f 0200 	mov.w	r2, #0
 8007a00:	601a      	str	r2, [r3, #0]
//			Handshaking = 0;
//			UNIQUE_Code = 0;
//			identified = 0;
//			flag_Check_SOCawal = 0;
		}
		L=0; Tbuzz=999;
 8007a02:	4b83      	ldr	r3, [pc, #524]	; (8007c10 <TIM2_IRQHandler+0x8c8>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	701a      	strb	r2, [r3, #0]
 8007a08:	4b82      	ldr	r3, [pc, #520]	; (8007c14 <TIM2_IRQHandler+0x8cc>)
 8007a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007a0e:	801a      	strh	r2, [r3, #0]
	}

	if(Charger_Mode == 0){	//standby mode
 8007a10:	4b7c      	ldr	r3, [pc, #496]	; (8007c04 <TIM2_IRQHandler+0x8bc>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d124      	bne.n	8007a62 <TIM2_IRQHandler+0x71a>
		duty=0;
 8007a18:	4b78      	ldr	r3, [pc, #480]	; (8007bfc <TIM2_IRQHandler+0x8b4>)
 8007a1a:	f04f 0200 	mov.w	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]
		dc=0;
 8007a20:	4b7d      	ldr	r3, [pc, #500]	; (8007c18 <TIM2_IRQHandler+0x8d0>)
 8007a22:	f04f 0200 	mov.w	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
		htim1.Instance->CCR1=duty*TIM1->ARR;
 8007a28:	4b7c      	ldr	r3, [pc, #496]	; (8007c1c <TIM2_IRQHandler+0x8d4>)
 8007a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7f9 f96d 	bl	8000d0c <__aeabi_ui2f>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b71      	ldr	r3, [pc, #452]	; (8007bfc <TIM2_IRQHandler+0x8b4>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	4610      	mov	r0, r2
 8007a3c:	f7f9 f9be 	bl	8000dbc <__aeabi_fmul>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	4b76      	ldr	r3, [pc, #472]	; (8007c20 <TIM2_IRQHandler+0x8d8>)
 8007a46:	681c      	ldr	r4, [r3, #0]
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f7f9 fb7d 	bl	8001148 <__aeabi_f2uiz>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6363      	str	r3, [r4, #52]	; 0x34
//		Clear_ProtectionFlag();
//		Eror_Code = 0;
		Ah_CONSUMPTION = 0;
 8007a52:	4b74      	ldr	r3, [pc, #464]	; (8007c24 <TIM2_IRQHandler+0x8dc>)
 8007a54:	f04f 0200 	mov.w	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
		OFFSET_CurrentSense = OFFSET_Calibration;
 8007a5a:	4b73      	ldr	r3, [pc, #460]	; (8007c28 <TIM2_IRQHandler+0x8e0>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a73      	ldr	r2, [pc, #460]	; (8007c2c <TIM2_IRQHandler+0x8e4>)
 8007a60:	6013      	str	r3, [r2, #0]

	}

	if(Charger_Mode == 2){	//Protection mode
 8007a62:	4b68      	ldr	r3, [pc, #416]	; (8007c04 <TIM2_IRQHandler+0x8bc>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	f040 8096 	bne.w	8007b98 <TIM2_IRQHandler+0x850>
		Tbuzz=Tbuzz+1;
 8007a6c:	4b69      	ldr	r3, [pc, #420]	; (8007c14 <TIM2_IRQHandler+0x8cc>)
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	b29a      	uxth	r2, r3
 8007a74:	4b67      	ldr	r3, [pc, #412]	; (8007c14 <TIM2_IRQHandler+0x8cc>)
 8007a76:	801a      	strh	r2, [r3, #0]
		if (Tbuzz==1000 && L<=5){
 8007a78:	4b66      	ldr	r3, [pc, #408]	; (8007c14 <TIM2_IRQHandler+0x8cc>)
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a80:	d116      	bne.n	8007ab0 <TIM2_IRQHandler+0x768>
 8007a82:	4b63      	ldr	r3, [pc, #396]	; (8007c10 <TIM2_IRQHandler+0x8c8>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b05      	cmp	r3, #5
 8007a88:	d812      	bhi.n	8007ab0 <TIM2_IRQHandler+0x768>
			HAL_GPIO_TogglePin(GPIOC, Buzzer_Pin);
 8007a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a8e:	4868      	ldr	r0, [pc, #416]	; (8007c30 <TIM2_IRQHandler+0x8e8>)
 8007a90:	f003 f91b 	bl	800acca <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, Led1_Pin);
 8007a94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a98:	4866      	ldr	r0, [pc, #408]	; (8007c34 <TIM2_IRQHandler+0x8ec>)
 8007a9a:	f003 f916 	bl	800acca <HAL_GPIO_TogglePin>
			Tbuzz=0; L+=1;
 8007a9e:	4b5d      	ldr	r3, [pc, #372]	; (8007c14 <TIM2_IRQHandler+0x8cc>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	4b5a      	ldr	r3, [pc, #360]	; (8007c10 <TIM2_IRQHandler+0x8c8>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	b2da      	uxtb	r2, r3
 8007aac:	4b58      	ldr	r3, [pc, #352]	; (8007c10 <TIM2_IRQHandler+0x8c8>)
 8007aae:	701a      	strb	r2, [r3, #0]
//			Clear_ProtectionFlag();
//			dc=0; Charger_Mode =1;
//		}

		//Clearing Charger Over Temperature
		if (Flag_ChargerOverTemperature == 1 && Temp_T1<=(SetProtection_Temp1-10) && Temp_T2<=(SetProtection_Temp2-10) && L>5){
 8007ab0:	4b61      	ldr	r3, [pc, #388]	; (8007c38 <TIM2_IRQHandler+0x8f0>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d13f      	bne.n	8007b38 <TIM2_IRQHandler+0x7f0>
 8007ab8:	4b45      	ldr	r3, [pc, #276]	; (8007bd0 <TIM2_IRQHandler+0x888>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	3b0a      	subs	r3, #10
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7f9 f928 	bl	8000d14 <__aeabi_i2f>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b43      	ldr	r3, [pc, #268]	; (8007bd4 <TIM2_IRQHandler+0x88c>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7f9 fb27 	bl	8001120 <__aeabi_fcmpge>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d02f      	beq.n	8007b38 <TIM2_IRQHandler+0x7f0>
 8007ad8:	4b3f      	ldr	r3, [pc, #252]	; (8007bd8 <TIM2_IRQHandler+0x890>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	3b0a      	subs	r3, #10
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7f9 f918 	bl	8000d14 <__aeabi_i2f>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	4b3d      	ldr	r3, [pc, #244]	; (8007bdc <TIM2_IRQHandler+0x894>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4619      	mov	r1, r3
 8007aec:	4610      	mov	r0, r2
 8007aee:	f7f9 fb17 	bl	8001120 <__aeabi_fcmpge>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d01f      	beq.n	8007b38 <TIM2_IRQHandler+0x7f0>
 8007af8:	4b45      	ldr	r3, [pc, #276]	; (8007c10 <TIM2_IRQHandler+0x8c8>)
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	2b05      	cmp	r3, #5
 8007afe:	d91b      	bls.n	8007b38 <TIM2_IRQHandler+0x7f0>
			Flag_ChargerOverTemperature = 0;
 8007b00:	4b4d      	ldr	r3, [pc, #308]	; (8007c38 <TIM2_IRQHandler+0x8f0>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	701a      	strb	r2, [r3, #0]
			flag_CHARGE_MODE = 0;
 8007b06:	4b30      	ldr	r3, [pc, #192]	; (8007bc8 <TIM2_IRQHandler+0x880>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
			dc=0; Charger_Mode =1;
 8007b0c:	4b42      	ldr	r3, [pc, #264]	; (8007c18 <TIM2_IRQHandler+0x8d0>)
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]
 8007b14:	4b3b      	ldr	r3, [pc, #236]	; (8007c04 <TIM2_IRQHandler+0x8bc>)
 8007b16:	2201      	movs	r2, #1
 8007b18:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b20:	4843      	ldr	r0, [pc, #268]	; (8007c30 <TIM2_IRQHandler+0x8e8>)
 8007b22:	f003 f8ba 	bl	800ac9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, Led1_Pin,0);
 8007b26:	2200      	movs	r2, #0
 8007b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b2c:	4841      	ldr	r0, [pc, #260]	; (8007c34 <TIM2_IRQHandler+0x8ec>)
 8007b2e:	f003 f8b4 	bl	800ac9a <HAL_GPIO_WritePin>
			flag_CHARGE_MODE = 0;
 8007b32:	4b25      	ldr	r3, [pc, #148]	; (8007bc8 <TIM2_IRQHandler+0x880>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
		}

		//Clearing Battery Over Temperature
		if (flag_trip_overtemperature == 0 && LastFlag_OverTemperature == 1){
 8007b38:	4b40      	ldr	r3, [pc, #256]	; (8007c3c <TIM2_IRQHandler+0x8f4>)
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d12b      	bne.n	8007b98 <TIM2_IRQHandler+0x850>
 8007b40:	4b3f      	ldr	r3, [pc, #252]	; (8007c40 <TIM2_IRQHandler+0x8f8>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d127      	bne.n	8007b98 <TIM2_IRQHandler+0x850>
			delay_clearing_overtemp ++;
 8007b48:	4b3e      	ldr	r3, [pc, #248]	; (8007c44 <TIM2_IRQHandler+0x8fc>)
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	b29a      	uxth	r2, r3
 8007b50:	4b3c      	ldr	r3, [pc, #240]	; (8007c44 <TIM2_IRQHandler+0x8fc>)
 8007b52:	801a      	strh	r2, [r3, #0]
			if(delay_clearing_overtemp >= 1500) {
 8007b54:	4b3b      	ldr	r3, [pc, #236]	; (8007c44 <TIM2_IRQHandler+0x8fc>)
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	f240 52db 	movw	r2, #1499	; 0x5db
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d91b      	bls.n	8007b98 <TIM2_IRQHandler+0x850>
				flag_CHARGE_MODE = 0;
 8007b60:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <TIM2_IRQHandler+0x880>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	701a      	strb	r2, [r3, #0]
				dc=0; Charger_Mode =1;
 8007b66:	4b2c      	ldr	r3, [pc, #176]	; (8007c18 <TIM2_IRQHandler+0x8d0>)
 8007b68:	f04f 0200 	mov.w	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
 8007b6e:	4b25      	ldr	r3, [pc, #148]	; (8007c04 <TIM2_IRQHandler+0x8bc>)
 8007b70:	2201      	movs	r2, #1
 8007b72:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, Buzzer_Pin, 0);
 8007b74:	2200      	movs	r2, #0
 8007b76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b7a:	482d      	ldr	r0, [pc, #180]	; (8007c30 <TIM2_IRQHandler+0x8e8>)
 8007b7c:	f003 f88d 	bl	800ac9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, Led1_Pin,0);
 8007b80:	2200      	movs	r2, #0
 8007b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b86:	482b      	ldr	r0, [pc, #172]	; (8007c34 <TIM2_IRQHandler+0x8ec>)
 8007b88:	f003 f887 	bl	800ac9a <HAL_GPIO_WritePin>
				flag_CHARGE_MODE = 0;
 8007b8c:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <TIM2_IRQHandler+0x880>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	701a      	strb	r2, [r3, #0]
				delay_clearing_overtemp = 0;
 8007b92:	4b2c      	ldr	r3, [pc, #176]	; (8007c44 <TIM2_IRQHandler+0x8fc>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	Eror_CodeCheck();
 8007b98:	f000 f968 	bl	8007e6c <Eror_CodeCheck>
	if(	flag_trip_overvoltage == 1		||
 8007b9c:	4b2a      	ldr	r3, [pc, #168]	; (8007c48 <TIM2_IRQHandler+0x900>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d07b      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		flag_trip_overtemperature == 1	||
 8007ba4:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <TIM2_IRQHandler+0x8f4>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
	if(	flag_trip_overvoltage == 1		||
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d077      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		flag_trip_undertemperature == 1	||
 8007bac:	4b27      	ldr	r3, [pc, #156]	; (8007c4c <TIM2_IRQHandler+0x904>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overtemperature == 1	||
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d073      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		flag_trip_overcurrentcharge == 1||
 8007bb4:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <TIM2_IRQHandler+0x908>)
 8007bb6:	781b      	ldrb	r3, [r3, #0]
		flag_trip_undertemperature == 1	||
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d06f      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
 8007bbc:	e04a      	b.n	8007c54 <TIM2_IRQHandler+0x90c>
 8007bbe:	bf00      	nop
 8007bc0:	47ae147b 	.word	0x47ae147b
 8007bc4:	3f947ae1 	.word	0x3f947ae1
 8007bc8:	200006e8 	.word	0x200006e8
 8007bcc:	200010b8 	.word	0x200010b8
 8007bd0:	20000052 	.word	0x20000052
 8007bd4:	20000cd0 	.word	0x20000cd0
 8007bd8:	20000051 	.word	0x20000051
 8007bdc:	200006a0 	.word	0x200006a0
 8007be0:	20000abc 	.word	0x20000abc
 8007be4:	42c80000 	.word	0x42c80000
 8007be8:	20001264 	.word	0x20001264
 8007bec:	2000125c 	.word	0x2000125c
 8007bf0:	20000d38 	.word	0x20000d38
 8007bf4:	20000678 	.word	0x20000678
 8007bf8:	200008f0 	.word	0x200008f0
 8007bfc:	2000126c 	.word	0x2000126c
 8007c00:	20000695 	.word	0x20000695
 8007c04:	20000720 	.word	0x20000720
 8007c08:	20000d3c 	.word	0x20000d3c
 8007c0c:	20001260 	.word	0x20001260
 8007c10:	20000666 	.word	0x20000666
 8007c14:	2000004c 	.word	0x2000004c
 8007c18:	200006c4 	.word	0x200006c4
 8007c1c:	40010000 	.word	0x40010000
 8007c20:	2000160c 	.word	0x2000160c
 8007c24:	200008f4 	.word	0x200008f4
 8007c28:	200006f4 	.word	0x200006f4
 8007c2c:	200008c0 	.word	0x200008c0
 8007c30:	40020800 	.word	0x40020800
 8007c34:	40020400 	.word	0x40020400
 8007c38:	200006ff 	.word	0x200006ff
 8007c3c:	200008b4 	.word	0x200008b4
 8007c40:	20000ca8 	.word	0x20000ca8
 8007c44:	20001584 	.word	0x20001584
 8007c48:	200012a4 	.word	0x200012a4
 8007c4c:	20000ac4 	.word	0x20000ac4
 8007c50:	20000d34 	.word	0x20000d34
		flag_trip_SOCOverCharge == 1	||
 8007c54:	4b22      	ldr	r3, [pc, #136]	; (8007ce0 <TIM2_IRQHandler+0x998>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
		flag_trip_overcurrentcharge == 1||
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d01f      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		flag_trip_shortcircuit == 1		||
 8007c5c:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <TIM2_IRQHandler+0x99c>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_SOCOverCharge == 1	||
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d01b      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		flag_trip_systemfailure == 1	||
 8007c64:	4b20      	ldr	r3, [pc, #128]	; (8007ce8 <TIM2_IRQHandler+0x9a0>)
 8007c66:	781b      	ldrb	r3, [r3, #0]
		flag_trip_shortcircuit == 1		||
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d017      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		Flag_ChargerShortCircuit == 1	||
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	; (8007cec <TIM2_IRQHandler+0x9a4>)
 8007c6e:	781b      	ldrb	r3, [r3, #0]
		flag_trip_systemfailure == 1	||
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d013      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		Flag_ChargerOverCurrent == 1	||
 8007c74:	4b1e      	ldr	r3, [pc, #120]	; (8007cf0 <TIM2_IRQHandler+0x9a8>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerShortCircuit == 1	||
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d00f      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		Flag_ChargerOverTemperature == 1||
 8007c7c:	4b1d      	ldr	r3, [pc, #116]	; (8007cf4 <TIM2_IRQHandler+0x9ac>)
 8007c7e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverCurrent == 1	||
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d00b      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		Flag_ChargerOverVoltage == 1	||
 8007c84:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <TIM2_IRQHandler+0x9b0>)
 8007c86:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverTemperature == 1||
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d007      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		Flag_MiniPC_LostCommunication==1||
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	; (8007cfc <TIM2_IRQHandler+0x9b4>)
 8007c8e:	781b      	ldrb	r3, [r3, #0]
		Flag_ChargerOverVoltage == 1	||
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d003      	beq.n	8007c9c <TIM2_IRQHandler+0x954>
		Flag_BMS_LostCommunication == 1)
 8007c94:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <TIM2_IRQHandler+0x9b8>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
		Flag_MiniPC_LostCommunication==1||
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d11b      	bne.n	8007cd4 <TIM2_IRQHandler+0x98c>
		{
			duty=0;
 8007c9c:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <TIM2_IRQHandler+0x9bc>)
 8007c9e:	f04f 0200 	mov.w	r2, #0
 8007ca2:	601a      	str	r2, [r3, #0]
			htim1.Instance->CCR1=duty*TIM1->ARR;
 8007ca4:	4b18      	ldr	r3, [pc, #96]	; (8007d08 <TIM2_IRQHandler+0x9c0>)
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7f9 f82f 	bl	8000d0c <__aeabi_ui2f>
 8007cae:	4602      	mov	r2, r0
 8007cb0:	4b14      	ldr	r3, [pc, #80]	; (8007d04 <TIM2_IRQHandler+0x9bc>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	4610      	mov	r0, r2
 8007cb8:	f7f9 f880 	bl	8000dbc <__aeabi_fmul>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <TIM2_IRQHandler+0x9c4>)
 8007cc2:	681c      	ldr	r4, [r3, #0]
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	f7f9 fa3f 	bl	8001148 <__aeabi_f2uiz>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	6363      	str	r3, [r4, #52]	; 0x34
			Charger_Mode = 2;
 8007cce:	4b10      	ldr	r3, [pc, #64]	; (8007d10 <TIM2_IRQHandler+0x9c8>)
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	701a      	strb	r2, [r3, #0]
		}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007cd4:	480f      	ldr	r0, [pc, #60]	; (8007d14 <TIM2_IRQHandler+0x9cc>)
 8007cd6:	f004 fc8d 	bl	800c5f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007cda:	bf00      	nop
 8007cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000699 	.word	0x20000699
 8007ce4:	200006b4 	.word	0x200006b4
 8007ce8:	200006e0 	.word	0x200006e0
 8007cec:	200008ec 	.word	0x200008ec
 8007cf0:	200008d0 	.word	0x200008d0
 8007cf4:	200006ff 	.word	0x200006ff
 8007cf8:	200008f8 	.word	0x200008f8
 8007cfc:	20001268 	.word	0x20001268
 8007d00:	200006da 	.word	0x200006da
 8007d04:	2000126c 	.word	0x2000126c
 8007d08:	40010000 	.word	0x40010000
 8007d0c:	2000160c 	.word	0x2000160c
 8007d10:	20000720 	.word	0x20000720
 8007d14:	2000164c 	.word	0x2000164c

08007d18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

//	if(!(Handshaking == 0 && identified == 1) ) CAN_Tx_Process();
	CAN_Tx_Process();
 8007d1c:	f7fd fdfc 	bl	8005918 <CAN_Tx_Process>

	if(Handshaking == 1){
 8007d20:	4b30      	ldr	r3, [pc, #192]	; (8007de4 <TIM3_IRQHandler+0xcc>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d117      	bne.n	8007d58 <TIM3_IRQHandler+0x40>
		SS+=1;
 8007d28:	4b2f      	ldr	r3, [pc, #188]	; (8007de8 <TIM3_IRQHandler+0xd0>)
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	3301      	adds	r3, #1
 8007d2e:	b2da      	uxtb	r2, r3
 8007d30:	4b2d      	ldr	r3, [pc, #180]	; (8007de8 <TIM3_IRQHandler+0xd0>)
 8007d32:	701a      	strb	r2, [r3, #0]
		if(SS >= 50){
 8007d34:	4b2c      	ldr	r3, [pc, #176]	; (8007de8 <TIM3_IRQHandler+0xd0>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	2b31      	cmp	r3, #49	; 0x31
 8007d3a:	d90d      	bls.n	8007d58 <TIM3_IRQHandler+0x40>
			if(Communication_BMS_Flag == 1) Communication_BMS_Flag = 0;
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <TIM3_IRQHandler+0xd4>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d103      	bne.n	8007d4c <TIM3_IRQHandler+0x34>
 8007d44:	4b29      	ldr	r3, [pc, #164]	; (8007dec <TIM3_IRQHandler+0xd4>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
 8007d4a:	e002      	b.n	8007d52 <TIM3_IRQHandler+0x3a>
			else Flag_BMS_LostCommunication = 1;
 8007d4c:	4b28      	ldr	r3, [pc, #160]	; (8007df0 <TIM3_IRQHandler+0xd8>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	701a      	strb	r2, [r3, #0]
			SS = 0;
 8007d52:	4b25      	ldr	r3, [pc, #148]	; (8007de8 <TIM3_IRQHandler+0xd0>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
//			else Flag_MiniPC_LostCommunication = 1;
//
		}
	}

	if (Charger_Mode == 1){
 8007d58:	4b26      	ldr	r3, [pc, #152]	; (8007df4 <TIM3_IRQHandler+0xdc>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d138      	bne.n	8007dd2 <TIM3_IRQHandler+0xba>
		Time_Ah++;
 8007d60:	4b25      	ldr	r3, [pc, #148]	; (8007df8 <TIM3_IRQHandler+0xe0>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	b2da      	uxtb	r2, r3
 8007d68:	4b23      	ldr	r3, [pc, #140]	; (8007df8 <TIM3_IRQHandler+0xe0>)
 8007d6a:	701a      	strb	r2, [r3, #0]
		SUM_Ah += Current_Charger;
 8007d6c:	4b23      	ldr	r3, [pc, #140]	; (8007dfc <TIM3_IRQHandler+0xe4>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	4b23      	ldr	r3, [pc, #140]	; (8007e00 <TIM3_IRQHandler+0xe8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4619      	mov	r1, r3
 8007d76:	4610      	mov	r0, r2
 8007d78:	f7f8 ff18 	bl	8000bac <__addsf3>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	461a      	mov	r2, r3
 8007d80:	4b1e      	ldr	r3, [pc, #120]	; (8007dfc <TIM3_IRQHandler+0xe4>)
 8007d82:	601a      	str	r2, [r3, #0]
		if(Time_Ah == 10){
 8007d84:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <TIM3_IRQHandler+0xe0>)
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b0a      	cmp	r3, #10
 8007d8a:	d122      	bne.n	8007dd2 <TIM3_IRQHandler+0xba>
			Ah_CONSUMPTION = Ah_CONSUMPTION + (SUM_Ah*1000/10/3600); //1000 mAh, 1/10 Hz, 3600 secon
 8007d8c:	4b1b      	ldr	r3, [pc, #108]	; (8007dfc <TIM3_IRQHandler+0xe4>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	491c      	ldr	r1, [pc, #112]	; (8007e04 <TIM3_IRQHandler+0xec>)
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7f9 f812 	bl	8000dbc <__aeabi_fmul>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	491b      	ldr	r1, [pc, #108]	; (8007e08 <TIM3_IRQHandler+0xf0>)
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7f9 f8c1 	bl	8000f24 <__aeabi_fdiv>
 8007da2:	4603      	mov	r3, r0
 8007da4:	4919      	ldr	r1, [pc, #100]	; (8007e0c <TIM3_IRQHandler+0xf4>)
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7f9 f8bc 	bl	8000f24 <__aeabi_fdiv>
 8007dac:	4603      	mov	r3, r0
 8007dae:	461a      	mov	r2, r3
 8007db0:	4b17      	ldr	r3, [pc, #92]	; (8007e10 <TIM3_IRQHandler+0xf8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f7f8 fef8 	bl	8000bac <__addsf3>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	4b13      	ldr	r3, [pc, #76]	; (8007e10 <TIM3_IRQHandler+0xf8>)
 8007dc2:	601a      	str	r2, [r3, #0]
			SUM_Ah = 0;
 8007dc4:	4b0d      	ldr	r3, [pc, #52]	; (8007dfc <TIM3_IRQHandler+0xe4>)
 8007dc6:	f04f 0200 	mov.w	r2, #0
 8007dca:	601a      	str	r2, [r3, #0]
			Time_Ah = 0;
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <TIM3_IRQHandler+0xe0>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
		}
	}
	Delay_USART = 1;
 8007dd2:	4b10      	ldr	r3, [pc, #64]	; (8007e14 <TIM3_IRQHandler+0xfc>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007dd8:	480f      	ldr	r0, [pc, #60]	; (8007e18 <TIM3_IRQHandler+0x100>)
 8007dda:	f004 fc0b 	bl	800c5f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007dde:	bf00      	nop
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20000d54 	.word	0x20000d54
 8007de8:	20000667 	.word	0x20000667
 8007dec:	20000ab4 	.word	0x20000ab4
 8007df0:	200006da 	.word	0x200006da
 8007df4:	20000720 	.word	0x20000720
 8007df8:	20000668 	.word	0x20000668
 8007dfc:	20001578 	.word	0x20001578
 8007e00:	20001264 	.word	0x20001264
 8007e04:	447a0000 	.word	0x447a0000
 8007e08:	41200000 	.word	0x41200000
 8007e0c:	45610000 	.word	0x45610000
 8007e10:	200008f4 	.word	0x200008f4
 8007e14:	200006a8 	.word	0x200006a8
 8007e18:	200015cc 	.word	0x200015cc

08007e1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//	CAN_Rx_Process();	//can receive handle

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8007e20:	4802      	ldr	r0, [pc, #8]	; (8007e2c <TIM4_IRQHandler+0x10>)
 8007e22:	f004 fbe7 	bl	800c5f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8007e26:	bf00      	nop
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	2000158c 	.word	0x2000158c

08007e30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007e34:	4802      	ldr	r0, [pc, #8]	; (8007e40 <USART1_IRQHandler+0x10>)
 8007e36:	f005 facb 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007e3a:	bf00      	nop
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	200016cc 	.word	0x200016cc

08007e44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007e48:	4802      	ldr	r0, [pc, #8]	; (8007e54 <USART3_IRQHandler+0x10>)
 8007e4a:	f005 fac1 	bl	800d3d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007e4e:	bf00      	nop
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	2000168c 	.word	0x2000168c

08007e58 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007e5c:	4802      	ldr	r0, [pc, #8]	; (8007e68 <DMA2_Stream0_IRQHandler+0x10>)
 8007e5e:	f002 fb01 	bl	800a464 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007e62:	bf00      	nop
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20001320 	.word	0x20001320

08007e6c <Eror_CodeCheck>:

/* USER CODE BEGIN 1 */

void Eror_CodeCheck(void)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	af00      	add	r7, sp, #0
	if (flag_trip_unbalance==1)
 8007e70:	4b46      	ldr	r3, [pc, #280]	; (8007f8c <Eror_CodeCheck+0x120>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d103      	bne.n	8007e80 <Eror_CodeCheck+0x14>
			Eror_Code=6;	//Battery Pack imbalance
 8007e78:	4b45      	ldr	r3, [pc, #276]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007e7a:	2206      	movs	r2, #6
 8007e7c:	701a      	strb	r2, [r3, #0]

	else if(Flag_BMS_LostCommunication==1)
		Eror_Code=22;
	else if(Flag_MiniPC_LostCommunication==1)
		Eror_Code=23;
}
 8007e7e:	e081      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (flag_trip_overtemperature==1){
 8007e80:	4b44      	ldr	r3, [pc, #272]	; (8007f94 <Eror_CodeCheck+0x128>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d106      	bne.n	8007e96 <Eror_CodeCheck+0x2a>
			Eror_Code=8;	//Battery Pack over temperature
 8007e88:	4b41      	ldr	r3, [pc, #260]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	701a      	strb	r2, [r3, #0]
			LastFlag_OverTemperature = 1;
 8007e8e:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <Eror_CodeCheck+0x12c>)
 8007e90:	2201      	movs	r2, #1
 8007e92:	701a      	strb	r2, [r3, #0]
}
 8007e94:	e076      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (flag_trip_undertemperature==1)
 8007e96:	4b41      	ldr	r3, [pc, #260]	; (8007f9c <Eror_CodeCheck+0x130>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d103      	bne.n	8007ea6 <Eror_CodeCheck+0x3a>
			Eror_Code=9;	//Battery Pack under temperature
 8007e9e:	4b3c      	ldr	r3, [pc, #240]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007ea0:	2209      	movs	r2, #9
 8007ea2:	701a      	strb	r2, [r3, #0]
}
 8007ea4:	e06e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (flag_trip_overcurrentcharge==1)
 8007ea6:	4b3e      	ldr	r3, [pc, #248]	; (8007fa0 <Eror_CodeCheck+0x134>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d103      	bne.n	8007eb6 <Eror_CodeCheck+0x4a>
			Eror_Code=10;	//Battery Pack over current charge
 8007eae:	4b38      	ldr	r3, [pc, #224]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007eb0:	220a      	movs	r2, #10
 8007eb2:	701a      	strb	r2, [r3, #0]
}
 8007eb4:	e066      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (flag_trip_overvoltage==1)
 8007eb6:	4b3b      	ldr	r3, [pc, #236]	; (8007fa4 <Eror_CodeCheck+0x138>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d103      	bne.n	8007ec6 <Eror_CodeCheck+0x5a>
			Eror_Code=11;	//Battery Pack over voltage
 8007ebe:	4b34      	ldr	r3, [pc, #208]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007ec0:	220b      	movs	r2, #11
 8007ec2:	701a      	strb	r2, [r3, #0]
}
 8007ec4:	e05e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (flag_trip_shortcircuit==1)
 8007ec6:	4b38      	ldr	r3, [pc, #224]	; (8007fa8 <Eror_CodeCheck+0x13c>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d103      	bne.n	8007ed6 <Eror_CodeCheck+0x6a>
			Eror_Code=12;	//Battery Pack short circuit
 8007ece:	4b30      	ldr	r3, [pc, #192]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007ed0:	220c      	movs	r2, #12
 8007ed2:	701a      	strb	r2, [r3, #0]
}
 8007ed4:	e056      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (flag_trip_systemfailure==1)
 8007ed6:	4b35      	ldr	r3, [pc, #212]	; (8007fac <Eror_CodeCheck+0x140>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d103      	bne.n	8007ee6 <Eror_CodeCheck+0x7a>
			Eror_Code=13;	//Battery Pack system failure
 8007ede:	4b2c      	ldr	r3, [pc, #176]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007ee0:	220d      	movs	r2, #13
 8007ee2:	701a      	strb	r2, [r3, #0]
}
 8007ee4:	e04e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerUnderVoltage==1)
 8007ee6:	4b32      	ldr	r3, [pc, #200]	; (8007fb0 <Eror_CodeCheck+0x144>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d103      	bne.n	8007ef6 <Eror_CodeCheck+0x8a>
		Eror_Code=14;	//Charger Under Voltage
 8007eee:	4b28      	ldr	r3, [pc, #160]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007ef0:	220e      	movs	r2, #14
 8007ef2:	701a      	strb	r2, [r3, #0]
}
 8007ef4:	e046      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerOverVoltage==1)
 8007ef6:	4b2f      	ldr	r3, [pc, #188]	; (8007fb4 <Eror_CodeCheck+0x148>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <Eror_CodeCheck+0x9a>
		Eror_Code=15;	//Charger Over Current
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f00:	220f      	movs	r2, #15
 8007f02:	701a      	strb	r2, [r3, #0]
}
 8007f04:	e03e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerOverTemperature==1)
 8007f06:	4b2c      	ldr	r3, [pc, #176]	; (8007fb8 <Eror_CodeCheck+0x14c>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d103      	bne.n	8007f16 <Eror_CodeCheck+0xaa>
		Eror_Code=16;	//Charger Over Temperature
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f10:	2210      	movs	r2, #16
 8007f12:	701a      	strb	r2, [r3, #0]
}
 8007f14:	e036      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerUnderTemperature==1)
 8007f16:	4b29      	ldr	r3, [pc, #164]	; (8007fbc <Eror_CodeCheck+0x150>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d103      	bne.n	8007f26 <Eror_CodeCheck+0xba>
		Eror_Code=17;	//Charger Under Temperature
 8007f1e:	4b1c      	ldr	r3, [pc, #112]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f20:	2211      	movs	r2, #17
 8007f22:	701a      	strb	r2, [r3, #0]
}
 8007f24:	e02e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerShortCircuit==1)
 8007f26:	4b26      	ldr	r3, [pc, #152]	; (8007fc0 <Eror_CodeCheck+0x154>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d103      	bne.n	8007f36 <Eror_CodeCheck+0xca>
		Eror_Code=18;	//Charger Short Circuit
 8007f2e:	4b18      	ldr	r3, [pc, #96]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f30:	2212      	movs	r2, #18
 8007f32:	701a      	strb	r2, [r3, #0]
}
 8007f34:	e026      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_ChargerOverCurrent==1)
 8007f36:	4b23      	ldr	r3, [pc, #140]	; (8007fc4 <Eror_CodeCheck+0x158>)
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d103      	bne.n	8007f46 <Eror_CodeCheck+0xda>
		Eror_Code=19;	//Charger Over Current
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f40:	2213      	movs	r2, #19
 8007f42:	701a      	strb	r2, [r3, #0]
}
 8007f44:	e01e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_InputUnderVoltage==1)
 8007f46:	4b20      	ldr	r3, [pc, #128]	; (8007fc8 <Eror_CodeCheck+0x15c>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d103      	bne.n	8007f56 <Eror_CodeCheck+0xea>
		Eror_Code=20;	//Input Under Voltage
 8007f4e:	4b10      	ldr	r3, [pc, #64]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f50:	2214      	movs	r2, #20
 8007f52:	701a      	strb	r2, [r3, #0]
}
 8007f54:	e016      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if (Flag_InputOverVoltage==1)
 8007f56:	4b1d      	ldr	r3, [pc, #116]	; (8007fcc <Eror_CodeCheck+0x160>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d103      	bne.n	8007f66 <Eror_CodeCheck+0xfa>
		Eror_Code=21;	//Input Over Current
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f60:	2215      	movs	r2, #21
 8007f62:	701a      	strb	r2, [r3, #0]
}
 8007f64:	e00e      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if(Flag_BMS_LostCommunication==1)
 8007f66:	4b1a      	ldr	r3, [pc, #104]	; (8007fd0 <Eror_CodeCheck+0x164>)
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d103      	bne.n	8007f76 <Eror_CodeCheck+0x10a>
		Eror_Code=22;
 8007f6e:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f70:	2216      	movs	r2, #22
 8007f72:	701a      	strb	r2, [r3, #0]
}
 8007f74:	e006      	b.n	8007f84 <Eror_CodeCheck+0x118>
	else if(Flag_MiniPC_LostCommunication==1)
 8007f76:	4b17      	ldr	r3, [pc, #92]	; (8007fd4 <Eror_CodeCheck+0x168>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d102      	bne.n	8007f84 <Eror_CodeCheck+0x118>
		Eror_Code=23;
 8007f7e:	4b04      	ldr	r3, [pc, #16]	; (8007f90 <Eror_CodeCheck+0x124>)
 8007f80:	2217      	movs	r2, #23
 8007f82:	701a      	strb	r2, [r3, #0]
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bc80      	pop	{r7}
 8007f8a:	4770      	bx	lr
 8007f8c:	20000698 	.word	0x20000698
 8007f90:	20000694 	.word	0x20000694
 8007f94:	200008b4 	.word	0x200008b4
 8007f98:	20000ca8 	.word	0x20000ca8
 8007f9c:	20000ac4 	.word	0x20000ac4
 8007fa0:	20000d34 	.word	0x20000d34
 8007fa4:	200012a4 	.word	0x200012a4
 8007fa8:	200006b4 	.word	0x200006b4
 8007fac:	200006e0 	.word	0x200006e0
 8007fb0:	200008bc 	.word	0x200008bc
 8007fb4:	200008f8 	.word	0x200008f8
 8007fb8:	200006ff 	.word	0x200006ff
 8007fbc:	200012c0 	.word	0x200012c0
 8007fc0:	200008ec 	.word	0x200008ec
 8007fc4:	200008d0 	.word	0x200008d0
 8007fc8:	200006c0 	.word	0x200006c0
 8007fcc:	20000cdc 	.word	0x20000cdc
 8007fd0:	200006da 	.word	0x200006da
 8007fd4:	20001268 	.word	0x20001268

08007fd8 <Clear_ProtectionFlag>:

void Clear_ProtectionFlag(void)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	af00      	add	r7, sp, #0
	flag_trip_overvoltage = 0;
 8007fdc:	4b13      	ldr	r3, [pc, #76]	; (800802c <Clear_ProtectionFlag+0x54>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	701a      	strb	r2, [r3, #0]
	flag_trip_overtemperature = 0;
 8007fe2:	4b13      	ldr	r3, [pc, #76]	; (8008030 <Clear_ProtectionFlag+0x58>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	701a      	strb	r2, [r3, #0]
	flag_trip_undertemperature = 0;
 8007fe8:	4b12      	ldr	r3, [pc, #72]	; (8008034 <Clear_ProtectionFlag+0x5c>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	701a      	strb	r2, [r3, #0]
	flag_trip_overcurrentcharge = 0;
 8007fee:	4b12      	ldr	r3, [pc, #72]	; (8008038 <Clear_ProtectionFlag+0x60>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
	flag_trip_SOCOverCharge = 0;
 8007ff4:	4b11      	ldr	r3, [pc, #68]	; (800803c <Clear_ProtectionFlag+0x64>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
	flag_trip_shortcircuit = 0;
 8007ffa:	4b11      	ldr	r3, [pc, #68]	; (8008040 <Clear_ProtectionFlag+0x68>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]
	flag_trip_systemfailure = 0;
 8008000:	4b10      	ldr	r3, [pc, #64]	; (8008044 <Clear_ProtectionFlag+0x6c>)
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverCurrent = 0;
 8008006:	4b10      	ldr	r3, [pc, #64]	; (8008048 <Clear_ProtectionFlag+0x70>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverTemperature = 0;
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <Clear_ProtectionFlag+0x74>)
 800800e:	2200      	movs	r2, #0
 8008010:	701a      	strb	r2, [r3, #0]
	Flag_ChargerOverVoltage = 0;
 8008012:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <Clear_ProtectionFlag+0x78>)
 8008014:	2200      	movs	r2, #0
 8008016:	701a      	strb	r2, [r3, #0]
	Flag_MiniPC_LostCommunication = 0;
 8008018:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <Clear_ProtectionFlag+0x7c>)
 800801a:	2200      	movs	r2, #0
 800801c:	701a      	strb	r2, [r3, #0]
	Flag_BMS_LostCommunication = 0;
 800801e:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <Clear_ProtectionFlag+0x80>)
 8008020:	2200      	movs	r2, #0
 8008022:	701a      	strb	r2, [r3, #0]
}
 8008024:	bf00      	nop
 8008026:	46bd      	mov	sp, r7
 8008028:	bc80      	pop	{r7}
 800802a:	4770      	bx	lr
 800802c:	200012a4 	.word	0x200012a4
 8008030:	200008b4 	.word	0x200008b4
 8008034:	20000ac4 	.word	0x20000ac4
 8008038:	20000d34 	.word	0x20000d34
 800803c:	20000699 	.word	0x20000699
 8008040:	200006b4 	.word	0x200006b4
 8008044:	200006e0 	.word	0x200006e0
 8008048:	200008d0 	.word	0x200008d0
 800804c:	200006ff 	.word	0x200006ff
 8008050:	200008f8 	.word	0x200008f8
 8008054:	20001268 	.word	0x20001268
 8008058:	200006da 	.word	0x200006da
 800805c:	00000000 	.word	0x00000000

08008060 <Fault_Check>:

void Fault_Check(void)
{
 8008060:	b5b0      	push	{r4, r5, r7, lr}
 8008062:	af00      	add	r7, sp, #0
	if(Current_Charger >= SetProtection_ShortCircuit){
 8008064:	4b90      	ldr	r3, [pc, #576]	; (80082a8 <Fault_Check+0x248>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	4618      	mov	r0, r3
 800806a:	f7f8 fe53 	bl	8000d14 <__aeabi_i2f>
 800806e:	4602      	mov	r2, r0
 8008070:	4b8e      	ldr	r3, [pc, #568]	; (80082ac <Fault_Check+0x24c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4619      	mov	r1, r3
 8008076:	4610      	mov	r0, r2
 8008078:	f7f9 f848 	bl	800110c <__aeabi_fcmple>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d009      	beq.n	8008096 <Fault_Check+0x36>
		Flag_ChargerShortCircuit=1;
 8008082:	4b8b      	ldr	r3, [pc, #556]	; (80082b0 <Fault_Check+0x250>)
 8008084:	2201      	movs	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOC, Buzzer_Pin,1);
 8008088:	2201      	movs	r2, #1
 800808a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800808e:	4889      	ldr	r0, [pc, #548]	; (80082b4 <Fault_Check+0x254>)
 8008090:	f002 fe03 	bl	800ac9a <HAL_GPIO_WritePin>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
		Eror_Code = 0;
		TripTime_OverCurrent = 0;
		Count_TripTime -= 0.001;
	}
}
 8008094:	e0fb      	b.n	800828e <Fault_Check+0x22e>
	else if((SetProtection_OverCurrent - Current_Charger)<=0 && Flag_ChargerOverCurrent==0 ){
 8008096:	4b88      	ldr	r3, [pc, #544]	; (80082b8 <Fault_Check+0x258>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f7f8 fe3a 	bl	8000d14 <__aeabi_i2f>
 80080a0:	4602      	mov	r2, r0
 80080a2:	4b82      	ldr	r3, [pc, #520]	; (80082ac <Fault_Check+0x24c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7f8 fd7d 	bl	8000ba8 <__aeabi_fsub>
 80080ae:	4603      	mov	r3, r0
 80080b0:	f04f 0100 	mov.w	r1, #0
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7f9 f829 	bl	800110c <__aeabi_fcmple>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d064      	beq.n	800818a <Fault_Check+0x12a>
 80080c0:	4b7e      	ldr	r3, [pc, #504]	; (80082bc <Fault_Check+0x25c>)
 80080c2:	781b      	ldrb	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d160      	bne.n	800818a <Fault_Check+0x12a>
		Eror_Code=17;
 80080c8:	4b7d      	ldr	r3, [pc, #500]	; (80082c0 <Fault_Check+0x260>)
 80080ca:	2211      	movs	r2, #17
 80080cc:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 1.8/(((Current_Charger/SetProtection_OverCurrent)*(Current_Charger/SetProtection_OverCurrent))-1);
 80080ce:	4b77      	ldr	r3, [pc, #476]	; (80082ac <Fault_Check+0x24c>)
 80080d0:	681c      	ldr	r4, [r3, #0]
 80080d2:	4b79      	ldr	r3, [pc, #484]	; (80082b8 <Fault_Check+0x258>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7f8 fe1c 	bl	8000d14 <__aeabi_i2f>
 80080dc:	4603      	mov	r3, r0
 80080de:	4619      	mov	r1, r3
 80080e0:	4620      	mov	r0, r4
 80080e2:	f7f8 ff1f 	bl	8000f24 <__aeabi_fdiv>
 80080e6:	4603      	mov	r3, r0
 80080e8:	461d      	mov	r5, r3
 80080ea:	4b70      	ldr	r3, [pc, #448]	; (80082ac <Fault_Check+0x24c>)
 80080ec:	681c      	ldr	r4, [r3, #0]
 80080ee:	4b72      	ldr	r3, [pc, #456]	; (80082b8 <Fault_Check+0x258>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7f8 fe0e 	bl	8000d14 <__aeabi_i2f>
 80080f8:	4603      	mov	r3, r0
 80080fa:	4619      	mov	r1, r3
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7f8 ff11 	bl	8000f24 <__aeabi_fdiv>
 8008102:	4603      	mov	r3, r0
 8008104:	4619      	mov	r1, r3
 8008106:	4628      	mov	r0, r5
 8008108:	f7f8 fe58 	bl	8000dbc <__aeabi_fmul>
 800810c:	4603      	mov	r3, r0
 800810e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008112:	4618      	mov	r0, r3
 8008114:	f7f8 fd48 	bl	8000ba8 <__aeabi_fsub>
 8008118:	4603      	mov	r3, r0
 800811a:	4618      	mov	r0, r3
 800811c:	f7f8 f9c0 	bl	80004a0 <__aeabi_f2d>
 8008120:	4603      	mov	r3, r0
 8008122:	460c      	mov	r4, r1
 8008124:	461a      	mov	r2, r3
 8008126:	4623      	mov	r3, r4
 8008128:	a15b      	add	r1, pc, #364	; (adr r1, 8008298 <Fault_Check+0x238>)
 800812a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800812e:	f7f8 fb39 	bl	80007a4 <__aeabi_ddiv>
 8008132:	4603      	mov	r3, r0
 8008134:	460c      	mov	r4, r1
 8008136:	4618      	mov	r0, r3
 8008138:	4621      	mov	r1, r4
 800813a:	f7f8 fce1 	bl	8000b00 <__aeabi_d2f>
 800813e:	4602      	mov	r2, r0
 8008140:	4b60      	ldr	r3, [pc, #384]	; (80082c4 <Fault_Check+0x264>)
 8008142:	601a      	str	r2, [r3, #0]
		Count_TripTime += 0.001;
 8008144:	4b60      	ldr	r3, [pc, #384]	; (80082c8 <Fault_Check+0x268>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4618      	mov	r0, r3
 800814a:	f7f8 f9a9 	bl	80004a0 <__aeabi_f2d>
 800814e:	a354      	add	r3, pc, #336	; (adr r3, 80082a0 <Fault_Check+0x240>)
 8008150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008154:	f7f8 f846 	bl	80001e4 <__adddf3>
 8008158:	4603      	mov	r3, r0
 800815a:	460c      	mov	r4, r1
 800815c:	4618      	mov	r0, r3
 800815e:	4621      	mov	r1, r4
 8008160:	f7f8 fcce 	bl	8000b00 <__aeabi_d2f>
 8008164:	4602      	mov	r2, r0
 8008166:	4b58      	ldr	r3, [pc, #352]	; (80082c8 <Fault_Check+0x268>)
 8008168:	601a      	str	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 800816a:	4b57      	ldr	r3, [pc, #348]	; (80082c8 <Fault_Check+0x268>)
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4b55      	ldr	r3, [pc, #340]	; (80082c4 <Fault_Check+0x264>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7f8 ffd3 	bl	8001120 <__aeabi_fcmpge>
 800817a:	4603      	mov	r3, r0
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8086 	beq.w	800828e <Fault_Check+0x22e>
			Flag_ChargerOverCurrent=1;
 8008182:	4b4e      	ldr	r3, [pc, #312]	; (80082bc <Fault_Check+0x25c>)
 8008184:	2201      	movs	r2, #1
 8008186:	701a      	strb	r2, [r3, #0]
		if(Count_TripTime >= TripTime_OverCurrent){
 8008188:	e081      	b.n	800828e <Fault_Check+0x22e>
	else if ( Temp_T1 >= (SetProtection_Temp1-10)  || Temp_T2 >= (SetProtection_Temp2-10)){
 800818a:	4b50      	ldr	r3, [pc, #320]	; (80082cc <Fault_Check+0x26c>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	3b0a      	subs	r3, #10
 8008190:	4618      	mov	r0, r3
 8008192:	f7f8 fdbf 	bl	8000d14 <__aeabi_i2f>
 8008196:	4602      	mov	r2, r0
 8008198:	4b4d      	ldr	r3, [pc, #308]	; (80082d0 <Fault_Check+0x270>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4619      	mov	r1, r3
 800819e:	4610      	mov	r0, r2
 80081a0:	f7f8 ffb4 	bl	800110c <__aeabi_fcmple>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <Fault_Check+0x16a>
 80081aa:	4b4a      	ldr	r3, [pc, #296]	; (80082d4 <Fault_Check+0x274>)
 80081ac:	781b      	ldrb	r3, [r3, #0]
 80081ae:	3b0a      	subs	r3, #10
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7f8 fdaf 	bl	8000d14 <__aeabi_i2f>
 80081b6:	4602      	mov	r2, r0
 80081b8:	4b47      	ldr	r3, [pc, #284]	; (80082d8 <Fault_Check+0x278>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4619      	mov	r1, r3
 80081be:	4610      	mov	r0, r2
 80081c0:	f7f8 ffa4 	bl	800110c <__aeabi_fcmple>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d02b      	beq.n	8008222 <Fault_Check+0x1c2>
		flag_Derating = 1;
 80081ca:	4b44      	ldr	r3, [pc, #272]	; (80082dc <Fault_Check+0x27c>)
 80081cc:	2201      	movs	r2, #1
 80081ce:	701a      	strb	r2, [r3, #0]
		Eror_Code = 14;
 80081d0:	4b3b      	ldr	r3, [pc, #236]	; (80082c0 <Fault_Check+0x260>)
 80081d2:	220e      	movs	r2, #14
 80081d4:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 80081d6:	4b3d      	ldr	r3, [pc, #244]	; (80082cc <Fault_Check+0x26c>)
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	4618      	mov	r0, r3
 80081dc:	f7f8 fd9a 	bl	8000d14 <__aeabi_i2f>
 80081e0:	4602      	mov	r2, r0
 80081e2:	4b3b      	ldr	r3, [pc, #236]	; (80082d0 <Fault_Check+0x270>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4619      	mov	r1, r3
 80081e8:	4610      	mov	r0, r2
 80081ea:	f7f8 ff8f 	bl	800110c <__aeabi_fcmple>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10f      	bne.n	8008214 <Fault_Check+0x1b4>
 80081f4:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <Fault_Check+0x274>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	4618      	mov	r0, r3
 80081fa:	f7f8 fd8b 	bl	8000d14 <__aeabi_i2f>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b35      	ldr	r3, [pc, #212]	; (80082d8 <Fault_Check+0x278>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7f8 ff80 	bl	800110c <__aeabi_fcmple>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d100      	bne.n	8008214 <Fault_Check+0x1b4>
 8008212:	e03c      	b.n	800828e <Fault_Check+0x22e>
			Flag_ChargerOverTemperature = 1;
 8008214:	4b32      	ldr	r3, [pc, #200]	; (80082e0 <Fault_Check+0x280>)
 8008216:	2201      	movs	r2, #1
 8008218:	701a      	strb	r2, [r3, #0]
			Charger_Mode = 2;
 800821a:	4b32      	ldr	r3, [pc, #200]	; (80082e4 <Fault_Check+0x284>)
 800821c:	2202      	movs	r2, #2
 800821e:	701a      	strb	r2, [r3, #0]
		if(Temp_T1 >= SetProtection_Temp1 || Temp_T2 >= SetProtection_Temp2){
 8008220:	e035      	b.n	800828e <Fault_Check+0x22e>
	else if(Voltage_Charger >= SetProtection_OverVoltage){
 8008222:	4b31      	ldr	r3, [pc, #196]	; (80082e8 <Fault_Check+0x288>)
 8008224:	781b      	ldrb	r3, [r3, #0]
 8008226:	4618      	mov	r0, r3
 8008228:	f7f8 fd74 	bl	8000d14 <__aeabi_i2f>
 800822c:	4602      	mov	r2, r0
 800822e:	4b2f      	ldr	r3, [pc, #188]	; (80082ec <Fault_Check+0x28c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4619      	mov	r1, r3
 8008234:	4610      	mov	r0, r2
 8008236:	f7f8 ff69 	bl	800110c <__aeabi_fcmple>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <Fault_Check+0x1e8>
		Flag_ChargerOverVoltage=1;
 8008240:	4b2b      	ldr	r3, [pc, #172]	; (80082f0 <Fault_Check+0x290>)
 8008242:	2201      	movs	r2, #1
 8008244:	701a      	strb	r2, [r3, #0]
}
 8008246:	e022      	b.n	800828e <Fault_Check+0x22e>
		if (Eror_Code != 0) LastEror_code = Eror_Code;
 8008248:	4b1d      	ldr	r3, [pc, #116]	; (80082c0 <Fault_Check+0x260>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d003      	beq.n	8008258 <Fault_Check+0x1f8>
 8008250:	4b1b      	ldr	r3, [pc, #108]	; (80082c0 <Fault_Check+0x260>)
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <Fault_Check+0x294>)
 8008256:	701a      	strb	r2, [r3, #0]
		Eror_Code = 0;
 8008258:	4b19      	ldr	r3, [pc, #100]	; (80082c0 <Fault_Check+0x260>)
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
		TripTime_OverCurrent = 0;
 800825e:	4b19      	ldr	r3, [pc, #100]	; (80082c4 <Fault_Check+0x264>)
 8008260:	f04f 0200 	mov.w	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
		Count_TripTime -= 0.001;
 8008266:	4b18      	ldr	r3, [pc, #96]	; (80082c8 <Fault_Check+0x268>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4618      	mov	r0, r3
 800826c:	f7f8 f918 	bl	80004a0 <__aeabi_f2d>
 8008270:	a30b      	add	r3, pc, #44	; (adr r3, 80082a0 <Fault_Check+0x240>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f7 ffb3 	bl	80001e0 <__aeabi_dsub>
 800827a:	4603      	mov	r3, r0
 800827c:	460c      	mov	r4, r1
 800827e:	4618      	mov	r0, r3
 8008280:	4621      	mov	r1, r4
 8008282:	f7f8 fc3d 	bl	8000b00 <__aeabi_d2f>
 8008286:	4602      	mov	r2, r0
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <Fault_Check+0x268>)
 800828a:	601a      	str	r2, [r3, #0]
}
 800828c:	e7ff      	b.n	800828e <Fault_Check+0x22e>
 800828e:	bf00      	nop
 8008290:	bdb0      	pop	{r4, r5, r7, pc}
 8008292:	bf00      	nop
 8008294:	f3af 8000 	nop.w
 8008298:	cccccccd 	.word	0xcccccccd
 800829c:	3ffccccc 	.word	0x3ffccccc
 80082a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80082a4:	3f50624d 	.word	0x3f50624d
 80082a8:	2000004e 	.word	0x2000004e
 80082ac:	20001264 	.word	0x20001264
 80082b0:	200008ec 	.word	0x200008ec
 80082b4:	40020800 	.word	0x40020800
 80082b8:	2000004f 	.word	0x2000004f
 80082bc:	200008d0 	.word	0x200008d0
 80082c0:	20000694 	.word	0x20000694
 80082c4:	20001580 	.word	0x20001580
 80082c8:	20001588 	.word	0x20001588
 80082cc:	20000052 	.word	0x20000052
 80082d0:	20000cd0 	.word	0x20000cd0
 80082d4:	20000051 	.word	0x20000051
 80082d8:	200006a0 	.word	0x200006a0
 80082dc:	200010b8 	.word	0x200010b8
 80082e0:	200006ff 	.word	0x200006ff
 80082e4:	20000720 	.word	0x20000720
 80082e8:	20000050 	.word	0x20000050
 80082ec:	20000ef4 	.word	0x20000ef4
 80082f0:	200008f8 	.word	0x200008f8
 80082f4:	200006fe 	.word	0x200006fe

080082f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008300:	4b11      	ldr	r3, [pc, #68]	; (8008348 <_sbrk+0x50>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <_sbrk+0x16>
		heap_end = &end;
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <_sbrk+0x50>)
 800830a:	4a10      	ldr	r2, [pc, #64]	; (800834c <_sbrk+0x54>)
 800830c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800830e:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <_sbrk+0x50>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008314:	4b0c      	ldr	r3, [pc, #48]	; (8008348 <_sbrk+0x50>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4413      	add	r3, r2
 800831c:	466a      	mov	r2, sp
 800831e:	4293      	cmp	r3, r2
 8008320:	d907      	bls.n	8008332 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008322:	f005 fc23 	bl	800db6c <__errno>
 8008326:	4602      	mov	r2, r0
 8008328:	230c      	movs	r3, #12
 800832a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800832c:	f04f 33ff 	mov.w	r3, #4294967295
 8008330:	e006      	b.n	8008340 <_sbrk+0x48>
	}

	heap_end += incr;
 8008332:	4b05      	ldr	r3, [pc, #20]	; (8008348 <_sbrk+0x50>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4413      	add	r3, r2
 800833a:	4a03      	ldr	r2, [pc, #12]	; (8008348 <_sbrk+0x50>)
 800833c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800833e:	68fb      	ldr	r3, [r7, #12]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3710      	adds	r7, #16
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	2000066c 	.word	0x2000066c
 800834c:	20001718 	.word	0x20001718

08008350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008354:	4b12      	ldr	r3, [pc, #72]	; (80083a0 <SystemInit+0x50>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a11      	ldr	r2, [pc, #68]	; (80083a0 <SystemInit+0x50>)
 800835a:	f043 0301 	orr.w	r3, r3, #1
 800835e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008360:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <SystemInit+0x50>)
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008366:	4b0e      	ldr	r3, [pc, #56]	; (80083a0 <SystemInit+0x50>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a0d      	ldr	r2, [pc, #52]	; (80083a0 <SystemInit+0x50>)
 800836c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8008370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008374:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <SystemInit+0x50>)
 8008378:	4a0a      	ldr	r2, [pc, #40]	; (80083a4 <SystemInit+0x54>)
 800837a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800837c:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <SystemInit+0x50>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a07      	ldr	r2, [pc, #28]	; (80083a0 <SystemInit+0x50>)
 8008382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008386:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008388:	4b05      	ldr	r3, [pc, #20]	; (80083a0 <SystemInit+0x50>)
 800838a:	2200      	movs	r2, #0
 800838c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800838e:	4b06      	ldr	r3, [pc, #24]	; (80083a8 <SystemInit+0x58>)
 8008390:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008394:	609a      	str	r2, [r3, #8]
#endif
}
 8008396:	bf00      	nop
 8008398:	46bd      	mov	sp, r7
 800839a:	bc80      	pop	{r7}
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	40023800 	.word	0x40023800
 80083a4:	24003010 	.word	0x24003010
 80083a8:	e000ed00 	.word	0xe000ed00

080083ac <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b096      	sub	sp, #88	; 0x58
 80083b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80083b6:	2200      	movs	r2, #0
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	605a      	str	r2, [r3, #4]
 80083bc:	609a      	str	r2, [r3, #8]
 80083be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80083c4:	2200      	movs	r2, #0
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80083ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]
 80083d2:	605a      	str	r2, [r3, #4]
 80083d4:	609a      	str	r2, [r3, #8]
 80083d6:	60da      	str	r2, [r3, #12]
 80083d8:	611a      	str	r2, [r3, #16]
 80083da:	615a      	str	r2, [r3, #20]
 80083dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80083de:	1d3b      	adds	r3, r7, #4
 80083e0:	2220      	movs	r2, #32
 80083e2:	2100      	movs	r1, #0
 80083e4:	4618      	mov	r0, r3
 80083e6:	f005 fc25 	bl	800dc34 <memset>

  htim1.Instance = TIM1;
 80083ea:	4b3e      	ldr	r3, [pc, #248]	; (80084e4 <MX_TIM1_Init+0x138>)
 80083ec:	4a3e      	ldr	r2, [pc, #248]	; (80084e8 <MX_TIM1_Init+0x13c>)
 80083ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80083f0:	4b3c      	ldr	r3, [pc, #240]	; (80084e4 <MX_TIM1_Init+0x138>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083f6:	4b3b      	ldr	r3, [pc, #236]	; (80084e4 <MX_TIM1_Init+0x138>)
 80083f8:	2200      	movs	r2, #0
 80083fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5999;
 80083fc:	4b39      	ldr	r3, [pc, #228]	; (80084e4 <MX_TIM1_Init+0x138>)
 80083fe:	f241 726f 	movw	r2, #5999	; 0x176f
 8008402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008404:	4b37      	ldr	r3, [pc, #220]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008406:	2200      	movs	r2, #0
 8008408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800840a:	4b36      	ldr	r3, [pc, #216]	; (80084e4 <MX_TIM1_Init+0x138>)
 800840c:	2200      	movs	r2, #0
 800840e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008410:	4b34      	ldr	r3, [pc, #208]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008412:	2200      	movs	r2, #0
 8008414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008416:	4833      	ldr	r0, [pc, #204]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008418:	f004 f808 	bl	800c42c <HAL_TIM_Base_Init>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8008422:	f7fe fc87 	bl	8006d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800842a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800842c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008430:	4619      	mov	r1, r3
 8008432:	482c      	ldr	r0, [pc, #176]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008434:	f004 faac 	bl	800c990 <HAL_TIM_ConfigClockSource>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800843e:	f7fe fc79 	bl	8006d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008442:	4828      	ldr	r0, [pc, #160]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008444:	f004 f863 	bl	800c50e <HAL_TIM_PWM_Init>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800844e:	f7fe fc71 	bl	8006d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008452:	2300      	movs	r3, #0
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008456:	2300      	movs	r3, #0
 8008458:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800845a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800845e:	4619      	mov	r1, r3
 8008460:	4820      	ldr	r0, [pc, #128]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008462:	f004 fe7d 	bl	800d160 <HAL_TIMEx_MasterConfigSynchronization>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800846c:	f7fe fc62 	bl	8006d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008470:	2360      	movs	r3, #96	; 0x60
 8008472:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008478:	2300      	movs	r3, #0
 800847a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800847c:	2300      	movs	r3, #0
 800847e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008480:	2300      	movs	r3, #0
 8008482:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008484:	2300      	movs	r3, #0
 8008486:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008488:	2300      	movs	r3, #0
 800848a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800848c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008490:	2200      	movs	r2, #0
 8008492:	4619      	mov	r1, r3
 8008494:	4813      	ldr	r0, [pc, #76]	; (80084e4 <MX_TIM1_Init+0x138>)
 8008496:	f004 f9b5 	bl	800c804 <HAL_TIM_PWM_ConfigChannel>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80084a0:	f7fe fc48 	bl	8006d34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80084a4:	2300      	movs	r3, #0
 80084a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80084b0:	2300      	movs	r3, #0
 80084b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80084b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80084be:	2300      	movs	r3, #0
 80084c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80084c2:	1d3b      	adds	r3, r7, #4
 80084c4:	4619      	mov	r1, r3
 80084c6:	4807      	ldr	r0, [pc, #28]	; (80084e4 <MX_TIM1_Init+0x138>)
 80084c8:	f004 fe8e 	bl	800d1e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80084d2:	f7fe fc2f 	bl	8006d34 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80084d6:	4803      	ldr	r0, [pc, #12]	; (80084e4 <MX_TIM1_Init+0x138>)
 80084d8:	f000 f968 	bl	80087ac <HAL_TIM_MspPostInit>

}
 80084dc:	bf00      	nop
 80084de:	3758      	adds	r7, #88	; 0x58
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	2000160c 	.word	0x2000160c
 80084e8:	40010000 	.word	0x40010000

080084ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084f2:	f107 0308 	add.w	r3, r7, #8
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	605a      	str	r2, [r3, #4]
 80084fc:	609a      	str	r2, [r3, #8]
 80084fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008500:	463b      	mov	r3, r7
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8008508:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <MX_TIM2_Init+0x94>)
 800850a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800850e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 59;
 8008510:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <MX_TIM2_Init+0x94>)
 8008512:	223b      	movs	r2, #59	; 0x3b
 8008514:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008516:	4b1a      	ldr	r3, [pc, #104]	; (8008580 <MX_TIM2_Init+0x94>)
 8008518:	2200      	movs	r2, #0
 800851a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800851c:	4b18      	ldr	r3, [pc, #96]	; (8008580 <MX_TIM2_Init+0x94>)
 800851e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <MX_TIM2_Init+0x94>)
 8008526:	2200      	movs	r2, #0
 8008528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800852a:	4b15      	ldr	r3, [pc, #84]	; (8008580 <MX_TIM2_Init+0x94>)
 800852c:	2200      	movs	r2, #0
 800852e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008530:	4813      	ldr	r0, [pc, #76]	; (8008580 <MX_TIM2_Init+0x94>)
 8008532:	f003 ff7b 	bl	800c42c <HAL_TIM_Base_Init>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800853c:	f7fe fbfa 	bl	8006d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008544:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008546:	f107 0308 	add.w	r3, r7, #8
 800854a:	4619      	mov	r1, r3
 800854c:	480c      	ldr	r0, [pc, #48]	; (8008580 <MX_TIM2_Init+0x94>)
 800854e:	f004 fa1f 	bl	800c990 <HAL_TIM_ConfigClockSource>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008558:	f7fe fbec 	bl	8006d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800855c:	2300      	movs	r3, #0
 800855e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008560:	2300      	movs	r3, #0
 8008562:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008564:	463b      	mov	r3, r7
 8008566:	4619      	mov	r1, r3
 8008568:	4805      	ldr	r0, [pc, #20]	; (8008580 <MX_TIM2_Init+0x94>)
 800856a:	f004 fdf9 	bl	800d160 <HAL_TIMEx_MasterConfigSynchronization>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008574:	f7fe fbde 	bl	8006d34 <Error_Handler>
  }

}
 8008578:	bf00      	nop
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	2000164c 	.word	0x2000164c

08008584 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800858a:	f107 0308 	add.w	r3, r7, #8
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	609a      	str	r2, [r3, #8]
 8008596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008598:	463b      	mov	r3, r7
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80085a0:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <MX_TIM3_Init+0x94>)
 80085a2:	4a1e      	ldr	r2, [pc, #120]	; (800861c <MX_TIM3_Init+0x98>)
 80085a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 599;
 80085a6:	4b1c      	ldr	r3, [pc, #112]	; (8008618 <MX_TIM3_Init+0x94>)
 80085a8:	f240 2257 	movw	r2, #599	; 0x257
 80085ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80085ae:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <MX_TIM3_Init+0x94>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80085b4:	4b18      	ldr	r3, [pc, #96]	; (8008618 <MX_TIM3_Init+0x94>)
 80085b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80085ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80085bc:	4b16      	ldr	r3, [pc, #88]	; (8008618 <MX_TIM3_Init+0x94>)
 80085be:	2200      	movs	r2, #0
 80085c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <MX_TIM3_Init+0x94>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80085c8:	4813      	ldr	r0, [pc, #76]	; (8008618 <MX_TIM3_Init+0x94>)
 80085ca:	f003 ff2f 	bl	800c42c <HAL_TIM_Base_Init>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80085d4:	f7fe fbae 	bl	8006d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80085de:	f107 0308 	add.w	r3, r7, #8
 80085e2:	4619      	mov	r1, r3
 80085e4:	480c      	ldr	r0, [pc, #48]	; (8008618 <MX_TIM3_Init+0x94>)
 80085e6:	f004 f9d3 	bl	800c990 <HAL_TIM_ConfigClockSource>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80085f0:	f7fe fba0 	bl	8006d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085f4:	2300      	movs	r3, #0
 80085f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085fc:	463b      	mov	r3, r7
 80085fe:	4619      	mov	r1, r3
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <MX_TIM3_Init+0x94>)
 8008602:	f004 fdad 	bl	800d160 <HAL_TIMEx_MasterConfigSynchronization>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800860c:	f7fe fb92 	bl	8006d34 <Error_Handler>
  }

}
 8008610:	bf00      	nop
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200015cc 	.word	0x200015cc
 800861c:	40000400 	.word	0x40000400

08008620 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b086      	sub	sp, #24
 8008624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008626:	f107 0308 	add.w	r3, r7, #8
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008634:	463b      	mov	r3, r7
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 800863c:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <MX_TIM4_Init+0x94>)
 800863e:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <MX_TIM4_Init+0x98>)
 8008640:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8008642:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <MX_TIM4_Init+0x94>)
 8008644:	2204      	movs	r2, #4
 8008646:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008648:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <MX_TIM4_Init+0x94>)
 800864a:	2200      	movs	r2, #0
 800864c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5999;
 800864e:	4b19      	ldr	r3, [pc, #100]	; (80086b4 <MX_TIM4_Init+0x94>)
 8008650:	f241 726f 	movw	r2, #5999	; 0x176f
 8008654:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008656:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <MX_TIM4_Init+0x94>)
 8008658:	2200      	movs	r2, #0
 800865a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800865c:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <MX_TIM4_Init+0x94>)
 800865e:	2200      	movs	r2, #0
 8008660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008662:	4814      	ldr	r0, [pc, #80]	; (80086b4 <MX_TIM4_Init+0x94>)
 8008664:	f003 fee2 	bl	800c42c <HAL_TIM_Base_Init>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d001      	beq.n	8008672 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800866e:	f7fe fb61 	bl	8006d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008678:	f107 0308 	add.w	r3, r7, #8
 800867c:	4619      	mov	r1, r3
 800867e:	480d      	ldr	r0, [pc, #52]	; (80086b4 <MX_TIM4_Init+0x94>)
 8008680:	f004 f986 	bl	800c990 <HAL_TIM_ConfigClockSource>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800868a:	f7fe fb53 	bl	8006d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800868e:	2300      	movs	r3, #0
 8008690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008692:	2300      	movs	r3, #0
 8008694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008696:	463b      	mov	r3, r7
 8008698:	4619      	mov	r1, r3
 800869a:	4806      	ldr	r0, [pc, #24]	; (80086b4 <MX_TIM4_Init+0x94>)
 800869c:	f004 fd60 	bl	800d160 <HAL_TIMEx_MasterConfigSynchronization>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80086a6:	f7fe fb45 	bl	8006d34 <Error_Handler>
  }

}
 80086aa:	bf00      	nop
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	2000158c 	.word	0x2000158c
 80086b8:	40000800 	.word	0x40000800

080086bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b086      	sub	sp, #24
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4a34      	ldr	r2, [pc, #208]	; (800879c <HAL_TIM_Base_MspInit+0xe0>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d10e      	bne.n	80086ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80086ce:	2300      	movs	r3, #0
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	4b33      	ldr	r3, [pc, #204]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	4a32      	ldr	r2, [pc, #200]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 80086d8:	f043 0301 	orr.w	r3, r3, #1
 80086dc:	6453      	str	r3, [r2, #68]	; 0x44
 80086de:	4b30      	ldr	r3, [pc, #192]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80086ea:	e052      	b.n	8008792 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM2)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f4:	d116      	bne.n	8008724 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80086f6:	2300      	movs	r3, #0
 80086f8:	613b      	str	r3, [r7, #16]
 80086fa:	4b29      	ldr	r3, [pc, #164]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	4a28      	ldr	r2, [pc, #160]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008700:	f043 0301 	orr.w	r3, r3, #1
 8008704:	6413      	str	r3, [r2, #64]	; 0x40
 8008706:	4b26      	ldr	r3, [pc, #152]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8008712:	2200      	movs	r2, #0
 8008714:	2100      	movs	r1, #0
 8008716:	201c      	movs	r0, #28
 8008718:	f001 fd45 	bl	800a1a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800871c:	201c      	movs	r0, #28
 800871e:	f001 fd5e 	bl	800a1de <HAL_NVIC_EnableIRQ>
}
 8008722:	e036      	b.n	8008792 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM3)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1e      	ldr	r2, [pc, #120]	; (80087a4 <HAL_TIM_Base_MspInit+0xe8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d116      	bne.n	800875c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
 8008732:	4b1b      	ldr	r3, [pc, #108]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008736:	4a1a      	ldr	r2, [pc, #104]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008738:	f043 0302 	orr.w	r3, r3, #2
 800873c:	6413      	str	r3, [r2, #64]	; 0x40
 800873e:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800874a:	2200      	movs	r2, #0
 800874c:	2100      	movs	r1, #0
 800874e:	201d      	movs	r0, #29
 8008750:	f001 fd29 	bl	800a1a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008754:	201d      	movs	r0, #29
 8008756:	f001 fd42 	bl	800a1de <HAL_NVIC_EnableIRQ>
}
 800875a:	e01a      	b.n	8008792 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM4)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a11      	ldr	r2, [pc, #68]	; (80087a8 <HAL_TIM_Base_MspInit+0xec>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d115      	bne.n	8008792 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]
 800876a:	4b0d      	ldr	r3, [pc, #52]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 800876c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876e:	4a0c      	ldr	r2, [pc, #48]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008770:	f043 0304 	orr.w	r3, r3, #4
 8008774:	6413      	str	r3, [r2, #64]	; 0x40
 8008776:	4b0a      	ldr	r3, [pc, #40]	; (80087a0 <HAL_TIM_Base_MspInit+0xe4>)
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	f003 0304 	and.w	r3, r3, #4
 800877e:	60bb      	str	r3, [r7, #8]
 8008780:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8008782:	2200      	movs	r2, #0
 8008784:	2100      	movs	r1, #0
 8008786:	201e      	movs	r0, #30
 8008788:	f001 fd0d 	bl	800a1a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800878c:	201e      	movs	r0, #30
 800878e:	f001 fd26 	bl	800a1de <HAL_NVIC_EnableIRQ>
}
 8008792:	bf00      	nop
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	40010000 	.word	0x40010000
 80087a0:	40023800 	.word	0x40023800
 80087a4:	40000400 	.word	0x40000400
 80087a8:	40000800 	.word	0x40000800

080087ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b088      	sub	sp, #32
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	2200      	movs	r2, #0
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	605a      	str	r2, [r3, #4]
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	60da      	str	r2, [r3, #12]
 80087c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a12      	ldr	r2, [pc, #72]	; (8008814 <HAL_TIM_MspPostInit+0x68>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d11e      	bne.n	800880c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ce:	2300      	movs	r3, #0
 80087d0:	60bb      	str	r3, [r7, #8]
 80087d2:	4b11      	ldr	r3, [pc, #68]	; (8008818 <HAL_TIM_MspPostInit+0x6c>)
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	4a10      	ldr	r2, [pc, #64]	; (8008818 <HAL_TIM_MspPostInit+0x6c>)
 80087d8:	f043 0301 	orr.w	r3, r3, #1
 80087dc:	6313      	str	r3, [r2, #48]	; 0x30
 80087de:	4b0e      	ldr	r3, [pc, #56]	; (8008818 <HAL_TIM_MspPostInit+0x6c>)
 80087e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	60bb      	str	r3, [r7, #8]
 80087e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80087ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087f0:	2302      	movs	r3, #2
 80087f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087f8:	2303      	movs	r3, #3
 80087fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80087fc:	2301      	movs	r3, #1
 80087fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008800:	f107 030c 	add.w	r3, r7, #12
 8008804:	4619      	mov	r1, r3
 8008806:	4805      	ldr	r0, [pc, #20]	; (800881c <HAL_TIM_MspPostInit+0x70>)
 8008808:	f002 f892 	bl	800a930 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800880c:	bf00      	nop
 800880e:	3720      	adds	r7, #32
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	40010000 	.word	0x40010000
 8008818:	40023800 	.word	0x40023800
 800881c:	40020000 	.word	0x40020000

08008820 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8008824:	4b11      	ldr	r3, [pc, #68]	; (800886c <MX_USART1_UART_Init+0x4c>)
 8008826:	4a12      	ldr	r2, [pc, #72]	; (8008870 <MX_USART1_UART_Init+0x50>)
 8008828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800882a:	4b10      	ldr	r3, [pc, #64]	; (800886c <MX_USART1_UART_Init+0x4c>)
 800882c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008832:	4b0e      	ldr	r3, [pc, #56]	; (800886c <MX_USART1_UART_Init+0x4c>)
 8008834:	2200      	movs	r2, #0
 8008836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008838:	4b0c      	ldr	r3, [pc, #48]	; (800886c <MX_USART1_UART_Init+0x4c>)
 800883a:	2200      	movs	r2, #0
 800883c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <MX_USART1_UART_Init+0x4c>)
 8008840:	2200      	movs	r2, #0
 8008842:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008844:	4b09      	ldr	r3, [pc, #36]	; (800886c <MX_USART1_UART_Init+0x4c>)
 8008846:	220c      	movs	r2, #12
 8008848:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800884a:	4b08      	ldr	r3, [pc, #32]	; (800886c <MX_USART1_UART_Init+0x4c>)
 800884c:	2200      	movs	r2, #0
 800884e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008850:	4b06      	ldr	r3, [pc, #24]	; (800886c <MX_USART1_UART_Init+0x4c>)
 8008852:	2200      	movs	r2, #0
 8008854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008856:	4805      	ldr	r0, [pc, #20]	; (800886c <MX_USART1_UART_Init+0x4c>)
 8008858:	f004 fd29 	bl	800d2ae <HAL_UART_Init>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008862:	f7fe fa67 	bl	8006d34 <Error_Handler>
  }

}
 8008866:	bf00      	nop
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	200016cc 	.word	0x200016cc
 8008870:	40011000 	.word	0x40011000

08008874 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8008878:	4b11      	ldr	r3, [pc, #68]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <MX_USART3_UART_Init+0x50>)
 800887c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 8008880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008886:	4b0e      	ldr	r3, [pc, #56]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 8008888:	2200      	movs	r2, #0
 800888a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800888c:	4b0c      	ldr	r3, [pc, #48]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 800888e:	2200      	movs	r2, #0
 8008890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008892:	4b0b      	ldr	r3, [pc, #44]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 8008894:	2200      	movs	r2, #0
 8008896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8008898:	4b09      	ldr	r3, [pc, #36]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 800889a:	220c      	movs	r2, #12
 800889c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800889e:	4b08      	ldr	r3, [pc, #32]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 80088a0:	2200      	movs	r2, #0
 80088a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80088a4:	4b06      	ldr	r3, [pc, #24]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 80088a6:	2200      	movs	r2, #0
 80088a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80088aa:	4805      	ldr	r0, [pc, #20]	; (80088c0 <MX_USART3_UART_Init+0x4c>)
 80088ac:	f004 fcff 	bl	800d2ae <HAL_UART_Init>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80088b6:	f7fe fa3d 	bl	8006d34 <Error_Handler>
  }

}
 80088ba:	bf00      	nop
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000168c 	.word	0x2000168c
 80088c4:	40004800 	.word	0x40004800

080088c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b08c      	sub	sp, #48	; 0x30
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d0:	f107 031c 	add.w	r3, r7, #28
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	609a      	str	r2, [r3, #8]
 80088dc:	60da      	str	r2, [r3, #12]
 80088de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a3a      	ldr	r2, [pc, #232]	; (80089d0 <HAL_UART_MspInit+0x108>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d134      	bne.n	8008954 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
 80088ee:	4b39      	ldr	r3, [pc, #228]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 80088f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f2:	4a38      	ldr	r2, [pc, #224]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 80088f4:	f043 0310 	orr.w	r3, r3, #16
 80088f8:	6453      	str	r3, [r2, #68]	; 0x44
 80088fa:	4b36      	ldr	r3, [pc, #216]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 80088fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088fe:	f003 0310 	and.w	r3, r3, #16
 8008902:	61bb      	str	r3, [r7, #24]
 8008904:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008906:	2300      	movs	r3, #0
 8008908:	617b      	str	r3, [r7, #20]
 800890a:	4b32      	ldr	r3, [pc, #200]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 800890c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890e:	4a31      	ldr	r2, [pc, #196]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008910:	f043 0302 	orr.w	r3, r3, #2
 8008914:	6313      	str	r3, [r2, #48]	; 0x30
 8008916:	4b2f      	ldr	r3, [pc, #188]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	617b      	str	r3, [r7, #20]
 8008920:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008922:	23c0      	movs	r3, #192	; 0xc0
 8008924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008926:	2302      	movs	r3, #2
 8008928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892a:	2300      	movs	r3, #0
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800892e:	2303      	movs	r3, #3
 8008930:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008932:	2307      	movs	r3, #7
 8008934:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008936:	f107 031c 	add.w	r3, r7, #28
 800893a:	4619      	mov	r1, r3
 800893c:	4826      	ldr	r0, [pc, #152]	; (80089d8 <HAL_UART_MspInit+0x110>)
 800893e:	f001 fff7 	bl	800a930 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8008942:	2200      	movs	r2, #0
 8008944:	2101      	movs	r1, #1
 8008946:	2025      	movs	r0, #37	; 0x25
 8008948:	f001 fc2d 	bl	800a1a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800894c:	2025      	movs	r0, #37	; 0x25
 800894e:	f001 fc46 	bl	800a1de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8008952:	e039      	b.n	80089c8 <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a20      	ldr	r2, [pc, #128]	; (80089dc <HAL_UART_MspInit+0x114>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d134      	bne.n	80089c8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800895e:	2300      	movs	r3, #0
 8008960:	613b      	str	r3, [r7, #16]
 8008962:	4b1c      	ldr	r3, [pc, #112]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	4a1b      	ldr	r2, [pc, #108]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800896c:	6413      	str	r3, [r2, #64]	; 0x40
 800896e:	4b19      	ldr	r3, [pc, #100]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008972:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008976:	613b      	str	r3, [r7, #16]
 8008978:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
 800897e:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008982:	4a14      	ldr	r2, [pc, #80]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 8008984:	f043 0304 	orr.w	r3, r3, #4
 8008988:	6313      	str	r3, [r2, #48]	; 0x30
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <HAL_UART_MspInit+0x10c>)
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008996:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800899a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800899c:	2302      	movs	r3, #2
 800899e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a4:	2303      	movs	r3, #3
 80089a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80089a8:	2307      	movs	r3, #7
 80089aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089ac:	f107 031c 	add.w	r3, r7, #28
 80089b0:	4619      	mov	r1, r3
 80089b2:	480b      	ldr	r0, [pc, #44]	; (80089e0 <HAL_UART_MspInit+0x118>)
 80089b4:	f001 ffbc 	bl	800a930 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80089b8:	2200      	movs	r2, #0
 80089ba:	2101      	movs	r1, #1
 80089bc:	2027      	movs	r0, #39	; 0x27
 80089be:	f001 fbf2 	bl	800a1a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80089c2:	2027      	movs	r0, #39	; 0x27
 80089c4:	f001 fc0b 	bl	800a1de <HAL_NVIC_EnableIRQ>
}
 80089c8:	bf00      	nop
 80089ca:	3730      	adds	r7, #48	; 0x30
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	40011000 	.word	0x40011000
 80089d4:	40023800 	.word	0x40023800
 80089d8:	40020400 	.word	0x40020400
 80089dc:	40004800 	.word	0x40004800
 80089e0:	40020800 	.word	0x40020800

080089e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80089e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80089e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80089ea:	e003      	b.n	80089f4 <LoopCopyDataInit>

080089ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80089ec:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80089ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80089f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80089f2:	3104      	adds	r1, #4

080089f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80089f4:	480b      	ldr	r0, [pc, #44]	; (8008a24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80089f6:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80089f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80089fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80089fc:	d3f6      	bcc.n	80089ec <CopyDataInit>
  ldr  r2, =_sbss
 80089fe:	4a0b      	ldr	r2, [pc, #44]	; (8008a2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008a00:	e002      	b.n	8008a08 <LoopFillZerobss>

08008a02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008a02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008a04:	f842 3b04 	str.w	r3, [r2], #4

08008a08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008a08:	4b09      	ldr	r3, [pc, #36]	; (8008a30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008a0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008a0c:	d3f9      	bcc.n	8008a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008a0e:	f7ff fc9f 	bl	8008350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008a12:	f005 f8b1 	bl	800db78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a16:	f7fd fdf9 	bl	800660c <main>
  bx  lr    
 8008a1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008a1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008a20:	08010cc4 	.word	0x08010cc4
  ldr  r0, =_sdata
 8008a24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008a28:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 8008a2c:	20000234 	.word	0x20000234
  ldr  r3, = _ebss
 8008a30:	20001714 	.word	0x20001714

08008a34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a34:	e7fe      	b.n	8008a34 <ADC_IRQHandler>
	...

08008a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008a3c:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <HAL_Init+0x40>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a0d      	ldr	r2, [pc, #52]	; (8008a78 <HAL_Init+0x40>)
 8008a42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8008a48:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <HAL_Init+0x40>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a0a      	ldr	r2, [pc, #40]	; (8008a78 <HAL_Init+0x40>)
 8008a4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008a54:	4b08      	ldr	r3, [pc, #32]	; (8008a78 <HAL_Init+0x40>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a07      	ldr	r2, [pc, #28]	; (8008a78 <HAL_Init+0x40>)
 8008a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008a60:	2003      	movs	r0, #3
 8008a62:	f001 fb95 	bl	800a190 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008a66:	2000      	movs	r0, #0
 8008a68:	f000 f808 	bl	8008a7c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8008a6c:	f7fe fc12 	bl	8007294 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	40023c00 	.word	0x40023c00

08008a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008a84:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <HAL_InitTick+0x54>)
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <HAL_InitTick+0x58>)
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f001 fbad 	bl	800a1fa <HAL_SYSTICK_Config>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e00e      	b.n	8008ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b0f      	cmp	r3, #15
 8008aae:	d80a      	bhi.n	8008ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	6879      	ldr	r1, [r7, #4]
 8008ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab8:	f001 fb75 	bl	800a1a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008abc:	4a06      	ldr	r2, [pc, #24]	; (8008ad8 <HAL_InitTick+0x5c>)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	e000      	b.n	8008ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}
 8008ad0:	20000054 	.word	0x20000054
 8008ad4:	2000005c 	.word	0x2000005c
 8008ad8:	20000058 	.word	0x20000058

08008adc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <HAL_IncTick+0x1c>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4b05      	ldr	r3, [pc, #20]	; (8008afc <HAL_IncTick+0x20>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4413      	add	r3, r2
 8008aec:	4a03      	ldr	r2, [pc, #12]	; (8008afc <HAL_IncTick+0x20>)
 8008aee:	6013      	str	r3, [r2, #0]
}
 8008af0:	bf00      	nop
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bc80      	pop	{r7}
 8008af6:	4770      	bx	lr
 8008af8:	2000005c 	.word	0x2000005c
 8008afc:	2000170c 	.word	0x2000170c

08008b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	af00      	add	r7, sp, #0
  return uwTick;
 8008b04:	4b02      	ldr	r3, [pc, #8]	; (8008b10 <HAL_GetTick+0x10>)
 8008b06:	681b      	ldr	r3, [r3, #0]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bc80      	pop	{r7}
 8008b0e:	4770      	bx	lr
 8008b10:	2000170c 	.word	0x2000170c

08008b14 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008b1c:	f7ff fff0 	bl	8008b00 <HAL_GetTick>
 8008b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b2c:	d005      	beq.n	8008b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008b2e:	4b09      	ldr	r3, [pc, #36]	; (8008b54 <HAL_Delay+0x40>)
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	461a      	mov	r2, r3
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008b3a:	bf00      	nop
 8008b3c:	f7ff ffe0 	bl	8008b00 <HAL_GetTick>
 8008b40:	4602      	mov	r2, r0
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d8f7      	bhi.n	8008b3c <HAL_Delay+0x28>
  {
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	3710      	adds	r7, #16
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	2000005c 	.word	0x2000005c

08008b58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e033      	b.n	8008bd6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d109      	bne.n	8008b8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fc fd58 	bl	800562c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8e:	f003 0310 	and.w	r3, r3, #16
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d118      	bne.n	8008bc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008b9e:	f023 0302 	bic.w	r3, r3, #2
 8008ba2:	f043 0202 	orr.w	r2, r3, #2
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa1c 	bl	8008fe8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bba:	f023 0303 	bic.w	r3, r3, #3
 8008bbe:	f043 0201 	orr.w	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8008bc6:	e001      	b.n	8008bcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
	...

08008be0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d101      	bne.n	8008bfe <HAL_ADC_Start_DMA+0x1e>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	e0af      	b.n	8008d5e <HAL_ADC_Start_DMA+0x17e>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f003 0301 	and.w	r3, r3, #1
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d018      	beq.n	8008c46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	689a      	ldr	r2, [r3, #8]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f042 0201 	orr.w	r2, r2, #1
 8008c22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008c24:	4b50      	ldr	r3, [pc, #320]	; (8008d68 <HAL_ADC_Start_DMA+0x188>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a50      	ldr	r2, [pc, #320]	; (8008d6c <HAL_ADC_Start_DMA+0x18c>)
 8008c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c2e:	0c9a      	lsrs	r2, r3, #18
 8008c30:	4613      	mov	r3, r2
 8008c32:	005b      	lsls	r3, r3, #1
 8008c34:	4413      	add	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8008c38:	e002      	b.n	8008c40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f9      	bne.n	8008c3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	f003 0301 	and.w	r3, r3, #1
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	f040 8083 	bne.w	8008d5c <HAL_ADC_Start_DMA+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008c5e:	f023 0301 	bic.w	r3, r3, #1
 8008c62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d007      	beq.n	8008c88 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008c80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c94:	d106      	bne.n	8008ca4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9a:	f023 0206 	bic.w	r2, r3, #6
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	645a      	str	r2, [r3, #68]	; 0x44
 8008ca2:	e002      	b.n	8008caa <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb6:	4a2e      	ldr	r2, [pc, #184]	; (8008d70 <HAL_ADC_Start_DMA+0x190>)
 8008cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbe:	4a2d      	ldr	r2, [pc, #180]	; (8008d74 <HAL_ADC_Start_DMA+0x194>)
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc6:	4a2c      	ldr	r2, [pc, #176]	; (8008d78 <HAL_ADC_Start_DMA+0x198>)
 8008cc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008cd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	685a      	ldr	r2, [r3, #4]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008ce2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008cf2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	334c      	adds	r3, #76	; 0x4c
 8008cfe:	4619      	mov	r1, r3
 8008d00:	68ba      	ldr	r2, [r7, #8]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f001 fb34 	bl	800a370 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008d08:	4b1c      	ldr	r3, [pc, #112]	; (8008d7c <HAL_ADC_Start_DMA+0x19c>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f003 031f 	and.w	r3, r3, #31
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10f      	bne.n	8008d34 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d11c      	bne.n	8008d5c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689a      	ldr	r2, [r3, #8]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008d30:	609a      	str	r2, [r3, #8]
 8008d32:	e013      	b.n	8008d5c <HAL_ADC_Start_DMA+0x17c>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a11      	ldr	r2, [pc, #68]	; (8008d80 <HAL_ADC_Start_DMA+0x1a0>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d10e      	bne.n	8008d5c <HAL_ADC_Start_DMA+0x17c>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d107      	bne.n	8008d5c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689a      	ldr	r2, [r3, #8]
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008d5a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3718      	adds	r7, #24
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	20000054 	.word	0x20000054
 8008d6c:	431bde83 	.word	0x431bde83
 8008d70:	080091f1 	.word	0x080091f1
 8008d74:	080092ab 	.word	0x080092ab
 8008d78:	080092c7 	.word	0x080092c7
 8008d7c:	40012300 	.word	0x40012300
 8008d80:	40012000 	.word	0x40012000

08008d84 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bc80      	pop	{r7}
 8008d94:	4770      	bx	lr

08008d96 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bc80      	pop	{r7}
 8008da6:	4770      	bx	lr

08008da8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d101      	bne.n	8008dc4 <HAL_ADC_ConfigChannel+0x1c>
 8008dc0:	2302      	movs	r3, #2
 8008dc2:	e103      	b.n	8008fcc <HAL_ADC_ConfigChannel+0x224>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2b09      	cmp	r3, #9
 8008dd2:	d925      	bls.n	8008e20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68d9      	ldr	r1, [r3, #12]
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	461a      	mov	r2, r3
 8008de2:	4613      	mov	r3, r2
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	4413      	add	r3, r2
 8008de8:	3b1e      	subs	r3, #30
 8008dea:	2207      	movs	r2, #7
 8008dec:	fa02 f303 	lsl.w	r3, r2, r3
 8008df0:	43da      	mvns	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	400a      	ands	r2, r1
 8008df8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68d9      	ldr	r1, [r3, #12]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	689a      	ldr	r2, [r3, #8]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	4403      	add	r3, r0
 8008e12:	3b1e      	subs	r3, #30
 8008e14:	409a      	lsls	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	430a      	orrs	r2, r1
 8008e1c:	60da      	str	r2, [r3, #12]
 8008e1e:	e022      	b.n	8008e66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6919      	ldr	r1, [r3, #16]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	4613      	mov	r3, r2
 8008e30:	005b      	lsls	r3, r3, #1
 8008e32:	4413      	add	r3, r2
 8008e34:	2207      	movs	r2, #7
 8008e36:	fa02 f303 	lsl.w	r3, r2, r3
 8008e3a:	43da      	mvns	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	400a      	ands	r2, r1
 8008e42:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	6919      	ldr	r1, [r3, #16]
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	689a      	ldr	r2, [r3, #8]
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	4618      	mov	r0, r3
 8008e56:	4603      	mov	r3, r0
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4403      	add	r3, r0
 8008e5c:	409a      	lsls	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b06      	cmp	r3, #6
 8008e6c:	d824      	bhi.n	8008eb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	3b05      	subs	r3, #5
 8008e80:	221f      	movs	r2, #31
 8008e82:	fa02 f303 	lsl.w	r3, r2, r3
 8008e86:	43da      	mvns	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	400a      	ands	r2, r1
 8008e8e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	3b05      	subs	r3, #5
 8008eaa:	fa00 f203 	lsl.w	r2, r0, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8008eb6:	e04c      	b.n	8008f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b0c      	cmp	r3, #12
 8008ebe:	d824      	bhi.n	8008f0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	685a      	ldr	r2, [r3, #4]
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	3b23      	subs	r3, #35	; 0x23
 8008ed2:	221f      	movs	r2, #31
 8008ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed8:	43da      	mvns	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	400a      	ands	r2, r1
 8008ee0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	b29b      	uxth	r3, r3
 8008eee:	4618      	mov	r0, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	3b23      	subs	r3, #35	; 0x23
 8008efc:	fa00 f203 	lsl.w	r2, r0, r3
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	430a      	orrs	r2, r1
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
 8008f08:	e023      	b.n	8008f52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685a      	ldr	r2, [r3, #4]
 8008f14:	4613      	mov	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4413      	add	r3, r2
 8008f1a:	3b41      	subs	r3, #65	; 0x41
 8008f1c:	221f      	movs	r2, #31
 8008f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f22:	43da      	mvns	r2, r3
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	400a      	ands	r2, r1
 8008f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	4618      	mov	r0, r3
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4413      	add	r3, r2
 8008f44:	3b41      	subs	r3, #65	; 0x41
 8008f46:	fa00 f203 	lsl.w	r2, r0, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a20      	ldr	r2, [pc, #128]	; (8008fd8 <HAL_ADC_ConfigChannel+0x230>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d109      	bne.n	8008f70 <HAL_ADC_ConfigChannel+0x1c8>
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b12      	cmp	r3, #18
 8008f62:	d105      	bne.n	8008f70 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8008f64:	4b1d      	ldr	r3, [pc, #116]	; (8008fdc <HAL_ADC_ConfigChannel+0x234>)
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a1c      	ldr	r2, [pc, #112]	; (8008fdc <HAL_ADC_ConfigChannel+0x234>)
 8008f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008f6e:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a18      	ldr	r2, [pc, #96]	; (8008fd8 <HAL_ADC_ConfigChannel+0x230>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d123      	bne.n	8008fc2 <HAL_ADC_ConfigChannel+0x21a>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b10      	cmp	r3, #16
 8008f80:	d003      	beq.n	8008f8a <HAL_ADC_ConfigChannel+0x1e2>
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b11      	cmp	r3, #17
 8008f88:	d11b      	bne.n	8008fc2 <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8008f8a:	4b14      	ldr	r3, [pc, #80]	; (8008fdc <HAL_ADC_ConfigChannel+0x234>)
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	4a13      	ldr	r2, [pc, #76]	; (8008fdc <HAL_ADC_ConfigChannel+0x234>)
 8008f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f94:	6053      	str	r3, [r2, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b10      	cmp	r3, #16
 8008f9c:	d111      	bne.n	8008fc2 <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <HAL_ADC_ConfigChannel+0x238>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a10      	ldr	r2, [pc, #64]	; (8008fe4 <HAL_ADC_ConfigChannel+0x23c>)
 8008fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa8:	0c9a      	lsrs	r2, r3, #18
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8008fb4:	e002      	b.n	8008fbc <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1f9      	bne.n	8008fb6 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3714      	adds	r7, #20
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bc80      	pop	{r7}
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40012000 	.word	0x40012000
 8008fdc:	40012300 	.word	0x40012300
 8008fe0:	20000054 	.word	0x20000054
 8008fe4:	431bde83 	.word	0x431bde83

08008fe8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8008ff0:	4b7d      	ldr	r3, [pc, #500]	; (80091e8 <ADC_Init+0x200>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4a7c      	ldr	r2, [pc, #496]	; (80091e8 <ADC_Init+0x200>)
 8008ff6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008ffa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8008ffc:	4b7a      	ldr	r3, [pc, #488]	; (80091e8 <ADC_Init+0x200>)
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	4978      	ldr	r1, [pc, #480]	; (80091e8 <ADC_Init+0x200>)
 8009006:	4313      	orrs	r3, r2
 8009008:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	021a      	lsls	r2, r3, #8
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	430a      	orrs	r2, r1
 800902c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800903c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6859      	ldr	r1, [r3, #4]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689a      	ldr	r2, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	430a      	orrs	r2, r1
 800904e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800905e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6899      	ldr	r1, [r3, #8]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68da      	ldr	r2, [r3, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	430a      	orrs	r2, r1
 8009070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009076:	4a5d      	ldr	r2, [pc, #372]	; (80091ec <ADC_Init+0x204>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d022      	beq.n	80090c2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800908a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	6899      	ldr	r1, [r3, #8]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	430a      	orrs	r2, r1
 800909c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689a      	ldr	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80090ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6899      	ldr	r1, [r3, #8]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	e00f      	b.n	80090e2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	689a      	ldr	r2, [r3, #8]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80090d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80090e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	689a      	ldr	r2, [r3, #8]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f022 0202 	bic.w	r2, r2, #2
 80090f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6899      	ldr	r1, [r3, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	005a      	lsls	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d027      	beq.n	800915e <ADC_Init+0x176>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	685a      	ldr	r2, [r3, #4]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800911c:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800912c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	3b01      	subs	r3, #1
 8009134:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8009138:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	fa92 f2a2 	rbit	r2, r2
 8009140:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	fab2 f282 	clz	r2, r2
 8009148:	b2d2      	uxtb	r2, r2
 800914a:	fa03 f102 	lsl.w	r1, r3, r2
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	605a      	str	r2, [r3, #4]
 800915c:	e007      	b.n	800916e <ADC_Init+0x186>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	685a      	ldr	r2, [r3, #4]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800916c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800917c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	69db      	ldr	r3, [r3, #28]
 8009188:	3b01      	subs	r3, #1
 800918a:	051a      	lsls	r2, r3, #20
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	430a      	orrs	r2, r1
 8009192:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	689a      	ldr	r2, [r3, #8]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80091a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6899      	ldr	r1, [r3, #8]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ae:	025a      	lsls	r2, r3, #9
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	430a      	orrs	r2, r1
 80091b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6899      	ldr	r1, [r3, #8]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	029a      	lsls	r2, r3, #10
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	609a      	str	r2, [r3, #8]
}
 80091dc:	bf00      	nop
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bc80      	pop	{r7}
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40012300 	.word	0x40012300
 80091ec:	0f000001 	.word	0x0f000001

080091f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009206:	2b00      	cmp	r3, #0
 8009208:	d13c      	bne.n	8009284 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009220:	2b00      	cmp	r3, #0
 8009222:	d12b      	bne.n	800927c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009228:	2b00      	cmp	r3, #0
 800922a:	d127      	bne.n	800927c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009236:	2b00      	cmp	r3, #0
 8009238:	d006      	beq.n	8009248 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009244:	2b00      	cmp	r3, #0
 8009246:	d119      	bne.n	800927c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	685a      	ldr	r2, [r3, #4]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f022 0220 	bic.w	r2, r2, #32
 8009256:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009268:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009274:	f043 0201 	orr.w	r2, r3, #1
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800927c:	68f8      	ldr	r0, [r7, #12]
 800927e:	f7fd faa1 	bl	80067c4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009282:	e00e      	b.n	80092a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	f003 0310 	and.w	r3, r3, #16
 800928c:	2b00      	cmp	r3, #0
 800928e:	d003      	beq.n	8009298 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff fd80 	bl	8008d96 <HAL_ADC_ErrorCallback>
}
 8009296:	e004      	b.n	80092a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800929c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
}
 80092a2:	bf00      	nop
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b084      	sub	sp, #16
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff fd63 	bl	8008d84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80092be:	bf00      	nop
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b084      	sub	sp, #16
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	2240      	movs	r2, #64	; 0x40
 80092d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092de:	f043 0204 	orr.w	r2, r3, #4
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80092e6:	68f8      	ldr	r0, [r7, #12]
 80092e8:	f7ff fd55 	bl	8008d96 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80092ec:	bf00      	nop
 80092ee:	3710      	adds	r7, #16
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0ed      	b.n	80094e2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f7fc fa72 	bl	80057fc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f022 0202 	bic.w	r2, r2, #2
 8009326:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009328:	f7ff fbea 	bl	8008b00 <HAL_GetTick>
 800932c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800932e:	e012      	b.n	8009356 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009330:	f7ff fbe6 	bl	8008b00 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	2b0a      	cmp	r3, #10
 800933c:	d90b      	bls.n	8009356 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009342:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2205      	movs	r2, #5
 800934e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e0c5      	b.n	80094e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	f003 0302 	and.w	r3, r3, #2
 8009360:	2b00      	cmp	r3, #0
 8009362:	d1e5      	bne.n	8009330 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009374:	f7ff fbc4 	bl	8008b00 <HAL_GetTick>
 8009378:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800937a:	e012      	b.n	80093a2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800937c:	f7ff fbc0 	bl	8008b00 <HAL_GetTick>
 8009380:	4602      	mov	r2, r0
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	2b0a      	cmp	r3, #10
 8009388:	d90b      	bls.n	80093a2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2205      	movs	r2, #5
 800939a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	e09f      	b.n	80094e2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f003 0301 	and.w	r3, r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d0e5      	beq.n	800937c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	7e1b      	ldrb	r3, [r3, #24]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d108      	bne.n	80093ca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e007      	b.n	80093da <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	7e5b      	ldrb	r3, [r3, #25]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d108      	bne.n	80093f4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	e007      	b.n	8009404 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	681a      	ldr	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009402:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	7e9b      	ldrb	r3, [r3, #26]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d108      	bne.n	800941e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0220 	orr.w	r2, r2, #32
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	e007      	b.n	800942e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0220 	bic.w	r2, r2, #32
 800942c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7edb      	ldrb	r3, [r3, #27]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d108      	bne.n	8009448 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 0210 	bic.w	r2, r2, #16
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	e007      	b.n	8009458 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0210 	orr.w	r2, r2, #16
 8009456:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7f1b      	ldrb	r3, [r3, #28]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d108      	bne.n	8009472 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0208 	orr.w	r2, r2, #8
 800946e:	601a      	str	r2, [r3, #0]
 8009470:	e007      	b.n	8009482 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0208 	bic.w	r2, r2, #8
 8009480:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	7f5b      	ldrb	r3, [r3, #29]
 8009486:	2b01      	cmp	r3, #1
 8009488:	d108      	bne.n	800949c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f042 0204 	orr.w	r2, r2, #4
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	e007      	b.n	80094ac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0204 	bic.w	r2, r2, #4
 80094aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689a      	ldr	r2, [r3, #8]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	431a      	orrs	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	ea42 0103 	orr.w	r1, r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	1e5a      	subs	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2201      	movs	r2, #1
 80094dc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009502:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8009504:	7cfb      	ldrb	r3, [r7, #19]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d003      	beq.n	8009512 <HAL_CAN_ConfigFilter+0x26>
 800950a:	7cfb      	ldrb	r3, [r7, #19]
 800950c:	2b02      	cmp	r3, #2
 800950e:	f040 80be 	bne.w	800968e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009512:	4b65      	ldr	r3, [pc, #404]	; (80096a8 <HAL_CAN_ConfigFilter+0x1bc>)
 8009514:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009516:	697b      	ldr	r3, [r7, #20]
 8009518:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800951c:	f043 0201 	orr.w	r2, r3, #1
 8009520:	697b      	ldr	r3, [r7, #20]
 8009522:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800952c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	021b      	lsls	r3, r3, #8
 8009542:	431a      	orrs	r2, r3
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	f003 031f 	and.w	r3, r3, #31
 8009552:	2201      	movs	r2, #1
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	43db      	mvns	r3, r3
 8009564:	401a      	ands	r2, r3
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d123      	bne.n	80095bc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	43db      	mvns	r3, r3
 800957e:	401a      	ands	r2, r3
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009596:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	3248      	adds	r2, #72	; 0x48
 800959c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80095b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80095b2:	6979      	ldr	r1, [r7, #20]
 80095b4:	3348      	adds	r3, #72	; 0x48
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	440b      	add	r3, r1
 80095ba:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d122      	bne.n	800960a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	431a      	orrs	r2, r3
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80095e4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	3248      	adds	r2, #72	; 0x48
 80095ea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80095fe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009600:	6979      	ldr	r1, [r7, #20]
 8009602:	3348      	adds	r3, #72	; 0x48
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	440b      	add	r3, r1
 8009608:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	699b      	ldr	r3, [r3, #24]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d109      	bne.n	8009626 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	43db      	mvns	r3, r3
 800961c:	401a      	ands	r2, r3
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009624:	e007      	b.n	8009636 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	431a      	orrs	r2, r3
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	43db      	mvns	r3, r3
 8009648:	401a      	ands	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009650:	e007      	b.n	8009662 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	431a      	orrs	r2, r3
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6a1b      	ldr	r3, [r3, #32]
 8009666:	2b01      	cmp	r3, #1
 8009668:	d107      	bne.n	800967a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	431a      	orrs	r2, r3
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009680:	f023 0201 	bic.w	r2, r3, #1
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	e006      	b.n	800969c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
  }
}
 800969c:	4618      	mov	r0, r3
 800969e:	371c      	adds	r7, #28
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bc80      	pop	{r7}
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	40006400 	.word	0x40006400

080096ac <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d12e      	bne.n	800971e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f022 0201 	bic.w	r2, r2, #1
 80096d6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096d8:	f7ff fa12 	bl	8008b00 <HAL_GetTick>
 80096dc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80096de:	e012      	b.n	8009706 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096e0:	f7ff fa0e 	bl	8008b00 <HAL_GetTick>
 80096e4:	4602      	mov	r2, r0
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	1ad3      	subs	r3, r2, r3
 80096ea:	2b0a      	cmp	r3, #10
 80096ec:	d90b      	bls.n	8009706 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2205      	movs	r2, #5
 80096fe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e012      	b.n	800972c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	f003 0301 	and.w	r3, r3, #1
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1e5      	bne.n	80096e0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800971a:	2300      	movs	r3, #0
 800971c:	e006      	b.n	800972c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800972a:	2301      	movs	r3, #1
  }
}
 800972c:	4618      	mov	r0, r3
 800972e:	3710      	adds	r7, #16
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}

08009734 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8009734:	b480      	push	{r7}
 8009736:	b089      	sub	sp, #36	; 0x24
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009748:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009752:	7ffb      	ldrb	r3, [r7, #31]
 8009754:	2b01      	cmp	r3, #1
 8009756:	d003      	beq.n	8009760 <HAL_CAN_AddTxMessage+0x2c>
 8009758:	7ffb      	ldrb	r3, [r7, #31]
 800975a:	2b02      	cmp	r3, #2
 800975c:	f040 80b8 	bne.w	80098d0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009760:	69bb      	ldr	r3, [r7, #24]
 8009762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10a      	bne.n	8009780 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800977a:	2b00      	cmp	r3, #0
 800977c:	f000 80a0 	beq.w	80098c0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	0e1b      	lsrs	r3, r3, #24
 8009784:	f003 0303 	and.w	r3, r3, #3
 8009788:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d907      	bls.n	80097a0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009794:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	e09e      	b.n	80098de <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80097a0:	2201      	movs	r2, #1
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	409a      	lsls	r2, r3
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d10d      	bne.n	80097ce <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80097bc:	68f9      	ldr	r1, [r7, #12]
 80097be:	6809      	ldr	r1, [r1, #0]
 80097c0:	431a      	orrs	r2, r3
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	3318      	adds	r3, #24
 80097c6:	011b      	lsls	r3, r3, #4
 80097c8:	440b      	add	r3, r1
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	e00f      	b.n	80097ee <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80097d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80097de:	68f9      	ldr	r1, [r7, #12]
 80097e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80097e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	3318      	adds	r3, #24
 80097e8:	011b      	lsls	r3, r3, #4
 80097ea:	440b      	add	r3, r1
 80097ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6819      	ldr	r1, [r3, #0]
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	691a      	ldr	r2, [r3, #16]
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	3318      	adds	r3, #24
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	440b      	add	r3, r1
 80097fe:	3304      	adds	r3, #4
 8009800:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	7d1b      	ldrb	r3, [r3, #20]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d111      	bne.n	800982e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	3318      	adds	r3, #24
 8009812:	011b      	lsls	r3, r3, #4
 8009814:	4413      	add	r3, r2
 8009816:	3304      	adds	r3, #4
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	6811      	ldr	r1, [r2, #0]
 800981e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	3318      	adds	r3, #24
 8009826:	011b      	lsls	r3, r3, #4
 8009828:	440b      	add	r3, r1
 800982a:	3304      	adds	r3, #4
 800982c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3307      	adds	r3, #7
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	061a      	lsls	r2, r3, #24
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3306      	adds	r3, #6
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	041b      	lsls	r3, r3, #16
 800983e:	431a      	orrs	r2, r3
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3305      	adds	r3, #5
 8009844:	781b      	ldrb	r3, [r3, #0]
 8009846:	021b      	lsls	r3, r3, #8
 8009848:	4313      	orrs	r3, r2
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	3204      	adds	r2, #4
 800984e:	7812      	ldrb	r2, [r2, #0]
 8009850:	4610      	mov	r0, r2
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	6811      	ldr	r1, [r2, #0]
 8009856:	ea43 0200 	orr.w	r2, r3, r0
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	440b      	add	r3, r1
 8009860:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009864:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3303      	adds	r3, #3
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	061a      	lsls	r2, r3, #24
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	3302      	adds	r3, #2
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	041b      	lsls	r3, r3, #16
 8009876:	431a      	orrs	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3301      	adds	r3, #1
 800987c:	781b      	ldrb	r3, [r3, #0]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	4313      	orrs	r3, r2
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	7812      	ldrb	r2, [r2, #0]
 8009886:	4610      	mov	r0, r2
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	6811      	ldr	r1, [r2, #0]
 800988c:	ea43 0200 	orr.w	r2, r3, r0
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	011b      	lsls	r3, r3, #4
 8009894:	440b      	add	r3, r1
 8009896:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800989a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	3318      	adds	r3, #24
 80098a4:	011b      	lsls	r3, r3, #4
 80098a6:	4413      	add	r3, r2
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	6811      	ldr	r1, [r2, #0]
 80098ae:	f043 0201 	orr.w	r2, r3, #1
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	3318      	adds	r3, #24
 80098b6:	011b      	lsls	r3, r3, #4
 80098b8:	440b      	add	r3, r1
 80098ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80098bc:	2300      	movs	r3, #0
 80098be:	e00e      	b.n	80098de <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e006      	b.n	80098de <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
  }
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3724      	adds	r7, #36	; 0x24
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098fa:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80098fc:	7afb      	ldrb	r3, [r7, #11]
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d002      	beq.n	8009908 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	2b02      	cmp	r3, #2
 8009906:	d11d      	bne.n	8009944 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689b      	ldr	r3, [r3, #8]
 800990e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	3301      	adds	r3, #1
 800991a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3301      	adds	r3, #1
 800992e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d002      	beq.n	8009944 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	3301      	adds	r3, #1
 8009942:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009944:	68fb      	ldr	r3, [r7, #12]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	bc80      	pop	{r7}
 800994e:	4770      	bx	lr

08009950 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009950:	b480      	push	{r7}
 8009952:	b087      	sub	sp, #28
 8009954:	af00      	add	r7, sp, #0
 8009956:	60f8      	str	r0, [r7, #12]
 8009958:	60b9      	str	r1, [r7, #8]
 800995a:	607a      	str	r2, [r7, #4]
 800995c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009964:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009966:	7dfb      	ldrb	r3, [r7, #23]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d003      	beq.n	8009974 <HAL_CAN_GetRxMessage+0x24>
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	2b02      	cmp	r3, #2
 8009970:	f040 80f3 	bne.w	8009b5a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10e      	bne.n	8009998 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f003 0303 	and.w	r3, r3, #3
 8009984:	2b00      	cmp	r3, #0
 8009986:	d116      	bne.n	80099b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800998c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	e0e7      	b.n	8009b68 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d107      	bne.n	80099b6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e0d8      	b.n	8009b68 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	331b      	adds	r3, #27
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	4413      	add	r3, r2
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0204 	and.w	r2, r3, #4
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10c      	bne.n	80099ee <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	331b      	adds	r3, #27
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	4413      	add	r3, r2
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	0d5b      	lsrs	r3, r3, #21
 80099e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	e00b      	b.n	8009a06 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	331b      	adds	r3, #27
 80099f6:	011b      	lsls	r3, r3, #4
 80099f8:	4413      	add	r3, r2
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	331b      	adds	r3, #27
 8009a0e:	011b      	lsls	r3, r3, #4
 8009a10:	4413      	add	r3, r2
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0202 	and.w	r2, r3, #2
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	331b      	adds	r3, #27
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	4413      	add	r3, r2
 8009a28:	3304      	adds	r3, #4
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f003 020f 	and.w	r2, r3, #15
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	331b      	adds	r3, #27
 8009a3c:	011b      	lsls	r3, r3, #4
 8009a3e:	4413      	add	r3, r2
 8009a40:	3304      	adds	r3, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	0a1b      	lsrs	r3, r3, #8
 8009a46:	b2da      	uxtb	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	331b      	adds	r3, #27
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	4413      	add	r3, r2
 8009a58:	3304      	adds	r3, #4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	0c1b      	lsrs	r3, r3, #16
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681a      	ldr	r2, [r3, #0]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	011b      	lsls	r3, r3, #4
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	0a1a      	lsrs	r2, r3, #8
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	b2d2      	uxtb	r2, r2
 8009a92:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	0c1a      	lsrs	r2, r3, #16
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	011b      	lsls	r3, r3, #4
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	0e1a      	lsrs	r2, r3, #24
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	3303      	adds	r3, #3
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	011b      	lsls	r3, r3, #4
 8009ad0:	4413      	add	r3, r2
 8009ad2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	3304      	adds	r3, #4
 8009adc:	b2d2      	uxtb	r2, r2
 8009ade:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	011b      	lsls	r3, r3, #4
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	0a1a      	lsrs	r2, r3, #8
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	3305      	adds	r3, #5
 8009af6:	b2d2      	uxtb	r2, r2
 8009af8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	011b      	lsls	r3, r3, #4
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	0c1a      	lsrs	r2, r3, #16
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3306      	adds	r3, #6
 8009b10:	b2d2      	uxtb	r2, r2
 8009b12:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	0e1a      	lsrs	r2, r3, #24
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	3307      	adds	r3, #7
 8009b2a:	b2d2      	uxtb	r2, r2
 8009b2c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d108      	bne.n	8009b46 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0220 	orr.w	r2, r2, #32
 8009b42:	60da      	str	r2, [r3, #12]
 8009b44:	e007      	b.n	8009b56 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f042 0220 	orr.w	r2, r2, #32
 8009b54:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009b56:	2300      	movs	r3, #0
 8009b58:	e006      	b.n	8009b68 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
  }
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	371c      	adds	r7, #28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bc80      	pop	{r7}
 8009b70:	4770      	bx	lr

08009b72 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009b72:	b480      	push	{r7}
 8009b74:	b085      	sub	sp, #20
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b82:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d002      	beq.n	8009b90 <HAL_CAN_ActivateNotification+0x1e>
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d109      	bne.n	8009ba4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6959      	ldr	r1, [r3, #20]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	683a      	ldr	r2, [r7, #0]
 8009b9c:	430a      	orrs	r2, r1
 8009b9e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	e006      	b.n	8009bb2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ba8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009bb0:	2301      	movs	r3, #1
  }
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3714      	adds	r7, #20
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bc80      	pop	{r7}
 8009bba:	4770      	bx	lr

08009bbc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b08a      	sub	sp, #40	; 0x28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68db      	ldr	r3, [r3, #12]
 8009be6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009bf8:	6a3b      	ldr	r3, [r7, #32]
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d07c      	beq.n	8009cfc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d023      	beq.n	8009c54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2201      	movs	r2, #1
 8009c12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	f003 0302 	and.w	r3, r3, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f97d 	bl	8009f1e <HAL_CAN_TxMailbox0CompleteCallback>
 8009c24:	e016      	b.n	8009c54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	f003 0304 	and.w	r3, r3, #4
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c36:	627b      	str	r3, [r7, #36]	; 0x24
 8009c38:	e00c      	b.n	8009c54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	f003 0308 	and.w	r3, r3, #8
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c4c:	e002      	b.n	8009c54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f000 f980 	bl	8009f54 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d024      	beq.n	8009ca8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009c66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009c68:	69bb      	ldr	r3, [r7, #24]
 8009c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f95c 	bl	8009f30 <HAL_CAN_TxMailbox1CompleteCallback>
 8009c78:	e016      	b.n	8009ca8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d004      	beq.n	8009c8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8c:	e00c      	b.n	8009ca8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d004      	beq.n	8009ca2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca0:	e002      	b.n	8009ca8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 f95f 	bl	8009f66 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d024      	beq.n	8009cfc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009cba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d003      	beq.n	8009cce <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f93b 	bl	8009f42 <HAL_CAN_TxMailbox2CompleteCallback>
 8009ccc:	e016      	b.n	8009cfc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d004      	beq.n	8009ce2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cde:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce0:	e00c      	b.n	8009cfc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d004      	beq.n	8009cf6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf4:	e002      	b.n	8009cfc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f93e 	bl	8009f78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	f003 0308 	and.w	r3, r3, #8
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00c      	beq.n	8009d20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	f003 0310 	and.w	r3, r3, #16
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d007      	beq.n	8009d20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2210      	movs	r2, #16
 8009d1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f003 0308 	and.w	r3, r3, #8
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d006      	beq.n	8009d42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	2208      	movs	r2, #8
 8009d3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 f924 	bl	8009f8a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009d42:	6a3b      	ldr	r3, [r7, #32]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d009      	beq.n	8009d60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	f003 0303 	and.w	r3, r3, #3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d002      	beq.n	8009d60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fb ff4c 	bl	8005bf8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00c      	beq.n	8009d84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f003 0310 	and.w	r3, r3, #16
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d007      	beq.n	8009d84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2210      	movs	r2, #16
 8009d82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009d84:	6a3b      	ldr	r3, [r7, #32]
 8009d86:	f003 0320 	and.w	r3, r3, #32
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00b      	beq.n	8009da6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f003 0308 	and.w	r3, r3, #8
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d006      	beq.n	8009da6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2208      	movs	r2, #8
 8009d9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f904 	bl	8009fae <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	f003 0310 	and.w	r3, r3, #16
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d009      	beq.n	8009dc4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d002      	beq.n	8009dc4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f8ec 	bl	8009f9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009dc4:	6a3b      	ldr	r3, [r7, #32]
 8009dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009dce:	69fb      	ldr	r3, [r7, #28]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d006      	beq.n	8009de6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2210      	movs	r2, #16
 8009dde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f8ed 	bl	8009fc0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d00b      	beq.n	8009e08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	f003 0308 	and.w	r3, r3, #8
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d006      	beq.n	8009e08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2208      	movs	r2, #8
 8009e00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 f8e5 	bl	8009fd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009e08:	6a3b      	ldr	r3, [r7, #32]
 8009e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d075      	beq.n	8009efe <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d06c      	beq.n	8009ef6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d008      	beq.n	8009e38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d003      	beq.n	8009e38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	f043 0301 	orr.w	r3, r3, #1
 8009e36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d008      	beq.n	8009e54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d003      	beq.n	8009e54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4e:	f043 0302 	orr.w	r3, r3, #2
 8009e52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d008      	beq.n	8009e70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	f043 0304 	orr.w	r3, r3, #4
 8009e6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009e70:	6a3b      	ldr	r3, [r7, #32]
 8009e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d03d      	beq.n	8009ef6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d038      	beq.n	8009ef6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009e8a:	2b30      	cmp	r3, #48	; 0x30
 8009e8c:	d017      	beq.n	8009ebe <HAL_CAN_IRQHandler+0x302>
 8009e8e:	2b30      	cmp	r3, #48	; 0x30
 8009e90:	d804      	bhi.n	8009e9c <HAL_CAN_IRQHandler+0x2e0>
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d009      	beq.n	8009eaa <HAL_CAN_IRQHandler+0x2ee>
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	d00c      	beq.n	8009eb4 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009e9a:	e024      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009e9c:	2b50      	cmp	r3, #80	; 0x50
 8009e9e:	d018      	beq.n	8009ed2 <HAL_CAN_IRQHandler+0x316>
 8009ea0:	2b60      	cmp	r3, #96	; 0x60
 8009ea2:	d01b      	beq.n	8009edc <HAL_CAN_IRQHandler+0x320>
 8009ea4:	2b40      	cmp	r3, #64	; 0x40
 8009ea6:	d00f      	beq.n	8009ec8 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009ea8:	e01d      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	f043 0308 	orr.w	r3, r3, #8
 8009eb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009eb2:	e018      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	f043 0310 	orr.w	r3, r3, #16
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ebc:	e013      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	f043 0320 	orr.w	r3, r3, #32
 8009ec4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ec6:	e00e      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ece:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ed0:	e009      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009eda:	e004      	b.n	8009ee6 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ee2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ee4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	699a      	ldr	r2, [r3, #24]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009ef4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2204      	movs	r2, #4
 8009efc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d008      	beq.n	8009f16 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f867 	bl	8009fe4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009f16:	bf00      	nop
 8009f18:	3728      	adds	r7, #40	; 0x28
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8009f26:	bf00      	nop
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr

08009f30 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bc80      	pop	{r7}
 8009f40:	4770      	bx	lr

08009f42 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009f4a:	bf00      	nop
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bc80      	pop	{r7}
 8009f52:	4770      	bx	lr

08009f54 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009f5c:	bf00      	nop
 8009f5e:	370c      	adds	r7, #12
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bc80      	pop	{r7}
 8009f64:	4770      	bx	lr

08009f66 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr

08009f78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bc80      	pop	{r7}
 8009f88:	4770      	bx	lr

08009f8a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009f8a:	b480      	push	{r7}
 8009f8c:	b083      	sub	sp, #12
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009f92:	bf00      	nop
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bc80      	pop	{r7}
 8009f9a:	4770      	bx	lr

08009f9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009fa4:	bf00      	nop
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bc80      	pop	{r7}
 8009fac:	4770      	bx	lr

08009fae <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009fae:	b480      	push	{r7}
 8009fb0:	b083      	sub	sp, #12
 8009fb2:	af00      	add	r7, sp, #0
 8009fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009fb6:	bf00      	nop
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bc80      	pop	{r7}
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009fc8:	bf00      	nop
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bc80      	pop	{r7}
 8009fd0:	4770      	bx	lr

08009fd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009fda:	bf00      	nop
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bc80      	pop	{r7}
 8009fe2:	4770      	bx	lr

08009fe4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bc80      	pop	{r7}
 8009ff4:	4770      	bx	lr
	...

08009ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f003 0307 	and.w	r3, r3, #7
 800a006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a008:	4b0c      	ldr	r3, [pc, #48]	; (800a03c <__NVIC_SetPriorityGrouping+0x44>)
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a00e:	68ba      	ldr	r2, [r7, #8]
 800a010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a014:	4013      	ands	r3, r2
 800a016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a02a:	4a04      	ldr	r2, [pc, #16]	; (800a03c <__NVIC_SetPriorityGrouping+0x44>)
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	60d3      	str	r3, [r2, #12]
}
 800a030:	bf00      	nop
 800a032:	3714      	adds	r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	e000ed00 	.word	0xe000ed00

0800a040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a040:	b480      	push	{r7}
 800a042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a044:	4b04      	ldr	r3, [pc, #16]	; (800a058 <__NVIC_GetPriorityGrouping+0x18>)
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	0a1b      	lsrs	r3, r3, #8
 800a04a:	f003 0307 	and.w	r3, r3, #7
}
 800a04e:	4618      	mov	r0, r3
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	e000ed00 	.word	0xe000ed00

0800a05c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	db0b      	blt.n	800a086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	f003 021f 	and.w	r2, r3, #31
 800a074:	4906      	ldr	r1, [pc, #24]	; (800a090 <__NVIC_EnableIRQ+0x34>)
 800a076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a07a:	095b      	lsrs	r3, r3, #5
 800a07c:	2001      	movs	r0, #1
 800a07e:	fa00 f202 	lsl.w	r2, r0, r2
 800a082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a086:	bf00      	nop
 800a088:	370c      	adds	r7, #12
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bc80      	pop	{r7}
 800a08e:	4770      	bx	lr
 800a090:	e000e100 	.word	0xe000e100

0800a094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	6039      	str	r1, [r7, #0]
 800a09e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	db0a      	blt.n	800a0be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	b2da      	uxtb	r2, r3
 800a0ac:	490c      	ldr	r1, [pc, #48]	; (800a0e0 <__NVIC_SetPriority+0x4c>)
 800a0ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0b2:	0112      	lsls	r2, r2, #4
 800a0b4:	b2d2      	uxtb	r2, r2
 800a0b6:	440b      	add	r3, r1
 800a0b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a0bc:	e00a      	b.n	800a0d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	4908      	ldr	r1, [pc, #32]	; (800a0e4 <__NVIC_SetPriority+0x50>)
 800a0c4:	79fb      	ldrb	r3, [r7, #7]
 800a0c6:	f003 030f 	and.w	r3, r3, #15
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	0112      	lsls	r2, r2, #4
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	761a      	strb	r2, [r3, #24]
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bc80      	pop	{r7}
 800a0dc:	4770      	bx	lr
 800a0de:	bf00      	nop
 800a0e0:	e000e100 	.word	0xe000e100
 800a0e4:	e000ed00 	.word	0xe000ed00

0800a0e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b089      	sub	sp, #36	; 0x24
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	f1c3 0307 	rsb	r3, r3, #7
 800a102:	2b04      	cmp	r3, #4
 800a104:	bf28      	it	cs
 800a106:	2304      	movcs	r3, #4
 800a108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a10a:	69fb      	ldr	r3, [r7, #28]
 800a10c:	3304      	adds	r3, #4
 800a10e:	2b06      	cmp	r3, #6
 800a110:	d902      	bls.n	800a118 <NVIC_EncodePriority+0x30>
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	3b03      	subs	r3, #3
 800a116:	e000      	b.n	800a11a <NVIC_EncodePriority+0x32>
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a11c:	f04f 32ff 	mov.w	r2, #4294967295
 800a120:	69bb      	ldr	r3, [r7, #24]
 800a122:	fa02 f303 	lsl.w	r3, r2, r3
 800a126:	43da      	mvns	r2, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	401a      	ands	r2, r3
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a130:	f04f 31ff 	mov.w	r1, #4294967295
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	fa01 f303 	lsl.w	r3, r1, r3
 800a13a:	43d9      	mvns	r1, r3
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a140:	4313      	orrs	r3, r2
         );
}
 800a142:	4618      	mov	r0, r3
 800a144:	3724      	adds	r7, #36	; 0x24
 800a146:	46bd      	mov	sp, r7
 800a148:	bc80      	pop	{r7}
 800a14a:	4770      	bx	lr

0800a14c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3b01      	subs	r3, #1
 800a158:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a15c:	d301      	bcc.n	800a162 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a15e:	2301      	movs	r3, #1
 800a160:	e00f      	b.n	800a182 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a162:	4a0a      	ldr	r2, [pc, #40]	; (800a18c <SysTick_Config+0x40>)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3b01      	subs	r3, #1
 800a168:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a16a:	210f      	movs	r1, #15
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	f7ff ff90 	bl	800a094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a174:	4b05      	ldr	r3, [pc, #20]	; (800a18c <SysTick_Config+0x40>)
 800a176:	2200      	movs	r2, #0
 800a178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a17a:	4b04      	ldr	r3, [pc, #16]	; (800a18c <SysTick_Config+0x40>)
 800a17c:	2207      	movs	r2, #7
 800a17e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	e000e010 	.word	0xe000e010

0800a190 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f7ff ff2d 	bl	8009ff8 <__NVIC_SetPriorityGrouping>
}
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a1b8:	f7ff ff42 	bl	800a040 <__NVIC_GetPriorityGrouping>
 800a1bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	68b9      	ldr	r1, [r7, #8]
 800a1c2:	6978      	ldr	r0, [r7, #20]
 800a1c4:	f7ff ff90 	bl	800a0e8 <NVIC_EncodePriority>
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f7ff ff5f 	bl	800a094 <__NVIC_SetPriority>
}
 800a1d6:	bf00      	nop
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a1e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff ff35 	bl	800a05c <__NVIC_EnableIRQ>
}
 800a1f2:	bf00      	nop
 800a1f4:	3708      	adds	r7, #8
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	bd80      	pop	{r7, pc}

0800a1fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a1fa:	b580      	push	{r7, lr}
 800a1fc:	b082      	sub	sp, #8
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f7ff ffa2 	bl	800a14c <SysTick_Config>
 800a208:	4603      	mov	r3, r0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
	...

0800a214 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b086      	sub	sp, #24
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a220:	f7fe fc6e 	bl	8008b00 <HAL_GetTick>
 800a224:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e099      	b.n	800a364 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2202      	movs	r2, #2
 800a23c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0201 	bic.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a250:	e00f      	b.n	800a272 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a252:	f7fe fc55 	bl	8008b00 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	2b05      	cmp	r3, #5
 800a25e:	d908      	bls.n	800a272 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2220      	movs	r2, #32
 800a264:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2203      	movs	r2, #3
 800a26a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a26e:	2303      	movs	r3, #3
 800a270:	e078      	b.n	800a364 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1e8      	bne.n	800a252 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a288:	697a      	ldr	r2, [r7, #20]
 800a28a:	4b38      	ldr	r3, [pc, #224]	; (800a36c <HAL_DMA_Init+0x158>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685a      	ldr	r2, [r3, #4]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a29e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	691b      	ldr	r3, [r3, #16]
 800a2a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a2aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	699b      	ldr	r3, [r3, #24]
 800a2b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a2b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d107      	bne.n	800a2dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	695b      	ldr	r3, [r3, #20]
 800a2ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	f023 0307 	bic.w	r3, r3, #7
 800a2f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a302:	2b04      	cmp	r3, #4
 800a304:	d117      	bne.n	800a336 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00e      	beq.n	800a336 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 fa8f 	bl	800a83c <DMA_CheckFifoParam>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2240      	movs	r2, #64	; 0x40
 800a328:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a332:	2301      	movs	r3, #1
 800a334:	e016      	b.n	800a364 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fa48 	bl	800a7d4 <DMA_CalcBaseAndBitshift>
 800a344:	4603      	mov	r3, r0
 800a346:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a34c:	223f      	movs	r2, #63	; 0x3f
 800a34e:	409a      	lsls	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2200      	movs	r2, #0
 800a358:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3718      	adds	r7, #24
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	f010803f 	.word	0xf010803f

0800a370 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b086      	sub	sp, #24
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a386:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <HAL_DMA_Start_IT+0x26>
 800a392:	2302      	movs	r3, #2
 800a394:	e040      	b.n	800a418 <HAL_DMA_Start_IT+0xa8>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b01      	cmp	r3, #1
 800a3a8:	d12f      	bne.n	800a40a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2202      	movs	r2, #2
 800a3ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f9da 	bl	800a778 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c8:	223f      	movs	r2, #63	; 0x3f
 800a3ca:	409a      	lsls	r2, r3
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0216 	orr.w	r2, r2, #22
 800a3de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d007      	beq.n	800a3f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681a      	ldr	r2, [r3, #0]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f042 0208 	orr.w	r2, r2, #8
 800a3f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	681a      	ldr	r2, [r3, #0]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f042 0201 	orr.w	r2, r2, #1
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e005      	b.n	800a416 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a412:	2302      	movs	r3, #2
 800a414:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a42e:	b2db      	uxtb	r3, r3
 800a430:	2b02      	cmp	r3, #2
 800a432:	d004      	beq.n	800a43e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2280      	movs	r2, #128	; 0x80
 800a438:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e00c      	b.n	800a458 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2205      	movs	r2, #5
 800a442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0201 	bic.w	r2, r2, #1
 800a454:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bc80      	pop	{r7}
 800a460:	4770      	bx	lr
	...

0800a464 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b086      	sub	sp, #24
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a470:	4b92      	ldr	r3, [pc, #584]	; (800a6bc <HAL_DMA_IRQHandler+0x258>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a92      	ldr	r2, [pc, #584]	; (800a6c0 <HAL_DMA_IRQHandler+0x25c>)
 800a476:	fba2 2303 	umull	r2, r3, r2, r3
 800a47a:	0a9b      	lsrs	r3, r3, #10
 800a47c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a482:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a48e:	2208      	movs	r2, #8
 800a490:	409a      	lsls	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	4013      	ands	r3, r2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d01a      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0304 	and.w	r3, r3, #4
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d013      	beq.n	800a4d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f022 0204 	bic.w	r2, r2, #4
 800a4b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4bc:	2208      	movs	r2, #8
 800a4be:	409a      	lsls	r2, r3
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c8:	f043 0201 	orr.w	r2, r3, #1
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	409a      	lsls	r2, r3
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4013      	ands	r3, r2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d012      	beq.n	800a506 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	409a      	lsls	r2, r3
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fe:	f043 0202 	orr.w	r2, r3, #2
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a50a:	2204      	movs	r2, #4
 800a50c:	409a      	lsls	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	4013      	ands	r3, r2
 800a512:	2b00      	cmp	r3, #0
 800a514:	d012      	beq.n	800a53c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f003 0302 	and.w	r3, r3, #2
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00b      	beq.n	800a53c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a528:	2204      	movs	r2, #4
 800a52a:	409a      	lsls	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	f043 0204 	orr.w	r2, r3, #4
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a540:	2210      	movs	r2, #16
 800a542:	409a      	lsls	r2, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	4013      	ands	r3, r2
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d043      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 0308 	and.w	r3, r3, #8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d03c      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a55e:	2210      	movs	r2, #16
 800a560:	409a      	lsls	r2, r3
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d018      	beq.n	800a5a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d108      	bne.n	800a594 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	2b00      	cmp	r3, #0
 800a588:	d024      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	4798      	blx	r3
 800a592:	e01f      	b.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d01b      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
 800a5a4:	e016      	b.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d107      	bne.n	800a5c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f022 0208 	bic.w	r2, r2, #8
 800a5c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d8:	2220      	movs	r2, #32
 800a5da:	409a      	lsls	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 808e 	beq.w	800a702 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 0310 	and.w	r3, r3, #16
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 8086 	beq.w	800a702 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5fa:	2220      	movs	r2, #32
 800a5fc:	409a      	lsls	r2, r3
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b05      	cmp	r3, #5
 800a60c:	d136      	bne.n	800a67c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f022 0216 	bic.w	r2, r2, #22
 800a61c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	695a      	ldr	r2, [r3, #20]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a62c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a632:	2b00      	cmp	r3, #0
 800a634:	d103      	bne.n	800a63e <HAL_DMA_IRQHandler+0x1da>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d007      	beq.n	800a64e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0208 	bic.w	r2, r2, #8
 800a64c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a652:	223f      	movs	r2, #63	; 0x3f
 800a654:	409a      	lsls	r2, r3
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2200      	movs	r2, #0
 800a65e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2201      	movs	r2, #1
 800a666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d07d      	beq.n	800a76e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	4798      	blx	r3
        }
        return;
 800a67a:	e078      	b.n	800a76e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01c      	beq.n	800a6c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a694:	2b00      	cmp	r3, #0
 800a696:	d108      	bne.n	800a6aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d030      	beq.n	800a702 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	4798      	blx	r3
 800a6a8:	e02b      	b.n	800a702 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d027      	beq.n	800a702 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	4798      	blx	r3
 800a6ba:	e022      	b.n	800a702 <HAL_DMA_IRQHandler+0x29e>
 800a6bc:	20000054 	.word	0x20000054
 800a6c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10f      	bne.n	800a6f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	681a      	ldr	r2, [r3, #0]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f022 0210 	bic.w	r2, r2, #16
 800a6e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d003      	beq.n	800a702 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a706:	2b00      	cmp	r3, #0
 800a708:	d032      	beq.n	800a770 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d022      	beq.n	800a75c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2205      	movs	r2, #5
 800a71a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f022 0201 	bic.w	r2, r2, #1
 800a72c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	3301      	adds	r3, #1
 800a732:	60bb      	str	r3, [r7, #8]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	429a      	cmp	r2, r3
 800a738:	d307      	bcc.n	800a74a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1f2      	bne.n	800a72e <HAL_DMA_IRQHandler+0x2ca>
 800a748:	e000      	b.n	800a74c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a74a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d005      	beq.n	800a770 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	4798      	blx	r3
 800a76c:	e000      	b.n	800a770 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a76e:	bf00      	nop
    }
  }
}
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop

0800a778 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
 800a784:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681a      	ldr	r2, [r3, #0]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a794:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	683a      	ldr	r2, [r7, #0]
 800a79c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2b40      	cmp	r3, #64	; 0x40
 800a7a4:	d108      	bne.n	800a7b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	68ba      	ldr	r2, [r7, #8]
 800a7b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a7b6:	e007      	b.n	800a7c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68ba      	ldr	r2, [r7, #8]
 800a7be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	60da      	str	r2, [r3, #12]
}
 800a7c8:	bf00      	nop
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc80      	pop	{r7}
 800a7d0:	4770      	bx	lr
	...

0800a7d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	b2db      	uxtb	r3, r3
 800a7e2:	3b10      	subs	r3, #16
 800a7e4:	4a13      	ldr	r2, [pc, #76]	; (800a834 <DMA_CalcBaseAndBitshift+0x60>)
 800a7e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a7ea:	091b      	lsrs	r3, r3, #4
 800a7ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7ee:	4a12      	ldr	r2, [pc, #72]	; (800a838 <DMA_CalcBaseAndBitshift+0x64>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4413      	add	r3, r2
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b03      	cmp	r3, #3
 800a800:	d909      	bls.n	800a816 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	1d1a      	adds	r2, r3, #4
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	659a      	str	r2, [r3, #88]	; 0x58
 800a814:	e007      	b.n	800a826 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a81e:	f023 0303 	bic.w	r3, r3, #3
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3714      	adds	r7, #20
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr
 800a834:	aaaaaaab 	.word	0xaaaaaaab
 800a838:	08010a24 	.word	0x08010a24

0800a83c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b085      	sub	sp, #20
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	699b      	ldr	r3, [r3, #24]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d11f      	bne.n	800a896 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b03      	cmp	r3, #3
 800a85a:	d855      	bhi.n	800a908 <DMA_CheckFifoParam+0xcc>
 800a85c:	a201      	add	r2, pc, #4	; (adr r2, 800a864 <DMA_CheckFifoParam+0x28>)
 800a85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a862:	bf00      	nop
 800a864:	0800a875 	.word	0x0800a875
 800a868:	0800a887 	.word	0x0800a887
 800a86c:	0800a875 	.word	0x0800a875
 800a870:	0800a909 	.word	0x0800a909
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d045      	beq.n	800a90c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a884:	e042      	b.n	800a90c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a88e:	d13f      	bne.n	800a910 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a894:	e03c      	b.n	800a910 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a89e:	d121      	bne.n	800a8e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b03      	cmp	r3, #3
 800a8a4:	d836      	bhi.n	800a914 <DMA_CheckFifoParam+0xd8>
 800a8a6:	a201      	add	r2, pc, #4	; (adr r2, 800a8ac <DMA_CheckFifoParam+0x70>)
 800a8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ac:	0800a8bd 	.word	0x0800a8bd
 800a8b0:	0800a8c3 	.word	0x0800a8c3
 800a8b4:	0800a8bd 	.word	0x0800a8bd
 800a8b8:	0800a8d5 	.word	0x0800a8d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c0:	e02f      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d024      	beq.n	800a918 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8d2:	e021      	b.n	800a918 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8dc:	d11e      	bne.n	800a91c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a8e2:	e01b      	b.n	800a91c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	d902      	bls.n	800a8f0 <DMA_CheckFifoParam+0xb4>
 800a8ea:	2b03      	cmp	r3, #3
 800a8ec:	d003      	beq.n	800a8f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a8ee:	e018      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f4:	e015      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00e      	beq.n	800a920 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	73fb      	strb	r3, [r7, #15]
      break;
 800a906:	e00b      	b.n	800a920 <DMA_CheckFifoParam+0xe4>
      break;
 800a908:	bf00      	nop
 800a90a:	e00a      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      break;
 800a90c:	bf00      	nop
 800a90e:	e008      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      break;
 800a910:	bf00      	nop
 800a912:	e006      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      break;
 800a914:	bf00      	nop
 800a916:	e004      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      break;
 800a918:	bf00      	nop
 800a91a:	e002      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      break;   
 800a91c:	bf00      	nop
 800a91e:	e000      	b.n	800a922 <DMA_CheckFifoParam+0xe6>
      break;
 800a920:	bf00      	nop
    }
  } 
  
  return status; 
 800a922:	7bfb      	ldrb	r3, [r7, #15]
}
 800a924:	4618      	mov	r0, r3
 800a926:	3714      	adds	r7, #20
 800a928:	46bd      	mov	sp, r7
 800a92a:	bc80      	pop	{r7}
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop

0800a930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a93a:	2300      	movs	r3, #0
 800a93c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a93e:	e16f      	b.n	800ac20 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	2101      	movs	r1, #1
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	fa01 f303 	lsl.w	r3, r1, r3
 800a94c:	4013      	ands	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	f000 8161 	beq.w	800ac1a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d00b      	beq.n	800a978 <HAL_GPIO_Init+0x48>
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	2b02      	cmp	r3, #2
 800a966:	d007      	beq.n	800a978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a96c:	2b11      	cmp	r3, #17
 800a96e:	d003      	beq.n	800a978 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	2b12      	cmp	r3, #18
 800a976:	d130      	bne.n	800a9da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	005b      	lsls	r3, r3, #1
 800a982:	2203      	movs	r2, #3
 800a984:	fa02 f303 	lsl.w	r3, r2, r3
 800a988:	43db      	mvns	r3, r3
 800a98a:	693a      	ldr	r2, [r7, #16]
 800a98c:	4013      	ands	r3, r2
 800a98e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	68da      	ldr	r2, [r3, #12]
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	005b      	lsls	r3, r3, #1
 800a998:	fa02 f303 	lsl.w	r3, r2, r3
 800a99c:	693a      	ldr	r2, [r7, #16]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b6:	43db      	mvns	r3, r3
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	4013      	ands	r3, r2
 800a9bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	091b      	lsrs	r3, r3, #4
 800a9c4:	f003 0201 	and.w	r2, r3, #1
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ce:	693a      	ldr	r2, [r7, #16]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	693a      	ldr	r2, [r7, #16]
 800a9d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	2203      	movs	r2, #3
 800a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ea:	43db      	mvns	r3, r3
 800a9ec:	693a      	ldr	r2, [r7, #16]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	689a      	ldr	r2, [r3, #8]
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	005b      	lsls	r3, r3, #1
 800a9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a9fe:	693a      	ldr	r2, [r7, #16]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d003      	beq.n	800aa1a <HAL_GPIO_Init+0xea>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	2b12      	cmp	r3, #18
 800aa18:	d123      	bne.n	800aa62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	08da      	lsrs	r2, r3, #3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	3208      	adds	r2, #8
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f003 0307 	and.w	r3, r3, #7
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	220f      	movs	r2, #15
 800aa32:	fa02 f303 	lsl.w	r3, r2, r3
 800aa36:	43db      	mvns	r3, r3
 800aa38:	693a      	ldr	r2, [r7, #16]
 800aa3a:	4013      	ands	r3, r2
 800aa3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	691a      	ldr	r2, [r3, #16]
 800aa42:	697b      	ldr	r3, [r7, #20]
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	08da      	lsrs	r2, r3, #3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3208      	adds	r2, #8
 800aa5c:	6939      	ldr	r1, [r7, #16]
 800aa5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	2203      	movs	r2, #3
 800aa6e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa72:	43db      	mvns	r3, r3
 800aa74:	693a      	ldr	r2, [r7, #16]
 800aa76:	4013      	ands	r3, r2
 800aa78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f003 0203 	and.w	r2, r3, #3
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	005b      	lsls	r3, r3, #1
 800aa86:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8a:	693a      	ldr	r2, [r7, #16]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 80bb 	beq.w	800ac1a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	60bb      	str	r3, [r7, #8]
 800aaa8:	4b64      	ldr	r3, [pc, #400]	; (800ac3c <HAL_GPIO_Init+0x30c>)
 800aaaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaac:	4a63      	ldr	r2, [pc, #396]	; (800ac3c <HAL_GPIO_Init+0x30c>)
 800aaae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aab2:	6453      	str	r3, [r2, #68]	; 0x44
 800aab4:	4b61      	ldr	r3, [pc, #388]	; (800ac3c <HAL_GPIO_Init+0x30c>)
 800aab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aabc:	60bb      	str	r3, [r7, #8]
 800aabe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800aac0:	4a5f      	ldr	r2, [pc, #380]	; (800ac40 <HAL_GPIO_Init+0x310>)
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	089b      	lsrs	r3, r3, #2
 800aac6:	3302      	adds	r3, #2
 800aac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aacc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f003 0303 	and.w	r3, r3, #3
 800aad4:	009b      	lsls	r3, r3, #2
 800aad6:	220f      	movs	r2, #15
 800aad8:	fa02 f303 	lsl.w	r3, r2, r3
 800aadc:	43db      	mvns	r3, r3
 800aade:	693a      	ldr	r2, [r7, #16]
 800aae0:	4013      	ands	r3, r2
 800aae2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a57      	ldr	r2, [pc, #348]	; (800ac44 <HAL_GPIO_Init+0x314>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d031      	beq.n	800ab50 <HAL_GPIO_Init+0x220>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a56      	ldr	r2, [pc, #344]	; (800ac48 <HAL_GPIO_Init+0x318>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d02b      	beq.n	800ab4c <HAL_GPIO_Init+0x21c>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	4a55      	ldr	r2, [pc, #340]	; (800ac4c <HAL_GPIO_Init+0x31c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d025      	beq.n	800ab48 <HAL_GPIO_Init+0x218>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	4a54      	ldr	r2, [pc, #336]	; (800ac50 <HAL_GPIO_Init+0x320>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d01f      	beq.n	800ab44 <HAL_GPIO_Init+0x214>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4a53      	ldr	r2, [pc, #332]	; (800ac54 <HAL_GPIO_Init+0x324>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d019      	beq.n	800ab40 <HAL_GPIO_Init+0x210>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4a52      	ldr	r2, [pc, #328]	; (800ac58 <HAL_GPIO_Init+0x328>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d013      	beq.n	800ab3c <HAL_GPIO_Init+0x20c>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	4a51      	ldr	r2, [pc, #324]	; (800ac5c <HAL_GPIO_Init+0x32c>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d00d      	beq.n	800ab38 <HAL_GPIO_Init+0x208>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	4a50      	ldr	r2, [pc, #320]	; (800ac60 <HAL_GPIO_Init+0x330>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d007      	beq.n	800ab34 <HAL_GPIO_Init+0x204>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a4f      	ldr	r2, [pc, #316]	; (800ac64 <HAL_GPIO_Init+0x334>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d101      	bne.n	800ab30 <HAL_GPIO_Init+0x200>
 800ab2c:	2308      	movs	r3, #8
 800ab2e:	e010      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab30:	2309      	movs	r3, #9
 800ab32:	e00e      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab34:	2307      	movs	r3, #7
 800ab36:	e00c      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab38:	2306      	movs	r3, #6
 800ab3a:	e00a      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab3c:	2305      	movs	r3, #5
 800ab3e:	e008      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab40:	2304      	movs	r3, #4
 800ab42:	e006      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab44:	2303      	movs	r3, #3
 800ab46:	e004      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	e002      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	e000      	b.n	800ab52 <HAL_GPIO_Init+0x222>
 800ab50:	2300      	movs	r3, #0
 800ab52:	697a      	ldr	r2, [r7, #20]
 800ab54:	f002 0203 	and.w	r2, r2, #3
 800ab58:	0092      	lsls	r2, r2, #2
 800ab5a:	4093      	lsls	r3, r2
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ab64:	4936      	ldr	r1, [pc, #216]	; (800ac40 <HAL_GPIO_Init+0x310>)
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	089b      	lsrs	r3, r3, #2
 800ab6a:	3302      	adds	r3, #2
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab72:	4b3d      	ldr	r3, [pc, #244]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	43db      	mvns	r3, r3
 800ab7c:	693a      	ldr	r2, [r7, #16]
 800ab7e:	4013      	ands	r3, r2
 800ab80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d003      	beq.n	800ab96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800ab96:	4a34      	ldr	r2, [pc, #208]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ab9c:	4b32      	ldr	r3, [pc, #200]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	43db      	mvns	r3, r3
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	4013      	ands	r3, r2
 800abaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d003      	beq.n	800abc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800abc0:	4a29      	ldr	r2, [pc, #164]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800abc6:	4b28      	ldr	r3, [pc, #160]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800abc8:	689b      	ldr	r3, [r3, #8]
 800abca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	43db      	mvns	r3, r3
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	4013      	ands	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d003      	beq.n	800abea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800abe2:	693a      	ldr	r2, [r7, #16]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800abea:	4a1f      	ldr	r2, [pc, #124]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800abf0:	4b1d      	ldr	r3, [pc, #116]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	43db      	mvns	r3, r3
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	4013      	ands	r3, r2
 800abfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d003      	beq.n	800ac14 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 800ac0c:	693a      	ldr	r2, [r7, #16]
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	4313      	orrs	r3, r2
 800ac12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800ac14:	4a14      	ldr	r2, [pc, #80]	; (800ac68 <HAL_GPIO_Init+0x338>)
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	fa22 f303 	lsr.w	r3, r2, r3
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f47f ae88 	bne.w	800a940 <HAL_GPIO_Init+0x10>
  }
}
 800ac30:	bf00      	nop
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bc80      	pop	{r7}
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	40023800 	.word	0x40023800
 800ac40:	40013800 	.word	0x40013800
 800ac44:	40020000 	.word	0x40020000
 800ac48:	40020400 	.word	0x40020400
 800ac4c:	40020800 	.word	0x40020800
 800ac50:	40020c00 	.word	0x40020c00
 800ac54:	40021000 	.word	0x40021000
 800ac58:	40021400 	.word	0x40021400
 800ac5c:	40021800 	.word	0x40021800
 800ac60:	40021c00 	.word	0x40021c00
 800ac64:	40022000 	.word	0x40022000
 800ac68:	40013c00 	.word	0x40013c00

0800ac6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b085      	sub	sp, #20
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691a      	ldr	r2, [r3, #16]
 800ac7c:	887b      	ldrh	r3, [r7, #2]
 800ac7e:	4013      	ands	r3, r2
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac84:	2301      	movs	r3, #1
 800ac86:	73fb      	strb	r3, [r7, #15]
 800ac88:	e001      	b.n	800ac8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bc80      	pop	{r7}
 800ac98:	4770      	bx	lr

0800ac9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b083      	sub	sp, #12
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	807b      	strh	r3, [r7, #2]
 800aca6:	4613      	mov	r3, r2
 800aca8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800acaa:	787b      	ldrb	r3, [r7, #1]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d003      	beq.n	800acb8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800acb0:	887a      	ldrh	r2, [r7, #2]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800acb6:	e003      	b.n	800acc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800acb8:	887b      	ldrh	r3, [r7, #2]
 800acba:	041a      	lsls	r2, r3, #16
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	619a      	str	r2, [r3, #24]
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bc80      	pop	{r7}
 800acc8:	4770      	bx	lr

0800acca <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800acca:	b480      	push	{r7}
 800accc:	b083      	sub	sp, #12
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	460b      	mov	r3, r1
 800acd4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	695a      	ldr	r2, [r3, #20]
 800acda:	887b      	ldrh	r3, [r7, #2]
 800acdc:	4013      	ands	r3, r2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d004      	beq.n	800acec <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ace2:	887b      	ldrh	r3, [r7, #2]
 800ace4:	041a      	lsls	r2, r3, #16
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800acea:	e002      	b.n	800acf2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800acec:	887a      	ldrh	r2, [r7, #2]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	619a      	str	r2, [r3, #24]
}
 800acf2:	bf00      	nop
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bc80      	pop	{r7}
 800acfa:	4770      	bx	lr

0800acfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b084      	sub	sp, #16
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d101      	bne.n	800ad0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e11f      	b.n	800af4e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d106      	bne.n	800ad28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7fb fbda 	bl	80064dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2224      	movs	r2, #36	; 0x24
 800ad2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0201 	bic.w	r2, r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad60:	f001 fb20 	bl	800c3a4 <HAL_RCC_GetPCLK1Freq>
 800ad64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	4a7b      	ldr	r2, [pc, #492]	; (800af58 <HAL_I2C_Init+0x25c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d807      	bhi.n	800ad80 <HAL_I2C_Init+0x84>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4a7a      	ldr	r2, [pc, #488]	; (800af5c <HAL_I2C_Init+0x260>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	bf94      	ite	ls
 800ad78:	2301      	movls	r3, #1
 800ad7a:	2300      	movhi	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	e006      	b.n	800ad8e <HAL_I2C_Init+0x92>
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4a77      	ldr	r2, [pc, #476]	; (800af60 <HAL_I2C_Init+0x264>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	bf94      	ite	ls
 800ad88:	2301      	movls	r3, #1
 800ad8a:	2300      	movhi	r3, #0
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e0db      	b.n	800af4e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	4a72      	ldr	r2, [pc, #456]	; (800af64 <HAL_I2C_Init+0x268>)
 800ad9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad9e:	0c9b      	lsrs	r3, r3, #18
 800ada0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	430a      	orrs	r2, r1
 800adb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	4a64      	ldr	r2, [pc, #400]	; (800af58 <HAL_I2C_Init+0x25c>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d802      	bhi.n	800add0 <HAL_I2C_Init+0xd4>
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	3301      	adds	r3, #1
 800adce:	e009      	b.n	800ade4 <HAL_I2C_Init+0xe8>
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800add6:	fb02 f303 	mul.w	r3, r2, r3
 800adda:	4a63      	ldr	r2, [pc, #396]	; (800af68 <HAL_I2C_Init+0x26c>)
 800addc:	fba2 2303 	umull	r2, r3, r2, r3
 800ade0:	099b      	lsrs	r3, r3, #6
 800ade2:	3301      	adds	r3, #1
 800ade4:	687a      	ldr	r2, [r7, #4]
 800ade6:	6812      	ldr	r2, [r2, #0]
 800ade8:	430b      	orrs	r3, r1
 800adea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	69db      	ldr	r3, [r3, #28]
 800adf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800adf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	4956      	ldr	r1, [pc, #344]	; (800af58 <HAL_I2C_Init+0x25c>)
 800ae00:	428b      	cmp	r3, r1
 800ae02:	d80d      	bhi.n	800ae20 <HAL_I2C_Init+0x124>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	1e59      	subs	r1, r3, #1
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	005b      	lsls	r3, r3, #1
 800ae0e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae12:	3301      	adds	r3, #1
 800ae14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae18:	2b04      	cmp	r3, #4
 800ae1a:	bf38      	it	cc
 800ae1c:	2304      	movcc	r3, #4
 800ae1e:	e04f      	b.n	800aec0 <HAL_I2C_Init+0x1c4>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	689b      	ldr	r3, [r3, #8]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d111      	bne.n	800ae4c <HAL_I2C_Init+0x150>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	1e58      	subs	r0, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6859      	ldr	r1, [r3, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	440b      	add	r3, r1
 800ae36:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bf0c      	ite	eq
 800ae44:	2301      	moveq	r3, #1
 800ae46:	2300      	movne	r3, #0
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	e012      	b.n	800ae72 <HAL_I2C_Init+0x176>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	1e58      	subs	r0, r3, #1
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6859      	ldr	r1, [r3, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	440b      	add	r3, r1
 800ae5a:	0099      	lsls	r1, r3, #2
 800ae5c:	440b      	add	r3, r1
 800ae5e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae62:	3301      	adds	r3, #1
 800ae64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	bf0c      	ite	eq
 800ae6c:	2301      	moveq	r3, #1
 800ae6e:	2300      	movne	r3, #0
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d001      	beq.n	800ae7a <HAL_I2C_Init+0x17e>
 800ae76:	2301      	movs	r3, #1
 800ae78:	e022      	b.n	800aec0 <HAL_I2C_Init+0x1c4>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	689b      	ldr	r3, [r3, #8]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d10e      	bne.n	800aea0 <HAL_I2C_Init+0x1a4>
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	1e58      	subs	r0, r3, #1
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6859      	ldr	r1, [r3, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	005b      	lsls	r3, r3, #1
 800ae8e:	440b      	add	r3, r1
 800ae90:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae94:	3301      	adds	r3, #1
 800ae96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae9e:	e00f      	b.n	800aec0 <HAL_I2C_Init+0x1c4>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	1e58      	subs	r0, r3, #1
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6859      	ldr	r1, [r3, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	440b      	add	r3, r1
 800aeae:	0099      	lsls	r1, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aebc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aec0:	6879      	ldr	r1, [r7, #4]
 800aec2:	6809      	ldr	r1, [r1, #0]
 800aec4:	4313      	orrs	r3, r2
 800aec6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	69da      	ldr	r2, [r3, #28]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	431a      	orrs	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800aeee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	6911      	ldr	r1, [r2, #16]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	68d2      	ldr	r2, [r2, #12]
 800aefa:	4311      	orrs	r1, r2
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	430b      	orrs	r3, r1
 800af02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	695a      	ldr	r2, [r3, #20]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	699b      	ldr	r3, [r3, #24]
 800af16:	431a      	orrs	r2, r3
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f042 0201 	orr.w	r2, r2, #1
 800af2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af4c:	2300      	movs	r3, #0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	000186a0 	.word	0x000186a0
 800af5c:	001e847f 	.word	0x001e847f
 800af60:	003d08ff 	.word	0x003d08ff
 800af64:	431bde83 	.word	0x431bde83
 800af68:	10624dd3 	.word	0x10624dd3

0800af6c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b088      	sub	sp, #32
 800af70:	af02      	add	r7, sp, #8
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	607a      	str	r2, [r7, #4]
 800af76:	461a      	mov	r2, r3
 800af78:	460b      	mov	r3, r1
 800af7a:	817b      	strh	r3, [r7, #10]
 800af7c:	4613      	mov	r3, r2
 800af7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af80:	f7fd fdbe 	bl	8008b00 <HAL_GetTick>
 800af84:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	2b20      	cmp	r3, #32
 800af90:	f040 80e0 	bne.w	800b154 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	9300      	str	r3, [sp, #0]
 800af98:	2319      	movs	r3, #25
 800af9a:	2201      	movs	r2, #1
 800af9c:	4970      	ldr	r1, [pc, #448]	; (800b160 <HAL_I2C_Master_Transmit+0x1f4>)
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f000 fc20 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800afaa:	2302      	movs	r3, #2
 800afac:	e0d3      	b.n	800b156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_I2C_Master_Transmit+0x50>
 800afb8:	2302      	movs	r3, #2
 800afba:	e0cc      	b.n	800b156 <HAL_I2C_Master_Transmit+0x1ea>
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d007      	beq.n	800afe2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f042 0201 	orr.w	r2, r2, #1
 800afe0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	681a      	ldr	r2, [r3, #0]
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aff0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2221      	movs	r2, #33	; 0x21
 800aff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2210      	movs	r2, #16
 800affe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	687a      	ldr	r2, [r7, #4]
 800b00c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	893a      	ldrh	r2, [r7, #8]
 800b012:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b018:	b29a      	uxth	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	4a50      	ldr	r2, [pc, #320]	; (800b164 <HAL_I2C_Master_Transmit+0x1f8>)
 800b022:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b024:	8979      	ldrh	r1, [r7, #10]
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	6a3a      	ldr	r2, [r7, #32]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	f000 fac4 	bl	800b5b8 <I2C_MasterRequestWrite>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d001      	beq.n	800b03a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b036:	2301      	movs	r3, #1
 800b038:	e08d      	b.n	800b156 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b03a:	2300      	movs	r3, #0
 800b03c:	613b      	str	r3, [r7, #16]
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	695b      	ldr	r3, [r3, #20]
 800b044:	613b      	str	r3, [r7, #16]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	699b      	ldr	r3, [r3, #24]
 800b04c:	613b      	str	r3, [r7, #16]
 800b04e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b050:	e066      	b.n	800b120 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b052:	697a      	ldr	r2, [r7, #20]
 800b054:	6a39      	ldr	r1, [r7, #32]
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f000 fc9a 	bl	800b990 <I2C_WaitOnTXEFlagUntilTimeout>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00d      	beq.n	800b07e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b066:	2b04      	cmp	r3, #4
 800b068:	d107      	bne.n	800b07a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b078:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e06b      	b.n	800b156 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	781a      	ldrb	r2, [r3, #0]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b098:	b29b      	uxth	r3, r3
 800b09a:	3b01      	subs	r3, #1
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	f003 0304 	and.w	r3, r3, #4
 800b0b8:	2b04      	cmp	r3, #4
 800b0ba:	d11b      	bne.n	800b0f4 <HAL_I2C_Master_Transmit+0x188>
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d017      	beq.n	800b0f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c8:	781a      	ldrb	r2, [r3, #0]
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	b29a      	uxth	r2, r3
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	6a39      	ldr	r1, [r7, #32]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 fc8a 	bl	800ba12 <I2C_WaitOnBTFFlagUntilTimeout>
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00d      	beq.n	800b120 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b108:	2b04      	cmp	r3, #4
 800b10a:	d107      	bne.n	800b11c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b11a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	e01a      	b.n	800b156 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b124:	2b00      	cmp	r3, #0
 800b126:	d194      	bne.n	800b052 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b136:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	2220      	movs	r2, #32
 800b13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2200      	movs	r2, #0
 800b14c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	e000      	b.n	800b156 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b154:	2302      	movs	r3, #2
  }
}
 800b156:	4618      	mov	r0, r3
 800b158:	3718      	adds	r7, #24
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	00100002 	.word	0x00100002
 800b164:	ffff0000 	.word	0xffff0000

0800b168 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b088      	sub	sp, #32
 800b16c:	af02      	add	r7, sp, #8
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	4608      	mov	r0, r1
 800b172:	4611      	mov	r1, r2
 800b174:	461a      	mov	r2, r3
 800b176:	4603      	mov	r3, r0
 800b178:	817b      	strh	r3, [r7, #10]
 800b17a:	460b      	mov	r3, r1
 800b17c:	813b      	strh	r3, [r7, #8]
 800b17e:	4613      	mov	r3, r2
 800b180:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b182:	f7fd fcbd 	bl	8008b00 <HAL_GetTick>
 800b186:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b18e:	b2db      	uxtb	r3, r3
 800b190:	2b20      	cmp	r3, #32
 800b192:	f040 80d9 	bne.w	800b348 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	2319      	movs	r3, #25
 800b19c:	2201      	movs	r2, #1
 800b19e:	496d      	ldr	r1, [pc, #436]	; (800b354 <HAL_I2C_Mem_Write+0x1ec>)
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f000 fb1f 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e0cc      	b.n	800b34a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	d101      	bne.n	800b1be <HAL_I2C_Mem_Write+0x56>
 800b1ba:	2302      	movs	r3, #2
 800b1bc:	e0c5      	b.n	800b34a <HAL_I2C_Mem_Write+0x1e2>
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0301 	and.w	r3, r3, #1
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d007      	beq.n	800b1e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0201 	orr.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	681a      	ldr	r2, [r3, #0]
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2221      	movs	r2, #33	; 0x21
 800b1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2240      	movs	r2, #64	; 0x40
 800b200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	2200      	movs	r2, #0
 800b208:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a3a      	ldr	r2, [r7, #32]
 800b20e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b214:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4a4d      	ldr	r2, [pc, #308]	; (800b358 <HAL_I2C_Mem_Write+0x1f0>)
 800b224:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b226:	88f8      	ldrh	r0, [r7, #6]
 800b228:	893a      	ldrh	r2, [r7, #8]
 800b22a:	8979      	ldrh	r1, [r7, #10]
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	4603      	mov	r3, r0
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f000 fa40 	bl	800b6bc <I2C_RequestMemoryWrite>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d052      	beq.n	800b2e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b242:	2301      	movs	r3, #1
 800b244:	e081      	b.n	800b34a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f000 fba0 	bl	800b990 <I2C_WaitOnTXEFlagUntilTimeout>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00d      	beq.n	800b272 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d107      	bne.n	800b26e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	681a      	ldr	r2, [r3, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b26c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	e06b      	b.n	800b34a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b276:	781a      	ldrb	r2, [r3, #0]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b298:	b29b      	uxth	r3, r3
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	695b      	ldr	r3, [r3, #20]
 800b2a8:	f003 0304 	and.w	r3, r3, #4
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d11b      	bne.n	800b2e8 <HAL_I2C_Mem_Write+0x180>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d017      	beq.n	800b2e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2bc:	781a      	ldrb	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	b29a      	uxth	r2, r3
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d1aa      	bne.n	800b246 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2f4:	68f8      	ldr	r0, [r7, #12]
 800b2f6:	f000 fb8c 	bl	800ba12 <I2C_WaitOnBTFFlagUntilTimeout>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d00d      	beq.n	800b31c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b304:	2b04      	cmp	r3, #4
 800b306:	d107      	bne.n	800b318 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b316:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b318:	2301      	movs	r3, #1
 800b31a:	e016      	b.n	800b34a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b32a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	2220      	movs	r2, #32
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	2200      	movs	r2, #0
 800b340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	e000      	b.n	800b34a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b348:	2302      	movs	r3, #2
  }
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	00100002 	.word	0x00100002
 800b358:	ffff0000 	.word	0xffff0000

0800b35c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b08a      	sub	sp, #40	; 0x28
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607a      	str	r2, [r7, #4]
 800b366:	603b      	str	r3, [r7, #0]
 800b368:	460b      	mov	r3, r1
 800b36a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800b36c:	f7fd fbc8 	bl	8008b00 <HAL_GetTick>
 800b370:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800b372:	2301      	movs	r3, #1
 800b374:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37c:	b2db      	uxtb	r3, r3
 800b37e:	2b20      	cmp	r3, #32
 800b380:	f040 8110 	bne.w	800b5a4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b384:	69fb      	ldr	r3, [r7, #28]
 800b386:	9300      	str	r3, [sp, #0]
 800b388:	2319      	movs	r3, #25
 800b38a:	2201      	movs	r2, #1
 800b38c:	4988      	ldr	r1, [pc, #544]	; (800b5b0 <HAL_I2C_IsDeviceReady+0x254>)
 800b38e:	68f8      	ldr	r0, [r7, #12]
 800b390:	f000 fa28 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800b39a:	2302      	movs	r3, #2
 800b39c:	e103      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d101      	bne.n	800b3ac <HAL_I2C_IsDeviceReady+0x50>
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e0fc      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0301 	and.w	r3, r3, #1
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d007      	beq.n	800b3d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f042 0201 	orr.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2224      	movs	r2, #36	; 0x24
 800b3e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a70      	ldr	r2, [pc, #448]	; (800b5b4 <HAL_I2C_IsDeviceReady+0x258>)
 800b3f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b404:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2200      	movs	r2, #0
 800b40e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b412:	68f8      	ldr	r0, [r7, #12]
 800b414:	f000 f9e6 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b418:	4603      	mov	r3, r0
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00c      	beq.n	800b438 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d003      	beq.n	800b434 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b432:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e0b6      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b438:	897b      	ldrh	r3, [r7, #10]
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	461a      	mov	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b446:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800b448:	f7fd fb5a 	bl	8008b00 <HAL_GetTick>
 800b44c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	695b      	ldr	r3, [r3, #20]
 800b454:	f003 0302 	and.w	r3, r3, #2
 800b458:	2b02      	cmp	r3, #2
 800b45a:	bf0c      	ite	eq
 800b45c:	2301      	moveq	r3, #1
 800b45e:	2300      	movne	r3, #0
 800b460:	b2db      	uxtb	r3, r3
 800b462:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b46e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b472:	bf0c      	ite	eq
 800b474:	2301      	moveq	r3, #1
 800b476:	2300      	movne	r3, #0
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800b47c:	e025      	b.n	800b4ca <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b47e:	f7fd fb3f 	bl	8008b00 <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d302      	bcc.n	800b494 <HAL_I2C_IsDeviceReady+0x138>
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d103      	bne.n	800b49c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	22a0      	movs	r2, #160	; 0xa0
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	bf0c      	ite	eq
 800b4aa:	2301      	moveq	r3, #1
 800b4ac:	2300      	movne	r3, #0
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4c0:	bf0c      	ite	eq
 800b4c2:	2301      	moveq	r3, #1
 800b4c4:	2300      	movne	r3, #0
 800b4c6:	b2db      	uxtb	r3, r3
 800b4c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	2ba0      	cmp	r3, #160	; 0xa0
 800b4d4:	d005      	beq.n	800b4e2 <HAL_I2C_IsDeviceReady+0x186>
 800b4d6:	7dfb      	ldrb	r3, [r7, #23]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d102      	bne.n	800b4e2 <HAL_I2C_IsDeviceReady+0x186>
 800b4dc:	7dbb      	ldrb	r3, [r7, #22]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d0cd      	beq.n	800b47e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	695b      	ldr	r3, [r3, #20]
 800b4f0:	f003 0302 	and.w	r3, r3, #2
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d129      	bne.n	800b54c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b506:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b508:	2300      	movs	r3, #0
 800b50a:	613b      	str	r3, [r7, #16]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	613b      	str	r3, [r7, #16]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	2319      	movs	r3, #25
 800b524:	2201      	movs	r2, #1
 800b526:	4922      	ldr	r1, [pc, #136]	; (800b5b0 <HAL_I2C_IsDeviceReady+0x254>)
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f95b 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b52e:	4603      	mov	r3, r0
 800b530:	2b00      	cmp	r3, #0
 800b532:	d001      	beq.n	800b538 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e036      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2220      	movs	r2, #32
 800b53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2200      	movs	r2, #0
 800b544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	e02c      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b55a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b564:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	9300      	str	r3, [sp, #0]
 800b56a:	2319      	movs	r3, #25
 800b56c:	2201      	movs	r2, #1
 800b56e:	4910      	ldr	r1, [pc, #64]	; (800b5b0 <HAL_I2C_IsDeviceReady+0x254>)
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f937 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d001      	beq.n	800b580 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800b57c:	2301      	movs	r3, #1
 800b57e:	e012      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	3301      	adds	r3, #1
 800b584:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	f4ff af33 	bcc.w	800b3f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2220      	movs	r2, #32
 800b594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	e000      	b.n	800b5a6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800b5a4:	2302      	movs	r3, #2
  }
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3720      	adds	r7, #32
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	00100002 	.word	0x00100002
 800b5b4:	ffff0000 	.word	0xffff0000

0800b5b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af02      	add	r7, sp, #8
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	607a      	str	r2, [r7, #4]
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	2b08      	cmp	r3, #8
 800b5d2:	d006      	beq.n	800b5e2 <I2C_MasterRequestWrite+0x2a>
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	2b01      	cmp	r3, #1
 800b5d8:	d003      	beq.n	800b5e2 <I2C_MasterRequestWrite+0x2a>
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5e0:	d108      	bne.n	800b5f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5f0:	601a      	str	r2, [r3, #0]
 800b5f2:	e00b      	b.n	800b60c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5f8:	2b12      	cmp	r3, #18
 800b5fa:	d107      	bne.n	800b60c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b60a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b618:	68f8      	ldr	r0, [r7, #12]
 800b61a:	f000 f8e3 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b61e:	4603      	mov	r3, r0
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00c      	beq.n	800b63e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b638:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b63a:	2303      	movs	r3, #3
 800b63c:	e035      	b.n	800b6aa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b646:	d108      	bne.n	800b65a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b648:	897b      	ldrh	r3, [r7, #10]
 800b64a:	b2db      	uxtb	r3, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b656:	611a      	str	r2, [r3, #16]
 800b658:	e01b      	b.n	800b692 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b65a:	897b      	ldrh	r3, [r7, #10]
 800b65c:	11db      	asrs	r3, r3, #7
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	f003 0306 	and.w	r3, r3, #6
 800b664:	b2db      	uxtb	r3, r3
 800b666:	f063 030f 	orn	r3, r3, #15
 800b66a:	b2da      	uxtb	r2, r3
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	687a      	ldr	r2, [r7, #4]
 800b676:	490f      	ldr	r1, [pc, #60]	; (800b6b4 <I2C_MasterRequestWrite+0xfc>)
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f90a 	bl	800b892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e010      	b.n	800b6aa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b688:	897b      	ldrh	r3, [r7, #10]
 800b68a:	b2da      	uxtb	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	4908      	ldr	r1, [pc, #32]	; (800b6b8 <I2C_MasterRequestWrite+0x100>)
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f000 f8fa 	bl	800b892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d001      	beq.n	800b6a8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e000      	b.n	800b6aa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800b6a8:	2300      	movs	r3, #0
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	00010008 	.word	0x00010008
 800b6b8:	00010002 	.word	0x00010002

0800b6bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b088      	sub	sp, #32
 800b6c0:	af02      	add	r7, sp, #8
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	817b      	strh	r3, [r7, #10]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	813b      	strh	r3, [r7, #8]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 f876 	bl	800b7e4 <I2C_WaitOnFlagUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00c      	beq.n	800b718 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d003      	beq.n	800b714 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	e05f      	b.n	800b7d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b718:	897b      	ldrh	r3, [r7, #10]
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	461a      	mov	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b726:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	6a3a      	ldr	r2, [r7, #32]
 800b72c:	492c      	ldr	r1, [pc, #176]	; (800b7e0 <I2C_RequestMemoryWrite+0x124>)
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f000 f8af 	bl	800b892 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800b73a:	2301      	movs	r3, #1
 800b73c:	e04c      	b.n	800b7d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b73e:	2300      	movs	r3, #0
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	695b      	ldr	r3, [r3, #20]
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	617b      	str	r3, [r7, #20]
 800b752:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b756:	6a39      	ldr	r1, [r7, #32]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f000 f919 	bl	800b990 <I2C_WaitOnTXEFlagUntilTimeout>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d00d      	beq.n	800b780 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b768:	2b04      	cmp	r3, #4
 800b76a:	d107      	bne.n	800b77c <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b77a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e02b      	b.n	800b7d8 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d105      	bne.n	800b792 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b786:	893b      	ldrh	r3, [r7, #8]
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	611a      	str	r2, [r3, #16]
 800b790:	e021      	b.n	800b7d6 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b792:	893b      	ldrh	r3, [r7, #8]
 800b794:	0a1b      	lsrs	r3, r3, #8
 800b796:	b29b      	uxth	r3, r3
 800b798:	b2da      	uxtb	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7a2:	6a39      	ldr	r1, [r7, #32]
 800b7a4:	68f8      	ldr	r0, [r7, #12]
 800b7a6:	f000 f8f3 	bl	800b990 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00d      	beq.n	800b7cc <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b4:	2b04      	cmp	r3, #4
 800b7b6:	d107      	bne.n	800b7c8 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	e005      	b.n	800b7d8 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b7cc:	893b      	ldrh	r3, [r7, #8]
 800b7ce:	b2da      	uxtb	r2, r3
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b7d6:	2300      	movs	r3, #0
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3718      	adds	r7, #24
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}
 800b7e0:	00010002 	.word	0x00010002

0800b7e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	603b      	str	r3, [r7, #0]
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7f4:	e025      	b.n	800b842 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7fc:	d021      	beq.n	800b842 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7fe:	f7fd f97f 	bl	8008b00 <HAL_GetTick>
 800b802:	4602      	mov	r2, r0
 800b804:	69bb      	ldr	r3, [r7, #24]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d302      	bcc.n	800b814 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d116      	bne.n	800b842 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	2200      	movs	r2, #0
 800b818:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2220      	movs	r2, #32
 800b81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	2200      	movs	r2, #0
 800b826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b82e:	f043 0220 	orr.w	r2, r3, #32
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e023      	b.n	800b88a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	0c1b      	lsrs	r3, r3, #16
 800b846:	b2db      	uxtb	r3, r3
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d10d      	bne.n	800b868 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	43da      	mvns	r2, r3
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	4013      	ands	r3, r2
 800b858:	b29b      	uxth	r3, r3
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bf0c      	ite	eq
 800b85e:	2301      	moveq	r3, #1
 800b860:	2300      	movne	r3, #0
 800b862:	b2db      	uxtb	r3, r3
 800b864:	461a      	mov	r2, r3
 800b866:	e00c      	b.n	800b882 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	43da      	mvns	r2, r3
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	4013      	ands	r3, r2
 800b874:	b29b      	uxth	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	bf0c      	ite	eq
 800b87a:	2301      	moveq	r3, #1
 800b87c:	2300      	movne	r3, #0
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	461a      	mov	r2, r3
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	429a      	cmp	r2, r3
 800b886:	d0b6      	beq.n	800b7f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b8a0:	e051      	b.n	800b946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	695b      	ldr	r3, [r3, #20]
 800b8a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8b0:	d123      	bne.n	800b8fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b8ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2220      	movs	r2, #32
 800b8d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e6:	f043 0204 	orr.w	r2, r3, #4
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e046      	b.n	800b988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b900:	d021      	beq.n	800b946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b902:	f7fd f8fd 	bl	8008b00 <HAL_GetTick>
 800b906:	4602      	mov	r2, r0
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	429a      	cmp	r2, r3
 800b910:	d302      	bcc.n	800b918 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d116      	bne.n	800b946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2220      	movs	r2, #32
 800b922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	f043 0220 	orr.w	r2, r3, #32
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e020      	b.n	800b988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	0c1b      	lsrs	r3, r3, #16
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d10c      	bne.n	800b96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	43da      	mvns	r2, r3
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	4013      	ands	r3, r2
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bf14      	ite	ne
 800b962:	2301      	movne	r3, #1
 800b964:	2300      	moveq	r3, #0
 800b966:	b2db      	uxtb	r3, r3
 800b968:	e00b      	b.n	800b982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	43da      	mvns	r2, r3
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	4013      	ands	r3, r2
 800b976:	b29b      	uxth	r3, r3
 800b978:	2b00      	cmp	r3, #0
 800b97a:	bf14      	ite	ne
 800b97c:	2301      	movne	r3, #1
 800b97e:	2300      	moveq	r3, #0
 800b980:	b2db      	uxtb	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d18d      	bne.n	800b8a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b99c:	e02d      	b.n	800b9fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b99e:	68f8      	ldr	r0, [r7, #12]
 800b9a0:	f000 f878 	bl	800ba94 <I2C_IsAcknowledgeFailed>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d001      	beq.n	800b9ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e02d      	b.n	800ba0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9b4:	d021      	beq.n	800b9fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9b6:	f7fd f8a3 	bl	8008b00 <HAL_GetTick>
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	1ad3      	subs	r3, r2, r3
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d302      	bcc.n	800b9cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d116      	bne.n	800b9fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2220      	movs	r2, #32
 800b9d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9e6:	f043 0220 	orr.w	r2, r3, #32
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e007      	b.n	800ba0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	695b      	ldr	r3, [r3, #20]
 800ba00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba04:	2b80      	cmp	r3, #128	; 0x80
 800ba06:	d1ca      	bne.n	800b99e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b084      	sub	sp, #16
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	60b9      	str	r1, [r7, #8]
 800ba1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba1e:	e02d      	b.n	800ba7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f837 	bl	800ba94 <I2C_IsAcknowledgeFailed>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	e02d      	b.n	800ba8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba36:	d021      	beq.n	800ba7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba38:	f7fd f862 	bl	8008b00 <HAL_GetTick>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d302      	bcc.n	800ba4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d116      	bne.n	800ba7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2200      	movs	r2, #0
 800ba52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2220      	movs	r2, #32
 800ba58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba68:	f043 0220 	orr.w	r2, r3, #32
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e007      	b.n	800ba8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	f003 0304 	and.w	r3, r3, #4
 800ba86:	2b04      	cmp	r3, #4
 800ba88:	d1ca      	bne.n	800ba20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	695b      	ldr	r3, [r3, #20]
 800baa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800baa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800baaa:	d11b      	bne.n	800bae4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bab4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2220      	movs	r2, #32
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad0:	f043 0204 	orr.w	r2, r3, #4
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e000      	b.n	800bae6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	bc80      	pop	{r7}
 800baee:	4770      	bx	lr

0800baf0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d101      	bne.n	800bb02 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	e02b      	b.n	800bb5a <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800bb0a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing 0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f245 5255 	movw	r2, #21845	; 0x5555
 800bb14:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	687a      	ldr	r2, [r7, #4]
 800bb1c:	6852      	ldr	r2, [r2, #4]
 800bb1e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	6892      	ldr	r2, [r2, #8]
 800bb28:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800bb2a:	f7fc ffe9 	bl	8008b00 <HAL_GetTick>
 800bb2e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while(hiwdg->Instance->SR != 0x00u)
 800bb30:	e008      	b.n	800bb44 <HAL_IWDG_Init+0x54>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800bb32:	f7fc ffe5 	bl	8008b00 <HAL_GetTick>
 800bb36:	4602      	mov	r2, r0
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	2b30      	cmp	r3, #48	; 0x30
 800bb3e:	d901      	bls.n	800bb44 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800bb40:	2303      	movs	r3, #3
 800bb42:	e00a      	b.n	800bb5a <HAL_IWDG_Init+0x6a>
  while(hiwdg->Instance->SR != 0x00u)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	68db      	ldr	r3, [r3, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1f1      	bne.n	800bb32 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bb56:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b083      	sub	sp, #12
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800bb72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bc80      	pop	{r7}
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b090      	sub	sp, #64	; 0x40
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d101      	bne.n	800bb92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e253      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d050      	beq.n	800bc40 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bb9e:	4ba3      	ldr	r3, [pc, #652]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	f003 030c 	and.w	r3, r3, #12
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d00c      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbaa:	4ba0      	ldr	r3, [pc, #640]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800bbb2:	2b08      	cmp	r3, #8
 800bbb4:	d112      	bne.n	800bbdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bbb6:	4b9d      	ldr	r3, [pc, #628]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bbc2:	d10b      	bne.n	800bbdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbc4:	4b99      	ldr	r3, [pc, #612]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d036      	beq.n	800bc3e <HAL_RCC_OscConfig+0xbe>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	685b      	ldr	r3, [r3, #4]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d132      	bne.n	800bc3e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e22e      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	685a      	ldr	r2, [r3, #4]
 800bbe0:	4b93      	ldr	r3, [pc, #588]	; (800be30 <HAL_RCC_OscConfig+0x2b0>)
 800bbe2:	b2d2      	uxtb	r2, r2
 800bbe4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d013      	beq.n	800bc16 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbee:	f7fc ff87 	bl	8008b00 <HAL_GetTick>
 800bbf2:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bbf4:	e008      	b.n	800bc08 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbf6:	f7fc ff83 	bl	8008b00 <HAL_GetTick>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	2b64      	cmp	r3, #100	; 0x64
 800bc02:	d901      	bls.n	800bc08 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e218      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc08:	4b88      	ldr	r3, [pc, #544]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d0f0      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x76>
 800bc14:	e014      	b.n	800bc40 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc16:	f7fc ff73 	bl	8008b00 <HAL_GetTick>
 800bc1a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc1c:	e008      	b.n	800bc30 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bc1e:	f7fc ff6f 	bl	8008b00 <HAL_GetTick>
 800bc22:	4602      	mov	r2, r0
 800bc24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc26:	1ad3      	subs	r3, r2, r3
 800bc28:	2b64      	cmp	r3, #100	; 0x64
 800bc2a:	d901      	bls.n	800bc30 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e204      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc30:	4b7e      	ldr	r3, [pc, #504]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1f0      	bne.n	800bc1e <HAL_RCC_OscConfig+0x9e>
 800bc3c:	e000      	b.n	800bc40 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc3e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d077      	beq.n	800bd3c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc4c:	4b77      	ldr	r3, [pc, #476]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc4e:	689b      	ldr	r3, [r3, #8]
 800bc50:	f003 030c 	and.w	r3, r3, #12
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00b      	beq.n	800bc70 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc58:	4b74      	ldr	r3, [pc, #464]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800bc60:	2b08      	cmp	r3, #8
 800bc62:	d126      	bne.n	800bcb2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bc64:	4b71      	ldr	r3, [pc, #452]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d120      	bne.n	800bcb2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc70:	4b6e      	ldr	r3, [pc, #440]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f003 0302 	and.w	r3, r3, #2
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d005      	beq.n	800bc88 <HAL_RCC_OscConfig+0x108>
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	2b01      	cmp	r3, #1
 800bc82:	d001      	beq.n	800bc88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e1d8      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc88:	4b68      	ldr	r3, [pc, #416]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	21f8      	movs	r1, #248	; 0xf8
 800bc96:	6339      	str	r1, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bc98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc9a:	fa91 f1a1 	rbit	r1, r1
 800bc9e:	62f9      	str	r1, [r7, #44]	; 0x2c
  return result;
 800bca0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bca2:	fab1 f181 	clz	r1, r1
 800bca6:	b2c9      	uxtb	r1, r1
 800bca8:	408b      	lsls	r3, r1
 800bcaa:	4960      	ldr	r1, [pc, #384]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bcac:	4313      	orrs	r3, r2
 800bcae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcb0:	e044      	b.n	800bd3c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d02a      	beq.n	800bd10 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bcba:	4b5e      	ldr	r3, [pc, #376]	; (800be34 <HAL_RCC_OscConfig+0x2b4>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcc0:	f7fc ff1e 	bl	8008b00 <HAL_GetTick>
 800bcc4:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcc6:	e008      	b.n	800bcda <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcc8:	f7fc ff1a 	bl	8008b00 <HAL_GetTick>
 800bccc:	4602      	mov	r2, r0
 800bcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd0:	1ad3      	subs	r3, r2, r3
 800bcd2:	2b02      	cmp	r3, #2
 800bcd4:	d901      	bls.n	800bcda <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e1af      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcda:	4b54      	ldr	r3, [pc, #336]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d0f0      	beq.n	800bcc8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bce6:	4b51      	ldr	r3, [pc, #324]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	691b      	ldr	r3, [r3, #16]
 800bcf2:	21f8      	movs	r1, #248	; 0xf8
 800bcf4:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bcf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bcf8:	fa91 f1a1 	rbit	r1, r1
 800bcfc:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 800bcfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd00:	fab1 f181 	clz	r1, r1
 800bd04:	b2c9      	uxtb	r1, r1
 800bd06:	408b      	lsls	r3, r1
 800bd08:	4948      	ldr	r1, [pc, #288]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	600b      	str	r3, [r1, #0]
 800bd0e:	e015      	b.n	800bd3c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd10:	4b48      	ldr	r3, [pc, #288]	; (800be34 <HAL_RCC_OscConfig+0x2b4>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd16:	f7fc fef3 	bl	8008b00 <HAL_GetTick>
 800bd1a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd1c:	e008      	b.n	800bd30 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd1e:	f7fc feef 	bl	8008b00 <HAL_GetTick>
 800bd22:	4602      	mov	r2, r0
 800bd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d901      	bls.n	800bd30 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	e184      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd30:	4b3e      	ldr	r3, [pc, #248]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f003 0302 	and.w	r3, r3, #2
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1f0      	bne.n	800bd1e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f003 0308 	and.w	r3, r3, #8
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d030      	beq.n	800bdaa <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	695b      	ldr	r3, [r3, #20]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d016      	beq.n	800bd7e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd50:	4b39      	ldr	r3, [pc, #228]	; (800be38 <HAL_RCC_OscConfig+0x2b8>)
 800bd52:	2201      	movs	r2, #1
 800bd54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd56:	f7fc fed3 	bl	8008b00 <HAL_GetTick>
 800bd5a:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd5c:	e008      	b.n	800bd70 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd5e:	f7fc fecf 	bl	8008b00 <HAL_GetTick>
 800bd62:	4602      	mov	r2, r0
 800bd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	d901      	bls.n	800bd70 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	e164      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd70:	4b2e      	ldr	r3, [pc, #184]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd74:	f003 0302 	and.w	r3, r3, #2
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d0f0      	beq.n	800bd5e <HAL_RCC_OscConfig+0x1de>
 800bd7c:	e015      	b.n	800bdaa <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd7e:	4b2e      	ldr	r3, [pc, #184]	; (800be38 <HAL_RCC_OscConfig+0x2b8>)
 800bd80:	2200      	movs	r2, #0
 800bd82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd84:	f7fc febc 	bl	8008b00 <HAL_GetTick>
 800bd88:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd8a:	e008      	b.n	800bd9e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bd8c:	f7fc feb8 	bl	8008b00 <HAL_GetTick>
 800bd90:	4602      	mov	r2, r0
 800bd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd94:	1ad3      	subs	r3, r2, r3
 800bd96:	2b02      	cmp	r3, #2
 800bd98:	d901      	bls.n	800bd9e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800bd9a:	2303      	movs	r3, #3
 800bd9c:	e14d      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd9e:	4b23      	ldr	r3, [pc, #140]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bda0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bda2:	f003 0302 	and.w	r3, r3, #2
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d1f0      	bne.n	800bd8c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0304 	and.w	r3, r3, #4
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 8088 	beq.w	800bec8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdbe:	4b1b      	ldr	r3, [pc, #108]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d110      	bne.n	800bdec <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdca:	2300      	movs	r3, #0
 800bdcc:	60bb      	str	r3, [r7, #8]
 800bdce:	4b17      	ldr	r3, [pc, #92]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdd2:	4a16      	ldr	r2, [pc, #88]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bdd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdd8:	6413      	str	r3, [r2, #64]	; 0x40
 800bdda:	4b14      	ldr	r3, [pc, #80]	; (800be2c <HAL_RCC_OscConfig+0x2ac>)
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bde2:	60bb      	str	r3, [r7, #8]
 800bde4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bde6:	2301      	movs	r3, #1
 800bde8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bdec:	4b13      	ldr	r3, [pc, #76]	; (800be3c <HAL_RCC_OscConfig+0x2bc>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a12      	ldr	r2, [pc, #72]	; (800be3c <HAL_RCC_OscConfig+0x2bc>)
 800bdf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdf6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdf8:	4b10      	ldr	r3, [pc, #64]	; (800be3c <HAL_RCC_OscConfig+0x2bc>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be00:	2b00      	cmp	r3, #0
 800be02:	d123      	bne.n	800be4c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800be04:	4b0d      	ldr	r3, [pc, #52]	; (800be3c <HAL_RCC_OscConfig+0x2bc>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4a0c      	ldr	r2, [pc, #48]	; (800be3c <HAL_RCC_OscConfig+0x2bc>)
 800be0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800be0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800be10:	f7fc fe76 	bl	8008b00 <HAL_GetTick>
 800be14:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be16:	e013      	b.n	800be40 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be18:	f7fc fe72 	bl	8008b00 <HAL_GetTick>
 800be1c:	4602      	mov	r2, r0
 800be1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	2b02      	cmp	r3, #2
 800be24:	d90c      	bls.n	800be40 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800be26:	2303      	movs	r3, #3
 800be28:	e107      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
 800be2a:	bf00      	nop
 800be2c:	40023800 	.word	0x40023800
 800be30:	40023802 	.word	0x40023802
 800be34:	42470000 	.word	0x42470000
 800be38:	42470e80 	.word	0x42470e80
 800be3c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be40:	4b80      	ldr	r3, [pc, #512]	; (800c044 <HAL_RCC_OscConfig+0x4c4>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d0e5      	beq.n	800be18 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	689a      	ldr	r2, [r3, #8]
 800be50:	4b7d      	ldr	r3, [pc, #500]	; (800c048 <HAL_RCC_OscConfig+0x4c8>)
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d015      	beq.n	800be8a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be5e:	f7fc fe4f 	bl	8008b00 <HAL_GetTick>
 800be62:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be64:	e00a      	b.n	800be7c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be66:	f7fc fe4b 	bl	8008b00 <HAL_GetTick>
 800be6a:	4602      	mov	r2, r0
 800be6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	f241 3288 	movw	r2, #5000	; 0x1388
 800be74:	4293      	cmp	r3, r2
 800be76:	d901      	bls.n	800be7c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800be78:	2303      	movs	r3, #3
 800be7a:	e0de      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be7c:	4b73      	ldr	r3, [pc, #460]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800be7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be80:	f003 0302 	and.w	r3, r3, #2
 800be84:	2b00      	cmp	r3, #0
 800be86:	d0ee      	beq.n	800be66 <HAL_RCC_OscConfig+0x2e6>
 800be88:	e014      	b.n	800beb4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be8a:	f7fc fe39 	bl	8008b00 <HAL_GetTick>
 800be8e:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be90:	e00a      	b.n	800bea8 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be92:	f7fc fe35 	bl	8008b00 <HAL_GetTick>
 800be96:	4602      	mov	r2, r0
 800be98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be9a:	1ad3      	subs	r3, r2, r3
 800be9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d901      	bls.n	800bea8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800bea4:	2303      	movs	r3, #3
 800bea6:	e0c8      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bea8:	4b68      	ldr	r3, [pc, #416]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800beaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d1ee      	bne.n	800be92 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800beb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800beb8:	2b01      	cmp	r3, #1
 800beba:	d105      	bne.n	800bec8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bebc:	4b63      	ldr	r3, [pc, #396]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec0:	4a62      	ldr	r2, [pc, #392]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bec6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 80b3 	beq.w	800c038 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bed2:	4b5e      	ldr	r3, [pc, #376]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	f003 030c 	and.w	r3, r3, #12
 800beda:	2b08      	cmp	r3, #8
 800bedc:	d07d      	beq.n	800bfda <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	699b      	ldr	r3, [r3, #24]
 800bee2:	2b02      	cmp	r3, #2
 800bee4:	d162      	bne.n	800bfac <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bee6:	4b5a      	ldr	r3, [pc, #360]	; (800c050 <HAL_RCC_OscConfig+0x4d0>)
 800bee8:	2200      	movs	r2, #0
 800beea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beec:	f7fc fe08 	bl	8008b00 <HAL_GetTick>
 800bef0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bef2:	e008      	b.n	800bf06 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bef4:	f7fc fe04 	bl	8008b00 <HAL_GetTick>
 800bef8:	4602      	mov	r2, r0
 800befa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	2b64      	cmp	r3, #100	; 0x64
 800bf00:	d901      	bls.n	800bf06 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800bf02:	2303      	movs	r3, #3
 800bf04:	e099      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bf06:	4b51      	ldr	r3, [pc, #324]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d1f0      	bne.n	800bef4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	69da      	ldr	r2, [r3, #28]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a1b      	ldr	r3, [r3, #32]
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf20:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800bf24:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf26:	6939      	ldr	r1, [r7, #16]
 800bf28:	fa91 f1a1 	rbit	r1, r1
 800bf2c:	60f9      	str	r1, [r7, #12]
  return result;
 800bf2e:	68f9      	ldr	r1, [r7, #12]
 800bf30:	fab1 f181 	clz	r1, r1
 800bf34:	b2c9      	uxtb	r1, r1
 800bf36:	408b      	lsls	r3, r1
 800bf38:	431a      	orrs	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3e:	085b      	lsrs	r3, r3, #1
 800bf40:	3b01      	subs	r3, #1
 800bf42:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800bf46:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf48:	69b9      	ldr	r1, [r7, #24]
 800bf4a:	fa91 f1a1 	rbit	r1, r1
 800bf4e:	6179      	str	r1, [r7, #20]
  return result;
 800bf50:	6979      	ldr	r1, [r7, #20]
 800bf52:	fab1 f181 	clz	r1, r1
 800bf56:	b2c9      	uxtb	r1, r1
 800bf58:	408b      	lsls	r3, r1
 800bf5a:	431a      	orrs	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf60:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800bf64:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bf66:	6a39      	ldr	r1, [r7, #32]
 800bf68:	fa91 f1a1 	rbit	r1, r1
 800bf6c:	61f9      	str	r1, [r7, #28]
  return result;
 800bf6e:	69f9      	ldr	r1, [r7, #28]
 800bf70:	fab1 f181 	clz	r1, r1
 800bf74:	b2c9      	uxtb	r1, r1
 800bf76:	408b      	lsls	r3, r1
 800bf78:	4934      	ldr	r1, [pc, #208]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf7e:	4b34      	ldr	r3, [pc, #208]	; (800c050 <HAL_RCC_OscConfig+0x4d0>)
 800bf80:	2201      	movs	r2, #1
 800bf82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf84:	f7fc fdbc 	bl	8008b00 <HAL_GetTick>
 800bf88:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf8a:	e008      	b.n	800bf9e <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf8c:	f7fc fdb8 	bl	8008b00 <HAL_GetTick>
 800bf90:	4602      	mov	r2, r0
 800bf92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf94:	1ad3      	subs	r3, r2, r3
 800bf96:	2b64      	cmp	r3, #100	; 0x64
 800bf98:	d901      	bls.n	800bf9e <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 800bf9a:	2303      	movs	r3, #3
 800bf9c:	e04d      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bf9e:	4b2b      	ldr	r3, [pc, #172]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d0f0      	beq.n	800bf8c <HAL_RCC_OscConfig+0x40c>
 800bfaa:	e045      	b.n	800c038 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfac:	4b28      	ldr	r3, [pc, #160]	; (800c050 <HAL_RCC_OscConfig+0x4d0>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfb2:	f7fc fda5 	bl	8008b00 <HAL_GetTick>
 800bfb6:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfb8:	e008      	b.n	800bfcc <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfba:	f7fc fda1 	bl	8008b00 <HAL_GetTick>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	2b64      	cmp	r3, #100	; 0x64
 800bfc6:	d901      	bls.n	800bfcc <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 800bfc8:	2303      	movs	r3, #3
 800bfca:	e036      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bfcc:	4b1f      	ldr	r3, [pc, #124]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f0      	bne.n	800bfba <HAL_RCC_OscConfig+0x43a>
 800bfd8:	e02e      	b.n	800c038 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d101      	bne.n	800bfe6 <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e029      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800bfe6:	4b19      	ldr	r3, [pc, #100]	; (800c04c <HAL_RCC_OscConfig+0x4cc>)
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bfec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	69db      	ldr	r3, [r3, #28]
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d11c      	bne.n	800c034 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bffc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c004:	429a      	cmp	r2, r3
 800c006:	d115      	bne.n	800c034 <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c00a:	099b      	lsrs	r3, r3, #6
 800c00c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c014:	429a      	cmp	r2, r3
 800c016:	d10d      	bne.n	800c034 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c022:	429a      	cmp	r2, r3
 800c024:	d106      	bne.n	800c034 <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c030:	429a      	cmp	r2, r3
 800c032:	d001      	beq.n	800c038 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e000      	b.n	800c03a <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3740      	adds	r7, #64	; 0x40
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	40007000 	.word	0x40007000
 800c048:	40023870 	.word	0x40023870
 800c04c:	40023800 	.word	0x40023800
 800c050:	42470060 	.word	0x42470060

0800c054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d101      	bne.n	800c068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e0d2      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c068:	4b6b      	ldr	r3, [pc, #428]	; (800c218 <HAL_RCC_ClockConfig+0x1c4>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 030f 	and.w	r3, r3, #15
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	429a      	cmp	r2, r3
 800c074:	d90c      	bls.n	800c090 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c076:	4b68      	ldr	r3, [pc, #416]	; (800c218 <HAL_RCC_ClockConfig+0x1c4>)
 800c078:	683a      	ldr	r2, [r7, #0]
 800c07a:	b2d2      	uxtb	r2, r2
 800c07c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c07e:	4b66      	ldr	r3, [pc, #408]	; (800c218 <HAL_RCC_ClockConfig+0x1c4>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 030f 	and.w	r3, r3, #15
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d001      	beq.n	800c090 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e0be      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f003 0302 	and.w	r3, r3, #2
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d020      	beq.n	800c0de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f003 0304 	and.w	r3, r3, #4
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d005      	beq.n	800c0b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c0a8:	4b5c      	ldr	r3, [pc, #368]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	4a5b      	ldr	r2, [pc, #364]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c0b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f003 0308 	and.w	r3, r3, #8
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d005      	beq.n	800c0cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800c0c0:	4b56      	ldr	r3, [pc, #344]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	4a55      	ldr	r2, [pc, #340]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c0ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0cc:	4b53      	ldr	r3, [pc, #332]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	4950      	ldr	r1, [pc, #320]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0301 	and.w	r3, r3, #1
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d040      	beq.n	800c16c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d107      	bne.n	800c102 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0f2:	4b4a      	ldr	r3, [pc, #296]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d115      	bne.n	800c12a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e085      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	2b02      	cmp	r3, #2
 800c108:	d107      	bne.n	800c11a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c10a:	4b44      	ldr	r3, [pc, #272]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d109      	bne.n	800c12a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e079      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c11a:	4b40      	ldr	r3, [pc, #256]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f003 0302 	and.w	r3, r3, #2
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	e071      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c12a:	4b3c      	ldr	r3, [pc, #240]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	f023 0203 	bic.w	r2, r3, #3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	4939      	ldr	r1, [pc, #228]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c138:	4313      	orrs	r3, r2
 800c13a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c13c:	f7fc fce0 	bl	8008b00 <HAL_GetTick>
 800c140:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c142:	e00a      	b.n	800c15a <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c144:	f7fc fcdc 	bl	8008b00 <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c152:	4293      	cmp	r3, r2
 800c154:	d901      	bls.n	800c15a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c156:	2303      	movs	r3, #3
 800c158:	e059      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c15a:	4b30      	ldr	r3, [pc, #192]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	f003 020c 	and.w	r2, r3, #12
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	685b      	ldr	r3, [r3, #4]
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	429a      	cmp	r2, r3
 800c16a:	d1eb      	bne.n	800c144 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c16c:	4b2a      	ldr	r3, [pc, #168]	; (800c218 <HAL_RCC_ClockConfig+0x1c4>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 030f 	and.w	r3, r3, #15
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	429a      	cmp	r2, r3
 800c178:	d20c      	bcs.n	800c194 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c17a:	4b27      	ldr	r3, [pc, #156]	; (800c218 <HAL_RCC_ClockConfig+0x1c4>)
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	b2d2      	uxtb	r2, r2
 800c180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c182:	4b25      	ldr	r3, [pc, #148]	; (800c218 <HAL_RCC_ClockConfig+0x1c4>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	683a      	ldr	r2, [r7, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d001      	beq.n	800c194 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e03c      	b.n	800c20e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f003 0304 	and.w	r3, r3, #4
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d008      	beq.n	800c1b2 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c1a0:	4b1e      	ldr	r3, [pc, #120]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68db      	ldr	r3, [r3, #12]
 800c1ac:	491b      	ldr	r1, [pc, #108]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f003 0308 	and.w	r3, r3, #8
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d009      	beq.n	800c1d2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c1be:	4b17      	ldr	r3, [pc, #92]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c1c0:	689b      	ldr	r3, [r3, #8]
 800c1c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	4913      	ldr	r1, [pc, #76]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c1ce:	4313      	orrs	r3, r2
 800c1d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800c1d2:	f000 f82b 	bl	800c22c <HAL_RCC_GetSysClockFreq>
 800c1d6:	4601      	mov	r1, r0
 800c1d8:	4b10      	ldr	r3, [pc, #64]	; (800c21c <HAL_RCC_ClockConfig+0x1c8>)
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c1e0:	22f0      	movs	r2, #240	; 0xf0
 800c1e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	fa92 f2a2 	rbit	r2, r2
 800c1ea:	60fa      	str	r2, [r7, #12]
  return result;
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	fab2 f282 	clz	r2, r2
 800c1f2:	b2d2      	uxtb	r2, r2
 800c1f4:	40d3      	lsrs	r3, r2
 800c1f6:	4a0a      	ldr	r2, [pc, #40]	; (800c220 <HAL_RCC_ClockConfig+0x1cc>)
 800c1f8:	5cd3      	ldrb	r3, [r2, r3]
 800c1fa:	fa21 f303 	lsr.w	r3, r1, r3
 800c1fe:	4a09      	ldr	r2, [pc, #36]	; (800c224 <HAL_RCC_ClockConfig+0x1d0>)
 800c200:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c202:	4b09      	ldr	r3, [pc, #36]	; (800c228 <HAL_RCC_ClockConfig+0x1d4>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4618      	mov	r0, r3
 800c208:	f7fc fc38 	bl	8008a7c <HAL_InitTick>

  return HAL_OK;
 800c20c:	2300      	movs	r3, #0
}
 800c20e:	4618      	mov	r0, r3
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	40023c00 	.word	0x40023c00
 800c21c:	40023800 	.word	0x40023800
 800c220:	08010a0c 	.word	0x08010a0c
 800c224:	20000054 	.word	0x20000054
 800c228:	20000058 	.word	0x20000058

0800c22c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c232:	2300      	movs	r3, #0
 800c234:	607b      	str	r3, [r7, #4]
 800c236:	2300      	movs	r3, #0
 800c238:	60fb      	str	r3, [r7, #12]
 800c23a:	2300      	movs	r3, #0
 800c23c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c23e:	2300      	movs	r3, #0
 800c240:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c242:	4b50      	ldr	r3, [pc, #320]	; (800c384 <HAL_RCC_GetSysClockFreq+0x158>)
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f003 030c 	and.w	r3, r3, #12
 800c24a:	2b04      	cmp	r3, #4
 800c24c:	d007      	beq.n	800c25e <HAL_RCC_GetSysClockFreq+0x32>
 800c24e:	2b08      	cmp	r3, #8
 800c250:	d008      	beq.n	800c264 <HAL_RCC_GetSysClockFreq+0x38>
 800c252:	2b00      	cmp	r3, #0
 800c254:	f040 808d 	bne.w	800c372 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c258:	4b4b      	ldr	r3, [pc, #300]	; (800c388 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c25a:	60bb      	str	r3, [r7, #8]
       break;
 800c25c:	e08c      	b.n	800c378 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c25e:	4b4b      	ldr	r3, [pc, #300]	; (800c38c <HAL_RCC_GetSysClockFreq+0x160>)
 800c260:	60bb      	str	r3, [r7, #8]
      break;
 800c262:	e089      	b.n	800c378 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c264:	4b47      	ldr	r3, [pc, #284]	; (800c384 <HAL_RCC_GetSysClockFreq+0x158>)
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c26c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c26e:	4b45      	ldr	r3, [pc, #276]	; (800c384 <HAL_RCC_GetSysClockFreq+0x158>)
 800c270:	685b      	ldr	r3, [r3, #4]
 800c272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d023      	beq.n	800c2c2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c27a:	4b42      	ldr	r3, [pc, #264]	; (800c384 <HAL_RCC_GetSysClockFreq+0x158>)
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	099b      	lsrs	r3, r3, #6
 800c280:	f04f 0400 	mov.w	r4, #0
 800c284:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	ea03 0501 	and.w	r5, r3, r1
 800c290:	ea04 0602 	and.w	r6, r4, r2
 800c294:	4a3d      	ldr	r2, [pc, #244]	; (800c38c <HAL_RCC_GetSysClockFreq+0x160>)
 800c296:	fb02 f106 	mul.w	r1, r2, r6
 800c29a:	2200      	movs	r2, #0
 800c29c:	fb02 f205 	mul.w	r2, r2, r5
 800c2a0:	440a      	add	r2, r1
 800c2a2:	493a      	ldr	r1, [pc, #232]	; (800c38c <HAL_RCC_GetSysClockFreq+0x160>)
 800c2a4:	fba5 0101 	umull	r0, r1, r5, r1
 800c2a8:	1853      	adds	r3, r2, r1
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f04f 0400 	mov.w	r4, #0
 800c2b2:	461a      	mov	r2, r3
 800c2b4:	4623      	mov	r3, r4
 800c2b6:	f7f4 ff67 	bl	8001188 <__aeabi_uldivmod>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	460c      	mov	r4, r1
 800c2be:	60fb      	str	r3, [r7, #12]
 800c2c0:	e049      	b.n	800c356 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c2c2:	4b30      	ldr	r3, [pc, #192]	; (800c384 <HAL_RCC_GetSysClockFreq+0x158>)
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	099b      	lsrs	r3, r3, #6
 800c2c8:	f04f 0400 	mov.w	r4, #0
 800c2cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	ea03 0501 	and.w	r5, r3, r1
 800c2d8:	ea04 0602 	and.w	r6, r4, r2
 800c2dc:	4629      	mov	r1, r5
 800c2de:	4632      	mov	r2, r6
 800c2e0:	f04f 0300 	mov.w	r3, #0
 800c2e4:	f04f 0400 	mov.w	r4, #0
 800c2e8:	0154      	lsls	r4, r2, #5
 800c2ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c2ee:	014b      	lsls	r3, r1, #5
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	1b49      	subs	r1, r1, r5
 800c2f6:	eb62 0206 	sbc.w	r2, r2, r6
 800c2fa:	f04f 0300 	mov.w	r3, #0
 800c2fe:	f04f 0400 	mov.w	r4, #0
 800c302:	0194      	lsls	r4, r2, #6
 800c304:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c308:	018b      	lsls	r3, r1, #6
 800c30a:	1a5b      	subs	r3, r3, r1
 800c30c:	eb64 0402 	sbc.w	r4, r4, r2
 800c310:	f04f 0100 	mov.w	r1, #0
 800c314:	f04f 0200 	mov.w	r2, #0
 800c318:	00e2      	lsls	r2, r4, #3
 800c31a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c31e:	00d9      	lsls	r1, r3, #3
 800c320:	460b      	mov	r3, r1
 800c322:	4614      	mov	r4, r2
 800c324:	195b      	adds	r3, r3, r5
 800c326:	eb44 0406 	adc.w	r4, r4, r6
 800c32a:	f04f 0100 	mov.w	r1, #0
 800c32e:	f04f 0200 	mov.w	r2, #0
 800c332:	02a2      	lsls	r2, r4, #10
 800c334:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c338:	0299      	lsls	r1, r3, #10
 800c33a:	460b      	mov	r3, r1
 800c33c:	4614      	mov	r4, r2
 800c33e:	4618      	mov	r0, r3
 800c340:	4621      	mov	r1, r4
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	f04f 0400 	mov.w	r4, #0
 800c348:	461a      	mov	r2, r3
 800c34a:	4623      	mov	r3, r4
 800c34c:	f7f4 ff1c 	bl	8001188 <__aeabi_uldivmod>
 800c350:	4603      	mov	r3, r0
 800c352:	460c      	mov	r4, r1
 800c354:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c356:	4b0b      	ldr	r3, [pc, #44]	; (800c384 <HAL_RCC_GetSysClockFreq+0x158>)
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	0c1b      	lsrs	r3, r3, #16
 800c35c:	f003 0303 	and.w	r3, r3, #3
 800c360:	3301      	adds	r3, #1
 800c362:	005b      	lsls	r3, r3, #1
 800c364:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c366:	68fa      	ldr	r2, [r7, #12]
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c36e:	60bb      	str	r3, [r7, #8]
      break;
 800c370:	e002      	b.n	800c378 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c372:	4b05      	ldr	r3, [pc, #20]	; (800c388 <HAL_RCC_GetSysClockFreq+0x15c>)
 800c374:	60bb      	str	r3, [r7, #8]
      break;
 800c376:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c378:	68bb      	ldr	r3, [r7, #8]
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c382:	bf00      	nop
 800c384:	40023800 	.word	0x40023800
 800c388:	00f42400 	.word	0x00f42400
 800c38c:	017d7840 	.word	0x017d7840

0800c390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c390:	b480      	push	{r7}
 800c392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c394:	4b02      	ldr	r3, [pc, #8]	; (800c3a0 <HAL_RCC_GetHCLKFreq+0x10>)
 800c396:	681b      	ldr	r3, [r3, #0]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bc80      	pop	{r7}
 800c39e:	4770      	bx	lr
 800c3a0:	20000054 	.word	0x20000054

0800c3a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800c3aa:	f7ff fff1 	bl	800c390 <HAL_RCC_GetHCLKFreq>
 800c3ae:	4601      	mov	r1, r0
 800c3b0:	4b0b      	ldr	r3, [pc, #44]	; (800c3e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800c3b8:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800c3bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	fa92 f2a2 	rbit	r2, r2
 800c3c4:	603a      	str	r2, [r7, #0]
  return result;
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	fab2 f282 	clz	r2, r2
 800c3cc:	b2d2      	uxtb	r2, r2
 800c3ce:	40d3      	lsrs	r3, r2
 800c3d0:	4a04      	ldr	r2, [pc, #16]	; (800c3e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 800c3d2:	5cd3      	ldrb	r3, [r2, r3]
 800c3d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}
 800c3e0:	40023800 	.word	0x40023800
 800c3e4:	08010a1c 	.word	0x08010a1c

0800c3e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b082      	sub	sp, #8
 800c3ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800c3ee:	f7ff ffcf 	bl	800c390 <HAL_RCC_GetHCLKFreq>
 800c3f2:	4601      	mov	r1, r0
 800c3f4:	4b0b      	ldr	r3, [pc, #44]	; (800c424 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c3fc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800c400:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	fa92 f2a2 	rbit	r2, r2
 800c408:	603a      	str	r2, [r7, #0]
  return result;
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	fab2 f282 	clz	r2, r2
 800c410:	b2d2      	uxtb	r2, r2
 800c412:	40d3      	lsrs	r3, r2
 800c414:	4a04      	ldr	r2, [pc, #16]	; (800c428 <HAL_RCC_GetPCLK2Freq+0x40>)
 800c416:	5cd3      	ldrb	r3, [r2, r3]
 800c418:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	40023800 	.word	0x40023800
 800c428:	08010a1c 	.word	0x08010a1c

0800c42c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b082      	sub	sp, #8
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d101      	bne.n	800c43e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	e01d      	b.n	800c47a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c444:	b2db      	uxtb	r3, r3
 800c446:	2b00      	cmp	r3, #0
 800c448:	d106      	bne.n	800c458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f7fc f932 	bl	80086bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3304      	adds	r3, #4
 800c468:	4619      	mov	r1, r3
 800c46a:	4610      	mov	r0, r2
 800c46c:	f000 fb74 	bl	800cb58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2201      	movs	r2, #1
 800c474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c478:	2300      	movs	r3, #0
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3708      	adds	r7, #8
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c482:	b480      	push	{r7}
 800c484:	b085      	sub	sp, #20
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2202      	movs	r2, #2
 800c48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b06      	cmp	r3, #6
 800c4a2:	d007      	beq.n	800c4b4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f042 0201 	orr.w	r2, r2, #1
 800c4b2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3714      	adds	r7, #20
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bc80      	pop	{r7}
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68da      	ldr	r2, [r3, #12]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f042 0201 	orr.w	r2, r2, #1
 800c4de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2b06      	cmp	r3, #6
 800c4f0:	d007      	beq.n	800c502 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f042 0201 	orr.w	r2, r2, #1
 800c500:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c502:	2300      	movs	r3, #0
}
 800c504:	4618      	mov	r0, r3
 800c506:	3714      	adds	r7, #20
 800c508:	46bd      	mov	sp, r7
 800c50a:	bc80      	pop	{r7}
 800c50c:	4770      	bx	lr

0800c50e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b082      	sub	sp, #8
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d101      	bne.n	800c520 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c51c:	2301      	movs	r3, #1
 800c51e:	e01d      	b.n	800c55c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c526:	b2db      	uxtb	r3, r3
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d106      	bne.n	800c53a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f815 	bl	800c564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2202      	movs	r2, #2
 800c53e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	3304      	adds	r3, #4
 800c54a:	4619      	mov	r1, r3
 800c54c:	4610      	mov	r0, r2
 800c54e:	f000 fb03 	bl	800cb58 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c56c:	bf00      	nop
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	bc80      	pop	{r7}
 800c574:	4770      	bx	lr
	...

0800c578 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2201      	movs	r2, #1
 800c588:	6839      	ldr	r1, [r7, #0]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f000 fdc4 	bl	800d118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4a15      	ldr	r2, [pc, #84]	; (800c5ec <HAL_TIM_PWM_Start+0x74>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d004      	beq.n	800c5a4 <HAL_TIM_PWM_Start+0x2c>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a14      	ldr	r2, [pc, #80]	; (800c5f0 <HAL_TIM_PWM_Start+0x78>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d101      	bne.n	800c5a8 <HAL_TIM_PWM_Start+0x30>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e000      	b.n	800c5aa <HAL_TIM_PWM_Start+0x32>
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d007      	beq.n	800c5be <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f003 0307 	and.w	r3, r3, #7
 800c5c8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b06      	cmp	r3, #6
 800c5ce:	d007      	beq.n	800c5e0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f042 0201 	orr.w	r2, r2, #1
 800c5de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3710      	adds	r7, #16
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	40010000 	.word	0x40010000
 800c5f0:	40010400 	.word	0x40010400

0800c5f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	691b      	ldr	r3, [r3, #16]
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b02      	cmp	r3, #2
 800c608:	d122      	bne.n	800c650 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68db      	ldr	r3, [r3, #12]
 800c610:	f003 0302 	and.w	r3, r3, #2
 800c614:	2b02      	cmp	r3, #2
 800c616:	d11b      	bne.n	800c650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f06f 0202 	mvn.w	r2, #2
 800c620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	699b      	ldr	r3, [r3, #24]
 800c62e:	f003 0303 	and.w	r3, r3, #3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 fa73 	bl	800cb22 <HAL_TIM_IC_CaptureCallback>
 800c63c:	e005      	b.n	800c64a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 fa66 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 fa75 	bl	800cb34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	f003 0304 	and.w	r3, r3, #4
 800c65a:	2b04      	cmp	r3, #4
 800c65c:	d122      	bne.n	800c6a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	2b04      	cmp	r3, #4
 800c66a:	d11b      	bne.n	800c6a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f06f 0204 	mvn.w	r2, #4
 800c674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2202      	movs	r2, #2
 800c67a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	699b      	ldr	r3, [r3, #24]
 800c682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c686:	2b00      	cmp	r3, #0
 800c688:	d003      	beq.n	800c692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f000 fa49 	bl	800cb22 <HAL_TIM_IC_CaptureCallback>
 800c690:	e005      	b.n	800c69e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f000 fa3c 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fa4b 	bl	800cb34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	691b      	ldr	r3, [r3, #16]
 800c6aa:	f003 0308 	and.w	r3, r3, #8
 800c6ae:	2b08      	cmp	r3, #8
 800c6b0:	d122      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	f003 0308 	and.w	r3, r3, #8
 800c6bc:	2b08      	cmp	r3, #8
 800c6be:	d11b      	bne.n	800c6f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f06f 0208 	mvn.w	r2, #8
 800c6c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2204      	movs	r2, #4
 800c6ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	69db      	ldr	r3, [r3, #28]
 800c6d6:	f003 0303 	and.w	r3, r3, #3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d003      	beq.n	800c6e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 fa1f 	bl	800cb22 <HAL_TIM_IC_CaptureCallback>
 800c6e4:	e005      	b.n	800c6f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fa12 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 fa21 	bl	800cb34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	691b      	ldr	r3, [r3, #16]
 800c6fe:	f003 0310 	and.w	r3, r3, #16
 800c702:	2b10      	cmp	r3, #16
 800c704:	d122      	bne.n	800c74c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f003 0310 	and.w	r3, r3, #16
 800c710:	2b10      	cmp	r3, #16
 800c712:	d11b      	bne.n	800c74c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f06f 0210 	mvn.w	r2, #16
 800c71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2208      	movs	r2, #8
 800c722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	69db      	ldr	r3, [r3, #28]
 800c72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d003      	beq.n	800c73a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f9f5 	bl	800cb22 <HAL_TIM_IC_CaptureCallback>
 800c738:	e005      	b.n	800c746 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f9e8 	bl	800cb10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f9f7 	bl	800cb34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b01      	cmp	r3, #1
 800c758:	d10e      	bne.n	800c778 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	f003 0301 	and.w	r3, r3, #1
 800c764:	2b01      	cmp	r3, #1
 800c766:	d107      	bne.n	800c778 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f06f 0201 	mvn.w	r2, #1
 800c770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 f9c3 	bl	800cafe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c782:	2b80      	cmp	r3, #128	; 0x80
 800c784:	d10e      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c790:	2b80      	cmp	r3, #128	; 0x80
 800c792:	d107      	bne.n	800c7a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c79c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 fd7c 	bl	800d29c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	691b      	ldr	r3, [r3, #16]
 800c7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7ae:	2b40      	cmp	r3, #64	; 0x40
 800c7b0:	d10e      	bne.n	800c7d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7bc:	2b40      	cmp	r3, #64	; 0x40
 800c7be:	d107      	bne.n	800c7d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c7c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f9bb 	bl	800cb46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	691b      	ldr	r3, [r3, #16]
 800c7d6:	f003 0320 	and.w	r3, r3, #32
 800c7da:	2b20      	cmp	r3, #32
 800c7dc:	d10e      	bne.n	800c7fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f003 0320 	and.w	r3, r3, #32
 800c7e8:	2b20      	cmp	r3, #32
 800c7ea:	d107      	bne.n	800c7fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	f06f 0220 	mvn.w	r2, #32
 800c7f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fd47 	bl	800d28a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7fc:	bf00      	nop
 800c7fe:	3708      	adds	r7, #8
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c816:	2b01      	cmp	r3, #1
 800c818:	d101      	bne.n	800c81e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c81a:	2302      	movs	r3, #2
 800c81c:	e0b4      	b.n	800c988 <HAL_TIM_PWM_ConfigChannel+0x184>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2201      	movs	r2, #1
 800c822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2202      	movs	r2, #2
 800c82a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b0c      	cmp	r3, #12
 800c832:	f200 809f 	bhi.w	800c974 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c836:	a201      	add	r2, pc, #4	; (adr r2, 800c83c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c83c:	0800c871 	.word	0x0800c871
 800c840:	0800c975 	.word	0x0800c975
 800c844:	0800c975 	.word	0x0800c975
 800c848:	0800c975 	.word	0x0800c975
 800c84c:	0800c8b1 	.word	0x0800c8b1
 800c850:	0800c975 	.word	0x0800c975
 800c854:	0800c975 	.word	0x0800c975
 800c858:	0800c975 	.word	0x0800c975
 800c85c:	0800c8f3 	.word	0x0800c8f3
 800c860:	0800c975 	.word	0x0800c975
 800c864:	0800c975 	.word	0x0800c975
 800c868:	0800c975 	.word	0x0800c975
 800c86c:	0800c933 	.word	0x0800c933
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fa0c 	bl	800cc94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	699a      	ldr	r2, [r3, #24]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f042 0208 	orr.w	r2, r2, #8
 800c88a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	699a      	ldr	r2, [r3, #24]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f022 0204 	bic.w	r2, r2, #4
 800c89a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6999      	ldr	r1, [r3, #24]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	691a      	ldr	r2, [r3, #16]
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	430a      	orrs	r2, r1
 800c8ac:	619a      	str	r2, [r3, #24]
      break;
 800c8ae:	e062      	b.n	800c976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	68b9      	ldr	r1, [r7, #8]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f000 fa5c 	bl	800cd74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	699a      	ldr	r2, [r3, #24]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	699a      	ldr	r2, [r3, #24]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6999      	ldr	r1, [r3, #24]
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	021a      	lsls	r2, r3, #8
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	430a      	orrs	r2, r1
 800c8ee:	619a      	str	r2, [r3, #24]
      break;
 800c8f0:	e041      	b.n	800c976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68b9      	ldr	r1, [r7, #8]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 faaf 	bl	800ce5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	69da      	ldr	r2, [r3, #28]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f042 0208 	orr.w	r2, r2, #8
 800c90c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69da      	ldr	r2, [r3, #28]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f022 0204 	bic.w	r2, r2, #4
 800c91c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	69d9      	ldr	r1, [r3, #28]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	430a      	orrs	r2, r1
 800c92e:	61da      	str	r2, [r3, #28]
      break;
 800c930:	e021      	b.n	800c976 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68b9      	ldr	r1, [r7, #8]
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 fb03 	bl	800cf44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	69da      	ldr	r2, [r3, #28]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c94c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	69da      	ldr	r2, [r3, #28]
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c95c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69d9      	ldr	r1, [r3, #28]
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	021a      	lsls	r2, r3, #8
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	61da      	str	r2, [r3, #28]
      break;
 800c972:	e000      	b.n	800c976 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c974:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2201      	movs	r2, #1
 800c97a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2200      	movs	r2, #0
 800c982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3710      	adds	r7, #16
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d101      	bne.n	800c9a8 <HAL_TIM_ConfigClockSource+0x18>
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	e0a6      	b.n	800caf6 <HAL_TIM_ConfigClockSource+0x166>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2202      	movs	r2, #2
 800c9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c9c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c9ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	2b40      	cmp	r3, #64	; 0x40
 800c9de:	d067      	beq.n	800cab0 <HAL_TIM_ConfigClockSource+0x120>
 800c9e0:	2b40      	cmp	r3, #64	; 0x40
 800c9e2:	d80b      	bhi.n	800c9fc <HAL_TIM_ConfigClockSource+0x6c>
 800c9e4:	2b10      	cmp	r3, #16
 800c9e6:	d073      	beq.n	800cad0 <HAL_TIM_ConfigClockSource+0x140>
 800c9e8:	2b10      	cmp	r3, #16
 800c9ea:	d802      	bhi.n	800c9f2 <HAL_TIM_ConfigClockSource+0x62>
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d06f      	beq.n	800cad0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c9f0:	e078      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9f2:	2b20      	cmp	r3, #32
 800c9f4:	d06c      	beq.n	800cad0 <HAL_TIM_ConfigClockSource+0x140>
 800c9f6:	2b30      	cmp	r3, #48	; 0x30
 800c9f8:	d06a      	beq.n	800cad0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c9fa:	e073      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9fc:	2b70      	cmp	r3, #112	; 0x70
 800c9fe:	d00d      	beq.n	800ca1c <HAL_TIM_ConfigClockSource+0x8c>
 800ca00:	2b70      	cmp	r3, #112	; 0x70
 800ca02:	d804      	bhi.n	800ca0e <HAL_TIM_ConfigClockSource+0x7e>
 800ca04:	2b50      	cmp	r3, #80	; 0x50
 800ca06:	d033      	beq.n	800ca70 <HAL_TIM_ConfigClockSource+0xe0>
 800ca08:	2b60      	cmp	r3, #96	; 0x60
 800ca0a:	d041      	beq.n	800ca90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ca0c:	e06a      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ca0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca12:	d066      	beq.n	800cae2 <HAL_TIM_ConfigClockSource+0x152>
 800ca14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca18:	d017      	beq.n	800ca4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ca1a:	e063      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6818      	ldr	r0, [r3, #0]
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	6899      	ldr	r1, [r3, #8]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685a      	ldr	r2, [r3, #4]
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	f000 fb55 	bl	800d0da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	68fa      	ldr	r2, [r7, #12]
 800ca46:	609a      	str	r2, [r3, #8]
      break;
 800ca48:	e04c      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6818      	ldr	r0, [r3, #0]
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	6899      	ldr	r1, [r3, #8]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	685a      	ldr	r2, [r3, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	68db      	ldr	r3, [r3, #12]
 800ca5a:	f000 fb3e 	bl	800d0da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	689a      	ldr	r2, [r3, #8]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca6c:	609a      	str	r2, [r3, #8]
      break;
 800ca6e:	e039      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6818      	ldr	r0, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	6859      	ldr	r1, [r3, #4]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	68db      	ldr	r3, [r3, #12]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	f000 fab5 	bl	800cfec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2150      	movs	r1, #80	; 0x50
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f000 fb0c 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800ca8e:	e029      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6818      	ldr	r0, [r3, #0]
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	6859      	ldr	r1, [r3, #4]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	68db      	ldr	r3, [r3, #12]
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	f000 fad3 	bl	800d048 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	2160      	movs	r1, #96	; 0x60
 800caa8:	4618      	mov	r0, r3
 800caaa:	f000 fafc 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800caae:	e019      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6818      	ldr	r0, [r3, #0]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	6859      	ldr	r1, [r3, #4]
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	461a      	mov	r2, r3
 800cabe:	f000 fa95 	bl	800cfec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2140      	movs	r1, #64	; 0x40
 800cac8:	4618      	mov	r0, r3
 800caca:	f000 faec 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800cace:	e009      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4619      	mov	r1, r3
 800cada:	4610      	mov	r0, r2
 800cadc:	f000 fae3 	bl	800d0a6 <TIM_ITRx_SetConfig>
      break;
 800cae0:	e000      	b.n	800cae4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2200      	movs	r2, #0
 800caf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caf4:	2300      	movs	r3, #0
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}

0800cafe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cafe:	b480      	push	{r7}
 800cb00:	b083      	sub	sp, #12
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800cb06:	bf00      	nop
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bc80      	pop	{r7}
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bc80      	pop	{r7}
 800cb20:	4770      	bx	lr

0800cb22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bc80      	pop	{r7}
 800cb32:	4770      	bx	lr

0800cb34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb3c:	bf00      	nop
 800cb3e:	370c      	adds	r7, #12
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bc80      	pop	{r7}
 800cb44:	4770      	bx	lr

0800cb46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb46:	b480      	push	{r7}
 800cb48:	b083      	sub	sp, #12
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb4e:	bf00      	nop
 800cb50:	370c      	adds	r7, #12
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bc80      	pop	{r7}
 800cb56:	4770      	bx	lr

0800cb58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a3f      	ldr	r2, [pc, #252]	; (800cc68 <TIM_Base_SetConfig+0x110>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d013      	beq.n	800cb98 <TIM_Base_SetConfig+0x40>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb76:	d00f      	beq.n	800cb98 <TIM_Base_SetConfig+0x40>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a3c      	ldr	r2, [pc, #240]	; (800cc6c <TIM_Base_SetConfig+0x114>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d00b      	beq.n	800cb98 <TIM_Base_SetConfig+0x40>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a3b      	ldr	r2, [pc, #236]	; (800cc70 <TIM_Base_SetConfig+0x118>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d007      	beq.n	800cb98 <TIM_Base_SetConfig+0x40>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	4a3a      	ldr	r2, [pc, #232]	; (800cc74 <TIM_Base_SetConfig+0x11c>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d003      	beq.n	800cb98 <TIM_Base_SetConfig+0x40>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4a39      	ldr	r2, [pc, #228]	; (800cc78 <TIM_Base_SetConfig+0x120>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d108      	bne.n	800cbaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a2e      	ldr	r2, [pc, #184]	; (800cc68 <TIM_Base_SetConfig+0x110>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d02b      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cbb8:	d027      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a2b      	ldr	r2, [pc, #172]	; (800cc6c <TIM_Base_SetConfig+0x114>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d023      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a2a      	ldr	r2, [pc, #168]	; (800cc70 <TIM_Base_SetConfig+0x118>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d01f      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a29      	ldr	r2, [pc, #164]	; (800cc74 <TIM_Base_SetConfig+0x11c>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d01b      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a28      	ldr	r2, [pc, #160]	; (800cc78 <TIM_Base_SetConfig+0x120>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d017      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a27      	ldr	r2, [pc, #156]	; (800cc7c <TIM_Base_SetConfig+0x124>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d013      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a26      	ldr	r2, [pc, #152]	; (800cc80 <TIM_Base_SetConfig+0x128>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d00f      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a25      	ldr	r2, [pc, #148]	; (800cc84 <TIM_Base_SetConfig+0x12c>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d00b      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a24      	ldr	r2, [pc, #144]	; (800cc88 <TIM_Base_SetConfig+0x130>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d007      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a23      	ldr	r2, [pc, #140]	; (800cc8c <TIM_Base_SetConfig+0x134>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d003      	beq.n	800cc0a <TIM_Base_SetConfig+0xb2>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a22      	ldr	r2, [pc, #136]	; (800cc90 <TIM_Base_SetConfig+0x138>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d108      	bne.n	800cc1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	689a      	ldr	r2, [r3, #8]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	4a09      	ldr	r2, [pc, #36]	; (800cc68 <TIM_Base_SetConfig+0x110>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d003      	beq.n	800cc50 <TIM_Base_SetConfig+0xf8>
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	4a0b      	ldr	r2, [pc, #44]	; (800cc78 <TIM_Base_SetConfig+0x120>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d103      	bne.n	800cc58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	691a      	ldr	r2, [r3, #16]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	615a      	str	r2, [r3, #20]
}
 800cc5e:	bf00      	nop
 800cc60:	3714      	adds	r7, #20
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bc80      	pop	{r7}
 800cc66:	4770      	bx	lr
 800cc68:	40010000 	.word	0x40010000
 800cc6c:	40000400 	.word	0x40000400
 800cc70:	40000800 	.word	0x40000800
 800cc74:	40000c00 	.word	0x40000c00
 800cc78:	40010400 	.word	0x40010400
 800cc7c:	40014000 	.word	0x40014000
 800cc80:	40014400 	.word	0x40014400
 800cc84:	40014800 	.word	0x40014800
 800cc88:	40001800 	.word	0x40001800
 800cc8c:	40001c00 	.word	0x40001c00
 800cc90:	40002000 	.word	0x40002000

0800cc94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b087      	sub	sp, #28
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6a1b      	ldr	r3, [r3, #32]
 800cca2:	f023 0201 	bic.w	r2, r3, #1
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	699b      	ldr	r3, [r3, #24]
 800ccba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	f023 0303 	bic.w	r3, r3, #3
 800ccca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68fa      	ldr	r2, [r7, #12]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	f023 0302 	bic.w	r3, r3, #2
 800ccdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	689b      	ldr	r3, [r3, #8]
 800cce2:	697a      	ldr	r2, [r7, #20]
 800cce4:	4313      	orrs	r3, r2
 800cce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	4a20      	ldr	r2, [pc, #128]	; (800cd6c <TIM_OC1_SetConfig+0xd8>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d003      	beq.n	800ccf8 <TIM_OC1_SetConfig+0x64>
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	4a1f      	ldr	r2, [pc, #124]	; (800cd70 <TIM_OC1_SetConfig+0xdc>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d10c      	bne.n	800cd12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f023 0308 	bic.w	r3, r3, #8
 800ccfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	697a      	ldr	r2, [r7, #20]
 800cd06:	4313      	orrs	r3, r2
 800cd08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	f023 0304 	bic.w	r3, r3, #4
 800cd10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a15      	ldr	r2, [pc, #84]	; (800cd6c <TIM_OC1_SetConfig+0xd8>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d003      	beq.n	800cd22 <TIM_OC1_SetConfig+0x8e>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a14      	ldr	r2, [pc, #80]	; (800cd70 <TIM_OC1_SetConfig+0xdc>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d111      	bne.n	800cd46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	693a      	ldr	r2, [r7, #16]
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	699b      	ldr	r3, [r3, #24]
 800cd40:	693a      	ldr	r2, [r7, #16]
 800cd42:	4313      	orrs	r3, r2
 800cd44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	693a      	ldr	r2, [r7, #16]
 800cd4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	685a      	ldr	r2, [r3, #4]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	697a      	ldr	r2, [r7, #20]
 800cd5e:	621a      	str	r2, [r3, #32]
}
 800cd60:	bf00      	nop
 800cd62:	371c      	adds	r7, #28
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bc80      	pop	{r7}
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	40010000 	.word	0x40010000
 800cd70:	40010400 	.word	0x40010400

0800cd74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	6a1b      	ldr	r3, [r3, #32]
 800cd82:	f023 0210 	bic.w	r2, r3, #16
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6a1b      	ldr	r3, [r3, #32]
 800cd8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	699b      	ldr	r3, [r3, #24]
 800cd9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cda2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cdaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	021b      	lsls	r3, r3, #8
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4313      	orrs	r3, r2
 800cdb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	f023 0320 	bic.w	r3, r3, #32
 800cdbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	4a21      	ldr	r2, [pc, #132]	; (800ce54 <TIM_OC2_SetConfig+0xe0>)
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d003      	beq.n	800cddc <TIM_OC2_SetConfig+0x68>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a20      	ldr	r2, [pc, #128]	; (800ce58 <TIM_OC2_SetConfig+0xe4>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d10d      	bne.n	800cdf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cde2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	68db      	ldr	r3, [r3, #12]
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	697a      	ldr	r2, [r7, #20]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a16      	ldr	r2, [pc, #88]	; (800ce54 <TIM_OC2_SetConfig+0xe0>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d003      	beq.n	800ce08 <TIM_OC2_SetConfig+0x94>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4a15      	ldr	r2, [pc, #84]	; (800ce58 <TIM_OC2_SetConfig+0xe4>)
 800ce04:	4293      	cmp	r3, r2
 800ce06:	d113      	bne.n	800ce30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce10:	693b      	ldr	r3, [r7, #16]
 800ce12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	695b      	ldr	r3, [r3, #20]
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	693a      	ldr	r2, [r7, #16]
 800ce20:	4313      	orrs	r3, r2
 800ce22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	009b      	lsls	r3, r3, #2
 800ce2a:	693a      	ldr	r2, [r7, #16]
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	693a      	ldr	r2, [r7, #16]
 800ce34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	621a      	str	r2, [r3, #32]
}
 800ce4a:	bf00      	nop
 800ce4c:	371c      	adds	r7, #28
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bc80      	pop	{r7}
 800ce52:	4770      	bx	lr
 800ce54:	40010000 	.word	0x40010000
 800ce58:	40010400 	.word	0x40010400

0800ce5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce5c:	b480      	push	{r7}
 800ce5e:	b087      	sub	sp, #28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6a1b      	ldr	r3, [r3, #32]
 800ce76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f023 0303 	bic.w	r3, r3, #3
 800ce92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	021b      	lsls	r3, r3, #8
 800ceac:	697a      	ldr	r2, [r7, #20]
 800ceae:	4313      	orrs	r3, r2
 800ceb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4a21      	ldr	r2, [pc, #132]	; (800cf3c <TIM_OC3_SetConfig+0xe0>)
 800ceb6:	4293      	cmp	r3, r2
 800ceb8:	d003      	beq.n	800cec2 <TIM_OC3_SetConfig+0x66>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	4a20      	ldr	r2, [pc, #128]	; (800cf40 <TIM_OC3_SetConfig+0xe4>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d10d      	bne.n	800cede <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	68db      	ldr	r3, [r3, #12]
 800cece:	021b      	lsls	r3, r3, #8
 800ced0:	697a      	ldr	r2, [r7, #20]
 800ced2:	4313      	orrs	r3, r2
 800ced4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cedc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	4a16      	ldr	r2, [pc, #88]	; (800cf3c <TIM_OC3_SetConfig+0xe0>)
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d003      	beq.n	800ceee <TIM_OC3_SetConfig+0x92>
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4a15      	ldr	r2, [pc, #84]	; (800cf40 <TIM_OC3_SetConfig+0xe4>)
 800ceea:	4293      	cmp	r3, r2
 800ceec:	d113      	bne.n	800cf16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cefc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	695b      	ldr	r3, [r3, #20]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	011b      	lsls	r3, r3, #4
 800cf10:	693a      	ldr	r2, [r7, #16]
 800cf12:	4313      	orrs	r3, r2
 800cf14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	693a      	ldr	r2, [r7, #16]
 800cf1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	68fa      	ldr	r2, [r7, #12]
 800cf20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	685a      	ldr	r2, [r3, #4]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	697a      	ldr	r2, [r7, #20]
 800cf2e:	621a      	str	r2, [r3, #32]
}
 800cf30:	bf00      	nop
 800cf32:	371c      	adds	r7, #28
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bc80      	pop	{r7}
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	40010000 	.word	0x40010000
 800cf40:	40010400 	.word	0x40010400

0800cf44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6a1b      	ldr	r3, [r3, #32]
 800cf5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	69db      	ldr	r3, [r3, #28]
 800cf6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	021b      	lsls	r3, r3, #8
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	031b      	lsls	r3, r3, #12
 800cf96:	693a      	ldr	r2, [r7, #16]
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	4a11      	ldr	r2, [pc, #68]	; (800cfe4 <TIM_OC4_SetConfig+0xa0>)
 800cfa0:	4293      	cmp	r3, r2
 800cfa2:	d003      	beq.n	800cfac <TIM_OC4_SetConfig+0x68>
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	4a10      	ldr	r2, [pc, #64]	; (800cfe8 <TIM_OC4_SetConfig+0xa4>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d109      	bne.n	800cfc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	695b      	ldr	r3, [r3, #20]
 800cfb8:	019b      	lsls	r3, r3, #6
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	4313      	orrs	r3, r2
 800cfbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	685a      	ldr	r2, [r3, #4]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	693a      	ldr	r2, [r7, #16]
 800cfd8:	621a      	str	r2, [r3, #32]
}
 800cfda:	bf00      	nop
 800cfdc:	371c      	adds	r7, #28
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bc80      	pop	{r7}
 800cfe2:	4770      	bx	lr
 800cfe4:	40010000 	.word	0x40010000
 800cfe8:	40010400 	.word	0x40010400

0800cfec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6a1b      	ldr	r3, [r3, #32]
 800cffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6a1b      	ldr	r3, [r3, #32]
 800d002:	f023 0201 	bic.w	r2, r3, #1
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	699b      	ldr	r3, [r3, #24]
 800d00e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	011b      	lsls	r3, r3, #4
 800d01c:	693a      	ldr	r2, [r7, #16]
 800d01e:	4313      	orrs	r3, r2
 800d020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f023 030a 	bic.w	r3, r3, #10
 800d028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	4313      	orrs	r3, r2
 800d030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	693a      	ldr	r2, [r7, #16]
 800d036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	697a      	ldr	r2, [r7, #20]
 800d03c:	621a      	str	r2, [r3, #32]
}
 800d03e:	bf00      	nop
 800d040:	371c      	adds	r7, #28
 800d042:	46bd      	mov	sp, r7
 800d044:	bc80      	pop	{r7}
 800d046:	4770      	bx	lr

0800d048 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d048:	b480      	push	{r7}
 800d04a:	b087      	sub	sp, #28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6a1b      	ldr	r3, [r3, #32]
 800d058:	f023 0210 	bic.w	r2, r3, #16
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6a1b      	ldr	r3, [r3, #32]
 800d06a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d072:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	031b      	lsls	r3, r3, #12
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	4313      	orrs	r3, r2
 800d07c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d084:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	011b      	lsls	r3, r3, #4
 800d08a:	693a      	ldr	r2, [r7, #16]
 800d08c:	4313      	orrs	r3, r2
 800d08e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	621a      	str	r2, [r3, #32]
}
 800d09c:	bf00      	nop
 800d09e:	371c      	adds	r7, #28
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bc80      	pop	{r7}
 800d0a4:	4770      	bx	lr

0800d0a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0a6:	b480      	push	{r7}
 800d0a8:	b085      	sub	sp, #20
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	f043 0307 	orr.w	r3, r3, #7
 800d0c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	609a      	str	r2, [r3, #8]
}
 800d0d0:	bf00      	nop
 800d0d2:	3714      	adds	r7, #20
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bc80      	pop	{r7}
 800d0d8:	4770      	bx	lr

0800d0da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0da:	b480      	push	{r7}
 800d0dc:	b087      	sub	sp, #28
 800d0de:	af00      	add	r7, sp, #0
 800d0e0:	60f8      	str	r0, [r7, #12]
 800d0e2:	60b9      	str	r1, [r7, #8]
 800d0e4:	607a      	str	r2, [r7, #4]
 800d0e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	689b      	ldr	r3, [r3, #8]
 800d0ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	021a      	lsls	r2, r3, #8
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	431a      	orrs	r2, r3
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	4313      	orrs	r3, r2
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	4313      	orrs	r3, r2
 800d106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	609a      	str	r2, [r3, #8]
}
 800d10e:	bf00      	nop
 800d110:	371c      	adds	r7, #28
 800d112:	46bd      	mov	sp, r7
 800d114:	bc80      	pop	{r7}
 800d116:	4770      	bx	lr

0800d118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d118:	b480      	push	{r7}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f003 031f 	and.w	r3, r3, #31
 800d12a:	2201      	movs	r2, #1
 800d12c:	fa02 f303 	lsl.w	r3, r2, r3
 800d130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6a1a      	ldr	r2, [r3, #32]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	43db      	mvns	r3, r3
 800d13a:	401a      	ands	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6a1a      	ldr	r2, [r3, #32]
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f003 031f 	and.w	r3, r3, #31
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	fa01 f303 	lsl.w	r3, r1, r3
 800d150:	431a      	orrs	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	621a      	str	r2, [r3, #32]
}
 800d156:	bf00      	nop
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bc80      	pop	{r7}
 800d15e:	4770      	bx	lr

0800d160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d170:	2b01      	cmp	r3, #1
 800d172:	d101      	bne.n	800d178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d174:	2302      	movs	r3, #2
 800d176:	e032      	b.n	800d1de <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2201      	movs	r2, #1
 800d17c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2202      	movs	r2, #2
 800d184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d19e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1b0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	68ba      	ldr	r2, [r7, #8]
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	68ba      	ldr	r2, [r7, #8]
 800d1ca:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3714      	adds	r7, #20
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bc80      	pop	{r7}
 800d1e6:	4770      	bx	lr

0800d1e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d101      	bne.n	800d204 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d200:	2302      	movs	r3, #2
 800d202:	e03d      	b.n	800d280 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	68db      	ldr	r3, [r3, #12]
 800d216:	4313      	orrs	r3, r2
 800d218:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	4313      	orrs	r3, r2
 800d226:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	4313      	orrs	r3, r2
 800d234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4313      	orrs	r3, r2
 800d242:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	4313      	orrs	r3, r2
 800d250:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	695b      	ldr	r3, [r3, #20]
 800d25c:	4313      	orrs	r3, r2
 800d25e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	69db      	ldr	r3, [r3, #28]
 800d26a:	4313      	orrs	r3, r2
 800d26c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68fa      	ldr	r2, [r7, #12]
 800d274:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2200      	movs	r2, #0
 800d27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d27e:	2300      	movs	r3, #0
}
 800d280:	4618      	mov	r0, r3
 800d282:	3714      	adds	r7, #20
 800d284:	46bd      	mov	sp, r7
 800d286:	bc80      	pop	{r7}
 800d288:	4770      	bx	lr

0800d28a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d28a:	b480      	push	{r7}
 800d28c:	b083      	sub	sp, #12
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d292:	bf00      	nop
 800d294:	370c      	adds	r7, #12
 800d296:	46bd      	mov	sp, r7
 800d298:	bc80      	pop	{r7}
 800d29a:	4770      	bx	lr

0800d29c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d2a4:	bf00      	nop
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bc80      	pop	{r7}
 800d2ac:	4770      	bx	lr

0800d2ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e03f      	b.n	800d340 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d2c6:	b2db      	uxtb	r3, r3
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d106      	bne.n	800d2da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f7fb faf7 	bl	80088c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2224      	movs	r2, #36	; 0x24
 800d2de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68da      	ldr	r2, [r3, #12]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 faa6 	bl	800d844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	691a      	ldr	r2, [r3, #16]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d306:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	695a      	ldr	r2, [r3, #20]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d316:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	68da      	ldr	r2, [r3, #12]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d326:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2200      	movs	r2, #0
 800d32c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2220      	movs	r2, #32
 800d332:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2220      	movs	r2, #32
 800d33a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d348:	b480      	push	{r7}
 800d34a:	b085      	sub	sp, #20
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	4613      	mov	r3, r2
 800d354:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b20      	cmp	r3, #32
 800d360:	d130      	bne.n	800d3c4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <HAL_UART_Transmit_IT+0x26>
 800d368:	88fb      	ldrh	r3, [r7, #6]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d101      	bne.n	800d372 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e029      	b.n	800d3c6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d101      	bne.n	800d380 <HAL_UART_Transmit_IT+0x38>
 800d37c:	2302      	movs	r3, #2
 800d37e:	e022      	b.n	800d3c6 <HAL_UART_Transmit_IT+0x7e>
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	88fa      	ldrh	r2, [r7, #6]
 800d392:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	88fa      	ldrh	r2, [r7, #6]
 800d398:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	2221      	movs	r2, #33	; 0x21
 800d3a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68da      	ldr	r2, [r3, #12]
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d3be:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e000      	b.n	800d3c6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800d3c4:	2302      	movs	r3, #2
  }
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3714      	adds	r7, #20
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bc80      	pop	{r7}
 800d3ce:	4770      	bx	lr

0800d3d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b088      	sub	sp, #32
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	68db      	ldr	r3, [r3, #12]
 800d3e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	695b      	ldr	r3, [r3, #20]
 800d3ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d3f8:	69fb      	ldr	r3, [r7, #28]
 800d3fa:	f003 030f 	and.w	r3, r3, #15
 800d3fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10d      	bne.n	800d422 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d008      	beq.n	800d422 <HAL_UART_IRQHandler+0x52>
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	f003 0320 	and.w	r3, r3, #32
 800d416:	2b00      	cmp	r3, #0
 800d418:	d003      	beq.n	800d422 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 f991 	bl	800d742 <UART_Receive_IT>
      return;
 800d420:	e0d1      	b.n	800d5c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80b0 	beq.w	800d58a <HAL_UART_IRQHandler+0x1ba>
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b00      	cmp	r3, #0
 800d432:	d105      	bne.n	800d440 <HAL_UART_IRQHandler+0x70>
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f000 80a5 	beq.w	800d58a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	f003 0301 	and.w	r3, r3, #1
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00a      	beq.n	800d460 <HAL_UART_IRQHandler+0x90>
 800d44a:	69bb      	ldr	r3, [r7, #24]
 800d44c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d458:	f043 0201 	orr.w	r2, r3, #1
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	f003 0304 	and.w	r3, r3, #4
 800d466:	2b00      	cmp	r3, #0
 800d468:	d00a      	beq.n	800d480 <HAL_UART_IRQHandler+0xb0>
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	d005      	beq.n	800d480 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d478:	f043 0202 	orr.w	r2, r3, #2
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	f003 0302 	and.w	r3, r3, #2
 800d486:	2b00      	cmp	r3, #0
 800d488:	d00a      	beq.n	800d4a0 <HAL_UART_IRQHandler+0xd0>
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f003 0301 	and.w	r3, r3, #1
 800d490:	2b00      	cmp	r3, #0
 800d492:	d005      	beq.n	800d4a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d498:	f043 0204 	orr.w	r2, r3, #4
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	f003 0308 	and.w	r3, r3, #8
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00f      	beq.n	800d4ca <HAL_UART_IRQHandler+0xfa>
 800d4aa:	69bb      	ldr	r3, [r7, #24]
 800d4ac:	f003 0320 	and.w	r3, r3, #32
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d104      	bne.n	800d4be <HAL_UART_IRQHandler+0xee>
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d005      	beq.n	800d4ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c2:	f043 0208 	orr.w	r2, r3, #8
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d078      	beq.n	800d5c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	f003 0320 	and.w	r3, r3, #32
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d007      	beq.n	800d4ec <HAL_UART_IRQHandler+0x11c>
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	f003 0320 	and.w	r3, r3, #32
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d002      	beq.n	800d4ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f92b 	bl	800d742 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	695b      	ldr	r3, [r3, #20]
 800d4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4f6:	2b40      	cmp	r3, #64	; 0x40
 800d4f8:	bf0c      	ite	eq
 800d4fa:	2301      	moveq	r3, #1
 800d4fc:	2300      	movne	r3, #0
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d506:	f003 0308 	and.w	r3, r3, #8
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d102      	bne.n	800d514 <HAL_UART_IRQHandler+0x144>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d031      	beq.n	800d578 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f876 	bl	800d606 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d524:	2b40      	cmp	r3, #64	; 0x40
 800d526:	d123      	bne.n	800d570 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	695a      	ldr	r2, [r3, #20]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d536:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d013      	beq.n	800d568 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d544:	4a21      	ldr	r2, [pc, #132]	; (800d5cc <HAL_UART_IRQHandler+0x1fc>)
 800d546:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7fc ff67 	bl	800a420 <HAL_DMA_Abort_IT>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	d016      	beq.n	800d586 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d562:	4610      	mov	r0, r2
 800d564:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d566:	e00e      	b.n	800d586 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 f843 	bl	800d5f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d56e:	e00a      	b.n	800d586 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 f83f 	bl	800d5f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d576:	e006      	b.n	800d586 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d578:	6878      	ldr	r0, [r7, #4]
 800d57a:	f000 f83b 	bl	800d5f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2200      	movs	r2, #0
 800d582:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d584:	e01e      	b.n	800d5c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d586:	bf00      	nop
    return;
 800d588:	e01c      	b.n	800d5c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d590:	2b00      	cmp	r3, #0
 800d592:	d008      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1d6>
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d003      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f000 f862 	bl	800d668 <UART_Transmit_IT>
    return;
 800d5a4:	e00f      	b.n	800d5c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d00a      	beq.n	800d5c6 <HAL_UART_IRQHandler+0x1f6>
 800d5b0:	69bb      	ldr	r3, [r7, #24]
 800d5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f000 f8a9 	bl	800d712 <UART_EndTransmit_IT>
    return;
 800d5c0:	bf00      	nop
 800d5c2:	e000      	b.n	800d5c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 800d5c4:	bf00      	nop
  }
}
 800d5c6:	3720      	adds	r7, #32
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}
 800d5cc:	0800d641 	.word	0x0800d641

0800d5d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bc80      	pop	{r7}
 800d5e0:	4770      	bx	lr

0800d5e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d5e2:	b480      	push	{r7}
 800d5e4:	b083      	sub	sp, #12
 800d5e6:	af00      	add	r7, sp, #0
 800d5e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d5ea:	bf00      	nop
 800d5ec:	370c      	adds	r7, #12
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bc80      	pop	{r7}
 800d5f2:	4770      	bx	lr

0800d5f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b083      	sub	sp, #12
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d5fc:	bf00      	nop
 800d5fe:	370c      	adds	r7, #12
 800d600:	46bd      	mov	sp, r7
 800d602:	bc80      	pop	{r7}
 800d604:	4770      	bx	lr

0800d606 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d606:	b480      	push	{r7}
 800d608:	b083      	sub	sp, #12
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68da      	ldr	r2, [r3, #12]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d61c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	695a      	ldr	r2, [r3, #20]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f022 0201 	bic.w	r2, r2, #1
 800d62c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2220      	movs	r2, #32
 800d632:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d636:	bf00      	nop
 800d638:	370c      	adds	r7, #12
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bc80      	pop	{r7}
 800d63e:	4770      	bx	lr

0800d640 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	2200      	movs	r2, #0
 800d652:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2200      	movs	r2, #0
 800d658:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f7ff ffca 	bl	800d5f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d660:	bf00      	nop
 800d662:	3710      	adds	r7, #16
 800d664:	46bd      	mov	sp, r7
 800d666:	bd80      	pop	{r7, pc}

0800d668 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d668:	b480      	push	{r7}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d676:	b2db      	uxtb	r3, r3
 800d678:	2b21      	cmp	r3, #33	; 0x21
 800d67a:	d144      	bne.n	800d706 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d684:	d11a      	bne.n	800d6bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	881b      	ldrh	r3, [r3, #0]
 800d690:	461a      	mov	r2, r3
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d69a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d105      	bne.n	800d6b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6a1b      	ldr	r3, [r3, #32]
 800d6a8:	1c9a      	adds	r2, r3, #2
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	621a      	str	r2, [r3, #32]
 800d6ae:	e00e      	b.n	800d6ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	621a      	str	r2, [r3, #32]
 800d6ba:	e008      	b.n	800d6ce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6a1b      	ldr	r3, [r3, #32]
 800d6c0:	1c59      	adds	r1, r3, #1
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	6211      	str	r1, [r2, #32]
 800d6c6:	781a      	ldrb	r2, [r3, #0]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d6d2:	b29b      	uxth	r3, r3
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	687a      	ldr	r2, [r7, #4]
 800d6da:	4619      	mov	r1, r3
 800d6dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10f      	bne.n	800d702 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68da      	ldr	r2, [r3, #12]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68da      	ldr	r2, [r3, #12]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d700:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	e000      	b.n	800d708 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d706:	2302      	movs	r3, #2
  }
}
 800d708:	4618      	mov	r0, r3
 800d70a:	3714      	adds	r7, #20
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bc80      	pop	{r7}
 800d710:	4770      	bx	lr

0800d712 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b082      	sub	sp, #8
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	68da      	ldr	r2, [r3, #12]
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d728:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2220      	movs	r2, #32
 800d72e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff ff4c 	bl	800d5d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d738:	2300      	movs	r3, #0
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b084      	sub	sp, #16
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d750:	b2db      	uxtb	r3, r3
 800d752:	2b22      	cmp	r3, #34	; 0x22
 800d754:	d171      	bne.n	800d83a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d75e:	d123      	bne.n	800d7a8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d764:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	691b      	ldr	r3, [r3, #16]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10e      	bne.n	800d78c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	b29b      	uxth	r3, r3
 800d776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d784:	1c9a      	adds	r2, r3, #2
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	629a      	str	r2, [r3, #40]	; 0x28
 800d78a:	e029      	b.n	800d7e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	b29b      	uxth	r3, r3
 800d794:	b2db      	uxtb	r3, r3
 800d796:	b29a      	uxth	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a0:	1c5a      	adds	r2, r3, #1
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	629a      	str	r2, [r3, #40]	; 0x28
 800d7a6:	e01b      	b.n	800d7e0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	691b      	ldr	r3, [r3, #16]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d10a      	bne.n	800d7c6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6858      	ldr	r0, [r3, #4]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ba:	1c59      	adds	r1, r3, #1
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	6291      	str	r1, [r2, #40]	; 0x28
 800d7c0:	b2c2      	uxtb	r2, r0
 800d7c2:	701a      	strb	r2, [r3, #0]
 800d7c4:	e00c      	b.n	800d7e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	b2da      	uxtb	r2, r3
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d2:	1c58      	adds	r0, r3, #1
 800d7d4:	6879      	ldr	r1, [r7, #4]
 800d7d6:	6288      	str	r0, [r1, #40]	; 0x28
 800d7d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d7dc:	b2d2      	uxtb	r2, r2
 800d7de:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d7e4:	b29b      	uxth	r3, r3
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d120      	bne.n	800d836 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f022 0220 	bic.w	r2, r2, #32
 800d802:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	68da      	ldr	r2, [r3, #12]
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d812:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	695a      	ldr	r2, [r3, #20]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f022 0201 	bic.w	r2, r2, #1
 800d822:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2220      	movs	r2, #32
 800d828:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7ff fed8 	bl	800d5e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d832:	2300      	movs	r3, #0
 800d834:	e002      	b.n	800d83c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d836:	2300      	movs	r3, #0
 800d838:	e000      	b.n	800d83c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d83a:	2302      	movs	r3, #2
  }
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3710      	adds	r7, #16
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	68da      	ldr	r2, [r3, #12]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	430a      	orrs	r2, r1
 800d860:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	689a      	ldr	r2, [r3, #8]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	431a      	orrs	r2, r3
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	695b      	ldr	r3, [r3, #20]
 800d870:	431a      	orrs	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	69db      	ldr	r3, [r3, #28]
 800d876:	4313      	orrs	r3, r2
 800d878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d884:	f023 030c 	bic.w	r3, r3, #12
 800d888:	687a      	ldr	r2, [r7, #4]
 800d88a:	6812      	ldr	r2, [r2, #0]
 800d88c:	68f9      	ldr	r1, [r7, #12]
 800d88e:	430b      	orrs	r3, r1
 800d890:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	695b      	ldr	r3, [r3, #20]
 800d898:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	699a      	ldr	r2, [r3, #24]
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	69db      	ldr	r3, [r3, #28]
 800d8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8b0:	f040 80aa 	bne.w	800da08 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4aa9      	ldr	r2, [pc, #676]	; (800db60 <UART_SetConfig+0x31c>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d004      	beq.n	800d8c8 <UART_SetConfig+0x84>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	4aa8      	ldr	r2, [pc, #672]	; (800db64 <UART_SetConfig+0x320>)
 800d8c4:	4293      	cmp	r3, r2
 800d8c6:	d14f      	bne.n	800d968 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d8c8:	f7fe fd8e 	bl	800c3e8 <HAL_RCC_GetPCLK2Freq>
 800d8cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d8ce:	68ba      	ldr	r2, [r7, #8]
 800d8d0:	4613      	mov	r3, r2
 800d8d2:	009b      	lsls	r3, r3, #2
 800d8d4:	4413      	add	r3, r2
 800d8d6:	009a      	lsls	r2, r3, #2
 800d8d8:	441a      	add	r2, r3
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	685b      	ldr	r3, [r3, #4]
 800d8de:	005b      	lsls	r3, r3, #1
 800d8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8e4:	4aa0      	ldr	r2, [pc, #640]	; (800db68 <UART_SetConfig+0x324>)
 800d8e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8ea:	095b      	lsrs	r3, r3, #5
 800d8ec:	0119      	lsls	r1, r3, #4
 800d8ee:	68ba      	ldr	r2, [r7, #8]
 800d8f0:	4613      	mov	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	4413      	add	r3, r2
 800d8f6:	009a      	lsls	r2, r3, #2
 800d8f8:	441a      	add	r2, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	005b      	lsls	r3, r3, #1
 800d900:	fbb2 f2f3 	udiv	r2, r2, r3
 800d904:	4b98      	ldr	r3, [pc, #608]	; (800db68 <UART_SetConfig+0x324>)
 800d906:	fba3 0302 	umull	r0, r3, r3, r2
 800d90a:	095b      	lsrs	r3, r3, #5
 800d90c:	2064      	movs	r0, #100	; 0x64
 800d90e:	fb00 f303 	mul.w	r3, r0, r3
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	00db      	lsls	r3, r3, #3
 800d916:	3332      	adds	r3, #50	; 0x32
 800d918:	4a93      	ldr	r2, [pc, #588]	; (800db68 <UART_SetConfig+0x324>)
 800d91a:	fba2 2303 	umull	r2, r3, r2, r3
 800d91e:	095b      	lsrs	r3, r3, #5
 800d920:	005b      	lsls	r3, r3, #1
 800d922:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d926:	4419      	add	r1, r3
 800d928:	68ba      	ldr	r2, [r7, #8]
 800d92a:	4613      	mov	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	009a      	lsls	r2, r3, #2
 800d932:	441a      	add	r2, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d93e:	4b8a      	ldr	r3, [pc, #552]	; (800db68 <UART_SetConfig+0x324>)
 800d940:	fba3 0302 	umull	r0, r3, r3, r2
 800d944:	095b      	lsrs	r3, r3, #5
 800d946:	2064      	movs	r0, #100	; 0x64
 800d948:	fb00 f303 	mul.w	r3, r0, r3
 800d94c:	1ad3      	subs	r3, r2, r3
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	3332      	adds	r3, #50	; 0x32
 800d952:	4a85      	ldr	r2, [pc, #532]	; (800db68 <UART_SetConfig+0x324>)
 800d954:	fba2 2303 	umull	r2, r3, r2, r3
 800d958:	095b      	lsrs	r3, r3, #5
 800d95a:	f003 0207 	and.w	r2, r3, #7
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	440a      	add	r2, r1
 800d964:	609a      	str	r2, [r3, #8]
 800d966:	e0f7      	b.n	800db58 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d968:	f7fe fd1c 	bl	800c3a4 <HAL_RCC_GetPCLK1Freq>
 800d96c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	4613      	mov	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4413      	add	r3, r2
 800d976:	009a      	lsls	r2, r3, #2
 800d978:	441a      	add	r2, r3
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	fbb2 f3f3 	udiv	r3, r2, r3
 800d984:	4a78      	ldr	r2, [pc, #480]	; (800db68 <UART_SetConfig+0x324>)
 800d986:	fba2 2303 	umull	r2, r3, r2, r3
 800d98a:	095b      	lsrs	r3, r3, #5
 800d98c:	0119      	lsls	r1, r3, #4
 800d98e:	68ba      	ldr	r2, [r7, #8]
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009a      	lsls	r2, r3, #2
 800d998:	441a      	add	r2, r3
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	005b      	lsls	r3, r3, #1
 800d9a0:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9a4:	4b70      	ldr	r3, [pc, #448]	; (800db68 <UART_SetConfig+0x324>)
 800d9a6:	fba3 0302 	umull	r0, r3, r3, r2
 800d9aa:	095b      	lsrs	r3, r3, #5
 800d9ac:	2064      	movs	r0, #100	; 0x64
 800d9ae:	fb00 f303 	mul.w	r3, r0, r3
 800d9b2:	1ad3      	subs	r3, r2, r3
 800d9b4:	00db      	lsls	r3, r3, #3
 800d9b6:	3332      	adds	r3, #50	; 0x32
 800d9b8:	4a6b      	ldr	r2, [pc, #428]	; (800db68 <UART_SetConfig+0x324>)
 800d9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d9be:	095b      	lsrs	r3, r3, #5
 800d9c0:	005b      	lsls	r3, r3, #1
 800d9c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d9c6:	4419      	add	r1, r3
 800d9c8:	68ba      	ldr	r2, [r7, #8]
 800d9ca:	4613      	mov	r3, r2
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	4413      	add	r3, r2
 800d9d0:	009a      	lsls	r2, r3, #2
 800d9d2:	441a      	add	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	685b      	ldr	r3, [r3, #4]
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	fbb2 f2f3 	udiv	r2, r2, r3
 800d9de:	4b62      	ldr	r3, [pc, #392]	; (800db68 <UART_SetConfig+0x324>)
 800d9e0:	fba3 0302 	umull	r0, r3, r3, r2
 800d9e4:	095b      	lsrs	r3, r3, #5
 800d9e6:	2064      	movs	r0, #100	; 0x64
 800d9e8:	fb00 f303 	mul.w	r3, r0, r3
 800d9ec:	1ad3      	subs	r3, r2, r3
 800d9ee:	00db      	lsls	r3, r3, #3
 800d9f0:	3332      	adds	r3, #50	; 0x32
 800d9f2:	4a5d      	ldr	r2, [pc, #372]	; (800db68 <UART_SetConfig+0x324>)
 800d9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9f8:	095b      	lsrs	r3, r3, #5
 800d9fa:	f003 0207 	and.w	r2, r3, #7
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	440a      	add	r2, r1
 800da04:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800da06:	e0a7      	b.n	800db58 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	4a54      	ldr	r2, [pc, #336]	; (800db60 <UART_SetConfig+0x31c>)
 800da0e:	4293      	cmp	r3, r2
 800da10:	d004      	beq.n	800da1c <UART_SetConfig+0x1d8>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	4a53      	ldr	r2, [pc, #332]	; (800db64 <UART_SetConfig+0x320>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d14e      	bne.n	800daba <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 800da1c:	f7fe fce4 	bl	800c3e8 <HAL_RCC_GetPCLK2Freq>
 800da20:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800da22:	68ba      	ldr	r2, [r7, #8]
 800da24:	4613      	mov	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	009a      	lsls	r2, r3, #2
 800da2c:	441a      	add	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	685b      	ldr	r3, [r3, #4]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	fbb2 f3f3 	udiv	r3, r2, r3
 800da38:	4a4b      	ldr	r2, [pc, #300]	; (800db68 <UART_SetConfig+0x324>)
 800da3a:	fba2 2303 	umull	r2, r3, r2, r3
 800da3e:	095b      	lsrs	r3, r3, #5
 800da40:	0119      	lsls	r1, r3, #4
 800da42:	68ba      	ldr	r2, [r7, #8]
 800da44:	4613      	mov	r3, r2
 800da46:	009b      	lsls	r3, r3, #2
 800da48:	4413      	add	r3, r2
 800da4a:	009a      	lsls	r2, r3, #2
 800da4c:	441a      	add	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	685b      	ldr	r3, [r3, #4]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	fbb2 f2f3 	udiv	r2, r2, r3
 800da58:	4b43      	ldr	r3, [pc, #268]	; (800db68 <UART_SetConfig+0x324>)
 800da5a:	fba3 0302 	umull	r0, r3, r3, r2
 800da5e:	095b      	lsrs	r3, r3, #5
 800da60:	2064      	movs	r0, #100	; 0x64
 800da62:	fb00 f303 	mul.w	r3, r0, r3
 800da66:	1ad3      	subs	r3, r2, r3
 800da68:	011b      	lsls	r3, r3, #4
 800da6a:	3332      	adds	r3, #50	; 0x32
 800da6c:	4a3e      	ldr	r2, [pc, #248]	; (800db68 <UART_SetConfig+0x324>)
 800da6e:	fba2 2303 	umull	r2, r3, r2, r3
 800da72:	095b      	lsrs	r3, r3, #5
 800da74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da78:	4419      	add	r1, r3
 800da7a:	68ba      	ldr	r2, [r7, #8]
 800da7c:	4613      	mov	r3, r2
 800da7e:	009b      	lsls	r3, r3, #2
 800da80:	4413      	add	r3, r2
 800da82:	009a      	lsls	r2, r3, #2
 800da84:	441a      	add	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	fbb2 f2f3 	udiv	r2, r2, r3
 800da90:	4b35      	ldr	r3, [pc, #212]	; (800db68 <UART_SetConfig+0x324>)
 800da92:	fba3 0302 	umull	r0, r3, r3, r2
 800da96:	095b      	lsrs	r3, r3, #5
 800da98:	2064      	movs	r0, #100	; 0x64
 800da9a:	fb00 f303 	mul.w	r3, r0, r3
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	011b      	lsls	r3, r3, #4
 800daa2:	3332      	adds	r3, #50	; 0x32
 800daa4:	4a30      	ldr	r2, [pc, #192]	; (800db68 <UART_SetConfig+0x324>)
 800daa6:	fba2 2303 	umull	r2, r3, r2, r3
 800daaa:	095b      	lsrs	r3, r3, #5
 800daac:	f003 020f 	and.w	r2, r3, #15
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	440a      	add	r2, r1
 800dab6:	609a      	str	r2, [r3, #8]
 800dab8:	e04e      	b.n	800db58 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 800daba:	f7fe fc73 	bl	800c3a4 <HAL_RCC_GetPCLK1Freq>
 800dabe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	4613      	mov	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4413      	add	r3, r2
 800dac8:	009a      	lsls	r2, r3, #2
 800daca:	441a      	add	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	009b      	lsls	r3, r3, #2
 800dad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad6:	4a24      	ldr	r2, [pc, #144]	; (800db68 <UART_SetConfig+0x324>)
 800dad8:	fba2 2303 	umull	r2, r3, r2, r3
 800dadc:	095b      	lsrs	r3, r3, #5
 800dade:	0119      	lsls	r1, r3, #4
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	4613      	mov	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	009a      	lsls	r2, r3, #2
 800daea:	441a      	add	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	fbb2 f2f3 	udiv	r2, r2, r3
 800daf6:	4b1c      	ldr	r3, [pc, #112]	; (800db68 <UART_SetConfig+0x324>)
 800daf8:	fba3 0302 	umull	r0, r3, r3, r2
 800dafc:	095b      	lsrs	r3, r3, #5
 800dafe:	2064      	movs	r0, #100	; 0x64
 800db00:	fb00 f303 	mul.w	r3, r0, r3
 800db04:	1ad3      	subs	r3, r2, r3
 800db06:	011b      	lsls	r3, r3, #4
 800db08:	3332      	adds	r3, #50	; 0x32
 800db0a:	4a17      	ldr	r2, [pc, #92]	; (800db68 <UART_SetConfig+0x324>)
 800db0c:	fba2 2303 	umull	r2, r3, r2, r3
 800db10:	095b      	lsrs	r3, r3, #5
 800db12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db16:	4419      	add	r1, r3
 800db18:	68ba      	ldr	r2, [r7, #8]
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009a      	lsls	r2, r3, #2
 800db22:	441a      	add	r2, r3
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	fbb2 f2f3 	udiv	r2, r2, r3
 800db2e:	4b0e      	ldr	r3, [pc, #56]	; (800db68 <UART_SetConfig+0x324>)
 800db30:	fba3 0302 	umull	r0, r3, r3, r2
 800db34:	095b      	lsrs	r3, r3, #5
 800db36:	2064      	movs	r0, #100	; 0x64
 800db38:	fb00 f303 	mul.w	r3, r0, r3
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	011b      	lsls	r3, r3, #4
 800db40:	3332      	adds	r3, #50	; 0x32
 800db42:	4a09      	ldr	r2, [pc, #36]	; (800db68 <UART_SetConfig+0x324>)
 800db44:	fba2 2303 	umull	r2, r3, r2, r3
 800db48:	095b      	lsrs	r3, r3, #5
 800db4a:	f003 020f 	and.w	r2, r3, #15
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	440a      	add	r2, r1
 800db54:	609a      	str	r2, [r3, #8]
}
 800db56:	e7ff      	b.n	800db58 <UART_SetConfig+0x314>
 800db58:	bf00      	nop
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	40011000 	.word	0x40011000
 800db64:	40011400 	.word	0x40011400
 800db68:	51eb851f 	.word	0x51eb851f

0800db6c <__errno>:
 800db6c:	4b01      	ldr	r3, [pc, #4]	; (800db74 <__errno+0x8>)
 800db6e:	6818      	ldr	r0, [r3, #0]
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	20000060 	.word	0x20000060

0800db78 <__libc_init_array>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	2500      	movs	r5, #0
 800db7c:	4e0c      	ldr	r6, [pc, #48]	; (800dbb0 <__libc_init_array+0x38>)
 800db7e:	4c0d      	ldr	r4, [pc, #52]	; (800dbb4 <__libc_init_array+0x3c>)
 800db80:	1ba4      	subs	r4, r4, r6
 800db82:	10a4      	asrs	r4, r4, #2
 800db84:	42a5      	cmp	r5, r4
 800db86:	d109      	bne.n	800db9c <__libc_init_array+0x24>
 800db88:	f002 fb04 	bl	8010194 <_init>
 800db8c:	2500      	movs	r5, #0
 800db8e:	4e0a      	ldr	r6, [pc, #40]	; (800dbb8 <__libc_init_array+0x40>)
 800db90:	4c0a      	ldr	r4, [pc, #40]	; (800dbbc <__libc_init_array+0x44>)
 800db92:	1ba4      	subs	r4, r4, r6
 800db94:	10a4      	asrs	r4, r4, #2
 800db96:	42a5      	cmp	r5, r4
 800db98:	d105      	bne.n	800dba6 <__libc_init_array+0x2e>
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dba0:	4798      	blx	r3
 800dba2:	3501      	adds	r5, #1
 800dba4:	e7ee      	b.n	800db84 <__libc_init_array+0xc>
 800dba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dbaa:	4798      	blx	r3
 800dbac:	3501      	adds	r5, #1
 800dbae:	e7f2      	b.n	800db96 <__libc_init_array+0x1e>
 800dbb0:	08010cbc 	.word	0x08010cbc
 800dbb4:	08010cbc 	.word	0x08010cbc
 800dbb8:	08010cbc 	.word	0x08010cbc
 800dbbc:	08010cc0 	.word	0x08010cc0

0800dbc0 <__itoa>:
 800dbc0:	1e93      	subs	r3, r2, #2
 800dbc2:	2b22      	cmp	r3, #34	; 0x22
 800dbc4:	b510      	push	{r4, lr}
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	d904      	bls.n	800dbd4 <__itoa+0x14>
 800dbca:	2300      	movs	r3, #0
 800dbcc:	461c      	mov	r4, r3
 800dbce:	700b      	strb	r3, [r1, #0]
 800dbd0:	4620      	mov	r0, r4
 800dbd2:	bd10      	pop	{r4, pc}
 800dbd4:	2a0a      	cmp	r2, #10
 800dbd6:	d109      	bne.n	800dbec <__itoa+0x2c>
 800dbd8:	2800      	cmp	r0, #0
 800dbda:	da07      	bge.n	800dbec <__itoa+0x2c>
 800dbdc:	232d      	movs	r3, #45	; 0x2d
 800dbde:	700b      	strb	r3, [r1, #0]
 800dbe0:	2101      	movs	r1, #1
 800dbe2:	4240      	negs	r0, r0
 800dbe4:	4421      	add	r1, r4
 800dbe6:	f000 fca5 	bl	800e534 <__utoa>
 800dbea:	e7f1      	b.n	800dbd0 <__itoa+0x10>
 800dbec:	2100      	movs	r1, #0
 800dbee:	e7f9      	b.n	800dbe4 <__itoa+0x24>

0800dbf0 <itoa>:
 800dbf0:	f7ff bfe6 	b.w	800dbc0 <__itoa>

0800dbf4 <__locale_ctype_ptr>:
 800dbf4:	4b04      	ldr	r3, [pc, #16]	; (800dc08 <__locale_ctype_ptr+0x14>)
 800dbf6:	4a05      	ldr	r2, [pc, #20]	; (800dc0c <__locale_ctype_ptr+0x18>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	6a1b      	ldr	r3, [r3, #32]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	bf08      	it	eq
 800dc00:	4613      	moveq	r3, r2
 800dc02:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800dc06:	4770      	bx	lr
 800dc08:	20000060 	.word	0x20000060
 800dc0c:	200000c4 	.word	0x200000c4

0800dc10 <__ascii_mbtowc>:
 800dc10:	b082      	sub	sp, #8
 800dc12:	b901      	cbnz	r1, 800dc16 <__ascii_mbtowc+0x6>
 800dc14:	a901      	add	r1, sp, #4
 800dc16:	b142      	cbz	r2, 800dc2a <__ascii_mbtowc+0x1a>
 800dc18:	b14b      	cbz	r3, 800dc2e <__ascii_mbtowc+0x1e>
 800dc1a:	7813      	ldrb	r3, [r2, #0]
 800dc1c:	600b      	str	r3, [r1, #0]
 800dc1e:	7812      	ldrb	r2, [r2, #0]
 800dc20:	1c10      	adds	r0, r2, #0
 800dc22:	bf18      	it	ne
 800dc24:	2001      	movne	r0, #1
 800dc26:	b002      	add	sp, #8
 800dc28:	4770      	bx	lr
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	e7fb      	b.n	800dc26 <__ascii_mbtowc+0x16>
 800dc2e:	f06f 0001 	mvn.w	r0, #1
 800dc32:	e7f8      	b.n	800dc26 <__ascii_mbtowc+0x16>

0800dc34 <memset>:
 800dc34:	4603      	mov	r3, r0
 800dc36:	4402      	add	r2, r0
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d100      	bne.n	800dc3e <memset+0xa>
 800dc3c:	4770      	bx	lr
 800dc3e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc42:	e7f9      	b.n	800dc38 <memset+0x4>

0800dc44 <__cvt>:
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc4a:	461e      	mov	r6, r3
 800dc4c:	bfbb      	ittet	lt
 800dc4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800dc52:	461e      	movlt	r6, r3
 800dc54:	2300      	movge	r3, #0
 800dc56:	232d      	movlt	r3, #45	; 0x2d
 800dc58:	b088      	sub	sp, #32
 800dc5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800dc5c:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800dc60:	f027 0720 	bic.w	r7, r7, #32
 800dc64:	2f46      	cmp	r7, #70	; 0x46
 800dc66:	4614      	mov	r4, r2
 800dc68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dc6a:	700b      	strb	r3, [r1, #0]
 800dc6c:	d004      	beq.n	800dc78 <__cvt+0x34>
 800dc6e:	2f45      	cmp	r7, #69	; 0x45
 800dc70:	d100      	bne.n	800dc74 <__cvt+0x30>
 800dc72:	3501      	adds	r5, #1
 800dc74:	2302      	movs	r3, #2
 800dc76:	e000      	b.n	800dc7a <__cvt+0x36>
 800dc78:	2303      	movs	r3, #3
 800dc7a:	aa07      	add	r2, sp, #28
 800dc7c:	9204      	str	r2, [sp, #16]
 800dc7e:	aa06      	add	r2, sp, #24
 800dc80:	e9cd a202 	strd	sl, r2, [sp, #8]
 800dc84:	e9cd 3500 	strd	r3, r5, [sp]
 800dc88:	4622      	mov	r2, r4
 800dc8a:	4633      	mov	r3, r6
 800dc8c:	f000 fd2c 	bl	800e6e8 <_dtoa_r>
 800dc90:	2f47      	cmp	r7, #71	; 0x47
 800dc92:	4680      	mov	r8, r0
 800dc94:	d102      	bne.n	800dc9c <__cvt+0x58>
 800dc96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc98:	07db      	lsls	r3, r3, #31
 800dc9a:	d526      	bpl.n	800dcea <__cvt+0xa6>
 800dc9c:	2f46      	cmp	r7, #70	; 0x46
 800dc9e:	eb08 0905 	add.w	r9, r8, r5
 800dca2:	d111      	bne.n	800dcc8 <__cvt+0x84>
 800dca4:	f898 3000 	ldrb.w	r3, [r8]
 800dca8:	2b30      	cmp	r3, #48	; 0x30
 800dcaa:	d10a      	bne.n	800dcc2 <__cvt+0x7e>
 800dcac:	2200      	movs	r2, #0
 800dcae:	2300      	movs	r3, #0
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	4631      	mov	r1, r6
 800dcb4:	f7f2 feb4 	bl	8000a20 <__aeabi_dcmpeq>
 800dcb8:	b918      	cbnz	r0, 800dcc2 <__cvt+0x7e>
 800dcba:	f1c5 0501 	rsb	r5, r5, #1
 800dcbe:	f8ca 5000 	str.w	r5, [sl]
 800dcc2:	f8da 3000 	ldr.w	r3, [sl]
 800dcc6:	4499      	add	r9, r3
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2300      	movs	r3, #0
 800dccc:	4620      	mov	r0, r4
 800dcce:	4631      	mov	r1, r6
 800dcd0:	f7f2 fea6 	bl	8000a20 <__aeabi_dcmpeq>
 800dcd4:	b938      	cbnz	r0, 800dce6 <__cvt+0xa2>
 800dcd6:	2230      	movs	r2, #48	; 0x30
 800dcd8:	9b07      	ldr	r3, [sp, #28]
 800dcda:	454b      	cmp	r3, r9
 800dcdc:	d205      	bcs.n	800dcea <__cvt+0xa6>
 800dcde:	1c59      	adds	r1, r3, #1
 800dce0:	9107      	str	r1, [sp, #28]
 800dce2:	701a      	strb	r2, [r3, #0]
 800dce4:	e7f8      	b.n	800dcd8 <__cvt+0x94>
 800dce6:	f8cd 901c 	str.w	r9, [sp, #28]
 800dcea:	4640      	mov	r0, r8
 800dcec:	9b07      	ldr	r3, [sp, #28]
 800dcee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcf0:	eba3 0308 	sub.w	r3, r3, r8
 800dcf4:	6013      	str	r3, [r2, #0]
 800dcf6:	b008      	add	sp, #32
 800dcf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dcfc <__exponent>:
 800dcfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcfe:	2900      	cmp	r1, #0
 800dd00:	bfb4      	ite	lt
 800dd02:	232d      	movlt	r3, #45	; 0x2d
 800dd04:	232b      	movge	r3, #43	; 0x2b
 800dd06:	4604      	mov	r4, r0
 800dd08:	bfb8      	it	lt
 800dd0a:	4249      	neglt	r1, r1
 800dd0c:	2909      	cmp	r1, #9
 800dd0e:	f804 2b02 	strb.w	r2, [r4], #2
 800dd12:	7043      	strb	r3, [r0, #1]
 800dd14:	dd21      	ble.n	800dd5a <__exponent+0x5e>
 800dd16:	f10d 0307 	add.w	r3, sp, #7
 800dd1a:	461f      	mov	r7, r3
 800dd1c:	260a      	movs	r6, #10
 800dd1e:	fb91 f5f6 	sdiv	r5, r1, r6
 800dd22:	fb06 1115 	mls	r1, r6, r5, r1
 800dd26:	2d09      	cmp	r5, #9
 800dd28:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800dd2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dd30:	f103 32ff 	add.w	r2, r3, #4294967295
 800dd34:	4629      	mov	r1, r5
 800dd36:	dc09      	bgt.n	800dd4c <__exponent+0x50>
 800dd38:	3130      	adds	r1, #48	; 0x30
 800dd3a:	3b02      	subs	r3, #2
 800dd3c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dd40:	42bb      	cmp	r3, r7
 800dd42:	4622      	mov	r2, r4
 800dd44:	d304      	bcc.n	800dd50 <__exponent+0x54>
 800dd46:	1a10      	subs	r0, r2, r0
 800dd48:	b003      	add	sp, #12
 800dd4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd4c:	4613      	mov	r3, r2
 800dd4e:	e7e6      	b.n	800dd1e <__exponent+0x22>
 800dd50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd54:	f804 2b01 	strb.w	r2, [r4], #1
 800dd58:	e7f2      	b.n	800dd40 <__exponent+0x44>
 800dd5a:	2330      	movs	r3, #48	; 0x30
 800dd5c:	4419      	add	r1, r3
 800dd5e:	7083      	strb	r3, [r0, #2]
 800dd60:	1d02      	adds	r2, r0, #4
 800dd62:	70c1      	strb	r1, [r0, #3]
 800dd64:	e7ef      	b.n	800dd46 <__exponent+0x4a>
	...

0800dd68 <_printf_float>:
 800dd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd6c:	b091      	sub	sp, #68	; 0x44
 800dd6e:	460c      	mov	r4, r1
 800dd70:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800dd72:	4693      	mov	fp, r2
 800dd74:	461e      	mov	r6, r3
 800dd76:	4605      	mov	r5, r0
 800dd78:	f001 fa6a 	bl	800f250 <_localeconv_r>
 800dd7c:	6803      	ldr	r3, [r0, #0]
 800dd7e:	4618      	mov	r0, r3
 800dd80:	9309      	str	r3, [sp, #36]	; 0x24
 800dd82:	f7f2 fa21 	bl	80001c8 <strlen>
 800dd86:	2300      	movs	r3, #0
 800dd88:	930e      	str	r3, [sp, #56]	; 0x38
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	900a      	str	r0, [sp, #40]	; 0x28
 800dd8e:	3307      	adds	r3, #7
 800dd90:	f023 0307 	bic.w	r3, r3, #7
 800dd94:	f103 0208 	add.w	r2, r3, #8
 800dd98:	f894 8018 	ldrb.w	r8, [r4, #24]
 800dd9c:	f8d4 a000 	ldr.w	sl, [r4]
 800dda0:	603a      	str	r2, [r7, #0]
 800dda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ddaa:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800ddae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ddb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800ddb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb8:	4ba6      	ldr	r3, [pc, #664]	; (800e054 <_printf_float+0x2ec>)
 800ddba:	4638      	mov	r0, r7
 800ddbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddbe:	f7f2 fe61 	bl	8000a84 <__aeabi_dcmpun>
 800ddc2:	bb68      	cbnz	r0, 800de20 <_printf_float+0xb8>
 800ddc4:	f04f 32ff 	mov.w	r2, #4294967295
 800ddc8:	4ba2      	ldr	r3, [pc, #648]	; (800e054 <_printf_float+0x2ec>)
 800ddca:	4638      	mov	r0, r7
 800ddcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddce:	f7f2 fe3b 	bl	8000a48 <__aeabi_dcmple>
 800ddd2:	bb28      	cbnz	r0, 800de20 <_printf_float+0xb8>
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	4638      	mov	r0, r7
 800ddda:	4649      	mov	r1, r9
 800dddc:	f7f2 fe2a 	bl	8000a34 <__aeabi_dcmplt>
 800dde0:	b110      	cbz	r0, 800dde8 <_printf_float+0x80>
 800dde2:	232d      	movs	r3, #45	; 0x2d
 800dde4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dde8:	4f9b      	ldr	r7, [pc, #620]	; (800e058 <_printf_float+0x2f0>)
 800ddea:	4b9c      	ldr	r3, [pc, #624]	; (800e05c <_printf_float+0x2f4>)
 800ddec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ddf0:	bf98      	it	ls
 800ddf2:	461f      	movls	r7, r3
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	f04f 0900 	mov.w	r9, #0
 800ddfa:	6123      	str	r3, [r4, #16]
 800ddfc:	f02a 0304 	bic.w	r3, sl, #4
 800de00:	6023      	str	r3, [r4, #0]
 800de02:	9600      	str	r6, [sp, #0]
 800de04:	465b      	mov	r3, fp
 800de06:	aa0f      	add	r2, sp, #60	; 0x3c
 800de08:	4621      	mov	r1, r4
 800de0a:	4628      	mov	r0, r5
 800de0c:	f000 f9e2 	bl	800e1d4 <_printf_common>
 800de10:	3001      	adds	r0, #1
 800de12:	f040 8090 	bne.w	800df36 <_printf_float+0x1ce>
 800de16:	f04f 30ff 	mov.w	r0, #4294967295
 800de1a:	b011      	add	sp, #68	; 0x44
 800de1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de20:	463a      	mov	r2, r7
 800de22:	464b      	mov	r3, r9
 800de24:	4638      	mov	r0, r7
 800de26:	4649      	mov	r1, r9
 800de28:	f7f2 fe2c 	bl	8000a84 <__aeabi_dcmpun>
 800de2c:	b110      	cbz	r0, 800de34 <_printf_float+0xcc>
 800de2e:	4f8c      	ldr	r7, [pc, #560]	; (800e060 <_printf_float+0x2f8>)
 800de30:	4b8c      	ldr	r3, [pc, #560]	; (800e064 <_printf_float+0x2fc>)
 800de32:	e7db      	b.n	800ddec <_printf_float+0x84>
 800de34:	6863      	ldr	r3, [r4, #4]
 800de36:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800de3a:	1c59      	adds	r1, r3, #1
 800de3c:	a80d      	add	r0, sp, #52	; 0x34
 800de3e:	a90e      	add	r1, sp, #56	; 0x38
 800de40:	d140      	bne.n	800dec4 <_printf_float+0x15c>
 800de42:	2306      	movs	r3, #6
 800de44:	6063      	str	r3, [r4, #4]
 800de46:	f04f 0c00 	mov.w	ip, #0
 800de4a:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800de4e:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800de52:	6863      	ldr	r3, [r4, #4]
 800de54:	6022      	str	r2, [r4, #0]
 800de56:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800de5a:	9300      	str	r3, [sp, #0]
 800de5c:	463a      	mov	r2, r7
 800de5e:	464b      	mov	r3, r9
 800de60:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800de64:	4628      	mov	r0, r5
 800de66:	f7ff feed 	bl	800dc44 <__cvt>
 800de6a:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800de6e:	2b47      	cmp	r3, #71	; 0x47
 800de70:	4607      	mov	r7, r0
 800de72:	d109      	bne.n	800de88 <_printf_float+0x120>
 800de74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de76:	1cd8      	adds	r0, r3, #3
 800de78:	db02      	blt.n	800de80 <_printf_float+0x118>
 800de7a:	6862      	ldr	r2, [r4, #4]
 800de7c:	4293      	cmp	r3, r2
 800de7e:	dd47      	ble.n	800df10 <_printf_float+0x1a8>
 800de80:	f1a8 0802 	sub.w	r8, r8, #2
 800de84:	fa5f f888 	uxtb.w	r8, r8
 800de88:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800de8c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800de8e:	d824      	bhi.n	800deda <_printf_float+0x172>
 800de90:	3901      	subs	r1, #1
 800de92:	4642      	mov	r2, r8
 800de94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de98:	910d      	str	r1, [sp, #52]	; 0x34
 800de9a:	f7ff ff2f 	bl	800dcfc <__exponent>
 800de9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dea0:	4681      	mov	r9, r0
 800dea2:	1813      	adds	r3, r2, r0
 800dea4:	2a01      	cmp	r2, #1
 800dea6:	6123      	str	r3, [r4, #16]
 800dea8:	dc02      	bgt.n	800deb0 <_printf_float+0x148>
 800deaa:	6822      	ldr	r2, [r4, #0]
 800deac:	07d1      	lsls	r1, r2, #31
 800deae:	d501      	bpl.n	800deb4 <_printf_float+0x14c>
 800deb0:	3301      	adds	r3, #1
 800deb2:	6123      	str	r3, [r4, #16]
 800deb4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d0a2      	beq.n	800de02 <_printf_float+0x9a>
 800debc:	232d      	movs	r3, #45	; 0x2d
 800debe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dec2:	e79e      	b.n	800de02 <_printf_float+0x9a>
 800dec4:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 800dec8:	f000 816e 	beq.w	800e1a8 <_printf_float+0x440>
 800decc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ded0:	d1b9      	bne.n	800de46 <_printf_float+0xde>
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1b7      	bne.n	800de46 <_printf_float+0xde>
 800ded6:	2301      	movs	r3, #1
 800ded8:	e7b4      	b.n	800de44 <_printf_float+0xdc>
 800deda:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800dede:	d119      	bne.n	800df14 <_printf_float+0x1ac>
 800dee0:	2900      	cmp	r1, #0
 800dee2:	6863      	ldr	r3, [r4, #4]
 800dee4:	dd0c      	ble.n	800df00 <_printf_float+0x198>
 800dee6:	6121      	str	r1, [r4, #16]
 800dee8:	b913      	cbnz	r3, 800def0 <_printf_float+0x188>
 800deea:	6822      	ldr	r2, [r4, #0]
 800deec:	07d2      	lsls	r2, r2, #31
 800deee:	d502      	bpl.n	800def6 <_printf_float+0x18e>
 800def0:	3301      	adds	r3, #1
 800def2:	440b      	add	r3, r1
 800def4:	6123      	str	r3, [r4, #16]
 800def6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800def8:	f04f 0900 	mov.w	r9, #0
 800defc:	65a3      	str	r3, [r4, #88]	; 0x58
 800defe:	e7d9      	b.n	800deb4 <_printf_float+0x14c>
 800df00:	b913      	cbnz	r3, 800df08 <_printf_float+0x1a0>
 800df02:	6822      	ldr	r2, [r4, #0]
 800df04:	07d0      	lsls	r0, r2, #31
 800df06:	d501      	bpl.n	800df0c <_printf_float+0x1a4>
 800df08:	3302      	adds	r3, #2
 800df0a:	e7f3      	b.n	800def4 <_printf_float+0x18c>
 800df0c:	2301      	movs	r3, #1
 800df0e:	e7f1      	b.n	800def4 <_printf_float+0x18c>
 800df10:	f04f 0867 	mov.w	r8, #103	; 0x67
 800df14:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800df18:	4293      	cmp	r3, r2
 800df1a:	db05      	blt.n	800df28 <_printf_float+0x1c0>
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	6123      	str	r3, [r4, #16]
 800df20:	07d1      	lsls	r1, r2, #31
 800df22:	d5e8      	bpl.n	800def6 <_printf_float+0x18e>
 800df24:	3301      	adds	r3, #1
 800df26:	e7e5      	b.n	800def4 <_printf_float+0x18c>
 800df28:	2b00      	cmp	r3, #0
 800df2a:	bfcc      	ite	gt
 800df2c:	2301      	movgt	r3, #1
 800df2e:	f1c3 0302 	rsble	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	e7de      	b.n	800def4 <_printf_float+0x18c>
 800df36:	6823      	ldr	r3, [r4, #0]
 800df38:	055a      	lsls	r2, r3, #21
 800df3a:	d407      	bmi.n	800df4c <_printf_float+0x1e4>
 800df3c:	6923      	ldr	r3, [r4, #16]
 800df3e:	463a      	mov	r2, r7
 800df40:	4659      	mov	r1, fp
 800df42:	4628      	mov	r0, r5
 800df44:	47b0      	blx	r6
 800df46:	3001      	adds	r0, #1
 800df48:	d129      	bne.n	800df9e <_printf_float+0x236>
 800df4a:	e764      	b.n	800de16 <_printf_float+0xae>
 800df4c:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800df50:	f240 80d7 	bls.w	800e102 <_printf_float+0x39a>
 800df54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df58:	2200      	movs	r2, #0
 800df5a:	2300      	movs	r3, #0
 800df5c:	f7f2 fd60 	bl	8000a20 <__aeabi_dcmpeq>
 800df60:	b388      	cbz	r0, 800dfc6 <_printf_float+0x25e>
 800df62:	2301      	movs	r3, #1
 800df64:	4a40      	ldr	r2, [pc, #256]	; (800e068 <_printf_float+0x300>)
 800df66:	4659      	mov	r1, fp
 800df68:	4628      	mov	r0, r5
 800df6a:	47b0      	blx	r6
 800df6c:	3001      	adds	r0, #1
 800df6e:	f43f af52 	beq.w	800de16 <_printf_float+0xae>
 800df72:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800df76:	429a      	cmp	r2, r3
 800df78:	db02      	blt.n	800df80 <_printf_float+0x218>
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	07d8      	lsls	r0, r3, #31
 800df7e:	d50e      	bpl.n	800df9e <_printf_float+0x236>
 800df80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df84:	4659      	mov	r1, fp
 800df86:	4628      	mov	r0, r5
 800df88:	47b0      	blx	r6
 800df8a:	3001      	adds	r0, #1
 800df8c:	f43f af43 	beq.w	800de16 <_printf_float+0xae>
 800df90:	2700      	movs	r7, #0
 800df92:	f104 081a 	add.w	r8, r4, #26
 800df96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df98:	3b01      	subs	r3, #1
 800df9a:	42bb      	cmp	r3, r7
 800df9c:	dc09      	bgt.n	800dfb2 <_printf_float+0x24a>
 800df9e:	6823      	ldr	r3, [r4, #0]
 800dfa0:	079f      	lsls	r7, r3, #30
 800dfa2:	f100 80fd 	bmi.w	800e1a0 <_printf_float+0x438>
 800dfa6:	68e0      	ldr	r0, [r4, #12]
 800dfa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dfaa:	4298      	cmp	r0, r3
 800dfac:	bfb8      	it	lt
 800dfae:	4618      	movlt	r0, r3
 800dfb0:	e733      	b.n	800de1a <_printf_float+0xb2>
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	4642      	mov	r2, r8
 800dfb6:	4659      	mov	r1, fp
 800dfb8:	4628      	mov	r0, r5
 800dfba:	47b0      	blx	r6
 800dfbc:	3001      	adds	r0, #1
 800dfbe:	f43f af2a 	beq.w	800de16 <_printf_float+0xae>
 800dfc2:	3701      	adds	r7, #1
 800dfc4:	e7e7      	b.n	800df96 <_printf_float+0x22e>
 800dfc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	dc2b      	bgt.n	800e024 <_printf_float+0x2bc>
 800dfcc:	2301      	movs	r3, #1
 800dfce:	4a26      	ldr	r2, [pc, #152]	; (800e068 <_printf_float+0x300>)
 800dfd0:	4659      	mov	r1, fp
 800dfd2:	4628      	mov	r0, r5
 800dfd4:	47b0      	blx	r6
 800dfd6:	3001      	adds	r0, #1
 800dfd8:	f43f af1d 	beq.w	800de16 <_printf_float+0xae>
 800dfdc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfde:	b923      	cbnz	r3, 800dfea <_printf_float+0x282>
 800dfe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfe2:	b913      	cbnz	r3, 800dfea <_printf_float+0x282>
 800dfe4:	6823      	ldr	r3, [r4, #0]
 800dfe6:	07d9      	lsls	r1, r3, #31
 800dfe8:	d5d9      	bpl.n	800df9e <_printf_float+0x236>
 800dfea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfee:	4659      	mov	r1, fp
 800dff0:	4628      	mov	r0, r5
 800dff2:	47b0      	blx	r6
 800dff4:	3001      	adds	r0, #1
 800dff6:	f43f af0e 	beq.w	800de16 <_printf_float+0xae>
 800dffa:	f04f 0800 	mov.w	r8, #0
 800dffe:	f104 091a 	add.w	r9, r4, #26
 800e002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e004:	425b      	negs	r3, r3
 800e006:	4543      	cmp	r3, r8
 800e008:	dc01      	bgt.n	800e00e <_printf_float+0x2a6>
 800e00a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e00c:	e797      	b.n	800df3e <_printf_float+0x1d6>
 800e00e:	2301      	movs	r3, #1
 800e010:	464a      	mov	r2, r9
 800e012:	4659      	mov	r1, fp
 800e014:	4628      	mov	r0, r5
 800e016:	47b0      	blx	r6
 800e018:	3001      	adds	r0, #1
 800e01a:	f43f aefc 	beq.w	800de16 <_printf_float+0xae>
 800e01e:	f108 0801 	add.w	r8, r8, #1
 800e022:	e7ee      	b.n	800e002 <_printf_float+0x29a>
 800e024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e026:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e028:	429a      	cmp	r2, r3
 800e02a:	bfa8      	it	ge
 800e02c:	461a      	movge	r2, r3
 800e02e:	2a00      	cmp	r2, #0
 800e030:	4690      	mov	r8, r2
 800e032:	dd07      	ble.n	800e044 <_printf_float+0x2dc>
 800e034:	4613      	mov	r3, r2
 800e036:	4659      	mov	r1, fp
 800e038:	463a      	mov	r2, r7
 800e03a:	4628      	mov	r0, r5
 800e03c:	47b0      	blx	r6
 800e03e:	3001      	adds	r0, #1
 800e040:	f43f aee9 	beq.w	800de16 <_printf_float+0xae>
 800e044:	f104 031a 	add.w	r3, r4, #26
 800e048:	f04f 0a00 	mov.w	sl, #0
 800e04c:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800e050:	930b      	str	r3, [sp, #44]	; 0x2c
 800e052:	e015      	b.n	800e080 <_printf_float+0x318>
 800e054:	7fefffff 	.word	0x7fefffff
 800e058:	08010a3a 	.word	0x08010a3a
 800e05c:	08010a36 	.word	0x08010a36
 800e060:	08010a42 	.word	0x08010a42
 800e064:	08010a3e 	.word	0x08010a3e
 800e068:	08010a46 	.word	0x08010a46
 800e06c:	2301      	movs	r3, #1
 800e06e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e070:	4659      	mov	r1, fp
 800e072:	4628      	mov	r0, r5
 800e074:	47b0      	blx	r6
 800e076:	3001      	adds	r0, #1
 800e078:	f43f aecd 	beq.w	800de16 <_printf_float+0xae>
 800e07c:	f10a 0a01 	add.w	sl, sl, #1
 800e080:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800e084:	eba9 0308 	sub.w	r3, r9, r8
 800e088:	4553      	cmp	r3, sl
 800e08a:	dcef      	bgt.n	800e06c <_printf_float+0x304>
 800e08c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e090:	429a      	cmp	r2, r3
 800e092:	444f      	add	r7, r9
 800e094:	db14      	blt.n	800e0c0 <_printf_float+0x358>
 800e096:	6823      	ldr	r3, [r4, #0]
 800e098:	07da      	lsls	r2, r3, #31
 800e09a:	d411      	bmi.n	800e0c0 <_printf_float+0x358>
 800e09c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e09e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e0a0:	eba3 0209 	sub.w	r2, r3, r9
 800e0a4:	eba3 0901 	sub.w	r9, r3, r1
 800e0a8:	4591      	cmp	r9, r2
 800e0aa:	bfa8      	it	ge
 800e0ac:	4691      	movge	r9, r2
 800e0ae:	f1b9 0f00 	cmp.w	r9, #0
 800e0b2:	dc0d      	bgt.n	800e0d0 <_printf_float+0x368>
 800e0b4:	2700      	movs	r7, #0
 800e0b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e0ba:	f104 081a 	add.w	r8, r4, #26
 800e0be:	e018      	b.n	800e0f2 <_printf_float+0x38a>
 800e0c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0c4:	4659      	mov	r1, fp
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	47b0      	blx	r6
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	d1e6      	bne.n	800e09c <_printf_float+0x334>
 800e0ce:	e6a2      	b.n	800de16 <_printf_float+0xae>
 800e0d0:	464b      	mov	r3, r9
 800e0d2:	463a      	mov	r2, r7
 800e0d4:	4659      	mov	r1, fp
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	47b0      	blx	r6
 800e0da:	3001      	adds	r0, #1
 800e0dc:	d1ea      	bne.n	800e0b4 <_printf_float+0x34c>
 800e0de:	e69a      	b.n	800de16 <_printf_float+0xae>
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	4642      	mov	r2, r8
 800e0e4:	4659      	mov	r1, fp
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	47b0      	blx	r6
 800e0ea:	3001      	adds	r0, #1
 800e0ec:	f43f ae93 	beq.w	800de16 <_printf_float+0xae>
 800e0f0:	3701      	adds	r7, #1
 800e0f2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e0f6:	1a9b      	subs	r3, r3, r2
 800e0f8:	eba3 0309 	sub.w	r3, r3, r9
 800e0fc:	42bb      	cmp	r3, r7
 800e0fe:	dcef      	bgt.n	800e0e0 <_printf_float+0x378>
 800e100:	e74d      	b.n	800df9e <_printf_float+0x236>
 800e102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e104:	2a01      	cmp	r2, #1
 800e106:	dc01      	bgt.n	800e10c <_printf_float+0x3a4>
 800e108:	07db      	lsls	r3, r3, #31
 800e10a:	d538      	bpl.n	800e17e <_printf_float+0x416>
 800e10c:	2301      	movs	r3, #1
 800e10e:	463a      	mov	r2, r7
 800e110:	4659      	mov	r1, fp
 800e112:	4628      	mov	r0, r5
 800e114:	47b0      	blx	r6
 800e116:	3001      	adds	r0, #1
 800e118:	f43f ae7d 	beq.w	800de16 <_printf_float+0xae>
 800e11c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e120:	4659      	mov	r1, fp
 800e122:	4628      	mov	r0, r5
 800e124:	47b0      	blx	r6
 800e126:	3001      	adds	r0, #1
 800e128:	f107 0701 	add.w	r7, r7, #1
 800e12c:	f43f ae73 	beq.w	800de16 <_printf_float+0xae>
 800e130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e136:	2200      	movs	r2, #0
 800e138:	f103 38ff 	add.w	r8, r3, #4294967295
 800e13c:	2300      	movs	r3, #0
 800e13e:	f7f2 fc6f 	bl	8000a20 <__aeabi_dcmpeq>
 800e142:	b9c0      	cbnz	r0, 800e176 <_printf_float+0x40e>
 800e144:	4643      	mov	r3, r8
 800e146:	463a      	mov	r2, r7
 800e148:	4659      	mov	r1, fp
 800e14a:	4628      	mov	r0, r5
 800e14c:	47b0      	blx	r6
 800e14e:	3001      	adds	r0, #1
 800e150:	d10d      	bne.n	800e16e <_printf_float+0x406>
 800e152:	e660      	b.n	800de16 <_printf_float+0xae>
 800e154:	2301      	movs	r3, #1
 800e156:	4642      	mov	r2, r8
 800e158:	4659      	mov	r1, fp
 800e15a:	4628      	mov	r0, r5
 800e15c:	47b0      	blx	r6
 800e15e:	3001      	adds	r0, #1
 800e160:	f43f ae59 	beq.w	800de16 <_printf_float+0xae>
 800e164:	3701      	adds	r7, #1
 800e166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e168:	3b01      	subs	r3, #1
 800e16a:	42bb      	cmp	r3, r7
 800e16c:	dcf2      	bgt.n	800e154 <_printf_float+0x3ec>
 800e16e:	464b      	mov	r3, r9
 800e170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e174:	e6e4      	b.n	800df40 <_printf_float+0x1d8>
 800e176:	2700      	movs	r7, #0
 800e178:	f104 081a 	add.w	r8, r4, #26
 800e17c:	e7f3      	b.n	800e166 <_printf_float+0x3fe>
 800e17e:	2301      	movs	r3, #1
 800e180:	e7e1      	b.n	800e146 <_printf_float+0x3de>
 800e182:	2301      	movs	r3, #1
 800e184:	4642      	mov	r2, r8
 800e186:	4659      	mov	r1, fp
 800e188:	4628      	mov	r0, r5
 800e18a:	47b0      	blx	r6
 800e18c:	3001      	adds	r0, #1
 800e18e:	f43f ae42 	beq.w	800de16 <_printf_float+0xae>
 800e192:	3701      	adds	r7, #1
 800e194:	68e3      	ldr	r3, [r4, #12]
 800e196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e198:	1a9b      	subs	r3, r3, r2
 800e19a:	42bb      	cmp	r3, r7
 800e19c:	dcf1      	bgt.n	800e182 <_printf_float+0x41a>
 800e19e:	e702      	b.n	800dfa6 <_printf_float+0x23e>
 800e1a0:	2700      	movs	r7, #0
 800e1a2:	f104 0819 	add.w	r8, r4, #25
 800e1a6:	e7f5      	b.n	800e194 <_printf_float+0x42c>
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	f43f ae94 	beq.w	800ded6 <_printf_float+0x16e>
 800e1ae:	f04f 0c00 	mov.w	ip, #0
 800e1b2:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800e1b6:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800e1ba:	6022      	str	r2, [r4, #0]
 800e1bc:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800e1c0:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e1c4:	9300      	str	r3, [sp, #0]
 800e1c6:	463a      	mov	r2, r7
 800e1c8:	464b      	mov	r3, r9
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	f7ff fd3a 	bl	800dc44 <__cvt>
 800e1d0:	4607      	mov	r7, r0
 800e1d2:	e64f      	b.n	800de74 <_printf_float+0x10c>

0800e1d4 <_printf_common>:
 800e1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1d8:	4691      	mov	r9, r2
 800e1da:	461f      	mov	r7, r3
 800e1dc:	688a      	ldr	r2, [r1, #8]
 800e1de:	690b      	ldr	r3, [r1, #16]
 800e1e0:	4606      	mov	r6, r0
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	bfb8      	it	lt
 800e1e6:	4613      	movlt	r3, r2
 800e1e8:	f8c9 3000 	str.w	r3, [r9]
 800e1ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1f0:	460c      	mov	r4, r1
 800e1f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1f6:	b112      	cbz	r2, 800e1fe <_printf_common+0x2a>
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	f8c9 3000 	str.w	r3, [r9]
 800e1fe:	6823      	ldr	r3, [r4, #0]
 800e200:	0699      	lsls	r1, r3, #26
 800e202:	bf42      	ittt	mi
 800e204:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e208:	3302      	addmi	r3, #2
 800e20a:	f8c9 3000 	strmi.w	r3, [r9]
 800e20e:	6825      	ldr	r5, [r4, #0]
 800e210:	f015 0506 	ands.w	r5, r5, #6
 800e214:	d107      	bne.n	800e226 <_printf_common+0x52>
 800e216:	f104 0a19 	add.w	sl, r4, #25
 800e21a:	68e3      	ldr	r3, [r4, #12]
 800e21c:	f8d9 2000 	ldr.w	r2, [r9]
 800e220:	1a9b      	subs	r3, r3, r2
 800e222:	42ab      	cmp	r3, r5
 800e224:	dc29      	bgt.n	800e27a <_printf_common+0xa6>
 800e226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e22a:	6822      	ldr	r2, [r4, #0]
 800e22c:	3300      	adds	r3, #0
 800e22e:	bf18      	it	ne
 800e230:	2301      	movne	r3, #1
 800e232:	0692      	lsls	r2, r2, #26
 800e234:	d42e      	bmi.n	800e294 <_printf_common+0xc0>
 800e236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e23a:	4639      	mov	r1, r7
 800e23c:	4630      	mov	r0, r6
 800e23e:	47c0      	blx	r8
 800e240:	3001      	adds	r0, #1
 800e242:	d021      	beq.n	800e288 <_printf_common+0xb4>
 800e244:	6823      	ldr	r3, [r4, #0]
 800e246:	68e5      	ldr	r5, [r4, #12]
 800e248:	f003 0306 	and.w	r3, r3, #6
 800e24c:	2b04      	cmp	r3, #4
 800e24e:	bf18      	it	ne
 800e250:	2500      	movne	r5, #0
 800e252:	f8d9 2000 	ldr.w	r2, [r9]
 800e256:	f04f 0900 	mov.w	r9, #0
 800e25a:	bf08      	it	eq
 800e25c:	1aad      	subeq	r5, r5, r2
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	6922      	ldr	r2, [r4, #16]
 800e262:	bf08      	it	eq
 800e264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e268:	4293      	cmp	r3, r2
 800e26a:	bfc4      	itt	gt
 800e26c:	1a9b      	subgt	r3, r3, r2
 800e26e:	18ed      	addgt	r5, r5, r3
 800e270:	341a      	adds	r4, #26
 800e272:	454d      	cmp	r5, r9
 800e274:	d11a      	bne.n	800e2ac <_printf_common+0xd8>
 800e276:	2000      	movs	r0, #0
 800e278:	e008      	b.n	800e28c <_printf_common+0xb8>
 800e27a:	2301      	movs	r3, #1
 800e27c:	4652      	mov	r2, sl
 800e27e:	4639      	mov	r1, r7
 800e280:	4630      	mov	r0, r6
 800e282:	47c0      	blx	r8
 800e284:	3001      	adds	r0, #1
 800e286:	d103      	bne.n	800e290 <_printf_common+0xbc>
 800e288:	f04f 30ff 	mov.w	r0, #4294967295
 800e28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e290:	3501      	adds	r5, #1
 800e292:	e7c2      	b.n	800e21a <_printf_common+0x46>
 800e294:	2030      	movs	r0, #48	; 0x30
 800e296:	18e1      	adds	r1, r4, r3
 800e298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e29c:	1c5a      	adds	r2, r3, #1
 800e29e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e2a2:	4422      	add	r2, r4
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e2aa:	e7c4      	b.n	800e236 <_printf_common+0x62>
 800e2ac:	2301      	movs	r3, #1
 800e2ae:	4622      	mov	r2, r4
 800e2b0:	4639      	mov	r1, r7
 800e2b2:	4630      	mov	r0, r6
 800e2b4:	47c0      	blx	r8
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d0e6      	beq.n	800e288 <_printf_common+0xb4>
 800e2ba:	f109 0901 	add.w	r9, r9, #1
 800e2be:	e7d8      	b.n	800e272 <_printf_common+0x9e>

0800e2c0 <_printf_i>:
 800e2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e2c8:	460c      	mov	r4, r1
 800e2ca:	7e09      	ldrb	r1, [r1, #24]
 800e2cc:	b085      	sub	sp, #20
 800e2ce:	296e      	cmp	r1, #110	; 0x6e
 800e2d0:	4617      	mov	r7, r2
 800e2d2:	4606      	mov	r6, r0
 800e2d4:	4698      	mov	r8, r3
 800e2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2d8:	f000 80b3 	beq.w	800e442 <_printf_i+0x182>
 800e2dc:	d822      	bhi.n	800e324 <_printf_i+0x64>
 800e2de:	2963      	cmp	r1, #99	; 0x63
 800e2e0:	d036      	beq.n	800e350 <_printf_i+0x90>
 800e2e2:	d80a      	bhi.n	800e2fa <_printf_i+0x3a>
 800e2e4:	2900      	cmp	r1, #0
 800e2e6:	f000 80b9 	beq.w	800e45c <_printf_i+0x19c>
 800e2ea:	2958      	cmp	r1, #88	; 0x58
 800e2ec:	f000 8083 	beq.w	800e3f6 <_printf_i+0x136>
 800e2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e2f8:	e032      	b.n	800e360 <_printf_i+0xa0>
 800e2fa:	2964      	cmp	r1, #100	; 0x64
 800e2fc:	d001      	beq.n	800e302 <_printf_i+0x42>
 800e2fe:	2969      	cmp	r1, #105	; 0x69
 800e300:	d1f6      	bne.n	800e2f0 <_printf_i+0x30>
 800e302:	6820      	ldr	r0, [r4, #0]
 800e304:	6813      	ldr	r3, [r2, #0]
 800e306:	0605      	lsls	r5, r0, #24
 800e308:	f103 0104 	add.w	r1, r3, #4
 800e30c:	d52a      	bpl.n	800e364 <_printf_i+0xa4>
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6011      	str	r1, [r2, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	da03      	bge.n	800e31e <_printf_i+0x5e>
 800e316:	222d      	movs	r2, #45	; 0x2d
 800e318:	425b      	negs	r3, r3
 800e31a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e31e:	486f      	ldr	r0, [pc, #444]	; (800e4dc <_printf_i+0x21c>)
 800e320:	220a      	movs	r2, #10
 800e322:	e039      	b.n	800e398 <_printf_i+0xd8>
 800e324:	2973      	cmp	r1, #115	; 0x73
 800e326:	f000 809d 	beq.w	800e464 <_printf_i+0x1a4>
 800e32a:	d808      	bhi.n	800e33e <_printf_i+0x7e>
 800e32c:	296f      	cmp	r1, #111	; 0x6f
 800e32e:	d020      	beq.n	800e372 <_printf_i+0xb2>
 800e330:	2970      	cmp	r1, #112	; 0x70
 800e332:	d1dd      	bne.n	800e2f0 <_printf_i+0x30>
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	f043 0320 	orr.w	r3, r3, #32
 800e33a:	6023      	str	r3, [r4, #0]
 800e33c:	e003      	b.n	800e346 <_printf_i+0x86>
 800e33e:	2975      	cmp	r1, #117	; 0x75
 800e340:	d017      	beq.n	800e372 <_printf_i+0xb2>
 800e342:	2978      	cmp	r1, #120	; 0x78
 800e344:	d1d4      	bne.n	800e2f0 <_printf_i+0x30>
 800e346:	2378      	movs	r3, #120	; 0x78
 800e348:	4865      	ldr	r0, [pc, #404]	; (800e4e0 <_printf_i+0x220>)
 800e34a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e34e:	e055      	b.n	800e3fc <_printf_i+0x13c>
 800e350:	6813      	ldr	r3, [r2, #0]
 800e352:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e356:	1d19      	adds	r1, r3, #4
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	6011      	str	r1, [r2, #0]
 800e35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e360:	2301      	movs	r3, #1
 800e362:	e08c      	b.n	800e47e <_printf_i+0x1be>
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e36a:	6011      	str	r1, [r2, #0]
 800e36c:	bf18      	it	ne
 800e36e:	b21b      	sxthne	r3, r3
 800e370:	e7cf      	b.n	800e312 <_printf_i+0x52>
 800e372:	6813      	ldr	r3, [r2, #0]
 800e374:	6825      	ldr	r5, [r4, #0]
 800e376:	1d18      	adds	r0, r3, #4
 800e378:	6010      	str	r0, [r2, #0]
 800e37a:	0628      	lsls	r0, r5, #24
 800e37c:	d501      	bpl.n	800e382 <_printf_i+0xc2>
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	e002      	b.n	800e388 <_printf_i+0xc8>
 800e382:	0668      	lsls	r0, r5, #25
 800e384:	d5fb      	bpl.n	800e37e <_printf_i+0xbe>
 800e386:	881b      	ldrh	r3, [r3, #0]
 800e388:	296f      	cmp	r1, #111	; 0x6f
 800e38a:	bf14      	ite	ne
 800e38c:	220a      	movne	r2, #10
 800e38e:	2208      	moveq	r2, #8
 800e390:	4852      	ldr	r0, [pc, #328]	; (800e4dc <_printf_i+0x21c>)
 800e392:	2100      	movs	r1, #0
 800e394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e398:	6865      	ldr	r5, [r4, #4]
 800e39a:	2d00      	cmp	r5, #0
 800e39c:	60a5      	str	r5, [r4, #8]
 800e39e:	f2c0 8095 	blt.w	800e4cc <_printf_i+0x20c>
 800e3a2:	6821      	ldr	r1, [r4, #0]
 800e3a4:	f021 0104 	bic.w	r1, r1, #4
 800e3a8:	6021      	str	r1, [r4, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d13d      	bne.n	800e42a <_printf_i+0x16a>
 800e3ae:	2d00      	cmp	r5, #0
 800e3b0:	f040 808e 	bne.w	800e4d0 <_printf_i+0x210>
 800e3b4:	4665      	mov	r5, ip
 800e3b6:	2a08      	cmp	r2, #8
 800e3b8:	d10b      	bne.n	800e3d2 <_printf_i+0x112>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	07db      	lsls	r3, r3, #31
 800e3be:	d508      	bpl.n	800e3d2 <_printf_i+0x112>
 800e3c0:	6923      	ldr	r3, [r4, #16]
 800e3c2:	6862      	ldr	r2, [r4, #4]
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	bfde      	ittt	le
 800e3c8:	2330      	movle	r3, #48	; 0x30
 800e3ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e3ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e3d2:	ebac 0305 	sub.w	r3, ip, r5
 800e3d6:	6123      	str	r3, [r4, #16]
 800e3d8:	f8cd 8000 	str.w	r8, [sp]
 800e3dc:	463b      	mov	r3, r7
 800e3de:	aa03      	add	r2, sp, #12
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7ff fef6 	bl	800e1d4 <_printf_common>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d14d      	bne.n	800e488 <_printf_i+0x1c8>
 800e3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f0:	b005      	add	sp, #20
 800e3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3f6:	4839      	ldr	r0, [pc, #228]	; (800e4dc <_printf_i+0x21c>)
 800e3f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e3fc:	6813      	ldr	r3, [r2, #0]
 800e3fe:	6821      	ldr	r1, [r4, #0]
 800e400:	1d1d      	adds	r5, r3, #4
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6015      	str	r5, [r2, #0]
 800e406:	060a      	lsls	r2, r1, #24
 800e408:	d50b      	bpl.n	800e422 <_printf_i+0x162>
 800e40a:	07ca      	lsls	r2, r1, #31
 800e40c:	bf44      	itt	mi
 800e40e:	f041 0120 	orrmi.w	r1, r1, #32
 800e412:	6021      	strmi	r1, [r4, #0]
 800e414:	b91b      	cbnz	r3, 800e41e <_printf_i+0x15e>
 800e416:	6822      	ldr	r2, [r4, #0]
 800e418:	f022 0220 	bic.w	r2, r2, #32
 800e41c:	6022      	str	r2, [r4, #0]
 800e41e:	2210      	movs	r2, #16
 800e420:	e7b7      	b.n	800e392 <_printf_i+0xd2>
 800e422:	064d      	lsls	r5, r1, #25
 800e424:	bf48      	it	mi
 800e426:	b29b      	uxthmi	r3, r3
 800e428:	e7ef      	b.n	800e40a <_printf_i+0x14a>
 800e42a:	4665      	mov	r5, ip
 800e42c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e430:	fb02 3311 	mls	r3, r2, r1, r3
 800e434:	5cc3      	ldrb	r3, [r0, r3]
 800e436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e43a:	460b      	mov	r3, r1
 800e43c:	2900      	cmp	r1, #0
 800e43e:	d1f5      	bne.n	800e42c <_printf_i+0x16c>
 800e440:	e7b9      	b.n	800e3b6 <_printf_i+0xf6>
 800e442:	6813      	ldr	r3, [r2, #0]
 800e444:	6825      	ldr	r5, [r4, #0]
 800e446:	1d18      	adds	r0, r3, #4
 800e448:	6961      	ldr	r1, [r4, #20]
 800e44a:	6010      	str	r0, [r2, #0]
 800e44c:	0628      	lsls	r0, r5, #24
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	d501      	bpl.n	800e456 <_printf_i+0x196>
 800e452:	6019      	str	r1, [r3, #0]
 800e454:	e002      	b.n	800e45c <_printf_i+0x19c>
 800e456:	066a      	lsls	r2, r5, #25
 800e458:	d5fb      	bpl.n	800e452 <_printf_i+0x192>
 800e45a:	8019      	strh	r1, [r3, #0]
 800e45c:	2300      	movs	r3, #0
 800e45e:	4665      	mov	r5, ip
 800e460:	6123      	str	r3, [r4, #16]
 800e462:	e7b9      	b.n	800e3d8 <_printf_i+0x118>
 800e464:	6813      	ldr	r3, [r2, #0]
 800e466:	1d19      	adds	r1, r3, #4
 800e468:	6011      	str	r1, [r2, #0]
 800e46a:	681d      	ldr	r5, [r3, #0]
 800e46c:	6862      	ldr	r2, [r4, #4]
 800e46e:	2100      	movs	r1, #0
 800e470:	4628      	mov	r0, r5
 800e472:	f000 ff03 	bl	800f27c <memchr>
 800e476:	b108      	cbz	r0, 800e47c <_printf_i+0x1bc>
 800e478:	1b40      	subs	r0, r0, r5
 800e47a:	6060      	str	r0, [r4, #4]
 800e47c:	6863      	ldr	r3, [r4, #4]
 800e47e:	6123      	str	r3, [r4, #16]
 800e480:	2300      	movs	r3, #0
 800e482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e486:	e7a7      	b.n	800e3d8 <_printf_i+0x118>
 800e488:	6923      	ldr	r3, [r4, #16]
 800e48a:	462a      	mov	r2, r5
 800e48c:	4639      	mov	r1, r7
 800e48e:	4630      	mov	r0, r6
 800e490:	47c0      	blx	r8
 800e492:	3001      	adds	r0, #1
 800e494:	d0aa      	beq.n	800e3ec <_printf_i+0x12c>
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	079b      	lsls	r3, r3, #30
 800e49a:	d413      	bmi.n	800e4c4 <_printf_i+0x204>
 800e49c:	68e0      	ldr	r0, [r4, #12]
 800e49e:	9b03      	ldr	r3, [sp, #12]
 800e4a0:	4298      	cmp	r0, r3
 800e4a2:	bfb8      	it	lt
 800e4a4:	4618      	movlt	r0, r3
 800e4a6:	e7a3      	b.n	800e3f0 <_printf_i+0x130>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	464a      	mov	r2, r9
 800e4ac:	4639      	mov	r1, r7
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	47c0      	blx	r8
 800e4b2:	3001      	adds	r0, #1
 800e4b4:	d09a      	beq.n	800e3ec <_printf_i+0x12c>
 800e4b6:	3501      	adds	r5, #1
 800e4b8:	68e3      	ldr	r3, [r4, #12]
 800e4ba:	9a03      	ldr	r2, [sp, #12]
 800e4bc:	1a9b      	subs	r3, r3, r2
 800e4be:	42ab      	cmp	r3, r5
 800e4c0:	dcf2      	bgt.n	800e4a8 <_printf_i+0x1e8>
 800e4c2:	e7eb      	b.n	800e49c <_printf_i+0x1dc>
 800e4c4:	2500      	movs	r5, #0
 800e4c6:	f104 0919 	add.w	r9, r4, #25
 800e4ca:	e7f5      	b.n	800e4b8 <_printf_i+0x1f8>
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d1ac      	bne.n	800e42a <_printf_i+0x16a>
 800e4d0:	7803      	ldrb	r3, [r0, #0]
 800e4d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e4da:	e76c      	b.n	800e3b6 <_printf_i+0xf6>
 800e4dc:	08010a48 	.word	0x08010a48
 800e4e0:	08010a59 	.word	0x08010a59

0800e4e4 <siprintf>:
 800e4e4:	b40e      	push	{r1, r2, r3}
 800e4e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e4ea:	b500      	push	{lr}
 800e4ec:	b09c      	sub	sp, #112	; 0x70
 800e4ee:	ab1d      	add	r3, sp, #116	; 0x74
 800e4f0:	9002      	str	r0, [sp, #8]
 800e4f2:	9006      	str	r0, [sp, #24]
 800e4f4:	9107      	str	r1, [sp, #28]
 800e4f6:	9104      	str	r1, [sp, #16]
 800e4f8:	4808      	ldr	r0, [pc, #32]	; (800e51c <siprintf+0x38>)
 800e4fa:	4909      	ldr	r1, [pc, #36]	; (800e520 <siprintf+0x3c>)
 800e4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e500:	9105      	str	r1, [sp, #20]
 800e502:	6800      	ldr	r0, [r0, #0]
 800e504:	a902      	add	r1, sp, #8
 800e506:	9301      	str	r3, [sp, #4]
 800e508:	f001 fabc 	bl	800fa84 <_svfiprintf_r>
 800e50c:	2200      	movs	r2, #0
 800e50e:	9b02      	ldr	r3, [sp, #8]
 800e510:	701a      	strb	r2, [r3, #0]
 800e512:	b01c      	add	sp, #112	; 0x70
 800e514:	f85d eb04 	ldr.w	lr, [sp], #4
 800e518:	b003      	add	sp, #12
 800e51a:	4770      	bx	lr
 800e51c:	20000060 	.word	0x20000060
 800e520:	ffff0208 	.word	0xffff0208

0800e524 <strcpy>:
 800e524:	4603      	mov	r3, r0
 800e526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e52a:	f803 2b01 	strb.w	r2, [r3], #1
 800e52e:	2a00      	cmp	r2, #0
 800e530:	d1f9      	bne.n	800e526 <strcpy+0x2>
 800e532:	4770      	bx	lr

0800e534 <__utoa>:
 800e534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e536:	b08b      	sub	sp, #44	; 0x2c
 800e538:	4605      	mov	r5, r0
 800e53a:	460c      	mov	r4, r1
 800e53c:	466e      	mov	r6, sp
 800e53e:	4b1b      	ldr	r3, [pc, #108]	; (800e5ac <__utoa+0x78>)
 800e540:	f103 0c20 	add.w	ip, r3, #32
 800e544:	4637      	mov	r7, r6
 800e546:	6818      	ldr	r0, [r3, #0]
 800e548:	6859      	ldr	r1, [r3, #4]
 800e54a:	3308      	adds	r3, #8
 800e54c:	c703      	stmia	r7!, {r0, r1}
 800e54e:	4563      	cmp	r3, ip
 800e550:	463e      	mov	r6, r7
 800e552:	d1f7      	bne.n	800e544 <__utoa+0x10>
 800e554:	6818      	ldr	r0, [r3, #0]
 800e556:	791b      	ldrb	r3, [r3, #4]
 800e558:	6038      	str	r0, [r7, #0]
 800e55a:	713b      	strb	r3, [r7, #4]
 800e55c:	1e93      	subs	r3, r2, #2
 800e55e:	2b22      	cmp	r3, #34	; 0x22
 800e560:	f04f 0300 	mov.w	r3, #0
 800e564:	d904      	bls.n	800e570 <__utoa+0x3c>
 800e566:	7023      	strb	r3, [r4, #0]
 800e568:	461c      	mov	r4, r3
 800e56a:	4620      	mov	r0, r4
 800e56c:	b00b      	add	sp, #44	; 0x2c
 800e56e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e570:	1e66      	subs	r6, r4, #1
 800e572:	fbb5 f0f2 	udiv	r0, r5, r2
 800e576:	fb02 5510 	mls	r5, r2, r0, r5
 800e57a:	af0a      	add	r7, sp, #40	; 0x28
 800e57c:	443d      	add	r5, r7
 800e57e:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800e582:	1c59      	adds	r1, r3, #1
 800e584:	f806 5f01 	strb.w	r5, [r6, #1]!
 800e588:	4605      	mov	r5, r0
 800e58a:	b968      	cbnz	r0, 800e5a8 <__utoa+0x74>
 800e58c:	4622      	mov	r2, r4
 800e58e:	5460      	strb	r0, [r4, r1]
 800e590:	4423      	add	r3, r4
 800e592:	1b19      	subs	r1, r3, r4
 800e594:	1b10      	subs	r0, r2, r4
 800e596:	4281      	cmp	r1, r0
 800e598:	dde7      	ble.n	800e56a <__utoa+0x36>
 800e59a:	7811      	ldrb	r1, [r2, #0]
 800e59c:	7818      	ldrb	r0, [r3, #0]
 800e59e:	f802 0b01 	strb.w	r0, [r2], #1
 800e5a2:	f803 1901 	strb.w	r1, [r3], #-1
 800e5a6:	e7f4      	b.n	800e592 <__utoa+0x5e>
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	e7e2      	b.n	800e572 <__utoa+0x3e>
 800e5ac:	08010a6a 	.word	0x08010a6a

0800e5b0 <__ascii_wctomb>:
 800e5b0:	b149      	cbz	r1, 800e5c6 <__ascii_wctomb+0x16>
 800e5b2:	2aff      	cmp	r2, #255	; 0xff
 800e5b4:	bf8b      	itete	hi
 800e5b6:	238a      	movhi	r3, #138	; 0x8a
 800e5b8:	700a      	strbls	r2, [r1, #0]
 800e5ba:	6003      	strhi	r3, [r0, #0]
 800e5bc:	2001      	movls	r0, #1
 800e5be:	bf88      	it	hi
 800e5c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e5c4:	4770      	bx	lr
 800e5c6:	4608      	mov	r0, r1
 800e5c8:	4770      	bx	lr

0800e5ca <quorem>:
 800e5ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ce:	6903      	ldr	r3, [r0, #16]
 800e5d0:	690c      	ldr	r4, [r1, #16]
 800e5d2:	4680      	mov	r8, r0
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	f2c0 8084 	blt.w	800e6e2 <quorem+0x118>
 800e5da:	3c01      	subs	r4, #1
 800e5dc:	f101 0714 	add.w	r7, r1, #20
 800e5e0:	f100 0614 	add.w	r6, r0, #20
 800e5e4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e5e8:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e5ec:	3501      	adds	r5, #1
 800e5ee:	fbb0 f5f5 	udiv	r5, r0, r5
 800e5f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e5f6:	eb06 030c 	add.w	r3, r6, ip
 800e5fa:	eb07 090c 	add.w	r9, r7, ip
 800e5fe:	9301      	str	r3, [sp, #4]
 800e600:	b39d      	cbz	r5, 800e66a <quorem+0xa0>
 800e602:	f04f 0a00 	mov.w	sl, #0
 800e606:	4638      	mov	r0, r7
 800e608:	46b6      	mov	lr, r6
 800e60a:	46d3      	mov	fp, sl
 800e60c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e610:	b293      	uxth	r3, r2
 800e612:	fb05 a303 	mla	r3, r5, r3, sl
 800e616:	0c12      	lsrs	r2, r2, #16
 800e618:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e61c:	fb05 a202 	mla	r2, r5, r2, sl
 800e620:	b29b      	uxth	r3, r3
 800e622:	ebab 0303 	sub.w	r3, fp, r3
 800e626:	f8de b000 	ldr.w	fp, [lr]
 800e62a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e62e:	fa1f fb8b 	uxth.w	fp, fp
 800e632:	445b      	add	r3, fp
 800e634:	fa1f fb82 	uxth.w	fp, r2
 800e638:	f8de 2000 	ldr.w	r2, [lr]
 800e63c:	4581      	cmp	r9, r0
 800e63e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e642:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e646:	b29b      	uxth	r3, r3
 800e648:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e64c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e650:	f84e 3b04 	str.w	r3, [lr], #4
 800e654:	d2da      	bcs.n	800e60c <quorem+0x42>
 800e656:	f856 300c 	ldr.w	r3, [r6, ip]
 800e65a:	b933      	cbnz	r3, 800e66a <quorem+0xa0>
 800e65c:	9b01      	ldr	r3, [sp, #4]
 800e65e:	3b04      	subs	r3, #4
 800e660:	429e      	cmp	r6, r3
 800e662:	461a      	mov	r2, r3
 800e664:	d331      	bcc.n	800e6ca <quorem+0x100>
 800e666:	f8c8 4010 	str.w	r4, [r8, #16]
 800e66a:	4640      	mov	r0, r8
 800e66c:	f001 f834 	bl	800f6d8 <__mcmp>
 800e670:	2800      	cmp	r0, #0
 800e672:	db26      	blt.n	800e6c2 <quorem+0xf8>
 800e674:	4630      	mov	r0, r6
 800e676:	f04f 0c00 	mov.w	ip, #0
 800e67a:	3501      	adds	r5, #1
 800e67c:	f857 1b04 	ldr.w	r1, [r7], #4
 800e680:	f8d0 e000 	ldr.w	lr, [r0]
 800e684:	b28b      	uxth	r3, r1
 800e686:	ebac 0303 	sub.w	r3, ip, r3
 800e68a:	fa1f f28e 	uxth.w	r2, lr
 800e68e:	4413      	add	r3, r2
 800e690:	0c0a      	lsrs	r2, r1, #16
 800e692:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e696:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e6a0:	45b9      	cmp	r9, r7
 800e6a2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e6a6:	f840 3b04 	str.w	r3, [r0], #4
 800e6aa:	d2e7      	bcs.n	800e67c <quorem+0xb2>
 800e6ac:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e6b0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e6b4:	b92a      	cbnz	r2, 800e6c2 <quorem+0xf8>
 800e6b6:	3b04      	subs	r3, #4
 800e6b8:	429e      	cmp	r6, r3
 800e6ba:	461a      	mov	r2, r3
 800e6bc:	d30b      	bcc.n	800e6d6 <quorem+0x10c>
 800e6be:	f8c8 4010 	str.w	r4, [r8, #16]
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	b003      	add	sp, #12
 800e6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ca:	6812      	ldr	r2, [r2, #0]
 800e6cc:	3b04      	subs	r3, #4
 800e6ce:	2a00      	cmp	r2, #0
 800e6d0:	d1c9      	bne.n	800e666 <quorem+0x9c>
 800e6d2:	3c01      	subs	r4, #1
 800e6d4:	e7c4      	b.n	800e660 <quorem+0x96>
 800e6d6:	6812      	ldr	r2, [r2, #0]
 800e6d8:	3b04      	subs	r3, #4
 800e6da:	2a00      	cmp	r2, #0
 800e6dc:	d1ef      	bne.n	800e6be <quorem+0xf4>
 800e6de:	3c01      	subs	r4, #1
 800e6e0:	e7ea      	b.n	800e6b8 <quorem+0xee>
 800e6e2:	2000      	movs	r0, #0
 800e6e4:	e7ee      	b.n	800e6c4 <quorem+0xfa>
	...

0800e6e8 <_dtoa_r>:
 800e6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ec:	4616      	mov	r6, r2
 800e6ee:	461f      	mov	r7, r3
 800e6f0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e6f2:	b095      	sub	sp, #84	; 0x54
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800e6fa:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e6fe:	b93d      	cbnz	r5, 800e710 <_dtoa_r+0x28>
 800e700:	2010      	movs	r0, #16
 800e702:	f000 fdb3 	bl	800f26c <malloc>
 800e706:	6260      	str	r0, [r4, #36]	; 0x24
 800e708:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e70c:	6005      	str	r5, [r0, #0]
 800e70e:	60c5      	str	r5, [r0, #12]
 800e710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e712:	6819      	ldr	r1, [r3, #0]
 800e714:	b151      	cbz	r1, 800e72c <_dtoa_r+0x44>
 800e716:	685a      	ldr	r2, [r3, #4]
 800e718:	2301      	movs	r3, #1
 800e71a:	4093      	lsls	r3, r2
 800e71c:	604a      	str	r2, [r1, #4]
 800e71e:	608b      	str	r3, [r1, #8]
 800e720:	4620      	mov	r0, r4
 800e722:	f000 fdf8 	bl	800f316 <_Bfree>
 800e726:	2200      	movs	r2, #0
 800e728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e72a:	601a      	str	r2, [r3, #0]
 800e72c:	1e3b      	subs	r3, r7, #0
 800e72e:	bfaf      	iteee	ge
 800e730:	2300      	movge	r3, #0
 800e732:	2201      	movlt	r2, #1
 800e734:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e738:	9303      	strlt	r3, [sp, #12]
 800e73a:	bfac      	ite	ge
 800e73c:	f8c8 3000 	strge.w	r3, [r8]
 800e740:	f8c8 2000 	strlt.w	r2, [r8]
 800e744:	4bae      	ldr	r3, [pc, #696]	; (800ea00 <_dtoa_r+0x318>)
 800e746:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e74a:	ea33 0308 	bics.w	r3, r3, r8
 800e74e:	d11b      	bne.n	800e788 <_dtoa_r+0xa0>
 800e750:	f242 730f 	movw	r3, #9999	; 0x270f
 800e754:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	9b02      	ldr	r3, [sp, #8]
 800e75a:	b923      	cbnz	r3, 800e766 <_dtoa_r+0x7e>
 800e75c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e760:	2800      	cmp	r0, #0
 800e762:	f000 8545 	beq.w	800f1f0 <_dtoa_r+0xb08>
 800e766:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e768:	b953      	cbnz	r3, 800e780 <_dtoa_r+0x98>
 800e76a:	4ba6      	ldr	r3, [pc, #664]	; (800ea04 <_dtoa_r+0x31c>)
 800e76c:	e021      	b.n	800e7b2 <_dtoa_r+0xca>
 800e76e:	4ba6      	ldr	r3, [pc, #664]	; (800ea08 <_dtoa_r+0x320>)
 800e770:	9306      	str	r3, [sp, #24]
 800e772:	3308      	adds	r3, #8
 800e774:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e776:	6013      	str	r3, [r2, #0]
 800e778:	9806      	ldr	r0, [sp, #24]
 800e77a:	b015      	add	sp, #84	; 0x54
 800e77c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e780:	4ba0      	ldr	r3, [pc, #640]	; (800ea04 <_dtoa_r+0x31c>)
 800e782:	9306      	str	r3, [sp, #24]
 800e784:	3303      	adds	r3, #3
 800e786:	e7f5      	b.n	800e774 <_dtoa_r+0x8c>
 800e788:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e78c:	2200      	movs	r2, #0
 800e78e:	2300      	movs	r3, #0
 800e790:	4630      	mov	r0, r6
 800e792:	4639      	mov	r1, r7
 800e794:	f7f2 f944 	bl	8000a20 <__aeabi_dcmpeq>
 800e798:	4682      	mov	sl, r0
 800e79a:	b160      	cbz	r0, 800e7b6 <_dtoa_r+0xce>
 800e79c:	2301      	movs	r3, #1
 800e79e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e7a0:	6013      	str	r3, [r2, #0]
 800e7a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	f000 8520 	beq.w	800f1ea <_dtoa_r+0xb02>
 800e7aa:	4b98      	ldr	r3, [pc, #608]	; (800ea0c <_dtoa_r+0x324>)
 800e7ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	3b01      	subs	r3, #1
 800e7b2:	9306      	str	r3, [sp, #24]
 800e7b4:	e7e0      	b.n	800e778 <_dtoa_r+0x90>
 800e7b6:	ab12      	add	r3, sp, #72	; 0x48
 800e7b8:	9301      	str	r3, [sp, #4]
 800e7ba:	ab13      	add	r3, sp, #76	; 0x4c
 800e7bc:	9300      	str	r3, [sp, #0]
 800e7be:	4632      	mov	r2, r6
 800e7c0:	463b      	mov	r3, r7
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	f001 f800 	bl	800f7c8 <__d2b>
 800e7c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e7cc:	4683      	mov	fp, r0
 800e7ce:	2d00      	cmp	r5, #0
 800e7d0:	d07d      	beq.n	800e8ce <_dtoa_r+0x1e6>
 800e7d2:	46b0      	mov	r8, r6
 800e7d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e7d8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 800e7dc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 800e7e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e7e4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	4b89      	ldr	r3, [pc, #548]	; (800ea10 <_dtoa_r+0x328>)
 800e7ec:	4640      	mov	r0, r8
 800e7ee:	4649      	mov	r1, r9
 800e7f0:	f7f1 fcf6 	bl	80001e0 <__aeabi_dsub>
 800e7f4:	a37c      	add	r3, pc, #496	; (adr r3, 800e9e8 <_dtoa_r+0x300>)
 800e7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fa:	f7f1 fea9 	bl	8000550 <__aeabi_dmul>
 800e7fe:	a37c      	add	r3, pc, #496	; (adr r3, 800e9f0 <_dtoa_r+0x308>)
 800e800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e804:	f7f1 fcee 	bl	80001e4 <__adddf3>
 800e808:	4606      	mov	r6, r0
 800e80a:	4628      	mov	r0, r5
 800e80c:	460f      	mov	r7, r1
 800e80e:	f7f1 fe35 	bl	800047c <__aeabi_i2d>
 800e812:	a379      	add	r3, pc, #484	; (adr r3, 800e9f8 <_dtoa_r+0x310>)
 800e814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e818:	f7f1 fe9a 	bl	8000550 <__aeabi_dmul>
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	4630      	mov	r0, r6
 800e822:	4639      	mov	r1, r7
 800e824:	f7f1 fcde 	bl	80001e4 <__adddf3>
 800e828:	4606      	mov	r6, r0
 800e82a:	460f      	mov	r7, r1
 800e82c:	f7f2 f940 	bl	8000ab0 <__aeabi_d2iz>
 800e830:	2200      	movs	r2, #0
 800e832:	4682      	mov	sl, r0
 800e834:	2300      	movs	r3, #0
 800e836:	4630      	mov	r0, r6
 800e838:	4639      	mov	r1, r7
 800e83a:	f7f2 f8fb 	bl	8000a34 <__aeabi_dcmplt>
 800e83e:	b148      	cbz	r0, 800e854 <_dtoa_r+0x16c>
 800e840:	4650      	mov	r0, sl
 800e842:	f7f1 fe1b 	bl	800047c <__aeabi_i2d>
 800e846:	4632      	mov	r2, r6
 800e848:	463b      	mov	r3, r7
 800e84a:	f7f2 f8e9 	bl	8000a20 <__aeabi_dcmpeq>
 800e84e:	b908      	cbnz	r0, 800e854 <_dtoa_r+0x16c>
 800e850:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e854:	f1ba 0f16 	cmp.w	sl, #22
 800e858:	d85a      	bhi.n	800e910 <_dtoa_r+0x228>
 800e85a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e85e:	496d      	ldr	r1, [pc, #436]	; (800ea14 <_dtoa_r+0x32c>)
 800e860:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e864:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e868:	f7f2 f902 	bl	8000a70 <__aeabi_dcmpgt>
 800e86c:	2800      	cmp	r0, #0
 800e86e:	d051      	beq.n	800e914 <_dtoa_r+0x22c>
 800e870:	2300      	movs	r3, #0
 800e872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e876:	930d      	str	r3, [sp, #52]	; 0x34
 800e878:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e87a:	1b5d      	subs	r5, r3, r5
 800e87c:	1e6b      	subs	r3, r5, #1
 800e87e:	9307      	str	r3, [sp, #28]
 800e880:	bf43      	ittte	mi
 800e882:	2300      	movmi	r3, #0
 800e884:	f1c5 0901 	rsbmi	r9, r5, #1
 800e888:	9307      	strmi	r3, [sp, #28]
 800e88a:	f04f 0900 	movpl.w	r9, #0
 800e88e:	f1ba 0f00 	cmp.w	sl, #0
 800e892:	db41      	blt.n	800e918 <_dtoa_r+0x230>
 800e894:	9b07      	ldr	r3, [sp, #28]
 800e896:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800e89a:	4453      	add	r3, sl
 800e89c:	9307      	str	r3, [sp, #28]
 800e89e:	2300      	movs	r3, #0
 800e8a0:	9308      	str	r3, [sp, #32]
 800e8a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e8a4:	2b09      	cmp	r3, #9
 800e8a6:	f200 808f 	bhi.w	800e9c8 <_dtoa_r+0x2e0>
 800e8aa:	2b05      	cmp	r3, #5
 800e8ac:	bfc4      	itt	gt
 800e8ae:	3b04      	subgt	r3, #4
 800e8b0:	931e      	strgt	r3, [sp, #120]	; 0x78
 800e8b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e8b4:	bfc8      	it	gt
 800e8b6:	2500      	movgt	r5, #0
 800e8b8:	f1a3 0302 	sub.w	r3, r3, #2
 800e8bc:	bfd8      	it	le
 800e8be:	2501      	movle	r5, #1
 800e8c0:	2b03      	cmp	r3, #3
 800e8c2:	f200 808d 	bhi.w	800e9e0 <_dtoa_r+0x2f8>
 800e8c6:	e8df f003 	tbb	[pc, r3]
 800e8ca:	7d7b      	.short	0x7d7b
 800e8cc:	6f2f      	.short	0x6f2f
 800e8ce:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800e8d2:	441d      	add	r5, r3
 800e8d4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e8d8:	2820      	cmp	r0, #32
 800e8da:	dd13      	ble.n	800e904 <_dtoa_r+0x21c>
 800e8dc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e8e0:	9b02      	ldr	r3, [sp, #8]
 800e8e2:	fa08 f800 	lsl.w	r8, r8, r0
 800e8e6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e8ea:	fa23 f000 	lsr.w	r0, r3, r0
 800e8ee:	ea48 0000 	orr.w	r0, r8, r0
 800e8f2:	f7f1 fdb3 	bl	800045c <__aeabi_ui2d>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	4680      	mov	r8, r0
 800e8fa:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800e8fe:	3d01      	subs	r5, #1
 800e900:	9310      	str	r3, [sp, #64]	; 0x40
 800e902:	e771      	b.n	800e7e8 <_dtoa_r+0x100>
 800e904:	9b02      	ldr	r3, [sp, #8]
 800e906:	f1c0 0020 	rsb	r0, r0, #32
 800e90a:	fa03 f000 	lsl.w	r0, r3, r0
 800e90e:	e7f0      	b.n	800e8f2 <_dtoa_r+0x20a>
 800e910:	2301      	movs	r3, #1
 800e912:	e7b0      	b.n	800e876 <_dtoa_r+0x18e>
 800e914:	900d      	str	r0, [sp, #52]	; 0x34
 800e916:	e7af      	b.n	800e878 <_dtoa_r+0x190>
 800e918:	f1ca 0300 	rsb	r3, sl, #0
 800e91c:	9308      	str	r3, [sp, #32]
 800e91e:	2300      	movs	r3, #0
 800e920:	eba9 090a 	sub.w	r9, r9, sl
 800e924:	930c      	str	r3, [sp, #48]	; 0x30
 800e926:	e7bc      	b.n	800e8a2 <_dtoa_r+0x1ba>
 800e928:	2301      	movs	r3, #1
 800e92a:	9309      	str	r3, [sp, #36]	; 0x24
 800e92c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	dd74      	ble.n	800ea1c <_dtoa_r+0x334>
 800e932:	4698      	mov	r8, r3
 800e934:	9304      	str	r3, [sp, #16]
 800e936:	2200      	movs	r2, #0
 800e938:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e93a:	6072      	str	r2, [r6, #4]
 800e93c:	2204      	movs	r2, #4
 800e93e:	f102 0014 	add.w	r0, r2, #20
 800e942:	4298      	cmp	r0, r3
 800e944:	6871      	ldr	r1, [r6, #4]
 800e946:	d96e      	bls.n	800ea26 <_dtoa_r+0x33e>
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 fcb0 	bl	800f2ae <_Balloc>
 800e94e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e950:	6030      	str	r0, [r6, #0]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f1b8 0f0e 	cmp.w	r8, #14
 800e958:	9306      	str	r3, [sp, #24]
 800e95a:	f200 80ed 	bhi.w	800eb38 <_dtoa_r+0x450>
 800e95e:	2d00      	cmp	r5, #0
 800e960:	f000 80ea 	beq.w	800eb38 <_dtoa_r+0x450>
 800e964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e968:	f1ba 0f00 	cmp.w	sl, #0
 800e96c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800e970:	dd77      	ble.n	800ea62 <_dtoa_r+0x37a>
 800e972:	4a28      	ldr	r2, [pc, #160]	; (800ea14 <_dtoa_r+0x32c>)
 800e974:	f00a 030f 	and.w	r3, sl, #15
 800e978:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e97c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e980:	06f0      	lsls	r0, r6, #27
 800e982:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e986:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800e98a:	d568      	bpl.n	800ea5e <_dtoa_r+0x376>
 800e98c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e990:	4b21      	ldr	r3, [pc, #132]	; (800ea18 <_dtoa_r+0x330>)
 800e992:	2503      	movs	r5, #3
 800e994:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e998:	f7f1 ff04 	bl	80007a4 <__aeabi_ddiv>
 800e99c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e9a0:	f006 060f 	and.w	r6, r6, #15
 800e9a4:	4f1c      	ldr	r7, [pc, #112]	; (800ea18 <_dtoa_r+0x330>)
 800e9a6:	e04f      	b.n	800ea48 <_dtoa_r+0x360>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e9ac:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e9ae:	4453      	add	r3, sl
 800e9b0:	f103 0801 	add.w	r8, r3, #1
 800e9b4:	9304      	str	r3, [sp, #16]
 800e9b6:	4643      	mov	r3, r8
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	bfb8      	it	lt
 800e9bc:	2301      	movlt	r3, #1
 800e9be:	e7ba      	b.n	800e936 <_dtoa_r+0x24e>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e7b2      	b.n	800e92a <_dtoa_r+0x242>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	e7f0      	b.n	800e9aa <_dtoa_r+0x2c2>
 800e9c8:	2501      	movs	r5, #1
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	9509      	str	r5, [sp, #36]	; 0x24
 800e9ce:	931e      	str	r3, [sp, #120]	; 0x78
 800e9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	9304      	str	r3, [sp, #16]
 800e9d8:	4698      	mov	r8, r3
 800e9da:	2312      	movs	r3, #18
 800e9dc:	921f      	str	r2, [sp, #124]	; 0x7c
 800e9de:	e7aa      	b.n	800e936 <_dtoa_r+0x24e>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e9e4:	e7f4      	b.n	800e9d0 <_dtoa_r+0x2e8>
 800e9e6:	bf00      	nop
 800e9e8:	636f4361 	.word	0x636f4361
 800e9ec:	3fd287a7 	.word	0x3fd287a7
 800e9f0:	8b60c8b3 	.word	0x8b60c8b3
 800e9f4:	3fc68a28 	.word	0x3fc68a28
 800e9f8:	509f79fb 	.word	0x509f79fb
 800e9fc:	3fd34413 	.word	0x3fd34413
 800ea00:	7ff00000 	.word	0x7ff00000
 800ea04:	08010b99 	.word	0x08010b99
 800ea08:	08010b90 	.word	0x08010b90
 800ea0c:	08010a47 	.word	0x08010a47
 800ea10:	3ff80000 	.word	0x3ff80000
 800ea14:	08010bc8 	.word	0x08010bc8
 800ea18:	08010ba0 	.word	0x08010ba0
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	9304      	str	r3, [sp, #16]
 800ea20:	4698      	mov	r8, r3
 800ea22:	461a      	mov	r2, r3
 800ea24:	e7da      	b.n	800e9dc <_dtoa_r+0x2f4>
 800ea26:	3101      	adds	r1, #1
 800ea28:	6071      	str	r1, [r6, #4]
 800ea2a:	0052      	lsls	r2, r2, #1
 800ea2c:	e787      	b.n	800e93e <_dtoa_r+0x256>
 800ea2e:	07f1      	lsls	r1, r6, #31
 800ea30:	d508      	bpl.n	800ea44 <_dtoa_r+0x35c>
 800ea32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ea36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea3a:	f7f1 fd89 	bl	8000550 <__aeabi_dmul>
 800ea3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ea42:	3501      	adds	r5, #1
 800ea44:	1076      	asrs	r6, r6, #1
 800ea46:	3708      	adds	r7, #8
 800ea48:	2e00      	cmp	r6, #0
 800ea4a:	d1f0      	bne.n	800ea2e <_dtoa_r+0x346>
 800ea4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ea50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea54:	f7f1 fea6 	bl	80007a4 <__aeabi_ddiv>
 800ea58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea5c:	e01b      	b.n	800ea96 <_dtoa_r+0x3ae>
 800ea5e:	2502      	movs	r5, #2
 800ea60:	e7a0      	b.n	800e9a4 <_dtoa_r+0x2bc>
 800ea62:	f000 80a4 	beq.w	800ebae <_dtoa_r+0x4c6>
 800ea66:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ea6a:	f1ca 0600 	rsb	r6, sl, #0
 800ea6e:	4ba0      	ldr	r3, [pc, #640]	; (800ecf0 <_dtoa_r+0x608>)
 800ea70:	f006 020f 	and.w	r2, r6, #15
 800ea74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	f7f1 fd68 	bl	8000550 <__aeabi_dmul>
 800ea80:	2502      	movs	r5, #2
 800ea82:	2300      	movs	r3, #0
 800ea84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea88:	4f9a      	ldr	r7, [pc, #616]	; (800ecf4 <_dtoa_r+0x60c>)
 800ea8a:	1136      	asrs	r6, r6, #4
 800ea8c:	2e00      	cmp	r6, #0
 800ea8e:	f040 8083 	bne.w	800eb98 <_dtoa_r+0x4b0>
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d1e0      	bne.n	800ea58 <_dtoa_r+0x370>
 800ea96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 808a 	beq.w	800ebb2 <_dtoa_r+0x4ca>
 800ea9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eaa2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eaa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eaaa:	2200      	movs	r2, #0
 800eaac:	4b92      	ldr	r3, [pc, #584]	; (800ecf8 <_dtoa_r+0x610>)
 800eaae:	f7f1 ffc1 	bl	8000a34 <__aeabi_dcmplt>
 800eab2:	2800      	cmp	r0, #0
 800eab4:	d07d      	beq.n	800ebb2 <_dtoa_r+0x4ca>
 800eab6:	f1b8 0f00 	cmp.w	r8, #0
 800eaba:	d07a      	beq.n	800ebb2 <_dtoa_r+0x4ca>
 800eabc:	9b04      	ldr	r3, [sp, #16]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	dd36      	ble.n	800eb30 <_dtoa_r+0x448>
 800eac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eac6:	2200      	movs	r2, #0
 800eac8:	4b8c      	ldr	r3, [pc, #560]	; (800ecfc <_dtoa_r+0x614>)
 800eaca:	f7f1 fd41 	bl	8000550 <__aeabi_dmul>
 800eace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ead2:	9e04      	ldr	r6, [sp, #16]
 800ead4:	f10a 37ff 	add.w	r7, sl, #4294967295
 800ead8:	3501      	adds	r5, #1
 800eada:	4628      	mov	r0, r5
 800eadc:	f7f1 fcce 	bl	800047c <__aeabi_i2d>
 800eae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eae4:	f7f1 fd34 	bl	8000550 <__aeabi_dmul>
 800eae8:	2200      	movs	r2, #0
 800eaea:	4b85      	ldr	r3, [pc, #532]	; (800ed00 <_dtoa_r+0x618>)
 800eaec:	f7f1 fb7a 	bl	80001e4 <__adddf3>
 800eaf0:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 800eaf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800eaf8:	950b      	str	r5, [sp, #44]	; 0x2c
 800eafa:	2e00      	cmp	r6, #0
 800eafc:	d15c      	bne.n	800ebb8 <_dtoa_r+0x4d0>
 800eafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb02:	2200      	movs	r2, #0
 800eb04:	4b7f      	ldr	r3, [pc, #508]	; (800ed04 <_dtoa_r+0x61c>)
 800eb06:	f7f1 fb6b 	bl	80001e0 <__aeabi_dsub>
 800eb0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb0c:	462b      	mov	r3, r5
 800eb0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eb12:	f7f1 ffad 	bl	8000a70 <__aeabi_dcmpgt>
 800eb16:	2800      	cmp	r0, #0
 800eb18:	f040 8281 	bne.w	800f01e <_dtoa_r+0x936>
 800eb1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb22:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800eb26:	f7f1 ff85 	bl	8000a34 <__aeabi_dcmplt>
 800eb2a:	2800      	cmp	r0, #0
 800eb2c:	f040 8275 	bne.w	800f01a <_dtoa_r+0x932>
 800eb30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800eb34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800eb38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	f2c0 814b 	blt.w	800edd6 <_dtoa_r+0x6ee>
 800eb40:	f1ba 0f0e 	cmp.w	sl, #14
 800eb44:	f300 8147 	bgt.w	800edd6 <_dtoa_r+0x6ee>
 800eb48:	4b69      	ldr	r3, [pc, #420]	; (800ecf0 <_dtoa_r+0x608>)
 800eb4a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb56:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f280 80d7 	bge.w	800ed0c <_dtoa_r+0x624>
 800eb5e:	f1b8 0f00 	cmp.w	r8, #0
 800eb62:	f300 80d3 	bgt.w	800ed0c <_dtoa_r+0x624>
 800eb66:	f040 8257 	bne.w	800f018 <_dtoa_r+0x930>
 800eb6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	4b64      	ldr	r3, [pc, #400]	; (800ed04 <_dtoa_r+0x61c>)
 800eb72:	f7f1 fced 	bl	8000550 <__aeabi_dmul>
 800eb76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800eb7a:	f7f1 ff6f 	bl	8000a5c <__aeabi_dcmpge>
 800eb7e:	4646      	mov	r6, r8
 800eb80:	4647      	mov	r7, r8
 800eb82:	2800      	cmp	r0, #0
 800eb84:	f040 822d 	bne.w	800efe2 <_dtoa_r+0x8fa>
 800eb88:	9b06      	ldr	r3, [sp, #24]
 800eb8a:	9a06      	ldr	r2, [sp, #24]
 800eb8c:	1c5d      	adds	r5, r3, #1
 800eb8e:	2331      	movs	r3, #49	; 0x31
 800eb90:	f10a 0a01 	add.w	sl, sl, #1
 800eb94:	7013      	strb	r3, [r2, #0]
 800eb96:	e228      	b.n	800efea <_dtoa_r+0x902>
 800eb98:	07f2      	lsls	r2, r6, #31
 800eb9a:	d505      	bpl.n	800eba8 <_dtoa_r+0x4c0>
 800eb9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eba0:	f7f1 fcd6 	bl	8000550 <__aeabi_dmul>
 800eba4:	2301      	movs	r3, #1
 800eba6:	3501      	adds	r5, #1
 800eba8:	1076      	asrs	r6, r6, #1
 800ebaa:	3708      	adds	r7, #8
 800ebac:	e76e      	b.n	800ea8c <_dtoa_r+0x3a4>
 800ebae:	2502      	movs	r5, #2
 800ebb0:	e771      	b.n	800ea96 <_dtoa_r+0x3ae>
 800ebb2:	4657      	mov	r7, sl
 800ebb4:	4646      	mov	r6, r8
 800ebb6:	e790      	b.n	800eada <_dtoa_r+0x3f2>
 800ebb8:	4b4d      	ldr	r3, [pc, #308]	; (800ecf0 <_dtoa_r+0x608>)
 800ebba:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ebbe:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ebc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d048      	beq.n	800ec5a <_dtoa_r+0x572>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	460b      	mov	r3, r1
 800ebcc:	2000      	movs	r0, #0
 800ebce:	494e      	ldr	r1, [pc, #312]	; (800ed08 <_dtoa_r+0x620>)
 800ebd0:	f7f1 fde8 	bl	80007a4 <__aeabi_ddiv>
 800ebd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ebd8:	f7f1 fb02 	bl	80001e0 <__aeabi_dsub>
 800ebdc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ebe0:	9d06      	ldr	r5, [sp, #24]
 800ebe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebe6:	f7f1 ff63 	bl	8000ab0 <__aeabi_d2iz>
 800ebea:	9011      	str	r0, [sp, #68]	; 0x44
 800ebec:	f7f1 fc46 	bl	800047c <__aeabi_i2d>
 800ebf0:	4602      	mov	r2, r0
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebf8:	f7f1 faf2 	bl	80001e0 <__aeabi_dsub>
 800ebfc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ebfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec02:	3330      	adds	r3, #48	; 0x30
 800ec04:	f805 3b01 	strb.w	r3, [r5], #1
 800ec08:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec0c:	f7f1 ff12 	bl	8000a34 <__aeabi_dcmplt>
 800ec10:	2800      	cmp	r0, #0
 800ec12:	d163      	bne.n	800ecdc <_dtoa_r+0x5f4>
 800ec14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec18:	2000      	movs	r0, #0
 800ec1a:	4937      	ldr	r1, [pc, #220]	; (800ecf8 <_dtoa_r+0x610>)
 800ec1c:	f7f1 fae0 	bl	80001e0 <__aeabi_dsub>
 800ec20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec24:	f7f1 ff06 	bl	8000a34 <__aeabi_dcmplt>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	f040 80b5 	bne.w	800ed98 <_dtoa_r+0x6b0>
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	1aeb      	subs	r3, r5, r3
 800ec32:	429e      	cmp	r6, r3
 800ec34:	f77f af7c 	ble.w	800eb30 <_dtoa_r+0x448>
 800ec38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4b2f      	ldr	r3, [pc, #188]	; (800ecfc <_dtoa_r+0x614>)
 800ec40:	f7f1 fc86 	bl	8000550 <__aeabi_dmul>
 800ec44:	2200      	movs	r2, #0
 800ec46:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ec4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec4e:	4b2b      	ldr	r3, [pc, #172]	; (800ecfc <_dtoa_r+0x614>)
 800ec50:	f7f1 fc7e 	bl	8000550 <__aeabi_dmul>
 800ec54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec58:	e7c3      	b.n	800ebe2 <_dtoa_r+0x4fa>
 800ec5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ec5e:	f7f1 fc77 	bl	8000550 <__aeabi_dmul>
 800ec62:	9b06      	ldr	r3, [sp, #24]
 800ec64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ec68:	199d      	adds	r5, r3, r6
 800ec6a:	461e      	mov	r6, r3
 800ec6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec70:	f7f1 ff1e 	bl	8000ab0 <__aeabi_d2iz>
 800ec74:	9011      	str	r0, [sp, #68]	; 0x44
 800ec76:	f7f1 fc01 	bl	800047c <__aeabi_i2d>
 800ec7a:	4602      	mov	r2, r0
 800ec7c:	460b      	mov	r3, r1
 800ec7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec82:	f7f1 faad 	bl	80001e0 <__aeabi_dsub>
 800ec86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec8c:	3330      	adds	r3, #48	; 0x30
 800ec8e:	f806 3b01 	strb.w	r3, [r6], #1
 800ec92:	42ae      	cmp	r6, r5
 800ec94:	f04f 0200 	mov.w	r2, #0
 800ec98:	d124      	bne.n	800ece4 <_dtoa_r+0x5fc>
 800ec9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec9e:	4b1a      	ldr	r3, [pc, #104]	; (800ed08 <_dtoa_r+0x620>)
 800eca0:	f7f1 faa0 	bl	80001e4 <__adddf3>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecac:	f7f1 fee0 	bl	8000a70 <__aeabi_dcmpgt>
 800ecb0:	2800      	cmp	r0, #0
 800ecb2:	d171      	bne.n	800ed98 <_dtoa_r+0x6b0>
 800ecb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecb8:	2000      	movs	r0, #0
 800ecba:	4913      	ldr	r1, [pc, #76]	; (800ed08 <_dtoa_r+0x620>)
 800ecbc:	f7f1 fa90 	bl	80001e0 <__aeabi_dsub>
 800ecc0:	4602      	mov	r2, r0
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ecc8:	f7f1 feb4 	bl	8000a34 <__aeabi_dcmplt>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	f43f af2f 	beq.w	800eb30 <_dtoa_r+0x448>
 800ecd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ecd6:	1e6a      	subs	r2, r5, #1
 800ecd8:	2b30      	cmp	r3, #48	; 0x30
 800ecda:	d001      	beq.n	800ece0 <_dtoa_r+0x5f8>
 800ecdc:	46ba      	mov	sl, r7
 800ecde:	e04a      	b.n	800ed76 <_dtoa_r+0x68e>
 800ece0:	4615      	mov	r5, r2
 800ece2:	e7f6      	b.n	800ecd2 <_dtoa_r+0x5ea>
 800ece4:	4b05      	ldr	r3, [pc, #20]	; (800ecfc <_dtoa_r+0x614>)
 800ece6:	f7f1 fc33 	bl	8000550 <__aeabi_dmul>
 800ecea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ecee:	e7bd      	b.n	800ec6c <_dtoa_r+0x584>
 800ecf0:	08010bc8 	.word	0x08010bc8
 800ecf4:	08010ba0 	.word	0x08010ba0
 800ecf8:	3ff00000 	.word	0x3ff00000
 800ecfc:	40240000 	.word	0x40240000
 800ed00:	401c0000 	.word	0x401c0000
 800ed04:	40140000 	.word	0x40140000
 800ed08:	3fe00000 	.word	0x3fe00000
 800ed0c:	9d06      	ldr	r5, [sp, #24]
 800ed0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ed12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed16:	4630      	mov	r0, r6
 800ed18:	4639      	mov	r1, r7
 800ed1a:	f7f1 fd43 	bl	80007a4 <__aeabi_ddiv>
 800ed1e:	f7f1 fec7 	bl	8000ab0 <__aeabi_d2iz>
 800ed22:	4681      	mov	r9, r0
 800ed24:	f7f1 fbaa 	bl	800047c <__aeabi_i2d>
 800ed28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed2c:	f7f1 fc10 	bl	8000550 <__aeabi_dmul>
 800ed30:	4602      	mov	r2, r0
 800ed32:	460b      	mov	r3, r1
 800ed34:	4630      	mov	r0, r6
 800ed36:	4639      	mov	r1, r7
 800ed38:	f7f1 fa52 	bl	80001e0 <__aeabi_dsub>
 800ed3c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 800ed40:	f805 6b01 	strb.w	r6, [r5], #1
 800ed44:	9e06      	ldr	r6, [sp, #24]
 800ed46:	4602      	mov	r2, r0
 800ed48:	1bae      	subs	r6, r5, r6
 800ed4a:	45b0      	cmp	r8, r6
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	d135      	bne.n	800edbc <_dtoa_r+0x6d4>
 800ed50:	f7f1 fa48 	bl	80001e4 <__adddf3>
 800ed54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed58:	4606      	mov	r6, r0
 800ed5a:	460f      	mov	r7, r1
 800ed5c:	f7f1 fe88 	bl	8000a70 <__aeabi_dcmpgt>
 800ed60:	b9c8      	cbnz	r0, 800ed96 <_dtoa_r+0x6ae>
 800ed62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed66:	4630      	mov	r0, r6
 800ed68:	4639      	mov	r1, r7
 800ed6a:	f7f1 fe59 	bl	8000a20 <__aeabi_dcmpeq>
 800ed6e:	b110      	cbz	r0, 800ed76 <_dtoa_r+0x68e>
 800ed70:	f019 0f01 	tst.w	r9, #1
 800ed74:	d10f      	bne.n	800ed96 <_dtoa_r+0x6ae>
 800ed76:	4659      	mov	r1, fp
 800ed78:	4620      	mov	r0, r4
 800ed7a:	f000 facc 	bl	800f316 <_Bfree>
 800ed7e:	2300      	movs	r3, #0
 800ed80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ed82:	702b      	strb	r3, [r5, #0]
 800ed84:	f10a 0301 	add.w	r3, sl, #1
 800ed88:	6013      	str	r3, [r2, #0]
 800ed8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	f43f acf3 	beq.w	800e778 <_dtoa_r+0x90>
 800ed92:	601d      	str	r5, [r3, #0]
 800ed94:	e4f0      	b.n	800e778 <_dtoa_r+0x90>
 800ed96:	4657      	mov	r7, sl
 800ed98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed9c:	1e6b      	subs	r3, r5, #1
 800ed9e:	2a39      	cmp	r2, #57	; 0x39
 800eda0:	d106      	bne.n	800edb0 <_dtoa_r+0x6c8>
 800eda2:	9a06      	ldr	r2, [sp, #24]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d107      	bne.n	800edb8 <_dtoa_r+0x6d0>
 800eda8:	2330      	movs	r3, #48	; 0x30
 800edaa:	7013      	strb	r3, [r2, #0]
 800edac:	4613      	mov	r3, r2
 800edae:	3701      	adds	r7, #1
 800edb0:	781a      	ldrb	r2, [r3, #0]
 800edb2:	3201      	adds	r2, #1
 800edb4:	701a      	strb	r2, [r3, #0]
 800edb6:	e791      	b.n	800ecdc <_dtoa_r+0x5f4>
 800edb8:	461d      	mov	r5, r3
 800edba:	e7ed      	b.n	800ed98 <_dtoa_r+0x6b0>
 800edbc:	2200      	movs	r2, #0
 800edbe:	4b99      	ldr	r3, [pc, #612]	; (800f024 <_dtoa_r+0x93c>)
 800edc0:	f7f1 fbc6 	bl	8000550 <__aeabi_dmul>
 800edc4:	2200      	movs	r2, #0
 800edc6:	2300      	movs	r3, #0
 800edc8:	4606      	mov	r6, r0
 800edca:	460f      	mov	r7, r1
 800edcc:	f7f1 fe28 	bl	8000a20 <__aeabi_dcmpeq>
 800edd0:	2800      	cmp	r0, #0
 800edd2:	d09e      	beq.n	800ed12 <_dtoa_r+0x62a>
 800edd4:	e7cf      	b.n	800ed76 <_dtoa_r+0x68e>
 800edd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edd8:	2a00      	cmp	r2, #0
 800edda:	f000 8088 	beq.w	800eeee <_dtoa_r+0x806>
 800edde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ede0:	2a01      	cmp	r2, #1
 800ede2:	dc6d      	bgt.n	800eec0 <_dtoa_r+0x7d8>
 800ede4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ede6:	2a00      	cmp	r2, #0
 800ede8:	d066      	beq.n	800eeb8 <_dtoa_r+0x7d0>
 800edea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800edee:	464d      	mov	r5, r9
 800edf0:	9e08      	ldr	r6, [sp, #32]
 800edf2:	9a07      	ldr	r2, [sp, #28]
 800edf4:	2101      	movs	r1, #1
 800edf6:	441a      	add	r2, r3
 800edf8:	4620      	mov	r0, r4
 800edfa:	4499      	add	r9, r3
 800edfc:	9207      	str	r2, [sp, #28]
 800edfe:	f000 fb2a 	bl	800f456 <__i2b>
 800ee02:	4607      	mov	r7, r0
 800ee04:	2d00      	cmp	r5, #0
 800ee06:	dd0b      	ble.n	800ee20 <_dtoa_r+0x738>
 800ee08:	9b07      	ldr	r3, [sp, #28]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	dd08      	ble.n	800ee20 <_dtoa_r+0x738>
 800ee0e:	42ab      	cmp	r3, r5
 800ee10:	bfa8      	it	ge
 800ee12:	462b      	movge	r3, r5
 800ee14:	9a07      	ldr	r2, [sp, #28]
 800ee16:	eba9 0903 	sub.w	r9, r9, r3
 800ee1a:	1aed      	subs	r5, r5, r3
 800ee1c:	1ad3      	subs	r3, r2, r3
 800ee1e:	9307      	str	r3, [sp, #28]
 800ee20:	9b08      	ldr	r3, [sp, #32]
 800ee22:	b1eb      	cbz	r3, 800ee60 <_dtoa_r+0x778>
 800ee24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d065      	beq.n	800eef6 <_dtoa_r+0x80e>
 800ee2a:	b18e      	cbz	r6, 800ee50 <_dtoa_r+0x768>
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	4632      	mov	r2, r6
 800ee30:	4620      	mov	r0, r4
 800ee32:	f000 fbaf 	bl	800f594 <__pow5mult>
 800ee36:	465a      	mov	r2, fp
 800ee38:	4601      	mov	r1, r0
 800ee3a:	4607      	mov	r7, r0
 800ee3c:	4620      	mov	r0, r4
 800ee3e:	f000 fb13 	bl	800f468 <__multiply>
 800ee42:	4659      	mov	r1, fp
 800ee44:	900a      	str	r0, [sp, #40]	; 0x28
 800ee46:	4620      	mov	r0, r4
 800ee48:	f000 fa65 	bl	800f316 <_Bfree>
 800ee4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ee4e:	469b      	mov	fp, r3
 800ee50:	9b08      	ldr	r3, [sp, #32]
 800ee52:	1b9a      	subs	r2, r3, r6
 800ee54:	d004      	beq.n	800ee60 <_dtoa_r+0x778>
 800ee56:	4659      	mov	r1, fp
 800ee58:	4620      	mov	r0, r4
 800ee5a:	f000 fb9b 	bl	800f594 <__pow5mult>
 800ee5e:	4683      	mov	fp, r0
 800ee60:	2101      	movs	r1, #1
 800ee62:	4620      	mov	r0, r4
 800ee64:	f000 faf7 	bl	800f456 <__i2b>
 800ee68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee6a:	4606      	mov	r6, r0
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	f000 81c6 	beq.w	800f1fe <_dtoa_r+0xb16>
 800ee72:	461a      	mov	r2, r3
 800ee74:	4601      	mov	r1, r0
 800ee76:	4620      	mov	r0, r4
 800ee78:	f000 fb8c 	bl	800f594 <__pow5mult>
 800ee7c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ee7e:	4606      	mov	r6, r0
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	dc3e      	bgt.n	800ef02 <_dtoa_r+0x81a>
 800ee84:	9b02      	ldr	r3, [sp, #8]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d137      	bne.n	800eefa <_dtoa_r+0x812>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d134      	bne.n	800eefe <_dtoa_r+0x816>
 800ee94:	9b03      	ldr	r3, [sp, #12]
 800ee96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ee9a:	0d1b      	lsrs	r3, r3, #20
 800ee9c:	051b      	lsls	r3, r3, #20
 800ee9e:	b12b      	cbz	r3, 800eeac <_dtoa_r+0x7c4>
 800eea0:	9b07      	ldr	r3, [sp, #28]
 800eea2:	f109 0901 	add.w	r9, r9, #1
 800eea6:	3301      	adds	r3, #1
 800eea8:	9307      	str	r3, [sp, #28]
 800eeaa:	2301      	movs	r3, #1
 800eeac:	9308      	str	r3, [sp, #32]
 800eeae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d128      	bne.n	800ef06 <_dtoa_r+0x81e>
 800eeb4:	2001      	movs	r0, #1
 800eeb6:	e02e      	b.n	800ef16 <_dtoa_r+0x82e>
 800eeb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800eeba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eebe:	e796      	b.n	800edee <_dtoa_r+0x706>
 800eec0:	9b08      	ldr	r3, [sp, #32]
 800eec2:	f108 36ff 	add.w	r6, r8, #4294967295
 800eec6:	42b3      	cmp	r3, r6
 800eec8:	bfb7      	itett	lt
 800eeca:	9b08      	ldrlt	r3, [sp, #32]
 800eecc:	1b9e      	subge	r6, r3, r6
 800eece:	1af2      	sublt	r2, r6, r3
 800eed0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800eed2:	bfbf      	itttt	lt
 800eed4:	9608      	strlt	r6, [sp, #32]
 800eed6:	189b      	addlt	r3, r3, r2
 800eed8:	930c      	strlt	r3, [sp, #48]	; 0x30
 800eeda:	2600      	movlt	r6, #0
 800eedc:	f1b8 0f00 	cmp.w	r8, #0
 800eee0:	bfb9      	ittee	lt
 800eee2:	eba9 0508 	sublt.w	r5, r9, r8
 800eee6:	2300      	movlt	r3, #0
 800eee8:	464d      	movge	r5, r9
 800eeea:	4643      	movge	r3, r8
 800eeec:	e781      	b.n	800edf2 <_dtoa_r+0x70a>
 800eeee:	9e08      	ldr	r6, [sp, #32]
 800eef0:	464d      	mov	r5, r9
 800eef2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eef4:	e786      	b.n	800ee04 <_dtoa_r+0x71c>
 800eef6:	9a08      	ldr	r2, [sp, #32]
 800eef8:	e7ad      	b.n	800ee56 <_dtoa_r+0x76e>
 800eefa:	2300      	movs	r3, #0
 800eefc:	e7d6      	b.n	800eeac <_dtoa_r+0x7c4>
 800eefe:	9b02      	ldr	r3, [sp, #8]
 800ef00:	e7d4      	b.n	800eeac <_dtoa_r+0x7c4>
 800ef02:	2300      	movs	r3, #0
 800ef04:	9308      	str	r3, [sp, #32]
 800ef06:	6933      	ldr	r3, [r6, #16]
 800ef08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ef0c:	6918      	ldr	r0, [r3, #16]
 800ef0e:	f000 fa54 	bl	800f3ba <__hi0bits>
 800ef12:	f1c0 0020 	rsb	r0, r0, #32
 800ef16:	9b07      	ldr	r3, [sp, #28]
 800ef18:	4418      	add	r0, r3
 800ef1a:	f010 001f 	ands.w	r0, r0, #31
 800ef1e:	d047      	beq.n	800efb0 <_dtoa_r+0x8c8>
 800ef20:	f1c0 0320 	rsb	r3, r0, #32
 800ef24:	2b04      	cmp	r3, #4
 800ef26:	dd3b      	ble.n	800efa0 <_dtoa_r+0x8b8>
 800ef28:	9b07      	ldr	r3, [sp, #28]
 800ef2a:	f1c0 001c 	rsb	r0, r0, #28
 800ef2e:	4481      	add	r9, r0
 800ef30:	4405      	add	r5, r0
 800ef32:	4403      	add	r3, r0
 800ef34:	9307      	str	r3, [sp, #28]
 800ef36:	f1b9 0f00 	cmp.w	r9, #0
 800ef3a:	dd05      	ble.n	800ef48 <_dtoa_r+0x860>
 800ef3c:	4659      	mov	r1, fp
 800ef3e:	464a      	mov	r2, r9
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fb75 	bl	800f630 <__lshift>
 800ef46:	4683      	mov	fp, r0
 800ef48:	9b07      	ldr	r3, [sp, #28]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	dd05      	ble.n	800ef5a <_dtoa_r+0x872>
 800ef4e:	4631      	mov	r1, r6
 800ef50:	461a      	mov	r2, r3
 800ef52:	4620      	mov	r0, r4
 800ef54:	f000 fb6c 	bl	800f630 <__lshift>
 800ef58:	4606      	mov	r6, r0
 800ef5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ef5c:	b353      	cbz	r3, 800efb4 <_dtoa_r+0x8cc>
 800ef5e:	4631      	mov	r1, r6
 800ef60:	4658      	mov	r0, fp
 800ef62:	f000 fbb9 	bl	800f6d8 <__mcmp>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	da24      	bge.n	800efb4 <_dtoa_r+0x8cc>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	4659      	mov	r1, fp
 800ef6e:	220a      	movs	r2, #10
 800ef70:	4620      	mov	r0, r4
 800ef72:	f000 f9e7 	bl	800f344 <__multadd>
 800ef76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef78:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef7c:	4683      	mov	fp, r0
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	f000 8144 	beq.w	800f20c <_dtoa_r+0xb24>
 800ef84:	2300      	movs	r3, #0
 800ef86:	4639      	mov	r1, r7
 800ef88:	220a      	movs	r2, #10
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 f9da 	bl	800f344 <__multadd>
 800ef90:	9b04      	ldr	r3, [sp, #16]
 800ef92:	4607      	mov	r7, r0
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	dc4d      	bgt.n	800f034 <_dtoa_r+0x94c>
 800ef98:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	dd4a      	ble.n	800f034 <_dtoa_r+0x94c>
 800ef9e:	e011      	b.n	800efc4 <_dtoa_r+0x8dc>
 800efa0:	d0c9      	beq.n	800ef36 <_dtoa_r+0x84e>
 800efa2:	9a07      	ldr	r2, [sp, #28]
 800efa4:	331c      	adds	r3, #28
 800efa6:	441a      	add	r2, r3
 800efa8:	4499      	add	r9, r3
 800efaa:	441d      	add	r5, r3
 800efac:	4613      	mov	r3, r2
 800efae:	e7c1      	b.n	800ef34 <_dtoa_r+0x84c>
 800efb0:	4603      	mov	r3, r0
 800efb2:	e7f6      	b.n	800efa2 <_dtoa_r+0x8ba>
 800efb4:	f1b8 0f00 	cmp.w	r8, #0
 800efb8:	dc36      	bgt.n	800f028 <_dtoa_r+0x940>
 800efba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	dd33      	ble.n	800f028 <_dtoa_r+0x940>
 800efc0:	f8cd 8010 	str.w	r8, [sp, #16]
 800efc4:	9b04      	ldr	r3, [sp, #16]
 800efc6:	b963      	cbnz	r3, 800efe2 <_dtoa_r+0x8fa>
 800efc8:	4631      	mov	r1, r6
 800efca:	2205      	movs	r2, #5
 800efcc:	4620      	mov	r0, r4
 800efce:	f000 f9b9 	bl	800f344 <__multadd>
 800efd2:	4601      	mov	r1, r0
 800efd4:	4606      	mov	r6, r0
 800efd6:	4658      	mov	r0, fp
 800efd8:	f000 fb7e 	bl	800f6d8 <__mcmp>
 800efdc:	2800      	cmp	r0, #0
 800efde:	f73f add3 	bgt.w	800eb88 <_dtoa_r+0x4a0>
 800efe2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efe4:	9d06      	ldr	r5, [sp, #24]
 800efe6:	ea6f 0a03 	mvn.w	sl, r3
 800efea:	f04f 0900 	mov.w	r9, #0
 800efee:	4631      	mov	r1, r6
 800eff0:	4620      	mov	r0, r4
 800eff2:	f000 f990 	bl	800f316 <_Bfree>
 800eff6:	2f00      	cmp	r7, #0
 800eff8:	f43f aebd 	beq.w	800ed76 <_dtoa_r+0x68e>
 800effc:	f1b9 0f00 	cmp.w	r9, #0
 800f000:	d005      	beq.n	800f00e <_dtoa_r+0x926>
 800f002:	45b9      	cmp	r9, r7
 800f004:	d003      	beq.n	800f00e <_dtoa_r+0x926>
 800f006:	4649      	mov	r1, r9
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f984 	bl	800f316 <_Bfree>
 800f00e:	4639      	mov	r1, r7
 800f010:	4620      	mov	r0, r4
 800f012:	f000 f980 	bl	800f316 <_Bfree>
 800f016:	e6ae      	b.n	800ed76 <_dtoa_r+0x68e>
 800f018:	2600      	movs	r6, #0
 800f01a:	4637      	mov	r7, r6
 800f01c:	e7e1      	b.n	800efe2 <_dtoa_r+0x8fa>
 800f01e:	46ba      	mov	sl, r7
 800f020:	4637      	mov	r7, r6
 800f022:	e5b1      	b.n	800eb88 <_dtoa_r+0x4a0>
 800f024:	40240000 	.word	0x40240000
 800f028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f02a:	f8cd 8010 	str.w	r8, [sp, #16]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	f000 80f3 	beq.w	800f21a <_dtoa_r+0xb32>
 800f034:	2d00      	cmp	r5, #0
 800f036:	dd05      	ble.n	800f044 <_dtoa_r+0x95c>
 800f038:	4639      	mov	r1, r7
 800f03a:	462a      	mov	r2, r5
 800f03c:	4620      	mov	r0, r4
 800f03e:	f000 faf7 	bl	800f630 <__lshift>
 800f042:	4607      	mov	r7, r0
 800f044:	9b08      	ldr	r3, [sp, #32]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d04c      	beq.n	800f0e4 <_dtoa_r+0x9fc>
 800f04a:	6879      	ldr	r1, [r7, #4]
 800f04c:	4620      	mov	r0, r4
 800f04e:	f000 f92e 	bl	800f2ae <_Balloc>
 800f052:	4605      	mov	r5, r0
 800f054:	693a      	ldr	r2, [r7, #16]
 800f056:	f107 010c 	add.w	r1, r7, #12
 800f05a:	3202      	adds	r2, #2
 800f05c:	0092      	lsls	r2, r2, #2
 800f05e:	300c      	adds	r0, #12
 800f060:	f000 f91a 	bl	800f298 <memcpy>
 800f064:	2201      	movs	r2, #1
 800f066:	4629      	mov	r1, r5
 800f068:	4620      	mov	r0, r4
 800f06a:	f000 fae1 	bl	800f630 <__lshift>
 800f06e:	46b9      	mov	r9, r7
 800f070:	4607      	mov	r7, r0
 800f072:	9b06      	ldr	r3, [sp, #24]
 800f074:	9307      	str	r3, [sp, #28]
 800f076:	9b02      	ldr	r3, [sp, #8]
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	9308      	str	r3, [sp, #32]
 800f07e:	4631      	mov	r1, r6
 800f080:	4658      	mov	r0, fp
 800f082:	f7ff faa2 	bl	800e5ca <quorem>
 800f086:	4649      	mov	r1, r9
 800f088:	4605      	mov	r5, r0
 800f08a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f08e:	4658      	mov	r0, fp
 800f090:	f000 fb22 	bl	800f6d8 <__mcmp>
 800f094:	463a      	mov	r2, r7
 800f096:	9002      	str	r0, [sp, #8]
 800f098:	4631      	mov	r1, r6
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 fb36 	bl	800f70c <__mdiff>
 800f0a0:	68c3      	ldr	r3, [r0, #12]
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	bb03      	cbnz	r3, 800f0e8 <_dtoa_r+0xa00>
 800f0a6:	4601      	mov	r1, r0
 800f0a8:	9009      	str	r0, [sp, #36]	; 0x24
 800f0aa:	4658      	mov	r0, fp
 800f0ac:	f000 fb14 	bl	800f6d8 <__mcmp>
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0b4:	4611      	mov	r1, r2
 800f0b6:	4620      	mov	r0, r4
 800f0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800f0ba:	f000 f92c 	bl	800f316 <_Bfree>
 800f0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c0:	b9a3      	cbnz	r3, 800f0ec <_dtoa_r+0xa04>
 800f0c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f0c4:	b992      	cbnz	r2, 800f0ec <_dtoa_r+0xa04>
 800f0c6:	9a08      	ldr	r2, [sp, #32]
 800f0c8:	b982      	cbnz	r2, 800f0ec <_dtoa_r+0xa04>
 800f0ca:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f0ce:	d029      	beq.n	800f124 <_dtoa_r+0xa3c>
 800f0d0:	9b02      	ldr	r3, [sp, #8]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	dd01      	ble.n	800f0da <_dtoa_r+0x9f2>
 800f0d6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f0da:	9b07      	ldr	r3, [sp, #28]
 800f0dc:	1c5d      	adds	r5, r3, #1
 800f0de:	f883 8000 	strb.w	r8, [r3]
 800f0e2:	e784      	b.n	800efee <_dtoa_r+0x906>
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	e7c2      	b.n	800f06e <_dtoa_r+0x986>
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	e7e3      	b.n	800f0b4 <_dtoa_r+0x9cc>
 800f0ec:	9a02      	ldr	r2, [sp, #8]
 800f0ee:	2a00      	cmp	r2, #0
 800f0f0:	db04      	blt.n	800f0fc <_dtoa_r+0xa14>
 800f0f2:	d123      	bne.n	800f13c <_dtoa_r+0xa54>
 800f0f4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f0f6:	bb0a      	cbnz	r2, 800f13c <_dtoa_r+0xa54>
 800f0f8:	9a08      	ldr	r2, [sp, #32]
 800f0fa:	b9fa      	cbnz	r2, 800f13c <_dtoa_r+0xa54>
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	ddec      	ble.n	800f0da <_dtoa_r+0x9f2>
 800f100:	4659      	mov	r1, fp
 800f102:	2201      	movs	r2, #1
 800f104:	4620      	mov	r0, r4
 800f106:	f000 fa93 	bl	800f630 <__lshift>
 800f10a:	4631      	mov	r1, r6
 800f10c:	4683      	mov	fp, r0
 800f10e:	f000 fae3 	bl	800f6d8 <__mcmp>
 800f112:	2800      	cmp	r0, #0
 800f114:	dc03      	bgt.n	800f11e <_dtoa_r+0xa36>
 800f116:	d1e0      	bne.n	800f0da <_dtoa_r+0x9f2>
 800f118:	f018 0f01 	tst.w	r8, #1
 800f11c:	d0dd      	beq.n	800f0da <_dtoa_r+0x9f2>
 800f11e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f122:	d1d8      	bne.n	800f0d6 <_dtoa_r+0x9ee>
 800f124:	9b07      	ldr	r3, [sp, #28]
 800f126:	9a07      	ldr	r2, [sp, #28]
 800f128:	1c5d      	adds	r5, r3, #1
 800f12a:	2339      	movs	r3, #57	; 0x39
 800f12c:	7013      	strb	r3, [r2, #0]
 800f12e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f132:	1e6a      	subs	r2, r5, #1
 800f134:	2b39      	cmp	r3, #57	; 0x39
 800f136:	d04d      	beq.n	800f1d4 <_dtoa_r+0xaec>
 800f138:	3301      	adds	r3, #1
 800f13a:	e052      	b.n	800f1e2 <_dtoa_r+0xafa>
 800f13c:	9a07      	ldr	r2, [sp, #28]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f102 0501 	add.w	r5, r2, #1
 800f144:	dd06      	ble.n	800f154 <_dtoa_r+0xa6c>
 800f146:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f14a:	d0eb      	beq.n	800f124 <_dtoa_r+0xa3c>
 800f14c:	f108 0801 	add.w	r8, r8, #1
 800f150:	9b07      	ldr	r3, [sp, #28]
 800f152:	e7c4      	b.n	800f0de <_dtoa_r+0x9f6>
 800f154:	9b06      	ldr	r3, [sp, #24]
 800f156:	9a04      	ldr	r2, [sp, #16]
 800f158:	1aeb      	subs	r3, r5, r3
 800f15a:	4293      	cmp	r3, r2
 800f15c:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f160:	d021      	beq.n	800f1a6 <_dtoa_r+0xabe>
 800f162:	4659      	mov	r1, fp
 800f164:	2300      	movs	r3, #0
 800f166:	220a      	movs	r2, #10
 800f168:	4620      	mov	r0, r4
 800f16a:	f000 f8eb 	bl	800f344 <__multadd>
 800f16e:	45b9      	cmp	r9, r7
 800f170:	4683      	mov	fp, r0
 800f172:	f04f 0300 	mov.w	r3, #0
 800f176:	f04f 020a 	mov.w	r2, #10
 800f17a:	4649      	mov	r1, r9
 800f17c:	4620      	mov	r0, r4
 800f17e:	d105      	bne.n	800f18c <_dtoa_r+0xaa4>
 800f180:	f000 f8e0 	bl	800f344 <__multadd>
 800f184:	4681      	mov	r9, r0
 800f186:	4607      	mov	r7, r0
 800f188:	9507      	str	r5, [sp, #28]
 800f18a:	e778      	b.n	800f07e <_dtoa_r+0x996>
 800f18c:	f000 f8da 	bl	800f344 <__multadd>
 800f190:	4639      	mov	r1, r7
 800f192:	4681      	mov	r9, r0
 800f194:	2300      	movs	r3, #0
 800f196:	220a      	movs	r2, #10
 800f198:	4620      	mov	r0, r4
 800f19a:	f000 f8d3 	bl	800f344 <__multadd>
 800f19e:	4607      	mov	r7, r0
 800f1a0:	e7f2      	b.n	800f188 <_dtoa_r+0xaa0>
 800f1a2:	f04f 0900 	mov.w	r9, #0
 800f1a6:	4659      	mov	r1, fp
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	4620      	mov	r0, r4
 800f1ac:	f000 fa40 	bl	800f630 <__lshift>
 800f1b0:	4631      	mov	r1, r6
 800f1b2:	4683      	mov	fp, r0
 800f1b4:	f000 fa90 	bl	800f6d8 <__mcmp>
 800f1b8:	2800      	cmp	r0, #0
 800f1ba:	dcb8      	bgt.n	800f12e <_dtoa_r+0xa46>
 800f1bc:	d102      	bne.n	800f1c4 <_dtoa_r+0xadc>
 800f1be:	f018 0f01 	tst.w	r8, #1
 800f1c2:	d1b4      	bne.n	800f12e <_dtoa_r+0xa46>
 800f1c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f1c8:	1e6a      	subs	r2, r5, #1
 800f1ca:	2b30      	cmp	r3, #48	; 0x30
 800f1cc:	f47f af0f 	bne.w	800efee <_dtoa_r+0x906>
 800f1d0:	4615      	mov	r5, r2
 800f1d2:	e7f7      	b.n	800f1c4 <_dtoa_r+0xadc>
 800f1d4:	9b06      	ldr	r3, [sp, #24]
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	d105      	bne.n	800f1e6 <_dtoa_r+0xafe>
 800f1da:	2331      	movs	r3, #49	; 0x31
 800f1dc:	9a06      	ldr	r2, [sp, #24]
 800f1de:	f10a 0a01 	add.w	sl, sl, #1
 800f1e2:	7013      	strb	r3, [r2, #0]
 800f1e4:	e703      	b.n	800efee <_dtoa_r+0x906>
 800f1e6:	4615      	mov	r5, r2
 800f1e8:	e7a1      	b.n	800f12e <_dtoa_r+0xa46>
 800f1ea:	4b17      	ldr	r3, [pc, #92]	; (800f248 <_dtoa_r+0xb60>)
 800f1ec:	f7ff bae1 	b.w	800e7b2 <_dtoa_r+0xca>
 800f1f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f47f aabb 	bne.w	800e76e <_dtoa_r+0x86>
 800f1f8:	4b14      	ldr	r3, [pc, #80]	; (800f24c <_dtoa_r+0xb64>)
 800f1fa:	f7ff bada 	b.w	800e7b2 <_dtoa_r+0xca>
 800f1fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f200:	2b01      	cmp	r3, #1
 800f202:	f77f ae3f 	ble.w	800ee84 <_dtoa_r+0x79c>
 800f206:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f208:	9308      	str	r3, [sp, #32]
 800f20a:	e653      	b.n	800eeb4 <_dtoa_r+0x7cc>
 800f20c:	9b04      	ldr	r3, [sp, #16]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	dc03      	bgt.n	800f21a <_dtoa_r+0xb32>
 800f212:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f214:	2b02      	cmp	r3, #2
 800f216:	f73f aed5 	bgt.w	800efc4 <_dtoa_r+0x8dc>
 800f21a:	9d06      	ldr	r5, [sp, #24]
 800f21c:	4631      	mov	r1, r6
 800f21e:	4658      	mov	r0, fp
 800f220:	f7ff f9d3 	bl	800e5ca <quorem>
 800f224:	9b06      	ldr	r3, [sp, #24]
 800f226:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f22a:	f805 8b01 	strb.w	r8, [r5], #1
 800f22e:	9a04      	ldr	r2, [sp, #16]
 800f230:	1aeb      	subs	r3, r5, r3
 800f232:	429a      	cmp	r2, r3
 800f234:	ddb5      	ble.n	800f1a2 <_dtoa_r+0xaba>
 800f236:	4659      	mov	r1, fp
 800f238:	2300      	movs	r3, #0
 800f23a:	220a      	movs	r2, #10
 800f23c:	4620      	mov	r0, r4
 800f23e:	f000 f881 	bl	800f344 <__multadd>
 800f242:	4683      	mov	fp, r0
 800f244:	e7ea      	b.n	800f21c <_dtoa_r+0xb34>
 800f246:	bf00      	nop
 800f248:	08010a46 	.word	0x08010a46
 800f24c:	08010b90 	.word	0x08010b90

0800f250 <_localeconv_r>:
 800f250:	4b04      	ldr	r3, [pc, #16]	; (800f264 <_localeconv_r+0x14>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	6a18      	ldr	r0, [r3, #32]
 800f256:	4b04      	ldr	r3, [pc, #16]	; (800f268 <_localeconv_r+0x18>)
 800f258:	2800      	cmp	r0, #0
 800f25a:	bf08      	it	eq
 800f25c:	4618      	moveq	r0, r3
 800f25e:	30f0      	adds	r0, #240	; 0xf0
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	20000060 	.word	0x20000060
 800f268:	200000c4 	.word	0x200000c4

0800f26c <malloc>:
 800f26c:	4b02      	ldr	r3, [pc, #8]	; (800f278 <malloc+0xc>)
 800f26e:	4601      	mov	r1, r0
 800f270:	6818      	ldr	r0, [r3, #0]
 800f272:	f000 bb53 	b.w	800f91c <_malloc_r>
 800f276:	bf00      	nop
 800f278:	20000060 	.word	0x20000060

0800f27c <memchr>:
 800f27c:	b510      	push	{r4, lr}
 800f27e:	b2c9      	uxtb	r1, r1
 800f280:	4402      	add	r2, r0
 800f282:	4290      	cmp	r0, r2
 800f284:	4603      	mov	r3, r0
 800f286:	d101      	bne.n	800f28c <memchr+0x10>
 800f288:	2300      	movs	r3, #0
 800f28a:	e003      	b.n	800f294 <memchr+0x18>
 800f28c:	781c      	ldrb	r4, [r3, #0]
 800f28e:	3001      	adds	r0, #1
 800f290:	428c      	cmp	r4, r1
 800f292:	d1f6      	bne.n	800f282 <memchr+0x6>
 800f294:	4618      	mov	r0, r3
 800f296:	bd10      	pop	{r4, pc}

0800f298 <memcpy>:
 800f298:	b510      	push	{r4, lr}
 800f29a:	1e43      	subs	r3, r0, #1
 800f29c:	440a      	add	r2, r1
 800f29e:	4291      	cmp	r1, r2
 800f2a0:	d100      	bne.n	800f2a4 <memcpy+0xc>
 800f2a2:	bd10      	pop	{r4, pc}
 800f2a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2ac:	e7f7      	b.n	800f29e <memcpy+0x6>

0800f2ae <_Balloc>:
 800f2ae:	b570      	push	{r4, r5, r6, lr}
 800f2b0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f2b2:	4604      	mov	r4, r0
 800f2b4:	460e      	mov	r6, r1
 800f2b6:	b93d      	cbnz	r5, 800f2c8 <_Balloc+0x1a>
 800f2b8:	2010      	movs	r0, #16
 800f2ba:	f7ff ffd7 	bl	800f26c <malloc>
 800f2be:	6260      	str	r0, [r4, #36]	; 0x24
 800f2c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2c4:	6005      	str	r5, [r0, #0]
 800f2c6:	60c5      	str	r5, [r0, #12]
 800f2c8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f2ca:	68eb      	ldr	r3, [r5, #12]
 800f2cc:	b183      	cbz	r3, 800f2f0 <_Balloc+0x42>
 800f2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d0:	68db      	ldr	r3, [r3, #12]
 800f2d2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f2d6:	b9b8      	cbnz	r0, 800f308 <_Balloc+0x5a>
 800f2d8:	2101      	movs	r1, #1
 800f2da:	fa01 f506 	lsl.w	r5, r1, r6
 800f2de:	1d6a      	adds	r2, r5, #5
 800f2e0:	0092      	lsls	r2, r2, #2
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	f000 fabf 	bl	800f866 <_calloc_r>
 800f2e8:	b160      	cbz	r0, 800f304 <_Balloc+0x56>
 800f2ea:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f2ee:	e00e      	b.n	800f30e <_Balloc+0x60>
 800f2f0:	2221      	movs	r2, #33	; 0x21
 800f2f2:	2104      	movs	r1, #4
 800f2f4:	4620      	mov	r0, r4
 800f2f6:	f000 fab6 	bl	800f866 <_calloc_r>
 800f2fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2fc:	60e8      	str	r0, [r5, #12]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d1e4      	bne.n	800f2ce <_Balloc+0x20>
 800f304:	2000      	movs	r0, #0
 800f306:	bd70      	pop	{r4, r5, r6, pc}
 800f308:	6802      	ldr	r2, [r0, #0]
 800f30a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f30e:	2300      	movs	r3, #0
 800f310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f314:	e7f7      	b.n	800f306 <_Balloc+0x58>

0800f316 <_Bfree>:
 800f316:	b570      	push	{r4, r5, r6, lr}
 800f318:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f31a:	4606      	mov	r6, r0
 800f31c:	460d      	mov	r5, r1
 800f31e:	b93c      	cbnz	r4, 800f330 <_Bfree+0x1a>
 800f320:	2010      	movs	r0, #16
 800f322:	f7ff ffa3 	bl	800f26c <malloc>
 800f326:	6270      	str	r0, [r6, #36]	; 0x24
 800f328:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f32c:	6004      	str	r4, [r0, #0]
 800f32e:	60c4      	str	r4, [r0, #12]
 800f330:	b13d      	cbz	r5, 800f342 <_Bfree+0x2c>
 800f332:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f334:	686a      	ldr	r2, [r5, #4]
 800f336:	68db      	ldr	r3, [r3, #12]
 800f338:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f33c:	6029      	str	r1, [r5, #0]
 800f33e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f342:	bd70      	pop	{r4, r5, r6, pc}

0800f344 <__multadd>:
 800f344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f348:	461f      	mov	r7, r3
 800f34a:	4606      	mov	r6, r0
 800f34c:	460c      	mov	r4, r1
 800f34e:	2300      	movs	r3, #0
 800f350:	690d      	ldr	r5, [r1, #16]
 800f352:	f101 0c14 	add.w	ip, r1, #20
 800f356:	f8dc 0000 	ldr.w	r0, [ip]
 800f35a:	3301      	adds	r3, #1
 800f35c:	b281      	uxth	r1, r0
 800f35e:	fb02 7101 	mla	r1, r2, r1, r7
 800f362:	0c00      	lsrs	r0, r0, #16
 800f364:	0c0f      	lsrs	r7, r1, #16
 800f366:	fb02 7000 	mla	r0, r2, r0, r7
 800f36a:	b289      	uxth	r1, r1
 800f36c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f370:	429d      	cmp	r5, r3
 800f372:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f376:	f84c 1b04 	str.w	r1, [ip], #4
 800f37a:	dcec      	bgt.n	800f356 <__multadd+0x12>
 800f37c:	b1d7      	cbz	r7, 800f3b4 <__multadd+0x70>
 800f37e:	68a3      	ldr	r3, [r4, #8]
 800f380:	42ab      	cmp	r3, r5
 800f382:	dc12      	bgt.n	800f3aa <__multadd+0x66>
 800f384:	6861      	ldr	r1, [r4, #4]
 800f386:	4630      	mov	r0, r6
 800f388:	3101      	adds	r1, #1
 800f38a:	f7ff ff90 	bl	800f2ae <_Balloc>
 800f38e:	4680      	mov	r8, r0
 800f390:	6922      	ldr	r2, [r4, #16]
 800f392:	f104 010c 	add.w	r1, r4, #12
 800f396:	3202      	adds	r2, #2
 800f398:	0092      	lsls	r2, r2, #2
 800f39a:	300c      	adds	r0, #12
 800f39c:	f7ff ff7c 	bl	800f298 <memcpy>
 800f3a0:	4621      	mov	r1, r4
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffb7 	bl	800f316 <_Bfree>
 800f3a8:	4644      	mov	r4, r8
 800f3aa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f3ae:	3501      	adds	r5, #1
 800f3b0:	615f      	str	r7, [r3, #20]
 800f3b2:	6125      	str	r5, [r4, #16]
 800f3b4:	4620      	mov	r0, r4
 800f3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f3ba <__hi0bits>:
 800f3ba:	0c02      	lsrs	r2, r0, #16
 800f3bc:	0412      	lsls	r2, r2, #16
 800f3be:	4603      	mov	r3, r0
 800f3c0:	b9b2      	cbnz	r2, 800f3f0 <__hi0bits+0x36>
 800f3c2:	0403      	lsls	r3, r0, #16
 800f3c4:	2010      	movs	r0, #16
 800f3c6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f3ca:	bf04      	itt	eq
 800f3cc:	021b      	lsleq	r3, r3, #8
 800f3ce:	3008      	addeq	r0, #8
 800f3d0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f3d4:	bf04      	itt	eq
 800f3d6:	011b      	lsleq	r3, r3, #4
 800f3d8:	3004      	addeq	r0, #4
 800f3da:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f3de:	bf04      	itt	eq
 800f3e0:	009b      	lsleq	r3, r3, #2
 800f3e2:	3002      	addeq	r0, #2
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	db06      	blt.n	800f3f6 <__hi0bits+0x3c>
 800f3e8:	005b      	lsls	r3, r3, #1
 800f3ea:	d503      	bpl.n	800f3f4 <__hi0bits+0x3a>
 800f3ec:	3001      	adds	r0, #1
 800f3ee:	4770      	bx	lr
 800f3f0:	2000      	movs	r0, #0
 800f3f2:	e7e8      	b.n	800f3c6 <__hi0bits+0xc>
 800f3f4:	2020      	movs	r0, #32
 800f3f6:	4770      	bx	lr

0800f3f8 <__lo0bits>:
 800f3f8:	6803      	ldr	r3, [r0, #0]
 800f3fa:	4601      	mov	r1, r0
 800f3fc:	f013 0207 	ands.w	r2, r3, #7
 800f400:	d00b      	beq.n	800f41a <__lo0bits+0x22>
 800f402:	07da      	lsls	r2, r3, #31
 800f404:	d423      	bmi.n	800f44e <__lo0bits+0x56>
 800f406:	0798      	lsls	r0, r3, #30
 800f408:	bf49      	itett	mi
 800f40a:	085b      	lsrmi	r3, r3, #1
 800f40c:	089b      	lsrpl	r3, r3, #2
 800f40e:	2001      	movmi	r0, #1
 800f410:	600b      	strmi	r3, [r1, #0]
 800f412:	bf5c      	itt	pl
 800f414:	600b      	strpl	r3, [r1, #0]
 800f416:	2002      	movpl	r0, #2
 800f418:	4770      	bx	lr
 800f41a:	b298      	uxth	r0, r3
 800f41c:	b9a8      	cbnz	r0, 800f44a <__lo0bits+0x52>
 800f41e:	2010      	movs	r0, #16
 800f420:	0c1b      	lsrs	r3, r3, #16
 800f422:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f426:	bf04      	itt	eq
 800f428:	0a1b      	lsreq	r3, r3, #8
 800f42a:	3008      	addeq	r0, #8
 800f42c:	071a      	lsls	r2, r3, #28
 800f42e:	bf04      	itt	eq
 800f430:	091b      	lsreq	r3, r3, #4
 800f432:	3004      	addeq	r0, #4
 800f434:	079a      	lsls	r2, r3, #30
 800f436:	bf04      	itt	eq
 800f438:	089b      	lsreq	r3, r3, #2
 800f43a:	3002      	addeq	r0, #2
 800f43c:	07da      	lsls	r2, r3, #31
 800f43e:	d402      	bmi.n	800f446 <__lo0bits+0x4e>
 800f440:	085b      	lsrs	r3, r3, #1
 800f442:	d006      	beq.n	800f452 <__lo0bits+0x5a>
 800f444:	3001      	adds	r0, #1
 800f446:	600b      	str	r3, [r1, #0]
 800f448:	4770      	bx	lr
 800f44a:	4610      	mov	r0, r2
 800f44c:	e7e9      	b.n	800f422 <__lo0bits+0x2a>
 800f44e:	2000      	movs	r0, #0
 800f450:	4770      	bx	lr
 800f452:	2020      	movs	r0, #32
 800f454:	4770      	bx	lr

0800f456 <__i2b>:
 800f456:	b510      	push	{r4, lr}
 800f458:	460c      	mov	r4, r1
 800f45a:	2101      	movs	r1, #1
 800f45c:	f7ff ff27 	bl	800f2ae <_Balloc>
 800f460:	2201      	movs	r2, #1
 800f462:	6144      	str	r4, [r0, #20]
 800f464:	6102      	str	r2, [r0, #16]
 800f466:	bd10      	pop	{r4, pc}

0800f468 <__multiply>:
 800f468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f46c:	4614      	mov	r4, r2
 800f46e:	690a      	ldr	r2, [r1, #16]
 800f470:	6923      	ldr	r3, [r4, #16]
 800f472:	4688      	mov	r8, r1
 800f474:	429a      	cmp	r2, r3
 800f476:	bfbe      	ittt	lt
 800f478:	460b      	movlt	r3, r1
 800f47a:	46a0      	movlt	r8, r4
 800f47c:	461c      	movlt	r4, r3
 800f47e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f482:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f486:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f48a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f48e:	eb07 0609 	add.w	r6, r7, r9
 800f492:	42b3      	cmp	r3, r6
 800f494:	bfb8      	it	lt
 800f496:	3101      	addlt	r1, #1
 800f498:	f7ff ff09 	bl	800f2ae <_Balloc>
 800f49c:	f100 0514 	add.w	r5, r0, #20
 800f4a0:	462b      	mov	r3, r5
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f4a8:	4573      	cmp	r3, lr
 800f4aa:	d316      	bcc.n	800f4da <__multiply+0x72>
 800f4ac:	f104 0214 	add.w	r2, r4, #20
 800f4b0:	f108 0114 	add.w	r1, r8, #20
 800f4b4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f4b8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f4bc:	9300      	str	r3, [sp, #0]
 800f4be:	9b00      	ldr	r3, [sp, #0]
 800f4c0:	9201      	str	r2, [sp, #4]
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d80c      	bhi.n	800f4e0 <__multiply+0x78>
 800f4c6:	2e00      	cmp	r6, #0
 800f4c8:	dd03      	ble.n	800f4d2 <__multiply+0x6a>
 800f4ca:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d05d      	beq.n	800f58e <__multiply+0x126>
 800f4d2:	6106      	str	r6, [r0, #16]
 800f4d4:	b003      	add	sp, #12
 800f4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4da:	f843 2b04 	str.w	r2, [r3], #4
 800f4de:	e7e3      	b.n	800f4a8 <__multiply+0x40>
 800f4e0:	f8b2 b000 	ldrh.w	fp, [r2]
 800f4e4:	f1bb 0f00 	cmp.w	fp, #0
 800f4e8:	d023      	beq.n	800f532 <__multiply+0xca>
 800f4ea:	4689      	mov	r9, r1
 800f4ec:	46ac      	mov	ip, r5
 800f4ee:	f04f 0800 	mov.w	r8, #0
 800f4f2:	f859 4b04 	ldr.w	r4, [r9], #4
 800f4f6:	f8dc a000 	ldr.w	sl, [ip]
 800f4fa:	b2a3      	uxth	r3, r4
 800f4fc:	fa1f fa8a 	uxth.w	sl, sl
 800f500:	fb0b a303 	mla	r3, fp, r3, sl
 800f504:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f508:	f8dc 4000 	ldr.w	r4, [ip]
 800f50c:	4443      	add	r3, r8
 800f50e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f512:	fb0b 840a 	mla	r4, fp, sl, r8
 800f516:	46e2      	mov	sl, ip
 800f518:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f522:	454f      	cmp	r7, r9
 800f524:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f528:	f84a 3b04 	str.w	r3, [sl], #4
 800f52c:	d82b      	bhi.n	800f586 <__multiply+0x11e>
 800f52e:	f8cc 8004 	str.w	r8, [ip, #4]
 800f532:	9b01      	ldr	r3, [sp, #4]
 800f534:	3204      	adds	r2, #4
 800f536:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f53a:	f1ba 0f00 	cmp.w	sl, #0
 800f53e:	d020      	beq.n	800f582 <__multiply+0x11a>
 800f540:	4689      	mov	r9, r1
 800f542:	46a8      	mov	r8, r5
 800f544:	f04f 0b00 	mov.w	fp, #0
 800f548:	682b      	ldr	r3, [r5, #0]
 800f54a:	f8b9 c000 	ldrh.w	ip, [r9]
 800f54e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f552:	b29b      	uxth	r3, r3
 800f554:	fb0a 440c 	mla	r4, sl, ip, r4
 800f558:	46c4      	mov	ip, r8
 800f55a:	445c      	add	r4, fp
 800f55c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f560:	f84c 3b04 	str.w	r3, [ip], #4
 800f564:	f859 3b04 	ldr.w	r3, [r9], #4
 800f568:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f56c:	0c1b      	lsrs	r3, r3, #16
 800f56e:	fb0a b303 	mla	r3, sl, r3, fp
 800f572:	454f      	cmp	r7, r9
 800f574:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f578:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f57c:	d805      	bhi.n	800f58a <__multiply+0x122>
 800f57e:	f8c8 3004 	str.w	r3, [r8, #4]
 800f582:	3504      	adds	r5, #4
 800f584:	e79b      	b.n	800f4be <__multiply+0x56>
 800f586:	46d4      	mov	ip, sl
 800f588:	e7b3      	b.n	800f4f2 <__multiply+0x8a>
 800f58a:	46e0      	mov	r8, ip
 800f58c:	e7dd      	b.n	800f54a <__multiply+0xe2>
 800f58e:	3e01      	subs	r6, #1
 800f590:	e799      	b.n	800f4c6 <__multiply+0x5e>
	...

0800f594 <__pow5mult>:
 800f594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f598:	4615      	mov	r5, r2
 800f59a:	f012 0203 	ands.w	r2, r2, #3
 800f59e:	4606      	mov	r6, r0
 800f5a0:	460f      	mov	r7, r1
 800f5a2:	d007      	beq.n	800f5b4 <__pow5mult+0x20>
 800f5a4:	4c21      	ldr	r4, [pc, #132]	; (800f62c <__pow5mult+0x98>)
 800f5a6:	3a01      	subs	r2, #1
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5ae:	f7ff fec9 	bl	800f344 <__multadd>
 800f5b2:	4607      	mov	r7, r0
 800f5b4:	10ad      	asrs	r5, r5, #2
 800f5b6:	d035      	beq.n	800f624 <__pow5mult+0x90>
 800f5b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f5ba:	b93c      	cbnz	r4, 800f5cc <__pow5mult+0x38>
 800f5bc:	2010      	movs	r0, #16
 800f5be:	f7ff fe55 	bl	800f26c <malloc>
 800f5c2:	6270      	str	r0, [r6, #36]	; 0x24
 800f5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f5c8:	6004      	str	r4, [r0, #0]
 800f5ca:	60c4      	str	r4, [r0, #12]
 800f5cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f5d4:	b94c      	cbnz	r4, 800f5ea <__pow5mult+0x56>
 800f5d6:	f240 2171 	movw	r1, #625	; 0x271
 800f5da:	4630      	mov	r0, r6
 800f5dc:	f7ff ff3b 	bl	800f456 <__i2b>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800f5e8:	6003      	str	r3, [r0, #0]
 800f5ea:	f04f 0800 	mov.w	r8, #0
 800f5ee:	07eb      	lsls	r3, r5, #31
 800f5f0:	d50a      	bpl.n	800f608 <__pow5mult+0x74>
 800f5f2:	4639      	mov	r1, r7
 800f5f4:	4622      	mov	r2, r4
 800f5f6:	4630      	mov	r0, r6
 800f5f8:	f7ff ff36 	bl	800f468 <__multiply>
 800f5fc:	4681      	mov	r9, r0
 800f5fe:	4639      	mov	r1, r7
 800f600:	4630      	mov	r0, r6
 800f602:	f7ff fe88 	bl	800f316 <_Bfree>
 800f606:	464f      	mov	r7, r9
 800f608:	106d      	asrs	r5, r5, #1
 800f60a:	d00b      	beq.n	800f624 <__pow5mult+0x90>
 800f60c:	6820      	ldr	r0, [r4, #0]
 800f60e:	b938      	cbnz	r0, 800f620 <__pow5mult+0x8c>
 800f610:	4622      	mov	r2, r4
 800f612:	4621      	mov	r1, r4
 800f614:	4630      	mov	r0, r6
 800f616:	f7ff ff27 	bl	800f468 <__multiply>
 800f61a:	6020      	str	r0, [r4, #0]
 800f61c:	f8c0 8000 	str.w	r8, [r0]
 800f620:	4604      	mov	r4, r0
 800f622:	e7e4      	b.n	800f5ee <__pow5mult+0x5a>
 800f624:	4638      	mov	r0, r7
 800f626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f62a:	bf00      	nop
 800f62c:	08010c90 	.word	0x08010c90

0800f630 <__lshift>:
 800f630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f634:	460c      	mov	r4, r1
 800f636:	4607      	mov	r7, r0
 800f638:	4616      	mov	r6, r2
 800f63a:	6923      	ldr	r3, [r4, #16]
 800f63c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f640:	eb0a 0903 	add.w	r9, sl, r3
 800f644:	6849      	ldr	r1, [r1, #4]
 800f646:	68a3      	ldr	r3, [r4, #8]
 800f648:	f109 0501 	add.w	r5, r9, #1
 800f64c:	42ab      	cmp	r3, r5
 800f64e:	db32      	blt.n	800f6b6 <__lshift+0x86>
 800f650:	4638      	mov	r0, r7
 800f652:	f7ff fe2c 	bl	800f2ae <_Balloc>
 800f656:	2300      	movs	r3, #0
 800f658:	4680      	mov	r8, r0
 800f65a:	461a      	mov	r2, r3
 800f65c:	f100 0114 	add.w	r1, r0, #20
 800f660:	4553      	cmp	r3, sl
 800f662:	db2b      	blt.n	800f6bc <__lshift+0x8c>
 800f664:	6920      	ldr	r0, [r4, #16]
 800f666:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f66a:	f104 0314 	add.w	r3, r4, #20
 800f66e:	f016 021f 	ands.w	r2, r6, #31
 800f672:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f676:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f67a:	d025      	beq.n	800f6c8 <__lshift+0x98>
 800f67c:	2000      	movs	r0, #0
 800f67e:	f1c2 0e20 	rsb	lr, r2, #32
 800f682:	468a      	mov	sl, r1
 800f684:	681e      	ldr	r6, [r3, #0]
 800f686:	4096      	lsls	r6, r2
 800f688:	4330      	orrs	r0, r6
 800f68a:	f84a 0b04 	str.w	r0, [sl], #4
 800f68e:	f853 0b04 	ldr.w	r0, [r3], #4
 800f692:	459c      	cmp	ip, r3
 800f694:	fa20 f00e 	lsr.w	r0, r0, lr
 800f698:	d814      	bhi.n	800f6c4 <__lshift+0x94>
 800f69a:	6048      	str	r0, [r1, #4]
 800f69c:	b108      	cbz	r0, 800f6a2 <__lshift+0x72>
 800f69e:	f109 0502 	add.w	r5, r9, #2
 800f6a2:	3d01      	subs	r5, #1
 800f6a4:	4638      	mov	r0, r7
 800f6a6:	f8c8 5010 	str.w	r5, [r8, #16]
 800f6aa:	4621      	mov	r1, r4
 800f6ac:	f7ff fe33 	bl	800f316 <_Bfree>
 800f6b0:	4640      	mov	r0, r8
 800f6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f6b6:	3101      	adds	r1, #1
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	e7c7      	b.n	800f64c <__lshift+0x1c>
 800f6bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	e7cd      	b.n	800f660 <__lshift+0x30>
 800f6c4:	4651      	mov	r1, sl
 800f6c6:	e7dc      	b.n	800f682 <__lshift+0x52>
 800f6c8:	3904      	subs	r1, #4
 800f6ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6ce:	459c      	cmp	ip, r3
 800f6d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f6d4:	d8f9      	bhi.n	800f6ca <__lshift+0x9a>
 800f6d6:	e7e4      	b.n	800f6a2 <__lshift+0x72>

0800f6d8 <__mcmp>:
 800f6d8:	6903      	ldr	r3, [r0, #16]
 800f6da:	690a      	ldr	r2, [r1, #16]
 800f6dc:	b530      	push	{r4, r5, lr}
 800f6de:	1a9b      	subs	r3, r3, r2
 800f6e0:	d10c      	bne.n	800f6fc <__mcmp+0x24>
 800f6e2:	0092      	lsls	r2, r2, #2
 800f6e4:	3014      	adds	r0, #20
 800f6e6:	3114      	adds	r1, #20
 800f6e8:	1884      	adds	r4, r0, r2
 800f6ea:	4411      	add	r1, r2
 800f6ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f6f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f6f4:	4295      	cmp	r5, r2
 800f6f6:	d003      	beq.n	800f700 <__mcmp+0x28>
 800f6f8:	d305      	bcc.n	800f706 <__mcmp+0x2e>
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	bd30      	pop	{r4, r5, pc}
 800f700:	42a0      	cmp	r0, r4
 800f702:	d3f3      	bcc.n	800f6ec <__mcmp+0x14>
 800f704:	e7fa      	b.n	800f6fc <__mcmp+0x24>
 800f706:	f04f 33ff 	mov.w	r3, #4294967295
 800f70a:	e7f7      	b.n	800f6fc <__mcmp+0x24>

0800f70c <__mdiff>:
 800f70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f710:	460d      	mov	r5, r1
 800f712:	4607      	mov	r7, r0
 800f714:	4611      	mov	r1, r2
 800f716:	4628      	mov	r0, r5
 800f718:	4614      	mov	r4, r2
 800f71a:	f7ff ffdd 	bl	800f6d8 <__mcmp>
 800f71e:	1e06      	subs	r6, r0, #0
 800f720:	d108      	bne.n	800f734 <__mdiff+0x28>
 800f722:	4631      	mov	r1, r6
 800f724:	4638      	mov	r0, r7
 800f726:	f7ff fdc2 	bl	800f2ae <_Balloc>
 800f72a:	2301      	movs	r3, #1
 800f72c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f734:	bfa4      	itt	ge
 800f736:	4623      	movge	r3, r4
 800f738:	462c      	movge	r4, r5
 800f73a:	4638      	mov	r0, r7
 800f73c:	6861      	ldr	r1, [r4, #4]
 800f73e:	bfa6      	itte	ge
 800f740:	461d      	movge	r5, r3
 800f742:	2600      	movge	r6, #0
 800f744:	2601      	movlt	r6, #1
 800f746:	f7ff fdb2 	bl	800f2ae <_Balloc>
 800f74a:	f04f 0e00 	mov.w	lr, #0
 800f74e:	60c6      	str	r6, [r0, #12]
 800f750:	692b      	ldr	r3, [r5, #16]
 800f752:	6926      	ldr	r6, [r4, #16]
 800f754:	f104 0214 	add.w	r2, r4, #20
 800f758:	f105 0914 	add.w	r9, r5, #20
 800f75c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f760:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f764:	f100 0114 	add.w	r1, r0, #20
 800f768:	f852 ab04 	ldr.w	sl, [r2], #4
 800f76c:	f859 5b04 	ldr.w	r5, [r9], #4
 800f770:	fa1f f38a 	uxth.w	r3, sl
 800f774:	4473      	add	r3, lr
 800f776:	b2ac      	uxth	r4, r5
 800f778:	1b1b      	subs	r3, r3, r4
 800f77a:	0c2c      	lsrs	r4, r5, #16
 800f77c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800f780:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800f784:	b29b      	uxth	r3, r3
 800f786:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800f78a:	45c8      	cmp	r8, r9
 800f78c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800f790:	4694      	mov	ip, r2
 800f792:	f841 4b04 	str.w	r4, [r1], #4
 800f796:	d8e7      	bhi.n	800f768 <__mdiff+0x5c>
 800f798:	45bc      	cmp	ip, r7
 800f79a:	d304      	bcc.n	800f7a6 <__mdiff+0x9a>
 800f79c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f7a0:	b183      	cbz	r3, 800f7c4 <__mdiff+0xb8>
 800f7a2:	6106      	str	r6, [r0, #16]
 800f7a4:	e7c4      	b.n	800f730 <__mdiff+0x24>
 800f7a6:	f85c 4b04 	ldr.w	r4, [ip], #4
 800f7aa:	b2a2      	uxth	r2, r4
 800f7ac:	4472      	add	r2, lr
 800f7ae:	1413      	asrs	r3, r2, #16
 800f7b0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f7b4:	b292      	uxth	r2, r2
 800f7b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f7ba:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f7be:	f841 2b04 	str.w	r2, [r1], #4
 800f7c2:	e7e9      	b.n	800f798 <__mdiff+0x8c>
 800f7c4:	3e01      	subs	r6, #1
 800f7c6:	e7e9      	b.n	800f79c <__mdiff+0x90>

0800f7c8 <__d2b>:
 800f7c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f7cc:	461c      	mov	r4, r3
 800f7ce:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800f7d2:	2101      	movs	r1, #1
 800f7d4:	4690      	mov	r8, r2
 800f7d6:	f7ff fd6a 	bl	800f2ae <_Balloc>
 800f7da:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800f7de:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800f7e2:	4607      	mov	r7, r0
 800f7e4:	bb34      	cbnz	r4, 800f834 <__d2b+0x6c>
 800f7e6:	9201      	str	r2, [sp, #4]
 800f7e8:	f1b8 0200 	subs.w	r2, r8, #0
 800f7ec:	d027      	beq.n	800f83e <__d2b+0x76>
 800f7ee:	a802      	add	r0, sp, #8
 800f7f0:	f840 2d08 	str.w	r2, [r0, #-8]!
 800f7f4:	f7ff fe00 	bl	800f3f8 <__lo0bits>
 800f7f8:	9900      	ldr	r1, [sp, #0]
 800f7fa:	b1f0      	cbz	r0, 800f83a <__d2b+0x72>
 800f7fc:	9a01      	ldr	r2, [sp, #4]
 800f7fe:	f1c0 0320 	rsb	r3, r0, #32
 800f802:	fa02 f303 	lsl.w	r3, r2, r3
 800f806:	430b      	orrs	r3, r1
 800f808:	40c2      	lsrs	r2, r0
 800f80a:	617b      	str	r3, [r7, #20]
 800f80c:	9201      	str	r2, [sp, #4]
 800f80e:	9b01      	ldr	r3, [sp, #4]
 800f810:	2b00      	cmp	r3, #0
 800f812:	bf14      	ite	ne
 800f814:	2102      	movne	r1, #2
 800f816:	2101      	moveq	r1, #1
 800f818:	61bb      	str	r3, [r7, #24]
 800f81a:	6139      	str	r1, [r7, #16]
 800f81c:	b1c4      	cbz	r4, 800f850 <__d2b+0x88>
 800f81e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f822:	4404      	add	r4, r0
 800f824:	6034      	str	r4, [r6, #0]
 800f826:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f82a:	6028      	str	r0, [r5, #0]
 800f82c:	4638      	mov	r0, r7
 800f82e:	b002      	add	sp, #8
 800f830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f834:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f838:	e7d5      	b.n	800f7e6 <__d2b+0x1e>
 800f83a:	6179      	str	r1, [r7, #20]
 800f83c:	e7e7      	b.n	800f80e <__d2b+0x46>
 800f83e:	a801      	add	r0, sp, #4
 800f840:	f7ff fdda 	bl	800f3f8 <__lo0bits>
 800f844:	2101      	movs	r1, #1
 800f846:	9b01      	ldr	r3, [sp, #4]
 800f848:	6139      	str	r1, [r7, #16]
 800f84a:	617b      	str	r3, [r7, #20]
 800f84c:	3020      	adds	r0, #32
 800f84e:	e7e5      	b.n	800f81c <__d2b+0x54>
 800f850:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f854:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f858:	6030      	str	r0, [r6, #0]
 800f85a:	6918      	ldr	r0, [r3, #16]
 800f85c:	f7ff fdad 	bl	800f3ba <__hi0bits>
 800f860:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f864:	e7e1      	b.n	800f82a <__d2b+0x62>

0800f866 <_calloc_r>:
 800f866:	b538      	push	{r3, r4, r5, lr}
 800f868:	fb02 f401 	mul.w	r4, r2, r1
 800f86c:	4621      	mov	r1, r4
 800f86e:	f000 f855 	bl	800f91c <_malloc_r>
 800f872:	4605      	mov	r5, r0
 800f874:	b118      	cbz	r0, 800f87e <_calloc_r+0x18>
 800f876:	4622      	mov	r2, r4
 800f878:	2100      	movs	r1, #0
 800f87a:	f7fe f9db 	bl	800dc34 <memset>
 800f87e:	4628      	mov	r0, r5
 800f880:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f884 <_free_r>:
 800f884:	b538      	push	{r3, r4, r5, lr}
 800f886:	4605      	mov	r5, r0
 800f888:	2900      	cmp	r1, #0
 800f88a:	d043      	beq.n	800f914 <_free_r+0x90>
 800f88c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f890:	1f0c      	subs	r4, r1, #4
 800f892:	2b00      	cmp	r3, #0
 800f894:	bfb8      	it	lt
 800f896:	18e4      	addlt	r4, r4, r3
 800f898:	f000 fa15 	bl	800fcc6 <__malloc_lock>
 800f89c:	4a1e      	ldr	r2, [pc, #120]	; (800f918 <_free_r+0x94>)
 800f89e:	6813      	ldr	r3, [r2, #0]
 800f8a0:	4610      	mov	r0, r2
 800f8a2:	b933      	cbnz	r3, 800f8b2 <_free_r+0x2e>
 800f8a4:	6063      	str	r3, [r4, #4]
 800f8a6:	6014      	str	r4, [r2, #0]
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f8ae:	f000 ba0b 	b.w	800fcc8 <__malloc_unlock>
 800f8b2:	42a3      	cmp	r3, r4
 800f8b4:	d90b      	bls.n	800f8ce <_free_r+0x4a>
 800f8b6:	6821      	ldr	r1, [r4, #0]
 800f8b8:	1862      	adds	r2, r4, r1
 800f8ba:	4293      	cmp	r3, r2
 800f8bc:	bf01      	itttt	eq
 800f8be:	681a      	ldreq	r2, [r3, #0]
 800f8c0:	685b      	ldreq	r3, [r3, #4]
 800f8c2:	1852      	addeq	r2, r2, r1
 800f8c4:	6022      	streq	r2, [r4, #0]
 800f8c6:	6063      	str	r3, [r4, #4]
 800f8c8:	6004      	str	r4, [r0, #0]
 800f8ca:	e7ed      	b.n	800f8a8 <_free_r+0x24>
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	685a      	ldr	r2, [r3, #4]
 800f8d0:	b10a      	cbz	r2, 800f8d6 <_free_r+0x52>
 800f8d2:	42a2      	cmp	r2, r4
 800f8d4:	d9fa      	bls.n	800f8cc <_free_r+0x48>
 800f8d6:	6819      	ldr	r1, [r3, #0]
 800f8d8:	1858      	adds	r0, r3, r1
 800f8da:	42a0      	cmp	r0, r4
 800f8dc:	d10b      	bne.n	800f8f6 <_free_r+0x72>
 800f8de:	6820      	ldr	r0, [r4, #0]
 800f8e0:	4401      	add	r1, r0
 800f8e2:	1858      	adds	r0, r3, r1
 800f8e4:	4282      	cmp	r2, r0
 800f8e6:	6019      	str	r1, [r3, #0]
 800f8e8:	d1de      	bne.n	800f8a8 <_free_r+0x24>
 800f8ea:	6810      	ldr	r0, [r2, #0]
 800f8ec:	6852      	ldr	r2, [r2, #4]
 800f8ee:	4401      	add	r1, r0
 800f8f0:	6019      	str	r1, [r3, #0]
 800f8f2:	605a      	str	r2, [r3, #4]
 800f8f4:	e7d8      	b.n	800f8a8 <_free_r+0x24>
 800f8f6:	d902      	bls.n	800f8fe <_free_r+0x7a>
 800f8f8:	230c      	movs	r3, #12
 800f8fa:	602b      	str	r3, [r5, #0]
 800f8fc:	e7d4      	b.n	800f8a8 <_free_r+0x24>
 800f8fe:	6820      	ldr	r0, [r4, #0]
 800f900:	1821      	adds	r1, r4, r0
 800f902:	428a      	cmp	r2, r1
 800f904:	bf01      	itttt	eq
 800f906:	6811      	ldreq	r1, [r2, #0]
 800f908:	6852      	ldreq	r2, [r2, #4]
 800f90a:	1809      	addeq	r1, r1, r0
 800f90c:	6021      	streq	r1, [r4, #0]
 800f90e:	6062      	str	r2, [r4, #4]
 800f910:	605c      	str	r4, [r3, #4]
 800f912:	e7c9      	b.n	800f8a8 <_free_r+0x24>
 800f914:	bd38      	pop	{r3, r4, r5, pc}
 800f916:	bf00      	nop
 800f918:	20000670 	.word	0x20000670

0800f91c <_malloc_r>:
 800f91c:	b570      	push	{r4, r5, r6, lr}
 800f91e:	1ccd      	adds	r5, r1, #3
 800f920:	f025 0503 	bic.w	r5, r5, #3
 800f924:	3508      	adds	r5, #8
 800f926:	2d0c      	cmp	r5, #12
 800f928:	bf38      	it	cc
 800f92a:	250c      	movcc	r5, #12
 800f92c:	2d00      	cmp	r5, #0
 800f92e:	4606      	mov	r6, r0
 800f930:	db01      	blt.n	800f936 <_malloc_r+0x1a>
 800f932:	42a9      	cmp	r1, r5
 800f934:	d903      	bls.n	800f93e <_malloc_r+0x22>
 800f936:	230c      	movs	r3, #12
 800f938:	6033      	str	r3, [r6, #0]
 800f93a:	2000      	movs	r0, #0
 800f93c:	bd70      	pop	{r4, r5, r6, pc}
 800f93e:	f000 f9c2 	bl	800fcc6 <__malloc_lock>
 800f942:	4a21      	ldr	r2, [pc, #132]	; (800f9c8 <_malloc_r+0xac>)
 800f944:	6814      	ldr	r4, [r2, #0]
 800f946:	4621      	mov	r1, r4
 800f948:	b991      	cbnz	r1, 800f970 <_malloc_r+0x54>
 800f94a:	4c20      	ldr	r4, [pc, #128]	; (800f9cc <_malloc_r+0xb0>)
 800f94c:	6823      	ldr	r3, [r4, #0]
 800f94e:	b91b      	cbnz	r3, 800f958 <_malloc_r+0x3c>
 800f950:	4630      	mov	r0, r6
 800f952:	f000 f98f 	bl	800fc74 <_sbrk_r>
 800f956:	6020      	str	r0, [r4, #0]
 800f958:	4629      	mov	r1, r5
 800f95a:	4630      	mov	r0, r6
 800f95c:	f000 f98a 	bl	800fc74 <_sbrk_r>
 800f960:	1c43      	adds	r3, r0, #1
 800f962:	d124      	bne.n	800f9ae <_malloc_r+0x92>
 800f964:	230c      	movs	r3, #12
 800f966:	4630      	mov	r0, r6
 800f968:	6033      	str	r3, [r6, #0]
 800f96a:	f000 f9ad 	bl	800fcc8 <__malloc_unlock>
 800f96e:	e7e4      	b.n	800f93a <_malloc_r+0x1e>
 800f970:	680b      	ldr	r3, [r1, #0]
 800f972:	1b5b      	subs	r3, r3, r5
 800f974:	d418      	bmi.n	800f9a8 <_malloc_r+0x8c>
 800f976:	2b0b      	cmp	r3, #11
 800f978:	d90f      	bls.n	800f99a <_malloc_r+0x7e>
 800f97a:	600b      	str	r3, [r1, #0]
 800f97c:	18cc      	adds	r4, r1, r3
 800f97e:	50cd      	str	r5, [r1, r3]
 800f980:	4630      	mov	r0, r6
 800f982:	f000 f9a1 	bl	800fcc8 <__malloc_unlock>
 800f986:	f104 000b 	add.w	r0, r4, #11
 800f98a:	1d23      	adds	r3, r4, #4
 800f98c:	f020 0007 	bic.w	r0, r0, #7
 800f990:	1ac3      	subs	r3, r0, r3
 800f992:	d0d3      	beq.n	800f93c <_malloc_r+0x20>
 800f994:	425a      	negs	r2, r3
 800f996:	50e2      	str	r2, [r4, r3]
 800f998:	e7d0      	b.n	800f93c <_malloc_r+0x20>
 800f99a:	684b      	ldr	r3, [r1, #4]
 800f99c:	428c      	cmp	r4, r1
 800f99e:	bf16      	itet	ne
 800f9a0:	6063      	strne	r3, [r4, #4]
 800f9a2:	6013      	streq	r3, [r2, #0]
 800f9a4:	460c      	movne	r4, r1
 800f9a6:	e7eb      	b.n	800f980 <_malloc_r+0x64>
 800f9a8:	460c      	mov	r4, r1
 800f9aa:	6849      	ldr	r1, [r1, #4]
 800f9ac:	e7cc      	b.n	800f948 <_malloc_r+0x2c>
 800f9ae:	1cc4      	adds	r4, r0, #3
 800f9b0:	f024 0403 	bic.w	r4, r4, #3
 800f9b4:	42a0      	cmp	r0, r4
 800f9b6:	d005      	beq.n	800f9c4 <_malloc_r+0xa8>
 800f9b8:	1a21      	subs	r1, r4, r0
 800f9ba:	4630      	mov	r0, r6
 800f9bc:	f000 f95a 	bl	800fc74 <_sbrk_r>
 800f9c0:	3001      	adds	r0, #1
 800f9c2:	d0cf      	beq.n	800f964 <_malloc_r+0x48>
 800f9c4:	6025      	str	r5, [r4, #0]
 800f9c6:	e7db      	b.n	800f980 <_malloc_r+0x64>
 800f9c8:	20000670 	.word	0x20000670
 800f9cc:	20000674 	.word	0x20000674

0800f9d0 <__ssputs_r>:
 800f9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d4:	688e      	ldr	r6, [r1, #8]
 800f9d6:	4682      	mov	sl, r0
 800f9d8:	429e      	cmp	r6, r3
 800f9da:	460c      	mov	r4, r1
 800f9dc:	4690      	mov	r8, r2
 800f9de:	4699      	mov	r9, r3
 800f9e0:	d837      	bhi.n	800fa52 <__ssputs_r+0x82>
 800f9e2:	898a      	ldrh	r2, [r1, #12]
 800f9e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9e8:	d031      	beq.n	800fa4e <__ssputs_r+0x7e>
 800f9ea:	2302      	movs	r3, #2
 800f9ec:	6825      	ldr	r5, [r4, #0]
 800f9ee:	6909      	ldr	r1, [r1, #16]
 800f9f0:	1a6f      	subs	r7, r5, r1
 800f9f2:	6965      	ldr	r5, [r4, #20]
 800f9f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9f8:	fb95 f5f3 	sdiv	r5, r5, r3
 800f9fc:	f109 0301 	add.w	r3, r9, #1
 800fa00:	443b      	add	r3, r7
 800fa02:	429d      	cmp	r5, r3
 800fa04:	bf38      	it	cc
 800fa06:	461d      	movcc	r5, r3
 800fa08:	0553      	lsls	r3, r2, #21
 800fa0a:	d530      	bpl.n	800fa6e <__ssputs_r+0x9e>
 800fa0c:	4629      	mov	r1, r5
 800fa0e:	f7ff ff85 	bl	800f91c <_malloc_r>
 800fa12:	4606      	mov	r6, r0
 800fa14:	b950      	cbnz	r0, 800fa2c <__ssputs_r+0x5c>
 800fa16:	230c      	movs	r3, #12
 800fa18:	f04f 30ff 	mov.w	r0, #4294967295
 800fa1c:	f8ca 3000 	str.w	r3, [sl]
 800fa20:	89a3      	ldrh	r3, [r4, #12]
 800fa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa26:	81a3      	strh	r3, [r4, #12]
 800fa28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa2c:	463a      	mov	r2, r7
 800fa2e:	6921      	ldr	r1, [r4, #16]
 800fa30:	f7ff fc32 	bl	800f298 <memcpy>
 800fa34:	89a3      	ldrh	r3, [r4, #12]
 800fa36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fa3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa3e:	81a3      	strh	r3, [r4, #12]
 800fa40:	6126      	str	r6, [r4, #16]
 800fa42:	443e      	add	r6, r7
 800fa44:	6026      	str	r6, [r4, #0]
 800fa46:	464e      	mov	r6, r9
 800fa48:	6165      	str	r5, [r4, #20]
 800fa4a:	1bed      	subs	r5, r5, r7
 800fa4c:	60a5      	str	r5, [r4, #8]
 800fa4e:	454e      	cmp	r6, r9
 800fa50:	d900      	bls.n	800fa54 <__ssputs_r+0x84>
 800fa52:	464e      	mov	r6, r9
 800fa54:	4632      	mov	r2, r6
 800fa56:	4641      	mov	r1, r8
 800fa58:	6820      	ldr	r0, [r4, #0]
 800fa5a:	f000 f91b 	bl	800fc94 <memmove>
 800fa5e:	68a3      	ldr	r3, [r4, #8]
 800fa60:	2000      	movs	r0, #0
 800fa62:	1b9b      	subs	r3, r3, r6
 800fa64:	60a3      	str	r3, [r4, #8]
 800fa66:	6823      	ldr	r3, [r4, #0]
 800fa68:	441e      	add	r6, r3
 800fa6a:	6026      	str	r6, [r4, #0]
 800fa6c:	e7dc      	b.n	800fa28 <__ssputs_r+0x58>
 800fa6e:	462a      	mov	r2, r5
 800fa70:	f000 f92b 	bl	800fcca <_realloc_r>
 800fa74:	4606      	mov	r6, r0
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d1e2      	bne.n	800fa40 <__ssputs_r+0x70>
 800fa7a:	6921      	ldr	r1, [r4, #16]
 800fa7c:	4650      	mov	r0, sl
 800fa7e:	f7ff ff01 	bl	800f884 <_free_r>
 800fa82:	e7c8      	b.n	800fa16 <__ssputs_r+0x46>

0800fa84 <_svfiprintf_r>:
 800fa84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa88:	461d      	mov	r5, r3
 800fa8a:	898b      	ldrh	r3, [r1, #12]
 800fa8c:	b09d      	sub	sp, #116	; 0x74
 800fa8e:	061f      	lsls	r7, r3, #24
 800fa90:	4680      	mov	r8, r0
 800fa92:	460c      	mov	r4, r1
 800fa94:	4616      	mov	r6, r2
 800fa96:	d50f      	bpl.n	800fab8 <_svfiprintf_r+0x34>
 800fa98:	690b      	ldr	r3, [r1, #16]
 800fa9a:	b96b      	cbnz	r3, 800fab8 <_svfiprintf_r+0x34>
 800fa9c:	2140      	movs	r1, #64	; 0x40
 800fa9e:	f7ff ff3d 	bl	800f91c <_malloc_r>
 800faa2:	6020      	str	r0, [r4, #0]
 800faa4:	6120      	str	r0, [r4, #16]
 800faa6:	b928      	cbnz	r0, 800fab4 <_svfiprintf_r+0x30>
 800faa8:	230c      	movs	r3, #12
 800faaa:	f8c8 3000 	str.w	r3, [r8]
 800faae:	f04f 30ff 	mov.w	r0, #4294967295
 800fab2:	e0c8      	b.n	800fc46 <_svfiprintf_r+0x1c2>
 800fab4:	2340      	movs	r3, #64	; 0x40
 800fab6:	6163      	str	r3, [r4, #20]
 800fab8:	2300      	movs	r3, #0
 800faba:	9309      	str	r3, [sp, #36]	; 0x24
 800fabc:	2320      	movs	r3, #32
 800fabe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fac2:	2330      	movs	r3, #48	; 0x30
 800fac4:	f04f 0b01 	mov.w	fp, #1
 800fac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800facc:	9503      	str	r5, [sp, #12]
 800face:	4637      	mov	r7, r6
 800fad0:	463d      	mov	r5, r7
 800fad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fad6:	b10b      	cbz	r3, 800fadc <_svfiprintf_r+0x58>
 800fad8:	2b25      	cmp	r3, #37	; 0x25
 800fada:	d13e      	bne.n	800fb5a <_svfiprintf_r+0xd6>
 800fadc:	ebb7 0a06 	subs.w	sl, r7, r6
 800fae0:	d00b      	beq.n	800fafa <_svfiprintf_r+0x76>
 800fae2:	4653      	mov	r3, sl
 800fae4:	4632      	mov	r2, r6
 800fae6:	4621      	mov	r1, r4
 800fae8:	4640      	mov	r0, r8
 800faea:	f7ff ff71 	bl	800f9d0 <__ssputs_r>
 800faee:	3001      	adds	r0, #1
 800faf0:	f000 80a4 	beq.w	800fc3c <_svfiprintf_r+0x1b8>
 800faf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faf6:	4453      	add	r3, sl
 800faf8:	9309      	str	r3, [sp, #36]	; 0x24
 800fafa:	783b      	ldrb	r3, [r7, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f000 809d 	beq.w	800fc3c <_svfiprintf_r+0x1b8>
 800fb02:	2300      	movs	r3, #0
 800fb04:	f04f 32ff 	mov.w	r2, #4294967295
 800fb08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fb0c:	9304      	str	r3, [sp, #16]
 800fb0e:	9307      	str	r3, [sp, #28]
 800fb10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fb14:	931a      	str	r3, [sp, #104]	; 0x68
 800fb16:	462f      	mov	r7, r5
 800fb18:	2205      	movs	r2, #5
 800fb1a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fb1e:	4850      	ldr	r0, [pc, #320]	; (800fc60 <_svfiprintf_r+0x1dc>)
 800fb20:	f7ff fbac 	bl	800f27c <memchr>
 800fb24:	9b04      	ldr	r3, [sp, #16]
 800fb26:	b9d0      	cbnz	r0, 800fb5e <_svfiprintf_r+0xda>
 800fb28:	06d9      	lsls	r1, r3, #27
 800fb2a:	bf44      	itt	mi
 800fb2c:	2220      	movmi	r2, #32
 800fb2e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fb32:	071a      	lsls	r2, r3, #28
 800fb34:	bf44      	itt	mi
 800fb36:	222b      	movmi	r2, #43	; 0x2b
 800fb38:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fb3c:	782a      	ldrb	r2, [r5, #0]
 800fb3e:	2a2a      	cmp	r2, #42	; 0x2a
 800fb40:	d015      	beq.n	800fb6e <_svfiprintf_r+0xea>
 800fb42:	462f      	mov	r7, r5
 800fb44:	2000      	movs	r0, #0
 800fb46:	250a      	movs	r5, #10
 800fb48:	9a07      	ldr	r2, [sp, #28]
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb50:	3b30      	subs	r3, #48	; 0x30
 800fb52:	2b09      	cmp	r3, #9
 800fb54:	d94d      	bls.n	800fbf2 <_svfiprintf_r+0x16e>
 800fb56:	b1b8      	cbz	r0, 800fb88 <_svfiprintf_r+0x104>
 800fb58:	e00f      	b.n	800fb7a <_svfiprintf_r+0xf6>
 800fb5a:	462f      	mov	r7, r5
 800fb5c:	e7b8      	b.n	800fad0 <_svfiprintf_r+0x4c>
 800fb5e:	4a40      	ldr	r2, [pc, #256]	; (800fc60 <_svfiprintf_r+0x1dc>)
 800fb60:	463d      	mov	r5, r7
 800fb62:	1a80      	subs	r0, r0, r2
 800fb64:	fa0b f000 	lsl.w	r0, fp, r0
 800fb68:	4318      	orrs	r0, r3
 800fb6a:	9004      	str	r0, [sp, #16]
 800fb6c:	e7d3      	b.n	800fb16 <_svfiprintf_r+0x92>
 800fb6e:	9a03      	ldr	r2, [sp, #12]
 800fb70:	1d11      	adds	r1, r2, #4
 800fb72:	6812      	ldr	r2, [r2, #0]
 800fb74:	9103      	str	r1, [sp, #12]
 800fb76:	2a00      	cmp	r2, #0
 800fb78:	db01      	blt.n	800fb7e <_svfiprintf_r+0xfa>
 800fb7a:	9207      	str	r2, [sp, #28]
 800fb7c:	e004      	b.n	800fb88 <_svfiprintf_r+0x104>
 800fb7e:	4252      	negs	r2, r2
 800fb80:	f043 0302 	orr.w	r3, r3, #2
 800fb84:	9207      	str	r2, [sp, #28]
 800fb86:	9304      	str	r3, [sp, #16]
 800fb88:	783b      	ldrb	r3, [r7, #0]
 800fb8a:	2b2e      	cmp	r3, #46	; 0x2e
 800fb8c:	d10c      	bne.n	800fba8 <_svfiprintf_r+0x124>
 800fb8e:	787b      	ldrb	r3, [r7, #1]
 800fb90:	2b2a      	cmp	r3, #42	; 0x2a
 800fb92:	d133      	bne.n	800fbfc <_svfiprintf_r+0x178>
 800fb94:	9b03      	ldr	r3, [sp, #12]
 800fb96:	3702      	adds	r7, #2
 800fb98:	1d1a      	adds	r2, r3, #4
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	9203      	str	r2, [sp, #12]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	bfb8      	it	lt
 800fba2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fba6:	9305      	str	r3, [sp, #20]
 800fba8:	4d2e      	ldr	r5, [pc, #184]	; (800fc64 <_svfiprintf_r+0x1e0>)
 800fbaa:	2203      	movs	r2, #3
 800fbac:	7839      	ldrb	r1, [r7, #0]
 800fbae:	4628      	mov	r0, r5
 800fbb0:	f7ff fb64 	bl	800f27c <memchr>
 800fbb4:	b138      	cbz	r0, 800fbc6 <_svfiprintf_r+0x142>
 800fbb6:	2340      	movs	r3, #64	; 0x40
 800fbb8:	1b40      	subs	r0, r0, r5
 800fbba:	fa03 f000 	lsl.w	r0, r3, r0
 800fbbe:	9b04      	ldr	r3, [sp, #16]
 800fbc0:	3701      	adds	r7, #1
 800fbc2:	4303      	orrs	r3, r0
 800fbc4:	9304      	str	r3, [sp, #16]
 800fbc6:	7839      	ldrb	r1, [r7, #0]
 800fbc8:	2206      	movs	r2, #6
 800fbca:	4827      	ldr	r0, [pc, #156]	; (800fc68 <_svfiprintf_r+0x1e4>)
 800fbcc:	1c7e      	adds	r6, r7, #1
 800fbce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbd2:	f7ff fb53 	bl	800f27c <memchr>
 800fbd6:	2800      	cmp	r0, #0
 800fbd8:	d038      	beq.n	800fc4c <_svfiprintf_r+0x1c8>
 800fbda:	4b24      	ldr	r3, [pc, #144]	; (800fc6c <_svfiprintf_r+0x1e8>)
 800fbdc:	bb13      	cbnz	r3, 800fc24 <_svfiprintf_r+0x1a0>
 800fbde:	9b03      	ldr	r3, [sp, #12]
 800fbe0:	3307      	adds	r3, #7
 800fbe2:	f023 0307 	bic.w	r3, r3, #7
 800fbe6:	3308      	adds	r3, #8
 800fbe8:	9303      	str	r3, [sp, #12]
 800fbea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbec:	444b      	add	r3, r9
 800fbee:	9309      	str	r3, [sp, #36]	; 0x24
 800fbf0:	e76d      	b.n	800face <_svfiprintf_r+0x4a>
 800fbf2:	fb05 3202 	mla	r2, r5, r2, r3
 800fbf6:	2001      	movs	r0, #1
 800fbf8:	460f      	mov	r7, r1
 800fbfa:	e7a6      	b.n	800fb4a <_svfiprintf_r+0xc6>
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	250a      	movs	r5, #10
 800fc00:	4619      	mov	r1, r3
 800fc02:	3701      	adds	r7, #1
 800fc04:	9305      	str	r3, [sp, #20]
 800fc06:	4638      	mov	r0, r7
 800fc08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fc0c:	3a30      	subs	r2, #48	; 0x30
 800fc0e:	2a09      	cmp	r2, #9
 800fc10:	d903      	bls.n	800fc1a <_svfiprintf_r+0x196>
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d0c8      	beq.n	800fba8 <_svfiprintf_r+0x124>
 800fc16:	9105      	str	r1, [sp, #20]
 800fc18:	e7c6      	b.n	800fba8 <_svfiprintf_r+0x124>
 800fc1a:	fb05 2101 	mla	r1, r5, r1, r2
 800fc1e:	2301      	movs	r3, #1
 800fc20:	4607      	mov	r7, r0
 800fc22:	e7f0      	b.n	800fc06 <_svfiprintf_r+0x182>
 800fc24:	ab03      	add	r3, sp, #12
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	4622      	mov	r2, r4
 800fc2a:	4b11      	ldr	r3, [pc, #68]	; (800fc70 <_svfiprintf_r+0x1ec>)
 800fc2c:	a904      	add	r1, sp, #16
 800fc2e:	4640      	mov	r0, r8
 800fc30:	f7fe f89a 	bl	800dd68 <_printf_float>
 800fc34:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fc38:	4681      	mov	r9, r0
 800fc3a:	d1d6      	bne.n	800fbea <_svfiprintf_r+0x166>
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	065b      	lsls	r3, r3, #25
 800fc40:	f53f af35 	bmi.w	800faae <_svfiprintf_r+0x2a>
 800fc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc46:	b01d      	add	sp, #116	; 0x74
 800fc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc4c:	ab03      	add	r3, sp, #12
 800fc4e:	9300      	str	r3, [sp, #0]
 800fc50:	4622      	mov	r2, r4
 800fc52:	4b07      	ldr	r3, [pc, #28]	; (800fc70 <_svfiprintf_r+0x1ec>)
 800fc54:	a904      	add	r1, sp, #16
 800fc56:	4640      	mov	r0, r8
 800fc58:	f7fe fb32 	bl	800e2c0 <_printf_i>
 800fc5c:	e7ea      	b.n	800fc34 <_svfiprintf_r+0x1b0>
 800fc5e:	bf00      	nop
 800fc60:	08010c9c 	.word	0x08010c9c
 800fc64:	08010ca2 	.word	0x08010ca2
 800fc68:	08010ca6 	.word	0x08010ca6
 800fc6c:	0800dd69 	.word	0x0800dd69
 800fc70:	0800f9d1 	.word	0x0800f9d1

0800fc74 <_sbrk_r>:
 800fc74:	b538      	push	{r3, r4, r5, lr}
 800fc76:	2300      	movs	r3, #0
 800fc78:	4c05      	ldr	r4, [pc, #20]	; (800fc90 <_sbrk_r+0x1c>)
 800fc7a:	4605      	mov	r5, r0
 800fc7c:	4608      	mov	r0, r1
 800fc7e:	6023      	str	r3, [r4, #0]
 800fc80:	f7f8 fb3a 	bl	80082f8 <_sbrk>
 800fc84:	1c43      	adds	r3, r0, #1
 800fc86:	d102      	bne.n	800fc8e <_sbrk_r+0x1a>
 800fc88:	6823      	ldr	r3, [r4, #0]
 800fc8a:	b103      	cbz	r3, 800fc8e <_sbrk_r+0x1a>
 800fc8c:	602b      	str	r3, [r5, #0]
 800fc8e:	bd38      	pop	{r3, r4, r5, pc}
 800fc90:	20001710 	.word	0x20001710

0800fc94 <memmove>:
 800fc94:	4288      	cmp	r0, r1
 800fc96:	b510      	push	{r4, lr}
 800fc98:	eb01 0302 	add.w	r3, r1, r2
 800fc9c:	d807      	bhi.n	800fcae <memmove+0x1a>
 800fc9e:	1e42      	subs	r2, r0, #1
 800fca0:	4299      	cmp	r1, r3
 800fca2:	d00a      	beq.n	800fcba <memmove+0x26>
 800fca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fca8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fcac:	e7f8      	b.n	800fca0 <memmove+0xc>
 800fcae:	4283      	cmp	r3, r0
 800fcb0:	d9f5      	bls.n	800fc9e <memmove+0xa>
 800fcb2:	1881      	adds	r1, r0, r2
 800fcb4:	1ad2      	subs	r2, r2, r3
 800fcb6:	42d3      	cmn	r3, r2
 800fcb8:	d100      	bne.n	800fcbc <memmove+0x28>
 800fcba:	bd10      	pop	{r4, pc}
 800fcbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcc0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fcc4:	e7f7      	b.n	800fcb6 <memmove+0x22>

0800fcc6 <__malloc_lock>:
 800fcc6:	4770      	bx	lr

0800fcc8 <__malloc_unlock>:
 800fcc8:	4770      	bx	lr

0800fcca <_realloc_r>:
 800fcca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fccc:	4607      	mov	r7, r0
 800fcce:	4614      	mov	r4, r2
 800fcd0:	460e      	mov	r6, r1
 800fcd2:	b921      	cbnz	r1, 800fcde <_realloc_r+0x14>
 800fcd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fcd8:	4611      	mov	r1, r2
 800fcda:	f7ff be1f 	b.w	800f91c <_malloc_r>
 800fcde:	b922      	cbnz	r2, 800fcea <_realloc_r+0x20>
 800fce0:	f7ff fdd0 	bl	800f884 <_free_r>
 800fce4:	4625      	mov	r5, r4
 800fce6:	4628      	mov	r0, r5
 800fce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcea:	f000 f814 	bl	800fd16 <_malloc_usable_size_r>
 800fcee:	42a0      	cmp	r0, r4
 800fcf0:	d20f      	bcs.n	800fd12 <_realloc_r+0x48>
 800fcf2:	4621      	mov	r1, r4
 800fcf4:	4638      	mov	r0, r7
 800fcf6:	f7ff fe11 	bl	800f91c <_malloc_r>
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	2800      	cmp	r0, #0
 800fcfe:	d0f2      	beq.n	800fce6 <_realloc_r+0x1c>
 800fd00:	4631      	mov	r1, r6
 800fd02:	4622      	mov	r2, r4
 800fd04:	f7ff fac8 	bl	800f298 <memcpy>
 800fd08:	4631      	mov	r1, r6
 800fd0a:	4638      	mov	r0, r7
 800fd0c:	f7ff fdba 	bl	800f884 <_free_r>
 800fd10:	e7e9      	b.n	800fce6 <_realloc_r+0x1c>
 800fd12:	4635      	mov	r5, r6
 800fd14:	e7e7      	b.n	800fce6 <_realloc_r+0x1c>

0800fd16 <_malloc_usable_size_r>:
 800fd16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd1a:	1f18      	subs	r0, r3, #4
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	bfbc      	itt	lt
 800fd20:	580b      	ldrlt	r3, [r1, r0]
 800fd22:	18c0      	addlt	r0, r0, r3
 800fd24:	4770      	bx	lr
	...

0800fd28 <log>:
 800fd28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800fd2c:	b08a      	sub	sp, #40	; 0x28
 800fd2e:	4604      	mov	r4, r0
 800fd30:	460d      	mov	r5, r1
 800fd32:	f000 f875 	bl	800fe20 <__ieee754_log>
 800fd36:	4b34      	ldr	r3, [pc, #208]	; (800fe08 <log+0xe0>)
 800fd38:	4680      	mov	r8, r0
 800fd3a:	f993 6000 	ldrsb.w	r6, [r3]
 800fd3e:	4689      	mov	r9, r1
 800fd40:	1c73      	adds	r3, r6, #1
 800fd42:	d05b      	beq.n	800fdfc <log+0xd4>
 800fd44:	4622      	mov	r2, r4
 800fd46:	462b      	mov	r3, r5
 800fd48:	4620      	mov	r0, r4
 800fd4a:	4629      	mov	r1, r5
 800fd4c:	f7f0 fe9a 	bl	8000a84 <__aeabi_dcmpun>
 800fd50:	2800      	cmp	r0, #0
 800fd52:	d153      	bne.n	800fdfc <log+0xd4>
 800fd54:	2200      	movs	r2, #0
 800fd56:	2300      	movs	r3, #0
 800fd58:	4620      	mov	r0, r4
 800fd5a:	4629      	mov	r1, r5
 800fd5c:	f7f0 fe88 	bl	8000a70 <__aeabi_dcmpgt>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	d14b      	bne.n	800fdfc <log+0xd4>
 800fd64:	4b29      	ldr	r3, [pc, #164]	; (800fe0c <log+0xe4>)
 800fd66:	9008      	str	r0, [sp, #32]
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fd6e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800fd72:	b9a6      	cbnz	r6, 800fd9e <log+0x76>
 800fd74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800fd78:	4b25      	ldr	r3, [pc, #148]	; (800fe10 <log+0xe8>)
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fd80:	4629      	mov	r1, r5
 800fd82:	2200      	movs	r2, #0
 800fd84:	2300      	movs	r3, #0
 800fd86:	f7f0 fe4b 	bl	8000a20 <__aeabi_dcmpeq>
 800fd8a:	bb40      	cbnz	r0, 800fdde <log+0xb6>
 800fd8c:	2301      	movs	r3, #1
 800fd8e:	2e02      	cmp	r6, #2
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	d119      	bne.n	800fdc8 <log+0xa0>
 800fd94:	f7fd feea 	bl	800db6c <__errno>
 800fd98:	2321      	movs	r3, #33	; 0x21
 800fd9a:	6003      	str	r3, [r0, #0]
 800fd9c:	e019      	b.n	800fdd2 <log+0xaa>
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4b1c      	ldr	r3, [pc, #112]	; (800fe14 <log+0xec>)
 800fda2:	4620      	mov	r0, r4
 800fda4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fda8:	4629      	mov	r1, r5
 800fdaa:	2200      	movs	r2, #0
 800fdac:	2300      	movs	r3, #0
 800fdae:	f7f0 fe37 	bl	8000a20 <__aeabi_dcmpeq>
 800fdb2:	2800      	cmp	r0, #0
 800fdb4:	d0ea      	beq.n	800fd8c <log+0x64>
 800fdb6:	2302      	movs	r3, #2
 800fdb8:	429e      	cmp	r6, r3
 800fdba:	9300      	str	r3, [sp, #0]
 800fdbc:	d111      	bne.n	800fde2 <log+0xba>
 800fdbe:	f7fd fed5 	bl	800db6c <__errno>
 800fdc2:	2322      	movs	r3, #34	; 0x22
 800fdc4:	6003      	str	r3, [r0, #0]
 800fdc6:	e011      	b.n	800fdec <log+0xc4>
 800fdc8:	4668      	mov	r0, sp
 800fdca:	f000 f9db 	bl	8010184 <matherr>
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	d0e0      	beq.n	800fd94 <log+0x6c>
 800fdd2:	4811      	ldr	r0, [pc, #68]	; (800fe18 <log+0xf0>)
 800fdd4:	f000 f9d8 	bl	8010188 <nan>
 800fdd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fddc:	e006      	b.n	800fdec <log+0xc4>
 800fdde:	2302      	movs	r3, #2
 800fde0:	9300      	str	r3, [sp, #0]
 800fde2:	4668      	mov	r0, sp
 800fde4:	f000 f9ce 	bl	8010184 <matherr>
 800fde8:	2800      	cmp	r0, #0
 800fdea:	d0e8      	beq.n	800fdbe <log+0x96>
 800fdec:	9b08      	ldr	r3, [sp, #32]
 800fdee:	b11b      	cbz	r3, 800fdf8 <log+0xd0>
 800fdf0:	f7fd febc 	bl	800db6c <__errno>
 800fdf4:	9b08      	ldr	r3, [sp, #32]
 800fdf6:	6003      	str	r3, [r0, #0]
 800fdf8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800fdfc:	4640      	mov	r0, r8
 800fdfe:	4649      	mov	r1, r9
 800fe00:	b00a      	add	sp, #40	; 0x28
 800fe02:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800fe06:	bf00      	nop
 800fe08:	20000230 	.word	0x20000230
 800fe0c:	08010cad 	.word	0x08010cad
 800fe10:	c7efffff 	.word	0xc7efffff
 800fe14:	fff00000 	.word	0xfff00000
 800fe18:	08010ca1 	.word	0x08010ca1
 800fe1c:	00000000 	.word	0x00000000

0800fe20 <__ieee754_log>:
 800fe20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800fe28:	b087      	sub	sp, #28
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	460d      	mov	r5, r1
 800fe30:	da24      	bge.n	800fe7c <__ieee754_log+0x5c>
 800fe32:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800fe36:	4304      	orrs	r4, r0
 800fe38:	d108      	bne.n	800fe4c <__ieee754_log+0x2c>
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	2000      	movs	r0, #0
 800fe40:	49cb      	ldr	r1, [pc, #812]	; (8010170 <__ieee754_log+0x350>)
 800fe42:	f7f0 fcaf 	bl	80007a4 <__aeabi_ddiv>
 800fe46:	b007      	add	sp, #28
 800fe48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe4c:	2900      	cmp	r1, #0
 800fe4e:	da04      	bge.n	800fe5a <__ieee754_log+0x3a>
 800fe50:	f7f0 f9c6 	bl	80001e0 <__aeabi_dsub>
 800fe54:	2200      	movs	r2, #0
 800fe56:	2300      	movs	r3, #0
 800fe58:	e7f3      	b.n	800fe42 <__ieee754_log+0x22>
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	4bc5      	ldr	r3, [pc, #788]	; (8010174 <__ieee754_log+0x354>)
 800fe5e:	f7f0 fb77 	bl	8000550 <__aeabi_dmul>
 800fe62:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800fe66:	4602      	mov	r2, r0
 800fe68:	460b      	mov	r3, r1
 800fe6a:	460d      	mov	r5, r1
 800fe6c:	49c2      	ldr	r1, [pc, #776]	; (8010178 <__ieee754_log+0x358>)
 800fe6e:	428d      	cmp	r5, r1
 800fe70:	dd06      	ble.n	800fe80 <__ieee754_log+0x60>
 800fe72:	4610      	mov	r0, r2
 800fe74:	4619      	mov	r1, r3
 800fe76:	f7f0 f9b5 	bl	80001e4 <__adddf3>
 800fe7a:	e7e4      	b.n	800fe46 <__ieee754_log+0x26>
 800fe7c:	2600      	movs	r6, #0
 800fe7e:	e7f5      	b.n	800fe6c <__ieee754_log+0x4c>
 800fe80:	152c      	asrs	r4, r5, #20
 800fe82:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800fe86:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800fe8a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800fe8e:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800fe92:	4426      	add	r6, r4
 800fe94:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800fe98:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800fe9c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800fea0:	ea41 0305 	orr.w	r3, r1, r5
 800fea4:	4610      	mov	r0, r2
 800fea6:	4619      	mov	r1, r3
 800fea8:	2200      	movs	r2, #0
 800feaa:	4bb4      	ldr	r3, [pc, #720]	; (801017c <__ieee754_log+0x35c>)
 800feac:	f7f0 f998 	bl	80001e0 <__aeabi_dsub>
 800feb0:	1cab      	adds	r3, r5, #2
 800feb2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800febc:	4682      	mov	sl, r0
 800febe:	468b      	mov	fp, r1
 800fec0:	f04f 0200 	mov.w	r2, #0
 800fec4:	dc53      	bgt.n	800ff6e <__ieee754_log+0x14e>
 800fec6:	2300      	movs	r3, #0
 800fec8:	f7f0 fdaa 	bl	8000a20 <__aeabi_dcmpeq>
 800fecc:	b1d0      	cbz	r0, 800ff04 <__ieee754_log+0xe4>
 800fece:	2c00      	cmp	r4, #0
 800fed0:	f000 8120 	beq.w	8010114 <__ieee754_log+0x2f4>
 800fed4:	4620      	mov	r0, r4
 800fed6:	f7f0 fad1 	bl	800047c <__aeabi_i2d>
 800feda:	a391      	add	r3, pc, #580	; (adr r3, 8010120 <__ieee754_log+0x300>)
 800fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee0:	4606      	mov	r6, r0
 800fee2:	460f      	mov	r7, r1
 800fee4:	f7f0 fb34 	bl	8000550 <__aeabi_dmul>
 800fee8:	a38f      	add	r3, pc, #572	; (adr r3, 8010128 <__ieee754_log+0x308>)
 800feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feee:	4604      	mov	r4, r0
 800fef0:	460d      	mov	r5, r1
 800fef2:	4630      	mov	r0, r6
 800fef4:	4639      	mov	r1, r7
 800fef6:	f7f0 fb2b 	bl	8000550 <__aeabi_dmul>
 800fefa:	4602      	mov	r2, r0
 800fefc:	460b      	mov	r3, r1
 800fefe:	4620      	mov	r0, r4
 800ff00:	4629      	mov	r1, r5
 800ff02:	e7b8      	b.n	800fe76 <__ieee754_log+0x56>
 800ff04:	a38a      	add	r3, pc, #552	; (adr r3, 8010130 <__ieee754_log+0x310>)
 800ff06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff0a:	4650      	mov	r0, sl
 800ff0c:	4659      	mov	r1, fp
 800ff0e:	f7f0 fb1f 	bl	8000550 <__aeabi_dmul>
 800ff12:	4602      	mov	r2, r0
 800ff14:	460b      	mov	r3, r1
 800ff16:	2000      	movs	r0, #0
 800ff18:	4999      	ldr	r1, [pc, #612]	; (8010180 <__ieee754_log+0x360>)
 800ff1a:	f7f0 f961 	bl	80001e0 <__aeabi_dsub>
 800ff1e:	4652      	mov	r2, sl
 800ff20:	4606      	mov	r6, r0
 800ff22:	460f      	mov	r7, r1
 800ff24:	465b      	mov	r3, fp
 800ff26:	4650      	mov	r0, sl
 800ff28:	4659      	mov	r1, fp
 800ff2a:	f7f0 fb11 	bl	8000550 <__aeabi_dmul>
 800ff2e:	4602      	mov	r2, r0
 800ff30:	460b      	mov	r3, r1
 800ff32:	4630      	mov	r0, r6
 800ff34:	4639      	mov	r1, r7
 800ff36:	f7f0 fb0b 	bl	8000550 <__aeabi_dmul>
 800ff3a:	4606      	mov	r6, r0
 800ff3c:	460f      	mov	r7, r1
 800ff3e:	b914      	cbnz	r4, 800ff46 <__ieee754_log+0x126>
 800ff40:	4632      	mov	r2, r6
 800ff42:	463b      	mov	r3, r7
 800ff44:	e0a0      	b.n	8010088 <__ieee754_log+0x268>
 800ff46:	4620      	mov	r0, r4
 800ff48:	f7f0 fa98 	bl	800047c <__aeabi_i2d>
 800ff4c:	a374      	add	r3, pc, #464	; (adr r3, 8010120 <__ieee754_log+0x300>)
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	4680      	mov	r8, r0
 800ff54:	4689      	mov	r9, r1
 800ff56:	f7f0 fafb 	bl	8000550 <__aeabi_dmul>
 800ff5a:	a373      	add	r3, pc, #460	; (adr r3, 8010128 <__ieee754_log+0x308>)
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	4604      	mov	r4, r0
 800ff62:	460d      	mov	r5, r1
 800ff64:	4640      	mov	r0, r8
 800ff66:	4649      	mov	r1, r9
 800ff68:	f7f0 faf2 	bl	8000550 <__aeabi_dmul>
 800ff6c:	e0a5      	b.n	80100ba <__ieee754_log+0x29a>
 800ff6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ff72:	f7f0 f937 	bl	80001e4 <__adddf3>
 800ff76:	4602      	mov	r2, r0
 800ff78:	460b      	mov	r3, r1
 800ff7a:	4650      	mov	r0, sl
 800ff7c:	4659      	mov	r1, fp
 800ff7e:	f7f0 fc11 	bl	80007a4 <__aeabi_ddiv>
 800ff82:	e9cd 0100 	strd	r0, r1, [sp]
 800ff86:	4620      	mov	r0, r4
 800ff88:	f7f0 fa78 	bl	800047c <__aeabi_i2d>
 800ff8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ff94:	4610      	mov	r0, r2
 800ff96:	4619      	mov	r1, r3
 800ff98:	f7f0 fada 	bl	8000550 <__aeabi_dmul>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	460b      	mov	r3, r1
 800ffa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffa4:	f7f0 fad4 	bl	8000550 <__aeabi_dmul>
 800ffa8:	a363      	add	r3, pc, #396	; (adr r3, 8010138 <__ieee754_log+0x318>)
 800ffaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffae:	4680      	mov	r8, r0
 800ffb0:	4689      	mov	r9, r1
 800ffb2:	f7f0 facd 	bl	8000550 <__aeabi_dmul>
 800ffb6:	a362      	add	r3, pc, #392	; (adr r3, 8010140 <__ieee754_log+0x320>)
 800ffb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffbc:	f7f0 f912 	bl	80001e4 <__adddf3>
 800ffc0:	4642      	mov	r2, r8
 800ffc2:	464b      	mov	r3, r9
 800ffc4:	f7f0 fac4 	bl	8000550 <__aeabi_dmul>
 800ffc8:	a35f      	add	r3, pc, #380	; (adr r3, 8010148 <__ieee754_log+0x328>)
 800ffca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffce:	f7f0 f909 	bl	80001e4 <__adddf3>
 800ffd2:	4642      	mov	r2, r8
 800ffd4:	464b      	mov	r3, r9
 800ffd6:	f7f0 fabb 	bl	8000550 <__aeabi_dmul>
 800ffda:	a35d      	add	r3, pc, #372	; (adr r3, 8010150 <__ieee754_log+0x330>)
 800ffdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffe0:	f7f0 f900 	bl	80001e4 <__adddf3>
 800ffe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffe8:	f7f0 fab2 	bl	8000550 <__aeabi_dmul>
 800ffec:	a35a      	add	r3, pc, #360	; (adr r3, 8010158 <__ieee754_log+0x338>)
 800ffee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fff6:	4640      	mov	r0, r8
 800fff8:	4649      	mov	r1, r9
 800fffa:	f7f0 faa9 	bl	8000550 <__aeabi_dmul>
 800fffe:	a358      	add	r3, pc, #352	; (adr r3, 8010160 <__ieee754_log+0x340>)
 8010000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010004:	f7f0 f8ee 	bl	80001e4 <__adddf3>
 8010008:	4642      	mov	r2, r8
 801000a:	464b      	mov	r3, r9
 801000c:	f7f0 faa0 	bl	8000550 <__aeabi_dmul>
 8010010:	a355      	add	r3, pc, #340	; (adr r3, 8010168 <__ieee754_log+0x348>)
 8010012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010016:	f7f0 f8e5 	bl	80001e4 <__adddf3>
 801001a:	4642      	mov	r2, r8
 801001c:	464b      	mov	r3, r9
 801001e:	f7f0 fa97 	bl	8000550 <__aeabi_dmul>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801002a:	f7f0 f8db 	bl	80001e4 <__adddf3>
 801002e:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8010032:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010036:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801003a:	3551      	adds	r5, #81	; 0x51
 801003c:	4335      	orrs	r5, r6
 801003e:	2d00      	cmp	r5, #0
 8010040:	4680      	mov	r8, r0
 8010042:	4689      	mov	r9, r1
 8010044:	dd48      	ble.n	80100d8 <__ieee754_log+0x2b8>
 8010046:	2200      	movs	r2, #0
 8010048:	4b4d      	ldr	r3, [pc, #308]	; (8010180 <__ieee754_log+0x360>)
 801004a:	4650      	mov	r0, sl
 801004c:	4659      	mov	r1, fp
 801004e:	f7f0 fa7f 	bl	8000550 <__aeabi_dmul>
 8010052:	4652      	mov	r2, sl
 8010054:	465b      	mov	r3, fp
 8010056:	f7f0 fa7b 	bl	8000550 <__aeabi_dmul>
 801005a:	4602      	mov	r2, r0
 801005c:	460b      	mov	r3, r1
 801005e:	4606      	mov	r6, r0
 8010060:	460f      	mov	r7, r1
 8010062:	4640      	mov	r0, r8
 8010064:	4649      	mov	r1, r9
 8010066:	f7f0 f8bd 	bl	80001e4 <__adddf3>
 801006a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801006e:	f7f0 fa6f 	bl	8000550 <__aeabi_dmul>
 8010072:	4680      	mov	r8, r0
 8010074:	4689      	mov	r9, r1
 8010076:	b964      	cbnz	r4, 8010092 <__ieee754_log+0x272>
 8010078:	4602      	mov	r2, r0
 801007a:	460b      	mov	r3, r1
 801007c:	4630      	mov	r0, r6
 801007e:	4639      	mov	r1, r7
 8010080:	f7f0 f8ae 	bl	80001e0 <__aeabi_dsub>
 8010084:	4602      	mov	r2, r0
 8010086:	460b      	mov	r3, r1
 8010088:	4650      	mov	r0, sl
 801008a:	4659      	mov	r1, fp
 801008c:	f7f0 f8a8 	bl	80001e0 <__aeabi_dsub>
 8010090:	e6d9      	b.n	800fe46 <__ieee754_log+0x26>
 8010092:	a323      	add	r3, pc, #140	; (adr r3, 8010120 <__ieee754_log+0x300>)
 8010094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010098:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801009c:	f7f0 fa58 	bl	8000550 <__aeabi_dmul>
 80100a0:	a321      	add	r3, pc, #132	; (adr r3, 8010128 <__ieee754_log+0x308>)
 80100a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a6:	4604      	mov	r4, r0
 80100a8:	460d      	mov	r5, r1
 80100aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80100ae:	f7f0 fa4f 	bl	8000550 <__aeabi_dmul>
 80100b2:	4642      	mov	r2, r8
 80100b4:	464b      	mov	r3, r9
 80100b6:	f7f0 f895 	bl	80001e4 <__adddf3>
 80100ba:	4602      	mov	r2, r0
 80100bc:	460b      	mov	r3, r1
 80100be:	4630      	mov	r0, r6
 80100c0:	4639      	mov	r1, r7
 80100c2:	f7f0 f88d 	bl	80001e0 <__aeabi_dsub>
 80100c6:	4652      	mov	r2, sl
 80100c8:	465b      	mov	r3, fp
 80100ca:	f7f0 f889 	bl	80001e0 <__aeabi_dsub>
 80100ce:	4602      	mov	r2, r0
 80100d0:	460b      	mov	r3, r1
 80100d2:	4620      	mov	r0, r4
 80100d4:	4629      	mov	r1, r5
 80100d6:	e7d9      	b.n	801008c <__ieee754_log+0x26c>
 80100d8:	4602      	mov	r2, r0
 80100da:	460b      	mov	r3, r1
 80100dc:	4650      	mov	r0, sl
 80100de:	4659      	mov	r1, fp
 80100e0:	f7f0 f87e 	bl	80001e0 <__aeabi_dsub>
 80100e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100e8:	f7f0 fa32 	bl	8000550 <__aeabi_dmul>
 80100ec:	4606      	mov	r6, r0
 80100ee:	460f      	mov	r7, r1
 80100f0:	2c00      	cmp	r4, #0
 80100f2:	f43f af25 	beq.w	800ff40 <__ieee754_log+0x120>
 80100f6:	a30a      	add	r3, pc, #40	; (adr r3, 8010120 <__ieee754_log+0x300>)
 80100f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010100:	f7f0 fa26 	bl	8000550 <__aeabi_dmul>
 8010104:	a308      	add	r3, pc, #32	; (adr r3, 8010128 <__ieee754_log+0x308>)
 8010106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010a:	4604      	mov	r4, r0
 801010c:	460d      	mov	r5, r1
 801010e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010112:	e729      	b.n	800ff68 <__ieee754_log+0x148>
 8010114:	2000      	movs	r0, #0
 8010116:	2100      	movs	r1, #0
 8010118:	e695      	b.n	800fe46 <__ieee754_log+0x26>
 801011a:	bf00      	nop
 801011c:	f3af 8000 	nop.w
 8010120:	fee00000 	.word	0xfee00000
 8010124:	3fe62e42 	.word	0x3fe62e42
 8010128:	35793c76 	.word	0x35793c76
 801012c:	3dea39ef 	.word	0x3dea39ef
 8010130:	55555555 	.word	0x55555555
 8010134:	3fd55555 	.word	0x3fd55555
 8010138:	df3e5244 	.word	0xdf3e5244
 801013c:	3fc2f112 	.word	0x3fc2f112
 8010140:	96cb03de 	.word	0x96cb03de
 8010144:	3fc74664 	.word	0x3fc74664
 8010148:	94229359 	.word	0x94229359
 801014c:	3fd24924 	.word	0x3fd24924
 8010150:	55555593 	.word	0x55555593
 8010154:	3fe55555 	.word	0x3fe55555
 8010158:	d078c69f 	.word	0xd078c69f
 801015c:	3fc39a09 	.word	0x3fc39a09
 8010160:	1d8e78af 	.word	0x1d8e78af
 8010164:	3fcc71c5 	.word	0x3fcc71c5
 8010168:	9997fa04 	.word	0x9997fa04
 801016c:	3fd99999 	.word	0x3fd99999
 8010170:	c3500000 	.word	0xc3500000
 8010174:	43500000 	.word	0x43500000
 8010178:	7fefffff 	.word	0x7fefffff
 801017c:	3ff00000 	.word	0x3ff00000
 8010180:	3fe00000 	.word	0x3fe00000

08010184 <matherr>:
 8010184:	2000      	movs	r0, #0
 8010186:	4770      	bx	lr

08010188 <nan>:
 8010188:	2000      	movs	r0, #0
 801018a:	4901      	ldr	r1, [pc, #4]	; (8010190 <nan+0x8>)
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	7ff80000 	.word	0x7ff80000

08010194 <_init>:
 8010194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010196:	bf00      	nop
 8010198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801019a:	bc08      	pop	{r3}
 801019c:	469e      	mov	lr, r3
 801019e:	4770      	bx	lr

080101a0 <_fini>:
 80101a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101a2:	bf00      	nop
 80101a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101a6:	bc08      	pop	{r3}
 80101a8:	469e      	mov	lr, r3
 80101aa:	4770      	bx	lr
